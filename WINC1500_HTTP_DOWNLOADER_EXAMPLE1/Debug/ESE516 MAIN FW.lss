
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00027bac  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f8  20000000  00039bac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005798  20000300  00039eb0  00030300  2**4
                  ALLOC
  3 .stack        00002000  20005a98  0003f648  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
  6 .debug_info   001203f3  00000000  00000000  00030379  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010c84  00000000  00000000  0015076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000126a3  00000000  00000000  001613f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003308  00000000  00000000  00173a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002f80  00000000  00000000  00176d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029c5a  00000000  00000000  00179d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005b667  00000000  00000000  001a3975  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bdd7c  00000000  00000000  001fefdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000bec0  00000000  00000000  002bcd58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	98 7a 00 20 c9 a7 02 00 c1 a8 02 00 c1 a8 02 00     .z. ............
	...
   1202c:	61 99 01 00 00 00 00 00 00 00 00 00 81 9a 01 00     a...............
   1203c:	c9 9a 01 00 c1 a8 02 00 c1 a8 02 00 c1 a8 02 00     ................
   1204c:	19 69 02 00 45 5e 02 00 c1 a8 02 00 a9 2c 01 00     .i..E^.......,..
   1205c:	c1 a8 02 00 ed 2d 01 00 bd 6f 02 00 d5 6f 02 00     .....-...o...o..
   1206c:	ed 6f 02 00 05 70 02 00 1d 70 02 00 35 70 02 00     .o...p...p..5p..
   1207c:	11 a7 02 00 25 a7 02 00 39 a7 02 00 4d 76 01 00     ....%...9...Mv..
   1208c:	61 76 01 00 75 76 01 00 00 00 00 00 00 00 00 00     av..uv..........
   1209c:	31 2b 01 00 c1 a8 02 00 6d 2c 01 00 c1 a8 02 00     1+......m,......
   120ac:	c1 a8 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	00039bac 	.word	0x00039bac

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	00039bac 	.word	0x00039bac
   1210c:	00039bac 	.word	0x00039bac
   12110:	00000000 	.word	0x00000000

00012114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12114:	b580      	push	{r7, lr}
   12116:	b082      	sub	sp, #8
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	2200      	movs	r2, #0
   12120:	701a      	strb	r2, [r3, #0]
}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	b002      	add	sp, #8
   12128:	bd80      	pop	{r7, pc}
	...

0001212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1212c:	b580      	push	{r7, lr}
   1212e:	b082      	sub	sp, #8
   12130:	af00      	add	r7, sp, #0
   12132:	0002      	movs	r2, r0
   12134:	6039      	str	r1, [r7, #0]
   12136:	1dfb      	adds	r3, r7, #7
   12138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1213a:	1dfb      	adds	r3, r7, #7
   1213c:	781b      	ldrb	r3, [r3, #0]
   1213e:	2b01      	cmp	r3, #1
   12140:	d00a      	beq.n	12158 <system_apb_clock_set_mask+0x2c>
   12142:	2b02      	cmp	r3, #2
   12144:	d00f      	beq.n	12166 <system_apb_clock_set_mask+0x3a>
   12146:	2b00      	cmp	r3, #0
   12148:	d114      	bne.n	12174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1214a:	4b0e      	ldr	r3, [pc, #56]	; (12184 <system_apb_clock_set_mask+0x58>)
   1214c:	4a0d      	ldr	r2, [pc, #52]	; (12184 <system_apb_clock_set_mask+0x58>)
   1214e:	6991      	ldr	r1, [r2, #24]
   12150:	683a      	ldr	r2, [r7, #0]
   12152:	430a      	orrs	r2, r1
   12154:	619a      	str	r2, [r3, #24]
			break;
   12156:	e00f      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12158:	4b0a      	ldr	r3, [pc, #40]	; (12184 <system_apb_clock_set_mask+0x58>)
   1215a:	4a0a      	ldr	r2, [pc, #40]	; (12184 <system_apb_clock_set_mask+0x58>)
   1215c:	69d1      	ldr	r1, [r2, #28]
   1215e:	683a      	ldr	r2, [r7, #0]
   12160:	430a      	orrs	r2, r1
   12162:	61da      	str	r2, [r3, #28]
			break;
   12164:	e008      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12166:	4b07      	ldr	r3, [pc, #28]	; (12184 <system_apb_clock_set_mask+0x58>)
   12168:	4a06      	ldr	r2, [pc, #24]	; (12184 <system_apb_clock_set_mask+0x58>)
   1216a:	6a11      	ldr	r1, [r2, #32]
   1216c:	683a      	ldr	r2, [r7, #0]
   1216e:	430a      	orrs	r2, r1
   12170:	621a      	str	r2, [r3, #32]
			break;
   12172:	e001      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12174:	2317      	movs	r3, #23
   12176:	e000      	b.n	1217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12178:	2300      	movs	r3, #0
}
   1217a:	0018      	movs	r0, r3
   1217c:	46bd      	mov	sp, r7
   1217e:	b002      	add	sp, #8
   12180:	bd80      	pop	{r7, pc}
   12182:	46c0      	nop			; (mov r8, r8)
   12184:	40000400 	.word	0x40000400

00012188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   12188:	b580      	push	{r7, lr}
   1218a:	b082      	sub	sp, #8
   1218c:	af00      	add	r7, sp, #0
   1218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12190:	687b      	ldr	r3, [r7, #4]
   12192:	2280      	movs	r2, #128	; 0x80
   12194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12196:	687b      	ldr	r3, [r7, #4]
   12198:	2200      	movs	r2, #0
   1219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1219c:	687b      	ldr	r3, [r7, #4]
   1219e:	2201      	movs	r2, #1
   121a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   121a2:	687b      	ldr	r3, [r7, #4]
   121a4:	2200      	movs	r2, #0
   121a6:	70da      	strb	r2, [r3, #3]
}
   121a8:	46c0      	nop			; (mov r8, r8)
   121aa:	46bd      	mov	sp, r7
   121ac:	b002      	add	sp, #8
   121ae:	bd80      	pop	{r7, pc}

000121b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   121b0:	b580      	push	{r7, lr}
   121b2:	b082      	sub	sp, #8
   121b4:	af00      	add	r7, sp, #0
   121b6:	0002      	movs	r2, r0
   121b8:	1dfb      	adds	r3, r7, #7
   121ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   121bc:	1dfb      	adds	r3, r7, #7
   121be:	781b      	ldrb	r3, [r3, #0]
   121c0:	2b00      	cmp	r3, #0
   121c2:	d002      	beq.n	121ca <system_voltage_reference_enable+0x1a>
   121c4:	2b01      	cmp	r3, #1
   121c6:	d007      	beq.n	121d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   121c8:	e00d      	b.n	121e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   121ca:	4b08      	ldr	r3, [pc, #32]	; (121ec <system_voltage_reference_enable+0x3c>)
   121cc:	4a07      	ldr	r2, [pc, #28]	; (121ec <system_voltage_reference_enable+0x3c>)
   121ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
   121d0:	2102      	movs	r1, #2
   121d2:	430a      	orrs	r2, r1
   121d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   121d6:	e006      	b.n	121e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   121d8:	4b04      	ldr	r3, [pc, #16]	; (121ec <system_voltage_reference_enable+0x3c>)
   121da:	4a04      	ldr	r2, [pc, #16]	; (121ec <system_voltage_reference_enable+0x3c>)
   121dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
   121de:	2104      	movs	r1, #4
   121e0:	430a      	orrs	r2, r1
   121e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   121e4:	46c0      	nop			; (mov r8, r8)
	}
}
   121e6:	46bd      	mov	sp, r7
   121e8:	b002      	add	sp, #8
   121ea:	bd80      	pop	{r7, pc}
   121ec:	40000800 	.word	0x40000800

000121f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   121f0:	b580      	push	{r7, lr}
   121f2:	b084      	sub	sp, #16
   121f4:	af00      	add	r7, sp, #0
   121f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   121f8:	687b      	ldr	r3, [r7, #4]
   121fa:	681b      	ldr	r3, [r3, #0]
   121fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   121fe:	68fb      	ldr	r3, [r7, #12]
   12200:	7e5b      	ldrb	r3, [r3, #25]
   12202:	b2db      	uxtb	r3, r3
   12204:	b25b      	sxtb	r3, r3
   12206:	2b00      	cmp	r3, #0
   12208:	da01      	bge.n	1220e <adc_is_syncing+0x1e>
		return true;
   1220a:	2301      	movs	r3, #1
   1220c:	e000      	b.n	12210 <adc_is_syncing+0x20>
	}

	return false;
   1220e:	2300      	movs	r3, #0
}
   12210:	0018      	movs	r0, r3
   12212:	46bd      	mov	sp, r7
   12214:	b004      	add	sp, #16
   12216:	bd80      	pop	{r7, pc}

00012218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   12218:	b580      	push	{r7, lr}
   1221a:	b082      	sub	sp, #8
   1221c:	af00      	add	r7, sp, #0
   1221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	2200      	movs	r2, #0
   12224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   12226:	687b      	ldr	r3, [r7, #4]
   12228:	2200      	movs	r2, #0
   1222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1222c:	687b      	ldr	r3, [r7, #4]
   1222e:	2200      	movs	r2, #0
   12230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   12232:	687b      	ldr	r3, [r7, #4]
   12234:	2200      	movs	r2, #0
   12236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   12238:	687b      	ldr	r3, [r7, #4]
   1223a:	2200      	movs	r2, #0
   1223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1223e:	687b      	ldr	r3, [r7, #4]
   12240:	2200      	movs	r2, #0
   12242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   12244:	687b      	ldr	r3, [r7, #4]
   12246:	2200      	movs	r2, #0
   12248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1224a:	687b      	ldr	r3, [r7, #4]
   1224c:	2200      	movs	r2, #0
   1224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   12250:	687b      	ldr	r3, [r7, #4]
   12252:	2200      	movs	r2, #0
   12254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   12256:	687b      	ldr	r3, [r7, #4]
   12258:	22c0      	movs	r2, #192	; 0xc0
   1225a:	0152      	lsls	r2, r2, #5
   1225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1225e:	687b      	ldr	r3, [r7, #4]
   12260:	2200      	movs	r2, #0
   12262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   12264:	687b      	ldr	r3, [r7, #4]
   12266:	2200      	movs	r2, #0
   12268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1226a:	687b      	ldr	r3, [r7, #4]
   1226c:	2200      	movs	r2, #0
   1226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	2200      	movs	r2, #0
   12274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   12276:	687b      	ldr	r3, [r7, #4]
   12278:	2200      	movs	r2, #0
   1227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	222a      	movs	r2, #42	; 0x2a
   12280:	2100      	movs	r1, #0
   12282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   12284:	687b      	ldr	r3, [r7, #4]
   12286:	2200      	movs	r2, #0
   12288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1228a:	687b      	ldr	r3, [r7, #4]
   1228c:	2200      	movs	r2, #0
   1228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	2224      	movs	r2, #36	; 0x24
   12294:	2100      	movs	r1, #0
   12296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   12298:	687b      	ldr	r3, [r7, #4]
   1229a:	2200      	movs	r2, #0
   1229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1229e:	687b      	ldr	r3, [r7, #4]
   122a0:	2200      	movs	r2, #0
   122a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   122a4:	687b      	ldr	r3, [r7, #4]
   122a6:	2200      	movs	r2, #0
   122a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   122aa:	687b      	ldr	r3, [r7, #4]
   122ac:	222b      	movs	r2, #43	; 0x2b
   122ae:	2100      	movs	r1, #0
   122b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   122b2:	687b      	ldr	r3, [r7, #4]
   122b4:	222c      	movs	r2, #44	; 0x2c
   122b6:	2100      	movs	r1, #0
   122b8:	5499      	strb	r1, [r3, r2]
}
   122ba:	46c0      	nop			; (mov r8, r8)
   122bc:	46bd      	mov	sp, r7
   122be:	b002      	add	sp, #8
   122c0:	bd80      	pop	{r7, pc}
	...

000122c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   122c4:	b580      	push	{r7, lr}
   122c6:	b098      	sub	sp, #96	; 0x60
   122c8:	af00      	add	r7, sp, #0
   122ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   122cc:	230c      	movs	r3, #12
   122ce:	18fa      	adds	r2, r7, r3
   122d0:	4b15      	ldr	r3, [pc, #84]	; (12328 <_adc_configure_ain_pin+0x64>)
   122d2:	0010      	movs	r0, r2
   122d4:	0019      	movs	r1, r3
   122d6:	2350      	movs	r3, #80	; 0x50
   122d8:	001a      	movs	r2, r3
   122da:	4b14      	ldr	r3, [pc, #80]	; (1232c <_adc_configure_ain_pin+0x68>)
   122dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   122de:	4b14      	ldr	r3, [pc, #80]	; (12330 <_adc_configure_ain_pin+0x6c>)
   122e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   122e2:	687b      	ldr	r3, [r7, #4]
   122e4:	2b13      	cmp	r3, #19
   122e6:	d81a      	bhi.n	1231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   122e8:	230c      	movs	r3, #12
   122ea:	18fb      	adds	r3, r7, r3
   122ec:	687a      	ldr	r2, [r7, #4]
   122ee:	0092      	lsls	r2, r2, #2
   122f0:	58d3      	ldr	r3, [r2, r3]
   122f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   122f4:	2308      	movs	r3, #8
   122f6:	18fb      	adds	r3, r7, r3
   122f8:	0018      	movs	r0, r3
   122fa:	4b0e      	ldr	r3, [pc, #56]	; (12334 <_adc_configure_ain_pin+0x70>)
   122fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   122fe:	2308      	movs	r3, #8
   12300:	18fb      	adds	r3, r7, r3
   12302:	2200      	movs	r2, #0
   12304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   12306:	2308      	movs	r3, #8
   12308:	18fb      	adds	r3, r7, r3
   1230a:	2201      	movs	r2, #1
   1230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12310:	b2db      	uxtb	r3, r3
   12312:	2208      	movs	r2, #8
   12314:	18ba      	adds	r2, r7, r2
   12316:	0011      	movs	r1, r2
   12318:	0018      	movs	r0, r3
   1231a:	4b07      	ldr	r3, [pc, #28]	; (12338 <_adc_configure_ain_pin+0x74>)
   1231c:	4798      	blx	r3
	}
}
   1231e:	46c0      	nop			; (mov r8, r8)
   12320:	46bd      	mov	sp, r7
   12322:	b018      	add	sp, #96	; 0x60
   12324:	bd80      	pop	{r7, pc}
   12326:	46c0      	nop			; (mov r8, r8)
   12328:	000356f4 	.word	0x000356f4
   1232c:	000342e1 	.word	0x000342e1
   12330:	0000ffff 	.word	0x0000ffff
   12334:	00012189 	.word	0x00012189
   12338:	00029a99 	.word	0x00029a99

0001233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1233c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1233e:	b089      	sub	sp, #36	; 0x24
   12340:	af00      	add	r7, sp, #0
   12342:	6078      	str	r0, [r7, #4]
   12344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   12346:	231f      	movs	r3, #31
   12348:	18fb      	adds	r3, r7, r3
   1234a:	2200      	movs	r2, #0
   1234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1234e:	2310      	movs	r3, #16
   12350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   12352:	2317      	movs	r3, #23
   12354:	18fb      	adds	r3, r7, r3
   12356:	2200      	movs	r2, #0
   12358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1235a:	687b      	ldr	r3, [r7, #4]
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12360:	230c      	movs	r3, #12
   12362:	18fb      	adds	r3, r7, r3
   12364:	0018      	movs	r0, r3
   12366:	4bce      	ldr	r3, [pc, #824]	; (126a0 <_adc_set_config+0x364>)
   12368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1236a:	683b      	ldr	r3, [r7, #0]
   1236c:	781a      	ldrb	r2, [r3, #0]
   1236e:	230c      	movs	r3, #12
   12370:	18fb      	adds	r3, r7, r3
   12372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   12374:	230c      	movs	r3, #12
   12376:	18fb      	adds	r3, r7, r3
   12378:	0019      	movs	r1, r3
   1237a:	201e      	movs	r0, #30
   1237c:	4bc9      	ldr	r3, [pc, #804]	; (126a4 <_adc_set_config+0x368>)
   1237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   12380:	201e      	movs	r0, #30
   12382:	4bc9      	ldr	r3, [pc, #804]	; (126a8 <_adc_set_config+0x36c>)
   12384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   12386:	683b      	ldr	r3, [r7, #0]
   12388:	222c      	movs	r2, #44	; 0x2c
   1238a:	5c9b      	ldrb	r3, [r3, r2]
   1238c:	2b00      	cmp	r3, #0
   1238e:	d040      	beq.n	12412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   12390:	2316      	movs	r3, #22
   12392:	18fb      	adds	r3, r7, r3
   12394:	683a      	ldr	r2, [r7, #0]
   12396:	212b      	movs	r1, #43	; 0x2b
   12398:	5c52      	ldrb	r2, [r2, r1]
   1239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1239c:	683b      	ldr	r3, [r7, #0]
   1239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   123a0:	2315      	movs	r3, #21
   123a2:	18fb      	adds	r3, r7, r3
   123a4:	2216      	movs	r2, #22
   123a6:	18ba      	adds	r2, r7, r2
   123a8:	7812      	ldrb	r2, [r2, #0]
   123aa:	188a      	adds	r2, r1, r2
   123ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   123ae:	683b      	ldr	r3, [r7, #0]
   123b0:	222c      	movs	r2, #44	; 0x2c
   123b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   123b4:	230f      	movs	r3, #15
   123b6:	18fb      	adds	r3, r7, r3
   123b8:	2215      	movs	r2, #21
   123ba:	18ba      	adds	r2, r7, r2
   123bc:	7812      	ldrb	r2, [r2, #0]
   123be:	188a      	adds	r2, r1, r2
   123c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   123c2:	e018      	b.n	123f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   123c4:	2316      	movs	r3, #22
   123c6:	18fb      	adds	r3, r7, r3
   123c8:	781b      	ldrb	r3, [r3, #0]
   123ca:	220f      	movs	r2, #15
   123cc:	4013      	ands	r3, r2
   123ce:	683a      	ldr	r2, [r7, #0]
   123d0:	7b12      	ldrb	r2, [r2, #12]
   123d2:	189b      	adds	r3, r3, r2
   123d4:	0018      	movs	r0, r3
   123d6:	4bb5      	ldr	r3, [pc, #724]	; (126ac <_adc_set_config+0x370>)
   123d8:	4798      	blx	r3
			start_pin++;
   123da:	2315      	movs	r3, #21
   123dc:	18fb      	adds	r3, r7, r3
   123de:	781a      	ldrb	r2, [r3, #0]
   123e0:	2315      	movs	r3, #21
   123e2:	18fb      	adds	r3, r7, r3
   123e4:	3201      	adds	r2, #1
   123e6:	701a      	strb	r2, [r3, #0]
			offset++;
   123e8:	2316      	movs	r3, #22
   123ea:	18fb      	adds	r3, r7, r3
   123ec:	781a      	ldrb	r2, [r3, #0]
   123ee:	2316      	movs	r3, #22
   123f0:	18fb      	adds	r3, r7, r3
   123f2:	3201      	adds	r2, #1
   123f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   123f6:	2315      	movs	r3, #21
   123f8:	18fa      	adds	r2, r7, r3
   123fa:	230f      	movs	r3, #15
   123fc:	18fb      	adds	r3, r7, r3
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	429a      	cmp	r2, r3
   12404:	d3de      	bcc.n	123c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   12406:	683b      	ldr	r3, [r7, #0]
   12408:	89db      	ldrh	r3, [r3, #14]
   1240a:	0018      	movs	r0, r3
   1240c:	4ba7      	ldr	r3, [pc, #668]	; (126ac <_adc_set_config+0x370>)
   1240e:	4798      	blx	r3
   12410:	e009      	b.n	12426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   12412:	683b      	ldr	r3, [r7, #0]
   12414:	7b1b      	ldrb	r3, [r3, #12]
   12416:	0018      	movs	r0, r3
   12418:	4ba4      	ldr	r3, [pc, #656]	; (126ac <_adc_set_config+0x370>)
   1241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1241c:	683b      	ldr	r3, [r7, #0]
   1241e:	89db      	ldrh	r3, [r3, #14]
   12420:	0018      	movs	r0, r3
   12422:	4ba2      	ldr	r3, [pc, #648]	; (126ac <_adc_set_config+0x370>)
   12424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   12426:	683b      	ldr	r3, [r7, #0]
   12428:	7d5b      	ldrb	r3, [r3, #21]
   1242a:	009b      	lsls	r3, r3, #2
   1242c:	b2da      	uxtb	r2, r3
   1242e:	693b      	ldr	r3, [r7, #16]
   12430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12432:	683b      	ldr	r3, [r7, #0]
   12434:	7d9b      	ldrb	r3, [r3, #22]
   12436:	01db      	lsls	r3, r3, #7
   12438:	b25a      	sxtb	r2, r3
			(config->reference);
   1243a:	683b      	ldr	r3, [r7, #0]
   1243c:	785b      	ldrb	r3, [r3, #1]
   1243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12440:	4313      	orrs	r3, r2
   12442:	b25b      	sxtb	r3, r3
   12444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   12446:	693b      	ldr	r3, [r7, #16]
   12448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1244a:	683b      	ldr	r3, [r7, #0]
   1244c:	791b      	ldrb	r3, [r3, #4]
   1244e:	2b34      	cmp	r3, #52	; 0x34
   12450:	d846      	bhi.n	124e0 <_adc_set_config+0x1a4>
   12452:	009a      	lsls	r2, r3, #2
   12454:	4b96      	ldr	r3, [pc, #600]	; (126b0 <_adc_set_config+0x374>)
   12456:	18d3      	adds	r3, r2, r3
   12458:	681b      	ldr	r3, [r3, #0]
   1245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1245c:	231f      	movs	r3, #31
   1245e:	18fb      	adds	r3, r7, r3
   12460:	683a      	ldr	r2, [r7, #0]
   12462:	7c52      	ldrb	r2, [r2, #17]
   12464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   12466:	2317      	movs	r3, #23
   12468:	18fb      	adds	r3, r7, r3
   1246a:	683a      	ldr	r2, [r7, #0]
   1246c:	7c12      	ldrb	r2, [r2, #16]
   1246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   12470:	2310      	movs	r3, #16
   12472:	61bb      	str	r3, [r7, #24]
		break;
   12474:	e036      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   12476:	231f      	movs	r3, #31
   12478:	18fb      	adds	r3, r7, r3
   1247a:	2201      	movs	r2, #1
   1247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1247e:	2317      	movs	r3, #23
   12480:	18fb      	adds	r3, r7, r3
   12482:	2202      	movs	r2, #2
   12484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   12486:	2310      	movs	r3, #16
   12488:	61bb      	str	r3, [r7, #24]
		break;
   1248a:	e02b      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1248c:	231f      	movs	r3, #31
   1248e:	18fb      	adds	r3, r7, r3
   12490:	2202      	movs	r2, #2
   12492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   12494:	2317      	movs	r3, #23
   12496:	18fb      	adds	r3, r7, r3
   12498:	2204      	movs	r2, #4
   1249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1249c:	2310      	movs	r3, #16
   1249e:	61bb      	str	r3, [r7, #24]
		break;
   124a0:	e020      	b.n	124e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   124a2:	231f      	movs	r3, #31
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	2201      	movs	r2, #1
   124a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   124aa:	2317      	movs	r3, #23
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	2206      	movs	r2, #6
   124b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   124b2:	2310      	movs	r3, #16
   124b4:	61bb      	str	r3, [r7, #24]
		break;
   124b6:	e015      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   124b8:	231f      	movs	r3, #31
   124ba:	18fb      	adds	r3, r7, r3
   124bc:	2200      	movs	r2, #0
   124be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   124c0:	2317      	movs	r3, #23
   124c2:	18fb      	adds	r3, r7, r3
   124c4:	2208      	movs	r2, #8
   124c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   124c8:	2310      	movs	r3, #16
   124ca:	61bb      	str	r3, [r7, #24]
		break;
   124cc:	e00a      	b.n	124e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   124ce:	2330      	movs	r3, #48	; 0x30
   124d0:	61bb      	str	r3, [r7, #24]
		break;
   124d2:	e007      	b.n	124e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   124d4:	2320      	movs	r3, #32
   124d6:	61bb      	str	r3, [r7, #24]
		break;
   124d8:	e004      	b.n	124e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   124da:	2300      	movs	r3, #0
   124dc:	61bb      	str	r3, [r7, #24]
		break;
   124de:	e001      	b.n	124e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   124e0:	2317      	movs	r3, #23
   124e2:	e1ae      	b.n	12842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   124e4:	231f      	movs	r3, #31
   124e6:	18fb      	adds	r3, r7, r3
   124e8:	781b      	ldrb	r3, [r3, #0]
   124ea:	011b      	lsls	r3, r3, #4
   124ec:	b2db      	uxtb	r3, r3
   124ee:	2270      	movs	r2, #112	; 0x70
   124f0:	4013      	ands	r3, r2
   124f2:	b2da      	uxtb	r2, r3
   124f4:	2317      	movs	r3, #23
   124f6:	18fb      	adds	r3, r7, r3
   124f8:	781b      	ldrb	r3, [r3, #0]
   124fa:	4313      	orrs	r3, r2
   124fc:	b2da      	uxtb	r2, r3
   124fe:	693b      	ldr	r3, [r7, #16]
   12500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   12502:	683b      	ldr	r3, [r7, #0]
   12504:	7ddb      	ldrb	r3, [r3, #23]
   12506:	2b3f      	cmp	r3, #63	; 0x3f
   12508:	d901      	bls.n	1250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1250a:	2317      	movs	r3, #23
   1250c:	e199      	b.n	12842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1250e:	683b      	ldr	r3, [r7, #0]
   12510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   12512:	693b      	ldr	r3, [r7, #16]
   12514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   12516:	46c0      	nop			; (mov r8, r8)
   12518:	687b      	ldr	r3, [r7, #4]
   1251a:	0018      	movs	r0, r3
   1251c:	4b65      	ldr	r3, [pc, #404]	; (126b4 <_adc_set_config+0x378>)
   1251e:	4798      	blx	r3
   12520:	1e03      	subs	r3, r0, #0
   12522:	d1f9      	bne.n	12518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   12524:	683b      	ldr	r3, [r7, #0]
   12526:	885a      	ldrh	r2, [r3, #2]
   12528:	69bb      	ldr	r3, [r7, #24]
   1252a:	b29b      	uxth	r3, r3
   1252c:	4313      	orrs	r3, r2
   1252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   12530:	683b      	ldr	r3, [r7, #0]
   12532:	2124      	movs	r1, #36	; 0x24
   12534:	5c5b      	ldrb	r3, [r3, r1]
   12536:	b29b      	uxth	r3, r3
   12538:	00db      	lsls	r3, r3, #3
   1253a:	b29b      	uxth	r3, r3
			resolution |
   1253c:	4313      	orrs	r3, r2
   1253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12540:	683b      	ldr	r3, [r7, #0]
   12542:	7d1b      	ldrb	r3, [r3, #20]
   12544:	b29b      	uxth	r3, r3
   12546:	009b      	lsls	r3, r3, #2
   12548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1254a:	4313      	orrs	r3, r2
   1254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1254e:	683b      	ldr	r3, [r7, #0]
   12550:	7c9b      	ldrb	r3, [r3, #18]
   12552:	b29b      	uxth	r3, r3
   12554:	18db      	adds	r3, r3, r3
   12556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12558:	4313      	orrs	r3, r2
   1255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1255c:	683b      	ldr	r3, [r7, #0]
   1255e:	7cdb      	ldrb	r3, [r3, #19]
   12560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   12562:	4313      	orrs	r3, r2
   12564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   12566:	693b      	ldr	r3, [r7, #16]
   12568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1256a:	683b      	ldr	r3, [r7, #0]
   1256c:	7e1b      	ldrb	r3, [r3, #24]
   1256e:	2b00      	cmp	r3, #0
   12570:	d100      	bne.n	12574 <_adc_set_config+0x238>
   12572:	e0c4      	b.n	126fe <_adc_set_config+0x3c2>
		switch (resolution) {
   12574:	69bb      	ldr	r3, [r7, #24]
   12576:	2b10      	cmp	r3, #16
   12578:	d100      	bne.n	1257c <_adc_set_config+0x240>
   1257a:	e076      	b.n	1266a <_adc_set_config+0x32e>
   1257c:	d802      	bhi.n	12584 <_adc_set_config+0x248>
   1257e:	2b00      	cmp	r3, #0
   12580:	d04d      	beq.n	1261e <_adc_set_config+0x2e2>
   12582:	e0bc      	b.n	126fe <_adc_set_config+0x3c2>
   12584:	2b20      	cmp	r3, #32
   12586:	d023      	beq.n	125d0 <_adc_set_config+0x294>
   12588:	2b30      	cmp	r3, #48	; 0x30
   1258a:	d000      	beq.n	1258e <_adc_set_config+0x252>
   1258c:	e0b7      	b.n	126fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1258e:	683b      	ldr	r3, [r7, #0]
   12590:	7cdb      	ldrb	r3, [r3, #19]
   12592:	2b00      	cmp	r3, #0
   12594:	d011      	beq.n	125ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   12596:	683b      	ldr	r3, [r7, #0]
   12598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1259a:	2b7f      	cmp	r3, #127	; 0x7f
   1259c:	dc0b      	bgt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1259e:	683b      	ldr	r3, [r7, #0]
   125a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   125a2:	3380      	adds	r3, #128	; 0x80
   125a4:	db07      	blt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   125a6:	683b      	ldr	r3, [r7, #0]
   125a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   125aa:	2b7f      	cmp	r3, #127	; 0x7f
   125ac:	dc03      	bgt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   125ae:	683b      	ldr	r3, [r7, #0]
   125b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   125b2:	3380      	adds	r3, #128	; 0x80
   125b4:	da01      	bge.n	125ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   125b6:	2317      	movs	r3, #23
   125b8:	e143      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	69db      	ldr	r3, [r3, #28]
   125be:	2bff      	cmp	r3, #255	; 0xff
   125c0:	dc04      	bgt.n	125cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   125c2:	683b      	ldr	r3, [r7, #0]
   125c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   125c6:	2bff      	cmp	r3, #255	; 0xff
   125c8:	dc00      	bgt.n	125cc <_adc_set_config+0x290>
   125ca:	e091      	b.n	126f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   125cc:	2317      	movs	r3, #23
   125ce:	e138      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   125d0:	683b      	ldr	r3, [r7, #0]
   125d2:	7cdb      	ldrb	r3, [r3, #19]
   125d4:	2b00      	cmp	r3, #0
   125d6:	d015      	beq.n	12604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   125d8:	683b      	ldr	r3, [r7, #0]
   125da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   125dc:	4a36      	ldr	r2, [pc, #216]	; (126b8 <_adc_set_config+0x37c>)
   125de:	4293      	cmp	r3, r2
   125e0:	dc0e      	bgt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   125e2:	683b      	ldr	r3, [r7, #0]
   125e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   125e6:	4a35      	ldr	r2, [pc, #212]	; (126bc <_adc_set_config+0x380>)
   125e8:	4293      	cmp	r3, r2
   125ea:	db09      	blt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   125ec:	683b      	ldr	r3, [r7, #0]
   125ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   125f0:	4a31      	ldr	r2, [pc, #196]	; (126b8 <_adc_set_config+0x37c>)
   125f2:	4293      	cmp	r3, r2
   125f4:	dc04      	bgt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   125f6:	683b      	ldr	r3, [r7, #0]
   125f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   125fa:	4a30      	ldr	r2, [pc, #192]	; (126bc <_adc_set_config+0x380>)
   125fc:	4293      	cmp	r3, r2
   125fe:	da01      	bge.n	12604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   12600:	2317      	movs	r3, #23
   12602:	e11e      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   12604:	683b      	ldr	r3, [r7, #0]
   12606:	69db      	ldr	r3, [r3, #28]
   12608:	4a2d      	ldr	r2, [pc, #180]	; (126c0 <_adc_set_config+0x384>)
   1260a:	4293      	cmp	r3, r2
   1260c:	dc05      	bgt.n	1261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1260e:	683b      	ldr	r3, [r7, #0]
   12610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   12612:	4a2b      	ldr	r2, [pc, #172]	; (126c0 <_adc_set_config+0x384>)
   12614:	4293      	cmp	r3, r2
   12616:	dc00      	bgt.n	1261a <_adc_set_config+0x2de>
   12618:	e06c      	b.n	126f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1261a:	2317      	movs	r3, #23
   1261c:	e111      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1261e:	683b      	ldr	r3, [r7, #0]
   12620:	7cdb      	ldrb	r3, [r3, #19]
   12622:	2b00      	cmp	r3, #0
   12624:	d015      	beq.n	12652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   12626:	683b      	ldr	r3, [r7, #0]
   12628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1262a:	4a26      	ldr	r2, [pc, #152]	; (126c4 <_adc_set_config+0x388>)
   1262c:	4293      	cmp	r3, r2
   1262e:	dc0e      	bgt.n	1264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   12630:	683b      	ldr	r3, [r7, #0]
   12632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   12634:	4a24      	ldr	r2, [pc, #144]	; (126c8 <_adc_set_config+0x38c>)
   12636:	4293      	cmp	r3, r2
   12638:	db09      	blt.n	1264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1263a:	683b      	ldr	r3, [r7, #0]
   1263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1263e:	4a21      	ldr	r2, [pc, #132]	; (126c4 <_adc_set_config+0x388>)
   12640:	4293      	cmp	r3, r2
   12642:	dc04      	bgt.n	1264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   12644:	683b      	ldr	r3, [r7, #0]
   12646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   12648:	4a1f      	ldr	r2, [pc, #124]	; (126c8 <_adc_set_config+0x38c>)
   1264a:	4293      	cmp	r3, r2
   1264c:	da01      	bge.n	12652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1264e:	2317      	movs	r3, #23
   12650:	e0f7      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   12652:	683b      	ldr	r3, [r7, #0]
   12654:	69db      	ldr	r3, [r3, #28]
   12656:	4a1d      	ldr	r2, [pc, #116]	; (126cc <_adc_set_config+0x390>)
   12658:	4293      	cmp	r3, r2
   1265a:	dc04      	bgt.n	12666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1265c:	683b      	ldr	r3, [r7, #0]
   1265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   12660:	4a1a      	ldr	r2, [pc, #104]	; (126cc <_adc_set_config+0x390>)
   12662:	4293      	cmp	r3, r2
   12664:	dd48      	ble.n	126f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   12666:	2317      	movs	r3, #23
   12668:	e0eb      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1266a:	683b      	ldr	r3, [r7, #0]
   1266c:	7cdb      	ldrb	r3, [r3, #19]
   1266e:	2b00      	cmp	r3, #0
   12670:	d032      	beq.n	126d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   12672:	683b      	ldr	r3, [r7, #0]
   12674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   12676:	4a16      	ldr	r2, [pc, #88]	; (126d0 <_adc_set_config+0x394>)
   12678:	4293      	cmp	r3, r2
   1267a:	dc0e      	bgt.n	1269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1267c:	683b      	ldr	r3, [r7, #0]
   1267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   12680:	4a14      	ldr	r2, [pc, #80]	; (126d4 <_adc_set_config+0x398>)
   12682:	4293      	cmp	r3, r2
   12684:	db09      	blt.n	1269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   12686:	683b      	ldr	r3, [r7, #0]
   12688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1268a:	4a11      	ldr	r2, [pc, #68]	; (126d0 <_adc_set_config+0x394>)
   1268c:	4293      	cmp	r3, r2
   1268e:	dc04      	bgt.n	1269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   12690:	683b      	ldr	r3, [r7, #0]
   12692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   12694:	4a0f      	ldr	r2, [pc, #60]	; (126d4 <_adc_set_config+0x398>)
   12696:	4293      	cmp	r3, r2
   12698:	da1e      	bge.n	126d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1269a:	2317      	movs	r3, #23
   1269c:	e0d1      	b.n	12842 <_adc_set_config+0x506>
   1269e:	46c0      	nop			; (mov r8, r8)
   126a0:	00012115 	.word	0x00012115
   126a4:	00029739 	.word	0x00029739
   126a8:	0002977d 	.word	0x0002977d
   126ac:	000122c5 	.word	0x000122c5
   126b0:	00035744 	.word	0x00035744
   126b4:	000121f1 	.word	0x000121f1
   126b8:	000001ff 	.word	0x000001ff
   126bc:	fffffe00 	.word	0xfffffe00
   126c0:	000003ff 	.word	0x000003ff
   126c4:	000007ff 	.word	0x000007ff
   126c8:	fffff800 	.word	0xfffff800
   126cc:	00000fff 	.word	0x00000fff
   126d0:	00007fff 	.word	0x00007fff
   126d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	69db      	ldr	r3, [r3, #28]
   126dc:	4a5b      	ldr	r2, [pc, #364]	; (1284c <_adc_set_config+0x510>)
   126de:	4293      	cmp	r3, r2
   126e0:	dc04      	bgt.n	126ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   126e2:	683b      	ldr	r3, [r7, #0]
   126e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   126e6:	4a59      	ldr	r2, [pc, #356]	; (1284c <_adc_set_config+0x510>)
   126e8:	4293      	cmp	r3, r2
   126ea:	dd07      	ble.n	126fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   126ec:	2317      	movs	r3, #23
   126ee:	e0a8      	b.n	12842 <_adc_set_config+0x506>
			break;
   126f0:	46c0      	nop			; (mov r8, r8)
   126f2:	e004      	b.n	126fe <_adc_set_config+0x3c2>
			break;
   126f4:	46c0      	nop			; (mov r8, r8)
   126f6:	e002      	b.n	126fe <_adc_set_config+0x3c2>
			break;
   126f8:	46c0      	nop			; (mov r8, r8)
   126fa:	e000      	b.n	126fe <_adc_set_config+0x3c2>
			}
			break;
   126fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   126fe:	46c0      	nop			; (mov r8, r8)
   12700:	687b      	ldr	r3, [r7, #4]
   12702:	0018      	movs	r0, r3
   12704:	4b52      	ldr	r3, [pc, #328]	; (12850 <_adc_set_config+0x514>)
   12706:	4798      	blx	r3
   12708:	1e03      	subs	r3, r0, #0
   1270a:	d1f9      	bne.n	12700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1270c:	683b      	ldr	r3, [r7, #0]
   1270e:	7e1a      	ldrb	r2, [r3, #24]
   12710:	693b      	ldr	r3, [r7, #16]
   12712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   12714:	46c0      	nop			; (mov r8, r8)
   12716:	687b      	ldr	r3, [r7, #4]
   12718:	0018      	movs	r0, r3
   1271a:	4b4d      	ldr	r3, [pc, #308]	; (12850 <_adc_set_config+0x514>)
   1271c:	4798      	blx	r3
   1271e:	1e03      	subs	r3, r0, #0
   12720:	d1f9      	bne.n	12716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   12722:	683b      	ldr	r3, [r7, #0]
   12724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   12726:	b29a      	uxth	r2, r3
   12728:	693b      	ldr	r3, [r7, #16]
   1272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1272c:	46c0      	nop			; (mov r8, r8)
   1272e:	687b      	ldr	r3, [r7, #4]
   12730:	0018      	movs	r0, r3
   12732:	4b47      	ldr	r3, [pc, #284]	; (12850 <_adc_set_config+0x514>)
   12734:	4798      	blx	r3
   12736:	1e03      	subs	r3, r0, #0
   12738:	d1f9      	bne.n	1272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1273a:	683b      	ldr	r3, [r7, #0]
   1273c:	6a1b      	ldr	r3, [r3, #32]
   1273e:	b29a      	uxth	r2, r3
   12740:	693b      	ldr	r3, [r7, #16]
   12742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   12744:	2314      	movs	r3, #20
   12746:	18fb      	adds	r3, r7, r3
   12748:	683a      	ldr	r2, [r7, #0]
   1274a:	212c      	movs	r1, #44	; 0x2c
   1274c:	5c52      	ldrb	r2, [r2, r1]
   1274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   12750:	2314      	movs	r3, #20
   12752:	18fb      	adds	r3, r7, r3
   12754:	781b      	ldrb	r3, [r3, #0]
   12756:	2b00      	cmp	r3, #0
   12758:	d006      	beq.n	12768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1275a:	2314      	movs	r3, #20
   1275c:	18fb      	adds	r3, r7, r3
   1275e:	781a      	ldrb	r2, [r3, #0]
   12760:	2314      	movs	r3, #20
   12762:	18fb      	adds	r3, r7, r3
   12764:	3a01      	subs	r2, #1
   12766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   12768:	2314      	movs	r3, #20
   1276a:	18fb      	adds	r3, r7, r3
   1276c:	781b      	ldrb	r3, [r3, #0]
   1276e:	2b0f      	cmp	r3, #15
   12770:	d804      	bhi.n	1277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   12772:	683b      	ldr	r3, [r7, #0]
   12774:	222b      	movs	r2, #43	; 0x2b
   12776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   12778:	2b0f      	cmp	r3, #15
   1277a:	d901      	bls.n	12780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1277c:	2317      	movs	r3, #23
   1277e:	e060      	b.n	12842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   12780:	46c0      	nop			; (mov r8, r8)
   12782:	687b      	ldr	r3, [r7, #4]
   12784:	0018      	movs	r0, r3
   12786:	4b32      	ldr	r3, [pc, #200]	; (12850 <_adc_set_config+0x514>)
   12788:	4798      	blx	r3
   1278a:	1e03      	subs	r3, r0, #0
   1278c:	d1f9      	bne.n	12782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1278e:	683b      	ldr	r3, [r7, #0]
   12790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   12792:	683a      	ldr	r2, [r7, #0]
   12794:	212b      	movs	r1, #43	; 0x2b
   12796:	5c52      	ldrb	r2, [r2, r1]
   12798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1279c:	2214      	movs	r2, #20
   1279e:	18ba      	adds	r2, r7, r2
   127a0:	7812      	ldrb	r2, [r2, #0]
   127a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   127a4:	4313      	orrs	r3, r2
			config->negative_input |
   127a6:	683a      	ldr	r2, [r7, #0]
   127a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   127aa:	4313      	orrs	r3, r2
			config->positive_input;
   127ac:	683a      	ldr	r2, [r7, #0]
   127ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   127b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   127b2:	693b      	ldr	r3, [r7, #16]
   127b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   127b6:	683b      	ldr	r3, [r7, #0]
   127b8:	222a      	movs	r2, #42	; 0x2a
   127ba:	5c9a      	ldrb	r2, [r3, r2]
   127bc:	693b      	ldr	r3, [r7, #16]
   127be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   127c0:	693b      	ldr	r3, [r7, #16]
   127c2:	220f      	movs	r2, #15
   127c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   127c6:	683b      	ldr	r3, [r7, #0]
   127c8:	2224      	movs	r2, #36	; 0x24
   127ca:	5c9b      	ldrb	r3, [r3, r2]
   127cc:	2b00      	cmp	r3, #0
   127ce:	d01e      	beq.n	1280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   127d0:	683b      	ldr	r3, [r7, #0]
   127d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   127d4:	4a1f      	ldr	r2, [pc, #124]	; (12854 <_adc_set_config+0x518>)
   127d6:	4293      	cmp	r3, r2
   127d8:	d901      	bls.n	127de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   127da:	2317      	movs	r3, #23
   127dc:	e031      	b.n	12842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   127de:	683b      	ldr	r3, [r7, #0]
   127e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   127e2:	693b      	ldr	r3, [r7, #16]
   127e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   127e6:	683b      	ldr	r3, [r7, #0]
   127e8:	2228      	movs	r2, #40	; 0x28
   127ea:	5e9b      	ldrsh	r3, [r3, r2]
   127ec:	4a1a      	ldr	r2, [pc, #104]	; (12858 <_adc_set_config+0x51c>)
   127ee:	4293      	cmp	r3, r2
   127f0:	dc05      	bgt.n	127fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   127f2:	683b      	ldr	r3, [r7, #0]
   127f4:	2228      	movs	r2, #40	; 0x28
   127f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   127f8:	4a18      	ldr	r2, [pc, #96]	; (1285c <_adc_set_config+0x520>)
   127fa:	4293      	cmp	r3, r2
   127fc:	da01      	bge.n	12802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   127fe:	2317      	movs	r3, #23
   12800:	e01f      	b.n	12842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   12802:	683b      	ldr	r3, [r7, #0]
   12804:	2228      	movs	r2, #40	; 0x28
   12806:	5e9b      	ldrsh	r3, [r3, r2]
   12808:	b29a      	uxth	r2, r3
   1280a:	693b      	ldr	r3, [r7, #16]
   1280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1280e:	4b14      	ldr	r3, [pc, #80]	; (12860 <_adc_set_config+0x524>)
   12810:	681b      	ldr	r3, [r3, #0]
   12812:	08db      	lsrs	r3, r3, #3
   12814:	b29b      	uxth	r3, r3
   12816:	021b      	lsls	r3, r3, #8
   12818:	b29a      	uxth	r2, r3
   1281a:	23e0      	movs	r3, #224	; 0xe0
   1281c:	00db      	lsls	r3, r3, #3
   1281e:	4013      	ands	r3, r2
   12820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   12822:	4b10      	ldr	r3, [pc, #64]	; (12864 <_adc_set_config+0x528>)
   12824:	685c      	ldr	r4, [r3, #4]
   12826:	681b      	ldr	r3, [r3, #0]
   12828:	0161      	lsls	r1, r4, #5
   1282a:	0edd      	lsrs	r5, r3, #27
   1282c:	430d      	orrs	r5, r1
   1282e:	0ee6      	lsrs	r6, r4, #27
   12830:	b2ab      	uxth	r3, r5
   12832:	21ff      	movs	r1, #255	; 0xff
   12834:	400b      	ands	r3, r1
   12836:	b29b      	uxth	r3, r3
			) |
   12838:	4313      	orrs	r3, r2
   1283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1283c:	693b      	ldr	r3, [r7, #16]
   1283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   12840:	2300      	movs	r3, #0
}
   12842:	0018      	movs	r0, r3
   12844:	46bd      	mov	sp, r7
   12846:	b009      	add	sp, #36	; 0x24
   12848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1284a:	46c0      	nop			; (mov r8, r8)
   1284c:	0000ffff 	.word	0x0000ffff
   12850:	000121f1 	.word	0x000121f1
   12854:	00000fff 	.word	0x00000fff
   12858:	000007ff 	.word	0x000007ff
   1285c:	fffff800 	.word	0xfffff800
   12860:	00806024 	.word	0x00806024
   12864:	00806020 	.word	0x00806020

00012868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   12868:	b580      	push	{r7, lr}
   1286a:	b086      	sub	sp, #24
   1286c:	af00      	add	r7, sp, #0
   1286e:	60f8      	str	r0, [r7, #12]
   12870:	60b9      	str	r1, [r7, #8]
   12872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   12874:	68fb      	ldr	r3, [r7, #12]
   12876:	68ba      	ldr	r2, [r7, #8]
   12878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1287a:	2380      	movs	r3, #128	; 0x80
   1287c:	025b      	lsls	r3, r3, #9
   1287e:	0019      	movs	r1, r3
   12880:	2002      	movs	r0, #2
   12882:	4b32      	ldr	r3, [pc, #200]	; (1294c <adc_init+0xe4>)
   12884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   12886:	68bb      	ldr	r3, [r7, #8]
   12888:	781b      	ldrb	r3, [r3, #0]
   1288a:	b2db      	uxtb	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2301      	movs	r3, #1
   12890:	4013      	ands	r3, r2
   12892:	d001      	beq.n	12898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   12894:	2305      	movs	r3, #5
   12896:	e055      	b.n	12944 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   12898:	68bb      	ldr	r3, [r7, #8]
   1289a:	781b      	ldrb	r3, [r3, #0]
   1289c:	b2db      	uxtb	r3, r3
   1289e:	001a      	movs	r2, r3
   128a0:	2302      	movs	r3, #2
   128a2:	4013      	ands	r3, r2
   128a4:	d001      	beq.n	128aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   128a6:	231c      	movs	r3, #28
   128a8:	e04c      	b.n	12944 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	785a      	ldrb	r2, [r3, #1]
   128ae:	68fb      	ldr	r3, [r7, #12]
   128b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	791b      	ldrb	r3, [r3, #4]
   128b6:	2b00      	cmp	r3, #0
   128b8:	d102      	bne.n	128c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   128ba:	2001      	movs	r0, #1
   128bc:	4b24      	ldr	r3, [pc, #144]	; (12950 <adc_init+0xe8>)
   128be:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   128c0:	2317      	movs	r3, #23
   128c2:	18fb      	adds	r3, r7, r3
   128c4:	2200      	movs	r2, #0
   128c6:	701a      	strb	r2, [r3, #0]
   128c8:	e00e      	b.n	128e8 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   128ca:	2317      	movs	r3, #23
   128cc:	18fb      	adds	r3, r7, r3
   128ce:	781a      	ldrb	r2, [r3, #0]
   128d0:	68fb      	ldr	r3, [r7, #12]
   128d2:	3202      	adds	r2, #2
   128d4:	0092      	lsls	r2, r2, #2
   128d6:	2100      	movs	r1, #0
   128d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   128da:	2317      	movs	r3, #23
   128dc:	18fb      	adds	r3, r7, r3
   128de:	781a      	ldrb	r2, [r3, #0]
   128e0:	2317      	movs	r3, #23
   128e2:	18fb      	adds	r3, r7, r3
   128e4:	3201      	adds	r2, #1
   128e6:	701a      	strb	r2, [r3, #0]
   128e8:	2317      	movs	r3, #23
   128ea:	18fb      	adds	r3, r7, r3
   128ec:	781b      	ldrb	r3, [r3, #0]
   128ee:	2b02      	cmp	r3, #2
   128f0:	d9eb      	bls.n	128ca <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   128f2:	68fb      	ldr	r3, [r7, #12]
   128f4:	2200      	movs	r2, #0
   128f6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   128f8:	68fb      	ldr	r3, [r7, #12]
   128fa:	2200      	movs	r2, #0
   128fc:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   128fe:	68fb      	ldr	r3, [r7, #12]
   12900:	2200      	movs	r2, #0
   12902:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   12904:	68fb      	ldr	r3, [r7, #12]
   12906:	2200      	movs	r2, #0
   12908:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1290a:	4b12      	ldr	r3, [pc, #72]	; (12954 <adc_init+0xec>)
   1290c:	68fa      	ldr	r2, [r7, #12]
   1290e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   12910:	687b      	ldr	r3, [r7, #4]
   12912:	222a      	movs	r2, #42	; 0x2a
   12914:	5c9b      	ldrb	r3, [r3, r2]
   12916:	2b00      	cmp	r3, #0
   12918:	d10a      	bne.n	12930 <adc_init+0xc8>
			!config->freerunning) {
   1291a:	687b      	ldr	r3, [r7, #4]
   1291c:	7d1b      	ldrb	r3, [r3, #20]
   1291e:	2201      	movs	r2, #1
   12920:	4053      	eors	r3, r2
   12922:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   12924:	2b00      	cmp	r3, #0
   12926:	d003      	beq.n	12930 <adc_init+0xc8>
		module_inst->software_trigger = true;
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	2201      	movs	r2, #1
   1292c:	775a      	strb	r2, [r3, #29]
   1292e:	e002      	b.n	12936 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   12930:	68fb      	ldr	r3, [r7, #12]
   12932:	2200      	movs	r2, #0
   12934:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   12936:	687a      	ldr	r2, [r7, #4]
   12938:	68fb      	ldr	r3, [r7, #12]
   1293a:	0011      	movs	r1, r2
   1293c:	0018      	movs	r0, r3
   1293e:	4b06      	ldr	r3, [pc, #24]	; (12958 <adc_init+0xf0>)
   12940:	4798      	blx	r3
   12942:	0003      	movs	r3, r0
}
   12944:	0018      	movs	r0, r3
   12946:	46bd      	mov	sp, r7
   12948:	b006      	add	sp, #24
   1294a:	bd80      	pop	{r7, pc}
   1294c:	0001212d 	.word	0x0001212d
   12950:	000121b1 	.word	0x000121b1
   12954:	200045a8 	.word	0x200045a8
   12958:	0001233d 	.word	0x0001233d

0001295c <adc_is_syncing>:
{
   1295c:	b580      	push	{r7, lr}
   1295e:	b084      	sub	sp, #16
   12960:	af00      	add	r7, sp, #0
   12962:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	681b      	ldr	r3, [r3, #0]
   12968:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1296a:	68fb      	ldr	r3, [r7, #12]
   1296c:	7e5b      	ldrb	r3, [r3, #25]
   1296e:	b2db      	uxtb	r3, r3
   12970:	b25b      	sxtb	r3, r3
   12972:	2b00      	cmp	r3, #0
   12974:	da01      	bge.n	1297a <adc_is_syncing+0x1e>
		return true;
   12976:	2301      	movs	r3, #1
   12978:	e000      	b.n	1297c <adc_is_syncing+0x20>
	return false;
   1297a:	2300      	movs	r3, #0
}
   1297c:	0018      	movs	r0, r3
   1297e:	46bd      	mov	sp, r7
   12980:	b004      	add	sp, #16
   12982:	bd80      	pop	{r7, pc}

00012984 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12984:	b580      	push	{r7, lr}
   12986:	b084      	sub	sp, #16
   12988:	af00      	add	r7, sp, #0
   1298a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1298c:	687b      	ldr	r3, [r7, #4]
   1298e:	681b      	ldr	r3, [r3, #0]
   12990:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12992:	46c0      	nop			; (mov r8, r8)
   12994:	687b      	ldr	r3, [r7, #4]
   12996:	0018      	movs	r0, r3
   12998:	4b0b      	ldr	r3, [pc, #44]	; (129c8 <adc_start_conversion+0x44>)
   1299a:	4798      	blx	r3
   1299c:	1e03      	subs	r3, r0, #0
   1299e:	d1f9      	bne.n	12994 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   129a0:	68fb      	ldr	r3, [r7, #12]
   129a2:	7b1b      	ldrb	r3, [r3, #12]
   129a4:	b2db      	uxtb	r3, r3
   129a6:	2202      	movs	r2, #2
   129a8:	4313      	orrs	r3, r2
   129aa:	b2da      	uxtb	r2, r3
   129ac:	68fb      	ldr	r3, [r7, #12]
   129ae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   129b0:	46c0      	nop			; (mov r8, r8)
   129b2:	687b      	ldr	r3, [r7, #4]
   129b4:	0018      	movs	r0, r3
   129b6:	4b04      	ldr	r3, [pc, #16]	; (129c8 <adc_start_conversion+0x44>)
   129b8:	4798      	blx	r3
   129ba:	1e03      	subs	r3, r0, #0
   129bc:	d1f9      	bne.n	129b2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   129be:	46c0      	nop			; (mov r8, r8)
   129c0:	46bd      	mov	sp, r7
   129c2:	b004      	add	sp, #16
   129c4:	bd80      	pop	{r7, pc}
   129c6:	46c0      	nop			; (mov r8, r8)
   129c8:	0001295d 	.word	0x0001295d

000129cc <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   129cc:	b580      	push	{r7, lr}
   129ce:	b084      	sub	sp, #16
   129d0:	af00      	add	r7, sp, #0
   129d2:	6078      	str	r0, [r7, #4]
   129d4:	000a      	movs	r2, r1
   129d6:	1cfb      	adds	r3, r7, #3
   129d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   129da:	687b      	ldr	r3, [r7, #4]
   129dc:	681b      	ldr	r3, [r3, #0]
   129de:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   129e0:	68fb      	ldr	r3, [r7, #12]
   129e2:	1cfa      	adds	r2, r7, #3
   129e4:	7812      	ldrb	r2, [r2, #0]
   129e6:	759a      	strb	r2, [r3, #22]
}
   129e8:	46c0      	nop			; (mov r8, r8)
   129ea:	46bd      	mov	sp, r7
   129ec:	b004      	add	sp, #16
   129ee:	bd80      	pop	{r7, pc}

000129f0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   129f0:	b580      	push	{r7, lr}
   129f2:	b084      	sub	sp, #16
   129f4:	af00      	add	r7, sp, #0
   129f6:	0002      	movs	r2, r0
   129f8:	1dfb      	adds	r3, r7, #7
   129fa:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   129fc:	1dfb      	adds	r3, r7, #7
   129fe:	781a      	ldrb	r2, [r3, #0]
   12a00:	4b47      	ldr	r3, [pc, #284]	; (12b20 <_adc_interrupt_handler+0x130>)
   12a02:	0092      	lsls	r2, r2, #2
   12a04:	58d3      	ldr	r3, [r2, r3]
   12a06:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12a08:	68fb      	ldr	r3, [r7, #12]
   12a0a:	681b      	ldr	r3, [r3, #0]
   12a0c:	7e1b      	ldrb	r3, [r3, #24]
   12a0e:	b2da      	uxtb	r2, r3
   12a10:	68fb      	ldr	r3, [r7, #12]
   12a12:	681b      	ldr	r3, [r3, #0]
   12a14:	7ddb      	ldrb	r3, [r3, #23]
   12a16:	b2db      	uxtb	r3, r3
   12a18:	4013      	ands	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12a1e:	68bb      	ldr	r3, [r7, #8]
   12a20:	2201      	movs	r2, #1
   12a22:	4013      	ands	r3, r2
   12a24:	d045      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12a26:	68fb      	ldr	r3, [r7, #12]
   12a28:	681b      	ldr	r3, [r3, #0]
   12a2a:	2201      	movs	r2, #1
   12a2c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12a2e:	46c0      	nop			; (mov r8, r8)
   12a30:	68fb      	ldr	r3, [r7, #12]
   12a32:	0018      	movs	r0, r3
   12a34:	4b3b      	ldr	r3, [pc, #236]	; (12b24 <_adc_interrupt_handler+0x134>)
   12a36:	4798      	blx	r3
   12a38:	1e03      	subs	r3, r0, #0
   12a3a:	d1f9      	bne.n	12a30 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12a3c:	68fb      	ldr	r3, [r7, #12]
   12a3e:	695b      	ldr	r3, [r3, #20]
   12a40:	1c99      	adds	r1, r3, #2
   12a42:	68fa      	ldr	r2, [r7, #12]
   12a44:	6151      	str	r1, [r2, #20]
   12a46:	68fa      	ldr	r2, [r7, #12]
   12a48:	6812      	ldr	r2, [r2, #0]
   12a4a:	8b52      	ldrh	r2, [r2, #26]
   12a4c:	b292      	uxth	r2, r2
   12a4e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12a50:	68fb      	ldr	r3, [r7, #12]
   12a52:	8b1b      	ldrh	r3, [r3, #24]
   12a54:	b29b      	uxth	r3, r3
   12a56:	3b01      	subs	r3, #1
   12a58:	b29b      	uxth	r3, r3
   12a5a:	68fa      	ldr	r2, [r7, #12]
   12a5c:	1c19      	adds	r1, r3, #0
   12a5e:	8311      	strh	r1, [r2, #24]
   12a60:	2b00      	cmp	r3, #0
   12a62:	d008      	beq.n	12a76 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12a64:	68fb      	ldr	r3, [r7, #12]
   12a66:	7f5b      	ldrb	r3, [r3, #29]
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d022      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12a6c:	68fb      	ldr	r3, [r7, #12]
   12a6e:	0018      	movs	r0, r3
   12a70:	4b2d      	ldr	r3, [pc, #180]	; (12b28 <_adc_interrupt_handler+0x138>)
   12a72:	4798      	blx	r3
   12a74:	e01d      	b.n	12ab2 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12a76:	68fb      	ldr	r3, [r7, #12]
   12a78:	2101      	movs	r1, #1
   12a7a:	0018      	movs	r0, r3
   12a7c:	4b2b      	ldr	r3, [pc, #172]	; (12b2c <_adc_interrupt_handler+0x13c>)
   12a7e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12a80:	68fb      	ldr	r3, [r7, #12]
   12a82:	7f1b      	ldrb	r3, [r3, #28]
   12a84:	b2db      	uxtb	r3, r3
   12a86:	2b05      	cmp	r3, #5
   12a88:	d113      	bne.n	12ab2 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12a8a:	68fb      	ldr	r3, [r7, #12]
   12a8c:	2200      	movs	r2, #0
   12a8e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12a90:	68fb      	ldr	r3, [r7, #12]
   12a92:	7edb      	ldrb	r3, [r3, #27]
   12a94:	001a      	movs	r2, r3
   12a96:	2301      	movs	r3, #1
   12a98:	4013      	ands	r3, r2
   12a9a:	d00a      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12a9c:	68fb      	ldr	r3, [r7, #12]
   12a9e:	7e9b      	ldrb	r3, [r3, #26]
   12aa0:	001a      	movs	r2, r3
   12aa2:	2301      	movs	r3, #1
   12aa4:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12aa6:	d004      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12aa8:	68fb      	ldr	r3, [r7, #12]
   12aaa:	689b      	ldr	r3, [r3, #8]
   12aac:	68fa      	ldr	r2, [r7, #12]
   12aae:	0010      	movs	r0, r2
   12ab0:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12ab2:	68bb      	ldr	r3, [r7, #8]
   12ab4:	2204      	movs	r2, #4
   12ab6:	4013      	ands	r3, r2
   12ab8:	d014      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12aba:	68fb      	ldr	r3, [r7, #12]
   12abc:	681b      	ldr	r3, [r3, #0]
   12abe:	2204      	movs	r2, #4
   12ac0:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ac2:	68fb      	ldr	r3, [r7, #12]
   12ac4:	7edb      	ldrb	r3, [r3, #27]
   12ac6:	001a      	movs	r2, r3
   12ac8:	2302      	movs	r3, #2
   12aca:	4013      	ands	r3, r2
   12acc:	d00a      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12ace:	68fb      	ldr	r3, [r7, #12]
   12ad0:	7e9b      	ldrb	r3, [r3, #26]
   12ad2:	001a      	movs	r2, r3
   12ad4:	2302      	movs	r3, #2
   12ad6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ad8:	d004      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12ada:	68fb      	ldr	r3, [r7, #12]
   12adc:	68db      	ldr	r3, [r3, #12]
   12ade:	68fa      	ldr	r2, [r7, #12]
   12ae0:	0010      	movs	r0, r2
   12ae2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12ae4:	68bb      	ldr	r3, [r7, #8]
   12ae6:	2202      	movs	r2, #2
   12ae8:	4013      	ands	r3, r2
   12aea:	d014      	beq.n	12b16 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12aec:	68fb      	ldr	r3, [r7, #12]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	2202      	movs	r2, #2
   12af2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12af4:	68fb      	ldr	r3, [r7, #12]
   12af6:	7edb      	ldrb	r3, [r3, #27]
   12af8:	001a      	movs	r2, r3
   12afa:	2304      	movs	r3, #4
   12afc:	4013      	ands	r3, r2
   12afe:	d00a      	beq.n	12b16 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7e9b      	ldrb	r3, [r3, #26]
   12b04:	001a      	movs	r2, r3
   12b06:	2304      	movs	r3, #4
   12b08:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12b0a:	d004      	beq.n	12b16 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	691b      	ldr	r3, [r3, #16]
   12b10:	68fa      	ldr	r2, [r7, #12]
   12b12:	0010      	movs	r0, r2
   12b14:	4798      	blx	r3
		}
	}
}
   12b16:	46c0      	nop			; (mov r8, r8)
   12b18:	46bd      	mov	sp, r7
   12b1a:	b004      	add	sp, #16
   12b1c:	bd80      	pop	{r7, pc}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	200045a8 	.word	0x200045a8
   12b24:	0001295d 	.word	0x0001295d
   12b28:	00012985 	.word	0x00012985
   12b2c:	000129cd 	.word	0x000129cd

00012b30 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12b30:	b580      	push	{r7, lr}
   12b32:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12b34:	2000      	movs	r0, #0
   12b36:	4b02      	ldr	r3, [pc, #8]	; (12b40 <ADC_Handler+0x10>)
   12b38:	4798      	blx	r3
}
   12b3a:	46c0      	nop			; (mov r8, r8)
   12b3c:	46bd      	mov	sp, r7
   12b3e:	bd80      	pop	{r7, pc}
   12b40:	000129f1 	.word	0x000129f1

00012b44 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12b44:	b580      	push	{r7, lr}
   12b46:	b082      	sub	sp, #8
   12b48:	af00      	add	r7, sp, #0
   12b4a:	0002      	movs	r2, r0
   12b4c:	1dfb      	adds	r3, r7, #7
   12b4e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12b50:	4a07      	ldr	r2, [pc, #28]	; (12b70 <system_interrupt_disable+0x2c>)
   12b52:	1dfb      	adds	r3, r7, #7
   12b54:	781b      	ldrb	r3, [r3, #0]
   12b56:	0019      	movs	r1, r3
   12b58:	231f      	movs	r3, #31
   12b5a:	400b      	ands	r3, r1
   12b5c:	2101      	movs	r1, #1
   12b5e:	4099      	lsls	r1, r3
   12b60:	000b      	movs	r3, r1
   12b62:	0019      	movs	r1, r3
   12b64:	2380      	movs	r3, #128	; 0x80
   12b66:	50d1      	str	r1, [r2, r3]
}
   12b68:	46c0      	nop			; (mov r8, r8)
   12b6a:	46bd      	mov	sp, r7
   12b6c:	b002      	add	sp, #8
   12b6e:	bd80      	pop	{r7, pc}
   12b70:	e000e100 	.word	0xe000e100

00012b74 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12b74:	b580      	push	{r7, lr}
   12b76:	b084      	sub	sp, #16
   12b78:	af00      	add	r7, sp, #0
   12b7a:	0002      	movs	r2, r0
   12b7c:	1dfb      	adds	r3, r7, #7
   12b7e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12b80:	1dfb      	adds	r3, r7, #7
   12b82:	781a      	ldrb	r2, [r3, #0]
   12b84:	4b37      	ldr	r3, [pc, #220]	; (12c64 <_dac_interrupt_handler+0xf0>)
   12b86:	0092      	lsls	r2, r2, #2
   12b88:	58d3      	ldr	r3, [r2, r3]
   12b8a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12b8c:	68fb      	ldr	r3, [r7, #12]
   12b8e:	681b      	ldr	r3, [r3, #0]
   12b90:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12b92:	68bb      	ldr	r3, [r7, #8]
   12b94:	799b      	ldrb	r3, [r3, #6]
   12b96:	b2db      	uxtb	r3, r3
   12b98:	001a      	movs	r2, r3
   12b9a:	2301      	movs	r3, #1
   12b9c:	4013      	ands	r3, r2
   12b9e:	d00e      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12ba0:	68bb      	ldr	r3, [r7, #8]
   12ba2:	2201      	movs	r2, #1
   12ba4:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12ba6:	68fb      	ldr	r3, [r7, #12]
   12ba8:	3314      	adds	r3, #20
   12baa:	2b00      	cmp	r3, #0
   12bac:	d007      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12bae:	68fb      	ldr	r3, [r7, #12]
   12bb0:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12bb2:	2b00      	cmp	r3, #0
   12bb4:	d003      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12bb6:	68fb      	ldr	r3, [r7, #12]
   12bb8:	699b      	ldr	r3, [r3, #24]
   12bba:	2000      	movs	r0, #0
   12bbc:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12bbe:	68bb      	ldr	r3, [r7, #8]
   12bc0:	799b      	ldrb	r3, [r3, #6]
   12bc2:	b2db      	uxtb	r3, r3
   12bc4:	001a      	movs	r2, r3
   12bc6:	2302      	movs	r3, #2
   12bc8:	4013      	ands	r3, r2
   12bca:	d047      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12bcc:	68bb      	ldr	r3, [r7, #8]
   12bce:	2202      	movs	r2, #2
   12bd0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12bd2:	68fb      	ldr	r3, [r7, #12]
   12bd4:	899b      	ldrh	r3, [r3, #12]
   12bd6:	b29b      	uxth	r3, r3
   12bd8:	2b00      	cmp	r3, #0
   12bda:	d033      	beq.n	12c44 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12bdc:	68fb      	ldr	r3, [r7, #12]
   12bde:	689a      	ldr	r2, [r3, #8]
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	89db      	ldrh	r3, [r3, #14]
   12be4:	b29b      	uxth	r3, r3
   12be6:	1c59      	adds	r1, r3, #1
   12be8:	b288      	uxth	r0, r1
   12bea:	68f9      	ldr	r1, [r7, #12]
   12bec:	81c8      	strh	r0, [r1, #14]
   12bee:	005b      	lsls	r3, r3, #1
   12bf0:	18d3      	adds	r3, r2, r3
   12bf2:	881b      	ldrh	r3, [r3, #0]
   12bf4:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12bf6:	68bb      	ldr	r3, [r7, #8]
   12bf8:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12bfa:	68fb      	ldr	r3, [r7, #12]
   12bfc:	899b      	ldrh	r3, [r3, #12]
   12bfe:	b29b      	uxth	r3, r3
   12c00:	3b01      	subs	r3, #1
   12c02:	b29a      	uxth	r2, r3
   12c04:	68fb      	ldr	r3, [r7, #12]
   12c06:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	899b      	ldrh	r3, [r3, #12]
   12c0c:	b29b      	uxth	r3, r3
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d118      	bne.n	12c44 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12c12:	68fb      	ldr	r3, [r7, #12]
   12c14:	2220      	movs	r2, #32
   12c16:	2100      	movs	r1, #0
   12c18:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12c1a:	68bb      	ldr	r3, [r7, #8]
   12c1c:	2202      	movs	r2, #2
   12c1e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12c20:	68bb      	ldr	r3, [r7, #8]
   12c22:	2202      	movs	r2, #2
   12c24:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12c26:	2019      	movs	r0, #25
   12c28:	4b0f      	ldr	r3, [pc, #60]	; (12c68 <_dac_interrupt_handler+0xf4>)
   12c2a:	4798      	blx	r3

				if ((module->callback) &&
   12c2c:	68fb      	ldr	r3, [r7, #12]
   12c2e:	3314      	adds	r3, #20
   12c30:	2b00      	cmp	r3, #0
   12c32:	d007      	beq.n	12c44 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12c34:	68fb      	ldr	r3, [r7, #12]
   12c36:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12c38:	2b00      	cmp	r3, #0
   12c3a:	d003      	beq.n	12c44 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12c3c:	68fb      	ldr	r3, [r7, #12]
   12c3e:	69db      	ldr	r3, [r3, #28]
   12c40:	2000      	movs	r0, #0
   12c42:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12c44:	68fb      	ldr	r3, [r7, #12]
   12c46:	3314      	adds	r3, #20
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d007      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12c50:	2b00      	cmp	r3, #0
   12c52:	d003      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	695b      	ldr	r3, [r3, #20]
   12c58:	2000      	movs	r0, #0
   12c5a:	4798      	blx	r3
		}
	}
}
   12c5c:	46c0      	nop			; (mov r8, r8)
   12c5e:	46bd      	mov	sp, r7
   12c60:	b004      	add	sp, #16
   12c62:	bd80      	pop	{r7, pc}
   12c64:	200045ac 	.word	0x200045ac
   12c68:	00012b45 	.word	0x00012b45

00012c6c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12c6c:	b580      	push	{r7, lr}
   12c6e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12c70:	2000      	movs	r0, #0
   12c72:	4b02      	ldr	r3, [pc, #8]	; (12c7c <DAC_Handler+0x10>)
   12c74:	4798      	blx	r3
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	bd80      	pop	{r7, pc}
   12c7c:	00012b75 	.word	0x00012b75

00012c80 <system_interrupt_enter_critical_section>:
{
   12c80:	b580      	push	{r7, lr}
   12c82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12c84:	4b02      	ldr	r3, [pc, #8]	; (12c90 <system_interrupt_enter_critical_section+0x10>)
   12c86:	4798      	blx	r3
}
   12c88:	46c0      	nop			; (mov r8, r8)
   12c8a:	46bd      	mov	sp, r7
   12c8c:	bd80      	pop	{r7, pc}
   12c8e:	46c0      	nop			; (mov r8, r8)
   12c90:	00025aa5 	.word	0x00025aa5

00012c94 <system_interrupt_leave_critical_section>:
{
   12c94:	b580      	push	{r7, lr}
   12c96:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12c98:	4b02      	ldr	r3, [pc, #8]	; (12ca4 <system_interrupt_leave_critical_section+0x10>)
   12c9a:	4798      	blx	r3
}
   12c9c:	46c0      	nop			; (mov r8, r8)
   12c9e:	46bd      	mov	sp, r7
   12ca0:	bd80      	pop	{r7, pc}
   12ca2:	46c0      	nop			; (mov r8, r8)
   12ca4:	00025af9 	.word	0x00025af9

00012ca8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12ca8:	b580      	push	{r7, lr}
   12caa:	b086      	sub	sp, #24
   12cac:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12cae:	4b49      	ldr	r3, [pc, #292]	; (12dd4 <DMAC_Handler+0x12c>)
   12cb0:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12cb2:	4b49      	ldr	r3, [pc, #292]	; (12dd8 <DMAC_Handler+0x130>)
   12cb4:	8c1b      	ldrh	r3, [r3, #32]
   12cb6:	b29b      	uxth	r3, r3
   12cb8:	b2da      	uxtb	r2, r3
   12cba:	2317      	movs	r3, #23
   12cbc:	18fb      	adds	r3, r7, r3
   12cbe:	210f      	movs	r1, #15
   12cc0:	400a      	ands	r2, r1
   12cc2:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12cc4:	2317      	movs	r3, #23
   12cc6:	18fb      	adds	r3, r7, r3
   12cc8:	781a      	ldrb	r2, [r3, #0]
   12cca:	4b44      	ldr	r3, [pc, #272]	; (12ddc <DMAC_Handler+0x134>)
   12ccc:	0092      	lsls	r2, r2, #2
   12cce:	58d3      	ldr	r3, [r2, r3]
   12cd0:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12cd2:	4a41      	ldr	r2, [pc, #260]	; (12dd8 <DMAC_Handler+0x130>)
   12cd4:	693b      	ldr	r3, [r7, #16]
   12cd6:	781b      	ldrb	r3, [r3, #0]
   12cd8:	210f      	movs	r1, #15
   12cda:	400b      	ands	r3, r1
   12cdc:	b2d9      	uxtb	r1, r3
   12cde:	233f      	movs	r3, #63	; 0x3f
   12ce0:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12ce2:	493d      	ldr	r1, [pc, #244]	; (12dd8 <DMAC_Handler+0x130>)
   12ce4:	230f      	movs	r3, #15
   12ce6:	18fb      	adds	r3, r7, r3
   12ce8:	224e      	movs	r2, #78	; 0x4e
   12cea:	5c8a      	ldrb	r2, [r1, r2]
   12cec:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12cee:	693b      	ldr	r3, [r7, #16]
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	4a3b      	ldr	r2, [pc, #236]	; (12de0 <DMAC_Handler+0x138>)
   12cf4:	011b      	lsls	r3, r3, #4
   12cf6:	18d3      	adds	r3, r2, r3
   12cf8:	3302      	adds	r3, #2
   12cfa:	881b      	ldrh	r3, [r3, #0]
   12cfc:	b29b      	uxth	r3, r3
   12cfe:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12d00:	693b      	ldr	r3, [r7, #16]
   12d02:	781b      	ldrb	r3, [r3, #0]
   12d04:	4a37      	ldr	r2, [pc, #220]	; (12de4 <DMAC_Handler+0x13c>)
   12d06:	011b      	lsls	r3, r3, #4
   12d08:	18d3      	adds	r3, r2, r3
   12d0a:	3302      	adds	r3, #2
   12d0c:	881b      	ldrh	r3, [r3, #0]
   12d0e:	b29b      	uxth	r3, r3
   12d10:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12d12:	68ba      	ldr	r2, [r7, #8]
   12d14:	687b      	ldr	r3, [r7, #4]
   12d16:	1ad2      	subs	r2, r2, r3
   12d18:	693b      	ldr	r3, [r7, #16]
   12d1a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12d1c:	230f      	movs	r3, #15
   12d1e:	18fb      	adds	r3, r7, r3
   12d20:	781b      	ldrb	r3, [r3, #0]
   12d22:	2201      	movs	r2, #1
   12d24:	4013      	ands	r3, r2
   12d26:	d016      	beq.n	12d56 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12d28:	4a2b      	ldr	r2, [pc, #172]	; (12dd8 <DMAC_Handler+0x130>)
   12d2a:	234e      	movs	r3, #78	; 0x4e
   12d2c:	2101      	movs	r1, #1
   12d2e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12d30:	693b      	ldr	r3, [r7, #16]
   12d32:	2210      	movs	r2, #16
   12d34:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12d36:	693b      	ldr	r3, [r7, #16]
   12d38:	7c1b      	ldrb	r3, [r3, #16]
   12d3a:	001a      	movs	r2, r3
   12d3c:	2301      	movs	r3, #1
   12d3e:	4013      	ands	r3, r2
   12d40:	d042      	beq.n	12dc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12d42:	693b      	ldr	r3, [r7, #16]
   12d44:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12d46:	2b00      	cmp	r3, #0
   12d48:	d03e      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	685b      	ldr	r3, [r3, #4]
   12d4e:	693a      	ldr	r2, [r7, #16]
   12d50:	0010      	movs	r0, r2
   12d52:	4798      	blx	r3
   12d54:	e038      	b.n	12dc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12d56:	230f      	movs	r3, #15
   12d58:	18fb      	adds	r3, r7, r3
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	2202      	movs	r2, #2
   12d5e:	4013      	ands	r3, r2
   12d60:	d016      	beq.n	12d90 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12d62:	4a1d      	ldr	r2, [pc, #116]	; (12dd8 <DMAC_Handler+0x130>)
   12d64:	234e      	movs	r3, #78	; 0x4e
   12d66:	2102      	movs	r1, #2
   12d68:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12d6a:	693b      	ldr	r3, [r7, #16]
   12d6c:	2200      	movs	r2, #0
   12d6e:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12d70:	693b      	ldr	r3, [r7, #16]
   12d72:	7c1b      	ldrb	r3, [r3, #16]
   12d74:	001a      	movs	r2, r3
   12d76:	2302      	movs	r3, #2
   12d78:	4013      	ands	r3, r2
   12d7a:	d025      	beq.n	12dc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12d7c:	693b      	ldr	r3, [r7, #16]
   12d7e:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12d80:	2b00      	cmp	r3, #0
   12d82:	d021      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12d84:	693b      	ldr	r3, [r7, #16]
   12d86:	689b      	ldr	r3, [r3, #8]
   12d88:	693a      	ldr	r2, [r7, #16]
   12d8a:	0010      	movs	r0, r2
   12d8c:	4798      	blx	r3
   12d8e:	e01b      	b.n	12dc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12d90:	230f      	movs	r3, #15
   12d92:	18fb      	adds	r3, r7, r3
   12d94:	781b      	ldrb	r3, [r3, #0]
   12d96:	2204      	movs	r2, #4
   12d98:	4013      	ands	r3, r2
   12d9a:	d015      	beq.n	12dc8 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12d9c:	4a0e      	ldr	r2, [pc, #56]	; (12dd8 <DMAC_Handler+0x130>)
   12d9e:	234e      	movs	r3, #78	; 0x4e
   12da0:	2104      	movs	r1, #4
   12da2:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12da4:	693b      	ldr	r3, [r7, #16]
   12da6:	2206      	movs	r2, #6
   12da8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12daa:	693b      	ldr	r3, [r7, #16]
   12dac:	7c1b      	ldrb	r3, [r3, #16]
   12dae:	001a      	movs	r2, r3
   12db0:	2304      	movs	r3, #4
   12db2:	4013      	ands	r3, r2
   12db4:	d008      	beq.n	12dc8 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12db6:	693b      	ldr	r3, [r7, #16]
   12db8:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12dba:	2b00      	cmp	r3, #0
   12dbc:	d004      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12dbe:	693b      	ldr	r3, [r7, #16]
   12dc0:	68db      	ldr	r3, [r3, #12]
   12dc2:	693a      	ldr	r2, [r7, #16]
   12dc4:	0010      	movs	r0, r2
   12dc6:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12dc8:	4b07      	ldr	r3, [pc, #28]	; (12de8 <DMAC_Handler+0x140>)
   12dca:	4798      	blx	r3
}
   12dcc:	46c0      	nop			; (mov r8, r8)
   12dce:	46bd      	mov	sp, r7
   12dd0:	b006      	add	sp, #24
   12dd2:	bd80      	pop	{r7, pc}
   12dd4:	00012c81 	.word	0x00012c81
   12dd8:	41004800 	.word	0x41004800
   12ddc:	20000370 	.word	0x20000370
   12de0:	200045b0 	.word	0x200045b0
   12de4:	20000320 	.word	0x20000320
   12de8:	00012c95 	.word	0x00012c95

00012dec <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12dec:	b580      	push	{r7, lr}
   12dee:	b082      	sub	sp, #8
   12df0:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12df2:	4b15      	ldr	r3, [pc, #84]	; (12e48 <EVSYS_Handler+0x5c>)
   12df4:	691b      	ldr	r3, [r3, #16]
   12df6:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12df8:	4b14      	ldr	r3, [pc, #80]	; (12e4c <EVSYS_Handler+0x60>)
   12dfa:	699b      	ldr	r3, [r3, #24]
   12dfc:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12dfe:	4b12      	ldr	r3, [pc, #72]	; (12e48 <EVSYS_Handler+0x5c>)
   12e00:	689a      	ldr	r2, [r3, #8]
   12e02:	683b      	ldr	r3, [r7, #0]
   12e04:	431a      	orrs	r2, r3
   12e06:	4b10      	ldr	r3, [pc, #64]	; (12e48 <EVSYS_Handler+0x5c>)
   12e08:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12e0a:	4b10      	ldr	r3, [pc, #64]	; (12e4c <EVSYS_Handler+0x60>)
   12e0c:	4a10      	ldr	r2, [pc, #64]	; (12e50 <EVSYS_Handler+0x64>)
   12e0e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12e10:	e008      	b.n	12e24 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12e12:	687b      	ldr	r3, [r7, #4]
   12e14:	685a      	ldr	r2, [r3, #4]
   12e16:	687b      	ldr	r3, [r7, #4]
   12e18:	681b      	ldr	r3, [r3, #0]
   12e1a:	0018      	movs	r0, r3
   12e1c:	4790      	blx	r2
		current_hook = current_hook->next;
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	689b      	ldr	r3, [r3, #8]
   12e22:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12e24:	687b      	ldr	r3, [r7, #4]
   12e26:	2b00      	cmp	r3, #0
   12e28:	d1f3      	bne.n	12e12 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12e2a:	4b07      	ldr	r3, [pc, #28]	; (12e48 <EVSYS_Handler+0x5c>)
   12e2c:	68db      	ldr	r3, [r3, #12]
   12e2e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12e30:	4b05      	ldr	r3, [pc, #20]	; (12e48 <EVSYS_Handler+0x5c>)
   12e32:	689b      	ldr	r3, [r3, #8]
   12e34:	683a      	ldr	r2, [r7, #0]
   12e36:	43d2      	mvns	r2, r2
   12e38:	401a      	ands	r2, r3
   12e3a:	4b03      	ldr	r3, [pc, #12]	; (12e48 <EVSYS_Handler+0x5c>)
   12e3c:	609a      	str	r2, [r3, #8]
}
   12e3e:	46c0      	nop			; (mov r8, r8)
   12e40:	46bd      	mov	sp, r7
   12e42:	b002      	add	sp, #8
   12e44:	bd80      	pop	{r7, pc}
   12e46:	46c0      	nop			; (mov r8, r8)
   12e48:	20000000 	.word	0x20000000
   12e4c:	42000400 	.word	0x42000400
   12e50:	0f0fffff 	.word	0x0f0fffff

00012e54 <system_apb_clock_set_mask>:
{
   12e54:	b580      	push	{r7, lr}
   12e56:	b082      	sub	sp, #8
   12e58:	af00      	add	r7, sp, #0
   12e5a:	0002      	movs	r2, r0
   12e5c:	6039      	str	r1, [r7, #0]
   12e5e:	1dfb      	adds	r3, r7, #7
   12e60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12e62:	1dfb      	adds	r3, r7, #7
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	2b01      	cmp	r3, #1
   12e68:	d00a      	beq.n	12e80 <system_apb_clock_set_mask+0x2c>
   12e6a:	2b02      	cmp	r3, #2
   12e6c:	d00f      	beq.n	12e8e <system_apb_clock_set_mask+0x3a>
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d114      	bne.n	12e9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   12e72:	4b0e      	ldr	r3, [pc, #56]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e74:	4a0d      	ldr	r2, [pc, #52]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e76:	6991      	ldr	r1, [r2, #24]
   12e78:	683a      	ldr	r2, [r7, #0]
   12e7a:	430a      	orrs	r2, r1
   12e7c:	619a      	str	r2, [r3, #24]
			break;
   12e7e:	e00f      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12e80:	4b0a      	ldr	r3, [pc, #40]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e82:	4a0a      	ldr	r2, [pc, #40]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e84:	69d1      	ldr	r1, [r2, #28]
   12e86:	683a      	ldr	r2, [r7, #0]
   12e88:	430a      	orrs	r2, r1
   12e8a:	61da      	str	r2, [r3, #28]
			break;
   12e8c:	e008      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   12e8e:	4b07      	ldr	r3, [pc, #28]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e90:	4a06      	ldr	r2, [pc, #24]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e92:	6a11      	ldr	r1, [r2, #32]
   12e94:	683a      	ldr	r2, [r7, #0]
   12e96:	430a      	orrs	r2, r1
   12e98:	621a      	str	r2, [r3, #32]
			break;
   12e9a:	e001      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   12e9c:	2317      	movs	r3, #23
   12e9e:	e000      	b.n	12ea2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12ea0:	2300      	movs	r3, #0
}
   12ea2:	0018      	movs	r0, r3
   12ea4:	46bd      	mov	sp, r7
   12ea6:	b002      	add	sp, #8
   12ea8:	bd80      	pop	{r7, pc}
   12eaa:	46c0      	nop			; (mov r8, r8)
   12eac:	40000400 	.word	0x40000400

00012eb0 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12eb0:	b580      	push	{r7, lr}
   12eb2:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   12eb4:	2102      	movs	r1, #2
   12eb6:	2002      	movs	r0, #2
   12eb8:	4b07      	ldr	r3, [pc, #28]	; (12ed8 <_system_events_init+0x28>)
   12eba:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12ebc:	4b07      	ldr	r3, [pc, #28]	; (12edc <_system_events_init+0x2c>)
   12ebe:	2201      	movs	r2, #1
   12ec0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   12ec2:	46c0      	nop			; (mov r8, r8)
   12ec4:	4b05      	ldr	r3, [pc, #20]	; (12edc <_system_events_init+0x2c>)
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b2db      	uxtb	r3, r3
   12eca:	001a      	movs	r2, r3
   12ecc:	2301      	movs	r3, #1
   12ece:	4013      	ands	r3, r2
   12ed0:	d1f8      	bne.n	12ec4 <_system_events_init+0x14>
	}
}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	46bd      	mov	sp, r7
   12ed6:	bd80      	pop	{r7, pc}
   12ed8:	00012e55 	.word	0x00012e55
   12edc:	42000400 	.word	0x42000400

00012ee0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12ee0:	b580      	push	{r7, lr}
   12ee2:	b084      	sub	sp, #16
   12ee4:	af00      	add	r7, sp, #0
   12ee6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12ee8:	687b      	ldr	r3, [r7, #4]
   12eea:	681b      	ldr	r3, [r3, #0]
   12eec:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12eee:	68fb      	ldr	r3, [r7, #12]
   12ef0:	69db      	ldr	r3, [r3, #28]
   12ef2:	2207      	movs	r2, #7
   12ef4:	4013      	ands	r3, r2
   12ef6:	1e5a      	subs	r2, r3, #1
   12ef8:	4193      	sbcs	r3, r2
   12efa:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   12efc:	0018      	movs	r0, r3
   12efe:	46bd      	mov	sp, r7
   12f00:	b004      	add	sp, #16
   12f02:	bd80      	pop	{r7, pc}

00012f04 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   12f04:	b580      	push	{r7, lr}
   12f06:	b082      	sub	sp, #8
   12f08:	af00      	add	r7, sp, #0
   12f0a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   12f0c:	46c0      	nop			; (mov r8, r8)
   12f0e:	687b      	ldr	r3, [r7, #4]
   12f10:	0018      	movs	r0, r3
   12f12:	4b04      	ldr	r3, [pc, #16]	; (12f24 <_i2c_master_wait_for_sync+0x20>)
   12f14:	4798      	blx	r3
   12f16:	1e03      	subs	r3, r0, #0
   12f18:	d1f9      	bne.n	12f0e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   12f1a:	46c0      	nop			; (mov r8, r8)
   12f1c:	46bd      	mov	sp, r7
   12f1e:	b002      	add	sp, #8
   12f20:	bd80      	pop	{r7, pc}
   12f22:	46c0      	nop			; (mov r8, r8)
   12f24:	00012ee1 	.word	0x00012ee1

00012f28 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   12f28:	b580      	push	{r7, lr}
   12f2a:	b084      	sub	sp, #16
   12f2c:	af00      	add	r7, sp, #0
   12f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12f30:	687b      	ldr	r3, [r7, #4]
   12f32:	681b      	ldr	r3, [r3, #0]
   12f34:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12f36:	68fb      	ldr	r3, [r7, #12]
   12f38:	681b      	ldr	r3, [r3, #0]
   12f3a:	011b      	lsls	r3, r3, #4
   12f3c:	0fdb      	lsrs	r3, r3, #31
   12f3e:	b2db      	uxtb	r3, r3
   12f40:	001a      	movs	r2, r3
   12f42:	230b      	movs	r3, #11
   12f44:	18fb      	adds	r3, r7, r3
   12f46:	1e51      	subs	r1, r2, #1
   12f48:	418a      	sbcs	r2, r1
   12f4a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12f4c:	2308      	movs	r3, #8
   12f4e:	18fb      	adds	r3, r7, r3
   12f50:	687a      	ldr	r2, [r7, #4]
   12f52:	8b52      	ldrh	r2, [r2, #26]
   12f54:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12f56:	687b      	ldr	r3, [r7, #4]
   12f58:	8b9b      	ldrh	r3, [r3, #28]
   12f5a:	b29a      	uxth	r2, r3
   12f5c:	2308      	movs	r3, #8
   12f5e:	18fb      	adds	r3, r7, r3
   12f60:	2108      	movs	r1, #8
   12f62:	1879      	adds	r1, r7, r1
   12f64:	8809      	ldrh	r1, [r1, #0]
   12f66:	1a8a      	subs	r2, r1, r2
   12f68:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	8b9b      	ldrh	r3, [r3, #28]
   12f6e:	b29b      	uxth	r3, r3
   12f70:	3b01      	subs	r3, #1
   12f72:	b29a      	uxth	r2, r3
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12f78:	230b      	movs	r3, #11
   12f7a:	18fb      	adds	r3, r7, r3
   12f7c:	781b      	ldrb	r3, [r3, #0]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d010      	beq.n	12fa4 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   12f82:	687b      	ldr	r3, [r7, #4]
   12f84:	7adb      	ldrb	r3, [r3, #11]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d01c      	beq.n	12fc4 <_i2c_master_read+0x9c>
   12f8a:	687b      	ldr	r3, [r7, #4]
   12f8c:	8b9b      	ldrh	r3, [r3, #28]
   12f8e:	b29b      	uxth	r3, r3
   12f90:	2b01      	cmp	r3, #1
   12f92:	d117      	bne.n	12fc4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12f94:	68fb      	ldr	r3, [r7, #12]
   12f96:	685b      	ldr	r3, [r3, #4]
   12f98:	2280      	movs	r2, #128	; 0x80
   12f9a:	02d2      	lsls	r2, r2, #11
   12f9c:	431a      	orrs	r2, r3
   12f9e:	68fb      	ldr	r3, [r7, #12]
   12fa0:	605a      	str	r2, [r3, #4]
   12fa2:	e00f      	b.n	12fc4 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   12fa4:	687b      	ldr	r3, [r7, #4]
   12fa6:	7adb      	ldrb	r3, [r3, #11]
   12fa8:	2b00      	cmp	r3, #0
   12faa:	d00b      	beq.n	12fc4 <_i2c_master_read+0x9c>
   12fac:	687b      	ldr	r3, [r7, #4]
   12fae:	8b9b      	ldrh	r3, [r3, #28]
   12fb0:	b29b      	uxth	r3, r3
   12fb2:	2b00      	cmp	r3, #0
   12fb4:	d106      	bne.n	12fc4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12fb6:	68fb      	ldr	r3, [r7, #12]
   12fb8:	685b      	ldr	r3, [r3, #4]
   12fba:	2280      	movs	r2, #128	; 0x80
   12fbc:	02d2      	lsls	r2, r2, #11
   12fbe:	431a      	orrs	r2, r3
   12fc0:	68fb      	ldr	r3, [r7, #12]
   12fc2:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   12fc4:	687b      	ldr	r3, [r7, #4]
   12fc6:	8b9b      	ldrh	r3, [r3, #28]
   12fc8:	b29b      	uxth	r3, r3
   12fca:	2b00      	cmp	r3, #0
   12fcc:	d10e      	bne.n	12fec <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12fce:	687b      	ldr	r3, [r7, #4]
   12fd0:	7a9b      	ldrb	r3, [r3, #10]
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d00a      	beq.n	12fec <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12fd6:	687b      	ldr	r3, [r7, #4]
   12fd8:	0018      	movs	r0, r3
   12fda:	4b0e      	ldr	r3, [pc, #56]	; (13014 <_i2c_master_read+0xec>)
   12fdc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12fde:	68fb      	ldr	r3, [r7, #12]
   12fe0:	685b      	ldr	r3, [r3, #4]
   12fe2:	22c0      	movs	r2, #192	; 0xc0
   12fe4:	0292      	lsls	r2, r2, #10
   12fe6:	431a      	orrs	r2, r3
   12fe8:	68fb      	ldr	r3, [r7, #12]
   12fea:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   12fec:	687b      	ldr	r3, [r7, #4]
   12fee:	0018      	movs	r0, r3
   12ff0:	4b08      	ldr	r3, [pc, #32]	; (13014 <_i2c_master_read+0xec>)
   12ff2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   12ff4:	687b      	ldr	r3, [r7, #4]
   12ff6:	6a1a      	ldr	r2, [r3, #32]
   12ff8:	2308      	movs	r3, #8
   12ffa:	18fb      	adds	r3, r7, r3
   12ffc:	881b      	ldrh	r3, [r3, #0]
   12ffe:	18d3      	adds	r3, r2, r3
   13000:	68fa      	ldr	r2, [r7, #12]
   13002:	2128      	movs	r1, #40	; 0x28
   13004:	5c52      	ldrb	r2, [r2, r1]
   13006:	b2d2      	uxtb	r2, r2
   13008:	701a      	strb	r2, [r3, #0]
}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	46bd      	mov	sp, r7
   1300e:	b004      	add	sp, #16
   13010:	bd80      	pop	{r7, pc}
   13012:	46c0      	nop			; (mov r8, r8)
   13014:	00012f05 	.word	0x00012f05

00013018 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13018:	b580      	push	{r7, lr}
   1301a:	b084      	sub	sp, #16
   1301c:	af00      	add	r7, sp, #0
   1301e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13020:	687b      	ldr	r3, [r7, #4]
   13022:	681b      	ldr	r3, [r3, #0]
   13024:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13026:	68fb      	ldr	r3, [r7, #12]
   13028:	8b5b      	ldrh	r3, [r3, #26]
   1302a:	b29b      	uxth	r3, r3
   1302c:	001a      	movs	r2, r3
   1302e:	2304      	movs	r3, #4
   13030:	4013      	ands	r3, r2
   13032:	d004      	beq.n	1303e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13034:	687b      	ldr	r3, [r7, #4]
   13036:	2225      	movs	r2, #37	; 0x25
   13038:	211e      	movs	r1, #30
   1303a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1303c:	e024      	b.n	13088 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1303e:	230a      	movs	r3, #10
   13040:	18fb      	adds	r3, r7, r3
   13042:	687a      	ldr	r2, [r7, #4]
   13044:	8b52      	ldrh	r2, [r2, #26]
   13046:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	8b9b      	ldrh	r3, [r3, #28]
   1304c:	b29a      	uxth	r2, r3
   1304e:	230a      	movs	r3, #10
   13050:	18fb      	adds	r3, r7, r3
   13052:	210a      	movs	r1, #10
   13054:	1879      	adds	r1, r7, r1
   13056:	8809      	ldrh	r1, [r1, #0]
   13058:	1a8a      	subs	r2, r1, r2
   1305a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1305c:	687b      	ldr	r3, [r7, #4]
   1305e:	8b9b      	ldrh	r3, [r3, #28]
   13060:	b29b      	uxth	r3, r3
   13062:	3b01      	subs	r3, #1
   13064:	b29a      	uxth	r2, r3
   13066:	687b      	ldr	r3, [r7, #4]
   13068:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   1306a:	687b      	ldr	r3, [r7, #4]
   1306c:	0018      	movs	r0, r3
   1306e:	4b08      	ldr	r3, [pc, #32]	; (13090 <_i2c_master_write+0x78>)
   13070:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   13072:	687b      	ldr	r3, [r7, #4]
   13074:	6a1a      	ldr	r2, [r3, #32]
   13076:	230a      	movs	r3, #10
   13078:	18fb      	adds	r3, r7, r3
   1307a:	881b      	ldrh	r3, [r3, #0]
   1307c:	18d3      	adds	r3, r2, r3
   1307e:	781b      	ldrb	r3, [r3, #0]
   13080:	b2d9      	uxtb	r1, r3
   13082:	68fb      	ldr	r3, [r7, #12]
   13084:	2228      	movs	r2, #40	; 0x28
   13086:	5499      	strb	r1, [r3, r2]
}
   13088:	46bd      	mov	sp, r7
   1308a:	b004      	add	sp, #16
   1308c:	bd80      	pop	{r7, pc}
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	00012f05 	.word	0x00012f05

00013094 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   13094:	b580      	push	{r7, lr}
   13096:	b084      	sub	sp, #16
   13098:	af00      	add	r7, sp, #0
   1309a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1309c:	687b      	ldr	r3, [r7, #4]
   1309e:	681b      	ldr	r3, [r3, #0]
   130a0:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   130a2:	68fb      	ldr	r3, [r7, #12]
   130a4:	7e1b      	ldrb	r3, [r3, #24]
   130a6:	b2db      	uxtb	r3, r3
   130a8:	001a      	movs	r2, r3
   130aa:	2301      	movs	r3, #1
   130ac:	4013      	ands	r3, r2
   130ae:	d02b      	beq.n	13108 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   130b0:	68fb      	ldr	r3, [r7, #12]
   130b2:	2201      	movs	r2, #1
   130b4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   130b6:	68fb      	ldr	r3, [r7, #12]
   130b8:	8b5b      	ldrh	r3, [r3, #26]
   130ba:	b29b      	uxth	r3, r3
   130bc:	001a      	movs	r2, r3
   130be:	2302      	movs	r3, #2
   130c0:	4013      	ands	r3, r2
   130c2:	d004      	beq.n	130ce <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   130c4:	687b      	ldr	r3, [r7, #4]
   130c6:	2225      	movs	r2, #37	; 0x25
   130c8:	2141      	movs	r1, #65	; 0x41
   130ca:	5499      	strb	r1, [r3, r2]
   130cc:	e01c      	b.n	13108 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   130ce:	68fb      	ldr	r3, [r7, #12]
   130d0:	8b5b      	ldrh	r3, [r3, #26]
   130d2:	b29b      	uxth	r3, r3
   130d4:	001a      	movs	r2, r3
   130d6:	2304      	movs	r3, #4
   130d8:	4013      	ands	r3, r2
   130da:	d015      	beq.n	13108 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   130dc:	687b      	ldr	r3, [r7, #4]
   130de:	2225      	movs	r2, #37	; 0x25
   130e0:	2118      	movs	r1, #24
   130e2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   130e4:	687b      	ldr	r3, [r7, #4]
   130e6:	2200      	movs	r2, #0
   130e8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	7a9b      	ldrb	r3, [r3, #10]
   130ee:	2b00      	cmp	r3, #0
   130f0:	d00a      	beq.n	13108 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   130f2:	687b      	ldr	r3, [r7, #4]
   130f4:	0018      	movs	r0, r3
   130f6:	4b13      	ldr	r3, [pc, #76]	; (13144 <_i2c_master_async_address_response+0xb0>)
   130f8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   130fa:	68fb      	ldr	r3, [r7, #12]
   130fc:	685b      	ldr	r3, [r3, #4]
   130fe:	22c0      	movs	r2, #192	; 0xc0
   13100:	0292      	lsls	r2, r2, #10
   13102:	431a      	orrs	r2, r3
   13104:	68fb      	ldr	r3, [r7, #12]
   13106:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13108:	687b      	ldr	r3, [r7, #4]
   1310a:	8b9b      	ldrh	r3, [r3, #28]
   1310c:	b29a      	uxth	r2, r3
   1310e:	687b      	ldr	r3, [r7, #4]
   13110:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13112:	687b      	ldr	r3, [r7, #4]
   13114:	2225      	movs	r2, #37	; 0x25
   13116:	5c9b      	ldrb	r3, [r3, r2]
   13118:	b2db      	uxtb	r3, r3
   1311a:	2b05      	cmp	r3, #5
   1311c:	d10e      	bne.n	1313c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1311e:	687b      	ldr	r3, [r7, #4]
   13120:	2224      	movs	r2, #36	; 0x24
   13122:	5c9b      	ldrb	r3, [r3, r2]
   13124:	b2db      	uxtb	r3, r3
   13126:	2b00      	cmp	r3, #0
   13128:	d104      	bne.n	13134 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1312a:	687b      	ldr	r3, [r7, #4]
   1312c:	0018      	movs	r0, r3
   1312e:	4b06      	ldr	r3, [pc, #24]	; (13148 <_i2c_master_async_address_response+0xb4>)
   13130:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13132:	e003      	b.n	1313c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b04      	ldr	r3, [pc, #16]	; (1314c <_i2c_master_async_address_response+0xb8>)
   1313a:	4798      	blx	r3
}
   1313c:	46c0      	nop			; (mov r8, r8)
   1313e:	46bd      	mov	sp, r7
   13140:	b004      	add	sp, #16
   13142:	bd80      	pop	{r7, pc}
   13144:	00012f05 	.word	0x00012f05
   13148:	00013019 	.word	0x00013019
   1314c:	00012f29 	.word	0x00012f29

00013150 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   13150:	b580      	push	{r7, lr}
   13152:	b084      	sub	sp, #16
   13154:	af00      	add	r7, sp, #0
   13156:	60f8      	str	r0, [r7, #12]
   13158:	60b9      	str	r1, [r7, #8]
   1315a:	1dfb      	adds	r3, r7, #7
   1315c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   1315e:	1dfb      	adds	r3, r7, #7
   13160:	781b      	ldrb	r3, [r3, #0]
   13162:	68fa      	ldr	r2, [r7, #12]
   13164:	3302      	adds	r3, #2
   13166:	009b      	lsls	r3, r3, #2
   13168:	18d3      	adds	r3, r2, r3
   1316a:	3304      	adds	r3, #4
   1316c:	68ba      	ldr	r2, [r7, #8]
   1316e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   13170:	68fb      	ldr	r3, [r7, #12]
   13172:	7e1b      	ldrb	r3, [r3, #24]
   13174:	b2db      	uxtb	r3, r3
   13176:	b25a      	sxtb	r2, r3
   13178:	1dfb      	adds	r3, r7, #7
   1317a:	781b      	ldrb	r3, [r3, #0]
   1317c:	2101      	movs	r1, #1
   1317e:	4099      	lsls	r1, r3
   13180:	000b      	movs	r3, r1
   13182:	b25b      	sxtb	r3, r3
   13184:	4313      	orrs	r3, r2
   13186:	b25b      	sxtb	r3, r3
   13188:	b2da      	uxtb	r2, r3
   1318a:	68fb      	ldr	r3, [r7, #12]
   1318c:	761a      	strb	r2, [r3, #24]
}
   1318e:	46c0      	nop			; (mov r8, r8)
   13190:	46bd      	mov	sp, r7
   13192:	b004      	add	sp, #16
   13194:	bd80      	pop	{r7, pc}
	...

00013198 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13198:	b590      	push	{r4, r7, lr}
   1319a:	b087      	sub	sp, #28
   1319c:	af00      	add	r7, sp, #0
   1319e:	6078      	str	r0, [r7, #4]
   131a0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	681b      	ldr	r3, [r3, #0]
   131a6:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   131a8:	683b      	ldr	r3, [r7, #0]
   131aa:	685a      	ldr	r2, [r3, #4]
   131ac:	687b      	ldr	r3, [r7, #4]
   131ae:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   131b0:	683b      	ldr	r3, [r7, #0]
   131b2:	885a      	ldrh	r2, [r3, #2]
   131b4:	687b      	ldr	r3, [r7, #4]
   131b6:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   131b8:	687b      	ldr	r3, [r7, #4]
   131ba:	2224      	movs	r2, #36	; 0x24
   131bc:	2101      	movs	r1, #1
   131be:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   131c0:	687b      	ldr	r3, [r7, #4]
   131c2:	2225      	movs	r2, #37	; 0x25
   131c4:	2105      	movs	r1, #5
   131c6:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   131c8:	693b      	ldr	r3, [r7, #16]
   131ca:	681b      	ldr	r3, [r3, #0]
   131cc:	011b      	lsls	r3, r3, #4
   131ce:	0fdb      	lsrs	r3, r3, #31
   131d0:	b2db      	uxtb	r3, r3
   131d2:	001a      	movs	r2, r3
   131d4:	230f      	movs	r3, #15
   131d6:	18fb      	adds	r3, r7, r3
   131d8:	1e51      	subs	r1, r2, #1
   131da:	418a      	sbcs	r2, r1
   131dc:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   131de:	683b      	ldr	r3, [r7, #0]
   131e0:	7a5b      	ldrb	r3, [r3, #9]
   131e2:	2b00      	cmp	r3, #0
   131e4:	d006      	beq.n	131f4 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   131e6:	683b      	ldr	r3, [r7, #0]
   131e8:	7a9a      	ldrb	r2, [r3, #10]
   131ea:	687b      	ldr	r3, [r7, #4]
   131ec:	0011      	movs	r1, r2
   131ee:	0018      	movs	r0, r3
   131f0:	4b3b      	ldr	r3, [pc, #236]	; (132e0 <_i2c_master_read_packet+0x148>)
   131f2:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   131f4:	230f      	movs	r3, #15
   131f6:	18fb      	adds	r3, r7, r3
   131f8:	781b      	ldrb	r3, [r3, #0]
   131fa:	2b00      	cmp	r3, #0
   131fc:	d00b      	beq.n	13216 <_i2c_master_read_packet+0x7e>
   131fe:	683b      	ldr	r3, [r7, #0]
   13200:	885b      	ldrh	r3, [r3, #2]
   13202:	2b01      	cmp	r3, #1
   13204:	d107      	bne.n	13216 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13206:	693b      	ldr	r3, [r7, #16]
   13208:	685b      	ldr	r3, [r3, #4]
   1320a:	2280      	movs	r2, #128	; 0x80
   1320c:	02d2      	lsls	r2, r2, #11
   1320e:	431a      	orrs	r2, r3
   13210:	693b      	ldr	r3, [r7, #16]
   13212:	605a      	str	r2, [r3, #4]
   13214:	e005      	b.n	13222 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13216:	693b      	ldr	r3, [r7, #16]
   13218:	685b      	ldr	r3, [r3, #4]
   1321a:	4a32      	ldr	r2, [pc, #200]	; (132e4 <_i2c_master_read_packet+0x14c>)
   1321c:	401a      	ands	r2, r3
   1321e:	693b      	ldr	r3, [r7, #16]
   13220:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13222:	683b      	ldr	r3, [r7, #0]
   13224:	7a1b      	ldrb	r3, [r3, #8]
   13226:	2b00      	cmp	r3, #0
   13228:	d045      	beq.n	132b6 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1322a:	683b      	ldr	r3, [r7, #0]
   1322c:	881b      	ldrh	r3, [r3, #0]
   1322e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13230:	683b      	ldr	r3, [r7, #0]
   13232:	7a5b      	ldrb	r3, [r3, #9]
   13234:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13236:	4313      	orrs	r3, r2
   13238:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1323a:	2380      	movs	r3, #128	; 0x80
   1323c:	021b      	lsls	r3, r3, #8
   1323e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13240:	693b      	ldr	r3, [r7, #16]
   13242:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13244:	2317      	movs	r3, #23
   13246:	18fc      	adds	r4, r7, r3
   13248:	687b      	ldr	r3, [r7, #4]
   1324a:	0018      	movs	r0, r3
   1324c:	4b26      	ldr	r3, [pc, #152]	; (132e8 <_i2c_master_read_packet+0x150>)
   1324e:	4798      	blx	r3
   13250:	0003      	movs	r3, r0
   13252:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13254:	693b      	ldr	r3, [r7, #16]
   13256:	685b      	ldr	r3, [r3, #4]
   13258:	4a22      	ldr	r2, [pc, #136]	; (132e4 <_i2c_master_read_packet+0x14c>)
   1325a:	401a      	ands	r2, r3
   1325c:	693b      	ldr	r3, [r7, #16]
   1325e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13260:	2317      	movs	r3, #23
   13262:	18fb      	adds	r3, r7, r3
   13264:	781b      	ldrb	r3, [r3, #0]
   13266:	2b00      	cmp	r3, #0
   13268:	d107      	bne.n	1327a <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   1326a:	2317      	movs	r3, #23
   1326c:	18fc      	adds	r4, r7, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	0018      	movs	r0, r3
   13272:	4b1e      	ldr	r3, [pc, #120]	; (132ec <_i2c_master_read_packet+0x154>)
   13274:	4798      	blx	r3
   13276:	0003      	movs	r3, r0
   13278:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   1327a:	2317      	movs	r3, #23
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	781b      	ldrb	r3, [r3, #0]
   13280:	2b00      	cmp	r3, #0
   13282:	d114      	bne.n	132ae <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   13284:	693b      	ldr	r3, [r7, #16]
   13286:	2203      	movs	r2, #3
   13288:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	881b      	ldrh	r3, [r3, #0]
   1328e:	0a1b      	lsrs	r3, r3, #8
   13290:	b29b      	uxth	r3, r3
   13292:	2278      	movs	r2, #120	; 0x78
   13294:	4313      	orrs	r3, r2
   13296:	b29b      	uxth	r3, r3
   13298:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1329a:	683b      	ldr	r3, [r7, #0]
   1329c:	7a5b      	ldrb	r3, [r3, #9]
   1329e:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   132a0:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   132a2:	2201      	movs	r2, #1
   132a4:	4313      	orrs	r3, r2
   132a6:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   132a8:	693b      	ldr	r3, [r7, #16]
   132aa:	625a      	str	r2, [r3, #36]	; 0x24
   132ac:	e012      	b.n	132d4 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   132ae:	2317      	movs	r3, #23
   132b0:	18fb      	adds	r3, r7, r3
   132b2:	781b      	ldrb	r3, [r3, #0]
   132b4:	e00f      	b.n	132d6 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   132b6:	693b      	ldr	r3, [r7, #16]
   132b8:	2203      	movs	r2, #3
   132ba:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   132bc:	683b      	ldr	r3, [r7, #0]
   132be:	881b      	ldrh	r3, [r3, #0]
   132c0:	005b      	lsls	r3, r3, #1
   132c2:	2201      	movs	r2, #1
   132c4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   132c6:	683b      	ldr	r3, [r7, #0]
   132c8:	7a5b      	ldrb	r3, [r3, #9]
   132ca:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   132cc:	4313      	orrs	r3, r2
   132ce:	001a      	movs	r2, r3
   132d0:	693b      	ldr	r3, [r7, #16]
   132d2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   132d4:	2300      	movs	r3, #0
}
   132d6:	0018      	movs	r0, r3
   132d8:	46bd      	mov	sp, r7
   132da:	b007      	add	sp, #28
   132dc:	bd90      	pop	{r4, r7, pc}
   132de:	46c0      	nop			; (mov r8, r8)
   132e0:	000175f9 	.word	0x000175f9
   132e4:	fffbffff 	.word	0xfffbffff
   132e8:	0001759b 	.word	0x0001759b
   132ec:	0001753d 	.word	0x0001753d

000132f0 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f0:	b580      	push	{r7, lr}
   132f2:	b082      	sub	sp, #8
   132f4:	af00      	add	r7, sp, #0
   132f6:	6078      	str	r0, [r7, #4]
   132f8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   132fa:	687b      	ldr	r3, [r7, #4]
   132fc:	8b9b      	ldrh	r3, [r3, #28]
   132fe:	b29b      	uxth	r3, r3
   13300:	2b00      	cmp	r3, #0
   13302:	d001      	beq.n	13308 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13304:	2305      	movs	r3, #5
   13306:	e00c      	b.n	13322 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13308:	687b      	ldr	r3, [r7, #4]
   1330a:	2201      	movs	r2, #1
   1330c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1330e:	687b      	ldr	r3, [r7, #4]
   13310:	2201      	movs	r2, #1
   13312:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13314:	683a      	ldr	r2, [r7, #0]
   13316:	687b      	ldr	r3, [r7, #4]
   13318:	0011      	movs	r1, r2
   1331a:	0018      	movs	r0, r3
   1331c:	4b03      	ldr	r3, [pc, #12]	; (1332c <i2c_master_read_packet_job+0x3c>)
   1331e:	4798      	blx	r3
   13320:	0003      	movs	r3, r0
}
   13322:	0018      	movs	r0, r3
   13324:	46bd      	mov	sp, r7
   13326:	b002      	add	sp, #8
   13328:	bd80      	pop	{r7, pc}
   1332a:	46c0      	nop			; (mov r8, r8)
   1332c:	00013199 	.word	0x00013199

00013330 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13330:	b580      	push	{r7, lr}
   13332:	b084      	sub	sp, #16
   13334:	af00      	add	r7, sp, #0
   13336:	6078      	str	r0, [r7, #4]
   13338:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1333a:	687b      	ldr	r3, [r7, #4]
   1333c:	681b      	ldr	r3, [r3, #0]
   1333e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13340:	683b      	ldr	r3, [r7, #0]
   13342:	7a5b      	ldrb	r3, [r3, #9]
   13344:	2b00      	cmp	r3, #0
   13346:	d006      	beq.n	13356 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13348:	683b      	ldr	r3, [r7, #0]
   1334a:	7a9a      	ldrb	r2, [r3, #10]
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	0011      	movs	r1, r2
   13350:	0018      	movs	r0, r3
   13352:	4b1e      	ldr	r3, [pc, #120]	; (133cc <_i2c_master_write_packet+0x9c>)
   13354:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13356:	68fb      	ldr	r3, [r7, #12]
   13358:	685b      	ldr	r3, [r3, #4]
   1335a:	4a1d      	ldr	r2, [pc, #116]	; (133d0 <_i2c_master_write_packet+0xa0>)
   1335c:	401a      	ands	r2, r3
   1335e:	68fb      	ldr	r3, [r7, #12]
   13360:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   13362:	683b      	ldr	r3, [r7, #0]
   13364:	685a      	ldr	r2, [r3, #4]
   13366:	687b      	ldr	r3, [r7, #4]
   13368:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   1336a:	683b      	ldr	r3, [r7, #0]
   1336c:	885a      	ldrh	r2, [r3, #2]
   1336e:	687b      	ldr	r3, [r7, #4]
   13370:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   13372:	687b      	ldr	r3, [r7, #4]
   13374:	2224      	movs	r2, #36	; 0x24
   13376:	2100      	movs	r1, #0
   13378:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   1337a:	687b      	ldr	r3, [r7, #4]
   1337c:	2225      	movs	r2, #37	; 0x25
   1337e:	2105      	movs	r1, #5
   13380:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   13382:	68fb      	ldr	r3, [r7, #12]
   13384:	2203      	movs	r2, #3
   13386:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   13388:	683b      	ldr	r3, [r7, #0]
   1338a:	7a1b      	ldrb	r3, [r3, #8]
   1338c:	2b00      	cmp	r3, #0
   1338e:	d00d      	beq.n	133ac <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	881b      	ldrh	r3, [r3, #0]
   13394:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13396:	683b      	ldr	r3, [r7, #0]
   13398:	7a5b      	ldrb	r3, [r3, #9]
   1339a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1339c:	4313      	orrs	r3, r2
   1339e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133a0:	2380      	movs	r3, #128	; 0x80
   133a2:	021b      	lsls	r3, r3, #8
   133a4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133a6:	68fb      	ldr	r3, [r7, #12]
   133a8:	625a      	str	r2, [r3, #36]	; 0x24
   133aa:	e009      	b.n	133c0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133ac:	683b      	ldr	r3, [r7, #0]
   133ae:	881b      	ldrh	r3, [r3, #0]
   133b0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   133b2:	683b      	ldr	r3, [r7, #0]
   133b4:	7a5b      	ldrb	r3, [r3, #9]
   133b6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133b8:	4313      	orrs	r3, r2
   133ba:	001a      	movs	r2, r3
   133bc:	68fb      	ldr	r3, [r7, #12]
   133be:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   133c0:	2300      	movs	r3, #0
}
   133c2:	0018      	movs	r0, r3
   133c4:	46bd      	mov	sp, r7
   133c6:	b004      	add	sp, #16
   133c8:	bd80      	pop	{r7, pc}
   133ca:	46c0      	nop			; (mov r8, r8)
   133cc:	000175f9 	.word	0x000175f9
   133d0:	fffbffff 	.word	0xfffbffff

000133d4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   133d4:	b580      	push	{r7, lr}
   133d6:	b082      	sub	sp, #8
   133d8:	af00      	add	r7, sp, #0
   133da:	6078      	str	r0, [r7, #4]
   133dc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   133de:	687b      	ldr	r3, [r7, #4]
   133e0:	8b9b      	ldrh	r3, [r3, #28]
   133e2:	b29b      	uxth	r3, r3
   133e4:	2b00      	cmp	r3, #0
   133e6:	d001      	beq.n	133ec <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   133e8:	2305      	movs	r3, #5
   133ea:	e00c      	b.n	13406 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   133ec:	687b      	ldr	r3, [r7, #4]
   133ee:	2201      	movs	r2, #1
   133f0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	2201      	movs	r2, #1
   133f6:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   133f8:	683a      	ldr	r2, [r7, #0]
   133fa:	687b      	ldr	r3, [r7, #4]
   133fc:	0011      	movs	r1, r2
   133fe:	0018      	movs	r0, r3
   13400:	4b03      	ldr	r3, [pc, #12]	; (13410 <i2c_master_write_packet_job+0x3c>)
   13402:	4798      	blx	r3
   13404:	0003      	movs	r3, r0
}
   13406:	0018      	movs	r0, r3
   13408:	46bd      	mov	sp, r7
   1340a:	b002      	add	sp, #8
   1340c:	bd80      	pop	{r7, pc}
   1340e:	46c0      	nop			; (mov r8, r8)
   13410:	00013331 	.word	0x00013331

00013414 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13414:	b580      	push	{r7, lr}
   13416:	b086      	sub	sp, #24
   13418:	af00      	add	r7, sp, #0
   1341a:	0002      	movs	r2, r0
   1341c:	1dfb      	adds	r3, r7, #7
   1341e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13420:	1dfb      	adds	r3, r7, #7
   13422:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13424:	4b93      	ldr	r3, [pc, #588]	; (13674 <_i2c_master_interrupt_handler+0x260>)
   13426:	0092      	lsls	r2, r2, #2
   13428:	58d3      	ldr	r3, [r2, r3]
   1342a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1342c:	697b      	ldr	r3, [r7, #20]
   1342e:	681b      	ldr	r3, [r3, #0]
   13430:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13432:	693b      	ldr	r3, [r7, #16]
   13434:	681b      	ldr	r3, [r3, #0]
   13436:	011b      	lsls	r3, r3, #4
   13438:	0fdb      	lsrs	r3, r3, #31
   1343a:	b2db      	uxtb	r3, r3
   1343c:	001a      	movs	r2, r3
   1343e:	230f      	movs	r3, #15
   13440:	18fb      	adds	r3, r7, r3
   13442:	1e51      	subs	r1, r2, #1
   13444:	418a      	sbcs	r2, r1
   13446:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13448:	230e      	movs	r3, #14
   1344a:	18fb      	adds	r3, r7, r3
   1344c:	697a      	ldr	r2, [r7, #20]
   1344e:	7e52      	ldrb	r2, [r2, #25]
   13450:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13452:	697b      	ldr	r3, [r7, #20]
   13454:	7e1b      	ldrb	r3, [r3, #24]
   13456:	b2da      	uxtb	r2, r3
   13458:	230e      	movs	r3, #14
   1345a:	18fb      	adds	r3, r7, r3
   1345c:	210e      	movs	r1, #14
   1345e:	1879      	adds	r1, r7, r1
   13460:	7809      	ldrb	r1, [r1, #0]
   13462:	400a      	ands	r2, r1
   13464:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13466:	697b      	ldr	r3, [r7, #20]
   13468:	8b5b      	ldrh	r3, [r3, #26]
   1346a:	b29b      	uxth	r3, r3
   1346c:	2b00      	cmp	r3, #0
   1346e:	d109      	bne.n	13484 <_i2c_master_interrupt_handler+0x70>
   13470:	697b      	ldr	r3, [r7, #20]
   13472:	8b9b      	ldrh	r3, [r3, #28]
   13474:	b29b      	uxth	r3, r3
   13476:	2b00      	cmp	r3, #0
   13478:	d004      	beq.n	13484 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   1347a:	697b      	ldr	r3, [r7, #20]
   1347c:	0018      	movs	r0, r3
   1347e:	4b7e      	ldr	r3, [pc, #504]	; (13678 <_i2c_master_interrupt_handler+0x264>)
   13480:	4798      	blx	r3
   13482:	e070      	b.n	13566 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13484:	697b      	ldr	r3, [r7, #20]
   13486:	8b5b      	ldrh	r3, [r3, #26]
   13488:	b29b      	uxth	r3, r3
   1348a:	2b00      	cmp	r3, #0
   1348c:	d039      	beq.n	13502 <_i2c_master_interrupt_handler+0xee>
   1348e:	697b      	ldr	r3, [r7, #20]
   13490:	8b9b      	ldrh	r3, [r3, #28]
   13492:	b29b      	uxth	r3, r3
   13494:	2b00      	cmp	r3, #0
   13496:	d134      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   13498:	697b      	ldr	r3, [r7, #20]
   1349a:	2225      	movs	r2, #37	; 0x25
   1349c:	5c9b      	ldrb	r3, [r3, r2]
   1349e:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   134a0:	2b05      	cmp	r3, #5
   134a2:	d12e      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   134a4:	697b      	ldr	r3, [r7, #20]
   134a6:	2224      	movs	r2, #36	; 0x24
   134a8:	5c9b      	ldrb	r3, [r3, r2]
   134aa:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   134ac:	2b00      	cmp	r3, #0
   134ae:	d128      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   134b0:	693b      	ldr	r3, [r7, #16]
   134b2:	2203      	movs	r2, #3
   134b4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   134b6:	697b      	ldr	r3, [r7, #20]
   134b8:	2200      	movs	r2, #0
   134ba:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   134bc:	697b      	ldr	r3, [r7, #20]
   134be:	2225      	movs	r2, #37	; 0x25
   134c0:	2100      	movs	r1, #0
   134c2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   134c4:	697b      	ldr	r3, [r7, #20]
   134c6:	7a9b      	ldrb	r3, [r3, #10]
   134c8:	2b00      	cmp	r3, #0
   134ca:	d00b      	beq.n	134e4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   134cc:	697b      	ldr	r3, [r7, #20]
   134ce:	0018      	movs	r0, r3
   134d0:	4b6a      	ldr	r3, [pc, #424]	; (1367c <_i2c_master_interrupt_handler+0x268>)
   134d2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   134d4:	693b      	ldr	r3, [r7, #16]
   134d6:	685b      	ldr	r3, [r3, #4]
   134d8:	22c0      	movs	r2, #192	; 0xc0
   134da:	0292      	lsls	r2, r2, #10
   134dc:	431a      	orrs	r2, r3
   134de:	693b      	ldr	r3, [r7, #16]
   134e0:	605a      	str	r2, [r3, #4]
   134e2:	e002      	b.n	134ea <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   134e4:	693b      	ldr	r3, [r7, #16]
   134e6:	2201      	movs	r2, #1
   134e8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   134ea:	230e      	movs	r3, #14
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	2201      	movs	r2, #1
   134f2:	4013      	ands	r3, r2
   134f4:	d037      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   134f6:	697b      	ldr	r3, [r7, #20]
   134f8:	68db      	ldr	r3, [r3, #12]
   134fa:	697a      	ldr	r2, [r7, #20]
   134fc:	0010      	movs	r0, r2
   134fe:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13500:	e031      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13502:	697b      	ldr	r3, [r7, #20]
   13504:	8b5b      	ldrh	r3, [r3, #26]
   13506:	b29b      	uxth	r3, r3
   13508:	2b00      	cmp	r3, #0
   1350a:	d02c      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
   1350c:	697b      	ldr	r3, [r7, #20]
   1350e:	8b9b      	ldrh	r3, [r3, #28]
   13510:	b29b      	uxth	r3, r3
   13512:	2b00      	cmp	r3, #0
   13514:	d027      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13516:	693b      	ldr	r3, [r7, #16]
   13518:	8b5b      	ldrh	r3, [r3, #26]
   1351a:	b29b      	uxth	r3, r3
   1351c:	001a      	movs	r2, r3
   1351e:	2320      	movs	r3, #32
   13520:	4013      	ands	r3, r2
   13522:	d111      	bne.n	13548 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13524:	230f      	movs	r3, #15
   13526:	18fb      	adds	r3, r7, r3
   13528:	781b      	ldrb	r3, [r3, #0]
   1352a:	2201      	movs	r2, #1
   1352c:	4053      	eors	r3, r2
   1352e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13530:	2b00      	cmp	r3, #0
   13532:	d104      	bne.n	1353e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13534:	697b      	ldr	r3, [r7, #20]
   13536:	8b9b      	ldrh	r3, [r3, #28]
   13538:	b29b      	uxth	r3, r3
   1353a:	2b01      	cmp	r3, #1
   1353c:	d004      	beq.n	13548 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1353e:	697b      	ldr	r3, [r7, #20]
   13540:	2225      	movs	r2, #37	; 0x25
   13542:	2141      	movs	r1, #65	; 0x41
   13544:	5499      	strb	r1, [r3, r2]
   13546:	e00e      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13548:	697b      	ldr	r3, [r7, #20]
   1354a:	2224      	movs	r2, #36	; 0x24
   1354c:	5c9b      	ldrb	r3, [r3, r2]
   1354e:	b2db      	uxtb	r3, r3
   13550:	2b00      	cmp	r3, #0
   13552:	d104      	bne.n	1355e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13554:	697b      	ldr	r3, [r7, #20]
   13556:	0018      	movs	r0, r3
   13558:	4b49      	ldr	r3, [pc, #292]	; (13680 <_i2c_master_interrupt_handler+0x26c>)
   1355a:	4798      	blx	r3
   1355c:	e003      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   1355e:	697b      	ldr	r3, [r7, #20]
   13560:	0018      	movs	r0, r3
   13562:	4b48      	ldr	r3, [pc, #288]	; (13684 <_i2c_master_interrupt_handler+0x270>)
   13564:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13566:	697b      	ldr	r3, [r7, #20]
   13568:	8b5b      	ldrh	r3, [r3, #26]
   1356a:	b29b      	uxth	r3, r3
   1356c:	2b00      	cmp	r3, #0
   1356e:	d047      	beq.n	13600 <_i2c_master_interrupt_handler+0x1ec>
   13570:	697b      	ldr	r3, [r7, #20]
   13572:	8b9b      	ldrh	r3, [r3, #28]
   13574:	b29b      	uxth	r3, r3
   13576:	2b00      	cmp	r3, #0
   13578:	d142      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   1357a:	697b      	ldr	r3, [r7, #20]
   1357c:	2225      	movs	r2, #37	; 0x25
   1357e:	5c9b      	ldrb	r3, [r3, r2]
   13580:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13582:	2b05      	cmp	r3, #5
   13584:	d13c      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   13586:	697b      	ldr	r3, [r7, #20]
   13588:	2224      	movs	r2, #36	; 0x24
   1358a:	5c9b      	ldrb	r3, [r3, r2]
   1358c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1358e:	2b01      	cmp	r3, #1
   13590:	d136      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	7e1b      	ldrb	r3, [r3, #24]
   13596:	b2db      	uxtb	r3, r3
   13598:	001a      	movs	r2, r3
   1359a:	2302      	movs	r3, #2
   1359c:	4013      	ands	r3, r2
   1359e:	d002      	beq.n	135a6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   135a0:	693b      	ldr	r3, [r7, #16]
   135a2:	2202      	movs	r2, #2
   135a4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   135a6:	693b      	ldr	r3, [r7, #16]
   135a8:	2203      	movs	r2, #3
   135aa:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   135ac:	697b      	ldr	r3, [r7, #20]
   135ae:	2200      	movs	r2, #0
   135b0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	2225      	movs	r2, #37	; 0x25
   135b6:	2100      	movs	r1, #0
   135b8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   135ba:	230e      	movs	r3, #14
   135bc:	18fb      	adds	r3, r7, r3
   135be:	781b      	ldrb	r3, [r3, #0]
   135c0:	2202      	movs	r2, #2
   135c2:	4013      	ands	r3, r2
   135c4:	d00b      	beq.n	135de <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	2224      	movs	r2, #36	; 0x24
   135ca:	5c9b      	ldrb	r3, [r3, r2]
   135cc:	b2db      	uxtb	r3, r3
   135ce:	2b01      	cmp	r3, #1
   135d0:	d105      	bne.n	135de <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   135d2:	697b      	ldr	r3, [r7, #20]
   135d4:	691b      	ldr	r3, [r3, #16]
   135d6:	697a      	ldr	r2, [r7, #20]
   135d8:	0010      	movs	r0, r2
   135da:	4798      	blx	r3
   135dc:	e010      	b.n	13600 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   135de:	230e      	movs	r3, #14
   135e0:	18fb      	adds	r3, r7, r3
   135e2:	781b      	ldrb	r3, [r3, #0]
   135e4:	2201      	movs	r2, #1
   135e6:	4013      	ands	r3, r2
   135e8:	d00a      	beq.n	13600 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   135ea:	697b      	ldr	r3, [r7, #20]
   135ec:	2224      	movs	r2, #36	; 0x24
   135ee:	5c9b      	ldrb	r3, [r3, r2]
   135f0:	b2db      	uxtb	r3, r3
   135f2:	2b00      	cmp	r3, #0
   135f4:	d104      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   135f6:	697b      	ldr	r3, [r7, #20]
   135f8:	68db      	ldr	r3, [r3, #12]
   135fa:	697a      	ldr	r2, [r7, #20]
   135fc:	0010      	movs	r0, r2
   135fe:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13600:	697b      	ldr	r3, [r7, #20]
   13602:	2225      	movs	r2, #37	; 0x25
   13604:	5c9b      	ldrb	r3, [r3, r2]
   13606:	b2db      	uxtb	r3, r3
   13608:	2b05      	cmp	r3, #5
   1360a:	d02e      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
   1360c:	697b      	ldr	r3, [r7, #20]
   1360e:	2225      	movs	r2, #37	; 0x25
   13610:	5c9b      	ldrb	r3, [r3, r2]
   13612:	b2db      	uxtb	r3, r3
   13614:	2b00      	cmp	r3, #0
   13616:	d028      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13618:	693b      	ldr	r3, [r7, #16]
   1361a:	2203      	movs	r2, #3
   1361c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1361e:	697b      	ldr	r3, [r7, #20]
   13620:	2200      	movs	r2, #0
   13622:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	2200      	movs	r2, #0
   13628:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1362a:	697b      	ldr	r3, [r7, #20]
   1362c:	2225      	movs	r2, #37	; 0x25
   1362e:	5c9b      	ldrb	r3, [r3, r2]
   13630:	b2db      	uxtb	r3, r3
   13632:	2b41      	cmp	r3, #65	; 0x41
   13634:	d00e      	beq.n	13654 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13636:	697b      	ldr	r3, [r7, #20]
   13638:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1363a:	2b00      	cmp	r3, #0
   1363c:	d00a      	beq.n	13654 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1363e:	697b      	ldr	r3, [r7, #20]
   13640:	0018      	movs	r0, r3
   13642:	4b0e      	ldr	r3, [pc, #56]	; (1367c <_i2c_master_interrupt_handler+0x268>)
   13644:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13646:	693b      	ldr	r3, [r7, #16]
   13648:	685b      	ldr	r3, [r3, #4]
   1364a:	22e0      	movs	r2, #224	; 0xe0
   1364c:	02d2      	lsls	r2, r2, #11
   1364e:	431a      	orrs	r2, r3
   13650:	693b      	ldr	r3, [r7, #16]
   13652:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13654:	230e      	movs	r3, #14
   13656:	18fb      	adds	r3, r7, r3
   13658:	781b      	ldrb	r3, [r3, #0]
   1365a:	2204      	movs	r2, #4
   1365c:	4013      	ands	r3, r2
   1365e:	d004      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13660:	697b      	ldr	r3, [r7, #20]
   13662:	695b      	ldr	r3, [r3, #20]
   13664:	697a      	ldr	r2, [r7, #20]
   13666:	0010      	movs	r0, r2
   13668:	4798      	blx	r3
		}
	}
}
   1366a:	46c0      	nop			; (mov r8, r8)
   1366c:	46bd      	mov	sp, r7
   1366e:	b006      	add	sp, #24
   13670:	bd80      	pop	{r7, pc}
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	20005a0c 	.word	0x20005a0c
   13678:	00013095 	.word	0x00013095
   1367c:	00012f05 	.word	0x00012f05
   13680:	00013019 	.word	0x00013019
   13684:	00012f29 	.word	0x00012f29

00013688 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13688:	b580      	push	{r7, lr}
   1368a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   1368c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13690:	4b02      	ldr	r3, [pc, #8]	; (1369c <NVIC_SystemReset+0x14>)
   13692:	4a03      	ldr	r2, [pc, #12]	; (136a0 <NVIC_SystemReset+0x18>)
   13694:	60da      	str	r2, [r3, #12]
   13696:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1369a:	e7fe      	b.n	1369a <NVIC_SystemReset+0x12>
   1369c:	e000ed00 	.word	0xe000ed00
   136a0:	05fa0004 	.word	0x05fa0004

000136a4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   136a4:	b580      	push	{r7, lr}
   136a6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   136a8:	4b02      	ldr	r3, [pc, #8]	; (136b4 <system_reset+0x10>)
   136aa:	4798      	blx	r3
}
   136ac:	46c0      	nop			; (mov r8, r8)
   136ae:	46bd      	mov	sp, r7
   136b0:	bd80      	pop	{r7, pc}
   136b2:	46c0      	nop			; (mov r8, r8)
   136b4:	00013689 	.word	0x00013689

000136b8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   136b8:	b580      	push	{r7, lr}
   136ba:	b086      	sub	sp, #24
   136bc:	af00      	add	r7, sp, #0
   136be:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   136c0:	4b9a      	ldr	r3, [pc, #616]	; (1392c <vCommandConsoleTask+0x274>)
   136c2:	0018      	movs	r0, r3
   136c4:	4b9a      	ldr	r3, [pc, #616]	; (13930 <vCommandConsoleTask+0x278>)
   136c6:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   136c8:	4b9a      	ldr	r3, [pc, #616]	; (13934 <vCommandConsoleTask+0x27c>)
   136ca:	0018      	movs	r0, r3
   136cc:	4b98      	ldr	r3, [pc, #608]	; (13930 <vCommandConsoleTask+0x278>)
   136ce:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   136d0:	4b99      	ldr	r3, [pc, #612]	; (13938 <vCommandConsoleTask+0x280>)
   136d2:	0018      	movs	r0, r3
   136d4:	4b96      	ldr	r3, [pc, #600]	; (13930 <vCommandConsoleTask+0x278>)
   136d6:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    //FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    //FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   136d8:	4b98      	ldr	r3, [pc, #608]	; (1393c <vCommandConsoleTask+0x284>)
   136da:	0018      	movs	r0, r3
   136dc:	4b94      	ldr	r3, [pc, #592]	; (13930 <vCommandConsoleTask+0x278>)
   136de:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xMicCommand);
   136e0:	4b97      	ldr	r3, [pc, #604]	; (13940 <vCommandConsoleTask+0x288>)
   136e2:	0018      	movs	r0, r3
   136e4:	4b92      	ldr	r3, [pc, #584]	; (13930 <vCommandConsoleTask+0x278>)
   136e6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSoilMoistureGetMoisture);
   136e8:	4b96      	ldr	r3, [pc, #600]	; (13944 <vCommandConsoleTask+0x28c>)
   136ea:	0018      	movs	r0, r3
   136ec:	4b90      	ldr	r3, [pc, #576]	; (13930 <vCommandConsoleTask+0x278>)
   136ee:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xNPKCommand);
   136f0:	4b95      	ldr	r3, [pc, #596]	; (13948 <vCommandConsoleTask+0x290>)
   136f2:	0018      	movs	r0, r3
   136f4:	4b8e      	ldr	r3, [pc, #568]	; (13930 <vCommandConsoleTask+0x278>)
   136f6:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   136f8:	2317      	movs	r3, #23
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	2200      	movs	r2, #0
   136fe:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13700:	4b92      	ldr	r3, [pc, #584]	; (1394c <vCommandConsoleTask+0x294>)
   13702:	0018      	movs	r0, r3
   13704:	4b92      	ldr	r3, [pc, #584]	; (13950 <vCommandConsoleTask+0x298>)
   13706:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13708:	2203      	movs	r2, #3
   1370a:	2100      	movs	r1, #0
   1370c:	2001      	movs	r0, #1
   1370e:	4b91      	ldr	r3, [pc, #580]	; (13954 <vCommandConsoleTask+0x29c>)
   13710:	4798      	blx	r3
   13712:	0002      	movs	r2, r0
   13714:	4b90      	ldr	r3, [pc, #576]	; (13958 <vCommandConsoleTask+0x2a0>)
   13716:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13718:	4b8f      	ldr	r3, [pc, #572]	; (13958 <vCommandConsoleTask+0x2a0>)
   1371a:	681b      	ldr	r3, [r3, #0]
   1371c:	2b00      	cmp	r3, #0
   1371e:	d107      	bne.n	13730 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13720:	4b8e      	ldr	r3, [pc, #568]	; (1395c <vCommandConsoleTask+0x2a4>)
   13722:	0019      	movs	r1, r3
   13724:	2003      	movs	r0, #3
   13726:	4b8e      	ldr	r3, [pc, #568]	; (13960 <vCommandConsoleTask+0x2a8>)
   13728:	4798      	blx	r3
        vTaskSuspend(NULL);
   1372a:	2000      	movs	r0, #0
   1372c:	4b8d      	ldr	r3, [pc, #564]	; (13964 <vCommandConsoleTask+0x2ac>)
   1372e:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13730:	230c      	movs	r3, #12
   13732:	18fb      	adds	r3, r7, r3
   13734:	0018      	movs	r0, r3
   13736:	4b8c      	ldr	r3, [pc, #560]	; (13968 <vCommandConsoleTask+0x2b0>)
   13738:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   1373a:	230c      	movs	r3, #12
   1373c:	18fb      	adds	r3, r7, r3
   1373e:	781b      	ldrb	r3, [r3, #0]
   13740:	2b0a      	cmp	r3, #10
   13742:	d004      	beq.n	1374e <vCommandConsoleTask+0x96>
   13744:	230c      	movs	r3, #12
   13746:	18fb      	adds	r3, r7, r3
   13748:	781b      	ldrb	r3, [r3, #0]
   1374a:	2b0d      	cmp	r3, #13
   1374c:	d137      	bne.n	137be <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   1374e:	4b87      	ldr	r3, [pc, #540]	; (1396c <vCommandConsoleTask+0x2b4>)
   13750:	0018      	movs	r0, r3
   13752:	4b7f      	ldr	r3, [pc, #508]	; (13950 <vCommandConsoleTask+0x298>)
   13754:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   13756:	4b86      	ldr	r3, [pc, #536]	; (13970 <vCommandConsoleTask+0x2b8>)
   13758:	2200      	movs	r2, #0
   1375a:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   1375c:	4b85      	ldr	r3, [pc, #532]	; (13974 <vCommandConsoleTask+0x2bc>)
   1375e:	2200      	movs	r2, #0
   13760:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   13762:	4985      	ldr	r1, [pc, #532]	; (13978 <vCommandConsoleTask+0x2c0>)
   13764:	4b85      	ldr	r3, [pc, #532]	; (1397c <vCommandConsoleTask+0x2c4>)
   13766:	2231      	movs	r2, #49	; 0x31
   13768:	0018      	movs	r0, r3
   1376a:	4b85      	ldr	r3, [pc, #532]	; (13980 <vCommandConsoleTask+0x2c8>)
   1376c:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   1376e:	4b83      	ldr	r3, [pc, #524]	; (1397c <vCommandConsoleTask+0x2c4>)
   13770:	2231      	movs	r2, #49	; 0x31
   13772:	2100      	movs	r1, #0
   13774:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   13776:	4983      	ldr	r1, [pc, #524]	; (13984 <vCommandConsoleTask+0x2cc>)
   13778:	4b7f      	ldr	r3, [pc, #508]	; (13978 <vCommandConsoleTask+0x2c0>)
   1377a:	2264      	movs	r2, #100	; 0x64
   1377c:	0018      	movs	r0, r3
   1377e:	4b82      	ldr	r3, [pc, #520]	; (13988 <vCommandConsoleTask+0x2d0>)
   13780:	4798      	blx	r3
   13782:	0003      	movs	r3, r0
   13784:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13786:	4b7f      	ldr	r3, [pc, #508]	; (13984 <vCommandConsoleTask+0x2cc>)
   13788:	2263      	movs	r2, #99	; 0x63
   1378a:	2100      	movs	r1, #0
   1378c:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   1378e:	4b7d      	ldr	r3, [pc, #500]	; (13984 <vCommandConsoleTask+0x2cc>)
   13790:	0018      	movs	r0, r3
   13792:	4b6f      	ldr	r3, [pc, #444]	; (13950 <vCommandConsoleTask+0x298>)
   13794:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   13796:	693b      	ldr	r3, [r7, #16]
   13798:	2b00      	cmp	r3, #0
   1379a:	d1ec      	bne.n	13776 <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   1379c:	2317      	movs	r3, #23
   1379e:	18fb      	adds	r3, r7, r3
   137a0:	2200      	movs	r2, #0
   137a2:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   137a4:	4b74      	ldr	r3, [pc, #464]	; (13978 <vCommandConsoleTask+0x2c0>)
   137a6:	2232      	movs	r2, #50	; 0x32
   137a8:	2100      	movs	r1, #0
   137aa:	0018      	movs	r0, r3
   137ac:	4b77      	ldr	r3, [pc, #476]	; (1398c <vCommandConsoleTask+0x2d4>)
   137ae:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   137b0:	4b74      	ldr	r3, [pc, #464]	; (13984 <vCommandConsoleTask+0x2cc>)
   137b2:	2264      	movs	r2, #100	; 0x64
   137b4:	2100      	movs	r1, #0
   137b6:	0018      	movs	r0, r3
   137b8:	4b74      	ldr	r3, [pc, #464]	; (1398c <vCommandConsoleTask+0x2d4>)
   137ba:	4798      	blx	r3
   137bc:	e0b5      	b.n	1392a <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   137be:	4b6c      	ldr	r3, [pc, #432]	; (13970 <vCommandConsoleTask+0x2b8>)
   137c0:	781b      	ldrb	r3, [r3, #0]
   137c2:	2b00      	cmp	r3, #0
   137c4:	d059      	beq.n	1387a <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   137c6:	4b6b      	ldr	r3, [pc, #428]	; (13974 <vCommandConsoleTask+0x2bc>)
   137c8:	781b      	ldrb	r3, [r3, #0]
   137ca:	2b03      	cmp	r3, #3
   137cc:	d80c      	bhi.n	137e8 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   137ce:	4b69      	ldr	r3, [pc, #420]	; (13974 <vCommandConsoleTask+0x2bc>)
   137d0:	781b      	ldrb	r3, [r3, #0]
   137d2:	1c5a      	adds	r2, r3, #1
   137d4:	b2d1      	uxtb	r1, r2
   137d6:	4a67      	ldr	r2, [pc, #412]	; (13974 <vCommandConsoleTask+0x2bc>)
   137d8:	7011      	strb	r1, [r2, #0]
   137da:	001a      	movs	r2, r3
   137dc:	230c      	movs	r3, #12
   137de:	18fb      	adds	r3, r7, r3
   137e0:	7819      	ldrb	r1, [r3, #0]
   137e2:	4b6b      	ldr	r3, [pc, #428]	; (13990 <vCommandConsoleTask+0x2d8>)
   137e4:	5499      	strb	r1, [r3, r2]
   137e6:	e005      	b.n	137f4 <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   137e8:	4b61      	ldr	r3, [pc, #388]	; (13970 <vCommandConsoleTask+0x2b8>)
   137ea:	2200      	movs	r2, #0
   137ec:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   137ee:	4b61      	ldr	r3, [pc, #388]	; (13974 <vCommandConsoleTask+0x2bc>)
   137f0:	2200      	movs	r2, #0
   137f2:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   137f4:	4b5f      	ldr	r3, [pc, #380]	; (13974 <vCommandConsoleTask+0x2bc>)
   137f6:	781b      	ldrb	r3, [r3, #0]
   137f8:	2b01      	cmp	r3, #1
   137fa:	d999      	bls.n	13730 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   137fc:	4a65      	ldr	r2, [pc, #404]	; (13994 <vCommandConsoleTask+0x2dc>)
   137fe:	4b64      	ldr	r3, [pc, #400]	; (13990 <vCommandConsoleTask+0x2d8>)
   13800:	0011      	movs	r1, r2
   13802:	0018      	movs	r0, r3
   13804:	4b64      	ldr	r3, [pc, #400]	; (13998 <vCommandConsoleTask+0x2e0>)
   13806:	4798      	blx	r3
   13808:	1e03      	subs	r3, r0, #0
   1380a:	d02f      	beq.n	1386c <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   1380c:	4963      	ldr	r1, [pc, #396]	; (1399c <vCommandConsoleTask+0x2e4>)
   1380e:	4b5a      	ldr	r3, [pc, #360]	; (13978 <vCommandConsoleTask+0x2c0>)
   13810:	221b      	movs	r2, #27
   13812:	0018      	movs	r0, r3
   13814:	4b62      	ldr	r3, [pc, #392]	; (139a0 <vCommandConsoleTask+0x2e8>)
   13816:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13818:	4b57      	ldr	r3, [pc, #348]	; (13978 <vCommandConsoleTask+0x2c0>)
   1381a:	0018      	movs	r0, r3
   1381c:	4b4c      	ldr	r3, [pc, #304]	; (13950 <vCommandConsoleTask+0x298>)
   1381e:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13820:	2317      	movs	r3, #23
   13822:	18fb      	adds	r3, r7, r3
   13824:	2200      	movs	r2, #0
   13826:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13828:	4b53      	ldr	r3, [pc, #332]	; (13978 <vCommandConsoleTask+0x2c0>)
   1382a:	2232      	movs	r2, #50	; 0x32
   1382c:	2100      	movs	r1, #0
   1382e:	0018      	movs	r0, r3
   13830:	4b56      	ldr	r3, [pc, #344]	; (1398c <vCommandConsoleTask+0x2d4>)
   13832:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   13834:	4951      	ldr	r1, [pc, #324]	; (1397c <vCommandConsoleTask+0x2c4>)
   13836:	4b50      	ldr	r3, [pc, #320]	; (13978 <vCommandConsoleTask+0x2c0>)
   13838:	2231      	movs	r2, #49	; 0x31
   1383a:	0018      	movs	r0, r3
   1383c:	4b50      	ldr	r3, [pc, #320]	; (13980 <vCommandConsoleTask+0x2c8>)
   1383e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13840:	4b4d      	ldr	r3, [pc, #308]	; (13978 <vCommandConsoleTask+0x2c0>)
   13842:	0018      	movs	r0, r3
   13844:	4b57      	ldr	r3, [pc, #348]	; (139a4 <vCommandConsoleTask+0x2ec>)
   13846:	4798      	blx	r3
   13848:	0003      	movs	r3, r0
   1384a:	2b30      	cmp	r3, #48	; 0x30
   1384c:	d806      	bhi.n	1385c <vCommandConsoleTask+0x1a4>
   1384e:	4b4b      	ldr	r3, [pc, #300]	; (1397c <vCommandConsoleTask+0x2c4>)
   13850:	0018      	movs	r0, r3
   13852:	4b54      	ldr	r3, [pc, #336]	; (139a4 <vCommandConsoleTask+0x2ec>)
   13854:	4798      	blx	r3
   13856:	0003      	movs	r3, r0
   13858:	b2da      	uxtb	r2, r3
   1385a:	e000      	b.n	1385e <vCommandConsoleTask+0x1a6>
   1385c:	2231      	movs	r2, #49	; 0x31
   1385e:	2317      	movs	r3, #23
   13860:	18fb      	adds	r3, r7, r3
   13862:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   13864:	4b44      	ldr	r3, [pc, #272]	; (13978 <vCommandConsoleTask+0x2c0>)
   13866:	0018      	movs	r0, r3
   13868:	4b39      	ldr	r3, [pc, #228]	; (13950 <vCommandConsoleTask+0x298>)
   1386a:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   1386c:	4b40      	ldr	r3, [pc, #256]	; (13970 <vCommandConsoleTask+0x2b8>)
   1386e:	2200      	movs	r2, #0
   13870:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13872:	4b40      	ldr	r3, [pc, #256]	; (13974 <vCommandConsoleTask+0x2bc>)
   13874:	2200      	movs	r2, #0
   13876:	701a      	strb	r2, [r3, #0]
   13878:	e75a      	b.n	13730 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   1387a:	230c      	movs	r3, #12
   1387c:	18fb      	adds	r3, r7, r3
   1387e:	781b      	ldrb	r3, [r3, #0]
   13880:	2b0d      	cmp	r3, #13
   13882:	d100      	bne.n	13886 <vCommandConsoleTask+0x1ce>
   13884:	e754      	b.n	13730 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13886:	230c      	movs	r3, #12
   13888:	18fb      	adds	r3, r7, r3
   1388a:	781b      	ldrb	r3, [r3, #0]
   1388c:	2b08      	cmp	r3, #8
   1388e:	d004      	beq.n	1389a <vCommandConsoleTask+0x1e2>
   13890:	230c      	movs	r3, #12
   13892:	18fb      	adds	r3, r7, r3
   13894:	781b      	ldrb	r3, [r3, #0]
   13896:	2b7f      	cmp	r3, #127	; 0x7f
   13898:	d11c      	bne.n	138d4 <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   1389a:	2308      	movs	r3, #8
   1389c:	18fb      	adds	r3, r7, r3
   1389e:	4a42      	ldr	r2, [pc, #264]	; (139a8 <vCommandConsoleTask+0x2f0>)
   138a0:	6812      	ldr	r2, [r2, #0]
   138a2:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   138a4:	2308      	movs	r3, #8
   138a6:	18fb      	adds	r3, r7, r3
   138a8:	0018      	movs	r0, r3
   138aa:	4b29      	ldr	r3, [pc, #164]	; (13950 <vCommandConsoleTask+0x298>)
   138ac:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   138ae:	2317      	movs	r3, #23
   138b0:	18fb      	adds	r3, r7, r3
   138b2:	781b      	ldrb	r3, [r3, #0]
   138b4:	2b00      	cmp	r3, #0
   138b6:	d037      	beq.n	13928 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   138b8:	2317      	movs	r3, #23
   138ba:	18fb      	adds	r3, r7, r3
   138bc:	781a      	ldrb	r2, [r3, #0]
   138be:	2317      	movs	r3, #23
   138c0:	18fb      	adds	r3, r7, r3
   138c2:	3a01      	subs	r2, #1
   138c4:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   138c6:	2317      	movs	r3, #23
   138c8:	18fb      	adds	r3, r7, r3
   138ca:	781b      	ldrb	r3, [r3, #0]
   138cc:	4a2a      	ldr	r2, [pc, #168]	; (13978 <vCommandConsoleTask+0x2c0>)
   138ce:	2100      	movs	r1, #0
   138d0:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   138d2:	e029      	b.n	13928 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   138d4:	230c      	movs	r3, #12
   138d6:	18fb      	adds	r3, r7, r3
   138d8:	781b      	ldrb	r3, [r3, #0]
   138da:	2b1b      	cmp	r3, #27
   138dc:	d106      	bne.n	138ec <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   138de:	4b24      	ldr	r3, [pc, #144]	; (13970 <vCommandConsoleTask+0x2b8>)
   138e0:	2201      	movs	r2, #1
   138e2:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   138e4:	4b23      	ldr	r3, [pc, #140]	; (13974 <vCommandConsoleTask+0x2bc>)
   138e6:	2200      	movs	r2, #0
   138e8:	701a      	strb	r2, [r3, #0]
   138ea:	e721      	b.n	13730 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   138ec:	2317      	movs	r3, #23
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	781b      	ldrb	r3, [r3, #0]
   138f2:	2b31      	cmp	r3, #49	; 0x31
   138f4:	d80e      	bhi.n	13914 <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   138f6:	2317      	movs	r3, #23
   138f8:	18fb      	adds	r3, r7, r3
   138fa:	781b      	ldrb	r3, [r3, #0]
   138fc:	220c      	movs	r2, #12
   138fe:	18ba      	adds	r2, r7, r2
   13900:	7811      	ldrb	r1, [r2, #0]
   13902:	4a1d      	ldr	r2, [pc, #116]	; (13978 <vCommandConsoleTask+0x2c0>)
   13904:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13906:	2317      	movs	r3, #23
   13908:	18fb      	adds	r3, r7, r3
   1390a:	781a      	ldrb	r2, [r3, #0]
   1390c:	2317      	movs	r3, #23
   1390e:	18fb      	adds	r3, r7, r3
   13910:	3201      	adds	r2, #1
   13912:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13914:	230c      	movs	r3, #12
   13916:	18fb      	adds	r3, r7, r3
   13918:	2200      	movs	r2, #0
   1391a:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   1391c:	230c      	movs	r3, #12
   1391e:	18fb      	adds	r3, r7, r3
   13920:	0018      	movs	r0, r3
   13922:	4b0b      	ldr	r3, [pc, #44]	; (13950 <vCommandConsoleTask+0x298>)
   13924:	4798      	blx	r3
   13926:	e703      	b.n	13730 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13928:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   1392a:	e701      	b.n	13730 <vCommandConsoleTask+0x78>
   1392c:	00035ae4 	.word	0x00035ae4
   13930:	00017741 	.word	0x00017741
   13934:	00035b44 	.word	0x00035b44
   13938:	00035af4 	.word	0x00035af4
   1393c:	00035b14 	.word	0x00035b14
   13940:	00035b24 	.word	0x00035b24
   13944:	00035b04 	.word	0x00035b04
   13948:	00035b34 	.word	0x00035b34
   1394c:	00035818 	.word	0x00035818
   13950:	0001d665 	.word	0x0001d665
   13954:	00019d05 	.word	0x00019d05
   13958:	20004600 	.word	0x20004600
   1395c:	000359bc 	.word	0x000359bc
   13960:	0001d751 	.word	0x0001d751
   13964:	0001baf1 	.word	0x0001baf1
   13968:	000139ad 	.word	0x000139ad
   1396c:	000359dc 	.word	0x000359dc
   13970:	20000394 	.word	0x20000394
   13974:	20000395 	.word	0x20000395
   13978:	200003cc 	.word	0x200003cc
   1397c:	20000398 	.word	0x20000398
   13980:	000346ff 	.word	0x000346ff
   13984:	20000400 	.word	0x20000400
   13988:	000177b1 	.word	0x000177b1
   1398c:	00034317 	.word	0x00034317
   13990:	20000464 	.word	0x20000464
   13994:	000359e0 	.word	0x000359e0
   13998:	00034619 	.word	0x00034619
   1399c:	000359e4 	.word	0x000359e4
   139a0:	000345d5 	.word	0x000345d5
   139a4:	000346cf 	.word	0x000346cf
   139a8:	000359ec 	.word	0x000359ec

000139ac <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   139ac:	b580      	push	{r7, lr}
   139ae:	b084      	sub	sp, #16
   139b0:	af00      	add	r7, sp, #0
   139b2:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	0018      	movs	r0, r3
   139b8:	4b0c      	ldr	r3, [pc, #48]	; (139ec <FreeRTOS_read+0x40>)
   139ba:	4798      	blx	r3
   139bc:	0003      	movs	r3, r0
   139be:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   139c0:	e00d      	b.n	139de <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   139c2:	4b0b      	ldr	r3, [pc, #44]	; (139f0 <FreeRTOS_read+0x44>)
   139c4:	681a      	ldr	r2, [r3, #0]
   139c6:	2301      	movs	r3, #1
   139c8:	425b      	negs	r3, r3
   139ca:	0019      	movs	r1, r3
   139cc:	0010      	movs	r0, r2
   139ce:	4b09      	ldr	r3, [pc, #36]	; (139f4 <FreeRTOS_read+0x48>)
   139d0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   139d2:	687b      	ldr	r3, [r7, #4]
   139d4:	0018      	movs	r0, r3
   139d6:	4b05      	ldr	r3, [pc, #20]	; (139ec <FreeRTOS_read+0x40>)
   139d8:	4798      	blx	r3
   139da:	0003      	movs	r3, r0
   139dc:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   139de:	68fb      	ldr	r3, [r7, #12]
   139e0:	3301      	adds	r3, #1
   139e2:	d0ee      	beq.n	139c2 <FreeRTOS_read+0x16>
    }
}
   139e4:	46c0      	nop			; (mov r8, r8)
   139e6:	46bd      	mov	sp, r7
   139e8:	b004      	add	sp, #16
   139ea:	bd80      	pop	{r7, pc}
   139ec:	0001d701 	.word	0x0001d701
   139f0:	20004600 	.word	0x20004600
   139f4:	0001acbd 	.word	0x0001acbd

000139f8 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   139f8:	b580      	push	{r7, lr}
   139fa:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   139fc:	4b0a      	ldr	r3, [pc, #40]	; (13a28 <CliCharReadySemaphoreGiveFromISR+0x30>)
   139fe:	2200      	movs	r2, #0
   13a00:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13a02:	4b0a      	ldr	r3, [pc, #40]	; (13a2c <CliCharReadySemaphoreGiveFromISR+0x34>)
   13a04:	681b      	ldr	r3, [r3, #0]
   13a06:	4a08      	ldr	r2, [pc, #32]	; (13a28 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13a08:	0011      	movs	r1, r2
   13a0a:	0018      	movs	r0, r3
   13a0c:	4b08      	ldr	r3, [pc, #32]	; (13a30 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13a0e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13a10:	4b05      	ldr	r3, [pc, #20]	; (13a28 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13a12:	681b      	ldr	r3, [r3, #0]
   13a14:	2b00      	cmp	r3, #0
   13a16:	d003      	beq.n	13a20 <CliCharReadySemaphoreGiveFromISR+0x28>
   13a18:	4b06      	ldr	r3, [pc, #24]	; (13a34 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13a1a:	2280      	movs	r2, #128	; 0x80
   13a1c:	0552      	lsls	r2, r2, #21
   13a1e:	601a      	str	r2, [r3, #0]
}
   13a20:	46c0      	nop			; (mov r8, r8)
   13a22:	46bd      	mov	sp, r7
   13a24:	bd80      	pop	{r7, pc}
   13a26:	46c0      	nop			; (mov r8, r8)
   13a28:	20000468 	.word	0x20000468
   13a2c:	20004600 	.word	0x20004600
   13a30:	0001a635 	.word	0x0001a635
   13a34:	e000ed04 	.word	0xe000ed04

00013a38 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13a38:	b590      	push	{r4, r7, lr}
   13a3a:	b087      	sub	sp, #28
   13a3c:	af00      	add	r7, sp, #0
   13a3e:	60f8      	str	r0, [r7, #12]
   13a40:	60b9      	str	r1, [r7, #8]
   13a42:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13a44:	2317      	movs	r3, #23
   13a46:	18fb      	adds	r3, r7, r3
   13a48:	221b      	movs	r2, #27
   13a4a:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13a4c:	2317      	movs	r3, #23
   13a4e:	18fb      	adds	r3, r7, r3
   13a50:	781b      	ldrb	r3, [r3, #0]
   13a52:	4a08      	ldr	r2, [pc, #32]	; (13a74 <xCliClearTerminalScreen+0x3c>)
   13a54:	4808      	ldr	r0, [pc, #32]	; (13a78 <xCliClearTerminalScreen+0x40>)
   13a56:	210f      	movs	r1, #15
   13a58:	4c08      	ldr	r4, [pc, #32]	; (13a7c <xCliClearTerminalScreen+0x44>)
   13a5a:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13a5c:	4a06      	ldr	r2, [pc, #24]	; (13a78 <xCliClearTerminalScreen+0x40>)
   13a5e:	68b9      	ldr	r1, [r7, #8]
   13a60:	68fb      	ldr	r3, [r7, #12]
   13a62:	0018      	movs	r0, r3
   13a64:	4b05      	ldr	r3, [pc, #20]	; (13a7c <xCliClearTerminalScreen+0x44>)
   13a66:	4798      	blx	r3
    return pdFALSE;
   13a68:	2300      	movs	r3, #0
}
   13a6a:	0018      	movs	r0, r3
   13a6c:	46bd      	mov	sp, r7
   13a6e:	b007      	add	sp, #28
   13a70:	bd90      	pop	{r4, r7, pc}
   13a72:	46c0      	nop			; (mov r8, r8)
   13a74:	000359f0 	.word	0x000359f0
   13a78:	20000384 	.word	0x20000384
   13a7c:	00034571 	.word	0x00034571

00013a80 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13a80:	b580      	push	{r7, lr}
   13a82:	b084      	sub	sp, #16
   13a84:	af00      	add	r7, sp, #0
   13a86:	60f8      	str	r0, [r7, #12]
   13a88:	60b9      	str	r1, [r7, #8]
   13a8a:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13a8c:	2002      	movs	r0, #2
   13a8e:	4b06      	ldr	r3, [pc, #24]	; (13aa8 <CLI_OTAU+0x28>)
   13a90:	4798      	blx	r3
	vTaskDelay(20000);
   13a92:	4b06      	ldr	r3, [pc, #24]	; (13aac <CLI_OTAU+0x2c>)
   13a94:	0018      	movs	r0, r3
   13a96:	4b06      	ldr	r3, [pc, #24]	; (13ab0 <CLI_OTAU+0x30>)
   13a98:	4798      	blx	r3
	system_reset();
   13a9a:	4b06      	ldr	r3, [pc, #24]	; (13ab4 <CLI_OTAU+0x34>)
   13a9c:	4798      	blx	r3

    return pdFALSE;
   13a9e:	2300      	movs	r3, #0
}
   13aa0:	0018      	movs	r0, r3
   13aa2:	46bd      	mov	sp, r7
   13aa4:	b004      	add	sp, #16
   13aa6:	bd80      	pop	{r7, pc}
   13aa8:	00016cf9 	.word	0x00016cf9
   13aac:	00004e20 	.word	0x00004e20
   13ab0:	0001ba11 	.word	0x0001ba11
   13ab4:	000136a5 	.word	0x000136a5

00013ab8 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13ab8:	b580      	push	{r7, lr}
   13aba:	b084      	sub	sp, #16
   13abc:	af00      	add	r7, sp, #0
   13abe:	60f8      	str	r0, [r7, #12]
   13ac0:	60b9      	str	r1, [r7, #8]
   13ac2:	607a      	str	r2, [r7, #4]
    system_reset();
   13ac4:	4b03      	ldr	r3, [pc, #12]	; (13ad4 <CLI_ResetDevice+0x1c>)
   13ac6:	4798      	blx	r3
    return pdFALSE;
   13ac8:	2300      	movs	r3, #0
}
   13aca:	0018      	movs	r0, r3
   13acc:	46bd      	mov	sp, r7
   13ace:	b004      	add	sp, #16
   13ad0:	bd80      	pop	{r7, pc}
   13ad2:	46c0      	nop			; (mov r8, r8)
   13ad4:	000136a5 	.word	0x000136a5

00013ad8 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13ad8:	b590      	push	{r4, r7, lr}
   13ada:	b08f      	sub	sp, #60	; 0x3c
   13adc:	af00      	add	r7, sp, #0
   13ade:	60f8      	str	r0, [r7, #12]
   13ae0:	60b9      	str	r1, [r7, #8]
   13ae2:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13ae4:	2318      	movs	r3, #24
   13ae6:	18fb      	adds	r3, r7, r3
   13ae8:	2200      	movs	r2, #0
   13aea:	701a      	strb	r2, [r3, #0]
   13aec:	2318      	movs	r3, #24
   13aee:	18fb      	adds	r3, r7, r3
   13af0:	2200      	movs	r2, #0
   13af2:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13af4:	2318      	movs	r3, #24
   13af6:	18fb      	adds	r3, r7, r3
   13af8:	2200      	movs	r2, #0
   13afa:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13afc:	2318      	movs	r3, #24
   13afe:	18fb      	adds	r3, r7, r3
   13b00:	2200      	movs	r2, #0
   13b02:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13b04:	231c      	movs	r3, #28
   13b06:	18fb      	adds	r3, r7, r3
   13b08:	2200      	movs	r2, #0
   13b0a:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13b0c:	231c      	movs	r3, #28
   13b0e:	18fb      	adds	r3, r7, r3
   13b10:	2214      	movs	r2, #20
   13b12:	18ba      	adds	r2, r7, r2
   13b14:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13b16:	231c      	movs	r3, #28
   13b18:	18fb      	adds	r3, r7, r3
   13b1a:	2201      	movs	r2, #1
   13b1c:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13b1e:	231c      	movs	r3, #28
   13b20:	18fb      	adds	r3, r7, r3
   13b22:	2218      	movs	r2, #24
   13b24:	18ba      	adds	r2, r7, r2
   13b26:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13b28:	231c      	movs	r3, #28
   13b2a:	18fb      	adds	r3, r7, r3
   13b2c:	2201      	movs	r2, #1
   13b2e:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13b30:	4b2a      	ldr	r3, [pc, #168]	; (13bdc <CLI_i2cScan+0x104>)
   13b32:	0018      	movs	r0, r3
   13b34:	4b2a      	ldr	r3, [pc, #168]	; (13be0 <CLI_i2cScan+0x108>)
   13b36:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13b38:	2300      	movs	r3, #0
   13b3a:	637b      	str	r3, [r7, #52]	; 0x34
   13b3c:	e042      	b.n	13bc4 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b40:	4a28      	ldr	r2, [pc, #160]	; (13be4 <CLI_i2cScan+0x10c>)
   13b42:	4829      	ldr	r0, [pc, #164]	; (13be8 <CLI_i2cScan+0x110>)
   13b44:	210f      	movs	r1, #15
   13b46:	4c29      	ldr	r4, [pc, #164]	; (13bec <CLI_i2cScan+0x114>)
   13b48:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13b4a:	4b27      	ldr	r3, [pc, #156]	; (13be8 <CLI_i2cScan+0x110>)
   13b4c:	0018      	movs	r0, r3
   13b4e:	4b24      	ldr	r3, [pc, #144]	; (13be0 <CLI_i2cScan+0x108>)
   13b50:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13b52:	2300      	movs	r3, #0
   13b54:	633b      	str	r3, [r7, #48]	; 0x30
   13b56:	e02b      	b.n	13bb0 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b5a:	b2da      	uxtb	r2, r3
   13b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13b5e:	b2db      	uxtb	r3, r3
   13b60:	18d3      	adds	r3, r2, r3
   13b62:	b2da      	uxtb	r2, r3
   13b64:	231c      	movs	r3, #28
   13b66:	18fb      	adds	r3, r7, r3
   13b68:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   13b6a:	231c      	movs	r3, #28
   13b6c:	18fb      	adds	r3, r7, r3
   13b6e:	2264      	movs	r2, #100	; 0x64
   13b70:	2164      	movs	r1, #100	; 0x64
   13b72:	0018      	movs	r0, r3
   13b74:	4b1e      	ldr	r3, [pc, #120]	; (13bf0 <CLI_i2cScan+0x118>)
   13b76:	4798      	blx	r3
   13b78:	0003      	movs	r3, r0
   13b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13b7e:	2b00      	cmp	r3, #0
   13b80:	d10c      	bne.n	13b9c <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   13b82:	231c      	movs	r3, #28
   13b84:	18fb      	adds	r3, r7, r3
   13b86:	781b      	ldrb	r3, [r3, #0]
   13b88:	4a1a      	ldr	r2, [pc, #104]	; (13bf4 <CLI_i2cScan+0x11c>)
   13b8a:	4817      	ldr	r0, [pc, #92]	; (13be8 <CLI_i2cScan+0x110>)
   13b8c:	210f      	movs	r1, #15
   13b8e:	4c17      	ldr	r4, [pc, #92]	; (13bec <CLI_i2cScan+0x114>)
   13b90:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13b92:	4b15      	ldr	r3, [pc, #84]	; (13be8 <CLI_i2cScan+0x110>)
   13b94:	0018      	movs	r0, r3
   13b96:	4b12      	ldr	r3, [pc, #72]	; (13be0 <CLI_i2cScan+0x108>)
   13b98:	4798      	blx	r3
   13b9a:	e006      	b.n	13baa <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13b9c:	4b12      	ldr	r3, [pc, #72]	; (13be8 <CLI_i2cScan+0x110>)
   13b9e:	4a16      	ldr	r2, [pc, #88]	; (13bf8 <CLI_i2cScan+0x120>)
   13ba0:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   13ba2:	4b11      	ldr	r3, [pc, #68]	; (13be8 <CLI_i2cScan+0x110>)
   13ba4:	0018      	movs	r0, r3
   13ba6:	4b0e      	ldr	r3, [pc, #56]	; (13be0 <CLI_i2cScan+0x108>)
   13ba8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13bac:	3301      	adds	r3, #1
   13bae:	633b      	str	r3, [r7, #48]	; 0x30
   13bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13bb2:	2b0f      	cmp	r3, #15
   13bb4:	ddd0      	ble.n	13b58 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13bb6:	4b11      	ldr	r3, [pc, #68]	; (13bfc <CLI_i2cScan+0x124>)
   13bb8:	0018      	movs	r0, r3
   13bba:	4b09      	ldr	r3, [pc, #36]	; (13be0 <CLI_i2cScan+0x108>)
   13bbc:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13bc0:	3310      	adds	r3, #16
   13bc2:	637b      	str	r3, [r7, #52]	; 0x34
   13bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13bc6:	2b7f      	cmp	r3, #127	; 0x7f
   13bc8:	ddb9      	ble.n	13b3e <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13bca:	4b0c      	ldr	r3, [pc, #48]	; (13bfc <CLI_i2cScan+0x124>)
   13bcc:	0018      	movs	r0, r3
   13bce:	4b04      	ldr	r3, [pc, #16]	; (13be0 <CLI_i2cScan+0x108>)
   13bd0:	4798      	blx	r3
			return pdFALSE;
   13bd2:	2300      	movs	r3, #0

}
   13bd4:	0018      	movs	r0, r3
   13bd6:	46bd      	mov	sp, r7
   13bd8:	b00f      	add	sp, #60	; 0x3c
   13bda:	bd90      	pop	{r4, r7, pc}
   13bdc:	000359f8 	.word	0x000359f8
   13be0:	0001d665 	.word	0x0001d665
   13be4:	00035a2c 	.word	0x00035a2c
   13be8:	20000384 	.word	0x20000384
   13bec:	00034571 	.word	0x00034571
   13bf0:	000144e5 	.word	0x000144e5
   13bf4:	00035a34 	.word	0x00035a34
   13bf8:	00202058 	.word	0x00202058
   13bfc:	000359dc 	.word	0x000359dc

00013c00 <CLI_GetMicData>:
* @brief		CLI command to read microphone data
* @details		Use the 'mic' CLI command to read data from the MEMs microphone
* @note         This function reads ADC data from the MEMs microphone
*****************************************************************************/
BaseType_t CLI_GetMicData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c00:	b580      	push	{r7, lr}
   13c02:	b086      	sub	sp, #24
   13c04:	af00      	add	r7, sp, #0
   13c06:	60f8      	str	r0, [r7, #12]
   13c08:	60b9      	str	r1, [r7, #8]
   13c0a:	607a      	str	r2, [r7, #4]
	int error = 0;
   13c0c:	2300      	movs	r3, #0
   13c0e:	617b      	str	r3, [r7, #20]
	while(1)
	{
		error = mic_read();
   13c10:	4b0b      	ldr	r3, [pc, #44]	; (13c40 <CLI_GetMicData+0x40>)
   13c12:	4798      	blx	r3
   13c14:	0003      	movs	r3, r0
   13c16:	617b      	str	r3, [r7, #20]
		if (error == pdTRUE) {
   13c18:	697b      	ldr	r3, [r7, #20]
   13c1a:	2b01      	cmp	r3, #1
   13c1c:	d1f8      	bne.n	13c10 <CLI_GetMicData+0x10>
			strcat((char *) pcWriteBuffer, "Mic Data MQTT Post\r\n");
   13c1e:	68fb      	ldr	r3, [r7, #12]
   13c20:	0018      	movs	r0, r3
   13c22:	4b08      	ldr	r3, [pc, #32]	; (13c44 <CLI_GetMicData+0x44>)
   13c24:	4798      	blx	r3
   13c26:	0003      	movs	r3, r0
   13c28:	001a      	movs	r2, r3
   13c2a:	68fb      	ldr	r3, [r7, #12]
   13c2c:	189a      	adds	r2, r3, r2
   13c2e:	4b06      	ldr	r3, [pc, #24]	; (13c48 <CLI_GetMicData+0x48>)
   13c30:	0010      	movs	r0, r2
   13c32:	0019      	movs	r1, r3
   13c34:	2315      	movs	r3, #21
   13c36:	001a      	movs	r2, r3
   13c38:	4b04      	ldr	r3, [pc, #16]	; (13c4c <CLI_GetMicData+0x4c>)
   13c3a:	4798      	blx	r3
		error = mic_read();
   13c3c:	e7e8      	b.n	13c10 <CLI_GetMicData+0x10>
   13c3e:	46c0      	nop			; (mov r8, r8)
   13c40:	00014825 	.word	0x00014825
   13c44:	000346cf 	.word	0x000346cf
   13c48:	00035a3c 	.word	0x00035a3c
   13c4c:	000342e1 	.word	0x000342e1

00013c50 <CLI_SoilMoistureGetMoisture>:
* @brief		CLI command to get soil moisture and temperature data
* @details		Use the 'getMoisture' CLI command to get moisture and temperature information of soil
* @note         This function fetches moisture and temperature data of soil from the I2C soil moisture sensor
*****************************************************************************/
BaseType_t CLI_SoilMoistureGetMoisture(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c50:	b590      	push	{r4, r7, lr}
   13c52:	b097      	sub	sp, #92	; 0x5c
   13c54:	af00      	add	r7, sp, #0
   13c56:	60f8      	str	r0, [r7, #12]
   13c58:	60b9      	str	r1, [r7, #8]
   13c5a:	607a      	str	r2, [r7, #4]
	char buf[64];
	uint16_t status = SoilMoisture_init();
   13c5c:	2356      	movs	r3, #86	; 0x56
   13c5e:	18fc      	adds	r4, r7, r3
   13c60:	4b1e      	ldr	r3, [pc, #120]	; (13cdc <CLI_SoilMoistureGetMoisture+0x8c>)
   13c62:	4798      	blx	r3
   13c64:	0003      	movs	r3, r0
   13c66:	8023      	strh	r3, [r4, #0]
	//snprintf((char *) buf, sizeof(buf), "status: %d\r\n",status);
	//SerialConsoleWriteString(buf);
	
	while(1)
	{
		status = SoilMoisture_Temp();
   13c68:	2356      	movs	r3, #86	; 0x56
   13c6a:	18fc      	adds	r4, r7, r3
   13c6c:	4b1c      	ldr	r3, [pc, #112]	; (13ce0 <CLI_SoilMoistureGetMoisture+0x90>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	8023      	strh	r3, [r4, #0]
		if (status == pdTRUE) {
   13c74:	2356      	movs	r3, #86	; 0x56
   13c76:	18fb      	adds	r3, r7, r3
   13c78:	881b      	ldrh	r3, [r3, #0]
   13c7a:	2b01      	cmp	r3, #1
   13c7c:	d10e      	bne.n	13c9c <CLI_SoilMoistureGetMoisture+0x4c>
			strcat((char *) pcWriteBuffer, "Soil Temperature Data MQTT Post\r\n");
   13c7e:	68fb      	ldr	r3, [r7, #12]
   13c80:	0018      	movs	r0, r3
   13c82:	4b18      	ldr	r3, [pc, #96]	; (13ce4 <CLI_SoilMoistureGetMoisture+0x94>)
   13c84:	4798      	blx	r3
   13c86:	0003      	movs	r3, r0
   13c88:	001a      	movs	r2, r3
   13c8a:	68fb      	ldr	r3, [r7, #12]
   13c8c:	189a      	adds	r2, r3, r2
   13c8e:	4b16      	ldr	r3, [pc, #88]	; (13ce8 <CLI_SoilMoistureGetMoisture+0x98>)
   13c90:	0010      	movs	r0, r2
   13c92:	0019      	movs	r1, r3
   13c94:	2322      	movs	r3, #34	; 0x22
   13c96:	001a      	movs	r2, r3
   13c98:	4b14      	ldr	r3, [pc, #80]	; (13cec <CLI_SoilMoistureGetMoisture+0x9c>)
   13c9a:	4798      	blx	r3
		}
		//snprintf((char *) buf, sizeof(buf), "Temperature Status: %d\r\n",status);
		//SerialConsoleWriteString(buf);
		status = SoilMoisture_Moist();
   13c9c:	2356      	movs	r3, #86	; 0x56
   13c9e:	18fc      	adds	r4, r7, r3
   13ca0:	4b13      	ldr	r3, [pc, #76]	; (13cf0 <CLI_SoilMoistureGetMoisture+0xa0>)
   13ca2:	4798      	blx	r3
   13ca4:	0003      	movs	r3, r0
   13ca6:	8023      	strh	r3, [r4, #0]
		if (status == pdTRUE) {
   13ca8:	2356      	movs	r3, #86	; 0x56
   13caa:	18fb      	adds	r3, r7, r3
   13cac:	881b      	ldrh	r3, [r3, #0]
   13cae:	2b01      	cmp	r3, #1
   13cb0:	d10e      	bne.n	13cd0 <CLI_SoilMoistureGetMoisture+0x80>
			strcat((char *) pcWriteBuffer, "Soil Moisture and Sprinkler Data MQTT Post\r\n");
   13cb2:	68fb      	ldr	r3, [r7, #12]
   13cb4:	0018      	movs	r0, r3
   13cb6:	4b0b      	ldr	r3, [pc, #44]	; (13ce4 <CLI_SoilMoistureGetMoisture+0x94>)
   13cb8:	4798      	blx	r3
   13cba:	0003      	movs	r3, r0
   13cbc:	001a      	movs	r2, r3
   13cbe:	68fb      	ldr	r3, [r7, #12]
   13cc0:	189a      	adds	r2, r3, r2
   13cc2:	4b0c      	ldr	r3, [pc, #48]	; (13cf4 <CLI_SoilMoistureGetMoisture+0xa4>)
   13cc4:	0010      	movs	r0, r2
   13cc6:	0019      	movs	r1, r3
   13cc8:	232d      	movs	r3, #45	; 0x2d
   13cca:	001a      	movs	r2, r3
   13ccc:	4b07      	ldr	r3, [pc, #28]	; (13cec <CLI_SoilMoistureGetMoisture+0x9c>)
   13cce:	4798      	blx	r3
		}
		//snprintf((char *) buf, sizeof(buf), "Moisture Status: %d\r\n",status);
		//SerialConsoleWriteString(buf);
		vTaskDelay(1000);
   13cd0:	23fa      	movs	r3, #250	; 0xfa
   13cd2:	009b      	lsls	r3, r3, #2
   13cd4:	0018      	movs	r0, r3
   13cd6:	4b08      	ldr	r3, [pc, #32]	; (13cf8 <CLI_SoilMoistureGetMoisture+0xa8>)
   13cd8:	4798      	blx	r3
		status = SoilMoisture_Temp();
   13cda:	e7c5      	b.n	13c68 <CLI_SoilMoistureGetMoisture+0x18>
   13cdc:	00014f19 	.word	0x00014f19
   13ce0:	00014f75 	.word	0x00014f75
   13ce4:	000346cf 	.word	0x000346cf
   13ce8:	00035a54 	.word	0x00035a54
   13cec:	000342e1 	.word	0x000342e1
   13cf0:	00015095 	.word	0x00015095
   13cf4:	00035a78 	.word	0x00035a78
   13cf8:	0001ba11 	.word	0x0001ba11

00013cfc <CLI_NPKSensorGetNPK>:
* @brief		CLI command to get soil NPK data
* @details		Use the 'npk' CLI command to get npk information of soil
* @note         This function fetches the nitrogen, phosphorus and potassium values of soil from the RS485 soil NPK sensor
*****************************************************************************/
BaseType_t CLI_NPKSensorGetNPK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cfc:	b590      	push	{r4, r7, lr}
   13cfe:	b089      	sub	sp, #36	; 0x24
   13d00:	af00      	add	r7, sp, #0
   13d02:	60f8      	str	r0, [r7, #12]
   13d04:	60b9      	str	r1, [r7, #8]
   13d06:	607a      	str	r2, [r7, #4]
	uint16_t N = 0, P = 0, K = 0;
   13d08:	2316      	movs	r3, #22
   13d0a:	18fb      	adds	r3, r7, r3
   13d0c:	2200      	movs	r2, #0
   13d0e:	801a      	strh	r2, [r3, #0]
   13d10:	231e      	movs	r3, #30
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	2200      	movs	r2, #0
   13d16:	801a      	strh	r2, [r3, #0]
   13d18:	231c      	movs	r3, #28
   13d1a:	18fb      	adds	r3, r7, r3
   13d1c:	2200      	movs	r2, #0
   13d1e:	801a      	strh	r2, [r3, #0]
	int error = NPKSensorGetNitrogen(&N, 100);
   13d20:	2316      	movs	r3, #22
   13d22:	18fb      	adds	r3, r7, r3
   13d24:	2164      	movs	r1, #100	; 0x64
   13d26:	0018      	movs	r0, r3
   13d28:	4b19      	ldr	r3, [pc, #100]	; (13d90 <CLI_NPKSensorGetNPK+0x94>)
   13d2a:	4798      	blx	r3
   13d2c:	0003      	movs	r3, r0
   13d2e:	61bb      	str	r3, [r7, #24]
	if (0 != error) {
   13d30:	69bb      	ldr	r3, [r7, #24]
   13d32:	2b00      	cmp	r3, #0
   13d34:	d006      	beq.n	13d44 <CLI_NPKSensorGetNPK+0x48>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13d36:	69bb      	ldr	r3, [r7, #24]
   13d38:	4a16      	ldr	r2, [pc, #88]	; (13d94 <CLI_NPKSensorGetNPK+0x98>)
   13d3a:	68b9      	ldr	r1, [r7, #8]
   13d3c:	68f8      	ldr	r0, [r7, #12]
   13d3e:	4c16      	ldr	r4, [pc, #88]	; (13d98 <CLI_NPKSensorGetNPK+0x9c>)
   13d40:	47a0      	blx	r4
   13d42:	e007      	b.n	13d54 <CLI_NPKSensorGetNPK+0x58>
		} else {
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "NPK: %d mm\r\n", N);
   13d44:	2316      	movs	r3, #22
   13d46:	18fb      	adds	r3, r7, r3
   13d48:	881b      	ldrh	r3, [r3, #0]
   13d4a:	4a14      	ldr	r2, [pc, #80]	; (13d9c <CLI_NPKSensorGetNPK+0xa0>)
   13d4c:	68b9      	ldr	r1, [r7, #8]
   13d4e:	68f8      	ldr	r0, [r7, #12]
   13d50:	4c11      	ldr	r4, [pc, #68]	; (13d98 <CLI_NPKSensorGetNPK+0x9c>)
   13d52:	47a0      	blx	r4
	}
	error = WifiAddNitrogenDataToQueue(&N);
   13d54:	2316      	movs	r3, #22
   13d56:	18fb      	adds	r3, r7, r3
   13d58:	0018      	movs	r0, r3
   13d5a:	4b11      	ldr	r3, [pc, #68]	; (13da0 <CLI_NPKSensorGetNPK+0xa4>)
   13d5c:	4798      	blx	r3
   13d5e:	0003      	movs	r3, r0
   13d60:	61bb      	str	r3, [r7, #24]
	if (error == pdTRUE) {
   13d62:	69bb      	ldr	r3, [r7, #24]
   13d64:	2b01      	cmp	r3, #1
   13d66:	d10e      	bne.n	13d86 <CLI_NPKSensorGetNPK+0x8a>
		strcat((char *) pcWriteBuffer, "NPK Data MQTT Post\r\n");
   13d68:	68fb      	ldr	r3, [r7, #12]
   13d6a:	0018      	movs	r0, r3
   13d6c:	4b0d      	ldr	r3, [pc, #52]	; (13da4 <CLI_NPKSensorGetNPK+0xa8>)
   13d6e:	4798      	blx	r3
   13d70:	0003      	movs	r3, r0
   13d72:	001a      	movs	r2, r3
   13d74:	68fb      	ldr	r3, [r7, #12]
   13d76:	189a      	adds	r2, r3, r2
   13d78:	4b0b      	ldr	r3, [pc, #44]	; (13da8 <CLI_NPKSensorGetNPK+0xac>)
   13d7a:	0010      	movs	r0, r2
   13d7c:	0019      	movs	r1, r3
   13d7e:	2315      	movs	r3, #21
   13d80:	001a      	movs	r2, r3
   13d82:	4b0a      	ldr	r3, [pc, #40]	; (13dac <CLI_NPKSensorGetNPK+0xb0>)
   13d84:	4798      	blx	r3
	}
	
	return pdFALSE;
   13d86:	2300      	movs	r3, #0
   13d88:	0018      	movs	r0, r3
   13d8a:	46bd      	mov	sp, r7
   13d8c:	b009      	add	sp, #36	; 0x24
   13d8e:	bd90      	pop	{r4, r7, pc}
   13d90:	00014b11 	.word	0x00014b11
   13d94:	00035aa8 	.word	0x00035aa8
   13d98:	00034571 	.word	0x00034571
   13d9c:	00035abc 	.word	0x00035abc
   13da0:	00016d2d 	.word	0x00016d2d
   13da4:	000346cf 	.word	0x000346cf
   13da8:	00035acc 	.word	0x00035acc
   13dac:	000342e1 	.word	0x000342e1

00013db0 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13db0:	b590      	push	{r4, r7, lr}
   13db2:	b085      	sub	sp, #20
   13db4:	af00      	add	r7, sp, #0
   13db6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   13db8:	4b06      	ldr	r3, [pc, #24]	; (13dd4 <ControlAddGameData+0x24>)
   13dba:	6818      	ldr	r0, [r3, #0]
   13dbc:	6879      	ldr	r1, [r7, #4]
   13dbe:	2300      	movs	r3, #0
   13dc0:	220a      	movs	r2, #10
   13dc2:	4c05      	ldr	r4, [pc, #20]	; (13dd8 <ControlAddGameData+0x28>)
   13dc4:	47a0      	blx	r4
   13dc6:	0003      	movs	r3, r0
   13dc8:	60fb      	str	r3, [r7, #12]
    return error;
   13dca:	68fb      	ldr	r3, [r7, #12]
}
   13dcc:	0018      	movs	r0, r3
   13dce:	46bd      	mov	sp, r7
   13dd0:	b005      	add	sp, #20
   13dd2:	bd90      	pop	{r4, r7, pc}
   13dd4:	2000046c 	.word	0x2000046c
   13dd8:	00019fad 	.word	0x00019fad

00013ddc <system_interrupt_enable>:
{
   13ddc:	b580      	push	{r7, lr}
   13dde:	b082      	sub	sp, #8
   13de0:	af00      	add	r7, sp, #0
   13de2:	0002      	movs	r2, r0
   13de4:	1dfb      	adds	r3, r7, #7
   13de6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13de8:	4b06      	ldr	r3, [pc, #24]	; (13e04 <system_interrupt_enable+0x28>)
   13dea:	1dfa      	adds	r2, r7, #7
   13dec:	7812      	ldrb	r2, [r2, #0]
   13dee:	0011      	movs	r1, r2
   13df0:	221f      	movs	r2, #31
   13df2:	400a      	ands	r2, r1
   13df4:	2101      	movs	r1, #1
   13df6:	4091      	lsls	r1, r2
   13df8:	000a      	movs	r2, r1
   13dfa:	601a      	str	r2, [r3, #0]
}
   13dfc:	46c0      	nop			; (mov r8, r8)
   13dfe:	46bd      	mov	sp, r7
   13e00:	b002      	add	sp, #8
   13e02:	bd80      	pop	{r7, pc}
   13e04:	e000e100 	.word	0xe000e100

00013e08 <i2c_master_is_syncing>:
{
   13e08:	b580      	push	{r7, lr}
   13e0a:	b084      	sub	sp, #16
   13e0c:	af00      	add	r7, sp, #0
   13e0e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13e10:	687b      	ldr	r3, [r7, #4]
   13e12:	681b      	ldr	r3, [r3, #0]
   13e14:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13e16:	68fb      	ldr	r3, [r7, #12]
   13e18:	69db      	ldr	r3, [r3, #28]
   13e1a:	2207      	movs	r2, #7
   13e1c:	4013      	ands	r3, r2
   13e1e:	1e5a      	subs	r2, r3, #1
   13e20:	4193      	sbcs	r3, r2
   13e22:	b2db      	uxtb	r3, r3
}
   13e24:	0018      	movs	r0, r3
   13e26:	46bd      	mov	sp, r7
   13e28:	b004      	add	sp, #16
   13e2a:	bd80      	pop	{r7, pc}

00013e2c <_i2c_master_wait_for_sync>:
{
   13e2c:	b580      	push	{r7, lr}
   13e2e:	b082      	sub	sp, #8
   13e30:	af00      	add	r7, sp, #0
   13e32:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13e34:	46c0      	nop			; (mov r8, r8)
   13e36:	687b      	ldr	r3, [r7, #4]
   13e38:	0018      	movs	r0, r3
   13e3a:	4b04      	ldr	r3, [pc, #16]	; (13e4c <_i2c_master_wait_for_sync+0x20>)
   13e3c:	4798      	blx	r3
   13e3e:	1e03      	subs	r3, r0, #0
   13e40:	d1f9      	bne.n	13e36 <_i2c_master_wait_for_sync+0xa>
}
   13e42:	46c0      	nop			; (mov r8, r8)
   13e44:	46bd      	mov	sp, r7
   13e46:	b002      	add	sp, #8
   13e48:	bd80      	pop	{r7, pc}
   13e4a:	46c0      	nop			; (mov r8, r8)
   13e4c:	00013e09 	.word	0x00013e09

00013e50 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13e50:	b580      	push	{r7, lr}
   13e52:	b082      	sub	sp, #8
   13e54:	af00      	add	r7, sp, #0
   13e56:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13e58:	687b      	ldr	r3, [r7, #4]
   13e5a:	2264      	movs	r2, #100	; 0x64
   13e5c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13e5e:	687b      	ldr	r3, [r7, #4]
   13e60:	4a1b      	ldr	r2, [pc, #108]	; (13ed0 <i2c_master_get_config_defaults+0x80>)
   13e62:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13e64:	687b      	ldr	r3, [r7, #4]
   13e66:	2200      	movs	r2, #0
   13e68:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13e6a:	687b      	ldr	r3, [r7, #4]
   13e6c:	2200      	movs	r2, #0
   13e6e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	2200      	movs	r2, #0
   13e74:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13e76:	687b      	ldr	r3, [r7, #4]
   13e78:	2280      	movs	r2, #128	; 0x80
   13e7a:	0392      	lsls	r2, r2, #14
   13e7c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13e7e:	687b      	ldr	r3, [r7, #4]
   13e80:	2201      	movs	r2, #1
   13e82:	4252      	negs	r2, r2
   13e84:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13e86:	687b      	ldr	r3, [r7, #4]
   13e88:	2201      	movs	r2, #1
   13e8a:	4252      	negs	r2, r2
   13e8c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13e8e:	687b      	ldr	r3, [r7, #4]
   13e90:	2200      	movs	r2, #0
   13e92:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13e94:	687b      	ldr	r3, [r7, #4]
   13e96:	2200      	movs	r2, #0
   13e98:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13e9a:	687b      	ldr	r3, [r7, #4]
   13e9c:	2224      	movs	r2, #36	; 0x24
   13e9e:	2100      	movs	r1, #0
   13ea0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13ea2:	687b      	ldr	r3, [r7, #4]
   13ea4:	2200      	movs	r2, #0
   13ea6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13ea8:	687b      	ldr	r3, [r7, #4]
   13eaa:	222c      	movs	r2, #44	; 0x2c
   13eac:	2100      	movs	r1, #0
   13eae:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13eb0:	687b      	ldr	r3, [r7, #4]
   13eb2:	222d      	movs	r2, #45	; 0x2d
   13eb4:	2100      	movs	r1, #0
   13eb6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	222e      	movs	r2, #46	; 0x2e
   13ebc:	2100      	movs	r1, #0
   13ebe:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13ec0:	687b      	ldr	r3, [r7, #4]
   13ec2:	22d7      	movs	r2, #215	; 0xd7
   13ec4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13ec6:	46c0      	nop			; (mov r8, r8)
   13ec8:	46bd      	mov	sp, r7
   13eca:	b002      	add	sp, #8
   13ecc:	bd80      	pop	{r7, pc}
   13ece:	46c0      	nop			; (mov r8, r8)
   13ed0:	00000d48 	.word	0x00000d48

00013ed4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13ed4:	b580      	push	{r7, lr}
   13ed6:	b084      	sub	sp, #16
   13ed8:	af00      	add	r7, sp, #0
   13eda:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13edc:	687b      	ldr	r3, [r7, #4]
   13ede:	681b      	ldr	r3, [r3, #0]
   13ee0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13ee2:	2300      	movs	r3, #0
   13ee4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13ee6:	687b      	ldr	r3, [r7, #4]
   13ee8:	0018      	movs	r0, r3
   13eea:	4b14      	ldr	r3, [pc, #80]	; (13f3c <i2c_master_enable+0x68>)
   13eec:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13eee:	68bb      	ldr	r3, [r7, #8]
   13ef0:	681b      	ldr	r3, [r3, #0]
   13ef2:	2202      	movs	r2, #2
   13ef4:	431a      	orrs	r2, r3
   13ef6:	68bb      	ldr	r3, [r7, #8]
   13ef8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13efa:	687b      	ldr	r3, [r7, #4]
   13efc:	681b      	ldr	r3, [r3, #0]
   13efe:	0018      	movs	r0, r3
   13f00:	4b0f      	ldr	r3, [pc, #60]	; (13f40 <i2c_master_enable+0x6c>)
   13f02:	4798      	blx	r3
   13f04:	0003      	movs	r3, r0
   13f06:	0018      	movs	r0, r3
   13f08:	4b0e      	ldr	r3, [pc, #56]	; (13f44 <i2c_master_enable+0x70>)
   13f0a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13f0c:	e00c      	b.n	13f28 <i2c_master_enable+0x54>
		timeout_counter++;
   13f0e:	68fb      	ldr	r3, [r7, #12]
   13f10:	3301      	adds	r3, #1
   13f12:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13f14:	687b      	ldr	r3, [r7, #4]
   13f16:	88db      	ldrh	r3, [r3, #6]
   13f18:	001a      	movs	r2, r3
   13f1a:	68fb      	ldr	r3, [r7, #12]
   13f1c:	429a      	cmp	r2, r3
   13f1e:	d803      	bhi.n	13f28 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13f20:	68bb      	ldr	r3, [r7, #8]
   13f22:	2210      	movs	r2, #16
   13f24:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   13f26:	e006      	b.n	13f36 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13f28:	68bb      	ldr	r3, [r7, #8]
   13f2a:	8b5b      	ldrh	r3, [r3, #26]
   13f2c:	b29b      	uxth	r3, r3
   13f2e:	001a      	movs	r2, r3
   13f30:	2310      	movs	r3, #16
   13f32:	4013      	ands	r3, r2
   13f34:	d0eb      	beq.n	13f0e <i2c_master_enable+0x3a>
		}
	}
}
   13f36:	46bd      	mov	sp, r7
   13f38:	b004      	add	sp, #16
   13f3a:	bd80      	pop	{r7, pc}
   13f3c:	00013e2d 	.word	0x00013e2d
   13f40:	00026f79 	.word	0x00026f79
   13f44:	00013ddd 	.word	0x00013ddd

00013f48 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13f48:	b580      	push	{r7, lr}
   13f4a:	b082      	sub	sp, #8
   13f4c:	af00      	add	r7, sp, #0
   13f4e:	6078      	str	r0, [r7, #4]
   13f50:	000a      	movs	r2, r1
   13f52:	1cfb      	adds	r3, r7, #3
   13f54:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13f56:	687b      	ldr	r3, [r7, #4]
   13f58:	7e5b      	ldrb	r3, [r3, #25]
   13f5a:	b2db      	uxtb	r3, r3
   13f5c:	b25a      	sxtb	r2, r3
   13f5e:	1cfb      	adds	r3, r7, #3
   13f60:	781b      	ldrb	r3, [r3, #0]
   13f62:	2101      	movs	r1, #1
   13f64:	4099      	lsls	r1, r3
   13f66:	000b      	movs	r3, r1
   13f68:	b25b      	sxtb	r3, r3
   13f6a:	4313      	orrs	r3, r2
   13f6c:	b25b      	sxtb	r3, r3
   13f6e:	b2da      	uxtb	r2, r3
   13f70:	687b      	ldr	r3, [r7, #4]
   13f72:	765a      	strb	r2, [r3, #25]
}
   13f74:	46c0      	nop			; (mov r8, r8)
   13f76:	46bd      	mov	sp, r7
   13f78:	b002      	add	sp, #8
   13f7a:	bd80      	pop	{r7, pc}

00013f7c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13f7c:	b590      	push	{r4, r7, lr}
   13f7e:	b091      	sub	sp, #68	; 0x44
   13f80:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13f82:	2300      	movs	r3, #0
   13f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13f86:	233a      	movs	r3, #58	; 0x3a
   13f88:	18fb      	adds	r3, r7, r3
   13f8a:	2200      	movs	r2, #0
   13f8c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13f8e:	1d3b      	adds	r3, r7, #4
   13f90:	0018      	movs	r0, r3
   13f92:	4b21      	ldr	r3, [pc, #132]	; (14018 <I2cDriverConfigureSensorBus+0x9c>)
   13f94:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0; //SDA
   13f96:	1d3b      	adds	r3, r7, #4
   13f98:	4a20      	ldr	r2, [pc, #128]	; (1401c <I2cDriverConfigureSensorBus+0xa0>)
   13f9a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1; //SCL
   13f9c:	1d3b      	adds	r3, r7, #4
   13f9e:	4a20      	ldr	r2, [pc, #128]	; (14020 <I2cDriverConfigureSensorBus+0xa4>)
   13fa0:	621a      	str	r2, [r3, #32]
	
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13fa2:	1d3b      	adds	r3, r7, #4
   13fa4:	22fa      	movs	r2, #250	; 0xfa
   13fa6:	0092      	lsls	r2, r2, #2
   13fa8:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13faa:	233b      	movs	r3, #59	; 0x3b
   13fac:	18fb      	adds	r3, r7, r3
   13fae:	2203      	movs	r2, #3
   13fb0:	701a      	strb	r2, [r3, #0]
   13fb2:	e01e      	b.n	13ff2 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13fb4:	233a      	movs	r3, #58	; 0x3a
   13fb6:	18fc      	adds	r4, r7, r3
   13fb8:	1d3a      	adds	r2, r7, #4
   13fba:	491a      	ldr	r1, [pc, #104]	; (14024 <I2cDriverConfigureSensorBus+0xa8>)
   13fbc:	4b1a      	ldr	r3, [pc, #104]	; (14028 <I2cDriverConfigureSensorBus+0xac>)
   13fbe:	0018      	movs	r0, r3
   13fc0:	4b1a      	ldr	r3, [pc, #104]	; (1402c <I2cDriverConfigureSensorBus+0xb0>)
   13fc2:	4798      	blx	r3
   13fc4:	0003      	movs	r3, r0
   13fc6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13fc8:	233a      	movs	r3, #58	; 0x3a
   13fca:	18fb      	adds	r3, r7, r3
   13fcc:	781b      	ldrb	r3, [r3, #0]
   13fce:	2b00      	cmp	r3, #0
   13fd0:	d104      	bne.n	13fdc <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13fd2:	233a      	movs	r3, #58	; 0x3a
   13fd4:	18fb      	adds	r3, r7, r3
   13fd6:	781b      	ldrb	r3, [r3, #0]
   13fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13fda:	e00f      	b.n	13ffc <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13fdc:	4b12      	ldr	r3, [pc, #72]	; (14028 <I2cDriverConfigureSensorBus+0xac>)
   13fde:	0018      	movs	r0, r3
   13fe0:	4b13      	ldr	r3, [pc, #76]	; (14030 <I2cDriverConfigureSensorBus+0xb4>)
   13fe2:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13fe4:	233b      	movs	r3, #59	; 0x3b
   13fe6:	18fb      	adds	r3, r7, r3
   13fe8:	781a      	ldrb	r2, [r3, #0]
   13fea:	233b      	movs	r3, #59	; 0x3b
   13fec:	18fb      	adds	r3, r7, r3
   13fee:	3a01      	subs	r2, #1
   13ff0:	701a      	strb	r2, [r3, #0]
   13ff2:	233b      	movs	r3, #59	; 0x3b
   13ff4:	18fb      	adds	r3, r7, r3
   13ff6:	781b      	ldrb	r3, [r3, #0]
   13ff8:	2b00      	cmp	r3, #0
   13ffa:	d1db      	bne.n	13fb4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13ffe:	2b00      	cmp	r3, #0
   14000:	d104      	bne.n	1400c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14002:	4b09      	ldr	r3, [pc, #36]	; (14028 <I2cDriverConfigureSensorBus+0xac>)
   14004:	0018      	movs	r0, r3
   14006:	4b0b      	ldr	r3, [pc, #44]	; (14034 <I2cDriverConfigureSensorBus+0xb8>)
   14008:	4798      	blx	r3
   1400a:	e000      	b.n	1400e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   1400c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1400e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14010:	0018      	movs	r0, r3
   14012:	46bd      	mov	sp, r7
   14014:	b011      	add	sp, #68	; 0x44
   14016:	bd90      	pop	{r4, r7, pc}
   14018:	00013e51 	.word	0x00013e51
   1401c:	00080002 	.word	0x00080002
   14020:	00090002 	.word	0x00090002
   14024:	42000800 	.word	0x42000800
   14028:	20004628 	.word	0x20004628
   1402c:	000173a1 	.word	0x000173a1
   14030:	000174d5 	.word	0x000174d5
   14034:	00013ed5 	.word	0x00013ed5

00014038 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14038:	b580      	push	{r7, lr}
   1403a:	b084      	sub	sp, #16
   1403c:	af00      	add	r7, sp, #0
   1403e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14040:	4b0e      	ldr	r3, [pc, #56]	; (1407c <I2cSensorsTxComplete+0x44>)
   14042:	2200      	movs	r2, #0
   14044:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14046:	4b0d      	ldr	r3, [pc, #52]	; (1407c <I2cSensorsTxComplete+0x44>)
   14048:	2201      	movs	r2, #1
   1404a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1404c:	2300      	movs	r3, #0
   1404e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14050:	4b0b      	ldr	r3, [pc, #44]	; (14080 <I2cSensorsTxComplete+0x48>)
   14052:	681b      	ldr	r3, [r3, #0]
   14054:	220c      	movs	r2, #12
   14056:	18ba      	adds	r2, r7, r2
   14058:	0011      	movs	r1, r2
   1405a:	0018      	movs	r0, r3
   1405c:	4b09      	ldr	r3, [pc, #36]	; (14084 <I2cSensorsTxComplete+0x4c>)
   1405e:	4798      	blx	r3
    sensorTransmitError = false;
   14060:	4b09      	ldr	r3, [pc, #36]	; (14088 <I2cSensorsTxComplete+0x50>)
   14062:	2200      	movs	r2, #0
   14064:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14066:	68fb      	ldr	r3, [r7, #12]
   14068:	2b00      	cmp	r3, #0
   1406a:	d003      	beq.n	14074 <I2cSensorsTxComplete+0x3c>
   1406c:	4b07      	ldr	r3, [pc, #28]	; (1408c <I2cSensorsTxComplete+0x54>)
   1406e:	2280      	movs	r2, #128	; 0x80
   14070:	0552      	lsls	r2, r2, #21
   14072:	601a      	str	r2, [r3, #0]
}
   14074:	46c0      	nop			; (mov r8, r8)
   14076:	46bd      	mov	sp, r7
   14078:	b004      	add	sp, #16
   1407a:	bd80      	pop	{r7, pc}
   1407c:	20000474 	.word	0x20000474
   14080:	20004650 	.word	0x20004650
   14084:	0001a635 	.word	0x0001a635
   14088:	20000470 	.word	0x20000470
   1408c:	e000ed04 	.word	0xe000ed04

00014090 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14090:	b580      	push	{r7, lr}
   14092:	b084      	sub	sp, #16
   14094:	af00      	add	r7, sp, #0
   14096:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14098:	4b0e      	ldr	r3, [pc, #56]	; (140d4 <I2cSensorsRxComplete+0x44>)
   1409a:	2200      	movs	r2, #0
   1409c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1409e:	4b0d      	ldr	r3, [pc, #52]	; (140d4 <I2cSensorsRxComplete+0x44>)
   140a0:	2201      	movs	r2, #1
   140a2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   140a4:	2300      	movs	r3, #0
   140a6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   140a8:	4b0b      	ldr	r3, [pc, #44]	; (140d8 <I2cSensorsRxComplete+0x48>)
   140aa:	681b      	ldr	r3, [r3, #0]
   140ac:	220c      	movs	r2, #12
   140ae:	18ba      	adds	r2, r7, r2
   140b0:	0011      	movs	r1, r2
   140b2:	0018      	movs	r0, r3
   140b4:	4b09      	ldr	r3, [pc, #36]	; (140dc <I2cSensorsRxComplete+0x4c>)
   140b6:	4798      	blx	r3
    sensorTransmitError = false;
   140b8:	4b09      	ldr	r3, [pc, #36]	; (140e0 <I2cSensorsRxComplete+0x50>)
   140ba:	2200      	movs	r2, #0
   140bc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   140be:	68fb      	ldr	r3, [r7, #12]
   140c0:	2b00      	cmp	r3, #0
   140c2:	d003      	beq.n	140cc <I2cSensorsRxComplete+0x3c>
   140c4:	4b07      	ldr	r3, [pc, #28]	; (140e4 <I2cSensorsRxComplete+0x54>)
   140c6:	2280      	movs	r2, #128	; 0x80
   140c8:	0552      	lsls	r2, r2, #21
   140ca:	601a      	str	r2, [r3, #0]
}
   140cc:	46c0      	nop			; (mov r8, r8)
   140ce:	46bd      	mov	sp, r7
   140d0:	b004      	add	sp, #16
   140d2:	bd80      	pop	{r7, pc}
   140d4:	20000474 	.word	0x20000474
   140d8:	20004650 	.word	0x20004650
   140dc:	0001a635 	.word	0x0001a635
   140e0:	20000470 	.word	0x20000470
   140e4:	e000ed04 	.word	0xe000ed04

000140e8 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   140e8:	b580      	push	{r7, lr}
   140ea:	b084      	sub	sp, #16
   140ec:	af00      	add	r7, sp, #0
   140ee:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   140f0:	4b0e      	ldr	r3, [pc, #56]	; (1412c <I2cSensorsError+0x44>)
   140f2:	2200      	movs	r2, #0
   140f4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   140f6:	4b0d      	ldr	r3, [pc, #52]	; (1412c <I2cSensorsError+0x44>)
   140f8:	2201      	movs	r2, #1
   140fa:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   140fc:	2300      	movs	r3, #0
   140fe:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14100:	4b0b      	ldr	r3, [pc, #44]	; (14130 <I2cSensorsError+0x48>)
   14102:	681b      	ldr	r3, [r3, #0]
   14104:	220c      	movs	r2, #12
   14106:	18ba      	adds	r2, r7, r2
   14108:	0011      	movs	r1, r2
   1410a:	0018      	movs	r0, r3
   1410c:	4b09      	ldr	r3, [pc, #36]	; (14134 <I2cSensorsError+0x4c>)
   1410e:	4798      	blx	r3
    sensorTransmitError = true;
   14110:	4b09      	ldr	r3, [pc, #36]	; (14138 <I2cSensorsError+0x50>)
   14112:	2201      	movs	r2, #1
   14114:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14116:	68fb      	ldr	r3, [r7, #12]
   14118:	2b00      	cmp	r3, #0
   1411a:	d003      	beq.n	14124 <I2cSensorsError+0x3c>
   1411c:	4b07      	ldr	r3, [pc, #28]	; (1413c <I2cSensorsError+0x54>)
   1411e:	2280      	movs	r2, #128	; 0x80
   14120:	0552      	lsls	r2, r2, #21
   14122:	601a      	str	r2, [r3, #0]
}
   14124:	46c0      	nop			; (mov r8, r8)
   14126:	46bd      	mov	sp, r7
   14128:	b004      	add	sp, #16
   1412a:	bd80      	pop	{r7, pc}
   1412c:	20000474 	.word	0x20000474
   14130:	20004650 	.word	0x20004650
   14134:	0001a635 	.word	0x0001a635
   14138:	20000470 	.word	0x20000470
   1413c:	e000ed04 	.word	0xe000ed04

00014140 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14140:	b580      	push	{r7, lr}
   14142:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14144:	4911      	ldr	r1, [pc, #68]	; (1418c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14146:	4b12      	ldr	r3, [pc, #72]	; (14190 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14148:	2200      	movs	r2, #0
   1414a:	0018      	movs	r0, r3
   1414c:	4b11      	ldr	r3, [pc, #68]	; (14194 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1414e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14150:	4b0f      	ldr	r3, [pc, #60]	; (14190 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14152:	2100      	movs	r1, #0
   14154:	0018      	movs	r0, r3
   14156:	4b10      	ldr	r3, [pc, #64]	; (14198 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14158:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1415a:	4910      	ldr	r1, [pc, #64]	; (1419c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1415c:	4b0c      	ldr	r3, [pc, #48]	; (14190 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1415e:	2201      	movs	r2, #1
   14160:	0018      	movs	r0, r3
   14162:	4b0c      	ldr	r3, [pc, #48]	; (14194 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14164:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14166:	4b0a      	ldr	r3, [pc, #40]	; (14190 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14168:	2101      	movs	r1, #1
   1416a:	0018      	movs	r0, r3
   1416c:	4b0a      	ldr	r3, [pc, #40]	; (14198 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1416e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14170:	490b      	ldr	r1, [pc, #44]	; (141a0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14172:	4b07      	ldr	r3, [pc, #28]	; (14190 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14174:	2202      	movs	r2, #2
   14176:	0018      	movs	r0, r3
   14178:	4b06      	ldr	r3, [pc, #24]	; (14194 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1417a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1417c:	4b04      	ldr	r3, [pc, #16]	; (14190 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1417e:	2102      	movs	r1, #2
   14180:	0018      	movs	r0, r3
   14182:	4b05      	ldr	r3, [pc, #20]	; (14198 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14184:	4798      	blx	r3
}
   14186:	46c0      	nop			; (mov r8, r8)
   14188:	46bd      	mov	sp, r7
   1418a:	bd80      	pop	{r7, pc}
   1418c:	00014039 	.word	0x00014039
   14190:	20004628 	.word	0x20004628
   14194:	00013151 	.word	0x00013151
   14198:	00013f49 	.word	0x00013f49
   1419c:	00014091 	.word	0x00014091
   141a0:	000140e9 	.word	0x000140e9

000141a4 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   141a4:	b580      	push	{r7, lr}
   141a6:	b082      	sub	sp, #8
   141a8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   141aa:	2300      	movs	r3, #0
   141ac:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   141ae:	4b14      	ldr	r3, [pc, #80]	; (14200 <I2cInitializeDriver+0x5c>)
   141b0:	4798      	blx	r3
   141b2:	0003      	movs	r3, r0
   141b4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   141b6:	687b      	ldr	r3, [r7, #4]
   141b8:	2b00      	cmp	r3, #0
   141ba:	d11a      	bne.n	141f2 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   141bc:	4b11      	ldr	r3, [pc, #68]	; (14204 <I2cInitializeDriver+0x60>)
   141be:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   141c0:	2001      	movs	r0, #1
   141c2:	4b11      	ldr	r3, [pc, #68]	; (14208 <I2cInitializeDriver+0x64>)
   141c4:	4798      	blx	r3
   141c6:	0002      	movs	r2, r0
   141c8:	4b10      	ldr	r3, [pc, #64]	; (1420c <I2cInitializeDriver+0x68>)
   141ca:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   141cc:	2203      	movs	r2, #3
   141ce:	2100      	movs	r1, #0
   141d0:	2001      	movs	r0, #1
   141d2:	4b0f      	ldr	r3, [pc, #60]	; (14210 <I2cInitializeDriver+0x6c>)
   141d4:	4798      	blx	r3
   141d6:	0002      	movs	r2, r0
   141d8:	4b0e      	ldr	r3, [pc, #56]	; (14214 <I2cInitializeDriver+0x70>)
   141da:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   141dc:	4b0b      	ldr	r3, [pc, #44]	; (1420c <I2cInitializeDriver+0x68>)
   141de:	681b      	ldr	r3, [r3, #0]
   141e0:	2b00      	cmp	r3, #0
   141e2:	d003      	beq.n	141ec <I2cInitializeDriver+0x48>
   141e4:	4b0b      	ldr	r3, [pc, #44]	; (14214 <I2cInitializeDriver+0x70>)
   141e6:	681b      	ldr	r3, [r3, #0]
   141e8:	2b00      	cmp	r3, #0
   141ea:	d103      	bne.n	141f4 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   141ec:	2306      	movs	r3, #6
   141ee:	607b      	str	r3, [r7, #4]
        goto exit;
   141f0:	e000      	b.n	141f4 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   141f2:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   141f4:	687b      	ldr	r3, [r7, #4]
}
   141f6:	0018      	movs	r0, r3
   141f8:	46bd      	mov	sp, r7
   141fa:	b002      	add	sp, #8
   141fc:	bd80      	pop	{r7, pc}
   141fe:	46c0      	nop			; (mov r8, r8)
   14200:	00013f7d 	.word	0x00013f7d
   14204:	00014141 	.word	0x00014141
   14208:	00019f6d 	.word	0x00019f6d
   1420c:	20004624 	.word	0x20004624
   14210:	00019d05 	.word	0x00019d05
   14214:	20004650 	.word	0x20004650

00014218 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14218:	b590      	push	{r4, r7, lr}
   1421a:	b085      	sub	sp, #20
   1421c:	af00      	add	r7, sp, #0
   1421e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14220:	2300      	movs	r3, #0
   14222:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14224:	687b      	ldr	r3, [r7, #4]
   14226:	2b00      	cmp	r3, #0
   14228:	d003      	beq.n	14232 <I2cWriteData+0x1a>
   1422a:	687b      	ldr	r3, [r7, #4]
   1422c:	685b      	ldr	r3, [r3, #4]
   1422e:	2b00      	cmp	r3, #0
   14230:	d103      	bne.n	1423a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14232:	2308      	movs	r3, #8
   14234:	425b      	negs	r3, r3
   14236:	60fb      	str	r3, [r7, #12]
        goto exit;
   14238:	e01f      	b.n	1427a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1423a:	687b      	ldr	r3, [r7, #4]
   1423c:	781b      	ldrb	r3, [r3, #0]
   1423e:	b29a      	uxth	r2, r3
   14240:	4b10      	ldr	r3, [pc, #64]	; (14284 <I2cWriteData+0x6c>)
   14242:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14244:	687b      	ldr	r3, [r7, #4]
   14246:	685a      	ldr	r2, [r3, #4]
   14248:	4b0e      	ldr	r3, [pc, #56]	; (14284 <I2cWriteData+0x6c>)
   1424a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1424c:	687b      	ldr	r3, [r7, #4]
   1424e:	89da      	ldrh	r2, [r3, #14]
   14250:	4b0c      	ldr	r3, [pc, #48]	; (14284 <I2cWriteData+0x6c>)
   14252:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14254:	230b      	movs	r3, #11
   14256:	18fc      	adds	r4, r7, r3
   14258:	4a0a      	ldr	r2, [pc, #40]	; (14284 <I2cWriteData+0x6c>)
   1425a:	4b0b      	ldr	r3, [pc, #44]	; (14288 <I2cWriteData+0x70>)
   1425c:	0011      	movs	r1, r2
   1425e:	0018      	movs	r0, r3
   14260:	4b0a      	ldr	r3, [pc, #40]	; (1428c <I2cWriteData+0x74>)
   14262:	4798      	blx	r3
   14264:	0003      	movs	r3, r0
   14266:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14268:	230b      	movs	r3, #11
   1426a:	18fb      	adds	r3, r7, r3
   1426c:	781b      	ldrb	r3, [r3, #0]
   1426e:	2b00      	cmp	r3, #0
   14270:	d003      	beq.n	1427a <I2cWriteData+0x62>
        error = ERROR_IO;
   14272:	2306      	movs	r3, #6
   14274:	425b      	negs	r3, r3
   14276:	60fb      	str	r3, [r7, #12]
        goto exit;
   14278:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1427a:	68fb      	ldr	r3, [r7, #12]
}
   1427c:	0018      	movs	r0, r3
   1427e:	46bd      	mov	sp, r7
   14280:	b005      	add	sp, #20
   14282:	bd90      	pop	{r4, r7, pc}
   14284:	20004654 	.word	0x20004654
   14288:	20004628 	.word	0x20004628
   1428c:	000133d5 	.word	0x000133d5

00014290 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14290:	b590      	push	{r4, r7, lr}
   14292:	b085      	sub	sp, #20
   14294:	af00      	add	r7, sp, #0
   14296:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14298:	2300      	movs	r3, #0
   1429a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1429c:	687b      	ldr	r3, [r7, #4]
   1429e:	2b00      	cmp	r3, #0
   142a0:	d003      	beq.n	142aa <I2cReadData+0x1a>
   142a2:	687b      	ldr	r3, [r7, #4]
   142a4:	685b      	ldr	r3, [r3, #4]
   142a6:	2b00      	cmp	r3, #0
   142a8:	d103      	bne.n	142b2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   142aa:	2308      	movs	r3, #8
   142ac:	425b      	negs	r3, r3
   142ae:	60fb      	str	r3, [r7, #12]
        goto exit;
   142b0:	e01f      	b.n	142f2 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   142b2:	687b      	ldr	r3, [r7, #4]
   142b4:	781b      	ldrb	r3, [r3, #0]
   142b6:	b29a      	uxth	r2, r3
   142b8:	4b10      	ldr	r3, [pc, #64]	; (142fc <I2cReadData+0x6c>)
   142ba:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   142bc:	687b      	ldr	r3, [r7, #4]
   142be:	689a      	ldr	r2, [r3, #8]
   142c0:	4b0e      	ldr	r3, [pc, #56]	; (142fc <I2cReadData+0x6c>)
   142c2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   142c4:	687b      	ldr	r3, [r7, #4]
   142c6:	899a      	ldrh	r2, [r3, #12]
   142c8:	4b0c      	ldr	r3, [pc, #48]	; (142fc <I2cReadData+0x6c>)
   142ca:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   142cc:	230b      	movs	r3, #11
   142ce:	18fc      	adds	r4, r7, r3
   142d0:	4a0a      	ldr	r2, [pc, #40]	; (142fc <I2cReadData+0x6c>)
   142d2:	4b0b      	ldr	r3, [pc, #44]	; (14300 <I2cReadData+0x70>)
   142d4:	0011      	movs	r1, r2
   142d6:	0018      	movs	r0, r3
   142d8:	4b0a      	ldr	r3, [pc, #40]	; (14304 <I2cReadData+0x74>)
   142da:	4798      	blx	r3
   142dc:	0003      	movs	r3, r0
   142de:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   142e0:	230b      	movs	r3, #11
   142e2:	18fb      	adds	r3, r7, r3
   142e4:	781b      	ldrb	r3, [r3, #0]
   142e6:	2b00      	cmp	r3, #0
   142e8:	d003      	beq.n	142f2 <I2cReadData+0x62>
        error = ERROR_IO;
   142ea:	2306      	movs	r3, #6
   142ec:	425b      	negs	r3, r3
   142ee:	60fb      	str	r3, [r7, #12]
        goto exit;
   142f0:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   142f2:	68fb      	ldr	r3, [r7, #12]
}
   142f4:	0018      	movs	r0, r3
   142f6:	46bd      	mov	sp, r7
   142f8:	b005      	add	sp, #20
   142fa:	bd90      	pop	{r4, r7, pc}
   142fc:	20004654 	.word	0x20004654
   14300:	20004628 	.word	0x20004628
   14304:	000132f1 	.word	0x000132f1

00014308 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14308:	b590      	push	{r4, r7, lr}
   1430a:	b083      	sub	sp, #12
   1430c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1430e:	2300      	movs	r3, #0
   14310:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14312:	4b09      	ldr	r3, [pc, #36]	; (14338 <I2cFreeMutex+0x30>)
   14314:	6818      	ldr	r0, [r3, #0]
   14316:	2300      	movs	r3, #0
   14318:	2200      	movs	r2, #0
   1431a:	2100      	movs	r1, #0
   1431c:	4c07      	ldr	r4, [pc, #28]	; (1433c <I2cFreeMutex+0x34>)
   1431e:	47a0      	blx	r4
   14320:	0003      	movs	r3, r0
   14322:	2b01      	cmp	r3, #1
   14324:	d002      	beq.n	1432c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14326:	2314      	movs	r3, #20
   14328:	425b      	negs	r3, r3
   1432a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1432c:	687b      	ldr	r3, [r7, #4]
}
   1432e:	0018      	movs	r0, r3
   14330:	46bd      	mov	sp, r7
   14332:	b003      	add	sp, #12
   14334:	bd90      	pop	{r4, r7, pc}
   14336:	46c0      	nop			; (mov r8, r8)
   14338:	20004624 	.word	0x20004624
   1433c:	00019fad 	.word	0x00019fad

00014340 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14340:	b580      	push	{r7, lr}
   14342:	b084      	sub	sp, #16
   14344:	af00      	add	r7, sp, #0
   14346:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14348:	2300      	movs	r3, #0
   1434a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1434c:	4b08      	ldr	r3, [pc, #32]	; (14370 <I2cGetMutex+0x30>)
   1434e:	681b      	ldr	r3, [r3, #0]
   14350:	687a      	ldr	r2, [r7, #4]
   14352:	0011      	movs	r1, r2
   14354:	0018      	movs	r0, r3
   14356:	4b07      	ldr	r3, [pc, #28]	; (14374 <I2cGetMutex+0x34>)
   14358:	4798      	blx	r3
   1435a:	0003      	movs	r3, r0
   1435c:	2b01      	cmp	r3, #1
   1435e:	d002      	beq.n	14366 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14360:	231d      	movs	r3, #29
   14362:	425b      	negs	r3, r3
   14364:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14366:	68fb      	ldr	r3, [r7, #12]
}
   14368:	0018      	movs	r0, r3
   1436a:	46bd      	mov	sp, r7
   1436c:	b004      	add	sp, #16
   1436e:	bd80      	pop	{r7, pc}
   14370:	20004624 	.word	0x20004624
   14374:	0001acbd 	.word	0x0001acbd

00014378 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14378:	b580      	push	{r7, lr}
   1437a:	b084      	sub	sp, #16
   1437c:	af00      	add	r7, sp, #0
   1437e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14380:	2300      	movs	r3, #0
   14382:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14384:	4b04      	ldr	r3, [pc, #16]	; (14398 <I2cGetSemaphoreHandle+0x20>)
   14386:	681a      	ldr	r2, [r3, #0]
   14388:	687b      	ldr	r3, [r7, #4]
   1438a:	601a      	str	r2, [r3, #0]
    return error;
   1438c:	68fb      	ldr	r3, [r7, #12]
}
   1438e:	0018      	movs	r0, r3
   14390:	46bd      	mov	sp, r7
   14392:	b004      	add	sp, #16
   14394:	bd80      	pop	{r7, pc}
   14396:	46c0      	nop			; (mov r8, r8)
   14398:	20004650 	.word	0x20004650

0001439c <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   1439c:	b580      	push	{r7, lr}
   1439e:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   143a0:	4b02      	ldr	r3, [pc, #8]	; (143ac <I2cGetTaskErrorStatus+0x10>)
   143a2:	781b      	ldrb	r3, [r3, #0]
}
   143a4:	0018      	movs	r0, r3
   143a6:	46bd      	mov	sp, r7
   143a8:	bd80      	pop	{r7, pc}
   143aa:	46c0      	nop			; (mov r8, r8)
   143ac:	20000470 	.word	0x20000470

000143b0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   143b0:	b580      	push	{r7, lr}
   143b2:	b082      	sub	sp, #8
   143b4:	af00      	add	r7, sp, #0
   143b6:	0002      	movs	r2, r0
   143b8:	1dfb      	adds	r3, r7, #7
   143ba:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   143bc:	4b03      	ldr	r3, [pc, #12]	; (143cc <I2cSetTaskErrorStatus+0x1c>)
   143be:	1dfa      	adds	r2, r7, #7
   143c0:	7812      	ldrb	r2, [r2, #0]
   143c2:	701a      	strb	r2, [r3, #0]
}
   143c4:	46c0      	nop			; (mov r8, r8)
   143c6:	46bd      	mov	sp, r7
   143c8:	b002      	add	sp, #8
   143ca:	bd80      	pop	{r7, pc}
   143cc:	20000470 	.word	0x20000470

000143d0 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   143d0:	b580      	push	{r7, lr}
   143d2:	b086      	sub	sp, #24
   143d4:	af00      	add	r7, sp, #0
   143d6:	60f8      	str	r0, [r7, #12]
   143d8:	60b9      	str	r1, [r7, #8]
   143da:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   143dc:	2300      	movs	r3, #0
   143de:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   143e0:	2300      	movs	r3, #0
   143e2:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   143e4:	2396      	movs	r3, #150	; 0x96
   143e6:	005b      	lsls	r3, r3, #1
   143e8:	0018      	movs	r0, r3
   143ea:	4b35      	ldr	r3, [pc, #212]	; (144c0 <I2cReadDataWait+0xf0>)
   143ec:	4798      	blx	r3
   143ee:	0003      	movs	r3, r0
   143f0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   143f2:	697b      	ldr	r3, [r7, #20]
   143f4:	2b00      	cmp	r3, #0
   143f6:	d155      	bne.n	144a4 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   143f8:	2310      	movs	r3, #16
   143fa:	18fb      	adds	r3, r7, r3
   143fc:	0018      	movs	r0, r3
   143fe:	4b31      	ldr	r3, [pc, #196]	; (144c4 <I2cReadDataWait+0xf4>)
   14400:	4798      	blx	r3
   14402:	0003      	movs	r3, r0
   14404:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14406:	697b      	ldr	r3, [r7, #20]
   14408:	2b00      	cmp	r3, #0
   1440a:	d14d      	bne.n	144a8 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1440c:	68fb      	ldr	r3, [r7, #12]
   1440e:	0018      	movs	r0, r3
   14410:	4b2d      	ldr	r3, [pc, #180]	; (144c8 <I2cReadDataWait+0xf8>)
   14412:	4798      	blx	r3
   14414:	0003      	movs	r3, r0
   14416:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14418:	697b      	ldr	r3, [r7, #20]
   1441a:	2b00      	cmp	r3, #0
   1441c:	d147      	bne.n	144ae <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1441e:	693b      	ldr	r3, [r7, #16]
   14420:	687a      	ldr	r2, [r7, #4]
   14422:	0011      	movs	r1, r2
   14424:	0018      	movs	r0, r3
   14426:	4b29      	ldr	r3, [pc, #164]	; (144cc <I2cReadDataWait+0xfc>)
   14428:	4798      	blx	r3
   1442a:	0003      	movs	r3, r0
   1442c:	2b01      	cmp	r3, #1
   1442e:	d118      	bne.n	14462 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14430:	4b27      	ldr	r3, [pc, #156]	; (144d0 <I2cReadDataWait+0x100>)
   14432:	4798      	blx	r3
   14434:	1e03      	subs	r3, r0, #0
   14436:	d006      	beq.n	14446 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14438:	2000      	movs	r0, #0
   1443a:	4b26      	ldr	r3, [pc, #152]	; (144d4 <I2cReadDataWait+0x104>)
   1443c:	4798      	blx	r3
            error = ERROR_ABORTED;
   1443e:	2303      	movs	r3, #3
   14440:	425b      	negs	r3, r3
   14442:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14444:	e034      	b.n	144b0 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14446:	68bb      	ldr	r3, [r7, #8]
   14448:	0018      	movs	r0, r3
   1444a:	4b23      	ldr	r3, [pc, #140]	; (144d8 <I2cReadDataWait+0x108>)
   1444c:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   1444e:	68fb      	ldr	r3, [r7, #12]
   14450:	0018      	movs	r0, r3
   14452:	4b22      	ldr	r3, [pc, #136]	; (144dc <I2cReadDataWait+0x10c>)
   14454:	4798      	blx	r3
   14456:	0003      	movs	r3, r0
   14458:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   1445a:	697b      	ldr	r3, [r7, #20]
   1445c:	2b00      	cmp	r3, #0
   1445e:	d004      	beq.n	1446a <I2cReadDataWait+0x9a>
        goto exitError0;
   14460:	e026      	b.n	144b0 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14462:	2303      	movs	r3, #3
   14464:	425b      	negs	r3, r3
   14466:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14468:	e022      	b.n	144b0 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1446a:	693b      	ldr	r3, [r7, #16]
   1446c:	687a      	ldr	r2, [r7, #4]
   1446e:	0011      	movs	r1, r2
   14470:	0018      	movs	r0, r3
   14472:	4b16      	ldr	r3, [pc, #88]	; (144cc <I2cReadDataWait+0xfc>)
   14474:	4798      	blx	r3
   14476:	0003      	movs	r3, r0
   14478:	2b01      	cmp	r3, #1
   1447a:	d10a      	bne.n	14492 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1447c:	4b14      	ldr	r3, [pc, #80]	; (144d0 <I2cReadDataWait+0x100>)
   1447e:	4798      	blx	r3
   14480:	1e03      	subs	r3, r0, #0
   14482:	d00a      	beq.n	1449a <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14484:	2000      	movs	r0, #0
   14486:	4b13      	ldr	r3, [pc, #76]	; (144d4 <I2cReadDataWait+0x104>)
   14488:	4798      	blx	r3
            error = ERROR_ABORTED;
   1448a:	2303      	movs	r3, #3
   1448c:	425b      	negs	r3, r3
   1448e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14490:	e00e      	b.n	144b0 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14492:	2303      	movs	r3, #3
   14494:	425b      	negs	r3, r3
   14496:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14498:	e00a      	b.n	144b0 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   1449a:	4b11      	ldr	r3, [pc, #68]	; (144e0 <I2cReadDataWait+0x110>)
   1449c:	4798      	blx	r3
   1449e:	0003      	movs	r3, r0
   144a0:	617b      	str	r3, [r7, #20]
   144a2:	e002      	b.n	144aa <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   144a4:	46c0      	nop			; (mov r8, r8)
   144a6:	e000      	b.n	144aa <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   144a8:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   144aa:	697b      	ldr	r3, [r7, #20]
   144ac:	e003      	b.n	144b6 <I2cReadDataWait+0xe6>
        goto exitError0;
   144ae:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   144b0:	4b0b      	ldr	r3, [pc, #44]	; (144e0 <I2cReadDataWait+0x110>)
   144b2:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   144b4:	697b      	ldr	r3, [r7, #20]
}
   144b6:	0018      	movs	r0, r3
   144b8:	46bd      	mov	sp, r7
   144ba:	b006      	add	sp, #24
   144bc:	bd80      	pop	{r7, pc}
   144be:	46c0      	nop			; (mov r8, r8)
   144c0:	00014341 	.word	0x00014341
   144c4:	00014379 	.word	0x00014379
   144c8:	00014219 	.word	0x00014219
   144cc:	0001acbd 	.word	0x0001acbd
   144d0:	0001439d 	.word	0x0001439d
   144d4:	000143b1 	.word	0x000143b1
   144d8:	0001ba11 	.word	0x0001ba11
   144dc:	00014291 	.word	0x00014291
   144e0:	00014309 	.word	0x00014309

000144e4 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   144e4:	b580      	push	{r7, lr}
   144e6:	b086      	sub	sp, #24
   144e8:	af00      	add	r7, sp, #0
   144ea:	60f8      	str	r0, [r7, #12]
   144ec:	60b9      	str	r1, [r7, #8]
   144ee:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   144f0:	2300      	movs	r3, #0
   144f2:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   144f4:	2300      	movs	r3, #0
   144f6:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   144f8:	2396      	movs	r3, #150	; 0x96
   144fa:	005b      	lsls	r3, r3, #1
   144fc:	0018      	movs	r0, r3
   144fe:	4b24      	ldr	r3, [pc, #144]	; (14590 <I2cPingAddressWait+0xac>)
   14500:	4798      	blx	r3
   14502:	0003      	movs	r3, r0
   14504:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14506:	697b      	ldr	r3, [r7, #20]
   14508:	2b00      	cmp	r3, #0
   1450a:	d133      	bne.n	14574 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1450c:	2310      	movs	r3, #16
   1450e:	18fb      	adds	r3, r7, r3
   14510:	0018      	movs	r0, r3
   14512:	4b20      	ldr	r3, [pc, #128]	; (14594 <I2cPingAddressWait+0xb0>)
   14514:	4798      	blx	r3
   14516:	0003      	movs	r3, r0
   14518:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1451a:	697b      	ldr	r3, [r7, #20]
   1451c:	2b00      	cmp	r3, #0
   1451e:	d12b      	bne.n	14578 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14520:	68fb      	ldr	r3, [r7, #12]
   14522:	0018      	movs	r0, r3
   14524:	4b1c      	ldr	r3, [pc, #112]	; (14598 <I2cPingAddressWait+0xb4>)
   14526:	4798      	blx	r3
   14528:	0003      	movs	r3, r0
   1452a:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   1452c:	697b      	ldr	r3, [r7, #20]
   1452e:	2b00      	cmp	r3, #0
   14530:	d125      	bne.n	1457e <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14532:	693b      	ldr	r3, [r7, #16]
   14534:	687a      	ldr	r2, [r7, #4]
   14536:	0011      	movs	r1, r2
   14538:	0018      	movs	r0, r3
   1453a:	4b18      	ldr	r3, [pc, #96]	; (1459c <I2cPingAddressWait+0xb8>)
   1453c:	4798      	blx	r3
   1453e:	0003      	movs	r3, r0
   14540:	2b01      	cmp	r3, #1
   14542:	d113      	bne.n	1456c <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14544:	4b16      	ldr	r3, [pc, #88]	; (145a0 <I2cPingAddressWait+0xbc>)
   14546:	4798      	blx	r3
   14548:	1e03      	subs	r3, r0, #0
   1454a:	d006      	beq.n	1455a <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   1454c:	2000      	movs	r0, #0
   1454e:	4b15      	ldr	r3, [pc, #84]	; (145a4 <I2cPingAddressWait+0xc0>)
   14550:	4798      	blx	r3
            error = ERROR_ABORTED;
   14552:	2303      	movs	r3, #3
   14554:	425b      	negs	r3, r3
   14556:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14558:	e012      	b.n	14580 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   1455a:	68bb      	ldr	r3, [r7, #8]
   1455c:	0018      	movs	r0, r3
   1455e:	4b12      	ldr	r3, [pc, #72]	; (145a8 <I2cPingAddressWait+0xc4>)
   14560:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   14562:	4b12      	ldr	r3, [pc, #72]	; (145ac <I2cPingAddressWait+0xc8>)
   14564:	4798      	blx	r3
   14566:	0003      	movs	r3, r0
   14568:	617b      	str	r3, [r7, #20]
   1456a:	e006      	b.n	1457a <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   1456c:	2303      	movs	r3, #3
   1456e:	425b      	negs	r3, r3
   14570:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14572:	e005      	b.n	14580 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   14574:	46c0      	nop			; (mov r8, r8)
   14576:	e000      	b.n	1457a <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   14578:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   1457a:	697b      	ldr	r3, [r7, #20]
   1457c:	e003      	b.n	14586 <I2cPingAddressWait+0xa2>
        goto exitError0;
   1457e:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14580:	4b0a      	ldr	r3, [pc, #40]	; (145ac <I2cPingAddressWait+0xc8>)
   14582:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14584:	697b      	ldr	r3, [r7, #20]
}
   14586:	0018      	movs	r0, r3
   14588:	46bd      	mov	sp, r7
   1458a:	b006      	add	sp, #24
   1458c:	bd80      	pop	{r7, pc}
   1458e:	46c0      	nop			; (mov r8, r8)
   14590:	00014341 	.word	0x00014341
   14594:	00014379 	.word	0x00014379
   14598:	00014219 	.word	0x00014219
   1459c:	0001acbd 	.word	0x0001acbd
   145a0:	0001439d 	.word	0x0001439d
   145a4:	000143b1 	.word	0x000143b1
   145a8:	0001ba11 	.word	0x0001ba11
   145ac:	00014309 	.word	0x00014309

000145b0 <system_interrupt_enable>:
{
   145b0:	b580      	push	{r7, lr}
   145b2:	b082      	sub	sp, #8
   145b4:	af00      	add	r7, sp, #0
   145b6:	0002      	movs	r2, r0
   145b8:	1dfb      	adds	r3, r7, #7
   145ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   145bc:	4b06      	ldr	r3, [pc, #24]	; (145d8 <system_interrupt_enable+0x28>)
   145be:	1dfa      	adds	r2, r7, #7
   145c0:	7812      	ldrb	r2, [r2, #0]
   145c2:	0011      	movs	r1, r2
   145c4:	221f      	movs	r2, #31
   145c6:	400a      	ands	r2, r1
   145c8:	2101      	movs	r1, #1
   145ca:	4091      	lsls	r1, r2
   145cc:	000a      	movs	r2, r1
   145ce:	601a      	str	r2, [r3, #0]
}
   145d0:	46c0      	nop			; (mov r8, r8)
   145d2:	46bd      	mov	sp, r7
   145d4:	b002      	add	sp, #8
   145d6:	bd80      	pop	{r7, pc}
   145d8:	e000e100 	.word	0xe000e100

000145dc <adc_is_syncing>:
{
   145dc:	b580      	push	{r7, lr}
   145de:	b084      	sub	sp, #16
   145e0:	af00      	add	r7, sp, #0
   145e2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   145e4:	687b      	ldr	r3, [r7, #4]
   145e6:	681b      	ldr	r3, [r3, #0]
   145e8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   145ea:	68fb      	ldr	r3, [r7, #12]
   145ec:	7e5b      	ldrb	r3, [r3, #25]
   145ee:	b2db      	uxtb	r3, r3
   145f0:	b25b      	sxtb	r3, r3
   145f2:	2b00      	cmp	r3, #0
   145f4:	da01      	bge.n	145fa <adc_is_syncing+0x1e>
		return true;
   145f6:	2301      	movs	r3, #1
   145f8:	e000      	b.n	145fc <adc_is_syncing+0x20>
	return false;
   145fa:	2300      	movs	r3, #0
}
   145fc:	0018      	movs	r0, r3
   145fe:	46bd      	mov	sp, r7
   14600:	b004      	add	sp, #16
   14602:	bd80      	pop	{r7, pc}

00014604 <adc_get_status>:
{
   14604:	b580      	push	{r7, lr}
   14606:	b086      	sub	sp, #24
   14608:	af00      	add	r7, sp, #0
   1460a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1460c:	687b      	ldr	r3, [r7, #4]
   1460e:	681b      	ldr	r3, [r3, #0]
   14610:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
   14612:	693b      	ldr	r3, [r7, #16]
   14614:	7e1b      	ldrb	r3, [r3, #24]
   14616:	b2db      	uxtb	r3, r3
   14618:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
   1461a:	2300      	movs	r3, #0
   1461c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
   1461e:	68fb      	ldr	r3, [r7, #12]
   14620:	2201      	movs	r2, #1
   14622:	4013      	ands	r3, r2
   14624:	d003      	beq.n	1462e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   14626:	697b      	ldr	r3, [r7, #20]
   14628:	2201      	movs	r2, #1
   1462a:	4313      	orrs	r3, r2
   1462c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
   1462e:	68fb      	ldr	r3, [r7, #12]
   14630:	2204      	movs	r2, #4
   14632:	4013      	ands	r3, r2
   14634:	d003      	beq.n	1463e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   14636:	697b      	ldr	r3, [r7, #20]
   14638:	2202      	movs	r2, #2
   1463a:	4313      	orrs	r3, r2
   1463c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   1463e:	68fb      	ldr	r3, [r7, #12]
   14640:	2202      	movs	r2, #2
   14642:	4013      	ands	r3, r2
   14644:	d003      	beq.n	1464e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   14646:	697b      	ldr	r3, [r7, #20]
   14648:	2204      	movs	r2, #4
   1464a:	4313      	orrs	r3, r2
   1464c:	617b      	str	r3, [r7, #20]
	return status_flags;
   1464e:	697b      	ldr	r3, [r7, #20]
}
   14650:	0018      	movs	r0, r3
   14652:	46bd      	mov	sp, r7
   14654:	b006      	add	sp, #24
   14656:	bd80      	pop	{r7, pc}

00014658 <adc_clear_status>:
{
   14658:	b580      	push	{r7, lr}
   1465a:	b084      	sub	sp, #16
   1465c:	af00      	add	r7, sp, #0
   1465e:	6078      	str	r0, [r7, #4]
   14660:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
   14662:	687b      	ldr	r3, [r7, #4]
   14664:	681b      	ldr	r3, [r3, #0]
   14666:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
   14668:	2300      	movs	r3, #0
   1466a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
   1466c:	683b      	ldr	r3, [r7, #0]
   1466e:	2201      	movs	r2, #1
   14670:	4013      	ands	r3, r2
   14672:	d003      	beq.n	1467c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   14674:	68fb      	ldr	r3, [r7, #12]
   14676:	2201      	movs	r2, #1
   14678:	4313      	orrs	r3, r2
   1467a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
   1467c:	683b      	ldr	r3, [r7, #0]
   1467e:	2202      	movs	r2, #2
   14680:	4013      	ands	r3, r2
   14682:	d003      	beq.n	1468c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   14684:	68fb      	ldr	r3, [r7, #12]
   14686:	2204      	movs	r2, #4
   14688:	4313      	orrs	r3, r2
   1468a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
   1468c:	683b      	ldr	r3, [r7, #0]
   1468e:	2204      	movs	r2, #4
   14690:	4013      	ands	r3, r2
   14692:	d003      	beq.n	1469c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   14694:	68fb      	ldr	r3, [r7, #12]
   14696:	2202      	movs	r2, #2
   14698:	4313      	orrs	r3, r2
   1469a:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
   1469c:	68fb      	ldr	r3, [r7, #12]
   1469e:	b2da      	uxtb	r2, r3
   146a0:	68bb      	ldr	r3, [r7, #8]
   146a2:	761a      	strb	r2, [r3, #24]
}
   146a4:	46c0      	nop			; (mov r8, r8)
   146a6:	46bd      	mov	sp, r7
   146a8:	b004      	add	sp, #16
   146aa:	bd80      	pop	{r7, pc}

000146ac <adc_enable>:
{
   146ac:	b580      	push	{r7, lr}
   146ae:	b084      	sub	sp, #16
   146b0:	af00      	add	r7, sp, #0
   146b2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   146b4:	687b      	ldr	r3, [r7, #4]
   146b6:	681b      	ldr	r3, [r3, #0]
   146b8:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   146ba:	46c0      	nop			; (mov r8, r8)
   146bc:	687b      	ldr	r3, [r7, #4]
   146be:	0018      	movs	r0, r3
   146c0:	4b10      	ldr	r3, [pc, #64]	; (14704 <adc_enable+0x58>)
   146c2:	4798      	blx	r3
   146c4:	1e03      	subs	r3, r0, #0
   146c6:	d1f9      	bne.n	146bc <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   146c8:	2017      	movs	r0, #23
   146ca:	4b0f      	ldr	r3, [pc, #60]	; (14708 <adc_enable+0x5c>)
   146cc:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   146ce:	68fb      	ldr	r3, [r7, #12]
   146d0:	220f      	movs	r2, #15
   146d2:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   146d4:	68fb      	ldr	r3, [r7, #12]
   146d6:	220f      	movs	r2, #15
   146d8:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   146da:	68fb      	ldr	r3, [r7, #12]
   146dc:	781b      	ldrb	r3, [r3, #0]
   146de:	b2db      	uxtb	r3, r3
   146e0:	2202      	movs	r2, #2
   146e2:	4313      	orrs	r3, r2
   146e4:	b2da      	uxtb	r2, r3
   146e6:	68fb      	ldr	r3, [r7, #12]
   146e8:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
   146ea:	46c0      	nop			; (mov r8, r8)
   146ec:	687b      	ldr	r3, [r7, #4]
   146ee:	0018      	movs	r0, r3
   146f0:	4b04      	ldr	r3, [pc, #16]	; (14704 <adc_enable+0x58>)
   146f2:	4798      	blx	r3
   146f4:	1e03      	subs	r3, r0, #0
   146f6:	d1f9      	bne.n	146ec <adc_enable+0x40>
	return STATUS_OK;
   146f8:	2300      	movs	r3, #0
}
   146fa:	0018      	movs	r0, r3
   146fc:	46bd      	mov	sp, r7
   146fe:	b004      	add	sp, #16
   14700:	bd80      	pop	{r7, pc}
   14702:	46c0      	nop			; (mov r8, r8)
   14704:	000145dd 	.word	0x000145dd
   14708:	000145b1 	.word	0x000145b1

0001470c <adc_start_conversion>:
{
   1470c:	b580      	push	{r7, lr}
   1470e:	b084      	sub	sp, #16
   14710:	af00      	add	r7, sp, #0
   14712:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   14714:	687b      	ldr	r3, [r7, #4]
   14716:	681b      	ldr	r3, [r3, #0]
   14718:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1471a:	46c0      	nop			; (mov r8, r8)
   1471c:	687b      	ldr	r3, [r7, #4]
   1471e:	0018      	movs	r0, r3
   14720:	4b0b      	ldr	r3, [pc, #44]	; (14750 <adc_start_conversion+0x44>)
   14722:	4798      	blx	r3
   14724:	1e03      	subs	r3, r0, #0
   14726:	d1f9      	bne.n	1471c <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   14728:	68fb      	ldr	r3, [r7, #12]
   1472a:	7b1b      	ldrb	r3, [r3, #12]
   1472c:	b2db      	uxtb	r3, r3
   1472e:	2202      	movs	r2, #2
   14730:	4313      	orrs	r3, r2
   14732:	b2da      	uxtb	r2, r3
   14734:	68fb      	ldr	r3, [r7, #12]
   14736:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   14738:	46c0      	nop			; (mov r8, r8)
   1473a:	687b      	ldr	r3, [r7, #4]
   1473c:	0018      	movs	r0, r3
   1473e:	4b04      	ldr	r3, [pc, #16]	; (14750 <adc_start_conversion+0x44>)
   14740:	4798      	blx	r3
   14742:	1e03      	subs	r3, r0, #0
   14744:	d1f9      	bne.n	1473a <adc_start_conversion+0x2e>
}
   14746:	46c0      	nop			; (mov r8, r8)
   14748:	46bd      	mov	sp, r7
   1474a:	b004      	add	sp, #16
   1474c:	bd80      	pop	{r7, pc}
   1474e:	46c0      	nop			; (mov r8, r8)
   14750:	000145dd 	.word	0x000145dd

00014754 <adc_read>:
{
   14754:	b580      	push	{r7, lr}
   14756:	b084      	sub	sp, #16
   14758:	af00      	add	r7, sp, #0
   1475a:	6078      	str	r0, [r7, #4]
   1475c:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   1475e:	687b      	ldr	r3, [r7, #4]
   14760:	0018      	movs	r0, r3
   14762:	4b18      	ldr	r3, [pc, #96]	; (147c4 <adc_read+0x70>)
   14764:	4798      	blx	r3
   14766:	0002      	movs	r2, r0
   14768:	2301      	movs	r3, #1
   1476a:	4013      	ands	r3, r2
   1476c:	d101      	bne.n	14772 <adc_read+0x1e>
		return STATUS_BUSY;
   1476e:	2305      	movs	r3, #5
   14770:	e023      	b.n	147ba <adc_read+0x66>
	Adc *const adc_module = module_inst->hw;
   14772:	687b      	ldr	r3, [r7, #4]
   14774:	681b      	ldr	r3, [r3, #0]
   14776:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   14778:	46c0      	nop			; (mov r8, r8)
   1477a:	687b      	ldr	r3, [r7, #4]
   1477c:	0018      	movs	r0, r3
   1477e:	4b12      	ldr	r3, [pc, #72]	; (147c8 <adc_read+0x74>)
   14780:	4798      	blx	r3
   14782:	1e03      	subs	r3, r0, #0
   14784:	d1f9      	bne.n	1477a <adc_read+0x26>
	*result = adc_module->RESULT.reg;
   14786:	68fb      	ldr	r3, [r7, #12]
   14788:	8b5b      	ldrh	r3, [r3, #26]
   1478a:	b29a      	uxth	r2, r3
   1478c:	683b      	ldr	r3, [r7, #0]
   1478e:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   14790:	687b      	ldr	r3, [r7, #4]
   14792:	2101      	movs	r1, #1
   14794:	0018      	movs	r0, r3
   14796:	4b0d      	ldr	r3, [pc, #52]	; (147cc <adc_read+0x78>)
   14798:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   1479a:	687b      	ldr	r3, [r7, #4]
   1479c:	0018      	movs	r0, r3
   1479e:	4b09      	ldr	r3, [pc, #36]	; (147c4 <adc_read+0x70>)
   147a0:	4798      	blx	r3
   147a2:	0002      	movs	r2, r0
   147a4:	2304      	movs	r3, #4
   147a6:	4013      	ands	r3, r2
   147a8:	d006      	beq.n	147b8 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   147aa:	687b      	ldr	r3, [r7, #4]
   147ac:	2104      	movs	r1, #4
   147ae:	0018      	movs	r0, r3
   147b0:	4b06      	ldr	r3, [pc, #24]	; (147cc <adc_read+0x78>)
   147b2:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   147b4:	231e      	movs	r3, #30
   147b6:	e000      	b.n	147ba <adc_read+0x66>
	return STATUS_OK;
   147b8:	2300      	movs	r3, #0
}
   147ba:	0018      	movs	r0, r3
   147bc:	46bd      	mov	sp, r7
   147be:	b004      	add	sp, #16
   147c0:	bd80      	pop	{r7, pc}
   147c2:	46c0      	nop			; (mov r8, r8)
   147c4:	00014605 	.word	0x00014605
   147c8:	000145dd 	.word	0x000145dd
   147cc:	00014659 	.word	0x00014659

000147d0 <mic_init>:
 * @brief		Initialises the ADC module
 * @details		Initialises the ADC module
 * @note		Call from main once to initialise hardware.
 */
void mic_init(void)
{
   147d0:	b580      	push	{r7, lr}
   147d2:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_adc();
   147d4:	4b02      	ldr	r3, [pc, #8]	; (147e0 <mic_init+0x10>)
   147d6:	4798      	blx	r3
}
   147d8:	46c0      	nop			; (mov r8, r8)
   147da:	46bd      	mov	sp, r7
   147dc:	bd80      	pop	{r7, pc}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	000147e5 	.word	0x000147e5

000147e4 <configure_adc>:
 * @details		Configure the ADC module
 * @note		Call from microphone intialisation {mic_init()}
 *				once to configure the ADC instance.
 */
void configure_adc(void)
{
   147e4:	b580      	push	{r7, lr}
   147e6:	b08c      	sub	sp, #48	; 0x30
   147e8:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
   147ea:	003b      	movs	r3, r7
   147ec:	0018      	movs	r0, r3
   147ee:	4b08      	ldr	r3, [pc, #32]	; (14810 <configure_adc+0x2c>)
   147f0:	4798      	blx	r3
	#if (SAMC21)
	adc_init(&adc_instance, ADC1, &config_adc);
	#else
	adc_init(&adc_instance, ADC, &config_adc);
   147f2:	003a      	movs	r2, r7
   147f4:	4907      	ldr	r1, [pc, #28]	; (14814 <configure_adc+0x30>)
   147f6:	4b08      	ldr	r3, [pc, #32]	; (14818 <configure_adc+0x34>)
   147f8:	0018      	movs	r0, r3
   147fa:	4b08      	ldr	r3, [pc, #32]	; (1481c <configure_adc+0x38>)
   147fc:	4798      	blx	r3
	#endif
	adc_enable(&adc_instance);
   147fe:	4b06      	ldr	r3, [pc, #24]	; (14818 <configure_adc+0x34>)
   14800:	0018      	movs	r0, r3
   14802:	4b07      	ldr	r3, [pc, #28]	; (14820 <configure_adc+0x3c>)
   14804:	4798      	blx	r3
}
   14806:	46c0      	nop			; (mov r8, r8)
   14808:	46bd      	mov	sp, r7
   1480a:	b00c      	add	sp, #48	; 0x30
   1480c:	bd80      	pop	{r7, pc}
   1480e:	46c0      	nop			; (mov r8, r8)
   14810:	00012219 	.word	0x00012219
   14814:	42004000 	.word	0x42004000
   14818:	20004604 	.word	0x20004604
   1481c:	00012869 	.word	0x00012869
   14820:	000146ad 	.word	0x000146ad

00014824 <mic_read>:
 * @details		Read converted analog data from MEMs microphone
 * @note		Will be called from from CLI when the command is
 *				entered in console; command is 'mic'
 */
int32_t mic_read(void)
{
   14824:	b580      	push	{r7, lr}
   14826:	b086      	sub	sp, #24
   14828:	af00      	add	r7, sp, #0
	adc_start_conversion(&adc_instance);
   1482a:	4b0e      	ldr	r3, [pc, #56]	; (14864 <mic_read+0x40>)
   1482c:	0018      	movs	r0, r3
   1482e:	4b0e      	ldr	r3, [pc, #56]	; (14868 <mic_read+0x44>)
   14830:	4798      	blx	r3
	uint16_t mic_data;
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &mic_data) == STATUS_BUSY);
   14832:	2316      	movs	r3, #22
   14834:	18fa      	adds	r2, r7, r3
   14836:	4b0b      	ldr	r3, [pc, #44]	; (14864 <mic_read+0x40>)
   14838:	0011      	movs	r1, r2
   1483a:	0018      	movs	r0, r3
   1483c:	4b0b      	ldr	r3, [pc, #44]	; (1486c <mic_read+0x48>)
   1483e:	4798      	blx	r3
   14840:	0003      	movs	r3, r0
   14842:	2b05      	cmp	r3, #5
   14844:	d0f5      	beq.n	14832 <mic_read+0xe>
	char buff[20];
	//snprintf(buff, 20, "Mic data: %d\r\n", mic_data);
	//SerialConsoleWriteString(buff);
	vTaskDelay(1000);
   14846:	23fa      	movs	r3, #250	; 0xfa
   14848:	009b      	lsls	r3, r3, #2
   1484a:	0018      	movs	r0, r3
   1484c:	4b08      	ldr	r3, [pc, #32]	; (14870 <mic_read+0x4c>)
   1484e:	4798      	blx	r3
	return WifiAddMicDataToQueue(&mic_data);
   14850:	2316      	movs	r3, #22
   14852:	18fb      	adds	r3, r7, r3
   14854:	0018      	movs	r0, r3
   14856:	4b07      	ldr	r3, [pc, #28]	; (14874 <mic_read+0x50>)
   14858:	4798      	blx	r3
   1485a:	0003      	movs	r3, r0
}
   1485c:	0018      	movs	r0, r3
   1485e:	46bd      	mov	sp, r7
   14860:	b006      	add	sp, #24
   14862:	bd80      	pop	{r7, pc}
   14864:	20004604 	.word	0x20004604
   14868:	0001470d 	.word	0x0001470d
   1486c:	00014755 	.word	0x00014755
   14870:	0001ba11 	.word	0x0001ba11
   14874:	00016d59 	.word	0x00016d59

00014878 <system_interrupt_enable>:
{
   14878:	b580      	push	{r7, lr}
   1487a:	b082      	sub	sp, #8
   1487c:	af00      	add	r7, sp, #0
   1487e:	0002      	movs	r2, r0
   14880:	1dfb      	adds	r3, r7, #7
   14882:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14884:	4b06      	ldr	r3, [pc, #24]	; (148a0 <system_interrupt_enable+0x28>)
   14886:	1dfa      	adds	r2, r7, #7
   14888:	7812      	ldrb	r2, [r2, #0]
   1488a:	0011      	movs	r1, r2
   1488c:	221f      	movs	r2, #31
   1488e:	400a      	ands	r2, r1
   14890:	2101      	movs	r1, #1
   14892:	4091      	lsls	r1, r2
   14894:	000a      	movs	r2, r1
   14896:	601a      	str	r2, [r3, #0]
}
   14898:	46c0      	nop			; (mov r8, r8)
   1489a:	46bd      	mov	sp, r7
   1489c:	b002      	add	sp, #8
   1489e:	bd80      	pop	{r7, pc}
   148a0:	e000e100 	.word	0xe000e100

000148a4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   148a4:	b580      	push	{r7, lr}
   148a6:	b084      	sub	sp, #16
   148a8:	af00      	add	r7, sp, #0
   148aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   148ac:	687b      	ldr	r3, [r7, #4]
   148ae:	681b      	ldr	r3, [r3, #0]
   148b0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   148b2:	68fb      	ldr	r3, [r7, #12]
   148b4:	69db      	ldr	r3, [r3, #28]
   148b6:	1e5a      	subs	r2, r3, #1
   148b8:	4193      	sbcs	r3, r2
   148ba:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   148bc:	0018      	movs	r0, r3
   148be:	46bd      	mov	sp, r7
   148c0:	b004      	add	sp, #16
   148c2:	bd80      	pop	{r7, pc}

000148c4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   148c4:	b580      	push	{r7, lr}
   148c6:	b082      	sub	sp, #8
   148c8:	af00      	add	r7, sp, #0
   148ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   148cc:	46c0      	nop			; (mov r8, r8)
   148ce:	687b      	ldr	r3, [r7, #4]
   148d0:	0018      	movs	r0, r3
   148d2:	4b04      	ldr	r3, [pc, #16]	; (148e4 <_usart_wait_for_sync+0x20>)
   148d4:	4798      	blx	r3
   148d6:	1e03      	subs	r3, r0, #0
   148d8:	d1f9      	bne.n	148ce <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   148da:	46c0      	nop			; (mov r8, r8)
   148dc:	46bd      	mov	sp, r7
   148de:	b002      	add	sp, #8
   148e0:	bd80      	pop	{r7, pc}
   148e2:	46c0      	nop			; (mov r8, r8)
   148e4:	000148a5 	.word	0x000148a5

000148e8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   148e8:	b580      	push	{r7, lr}
   148ea:	b082      	sub	sp, #8
   148ec:	af00      	add	r7, sp, #0
   148ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   148f0:	687b      	ldr	r3, [r7, #4]
   148f2:	2280      	movs	r2, #128	; 0x80
   148f4:	05d2      	lsls	r2, r2, #23
   148f6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   148f8:	687b      	ldr	r3, [r7, #4]
   148fa:	2200      	movs	r2, #0
   148fc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   148fe:	687b      	ldr	r3, [r7, #4]
   14900:	22ff      	movs	r2, #255	; 0xff
   14902:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   14904:	687b      	ldr	r3, [r7, #4]
   14906:	2200      	movs	r2, #0
   14908:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1490a:	687b      	ldr	r3, [r7, #4]
   1490c:	2200      	movs	r2, #0
   1490e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   14910:	687b      	ldr	r3, [r7, #4]
   14912:	2296      	movs	r2, #150	; 0x96
   14914:	0192      	lsls	r2, r2, #6
   14916:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   14918:	687b      	ldr	r3, [r7, #4]
   1491a:	2224      	movs	r2, #36	; 0x24
   1491c:	2101      	movs	r1, #1
   1491e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   14920:	687b      	ldr	r3, [r7, #4]
   14922:	2225      	movs	r2, #37	; 0x25
   14924:	2101      	movs	r1, #1
   14926:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   14928:	687b      	ldr	r3, [r7, #4]
   1492a:	2226      	movs	r2, #38	; 0x26
   1492c:	2100      	movs	r1, #0
   1492e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   14930:	687b      	ldr	r3, [r7, #4]
   14932:	2227      	movs	r2, #39	; 0x27
   14934:	2100      	movs	r1, #0
   14936:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   14938:	687b      	ldr	r3, [r7, #4]
   1493a:	2200      	movs	r2, #0
   1493c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1493e:	687b      	ldr	r3, [r7, #4]
   14940:	2288      	movs	r2, #136	; 0x88
   14942:	0352      	lsls	r2, r2, #13
   14944:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   14946:	687b      	ldr	r3, [r7, #4]
   14948:	222c      	movs	r2, #44	; 0x2c
   1494a:	2100      	movs	r1, #0
   1494c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1494e:	687b      	ldr	r3, [r7, #4]
   14950:	222d      	movs	r2, #45	; 0x2d
   14952:	2100      	movs	r1, #0
   14954:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14956:	687b      	ldr	r3, [r7, #4]
   14958:	2200      	movs	r2, #0
   1495a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1495c:	687b      	ldr	r3, [r7, #4]
   1495e:	2200      	movs	r2, #0
   14960:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   14962:	687b      	ldr	r3, [r7, #4]
   14964:	2200      	movs	r2, #0
   14966:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   14968:	687b      	ldr	r3, [r7, #4]
   1496a:	2200      	movs	r2, #0
   1496c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1496e:	687b      	ldr	r3, [r7, #4]
   14970:	2200      	movs	r2, #0
   14972:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   14974:	687b      	ldr	r3, [r7, #4]
   14976:	2200      	movs	r2, #0
   14978:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1497a:	687b      	ldr	r3, [r7, #4]
   1497c:	2200      	movs	r2, #0
   1497e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   14980:	687b      	ldr	r3, [r7, #4]
   14982:	2200      	movs	r2, #0
   14984:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   14986:	687b      	ldr	r3, [r7, #4]
   14988:	2200      	movs	r2, #0
   1498a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1498c:	687b      	ldr	r3, [r7, #4]
   1498e:	2200      	movs	r2, #0
   14990:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   14992:	687b      	ldr	r3, [r7, #4]
   14994:	2213      	movs	r2, #19
   14996:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   14998:	687b      	ldr	r3, [r7, #4]
   1499a:	2200      	movs	r2, #0
   1499c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1499e:	46c0      	nop			; (mov r8, r8)
   149a0:	46bd      	mov	sp, r7
   149a2:	b002      	add	sp, #8
   149a4:	bd80      	pop	{r7, pc}
	...

000149a8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   149a8:	b580      	push	{r7, lr}
   149aa:	b084      	sub	sp, #16
   149ac:	af00      	add	r7, sp, #0
   149ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   149b0:	687b      	ldr	r3, [r7, #4]
   149b2:	681b      	ldr	r3, [r3, #0]
   149b4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   149b6:	687b      	ldr	r3, [r7, #4]
   149b8:	681b      	ldr	r3, [r3, #0]
   149ba:	0018      	movs	r0, r3
   149bc:	4b09      	ldr	r3, [pc, #36]	; (149e4 <usart_enable+0x3c>)
   149be:	4798      	blx	r3
   149c0:	0003      	movs	r3, r0
   149c2:	0018      	movs	r0, r3
   149c4:	4b08      	ldr	r3, [pc, #32]	; (149e8 <usart_enable+0x40>)
   149c6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   149c8:	687b      	ldr	r3, [r7, #4]
   149ca:	0018      	movs	r0, r3
   149cc:	4b07      	ldr	r3, [pc, #28]	; (149ec <usart_enable+0x44>)
   149ce:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   149d0:	68fb      	ldr	r3, [r7, #12]
   149d2:	681b      	ldr	r3, [r3, #0]
   149d4:	2202      	movs	r2, #2
   149d6:	431a      	orrs	r2, r3
   149d8:	68fb      	ldr	r3, [r7, #12]
   149da:	601a      	str	r2, [r3, #0]
}
   149dc:	46c0      	nop			; (mov r8, r8)
   149de:	46bd      	mov	sp, r7
   149e0:	b004      	add	sp, #16
   149e2:	bd80      	pop	{r7, pc}
   149e4:	00026f79 	.word	0x00026f79
   149e8:	00014879 	.word	0x00014879
   149ec:	000148c5 	.word	0x000148c5

000149f0 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   149f0:	b580      	push	{r7, lr}
   149f2:	b082      	sub	sp, #8
   149f4:	af00      	add	r7, sp, #0
   149f6:	6078      	str	r0, [r7, #4]
   149f8:	000a      	movs	r2, r1
   149fa:	1cfb      	adds	r3, r7, #3
   149fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   149fe:	687b      	ldr	r3, [r7, #4]
   14a00:	2231      	movs	r2, #49	; 0x31
   14a02:	5c9b      	ldrb	r3, [r3, r2]
   14a04:	b25a      	sxtb	r2, r3
   14a06:	1cfb      	adds	r3, r7, #3
   14a08:	781b      	ldrb	r3, [r3, #0]
   14a0a:	2101      	movs	r1, #1
   14a0c:	4099      	lsls	r1, r3
   14a0e:	000b      	movs	r3, r1
   14a10:	b25b      	sxtb	r3, r3
   14a12:	4313      	orrs	r3, r2
   14a14:	b25b      	sxtb	r3, r3
   14a16:	b2d9      	uxtb	r1, r3
   14a18:	687b      	ldr	r3, [r7, #4]
   14a1a:	2231      	movs	r2, #49	; 0x31
   14a1c:	5499      	strb	r1, [r3, r2]

}
   14a1e:	46c0      	nop			; (mov r8, r8)
   14a20:	46bd      	mov	sp, r7
   14a22:	b002      	add	sp, #8
   14a24:	bd80      	pop	{r7, pc}
	...

00014a28 <npkUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void npkUsartWritecallback(struct usart_module *const usart_module)
{
   14a28:	b580      	push	{r7, lr}
   14a2a:	b084      	sub	sp, #16
   14a2c:	af00      	add	r7, sp, #0
   14a2e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14a30:	2300      	movs	r3, #0
   14a32:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorNPKSemaphoreHandle, &xHigherPriorityTaskWoken);
   14a34:	4b09      	ldr	r3, [pc, #36]	; (14a5c <npkUsartWritecallback+0x34>)
   14a36:	681b      	ldr	r3, [r3, #0]
   14a38:	220c      	movs	r2, #12
   14a3a:	18ba      	adds	r2, r7, r2
   14a3c:	0011      	movs	r1, r2
   14a3e:	0018      	movs	r0, r3
   14a40:	4b07      	ldr	r3, [pc, #28]	; (14a60 <npkUsartWritecallback+0x38>)
   14a42:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14a44:	68fb      	ldr	r3, [r7, #12]
   14a46:	2b00      	cmp	r3, #0
   14a48:	d003      	beq.n	14a52 <npkUsartWritecallback+0x2a>
   14a4a:	4b06      	ldr	r3, [pc, #24]	; (14a64 <npkUsartWritecallback+0x3c>)
   14a4c:	2280      	movs	r2, #128	; 0x80
   14a4e:	0552      	lsls	r2, r2, #21
   14a50:	601a      	str	r2, [r3, #0]
}
   14a52:	46c0      	nop			; (mov r8, r8)
   14a54:	46bd      	mov	sp, r7
   14a56:	b004      	add	sp, #16
   14a58:	bd80      	pop	{r7, pc}
   14a5a:	46c0      	nop			; (mov r8, r8)
   14a5c:	20004698 	.word	0x20004698
   14a60:	0001a635 	.word	0x0001a635
   14a64:	e000ed04 	.word	0xe000ed04

00014a68 <npkUsartReadcallback>:
// Callback for when we finish writing characters to UART

void npkUsartReadcallback(struct usart_module *const usart_module)
{
   14a68:	b580      	push	{r7, lr}
   14a6a:	b084      	sub	sp, #16
   14a6c:	af00      	add	r7, sp, #0
   14a6e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14a70:	2300      	movs	r3, #0
   14a72:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorNPKSemaphoreHandle, &xHigherPriorityTaskWoken);
   14a74:	4b09      	ldr	r3, [pc, #36]	; (14a9c <npkUsartReadcallback+0x34>)
   14a76:	681b      	ldr	r3, [r3, #0]
   14a78:	220c      	movs	r2, #12
   14a7a:	18ba      	adds	r2, r7, r2
   14a7c:	0011      	movs	r1, r2
   14a7e:	0018      	movs	r0, r3
   14a80:	4b07      	ldr	r3, [pc, #28]	; (14aa0 <npkUsartReadcallback+0x38>)
   14a82:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14a84:	68fb      	ldr	r3, [r7, #12]
   14a86:	2b00      	cmp	r3, #0
   14a88:	d003      	beq.n	14a92 <npkUsartReadcallback+0x2a>
   14a8a:	4b06      	ldr	r3, [pc, #24]	; (14aa4 <npkUsartReadcallback+0x3c>)
   14a8c:	2280      	movs	r2, #128	; 0x80
   14a8e:	0552      	lsls	r2, r2, #21
   14a90:	601a      	str	r2, [r3, #0]
}
   14a92:	46c0      	nop			; (mov r8, r8)
   14a94:	46bd      	mov	sp, r7
   14a96:	b004      	add	sp, #16
   14a98:	bd80      	pop	{r7, pc}
   14a9a:	46c0      	nop			; (mov r8, r8)
   14a9c:	20004698 	.word	0x20004698
   14aa0:	0001a635 	.word	0x0001a635
   14aa4:	e000ed04 	.word	0xe000ed04

00014aa8 <InitialiseNPKSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitialiseNPKSensor(void)
{
   14aa8:	b580      	push	{r7, lr}
   14aaa:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_usart();
   14aac:	4b10      	ldr	r3, [pc, #64]	; (14af0 <InitialiseNPKSensor+0x48>)
   14aae:	4798      	blx	r3
    configure_usart_callbacks();
   14ab0:	4b10      	ldr	r3, [pc, #64]	; (14af4 <InitialiseNPKSensor+0x4c>)
   14ab2:	4798      	blx	r3

    sensorNPKMutexHandle = xSemaphoreCreateMutex();
   14ab4:	2001      	movs	r0, #1
   14ab6:	4b10      	ldr	r3, [pc, #64]	; (14af8 <InitialiseNPKSensor+0x50>)
   14ab8:	4798      	blx	r3
   14aba:	0002      	movs	r2, r0
   14abc:	4b0f      	ldr	r3, [pc, #60]	; (14afc <InitialiseNPKSensor+0x54>)
   14abe:	601a      	str	r2, [r3, #0]
    sensorNPKSemaphoreHandle = xSemaphoreCreateBinary();
   14ac0:	2203      	movs	r2, #3
   14ac2:	2100      	movs	r1, #0
   14ac4:	2001      	movs	r0, #1
   14ac6:	4b0e      	ldr	r3, [pc, #56]	; (14b00 <InitialiseNPKSensor+0x58>)
   14ac8:	4798      	blx	r3
   14aca:	0002      	movs	r2, r0
   14acc:	4b0d      	ldr	r3, [pc, #52]	; (14b04 <InitialiseNPKSensor+0x5c>)
   14ace:	601a      	str	r2, [r3, #0]

    if (NULL == sensorNPKMutexHandle || NULL == sensorNPKSemaphoreHandle) {
   14ad0:	4b0a      	ldr	r3, [pc, #40]	; (14afc <InitialiseNPKSensor+0x54>)
   14ad2:	681b      	ldr	r3, [r3, #0]
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	d003      	beq.n	14ae0 <InitialiseNPKSensor+0x38>
   14ad8:	4b0a      	ldr	r3, [pc, #40]	; (14b04 <InitialiseNPKSensor+0x5c>)
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	2b00      	cmp	r3, #0
   14ade:	d103      	bne.n	14ae8 <InitialiseNPKSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialise soil NPK Sensor!");
   14ae0:	4b09      	ldr	r3, [pc, #36]	; (14b08 <InitialiseNPKSensor+0x60>)
   14ae2:	0018      	movs	r0, r3
   14ae4:	4b09      	ldr	r3, [pc, #36]	; (14b0c <InitialiseNPKSensor+0x64>)
   14ae6:	4798      	blx	r3
    }
}
   14ae8:	46c0      	nop			; (mov r8, r8)
   14aea:	46bd      	mov	sp, r7
   14aec:	bd80      	pop	{r7, pc}
   14aee:	46c0      	nop			; (mov r8, r8)
   14af0:	00014c61 	.word	0x00014c61
   14af4:	00014cd9 	.word	0x00014cd9
   14af8:	00019f6d 	.word	0x00019f6d
   14afc:	20004660 	.word	0x20004660
   14b00:	00019d05 	.word	0x00019d05
   14b04:	20004698 	.word	0x20004698
   14b08:	00035b54 	.word	0x00035b54
   14b0c:	0001d665 	.word	0x0001d665

00014b10 <NPKSensorGetNitrogen>:
 * @fn			int32_t NPKSensorGetNitrogen (uint16_t *nitrogen, const TickType_t xMaxBlockTime)
 * @brief		Gets the NPK data from the soil NPK sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t NPKSensorGetNitrogen(uint16_t *nitrogen, const TickType_t xMaxBlockTime)
{
   14b10:	b590      	push	{r4, r7, lr}
   14b12:	b095      	sub	sp, #84	; 0x54
   14b14:	af00      	add	r7, sp, #0
   14b16:	6078      	str	r0, [r7, #4]
   14b18:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   14b1a:	2300      	movs	r3, #0
   14b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	char buf[64];

    // 1. Get MUTEX. NPKSensorGetMutex. If we cant get it, goto
    error = NPKSensorGetMutex(WAIT_I2C_LINE_MS);
   14b1e:	2396      	movs	r3, #150	; 0x96
   14b20:	005b      	lsls	r3, r3, #1
   14b22:	0018      	movs	r0, r3
   14b24:	4b3f      	ldr	r3, [pc, #252]	; (14c24 <NPKSensorGetNitrogen+0x114>)
   14b26:	4798      	blx	r3
   14b28:	0003      	movs	r3, r0
   14b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (ERROR_NONE != error) goto exitf;
   14b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14b2e:	2b00      	cmp	r3, #0
   14b30:	d16e      	bne.n	14c10 <NPKSensorGetNitrogen+0x100>
	snprintf((char *) buf, sizeof(buf), "After mutex: %d\r\n",error);
   14b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14b34:	4a3c      	ldr	r2, [pc, #240]	; (14c28 <NPKSensorGetNitrogen+0x118>)
   14b36:	2108      	movs	r1, #8
   14b38:	1878      	adds	r0, r7, r1
   14b3a:	2140      	movs	r1, #64	; 0x40
   14b3c:	4c3b      	ldr	r4, [pc, #236]	; (14c2c <NPKSensorGetNitrogen+0x11c>)
   14b3e:	47a0      	blx	r4
	SerialConsoleWriteString(buf);
   14b40:	2308      	movs	r3, #8
   14b42:	18fb      	adds	r3, r7, r3
   14b44:	0018      	movs	r0, r3
   14b46:	4b3a      	ldr	r3, [pc, #232]	; (14c30 <NPKSensorGetNitrogen+0x120>)
   14b48:	4798      	blx	r3

    //---2. Initiate sending data. First populate TX with the nitrogen command. Use usart_write_buffer_job to transmit 1 character
    for (uint8_t i = 0; i < 8; i++) {
   14b4a:	234b      	movs	r3, #75	; 0x4b
   14b4c:	18fb      	adds	r3, r7, r3
   14b4e:	2200      	movs	r2, #0
   14b50:	701a      	strb	r2, [r3, #0]
   14b52:	e010      	b.n	14b76 <NPKSensorGetNitrogen+0x66>
	    npkTx[i] = NITROGEN[i];
   14b54:	234b      	movs	r3, #75	; 0x4b
   14b56:	18fb      	adds	r3, r7, r3
   14b58:	781b      	ldrb	r3, [r3, #0]
   14b5a:	224b      	movs	r2, #75	; 0x4b
   14b5c:	18ba      	adds	r2, r7, r2
   14b5e:	7812      	ldrb	r2, [r2, #0]
   14b60:	4934      	ldr	r1, [pc, #208]	; (14c34 <NPKSensorGetNitrogen+0x124>)
   14b62:	5c89      	ldrb	r1, [r1, r2]
   14b64:	4a34      	ldr	r2, [pc, #208]	; (14c38 <NPKSensorGetNitrogen+0x128>)
   14b66:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 8; i++) {
   14b68:	234b      	movs	r3, #75	; 0x4b
   14b6a:	18fb      	adds	r3, r7, r3
   14b6c:	781a      	ldrb	r2, [r3, #0]
   14b6e:	234b      	movs	r3, #75	; 0x4b
   14b70:	18fb      	adds	r3, r7, r3
   14b72:	3201      	adds	r2, #1
   14b74:	701a      	strb	r2, [r3, #0]
   14b76:	234b      	movs	r3, #75	; 0x4b
   14b78:	18fb      	adds	r3, r7, r3
   14b7a:	781b      	ldrb	r3, [r3, #0]
   14b7c:	2b07      	cmp	r3, #7
   14b7e:	d9e9      	bls.n	14b54 <NPKSensorGetNitrogen+0x44>
    }
	//npkTx[8] = NITROGEN;
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_npk, (uint8_t *)&npkTx, 8)) {
   14b80:	492d      	ldr	r1, [pc, #180]	; (14c38 <NPKSensorGetNitrogen+0x128>)
   14b82:	4b2e      	ldr	r3, [pc, #184]	; (14c3c <NPKSensorGetNitrogen+0x12c>)
   14b84:	2208      	movs	r2, #8
   14b86:	0018      	movs	r0, r3
   14b88:	4b2d      	ldr	r3, [pc, #180]	; (14c40 <NPKSensorGetNitrogen+0x130>)
   14b8a:	4798      	blx	r3
   14b8c:	1e03      	subs	r3, r0, #0
   14b8e:	d141      	bne.n	14c14 <NPKSensorGetNitrogen+0x104>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorNPKSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14b90:	4b2c      	ldr	r3, [pc, #176]	; (14c44 <NPKSensorGetNitrogen+0x134>)
   14b92:	681b      	ldr	r3, [r3, #0]
   14b94:	683a      	ldr	r2, [r7, #0]
   14b96:	0011      	movs	r1, r2
   14b98:	0018      	movs	r0, r3
   14b9a:	4b2b      	ldr	r3, [pc, #172]	; (14c48 <NPKSensorGetNitrogen+0x138>)
   14b9c:	4798      	blx	r3
   14b9e:	0003      	movs	r3, r0
   14ba0:	2b01      	cmp	r3, #1
   14ba2:	d003      	beq.n	14bac <NPKSensorGetNitrogen+0x9c>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14ba4:	2303      	movs	r3, #3
   14ba6:	425b      	negs	r3, r3
   14ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto exitf;
   14baa:	e034      	b.n	14c16 <NPKSensorGetNitrogen+0x106>
    }
	snprintf((char *) buf, sizeof(buf), "After UART TX: %d\r\n",error);
   14bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14bae:	4a27      	ldr	r2, [pc, #156]	; (14c4c <NPKSensorGetNitrogen+0x13c>)
   14bb0:	2108      	movs	r1, #8
   14bb2:	1878      	adds	r0, r7, r1
   14bb4:	2140      	movs	r1, #64	; 0x40
   14bb6:	4c1d      	ldr	r4, [pc, #116]	; (14c2c <NPKSensorGetNitrogen+0x11c>)
   14bb8:	47a0      	blx	r4
	SerialConsoleWriteString(buf);
   14bba:	2308      	movs	r3, #8
   14bbc:	18fb      	adds	r3, r7, r3
   14bbe:	0018      	movs	r0, r3
   14bc0:	4b1b      	ldr	r3, [pc, #108]	; (14c30 <NPKSensorGetNitrogen+0x120>)
   14bc2:	4798      	blx	r3

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxnpk
    usart_read_buffer_job(&usart_instance_npk, (uint8_t *)&latestRxnpk, 7);  // Kicks off constant reading of characters
   14bc4:	4922      	ldr	r1, [pc, #136]	; (14c50 <NPKSensorGetNitrogen+0x140>)
   14bc6:	4b1d      	ldr	r3, [pc, #116]	; (14c3c <NPKSensorGetNitrogen+0x12c>)
   14bc8:	2207      	movs	r2, #7
   14bca:	0018      	movs	r0, r3
   14bcc:	4b21      	ldr	r3, [pc, #132]	; (14c54 <NPKSensorGetNitrogen+0x144>)
   14bce:	4798      	blx	r3
		tmp = (i==4)?latestRxnpk:tmp;
	}*/


    //---7. Wait for notification
    if (xSemaphoreTake(sensorNPKSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14bd0:	4b1c      	ldr	r3, [pc, #112]	; (14c44 <NPKSensorGetNitrogen+0x134>)
   14bd2:	681b      	ldr	r3, [r3, #0]
   14bd4:	683a      	ldr	r2, [r7, #0]
   14bd6:	0011      	movs	r1, r2
   14bd8:	0018      	movs	r0, r3
   14bda:	4b1b      	ldr	r3, [pc, #108]	; (14c48 <NPKSensorGetNitrogen+0x138>)
   14bdc:	4798      	blx	r3
   14bde:	0003      	movs	r3, r0
   14be0:	2b01      	cmp	r3, #1
   14be2:	d105      	bne.n	14bf0 <NPKSensorGetNitrogen+0xe0>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        //*nitrogen = (latestRxnpk[0] << 8) + latestRxnpk[1];
		//*nitrogen = tmp;
		*nitrogen = latestRxnpk[4];
   14be4:	4b1a      	ldr	r3, [pc, #104]	; (14c50 <NPKSensorGetNitrogen+0x140>)
   14be6:	791b      	ldrb	r3, [r3, #4]
   14be8:	b29a      	uxth	r2, r3
   14bea:	687b      	ldr	r3, [r7, #4]
   14bec:	801a      	strh	r2, [r3, #0]
   14bee:	e002      	b.n	14bf6 <NPKSensorGetNitrogen+0xe6>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        //error = ERR_TIMEOUT;
        //goto exitf;
		*nitrogen = 0;
   14bf0:	687b      	ldr	r3, [r7, #4]
   14bf2:	2200      	movs	r2, #0
   14bf4:	801a      	strh	r2, [r3, #0]
    }
	snprintf((char *) buf, sizeof(buf), "After UART RX: %d\r\n",error);
   14bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14bf8:	4a17      	ldr	r2, [pc, #92]	; (14c58 <NPKSensorGetNitrogen+0x148>)
   14bfa:	2108      	movs	r1, #8
   14bfc:	1878      	adds	r0, r7, r1
   14bfe:	2140      	movs	r1, #64	; 0x40
   14c00:	4c0a      	ldr	r4, [pc, #40]	; (14c2c <NPKSensorGetNitrogen+0x11c>)
   14c02:	47a0      	blx	r4
	SerialConsoleWriteString(buf);
   14c04:	2308      	movs	r3, #8
   14c06:	18fb      	adds	r3, r7, r3
   14c08:	0018      	movs	r0, r3
   14c0a:	4b09      	ldr	r3, [pc, #36]	; (14c30 <NPKSensorGetNitrogen+0x120>)
   14c0c:	4798      	blx	r3
   14c0e:	e002      	b.n	14c16 <NPKSensorGetNitrogen+0x106>
    if (ERROR_NONE != error) goto exitf;
   14c10:	46c0      	nop			; (mov r8, r8)
   14c12:	e000      	b.n	14c16 <NPKSensorGetNitrogen+0x106>
        goto exitf;
   14c14:	46c0      	nop			; (mov r8, r8)

exitf:
    // Release mutex and return error
    NPKSensorFreeMutex();
   14c16:	4b11      	ldr	r3, [pc, #68]	; (14c5c <NPKSensorGetNitrogen+0x14c>)
   14c18:	4798      	blx	r3

    return error;
   14c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   14c1c:	0018      	movs	r0, r3
   14c1e:	46bd      	mov	sp, r7
   14c20:	b015      	add	sp, #84	; 0x54
   14c22:	bd90      	pop	{r4, r7, pc}
   14c24:	00014d5d 	.word	0x00014d5d
   14c28:	00035b7c 	.word	0x00035b7c
   14c2c:	00034571 	.word	0x00034571
   14c30:	0001d665 	.word	0x0001d665
   14c34:	20000014 	.word	0x20000014
   14c38:	2000001c 	.word	0x2000001c
   14c3c:	20004664 	.word	0x20004664
   14c40:	000287d9 	.word	0x000287d9
   14c44:	20004698 	.word	0x20004698
   14c48:	0001acbd 	.word	0x0001acbd
   14c4c:	00035b90 	.word	0x00035b90
   14c50:	2000469c 	.word	0x2000469c
   14c54:	00028821 	.word	0x00028821
   14c58:	00035ba4 	.word	0x00035ba4
   14c5c:	00014d25 	.word	0x00014d25

00014c60 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   14c60:	b580      	push	{r7, lr}
   14c62:	b090      	sub	sp, #64	; 0x40
   14c64:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   14c66:	003b      	movs	r3, r7
   14c68:	0018      	movs	r0, r3
   14c6a:	4b14      	ldr	r3, [pc, #80]	; (14cbc <configure_usart+0x5c>)
   14c6c:	4798      	blx	r3

    config_usart.baudrate = 9600;
   14c6e:	003b      	movs	r3, r7
   14c70:	2296      	movs	r2, #150	; 0x96
   14c72:	0192      	lsls	r2, r2, #6
   14c74:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   14c76:	003b      	movs	r3, r7
   14c78:	2280      	movs	r2, #128	; 0x80
   14c7a:	0352      	lsls	r2, r2, #13
   14c7c:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
   14c7e:	003b      	movs	r3, r7
   14c80:	4a0f      	ldr	r2, [pc, #60]	; (14cc0 <configure_usart+0x60>)
   14c82:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
   14c84:	003b      	movs	r3, r7
   14c86:	4a0f      	ldr	r2, [pc, #60]	; (14cc4 <configure_usart+0x64>)
   14c88:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
   14c8a:	003b      	movs	r3, r7
   14c8c:	2201      	movs	r2, #1
   14c8e:	4252      	negs	r2, r2
   14c90:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
   14c92:	003b      	movs	r3, r7
   14c94:	2201      	movs	r2, #1
   14c96:	4252      	negs	r2, r2
   14c98:	63da      	str	r2, [r3, #60]	; 0x3c

    while (usart_init(&usart_instance_npk, SERCOM5, &config_usart) != STATUS_OK) {
   14c9a:	46c0      	nop			; (mov r8, r8)
   14c9c:	003a      	movs	r2, r7
   14c9e:	490a      	ldr	r1, [pc, #40]	; (14cc8 <configure_usart+0x68>)
   14ca0:	4b0a      	ldr	r3, [pc, #40]	; (14ccc <configure_usart+0x6c>)
   14ca2:	0018      	movs	r0, r3
   14ca4:	4b0a      	ldr	r3, [pc, #40]	; (14cd0 <configure_usart+0x70>)
   14ca6:	4798      	blx	r3
   14ca8:	1e03      	subs	r3, r0, #0
   14caa:	d1f7      	bne.n	14c9c <configure_usart+0x3c>
    }

    usart_enable(&usart_instance_npk);
   14cac:	4b07      	ldr	r3, [pc, #28]	; (14ccc <configure_usart+0x6c>)
   14cae:	0018      	movs	r0, r3
   14cb0:	4b08      	ldr	r3, [pc, #32]	; (14cd4 <configure_usart+0x74>)
   14cb2:	4798      	blx	r3
}
   14cb4:	46c0      	nop			; (mov r8, r8)
   14cb6:	46bd      	mov	sp, r7
   14cb8:	b010      	add	sp, #64	; 0x40
   14cba:	bd80      	pop	{r7, pc}
   14cbc:	000148e9 	.word	0x000148e9
   14cc0:	00220003 	.word	0x00220003
   14cc4:	00230003 	.word	0x00230003
   14cc8:	42001c00 	.word	0x42001c00
   14ccc:	20004664 	.word	0x20004664
   14cd0:	000283dd 	.word	0x000283dd
   14cd4:	000149a9 	.word	0x000149a9

00014cd8 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   14cd8:	b580      	push	{r7, lr}
   14cda:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_npk, npkUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   14cdc:	490c      	ldr	r1, [pc, #48]	; (14d10 <configure_usart_callbacks+0x38>)
   14cde:	4b0d      	ldr	r3, [pc, #52]	; (14d14 <configure_usart_callbacks+0x3c>)
   14ce0:	2200      	movs	r2, #0
   14ce2:	0018      	movs	r0, r3
   14ce4:	4b0c      	ldr	r3, [pc, #48]	; (14d18 <configure_usart_callbacks+0x40>)
   14ce6:	4798      	blx	r3
    usart_register_callback(&usart_instance_npk, npkUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   14ce8:	490c      	ldr	r1, [pc, #48]	; (14d1c <configure_usart_callbacks+0x44>)
   14cea:	4b0a      	ldr	r3, [pc, #40]	; (14d14 <configure_usart_callbacks+0x3c>)
   14cec:	2201      	movs	r2, #1
   14cee:	0018      	movs	r0, r3
   14cf0:	4b09      	ldr	r3, [pc, #36]	; (14d18 <configure_usart_callbacks+0x40>)
   14cf2:	4798      	blx	r3
    usart_enable_callback(&usart_instance_npk, USART_CALLBACK_BUFFER_TRANSMITTED);
   14cf4:	4b07      	ldr	r3, [pc, #28]	; (14d14 <configure_usart_callbacks+0x3c>)
   14cf6:	2100      	movs	r1, #0
   14cf8:	0018      	movs	r0, r3
   14cfa:	4b09      	ldr	r3, [pc, #36]	; (14d20 <configure_usart_callbacks+0x48>)
   14cfc:	4798      	blx	r3
    usart_enable_callback(&usart_instance_npk, USART_CALLBACK_BUFFER_RECEIVED);
   14cfe:	4b05      	ldr	r3, [pc, #20]	; (14d14 <configure_usart_callbacks+0x3c>)
   14d00:	2101      	movs	r1, #1
   14d02:	0018      	movs	r0, r3
   14d04:	4b06      	ldr	r3, [pc, #24]	; (14d20 <configure_usart_callbacks+0x48>)
   14d06:	4798      	blx	r3
}
   14d08:	46c0      	nop			; (mov r8, r8)
   14d0a:	46bd      	mov	sp, r7
   14d0c:	bd80      	pop	{r7, pc}
   14d0e:	46c0      	nop			; (mov r8, r8)
   14d10:	00014a29 	.word	0x00014a29
   14d14:	20004664 	.word	0x20004664
   14d18:	00028791 	.word	0x00028791
   14d1c:	00014a69 	.word	0x00014a69
   14d20:	000149f1 	.word	0x000149f1

00014d24 <NPKSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t NPKSensorFreeMutex(void)
{
   14d24:	b590      	push	{r4, r7, lr}
   14d26:	b083      	sub	sp, #12
   14d28:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14d2a:	2300      	movs	r3, #0
   14d2c:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorNPKMutexHandle) != pdTRUE) {
   14d2e:	4b09      	ldr	r3, [pc, #36]	; (14d54 <NPKSensorFreeMutex+0x30>)
   14d30:	6818      	ldr	r0, [r3, #0]
   14d32:	2300      	movs	r3, #0
   14d34:	2200      	movs	r2, #0
   14d36:	2100      	movs	r1, #0
   14d38:	4c07      	ldr	r4, [pc, #28]	; (14d58 <NPKSensorFreeMutex+0x34>)
   14d3a:	47a0      	blx	r4
   14d3c:	0003      	movs	r3, r0
   14d3e:	2b01      	cmp	r3, #1
   14d40:	d002      	beq.n	14d48 <NPKSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14d42:	2314      	movs	r3, #20
   14d44:	425b      	negs	r3, r3
   14d46:	607b      	str	r3, [r7, #4]
    }
    return error;
   14d48:	687b      	ldr	r3, [r7, #4]
}
   14d4a:	0018      	movs	r0, r3
   14d4c:	46bd      	mov	sp, r7
   14d4e:	b003      	add	sp, #12
   14d50:	bd90      	pop	{r4, r7, pc}
   14d52:	46c0      	nop			; (mov r8, r8)
   14d54:	20004660 	.word	0x20004660
   14d58:	00019fad 	.word	0x00019fad

00014d5c <NPKSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t NPKSensorGetMutex(TickType_t waitTime)
{
   14d5c:	b580      	push	{r7, lr}
   14d5e:	b084      	sub	sp, #16
   14d60:	af00      	add	r7, sp, #0
   14d62:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14d64:	2300      	movs	r3, #0
   14d66:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorNPKMutexHandle, waitTime) != pdTRUE) {
   14d68:	4b08      	ldr	r3, [pc, #32]	; (14d8c <NPKSensorGetMutex+0x30>)
   14d6a:	681b      	ldr	r3, [r3, #0]
   14d6c:	687a      	ldr	r2, [r7, #4]
   14d6e:	0011      	movs	r1, r2
   14d70:	0018      	movs	r0, r3
   14d72:	4b07      	ldr	r3, [pc, #28]	; (14d90 <NPKSensorGetMutex+0x34>)
   14d74:	4798      	blx	r3
   14d76:	0003      	movs	r3, r0
   14d78:	2b01      	cmp	r3, #1
   14d7a:	d002      	beq.n	14d82 <NPKSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14d7c:	231d      	movs	r3, #29
   14d7e:	425b      	negs	r3, r3
   14d80:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14d82:	68fb      	ldr	r3, [r7, #12]
   14d84:	0018      	movs	r0, r3
   14d86:	46bd      	mov	sp, r7
   14d88:	b004      	add	sp, #16
   14d8a:	bd80      	pop	{r7, pc}
   14d8c:	20004660 	.word	0x20004660
   14d90:	0001acbd 	.word	0x0001acbd

00014d94 <vPlantWateringTask>:
#include "SerialConsole.h"
#include "PLWA_Task/PLWA_Task.h"
#include "SoilMoisture\SoilMoisture.h"

void vPlantWateringTask(void *pvParameters)
{
   14d94:	b590      	push	{r4, r7, lr}
   14d96:	b095      	sub	sp, #84	; 0x54
   14d98:	af00      	add	r7, sp, #0
   14d9a:	6078      	str	r0, [r7, #4]
	char buf[64];
	uint16_t status = SoilMoisture_init();
   14d9c:	234e      	movs	r3, #78	; 0x4e
   14d9e:	18fc      	adds	r4, r7, r3
   14da0:	4b0a      	ldr	r3, [pc, #40]	; (14dcc <vPlantWateringTask+0x38>)
   14da2:	4798      	blx	r3
   14da4:	0003      	movs	r3, r0
   14da6:	8023      	strh	r3, [r4, #0]
	
	while(1)
	{
		status = SoilMoisture_Temp();
   14da8:	234e      	movs	r3, #78	; 0x4e
   14daa:	18fc      	adds	r4, r7, r3
   14dac:	4b08      	ldr	r3, [pc, #32]	; (14dd0 <vPlantWateringTask+0x3c>)
   14dae:	4798      	blx	r3
   14db0:	0003      	movs	r3, r0
   14db2:	8023      	strh	r3, [r4, #0]
		status = SoilMoisture_Moist();
   14db4:	234e      	movs	r3, #78	; 0x4e
   14db6:	18fc      	adds	r4, r7, r3
   14db8:	4b06      	ldr	r3, [pc, #24]	; (14dd4 <vPlantWateringTask+0x40>)
   14dba:	4798      	blx	r3
   14dbc:	0003      	movs	r3, r0
   14dbe:	8023      	strh	r3, [r4, #0]
		vTaskDelay(1000);
   14dc0:	23fa      	movs	r3, #250	; 0xfa
   14dc2:	009b      	lsls	r3, r3, #2
   14dc4:	0018      	movs	r0, r3
   14dc6:	4b04      	ldr	r3, [pc, #16]	; (14dd8 <vPlantWateringTask+0x44>)
   14dc8:	4798      	blx	r3
		status = SoilMoisture_Temp();
   14dca:	e7ed      	b.n	14da8 <vPlantWateringTask+0x14>
   14dcc:	00014f19 	.word	0x00014f19
   14dd0:	00014f75 	.word	0x00014f75
   14dd4:	00015095 	.word	0x00015095
   14dd8:	0001ba11 	.word	0x0001ba11

00014ddc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14ddc:	b580      	push	{r7, lr}
   14dde:	b084      	sub	sp, #16
   14de0:	af00      	add	r7, sp, #0
   14de2:	0002      	movs	r2, r0
   14de4:	1dfb      	adds	r3, r7, #7
   14de6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14de8:	230f      	movs	r3, #15
   14dea:	18fb      	adds	r3, r7, r3
   14dec:	1dfa      	adds	r2, r7, #7
   14dee:	7812      	ldrb	r2, [r2, #0]
   14df0:	09d2      	lsrs	r2, r2, #7
   14df2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14df4:	230e      	movs	r3, #14
   14df6:	18fb      	adds	r3, r7, r3
   14df8:	1dfa      	adds	r2, r7, #7
   14dfa:	7812      	ldrb	r2, [r2, #0]
   14dfc:	0952      	lsrs	r2, r2, #5
   14dfe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14e00:	4b0d      	ldr	r3, [pc, #52]	; (14e38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14e02:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14e04:	230f      	movs	r3, #15
   14e06:	18fb      	adds	r3, r7, r3
   14e08:	781b      	ldrb	r3, [r3, #0]
   14e0a:	2b00      	cmp	r3, #0
   14e0c:	d10f      	bne.n	14e2e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   14e0e:	230f      	movs	r3, #15
   14e10:	18fb      	adds	r3, r7, r3
   14e12:	781b      	ldrb	r3, [r3, #0]
   14e14:	009b      	lsls	r3, r3, #2
   14e16:	2210      	movs	r2, #16
   14e18:	4694      	mov	ip, r2
   14e1a:	44bc      	add	ip, r7
   14e1c:	4463      	add	r3, ip
   14e1e:	3b08      	subs	r3, #8
   14e20:	681a      	ldr	r2, [r3, #0]
   14e22:	230e      	movs	r3, #14
   14e24:	18fb      	adds	r3, r7, r3
   14e26:	781b      	ldrb	r3, [r3, #0]
   14e28:	01db      	lsls	r3, r3, #7
   14e2a:	18d3      	adds	r3, r2, r3
   14e2c:	e000      	b.n	14e30 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   14e2e:	2300      	movs	r3, #0
	}
}
   14e30:	0018      	movs	r0, r3
   14e32:	46bd      	mov	sp, r7
   14e34:	b004      	add	sp, #16
   14e36:	bd80      	pop	{r7, pc}
   14e38:	41004400 	.word	0x41004400

00014e3c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14e3c:	b580      	push	{r7, lr}
   14e3e:	b082      	sub	sp, #8
   14e40:	af00      	add	r7, sp, #0
   14e42:	0002      	movs	r2, r0
   14e44:	1dfb      	adds	r3, r7, #7
   14e46:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14e48:	1dfb      	adds	r3, r7, #7
   14e4a:	781b      	ldrb	r3, [r3, #0]
   14e4c:	0018      	movs	r0, r3
   14e4e:	4b03      	ldr	r3, [pc, #12]	; (14e5c <port_get_group_from_gpio_pin+0x20>)
   14e50:	4798      	blx	r3
   14e52:	0003      	movs	r3, r0
}
   14e54:	0018      	movs	r0, r3
   14e56:	46bd      	mov	sp, r7
   14e58:	b002      	add	sp, #8
   14e5a:	bd80      	pop	{r7, pc}
   14e5c:	00014ddd 	.word	0x00014ddd

00014e60 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   14e60:	b580      	push	{r7, lr}
   14e62:	b082      	sub	sp, #8
   14e64:	af00      	add	r7, sp, #0
   14e66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   14e68:	687b      	ldr	r3, [r7, #4]
   14e6a:	2200      	movs	r2, #0
   14e6c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   14e6e:	687b      	ldr	r3, [r7, #4]
   14e70:	2201      	movs	r2, #1
   14e72:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   14e74:	687b      	ldr	r3, [r7, #4]
   14e76:	2200      	movs	r2, #0
   14e78:	709a      	strb	r2, [r3, #2]
}
   14e7a:	46c0      	nop			; (mov r8, r8)
   14e7c:	46bd      	mov	sp, r7
   14e7e:	b002      	add	sp, #8
   14e80:	bd80      	pop	{r7, pc}
	...

00014e84 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   14e84:	b580      	push	{r7, lr}
   14e86:	b084      	sub	sp, #16
   14e88:	af00      	add	r7, sp, #0
   14e8a:	0002      	movs	r2, r0
   14e8c:	1dfb      	adds	r3, r7, #7
   14e8e:	701a      	strb	r2, [r3, #0]
   14e90:	1dbb      	adds	r3, r7, #6
   14e92:	1c0a      	adds	r2, r1, #0
   14e94:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14e96:	1dfb      	adds	r3, r7, #7
   14e98:	781b      	ldrb	r3, [r3, #0]
   14e9a:	0018      	movs	r0, r3
   14e9c:	4b0d      	ldr	r3, [pc, #52]	; (14ed4 <port_pin_set_output_level+0x50>)
   14e9e:	4798      	blx	r3
   14ea0:	0003      	movs	r3, r0
   14ea2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14ea4:	1dfb      	adds	r3, r7, #7
   14ea6:	781b      	ldrb	r3, [r3, #0]
   14ea8:	221f      	movs	r2, #31
   14eaa:	4013      	ands	r3, r2
   14eac:	2201      	movs	r2, #1
   14eae:	409a      	lsls	r2, r3
   14eb0:	0013      	movs	r3, r2
   14eb2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   14eb4:	1dbb      	adds	r3, r7, #6
   14eb6:	781b      	ldrb	r3, [r3, #0]
   14eb8:	2b00      	cmp	r3, #0
   14eba:	d003      	beq.n	14ec4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   14ebc:	68fb      	ldr	r3, [r7, #12]
   14ebe:	68ba      	ldr	r2, [r7, #8]
   14ec0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   14ec2:	e002      	b.n	14eca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   14ec4:	68fb      	ldr	r3, [r7, #12]
   14ec6:	68ba      	ldr	r2, [r7, #8]
   14ec8:	615a      	str	r2, [r3, #20]
}
   14eca:	46c0      	nop			; (mov r8, r8)
   14ecc:	46bd      	mov	sp, r7
   14ece:	b004      	add	sp, #16
   14ed0:	bd80      	pop	{r7, pc}
   14ed2:	46c0      	nop			; (mov r8, r8)
   14ed4:	00014e3d 	.word	0x00014e3d

00014ed8 <relay_pin_init>:
 * @brief		Initialises the soil moisture sensor
 * @details		Initialises using I2C address 0x36 and registers {0x00,0x01} the soil moisture sensor
 * @note		Call from function once to initialise hardware.
 */
void relay_pin_init(void)
{
   14ed8:	b580      	push	{r7, lr}
   14eda:	b082      	sub	sp, #8
   14edc:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;//Define structure needed to configure a pin
	// Check if device is on the line - it should answer with its HW ID
	port_get_config_defaults(&config_port_pin); //Initialize structure with default configurations.
   14ede:	1d3b      	adds	r3, r7, #4
   14ee0:	0018      	movs	r0, r3
   14ee2:	4b0a      	ldr	r3, [pc, #40]	; (14f0c <relay_pin_init+0x34>)
   14ee4:	4798      	blx	r3
	//Now we change the structure to what we need.
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT; //Set pin as OUTPUT
   14ee6:	1d3b      	adds	r3, r7, #4
   14ee8:	2201      	movs	r2, #1
   14eea:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
   14eec:	1d3b      	adds	r3, r7, #4
   14eee:	2202      	movs	r2, #2
   14ef0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(RELAY_PIN, &config_port_pin); //We assign the pin configuration to the PIN_PA20
   14ef2:	1d3b      	adds	r3, r7, #4
   14ef4:	0019      	movs	r1, r3
   14ef6:	2015      	movs	r0, #21
   14ef8:	4b05      	ldr	r3, [pc, #20]	; (14f10 <relay_pin_init+0x38>)
   14efa:	4798      	blx	r3
	port_pin_set_output_level(RELAY_PIN, false);
   14efc:	2100      	movs	r1, #0
   14efe:	2015      	movs	r0, #21
   14f00:	4b04      	ldr	r3, [pc, #16]	; (14f14 <relay_pin_init+0x3c>)
   14f02:	4798      	blx	r3
	//SerialConsoleWriteString("SCREAM!");
	//delay_ms(500);
}
   14f04:	46c0      	nop			; (mov r8, r8)
   14f06:	46bd      	mov	sp, r7
   14f08:	b002      	add	sp, #8
   14f0a:	bd80      	pop	{r7, pc}
   14f0c:	00014e61 	.word	0x00014e61
   14f10:	000262a9 	.word	0x000262a9
   14f14:	00014e85 	.word	0x00014e85

00014f18 <SoilMoisture_init>:

uint16_t SoilMoisture_init(void)
{
   14f18:	b580      	push	{r7, lr}
   14f1a:	b094      	sub	sp, #80	; 0x50
   14f1c:	af00      	add	r7, sp, #0
	uint8_t readData[2];
	uint8_t reg[2] = {0x00,0x01};
   14f1e:	2344      	movs	r3, #68	; 0x44
   14f20:	18fb      	adds	r3, r7, r3
   14f22:	2200      	movs	r2, #0
   14f24:	701a      	strb	r2, [r3, #0]
   14f26:	2344      	movs	r3, #68	; 0x44
   14f28:	18fb      	adds	r3, r7, r3
   14f2a:	2201      	movs	r2, #1
   14f2c:	705a      	strb	r2, [r3, #1]
	MoistureData.address = 0x36;
   14f2e:	4b0f      	ldr	r3, [pc, #60]	; (14f6c <SoilMoisture_init+0x54>)
   14f30:	2236      	movs	r2, #54	; 0x36
   14f32:	701a      	strb	r2, [r3, #0]
	MoistureData.msgOut = &reg[0];
   14f34:	4b0d      	ldr	r3, [pc, #52]	; (14f6c <SoilMoisture_init+0x54>)
   14f36:	2244      	movs	r2, #68	; 0x44
   14f38:	18ba      	adds	r2, r7, r2
   14f3a:	605a      	str	r2, [r3, #4]
	MoistureData.lenOut = sizeof(reg);
   14f3c:	4b0b      	ldr	r3, [pc, #44]	; (14f6c <SoilMoisture_init+0x54>)
   14f3e:	2202      	movs	r2, #2
   14f40:	81da      	strh	r2, [r3, #14]
	MoistureData.msgIn = readData;
   14f42:	4b0a      	ldr	r3, [pc, #40]	; (14f6c <SoilMoisture_init+0x54>)
   14f44:	2248      	movs	r2, #72	; 0x48
   14f46:	18ba      	adds	r2, r7, r2
   14f48:	609a      	str	r2, [r3, #8]
	MoistureData.lenIn = sizeof(readData);
   14f4a:	4b08      	ldr	r3, [pc, #32]	; (14f6c <SoilMoisture_init+0x54>)
   14f4c:	2202      	movs	r2, #2
   14f4e:	819a      	strh	r2, [r3, #12]
	char buf[64];
	int error = I2cReadDataWait(&MoistureData, 0xff, 0xff);
   14f50:	4b06      	ldr	r3, [pc, #24]	; (14f6c <SoilMoisture_init+0x54>)
   14f52:	22ff      	movs	r2, #255	; 0xff
   14f54:	21ff      	movs	r1, #255	; 0xff
   14f56:	0018      	movs	r0, r3
   14f58:	4b05      	ldr	r3, [pc, #20]	; (14f70 <SoilMoisture_init+0x58>)
   14f5a:	4798      	blx	r3
   14f5c:	0003      	movs	r3, r0
   14f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	//snprintf((char *) buf, sizeof(buf), "ID: 0x%x\r\n",readData[0]);
	//SerialConsoleWriteString(buf);
	return error;
   14f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14f62:	b29b      	uxth	r3, r3
 }
   14f64:	0018      	movs	r0, r3
   14f66:	46bd      	mov	sp, r7
   14f68:	b014      	add	sp, #80	; 0x50
   14f6a:	bd80      	pop	{r7, pc}
   14f6c:	200046a4 	.word	0x200046a4
   14f70:	000143d1 	.word	0x000143d1

00014f74 <SoilMoisture_Temp>:
 * @details		Get temp data using I2C address 0x36 and registers {0x00,0x04} from soil moisture sensor
 * @note		Will be called from from CLI when the command is
 *				entered in console; command is 'getMoisture'
 */
 uint16_t SoilMoisture_Temp(void)
 {
   14f74:	b590      	push	{r4, r7, lr}
   14f76:	b09b      	sub	sp, #108	; 0x6c
   14f78:	af02      	add	r7, sp, #8
	 uint8_t readData[4];
	 uint8_t reg[2] = {0x00,0x04};
   14f7a:	2344      	movs	r3, #68	; 0x44
   14f7c:	18fb      	adds	r3, r7, r3
   14f7e:	2200      	movs	r2, #0
   14f80:	701a      	strb	r2, [r3, #0]
   14f82:	2344      	movs	r3, #68	; 0x44
   14f84:	18fb      	adds	r3, r7, r3
   14f86:	2204      	movs	r2, #4
   14f88:	705a      	strb	r2, [r3, #1]
	 MoistureData.address = 0x36;
   14f8a:	4b35      	ldr	r3, [pc, #212]	; (15060 <SoilMoisture_Temp+0xec>)
   14f8c:	2236      	movs	r2, #54	; 0x36
   14f8e:	701a      	strb	r2, [r3, #0]
	 MoistureData.msgOut = &reg[0];
   14f90:	4b33      	ldr	r3, [pc, #204]	; (15060 <SoilMoisture_Temp+0xec>)
   14f92:	2244      	movs	r2, #68	; 0x44
   14f94:	18ba      	adds	r2, r7, r2
   14f96:	605a      	str	r2, [r3, #4]
	 MoistureData.lenOut = sizeof(reg);
   14f98:	4b31      	ldr	r3, [pc, #196]	; (15060 <SoilMoisture_Temp+0xec>)
   14f9a:	2202      	movs	r2, #2
   14f9c:	81da      	strh	r2, [r3, #14]
	 MoistureData.msgIn = readData;
   14f9e:	4b30      	ldr	r3, [pc, #192]	; (15060 <SoilMoisture_Temp+0xec>)
   14fa0:	2248      	movs	r2, #72	; 0x48
   14fa2:	18ba      	adds	r2, r7, r2
   14fa4:	609a      	str	r2, [r3, #8]
	 MoistureData.lenIn = sizeof(readData);
   14fa6:	4b2e      	ldr	r3, [pc, #184]	; (15060 <SoilMoisture_Temp+0xec>)
   14fa8:	2204      	movs	r2, #4
   14faa:	819a      	strh	r2, [r3, #12]
	 int error = I2cReadDataWait(&MoistureData, 0xff, 0xff);
   14fac:	4b2c      	ldr	r3, [pc, #176]	; (15060 <SoilMoisture_Temp+0xec>)
   14fae:	22ff      	movs	r2, #255	; 0xff
   14fb0:	21ff      	movs	r1, #255	; 0xff
   14fb2:	0018      	movs	r0, r3
   14fb4:	4b2b      	ldr	r3, [pc, #172]	; (15064 <SoilMoisture_Temp+0xf0>)
   14fb6:	4798      	blx	r3
   14fb8:	0003      	movs	r3, r0
   14fba:	65fb      	str	r3, [r7, #92]	; 0x5c
	 int32_t ret = ((uint32_t)readData[0] << 24) | ((uint32_t)readData[1] << 16) |  ((uint32_t)readData[2] << 8) | (uint32_t)readData[3];
   14fbc:	2348      	movs	r3, #72	; 0x48
   14fbe:	18fb      	adds	r3, r7, r3
   14fc0:	781b      	ldrb	r3, [r3, #0]
   14fc2:	061a      	lsls	r2, r3, #24
   14fc4:	2348      	movs	r3, #72	; 0x48
   14fc6:	18fb      	adds	r3, r7, r3
   14fc8:	785b      	ldrb	r3, [r3, #1]
   14fca:	041b      	lsls	r3, r3, #16
   14fcc:	431a      	orrs	r2, r3
   14fce:	2348      	movs	r3, #72	; 0x48
   14fd0:	18fb      	adds	r3, r7, r3
   14fd2:	789b      	ldrb	r3, [r3, #2]
   14fd4:	021b      	lsls	r3, r3, #8
   14fd6:	4313      	orrs	r3, r2
   14fd8:	2248      	movs	r2, #72	; 0x48
   14fda:	18ba      	adds	r2, r7, r2
   14fdc:	78d2      	ldrb	r2, [r2, #3]
   14fde:	4313      	orrs	r3, r2
   14fe0:	65bb      	str	r3, [r7, #88]	; 0x58
	 char buf[64];
	 //snprintf((char *) buf, sizeof(buf), "Ret: %d\r\n",ret);
	 //SerialConsoleWriteString(buf);
	 //snprintf((char *) buf, sizeof(buf), "ret : %d, %d, %d, %d\r\n ", readData[0], readData[1], readData[2], readData[3]);
	 //SerialConsoleWriteString(buf);
	 float val=((1.0/(65536))*ret);
   14fe2:	4b21      	ldr	r3, [pc, #132]	; (15068 <SoilMoisture_Temp+0xf4>)
   14fe4:	6db8      	ldr	r0, [r7, #88]	; 0x58
   14fe6:	4798      	blx	r3
   14fe8:	4c20      	ldr	r4, [pc, #128]	; (1506c <SoilMoisture_Temp+0xf8>)
   14fea:	2200      	movs	r2, #0
   14fec:	4b20      	ldr	r3, [pc, #128]	; (15070 <SoilMoisture_Temp+0xfc>)
   14fee:	47a0      	blx	r4
   14ff0:	0003      	movs	r3, r0
   14ff2:	000c      	movs	r4, r1
   14ff4:	0019      	movs	r1, r3
   14ff6:	0022      	movs	r2, r4
   14ff8:	4b1e      	ldr	r3, [pc, #120]	; (15074 <SoilMoisture_Temp+0x100>)
   14ffa:	0008      	movs	r0, r1
   14ffc:	0011      	movs	r1, r2
   14ffe:	4798      	blx	r3
   15000:	1c03      	adds	r3, r0, #0
   15002:	603b      	str	r3, [r7, #0]
     //float val=(1.0 / (1UL << 16))*ret;
	 
	 int temp_tmp = val*100;
   15004:	683a      	ldr	r2, [r7, #0]
   15006:	4b1c      	ldr	r3, [pc, #112]	; (15078 <SoilMoisture_Temp+0x104>)
   15008:	491c      	ldr	r1, [pc, #112]	; (1507c <SoilMoisture_Temp+0x108>)
   1500a:	1c10      	adds	r0, r2, #0
   1500c:	4798      	blx	r3
   1500e:	1c03      	adds	r3, r0, #0
   15010:	1c1a      	adds	r2, r3, #0
   15012:	4b1b      	ldr	r3, [pc, #108]	; (15080 <SoilMoisture_Temp+0x10c>)
   15014:	1c10      	adds	r0, r2, #0
   15016:	4798      	blx	r3
   15018:	0003      	movs	r3, r0
   1501a:	657b      	str	r3, [r7, #84]	; 0x54
	 int tmp_units = temp_tmp/100;
   1501c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1501e:	4b19      	ldr	r3, [pc, #100]	; (15084 <SoilMoisture_Temp+0x110>)
   15020:	2164      	movs	r1, #100	; 0x64
   15022:	0010      	movs	r0, r2
   15024:	4798      	blx	r3
   15026:	0003      	movs	r3, r0
   15028:	653b      	str	r3, [r7, #80]	; 0x50
	 int tmp_frac = temp_tmp - (tmp_units*100);
   1502a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1502c:	2264      	movs	r2, #100	; 0x64
   1502e:	4252      	negs	r2, r2
   15030:	435a      	muls	r2, r3
   15032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15034:	18d3      	adds	r3, r2, r3
   15036:	64fb      	str	r3, [r7, #76]	; 0x4c

	 snprintf((char *) buf, sizeof(buf), "Temperature: %d.%d\r\n",tmp_units, tmp_frac);
   15038:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1503a:	4a13      	ldr	r2, [pc, #76]	; (15088 <SoilMoisture_Temp+0x114>)
   1503c:	1d38      	adds	r0, r7, #4
   1503e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15040:	9300      	str	r3, [sp, #0]
   15042:	000b      	movs	r3, r1
   15044:	2140      	movs	r1, #64	; 0x40
   15046:	4c11      	ldr	r4, [pc, #68]	; (1508c <SoilMoisture_Temp+0x118>)
   15048:	47a0      	blx	r4
	 //SerialConsoleWriteString(buf);
	 // Check if device is on the line - it should answer with its HW ID
	 WifiAddTempDataToQueue(&val);
   1504a:	003b      	movs	r3, r7
   1504c:	0018      	movs	r0, r3
   1504e:	4b10      	ldr	r3, [pc, #64]	; (15090 <SoilMoisture_Temp+0x11c>)
   15050:	4798      	blx	r3
	 
	 return error;
   15052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   15054:	b29b      	uxth	r3, r3
 }
   15056:	0018      	movs	r0, r3
   15058:	46bd      	mov	sp, r7
   1505a:	b019      	add	sp, #100	; 0x64
   1505c:	bd90      	pop	{r4, r7, pc}
   1505e:	46c0      	nop			; (mov r8, r8)
   15060:	200046a4 	.word	0x200046a4
   15064:	000143d1 	.word	0x000143d1
   15068:	00034021 	.word	0x00034021
   1506c:	0003348d 	.word	0x0003348d
   15070:	3ef00000 	.word	0x3ef00000
   15074:	00034115 	.word	0x00034115
   15078:	00032585 	.word	0x00032585
   1507c:	42c80000 	.word	0x42c80000
   15080:	000327c5 	.word	0x000327c5
   15084:	00032359 	.word	0x00032359
   15088:	00035bb8 	.word	0x00035bb8
   1508c:	00034571 	.word	0x00034571
   15090:	00016d85 	.word	0x00016d85

00015094 <SoilMoisture_Moist>:
 * @details		Get moisture data using I2C address 0x36 and registers {0x0F,0x10} from soil moisture sensor
 * @note		Will be called from from CLI when the command is
 *				entered in console; command is 'getMoisture'
 */
 uint16_t SoilMoisture_Moist(void)
 {
   15094:	b590      	push	{r4, r7, lr}
   15096:	b095      	sub	sp, #84	; 0x54
   15098:	af00      	add	r7, sp, #0
	 port_pin_set_output_level(RELAY_PIN, false);
   1509a:	2100      	movs	r1, #0
   1509c:	2015      	movs	r0, #21
   1509e:	4b2a      	ldr	r3, [pc, #168]	; (15148 <SoilMoisture_Moist+0xb4>)
   150a0:	4798      	blx	r3
	 uint8_t readData[2];
	 uint8_t reg[2] = {0x0F,0x10};
   150a2:	2344      	movs	r3, #68	; 0x44
   150a4:	18fb      	adds	r3, r7, r3
   150a6:	4a29      	ldr	r2, [pc, #164]	; (1514c <SoilMoisture_Moist+0xb8>)
   150a8:	8812      	ldrh	r2, [r2, #0]
   150aa:	801a      	strh	r2, [r3, #0]
	 MoistureData.address = 0x36;
   150ac:	4b28      	ldr	r3, [pc, #160]	; (15150 <SoilMoisture_Moist+0xbc>)
   150ae:	2236      	movs	r2, #54	; 0x36
   150b0:	701a      	strb	r2, [r3, #0]
	 MoistureData.msgOut = &reg[0];
   150b2:	4b27      	ldr	r3, [pc, #156]	; (15150 <SoilMoisture_Moist+0xbc>)
   150b4:	2244      	movs	r2, #68	; 0x44
   150b6:	18ba      	adds	r2, r7, r2
   150b8:	605a      	str	r2, [r3, #4]
	 MoistureData.lenOut = sizeof(reg);
   150ba:	4b25      	ldr	r3, [pc, #148]	; (15150 <SoilMoisture_Moist+0xbc>)
   150bc:	2202      	movs	r2, #2
   150be:	81da      	strh	r2, [r3, #14]
	 MoistureData.msgIn = readData;
   150c0:	4b23      	ldr	r3, [pc, #140]	; (15150 <SoilMoisture_Moist+0xbc>)
   150c2:	2248      	movs	r2, #72	; 0x48
   150c4:	18ba      	adds	r2, r7, r2
   150c6:	609a      	str	r2, [r3, #8]
	 MoistureData.lenIn = sizeof(readData);
   150c8:	4b21      	ldr	r3, [pc, #132]	; (15150 <SoilMoisture_Moist+0xbc>)
   150ca:	2202      	movs	r2, #2
   150cc:	819a      	strh	r2, [r3, #12]
	 int error = I2cReadDataWait(&MoistureData, 0xff, 0xff);
   150ce:	4b20      	ldr	r3, [pc, #128]	; (15150 <SoilMoisture_Moist+0xbc>)
   150d0:	22ff      	movs	r2, #255	; 0xff
   150d2:	21ff      	movs	r1, #255	; 0xff
   150d4:	0018      	movs	r0, r3
   150d6:	4b1f      	ldr	r3, [pc, #124]	; (15154 <SoilMoisture_Moist+0xc0>)
   150d8:	4798      	blx	r3
   150da:	0003      	movs	r3, r0
   150dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	 int32_t moist = ((uint16_t)readData[0] << 8) | readData[1];
   150de:	2348      	movs	r3, #72	; 0x48
   150e0:	18fb      	adds	r3, r7, r3
   150e2:	781b      	ldrb	r3, [r3, #0]
   150e4:	021b      	lsls	r3, r3, #8
   150e6:	2248      	movs	r2, #72	; 0x48
   150e8:	18ba      	adds	r2, r7, r2
   150ea:	7852      	ldrb	r2, [r2, #1]
   150ec:	4313      	orrs	r3, r2
   150ee:	643b      	str	r3, [r7, #64]	; 0x40
	 WifiAddMoistureDataToQueue(&moist);
   150f0:	2340      	movs	r3, #64	; 0x40
   150f2:	18fb      	adds	r3, r7, r3
   150f4:	0018      	movs	r0, r3
   150f6:	4b18      	ldr	r3, [pc, #96]	; (15158 <SoilMoisture_Moist+0xc4>)
   150f8:	4798      	blx	r3
	 char buf[64];
	 
	 snprintf((char *) buf, sizeof(buf), "Moisture: %d\r\n",moist);
   150fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   150fc:	4a17      	ldr	r2, [pc, #92]	; (1515c <SoilMoisture_Moist+0xc8>)
   150fe:	0038      	movs	r0, r7
   15100:	2140      	movs	r1, #64	; 0x40
   15102:	4c17      	ldr	r4, [pc, #92]	; (15160 <SoilMoisture_Moist+0xcc>)
   15104:	47a0      	blx	r4
	 //SerialConsoleWriteString(buf);
	 // Check if device is on the line - it should answer with its HW ID
	 bool rel_out = 0;
   15106:	234b      	movs	r3, #75	; 0x4b
   15108:	18fb      	adds	r3, r7, r3
   1510a:	2200      	movs	r2, #0
   1510c:	701a      	strb	r2, [r3, #0]
	 if (moist < 400)
   1510e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15110:	2390      	movs	r3, #144	; 0x90
   15112:	33ff      	adds	r3, #255	; 0xff
   15114:	429a      	cmp	r2, r3
   15116:	dc08      	bgt.n	1512a <SoilMoisture_Moist+0x96>
	 {
		 //SerialConsoleWriteString("Dry soil!!!\r\n");
		 rel_out = true;
   15118:	234b      	movs	r3, #75	; 0x4b
   1511a:	18fb      	adds	r3, r7, r3
   1511c:	2201      	movs	r2, #1
   1511e:	701a      	strb	r2, [r3, #0]
		 port_pin_set_output_level(RELAY_PIN, true);
   15120:	2101      	movs	r1, #1
   15122:	2015      	movs	r0, #21
   15124:	4b08      	ldr	r3, [pc, #32]	; (15148 <SoilMoisture_Moist+0xb4>)
   15126:	4798      	blx	r3
   15128:	e007      	b.n	1513a <SoilMoisture_Moist+0xa6>
		 //vTaskDelay(500);
	 }
	 else
	 {
		 //SerialConsoleWriteString("Wet soil!!!\r\n");
		 rel_out = false;
   1512a:	234b      	movs	r3, #75	; 0x4b
   1512c:	18fb      	adds	r3, r7, r3
   1512e:	2200      	movs	r2, #0
   15130:	701a      	strb	r2, [r3, #0]
		 port_pin_set_output_level(RELAY_PIN, 0);
   15132:	2100      	movs	r1, #0
   15134:	2015      	movs	r0, #21
   15136:	4b04      	ldr	r3, [pc, #16]	; (15148 <SoilMoisture_Moist+0xb4>)
   15138:	4798      	blx	r3
		 //vTaskDelay(500);
	 }
	 //WifiAddSprinklerDataToQueue(&rel_out);
	 return error;
   1513a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1513c:	b29b      	uxth	r3, r3
 }
   1513e:	0018      	movs	r0, r3
   15140:	46bd      	mov	sp, r7
   15142:	b015      	add	sp, #84	; 0x54
   15144:	bd90      	pop	{r4, r7, pc}
   15146:	46c0      	nop			; (mov r8, r8)
   15148:	00014e85 	.word	0x00014e85
   1514c:	00035be0 	.word	0x00035be0
   15150:	200046a4 	.word	0x200046a4
   15154:	000143d1 	.word	0x000143d1
   15158:	00016db1 	.word	0x00016db1
   1515c:	00035bd0 	.word	0x00035bd0
   15160:	00034571 	.word	0x00034571

00015164 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   15164:	b590      	push	{r4, r7, lr}
   15166:	b083      	sub	sp, #12
   15168:	af00      	add	r7, sp, #0
   1516a:	0004      	movs	r4, r0
   1516c:	0008      	movs	r0, r1
   1516e:	0011      	movs	r1, r2
   15170:	1dfb      	adds	r3, r7, #7
   15172:	1c22      	adds	r2, r4, #0
   15174:	701a      	strb	r2, [r3, #0]
   15176:	1dbb      	adds	r3, r7, #6
   15178:	1c02      	adds	r2, r0, #0
   1517a:	701a      	strb	r2, [r3, #0]
   1517c:	1d7b      	adds	r3, r7, #5
   1517e:	1c0a      	adds	r2, r1, #0
   15180:	701a      	strb	r2, [r3, #0]
    red = r;
   15182:	4b08      	ldr	r3, [pc, #32]	; (151a4 <UIChangeColors+0x40>)
   15184:	1dfa      	adds	r2, r7, #7
   15186:	7812      	ldrb	r2, [r2, #0]
   15188:	701a      	strb	r2, [r3, #0]
    green = g;
   1518a:	4b07      	ldr	r3, [pc, #28]	; (151a8 <UIChangeColors+0x44>)
   1518c:	1dba      	adds	r2, r7, #6
   1518e:	7812      	ldrb	r2, [r2, #0]
   15190:	701a      	strb	r2, [r3, #0]
    blue = b;
   15192:	4b06      	ldr	r3, [pc, #24]	; (151ac <UIChangeColors+0x48>)
   15194:	1d7a      	adds	r2, r7, #5
   15196:	7812      	ldrb	r2, [r2, #0]
   15198:	701a      	strb	r2, [r3, #0]
}
   1519a:	46c0      	nop			; (mov r8, r8)
   1519c:	46bd      	mov	sp, r7
   1519e:	b003      	add	sp, #12
   151a0:	bd90      	pop	{r4, r7, pc}
   151a2:	46c0      	nop			; (mov r8, r8)
   151a4:	20000488 	.word	0x20000488
   151a8:	20000024 	.word	0x20000024
   151ac:	20000025 	.word	0x20000025

000151b0 <system_pinmux_get_group_from_gpio_pin>:
{
   151b0:	b580      	push	{r7, lr}
   151b2:	b084      	sub	sp, #16
   151b4:	af00      	add	r7, sp, #0
   151b6:	0002      	movs	r2, r0
   151b8:	1dfb      	adds	r3, r7, #7
   151ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   151bc:	230f      	movs	r3, #15
   151be:	18fb      	adds	r3, r7, r3
   151c0:	1dfa      	adds	r2, r7, #7
   151c2:	7812      	ldrb	r2, [r2, #0]
   151c4:	09d2      	lsrs	r2, r2, #7
   151c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   151c8:	230e      	movs	r3, #14
   151ca:	18fb      	adds	r3, r7, r3
   151cc:	1dfa      	adds	r2, r7, #7
   151ce:	7812      	ldrb	r2, [r2, #0]
   151d0:	0952      	lsrs	r2, r2, #5
   151d2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   151d4:	4b0d      	ldr	r3, [pc, #52]	; (1520c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   151d6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   151d8:	230f      	movs	r3, #15
   151da:	18fb      	adds	r3, r7, r3
   151dc:	781b      	ldrb	r3, [r3, #0]
   151de:	2b00      	cmp	r3, #0
   151e0:	d10f      	bne.n	15202 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   151e2:	230f      	movs	r3, #15
   151e4:	18fb      	adds	r3, r7, r3
   151e6:	781b      	ldrb	r3, [r3, #0]
   151e8:	009b      	lsls	r3, r3, #2
   151ea:	2210      	movs	r2, #16
   151ec:	4694      	mov	ip, r2
   151ee:	44bc      	add	ip, r7
   151f0:	4463      	add	r3, ip
   151f2:	3b08      	subs	r3, #8
   151f4:	681a      	ldr	r2, [r3, #0]
   151f6:	230e      	movs	r3, #14
   151f8:	18fb      	adds	r3, r7, r3
   151fa:	781b      	ldrb	r3, [r3, #0]
   151fc:	01db      	lsls	r3, r3, #7
   151fe:	18d3      	adds	r3, r2, r3
   15200:	e000      	b.n	15204 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   15202:	2300      	movs	r3, #0
}
   15204:	0018      	movs	r0, r3
   15206:	46bd      	mov	sp, r7
   15208:	b004      	add	sp, #16
   1520a:	bd80      	pop	{r7, pc}
   1520c:	41004400 	.word	0x41004400

00015210 <port_get_group_from_gpio_pin>:
{
   15210:	b580      	push	{r7, lr}
   15212:	b082      	sub	sp, #8
   15214:	af00      	add	r7, sp, #0
   15216:	0002      	movs	r2, r0
   15218:	1dfb      	adds	r3, r7, #7
   1521a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1521c:	1dfb      	adds	r3, r7, #7
   1521e:	781b      	ldrb	r3, [r3, #0]
   15220:	0018      	movs	r0, r3
   15222:	4b03      	ldr	r3, [pc, #12]	; (15230 <port_get_group_from_gpio_pin+0x20>)
   15224:	4798      	blx	r3
   15226:	0003      	movs	r3, r0
}
   15228:	0018      	movs	r0, r3
   1522a:	46bd      	mov	sp, r7
   1522c:	b002      	add	sp, #8
   1522e:	bd80      	pop	{r7, pc}
   15230:	000151b1 	.word	0x000151b1

00015234 <port_pin_set_output_level>:
{
   15234:	b580      	push	{r7, lr}
   15236:	b084      	sub	sp, #16
   15238:	af00      	add	r7, sp, #0
   1523a:	0002      	movs	r2, r0
   1523c:	1dfb      	adds	r3, r7, #7
   1523e:	701a      	strb	r2, [r3, #0]
   15240:	1dbb      	adds	r3, r7, #6
   15242:	1c0a      	adds	r2, r1, #0
   15244:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15246:	1dfb      	adds	r3, r7, #7
   15248:	781b      	ldrb	r3, [r3, #0]
   1524a:	0018      	movs	r0, r3
   1524c:	4b0d      	ldr	r3, [pc, #52]	; (15284 <port_pin_set_output_level+0x50>)
   1524e:	4798      	blx	r3
   15250:	0003      	movs	r3, r0
   15252:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15254:	1dfb      	adds	r3, r7, #7
   15256:	781b      	ldrb	r3, [r3, #0]
   15258:	221f      	movs	r2, #31
   1525a:	4013      	ands	r3, r2
   1525c:	2201      	movs	r2, #1
   1525e:	409a      	lsls	r2, r3
   15260:	0013      	movs	r3, r2
   15262:	60bb      	str	r3, [r7, #8]
	if (level) {
   15264:	1dbb      	adds	r3, r7, #6
   15266:	781b      	ldrb	r3, [r3, #0]
   15268:	2b00      	cmp	r3, #0
   1526a:	d003      	beq.n	15274 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1526c:	68fb      	ldr	r3, [r7, #12]
   1526e:	68ba      	ldr	r2, [r7, #8]
   15270:	619a      	str	r2, [r3, #24]
}
   15272:	e002      	b.n	1527a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15274:	68fb      	ldr	r3, [r7, #12]
   15276:	68ba      	ldr	r2, [r7, #8]
   15278:	615a      	str	r2, [r3, #20]
}
   1527a:	46c0      	nop			; (mov r8, r8)
   1527c:	46bd      	mov	sp, r7
   1527e:	b004      	add	sp, #16
   15280:	bd80      	pop	{r7, pc}
   15282:	46c0      	nop			; (mov r8, r8)
   15284:	00015211 	.word	0x00015211

00015288 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15288:	b580      	push	{r7, lr}
   1528a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   1528c:	4b02      	ldr	r3, [pc, #8]	; (15298 <init_state+0x10>)
   1528e:	2200      	movs	r2, #0
   15290:	701a      	strb	r2, [r3, #0]
}
   15292:	46c0      	nop			; (mov r8, r8)
   15294:	46bd      	mov	sp, r7
   15296:	bd80      	pop	{r7, pc}
   15298:	200004b5 	.word	0x200004b5

0001529c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   1529c:	b580      	push	{r7, lr}
   1529e:	b082      	sub	sp, #8
   152a0:	af00      	add	r7, sp, #0
   152a2:	0002      	movs	r2, r0
   152a4:	1dfb      	adds	r3, r7, #7
   152a6:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   152a8:	1dfb      	adds	r3, r7, #7
   152aa:	781b      	ldrb	r3, [r3, #0]
   152ac:	b25b      	sxtb	r3, r3
   152ae:	43db      	mvns	r3, r3
   152b0:	b25b      	sxtb	r3, r3
   152b2:	4a06      	ldr	r2, [pc, #24]	; (152cc <clear_state+0x30>)
   152b4:	7812      	ldrb	r2, [r2, #0]
   152b6:	b252      	sxtb	r2, r2
   152b8:	4013      	ands	r3, r2
   152ba:	b25b      	sxtb	r3, r3
   152bc:	b2da      	uxtb	r2, r3
   152be:	4b03      	ldr	r3, [pc, #12]	; (152cc <clear_state+0x30>)
   152c0:	701a      	strb	r2, [r3, #0]
}
   152c2:	46c0      	nop			; (mov r8, r8)
   152c4:	46bd      	mov	sp, r7
   152c6:	b002      	add	sp, #8
   152c8:	bd80      	pop	{r7, pc}
   152ca:	46c0      	nop			; (mov r8, r8)
   152cc:	200004b5 	.word	0x200004b5

000152d0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   152d0:	b580      	push	{r7, lr}
   152d2:	b082      	sub	sp, #8
   152d4:	af00      	add	r7, sp, #0
   152d6:	0002      	movs	r2, r0
   152d8:	1dfb      	adds	r3, r7, #7
   152da:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   152dc:	4b05      	ldr	r3, [pc, #20]	; (152f4 <add_state+0x24>)
   152de:	781a      	ldrb	r2, [r3, #0]
   152e0:	1dfb      	adds	r3, r7, #7
   152e2:	781b      	ldrb	r3, [r3, #0]
   152e4:	4313      	orrs	r3, r2
   152e6:	b2da      	uxtb	r2, r3
   152e8:	4b02      	ldr	r3, [pc, #8]	; (152f4 <add_state+0x24>)
   152ea:	701a      	strb	r2, [r3, #0]
}
   152ec:	46c0      	nop			; (mov r8, r8)
   152ee:	46bd      	mov	sp, r7
   152f0:	b002      	add	sp, #8
   152f2:	bd80      	pop	{r7, pc}
   152f4:	200004b5 	.word	0x200004b5

000152f8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   152f8:	b580      	push	{r7, lr}
   152fa:	b082      	sub	sp, #8
   152fc:	af00      	add	r7, sp, #0
   152fe:	0002      	movs	r2, r0
   15300:	1dfb      	adds	r3, r7, #7
   15302:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   15304:	4b06      	ldr	r3, [pc, #24]	; (15320 <is_state_set+0x28>)
   15306:	781b      	ldrb	r3, [r3, #0]
   15308:	1dfa      	adds	r2, r7, #7
   1530a:	7812      	ldrb	r2, [r2, #0]
   1530c:	4013      	ands	r3, r2
   1530e:	b2db      	uxtb	r3, r3
   15310:	1e5a      	subs	r2, r3, #1
   15312:	4193      	sbcs	r3, r2
   15314:	b2db      	uxtb	r3, r3
}
   15316:	0018      	movs	r0, r3
   15318:	46bd      	mov	sp, r7
   1531a:	b002      	add	sp, #8
   1531c:	bd80      	pop	{r7, pc}
   1531e:	46c0      	nop			; (mov r8, r8)
   15320:	200004b5 	.word	0x200004b5

00015324 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   15324:	b590      	push	{r4, r7, lr}
   15326:	b085      	sub	sp, #20
   15328:	af00      	add	r7, sp, #0
   1532a:	6078      	str	r0, [r7, #4]
   1532c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   1532e:	687b      	ldr	r3, [r7, #4]
   15330:	2b00      	cmp	r3, #0
   15332:	d002      	beq.n	1533a <is_exist_file+0x16>
   15334:	683b      	ldr	r3, [r7, #0]
   15336:	2b00      	cmp	r3, #0
   15338:	d101      	bne.n	1533e <is_exist_file+0x1a>
        return false;
   1533a:	2300      	movs	r3, #0
   1533c:	e013      	b.n	15366 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1533e:	230f      	movs	r3, #15
   15340:	18fc      	adds	r4, r7, r3
   15342:	6839      	ldr	r1, [r7, #0]
   15344:	4b0a      	ldr	r3, [pc, #40]	; (15370 <is_exist_file+0x4c>)
   15346:	2200      	movs	r2, #0
   15348:	0018      	movs	r0, r3
   1534a:	4b0a      	ldr	r3, [pc, #40]	; (15374 <is_exist_file+0x50>)
   1534c:	4798      	blx	r3
   1534e:	0003      	movs	r3, r0
   15350:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   15352:	4b07      	ldr	r3, [pc, #28]	; (15370 <is_exist_file+0x4c>)
   15354:	0018      	movs	r0, r3
   15356:	4b08      	ldr	r3, [pc, #32]	; (15378 <is_exist_file+0x54>)
   15358:	4798      	blx	r3
    return (ret == FR_OK);
   1535a:	230f      	movs	r3, #15
   1535c:	18fb      	adds	r3, r7, r3
   1535e:	781b      	ldrb	r3, [r3, #0]
   15360:	425a      	negs	r2, r3
   15362:	4153      	adcs	r3, r2
   15364:	b2db      	uxtb	r3, r3
}
   15366:	0018      	movs	r0, r3
   15368:	46bd      	mov	sp, r7
   1536a:	b005      	add	sp, #20
   1536c:	bd90      	pop	{r4, r7, pc}
   1536e:	46c0      	nop			; (mov r8, r8)
   15370:	200006e8 	.word	0x200006e8
   15374:	0002d1fd 	.word	0x0002d1fd
   15378:	0002dbfd 	.word	0x0002dbfd

0001537c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   1537c:	b580      	push	{r7, lr}
   1537e:	b09e      	sub	sp, #120	; 0x78
   15380:	af00      	add	r7, sp, #0
   15382:	60f8      	str	r0, [r7, #12]
   15384:	60b9      	str	r1, [r7, #8]
   15386:	1dfb      	adds	r3, r7, #7
   15388:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1538a:	2376      	movs	r3, #118	; 0x76
   1538c:	18fb      	adds	r3, r7, r3
   1538e:	2201      	movs	r2, #1
   15390:	801a      	strh	r2, [r3, #0]
   15392:	2374      	movs	r3, #116	; 0x74
   15394:	18fb      	adds	r3, r7, r3
   15396:	2200      	movs	r2, #0
   15398:	801a      	strh	r2, [r3, #0]
   1539a:	236e      	movs	r3, #110	; 0x6e
   1539c:	18fb      	adds	r3, r7, r3
   1539e:	2200      	movs	r2, #0
   153a0:	801a      	strh	r2, [r3, #0]
   153a2:	2372      	movs	r3, #114	; 0x72
   153a4:	18fb      	adds	r3, r7, r3
   153a6:	2200      	movs	r2, #0
   153a8:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   153aa:	2324      	movs	r3, #36	; 0x24
   153ac:	18fb      	adds	r3, r7, r3
   153ae:	0018      	movs	r0, r3
   153b0:	2341      	movs	r3, #65	; 0x41
   153b2:	001a      	movs	r2, r3
   153b4:	2100      	movs	r1, #0
   153b6:	4b92      	ldr	r3, [pc, #584]	; (15600 <rename_to_unique+0x284>)
   153b8:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   153ba:	2318      	movs	r3, #24
   153bc:	18fb      	adds	r3, r7, r3
   153be:	0018      	movs	r0, r3
   153c0:	2309      	movs	r3, #9
   153c2:	001a      	movs	r2, r3
   153c4:	2100      	movs	r1, #0
   153c6:	4b8e      	ldr	r3, [pc, #568]	; (15600 <rename_to_unique+0x284>)
   153c8:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   153ca:	2314      	movs	r3, #20
   153cc:	18fb      	adds	r3, r7, r3
   153ce:	2200      	movs	r2, #0
   153d0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   153d2:	2300      	movs	r3, #0
   153d4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   153d6:	2371      	movs	r3, #113	; 0x71
   153d8:	18fb      	adds	r3, r7, r3
   153da:	2200      	movs	r2, #0
   153dc:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   153de:	68bb      	ldr	r3, [r7, #8]
   153e0:	2b00      	cmp	r3, #0
   153e2:	d101      	bne.n	153e8 <rename_to_unique+0x6c>
        return false;
   153e4:	2300      	movs	r3, #0
   153e6:	e106      	b.n	155f6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   153e8:	68ba      	ldr	r2, [r7, #8]
   153ea:	68fb      	ldr	r3, [r7, #12]
   153ec:	0011      	movs	r1, r2
   153ee:	0018      	movs	r0, r3
   153f0:	4b84      	ldr	r3, [pc, #528]	; (15604 <rename_to_unique+0x288>)
   153f2:	4798      	blx	r3
   153f4:	0003      	movs	r3, r0
   153f6:	001a      	movs	r2, r3
   153f8:	2301      	movs	r3, #1
   153fa:	4053      	eors	r3, r2
   153fc:	b2db      	uxtb	r3, r3
   153fe:	2b00      	cmp	r3, #0
   15400:	d001      	beq.n	15406 <rename_to_unique+0x8a>
        return true;
   15402:	2301      	movs	r3, #1
   15404:	e0f7      	b.n	155f6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15406:	68bb      	ldr	r3, [r7, #8]
   15408:	0018      	movs	r0, r3
   1540a:	4b7f      	ldr	r3, [pc, #508]	; (15608 <rename_to_unique+0x28c>)
   1540c:	4798      	blx	r3
   1540e:	0003      	movs	r3, r0
   15410:	2b40      	cmp	r3, #64	; 0x40
   15412:	d901      	bls.n	15418 <rename_to_unique+0x9c>
        return false;
   15414:	2300      	movs	r3, #0
   15416:	e0ee      	b.n	155f6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   15418:	68bb      	ldr	r3, [r7, #8]
   1541a:	212e      	movs	r1, #46	; 0x2e
   1541c:	0018      	movs	r0, r3
   1541e:	4b7b      	ldr	r3, [pc, #492]	; (1560c <rename_to_unique+0x290>)
   15420:	4798      	blx	r3
   15422:	0003      	movs	r3, r0
   15424:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   15426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15428:	2b00      	cmp	r3, #0
   1542a:	d052      	beq.n	154d2 <rename_to_unique+0x156>
        ext_len = strlen(p);
   1542c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1542e:	0018      	movs	r0, r3
   15430:	4b75      	ldr	r3, [pc, #468]	; (15608 <rename_to_unique+0x28c>)
   15432:	4798      	blx	r3
   15434:	0002      	movs	r2, r0
   15436:	236e      	movs	r3, #110	; 0x6e
   15438:	18fb      	adds	r3, r7, r3
   1543a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   1543c:	236e      	movs	r3, #110	; 0x6e
   1543e:	18fb      	adds	r3, r7, r3
   15440:	881b      	ldrh	r3, [r3, #0]
   15442:	2b07      	cmp	r3, #7
   15444:	d837      	bhi.n	154b6 <rename_to_unique+0x13a>
            valid_ext = true;
   15446:	2371      	movs	r3, #113	; 0x71
   15448:	18fb      	adds	r3, r7, r3
   1544a:	2201      	movs	r2, #1
   1544c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   1544e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15450:	2318      	movs	r3, #24
   15452:	18fb      	adds	r3, r7, r3
   15454:	0011      	movs	r1, r2
   15456:	0018      	movs	r0, r3
   15458:	4b6d      	ldr	r3, [pc, #436]	; (15610 <rename_to_unique+0x294>)
   1545a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   1545c:	68bb      	ldr	r3, [r7, #8]
   1545e:	0018      	movs	r0, r3
   15460:	4b69      	ldr	r3, [pc, #420]	; (15608 <rename_to_unique+0x28c>)
   15462:	4798      	blx	r3
   15464:	0002      	movs	r2, r0
   15466:	236e      	movs	r3, #110	; 0x6e
   15468:	18fb      	adds	r3, r7, r3
   1546a:	881b      	ldrh	r3, [r3, #0]
   1546c:	1ad3      	subs	r3, r2, r3
   1546e:	2b3c      	cmp	r3, #60	; 0x3c
   15470:	d911      	bls.n	15496 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15472:	2374      	movs	r3, #116	; 0x74
   15474:	18fb      	adds	r3, r7, r3
   15476:	226e      	movs	r2, #110	; 0x6e
   15478:	18ba      	adds	r2, r7, r2
   1547a:	8812      	ldrh	r2, [r2, #0]
   1547c:	213c      	movs	r1, #60	; 0x3c
   1547e:	1a8a      	subs	r2, r1, r2
   15480:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15482:	2374      	movs	r3, #116	; 0x74
   15484:	18fb      	adds	r3, r7, r3
   15486:	881a      	ldrh	r2, [r3, #0]
   15488:	68b9      	ldr	r1, [r7, #8]
   1548a:	2324      	movs	r3, #36	; 0x24
   1548c:	18fb      	adds	r3, r7, r3
   1548e:	0018      	movs	r0, r3
   15490:	4b60      	ldr	r3, [pc, #384]	; (15614 <rename_to_unique+0x298>)
   15492:	4798      	blx	r3
   15494:	e02a      	b.n	154ec <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   15496:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15498:	68bb      	ldr	r3, [r7, #8]
   1549a:	1ad2      	subs	r2, r2, r3
   1549c:	2374      	movs	r3, #116	; 0x74
   1549e:	18fb      	adds	r3, r7, r3
   154a0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   154a2:	2374      	movs	r3, #116	; 0x74
   154a4:	18fb      	adds	r3, r7, r3
   154a6:	881a      	ldrh	r2, [r3, #0]
   154a8:	68b9      	ldr	r1, [r7, #8]
   154aa:	2324      	movs	r3, #36	; 0x24
   154ac:	18fb      	adds	r3, r7, r3
   154ae:	0018      	movs	r0, r3
   154b0:	4b58      	ldr	r3, [pc, #352]	; (15614 <rename_to_unique+0x298>)
   154b2:	4798      	blx	r3
   154b4:	e01a      	b.n	154ec <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   154b6:	2374      	movs	r3, #116	; 0x74
   154b8:	18fb      	adds	r3, r7, r3
   154ba:	223c      	movs	r2, #60	; 0x3c
   154bc:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   154be:	2374      	movs	r3, #116	; 0x74
   154c0:	18fb      	adds	r3, r7, r3
   154c2:	881a      	ldrh	r2, [r3, #0]
   154c4:	68b9      	ldr	r1, [r7, #8]
   154c6:	2324      	movs	r3, #36	; 0x24
   154c8:	18fb      	adds	r3, r7, r3
   154ca:	0018      	movs	r0, r3
   154cc:	4b51      	ldr	r3, [pc, #324]	; (15614 <rename_to_unique+0x298>)
   154ce:	4798      	blx	r3
   154d0:	e00c      	b.n	154ec <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   154d2:	2374      	movs	r3, #116	; 0x74
   154d4:	18fb      	adds	r3, r7, r3
   154d6:	223c      	movs	r2, #60	; 0x3c
   154d8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   154da:	2374      	movs	r3, #116	; 0x74
   154dc:	18fb      	adds	r3, r7, r3
   154de:	881a      	ldrh	r2, [r3, #0]
   154e0:	68b9      	ldr	r1, [r7, #8]
   154e2:	2324      	movs	r3, #36	; 0x24
   154e4:	18fb      	adds	r3, r7, r3
   154e6:	0018      	movs	r0, r3
   154e8:	4b4a      	ldr	r3, [pc, #296]	; (15614 <rename_to_unique+0x298>)
   154ea:	4798      	blx	r3
    }

    name[name_len++] = '-';
   154ec:	2374      	movs	r3, #116	; 0x74
   154ee:	18fb      	adds	r3, r7, r3
   154f0:	881b      	ldrh	r3, [r3, #0]
   154f2:	2274      	movs	r2, #116	; 0x74
   154f4:	18ba      	adds	r2, r7, r2
   154f6:	1c59      	adds	r1, r3, #1
   154f8:	8011      	strh	r1, [r2, #0]
   154fa:	001a      	movs	r2, r3
   154fc:	2324      	movs	r3, #36	; 0x24
   154fe:	18fb      	adds	r3, r7, r3
   15500:	212d      	movs	r1, #45	; 0x2d
   15502:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15504:	2376      	movs	r3, #118	; 0x76
   15506:	18fb      	adds	r3, r7, r3
   15508:	2200      	movs	r2, #0
   1550a:	801a      	strh	r2, [r3, #0]
   1550c:	2372      	movs	r3, #114	; 0x72
   1550e:	18fb      	adds	r3, r7, r3
   15510:	2201      	movs	r2, #1
   15512:	801a      	strh	r2, [r3, #0]
   15514:	e010      	b.n	15538 <rename_to_unique+0x1bc>
        count *= 10;
   15516:	2372      	movs	r3, #114	; 0x72
   15518:	18fa      	adds	r2, r7, r3
   1551a:	2372      	movs	r3, #114	; 0x72
   1551c:	18fb      	adds	r3, r7, r3
   1551e:	881b      	ldrh	r3, [r3, #0]
   15520:	1c19      	adds	r1, r3, #0
   15522:	0089      	lsls	r1, r1, #2
   15524:	18cb      	adds	r3, r1, r3
   15526:	18db      	adds	r3, r3, r3
   15528:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1552a:	2376      	movs	r3, #118	; 0x76
   1552c:	18fb      	adds	r3, r7, r3
   1552e:	881a      	ldrh	r2, [r3, #0]
   15530:	2376      	movs	r3, #118	; 0x76
   15532:	18fb      	adds	r3, r7, r3
   15534:	3201      	adds	r2, #1
   15536:	801a      	strh	r2, [r3, #0]
   15538:	2376      	movs	r3, #118	; 0x76
   1553a:	18fb      	adds	r3, r7, r3
   1553c:	881b      	ldrh	r3, [r3, #0]
   1553e:	2b02      	cmp	r3, #2
   15540:	d9e9      	bls.n	15516 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   15542:	2376      	movs	r3, #118	; 0x76
   15544:	18fb      	adds	r3, r7, r3
   15546:	2201      	movs	r2, #1
   15548:	801a      	strh	r2, [r3, #0]
   1554a:	e04b      	b.n	155e4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   1554c:	2376      	movs	r3, #118	; 0x76
   1554e:	18fb      	adds	r3, r7, r3
   15550:	881a      	ldrh	r2, [r3, #0]
   15552:	4931      	ldr	r1, [pc, #196]	; (15618 <rename_to_unique+0x29c>)
   15554:	2314      	movs	r3, #20
   15556:	18fb      	adds	r3, r7, r3
   15558:	0018      	movs	r0, r3
   1555a:	4b30      	ldr	r3, [pc, #192]	; (1561c <rename_to_unique+0x2a0>)
   1555c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   1555e:	2374      	movs	r3, #116	; 0x74
   15560:	18fb      	adds	r3, r7, r3
   15562:	881b      	ldrh	r3, [r3, #0]
   15564:	2224      	movs	r2, #36	; 0x24
   15566:	18ba      	adds	r2, r7, r2
   15568:	18d3      	adds	r3, r2, r3
   1556a:	2214      	movs	r2, #20
   1556c:	18b9      	adds	r1, r7, r2
   1556e:	2203      	movs	r2, #3
   15570:	0018      	movs	r0, r3
   15572:	4b28      	ldr	r3, [pc, #160]	; (15614 <rename_to_unique+0x298>)
   15574:	4798      	blx	r3
        if (valid_ext) {
   15576:	2371      	movs	r3, #113	; 0x71
   15578:	18fb      	adds	r3, r7, r3
   1557a:	781b      	ldrb	r3, [r3, #0]
   1557c:	2b00      	cmp	r3, #0
   1557e:	d00c      	beq.n	1559a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15580:	2374      	movs	r3, #116	; 0x74
   15582:	18fb      	adds	r3, r7, r3
   15584:	881b      	ldrh	r3, [r3, #0]
   15586:	3303      	adds	r3, #3
   15588:	2224      	movs	r2, #36	; 0x24
   1558a:	18ba      	adds	r2, r7, r2
   1558c:	18d3      	adds	r3, r2, r3
   1558e:	2218      	movs	r2, #24
   15590:	18ba      	adds	r2, r7, r2
   15592:	0011      	movs	r1, r2
   15594:	0018      	movs	r0, r3
   15596:	4b1e      	ldr	r3, [pc, #120]	; (15610 <rename_to_unique+0x294>)
   15598:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1559a:	2324      	movs	r3, #36	; 0x24
   1559c:	18fa      	adds	r2, r7, r3
   1559e:	68fb      	ldr	r3, [r7, #12]
   155a0:	0011      	movs	r1, r2
   155a2:	0018      	movs	r0, r3
   155a4:	4b17      	ldr	r3, [pc, #92]	; (15604 <rename_to_unique+0x288>)
   155a6:	4798      	blx	r3
   155a8:	0003      	movs	r3, r0
   155aa:	001a      	movs	r2, r3
   155ac:	2301      	movs	r3, #1
   155ae:	4053      	eors	r3, r2
   155b0:	b2db      	uxtb	r3, r3
   155b2:	2b00      	cmp	r3, #0
   155b4:	d00f      	beq.n	155d6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   155b6:	1dfb      	adds	r3, r7, #7
   155b8:	781a      	ldrb	r2, [r3, #0]
   155ba:	68bb      	ldr	r3, [r7, #8]
   155bc:	2100      	movs	r1, #0
   155be:	0018      	movs	r0, r3
   155c0:	4b0f      	ldr	r3, [pc, #60]	; (15600 <rename_to_unique+0x284>)
   155c2:	4798      	blx	r3
            strcpy(file_path_name, name);
   155c4:	2324      	movs	r3, #36	; 0x24
   155c6:	18fa      	adds	r2, r7, r3
   155c8:	68bb      	ldr	r3, [r7, #8]
   155ca:	0011      	movs	r1, r2
   155cc:	0018      	movs	r0, r3
   155ce:	4b10      	ldr	r3, [pc, #64]	; (15610 <rename_to_unique+0x294>)
   155d0:	4798      	blx	r3
            return true;
   155d2:	2301      	movs	r3, #1
   155d4:	e00f      	b.n	155f6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   155d6:	2376      	movs	r3, #118	; 0x76
   155d8:	18fb      	adds	r3, r7, r3
   155da:	881a      	ldrh	r2, [r3, #0]
   155dc:	2376      	movs	r3, #118	; 0x76
   155de:	18fb      	adds	r3, r7, r3
   155e0:	3201      	adds	r2, #1
   155e2:	801a      	strh	r2, [r3, #0]
   155e4:	2376      	movs	r3, #118	; 0x76
   155e6:	18fa      	adds	r2, r7, r3
   155e8:	2372      	movs	r3, #114	; 0x72
   155ea:	18fb      	adds	r3, r7, r3
   155ec:	8812      	ldrh	r2, [r2, #0]
   155ee:	881b      	ldrh	r3, [r3, #0]
   155f0:	429a      	cmp	r2, r3
   155f2:	d3ab      	bcc.n	1554c <rename_to_unique+0x1d0>
        }
    }
    return false;
   155f4:	2300      	movs	r3, #0
}
   155f6:	0018      	movs	r0, r3
   155f8:	46bd      	mov	sp, r7
   155fa:	b01e      	add	sp, #120	; 0x78
   155fc:	bd80      	pop	{r7, pc}
   155fe:	46c0      	nop			; (mov r8, r8)
   15600:	00034317 	.word	0x00034317
   15604:	00015325 	.word	0x00015325
   15608:	000346cf 	.word	0x000346cf
   1560c:	00034729 	.word	0x00034729
   15610:	00034683 	.word	0x00034683
   15614:	000346ff 	.word	0x000346ff
   15618:	00035bf8 	.word	0x00035bf8
   1561c:	000345d5 	.word	0x000345d5

00015620 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   15620:	b590      	push	{r4, r7, lr}
   15622:	b083      	sub	sp, #12
   15624:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   15626:	2001      	movs	r0, #1
   15628:	4b22      	ldr	r3, [pc, #136]	; (156b4 <start_download+0x94>)
   1562a:	4798      	blx	r3
   1562c:	0003      	movs	r3, r0
   1562e:	001a      	movs	r2, r3
   15630:	2301      	movs	r3, #1
   15632:	4053      	eors	r3, r2
   15634:	b2db      	uxtb	r3, r3
   15636:	2b00      	cmp	r3, #0
   15638:	d005      	beq.n	15646 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1563a:	4b1f      	ldr	r3, [pc, #124]	; (156b8 <start_download+0x98>)
   1563c:	0019      	movs	r1, r3
   1563e:	2001      	movs	r0, #1
   15640:	4b1e      	ldr	r3, [pc, #120]	; (156bc <start_download+0x9c>)
   15642:	4798      	blx	r3
        return;
   15644:	e032      	b.n	156ac <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   15646:	2002      	movs	r0, #2
   15648:	4b1a      	ldr	r3, [pc, #104]	; (156b4 <start_download+0x94>)
   1564a:	4798      	blx	r3
   1564c:	0003      	movs	r3, r0
   1564e:	001a      	movs	r2, r3
   15650:	2301      	movs	r3, #1
   15652:	4053      	eors	r3, r2
   15654:	b2db      	uxtb	r3, r3
   15656:	2b00      	cmp	r3, #0
   15658:	d005      	beq.n	15666 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1565a:	4b19      	ldr	r3, [pc, #100]	; (156c0 <start_download+0xa0>)
   1565c:	0019      	movs	r1, r3
   1565e:	2001      	movs	r0, #1
   15660:	4b16      	ldr	r3, [pc, #88]	; (156bc <start_download+0x9c>)
   15662:	4798      	blx	r3
        return;
   15664:	e022      	b.n	156ac <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   15666:	2004      	movs	r0, #4
   15668:	4b12      	ldr	r3, [pc, #72]	; (156b4 <start_download+0x94>)
   1566a:	4798      	blx	r3
   1566c:	1e03      	subs	r3, r0, #0
   1566e:	d005      	beq.n	1567c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   15670:	4b14      	ldr	r3, [pc, #80]	; (156c4 <start_download+0xa4>)
   15672:	0019      	movs	r1, r3
   15674:	2001      	movs	r0, #1
   15676:	4b11      	ldr	r3, [pc, #68]	; (156bc <start_download+0x9c>)
   15678:	4798      	blx	r3
        return;
   1567a:	e017      	b.n	156ac <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   1567c:	2008      	movs	r0, #8
   1567e:	4b0d      	ldr	r3, [pc, #52]	; (156b4 <start_download+0x94>)
   15680:	4798      	blx	r3
   15682:	1e03      	subs	r3, r0, #0
   15684:	d005      	beq.n	15692 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   15686:	4b10      	ldr	r3, [pc, #64]	; (156c8 <start_download+0xa8>)
   15688:	0019      	movs	r1, r3
   1568a:	2001      	movs	r0, #1
   1568c:	4b0b      	ldr	r3, [pc, #44]	; (156bc <start_download+0x9c>)
   1568e:	4798      	blx	r3
        return;
   15690:	e00c      	b.n	156ac <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   15692:	4b0e      	ldr	r3, [pc, #56]	; (156cc <start_download+0xac>)
   15694:	0019      	movs	r1, r3
   15696:	2001      	movs	r0, #1
   15698:	4b08      	ldr	r3, [pc, #32]	; (156bc <start_download+0x9c>)
   1569a:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   1569c:	490c      	ldr	r1, [pc, #48]	; (156d0 <start_download+0xb0>)
   1569e:	480d      	ldr	r0, [pc, #52]	; (156d4 <start_download+0xb4>)
   156a0:	2300      	movs	r3, #0
   156a2:	9300      	str	r3, [sp, #0]
   156a4:	2300      	movs	r3, #0
   156a6:	2201      	movs	r2, #1
   156a8:	4c0b      	ldr	r4, [pc, #44]	; (156d8 <start_download+0xb8>)
   156aa:	47a0      	blx	r4
}
   156ac:	46bd      	mov	sp, r7
   156ae:	b001      	add	sp, #4
   156b0:	bd90      	pop	{r4, r7, pc}
   156b2:	46c0      	nop			; (mov r8, r8)
   156b4:	000152f9 	.word	0x000152f9
   156b8:	00035c00 	.word	0x00035c00
   156bc:	0001d751 	.word	0x0001d751
   156c0:	00035c2c 	.word	0x00035c2c
   156c4:	00035c58 	.word	0x00035c58
   156c8:	00035c84 	.word	0x00035c84
   156cc:	00035cb0 	.word	0x00035cb0
   156d0:	00035cdc 	.word	0x00035cdc
   156d4:	2000470c 	.word	0x2000470c
   156d8:	00030851 	.word	0x00030851

000156dc <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   156dc:	b5b0      	push	{r4, r5, r7, lr}
   156de:	b086      	sub	sp, #24
   156e0:	af00      	add	r7, sp, #0
   156e2:	6078      	str	r0, [r7, #4]
   156e4:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   156e6:	687b      	ldr	r3, [r7, #4]
   156e8:	2b00      	cmp	r3, #0
   156ea:	d002      	beq.n	156f2 <store_file_packet+0x16>
   156ec:	683b      	ldr	r3, [r7, #0]
   156ee:	2b00      	cmp	r3, #0
   156f0:	d105      	bne.n	156fe <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   156f2:	4b58      	ldr	r3, [pc, #352]	; (15854 <store_file_packet+0x178>)
   156f4:	0019      	movs	r1, r3
   156f6:	2001      	movs	r0, #1
   156f8:	4b57      	ldr	r3, [pc, #348]	; (15858 <store_file_packet+0x17c>)
   156fa:	4798      	blx	r3
        return;
   156fc:	e0a6      	b.n	1584c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   156fe:	2008      	movs	r0, #8
   15700:	4b56      	ldr	r3, [pc, #344]	; (1585c <store_file_packet+0x180>)
   15702:	4798      	blx	r3
   15704:	0003      	movs	r3, r0
   15706:	001a      	movs	r2, r3
   15708:	2301      	movs	r3, #1
   1570a:	4053      	eors	r3, r2
   1570c:	b2db      	uxtb	r3, r3
   1570e:	2b00      	cmp	r3, #0
   15710:	d055      	beq.n	157be <store_file_packet+0xe2>
        char *cp = NULL;
   15712:	2300      	movs	r3, #0
   15714:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15716:	4b52      	ldr	r3, [pc, #328]	; (15860 <store_file_packet+0x184>)
   15718:	2230      	movs	r2, #48	; 0x30
   1571a:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   1571c:	4b50      	ldr	r3, [pc, #320]	; (15860 <store_file_packet+0x184>)
   1571e:	223a      	movs	r2, #58	; 0x3a
   15720:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   15722:	4b50      	ldr	r3, [pc, #320]	; (15864 <store_file_packet+0x188>)
   15724:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15726:	e002      	b.n	1572e <store_file_packet+0x52>
            cp--;
   15728:	697b      	ldr	r3, [r7, #20]
   1572a:	3b01      	subs	r3, #1
   1572c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1572e:	697b      	ldr	r3, [r7, #20]
   15730:	781b      	ldrb	r3, [r3, #0]
   15732:	2b2f      	cmp	r3, #47	; 0x2f
   15734:	d1f8      	bne.n	15728 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   15736:	697b      	ldr	r3, [r7, #20]
   15738:	0018      	movs	r0, r3
   1573a:	4b4b      	ldr	r3, [pc, #300]	; (15868 <store_file_packet+0x18c>)
   1573c:	4798      	blx	r3
   1573e:	0003      	movs	r3, r0
   15740:	2b01      	cmp	r3, #1
   15742:	d924      	bls.n	1578e <store_file_packet+0xb2>
            cp++;
   15744:	697b      	ldr	r3, [r7, #20]
   15746:	3301      	adds	r3, #1
   15748:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1574a:	697a      	ldr	r2, [r7, #20]
   1574c:	4b47      	ldr	r3, [pc, #284]	; (1586c <store_file_packet+0x190>)
   1574e:	0011      	movs	r1, r2
   15750:	0018      	movs	r0, r3
   15752:	4b47      	ldr	r3, [pc, #284]	; (15870 <store_file_packet+0x194>)
   15754:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15756:	4942      	ldr	r1, [pc, #264]	; (15860 <store_file_packet+0x184>)
   15758:	4b46      	ldr	r3, [pc, #280]	; (15874 <store_file_packet+0x198>)
   1575a:	2240      	movs	r2, #64	; 0x40
   1575c:	0018      	movs	r0, r3
   1575e:	4b46      	ldr	r3, [pc, #280]	; (15878 <store_file_packet+0x19c>)
   15760:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   15762:	4a3f      	ldr	r2, [pc, #252]	; (15860 <store_file_packet+0x184>)
   15764:	4b45      	ldr	r3, [pc, #276]	; (1587c <store_file_packet+0x1a0>)
   15766:	0019      	movs	r1, r3
   15768:	2001      	movs	r0, #1
   1576a:	4b3b      	ldr	r3, [pc, #236]	; (15858 <store_file_packet+0x17c>)
   1576c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1576e:	2313      	movs	r3, #19
   15770:	18fc      	adds	r4, r7, r3
   15772:	493b      	ldr	r1, [pc, #236]	; (15860 <store_file_packet+0x184>)
   15774:	4b3f      	ldr	r3, [pc, #252]	; (15874 <store_file_packet+0x198>)
   15776:	220a      	movs	r2, #10
   15778:	0018      	movs	r0, r3
   1577a:	4b41      	ldr	r3, [pc, #260]	; (15880 <store_file_packet+0x1a4>)
   1577c:	4798      	blx	r3
   1577e:	0003      	movs	r3, r0
   15780:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15782:	2313      	movs	r3, #19
   15784:	18fb      	adds	r3, r7, r3
   15786:	781b      	ldrb	r3, [r3, #0]
   15788:	2b00      	cmp	r3, #0
   1578a:	d012      	beq.n	157b2 <store_file_packet+0xd6>
   1578c:	e008      	b.n	157a0 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   1578e:	4b3d      	ldr	r3, [pc, #244]	; (15884 <store_file_packet+0x1a8>)
   15790:	0019      	movs	r1, r3
   15792:	2001      	movs	r0, #1
   15794:	4b30      	ldr	r3, [pc, #192]	; (15858 <store_file_packet+0x17c>)
   15796:	4798      	blx	r3
            add_state(CANCELED);
   15798:	2020      	movs	r0, #32
   1579a:	4b3b      	ldr	r3, [pc, #236]	; (15888 <store_file_packet+0x1ac>)
   1579c:	4798      	blx	r3
            return;
   1579e:	e055      	b.n	1584c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   157a0:	2313      	movs	r3, #19
   157a2:	18fb      	adds	r3, r7, r3
   157a4:	781a      	ldrb	r2, [r3, #0]
   157a6:	4b39      	ldr	r3, [pc, #228]	; (1588c <store_file_packet+0x1b0>)
   157a8:	0019      	movs	r1, r3
   157aa:	2001      	movs	r0, #1
   157ac:	4b2a      	ldr	r3, [pc, #168]	; (15858 <store_file_packet+0x17c>)
   157ae:	4798      	blx	r3
            return;
   157b0:	e04c      	b.n	1584c <store_file_packet+0x170>
        }

        received_file_size = 0;
   157b2:	4b37      	ldr	r3, [pc, #220]	; (15890 <store_file_packet+0x1b4>)
   157b4:	2200      	movs	r2, #0
   157b6:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   157b8:	2008      	movs	r0, #8
   157ba:	4b33      	ldr	r3, [pc, #204]	; (15888 <store_file_packet+0x1ac>)
   157bc:	4798      	blx	r3
    }

    if (data != NULL) {
   157be:	687b      	ldr	r3, [r7, #4]
   157c0:	2b00      	cmp	r3, #0
   157c2:	d043      	beq.n	1584c <store_file_packet+0x170>
        UINT wsize = 0;
   157c4:	2300      	movs	r3, #0
   157c6:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   157c8:	2313      	movs	r3, #19
   157ca:	18fc      	adds	r4, r7, r3
   157cc:	230c      	movs	r3, #12
   157ce:	18fb      	adds	r3, r7, r3
   157d0:	683a      	ldr	r2, [r7, #0]
   157d2:	6879      	ldr	r1, [r7, #4]
   157d4:	4827      	ldr	r0, [pc, #156]	; (15874 <store_file_packet+0x198>)
   157d6:	4d2f      	ldr	r5, [pc, #188]	; (15894 <store_file_packet+0x1b8>)
   157d8:	47a8      	blx	r5
   157da:	0003      	movs	r3, r0
   157dc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   157de:	2313      	movs	r3, #19
   157e0:	18fb      	adds	r3, r7, r3
   157e2:	781b      	ldrb	r3, [r3, #0]
   157e4:	2b00      	cmp	r3, #0
   157e6:	d00c      	beq.n	15802 <store_file_packet+0x126>
            f_close(&file_object);
   157e8:	4b22      	ldr	r3, [pc, #136]	; (15874 <store_file_packet+0x198>)
   157ea:	0018      	movs	r0, r3
   157ec:	4b2a      	ldr	r3, [pc, #168]	; (15898 <store_file_packet+0x1bc>)
   157ee:	4798      	blx	r3
            add_state(CANCELED);
   157f0:	2020      	movs	r0, #32
   157f2:	4b25      	ldr	r3, [pc, #148]	; (15888 <store_file_packet+0x1ac>)
   157f4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   157f6:	4b29      	ldr	r3, [pc, #164]	; (1589c <store_file_packet+0x1c0>)
   157f8:	0019      	movs	r1, r3
   157fa:	2001      	movs	r0, #1
   157fc:	4b16      	ldr	r3, [pc, #88]	; (15858 <store_file_packet+0x17c>)
   157fe:	4798      	blx	r3
            return;
   15800:	e024      	b.n	1584c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   15802:	4b23      	ldr	r3, [pc, #140]	; (15890 <store_file_packet+0x1b4>)
   15804:	681a      	ldr	r2, [r3, #0]
   15806:	68fb      	ldr	r3, [r7, #12]
   15808:	18d2      	adds	r2, r2, r3
   1580a:	4b21      	ldr	r3, [pc, #132]	; (15890 <store_file_packet+0x1b4>)
   1580c:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1580e:	4b20      	ldr	r3, [pc, #128]	; (15890 <store_file_packet+0x1b4>)
   15810:	681a      	ldr	r2, [r3, #0]
   15812:	4b23      	ldr	r3, [pc, #140]	; (158a0 <store_file_packet+0x1c4>)
   15814:	681b      	ldr	r3, [r3, #0]
   15816:	4923      	ldr	r1, [pc, #140]	; (158a4 <store_file_packet+0x1c8>)
   15818:	2001      	movs	r0, #1
   1581a:	4c0f      	ldr	r4, [pc, #60]	; (15858 <store_file_packet+0x17c>)
   1581c:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   1581e:	4b1c      	ldr	r3, [pc, #112]	; (15890 <store_file_packet+0x1b4>)
   15820:	681a      	ldr	r2, [r3, #0]
   15822:	4b1f      	ldr	r3, [pc, #124]	; (158a0 <store_file_packet+0x1c4>)
   15824:	681b      	ldr	r3, [r3, #0]
   15826:	429a      	cmp	r2, r3
   15828:	d310      	bcc.n	1584c <store_file_packet+0x170>
            f_close(&file_object);
   1582a:	4b12      	ldr	r3, [pc, #72]	; (15874 <store_file_packet+0x198>)
   1582c:	0018      	movs	r0, r3
   1582e:	4b1a      	ldr	r3, [pc, #104]	; (15898 <store_file_packet+0x1bc>)
   15830:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   15832:	4b1d      	ldr	r3, [pc, #116]	; (158a8 <store_file_packet+0x1cc>)
   15834:	0019      	movs	r1, r3
   15836:	2001      	movs	r0, #1
   15838:	4b07      	ldr	r3, [pc, #28]	; (15858 <store_file_packet+0x17c>)
   1583a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   1583c:	2100      	movs	r1, #0
   1583e:	2017      	movs	r0, #23
   15840:	4b1a      	ldr	r3, [pc, #104]	; (158ac <store_file_packet+0x1d0>)
   15842:	4798      	blx	r3
            add_state(COMPLETED);
   15844:	2010      	movs	r0, #16
   15846:	4b10      	ldr	r3, [pc, #64]	; (15888 <store_file_packet+0x1ac>)
   15848:	4798      	blx	r3
            return;
   1584a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1584c:	46bd      	mov	sp, r7
   1584e:	b006      	add	sp, #24
   15850:	bdb0      	pop	{r4, r5, r7, pc}
   15852:	46c0      	nop			; (mov r8, r8)
   15854:	00035d08 	.word	0x00035d08
   15858:	0001d751 	.word	0x0001d751
   1585c:	000152f9 	.word	0x000152f9
   15860:	200000ac 	.word	0x200000ac
   15864:	00035d04 	.word	0x00035d04
   15868:	000346cf 	.word	0x000346cf
   1586c:	200000ae 	.word	0x200000ae
   15870:	00034683 	.word	0x00034683
   15874:	200006e8 	.word	0x200006e8
   15878:	0001537d 	.word	0x0001537d
   1587c:	00035d6c 	.word	0x00035d6c
   15880:	0002d1fd 	.word	0x0002d1fd
   15884:	00035d2c 	.word	0x00035d2c
   15888:	000152d1 	.word	0x000152d1
   1588c:	00035d94 	.word	0x00035d94
   15890:	20000710 	.word	0x20000710
   15894:	0002d72d 	.word	0x0002d72d
   15898:	0002dbfd 	.word	0x0002dbfd
   1589c:	00035dc8 	.word	0x00035dc8
   158a0:	2000070c 	.word	0x2000070c
   158a4:	00035e04 	.word	0x00035e04
   158a8:	00035e38 	.word	0x00035e38
   158ac:	00015235 	.word	0x00015235

000158b0 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   158b0:	b590      	push	{r4, r7, lr}
   158b2:	b085      	sub	sp, #20
   158b4:	af00      	add	r7, sp, #0
   158b6:	60f8      	str	r0, [r7, #12]
   158b8:	60b9      	str	r1, [r7, #8]
   158ba:	607a      	str	r2, [r7, #4]
    switch (type) {
   158bc:	68bb      	ldr	r3, [r7, #8]
   158be:	2b04      	cmp	r3, #4
   158c0:	d900      	bls.n	158c4 <http_client_callback+0x14>
   158c2:	e077      	b.n	159b4 <http_client_callback+0x104>
   158c4:	68bb      	ldr	r3, [r7, #8]
   158c6:	009a      	lsls	r2, r3, #2
   158c8:	4b3c      	ldr	r3, [pc, #240]	; (159bc <http_client_callback+0x10c>)
   158ca:	18d3      	adds	r3, r2, r3
   158cc:	681b      	ldr	r3, [r3, #0]
   158ce:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   158d0:	4b3b      	ldr	r3, [pc, #236]	; (159c0 <http_client_callback+0x110>)
   158d2:	0019      	movs	r1, r3
   158d4:	2001      	movs	r0, #1
   158d6:	4b3b      	ldr	r3, [pc, #236]	; (159c4 <http_client_callback+0x114>)
   158d8:	4798      	blx	r3
            break;
   158da:	e06b      	b.n	159b4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   158dc:	4b3a      	ldr	r3, [pc, #232]	; (159c8 <http_client_callback+0x118>)
   158de:	0019      	movs	r1, r3
   158e0:	2001      	movs	r0, #1
   158e2:	4b38      	ldr	r3, [pc, #224]	; (159c4 <http_client_callback+0x114>)
   158e4:	4798      	blx	r3
            add_state(GET_REQUESTED);
   158e6:	2004      	movs	r0, #4
   158e8:	4b38      	ldr	r3, [pc, #224]	; (159cc <http_client_callback+0x11c>)
   158ea:	4798      	blx	r3
            break;
   158ec:	e062      	b.n	159b4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   158ee:	687b      	ldr	r3, [r7, #4]
   158f0:	881b      	ldrh	r3, [r3, #0]
   158f2:	001a      	movs	r2, r3
   158f4:	687b      	ldr	r3, [r7, #4]
   158f6:	685b      	ldr	r3, [r3, #4]
   158f8:	4935      	ldr	r1, [pc, #212]	; (159d0 <http_client_callback+0x120>)
   158fa:	2001      	movs	r0, #1
   158fc:	4c31      	ldr	r4, [pc, #196]	; (159c4 <http_client_callback+0x114>)
   158fe:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   15900:	687b      	ldr	r3, [r7, #4]
   15902:	881b      	ldrh	r3, [r3, #0]
   15904:	2bc8      	cmp	r3, #200	; 0xc8
   15906:	d10d      	bne.n	15924 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   15908:	687b      	ldr	r3, [r7, #4]
   1590a:	685a      	ldr	r2, [r3, #4]
   1590c:	4b31      	ldr	r3, [pc, #196]	; (159d4 <http_client_callback+0x124>)
   1590e:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   15910:	4b31      	ldr	r3, [pc, #196]	; (159d8 <http_client_callback+0x128>)
   15912:	2200      	movs	r2, #0
   15914:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   15916:	687b      	ldr	r3, [r7, #4]
   15918:	685a      	ldr	r2, [r3, #4]
   1591a:	2380      	movs	r3, #128	; 0x80
   1591c:	009b      	lsls	r3, r3, #2
   1591e:	429a      	cmp	r2, r3
   15920:	d843      	bhi.n	159aa <http_client_callback+0xfa>
   15922:	e003      	b.n	1592c <http_client_callback+0x7c>
                add_state(CANCELED);
   15924:	2020      	movs	r0, #32
   15926:	4b29      	ldr	r3, [pc, #164]	; (159cc <http_client_callback+0x11c>)
   15928:	4798      	blx	r3
                return;
   1592a:	e043      	b.n	159b4 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1592c:	687b      	ldr	r3, [r7, #4]
   1592e:	689a      	ldr	r2, [r3, #8]
   15930:	687b      	ldr	r3, [r7, #4]
   15932:	685b      	ldr	r3, [r3, #4]
   15934:	0019      	movs	r1, r3
   15936:	0010      	movs	r0, r2
   15938:	4b28      	ldr	r3, [pc, #160]	; (159dc <http_client_callback+0x12c>)
   1593a:	4798      	blx	r3
                add_state(COMPLETED);
   1593c:	2010      	movs	r0, #16
   1593e:	4b23      	ldr	r3, [pc, #140]	; (159cc <http_client_callback+0x11c>)
   15940:	4798      	blx	r3
            }
            break;
   15942:	e032      	b.n	159aa <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   15944:	687b      	ldr	r3, [r7, #4]
   15946:	685a      	ldr	r2, [r3, #4]
   15948:	687b      	ldr	r3, [r7, #4]
   1594a:	681b      	ldr	r3, [r3, #0]
   1594c:	0019      	movs	r1, r3
   1594e:	0010      	movs	r0, r2
   15950:	4b22      	ldr	r3, [pc, #136]	; (159dc <http_client_callback+0x12c>)
   15952:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   15954:	687b      	ldr	r3, [r7, #4]
   15956:	7a1b      	ldrb	r3, [r3, #8]
   15958:	2b00      	cmp	r3, #0
   1595a:	d028      	beq.n	159ae <http_client_callback+0xfe>
                add_state(COMPLETED);
   1595c:	2010      	movs	r0, #16
   1595e:	4b1b      	ldr	r3, [pc, #108]	; (159cc <http_client_callback+0x11c>)
   15960:	4798      	blx	r3
            }

            break;
   15962:	e024      	b.n	159ae <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   15964:	687b      	ldr	r3, [r7, #4]
   15966:	681a      	ldr	r2, [r3, #0]
   15968:	4b1d      	ldr	r3, [pc, #116]	; (159e0 <http_client_callback+0x130>)
   1596a:	0019      	movs	r1, r3
   1596c:	2001      	movs	r0, #1
   1596e:	4b15      	ldr	r3, [pc, #84]	; (159c4 <http_client_callback+0x114>)
   15970:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   15972:	687b      	ldr	r3, [r7, #4]
   15974:	681b      	ldr	r3, [r3, #0]
   15976:	330b      	adds	r3, #11
   15978:	d11b      	bne.n	159b2 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1597a:	2008      	movs	r0, #8
   1597c:	4b19      	ldr	r3, [pc, #100]	; (159e4 <http_client_callback+0x134>)
   1597e:	4798      	blx	r3
   15980:	1e03      	subs	r3, r0, #0
   15982:	d006      	beq.n	15992 <http_client_callback+0xe2>
                    f_close(&file_object);
   15984:	4b18      	ldr	r3, [pc, #96]	; (159e8 <http_client_callback+0x138>)
   15986:	0018      	movs	r0, r3
   15988:	4b18      	ldr	r3, [pc, #96]	; (159ec <http_client_callback+0x13c>)
   1598a:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1598c:	2008      	movs	r0, #8
   1598e:	4b18      	ldr	r3, [pc, #96]	; (159f0 <http_client_callback+0x140>)
   15990:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   15992:	2004      	movs	r0, #4
   15994:	4b13      	ldr	r3, [pc, #76]	; (159e4 <http_client_callback+0x134>)
   15996:	4798      	blx	r3
   15998:	1e03      	subs	r3, r0, #0
   1599a:	d002      	beq.n	159a2 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   1599c:	2004      	movs	r0, #4
   1599e:	4b14      	ldr	r3, [pc, #80]	; (159f0 <http_client_callback+0x140>)
   159a0:	4798      	blx	r3
                }

                start_download();
   159a2:	4b14      	ldr	r3, [pc, #80]	; (159f4 <http_client_callback+0x144>)
   159a4:	4798      	blx	r3
            }

            break;
   159a6:	46c0      	nop			; (mov r8, r8)
   159a8:	e003      	b.n	159b2 <http_client_callback+0x102>
            break;
   159aa:	46c0      	nop			; (mov r8, r8)
   159ac:	e002      	b.n	159b4 <http_client_callback+0x104>
            break;
   159ae:	46c0      	nop			; (mov r8, r8)
   159b0:	e000      	b.n	159b4 <http_client_callback+0x104>
            break;
   159b2:	46c0      	nop			; (mov r8, r8)
    }
}
   159b4:	46bd      	mov	sp, r7
   159b6:	b005      	add	sp, #20
   159b8:	bd90      	pop	{r4, r7, pc}
   159ba:	46c0      	nop			; (mov r8, r8)
   159bc:	0003661c 	.word	0x0003661c
   159c0:	00035e6c 	.word	0x00035e6c
   159c4:	0001d751 	.word	0x0001d751
   159c8:	00035ea4 	.word	0x00035ea4
   159cc:	000152d1 	.word	0x000152d1
   159d0:	00035ed0 	.word	0x00035ed0
   159d4:	2000070c 	.word	0x2000070c
   159d8:	20000710 	.word	0x20000710
   159dc:	000156dd 	.word	0x000156dd
   159e0:	00035f0c 	.word	0x00035f0c
   159e4:	000152f9 	.word	0x000152f9
   159e8:	200006e8 	.word	0x200006e8
   159ec:	0002dbfd 	.word	0x0002dbfd
   159f0:	0001529d 	.word	0x0001529d
   159f4:	00015621 	.word	0x00015621

000159f8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   159f8:	b580      	push	{r7, lr}
   159fa:	b082      	sub	sp, #8
   159fc:	af00      	add	r7, sp, #0
   159fe:	603a      	str	r2, [r7, #0]
   15a00:	1dfb      	adds	r3, r7, #7
   15a02:	1c02      	adds	r2, r0, #0
   15a04:	701a      	strb	r2, [r3, #0]
   15a06:	1dbb      	adds	r3, r7, #6
   15a08:	1c0a      	adds	r2, r1, #0
   15a0a:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   15a0c:	683a      	ldr	r2, [r7, #0]
   15a0e:	1dbb      	adds	r3, r7, #6
   15a10:	7819      	ldrb	r1, [r3, #0]
   15a12:	1dfb      	adds	r3, r7, #7
   15a14:	781b      	ldrb	r3, [r3, #0]
   15a16:	b25b      	sxtb	r3, r3
   15a18:	0018      	movs	r0, r3
   15a1a:	4b03      	ldr	r3, [pc, #12]	; (15a28 <socket_cb+0x30>)
   15a1c:	4798      	blx	r3
}
   15a1e:	46c0      	nop			; (mov r8, r8)
   15a20:	46bd      	mov	sp, r7
   15a22:	b002      	add	sp, #8
   15a24:	bd80      	pop	{r7, pc}
   15a26:	46c0      	nop			; (mov r8, r8)
   15a28:	00030561 	.word	0x00030561

00015a2c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   15a2c:	b5b0      	push	{r4, r5, r7, lr}
   15a2e:	b086      	sub	sp, #24
   15a30:	af04      	add	r7, sp, #16
   15a32:	6078      	str	r0, [r7, #4]
   15a34:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   15a36:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   15a38:	22ff      	movs	r2, #255	; 0xff
   15a3a:	4013      	ands	r3, r2
   15a3c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   15a3e:	683b      	ldr	r3, [r7, #0]
   15a40:	0a1b      	lsrs	r3, r3, #8
   15a42:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   15a44:	23ff      	movs	r3, #255	; 0xff
   15a46:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   15a48:	683a      	ldr	r2, [r7, #0]
   15a4a:	0c12      	lsrs	r2, r2, #16
   15a4c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   15a4e:	22ff      	movs	r2, #255	; 0xff
   15a50:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   15a52:	6839      	ldr	r1, [r7, #0]
   15a54:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   15a56:	000d      	movs	r5, r1
   15a58:	6878      	ldr	r0, [r7, #4]
   15a5a:	4909      	ldr	r1, [pc, #36]	; (15a80 <resolve_cb+0x54>)
   15a5c:	9502      	str	r5, [sp, #8]
   15a5e:	9201      	str	r2, [sp, #4]
   15a60:	9300      	str	r3, [sp, #0]
   15a62:	0023      	movs	r3, r4
   15a64:	0002      	movs	r2, r0
   15a66:	2001      	movs	r0, #1
   15a68:	4c06      	ldr	r4, [pc, #24]	; (15a84 <resolve_cb+0x58>)
   15a6a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   15a6c:	683a      	ldr	r2, [r7, #0]
   15a6e:	687b      	ldr	r3, [r7, #4]
   15a70:	0011      	movs	r1, r2
   15a72:	0018      	movs	r0, r3
   15a74:	4b04      	ldr	r3, [pc, #16]	; (15a88 <resolve_cb+0x5c>)
   15a76:	4798      	blx	r3
}
   15a78:	46c0      	nop			; (mov r8, r8)
   15a7a:	46bd      	mov	sp, r7
   15a7c:	b002      	add	sp, #8
   15a7e:	bdb0      	pop	{r4, r5, r7, pc}
   15a80:	00035f3c 	.word	0x00035f3c
   15a84:	0001d751 	.word	0x0001d751
   15a88:	000306c5 	.word	0x000306c5

00015a8c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   15a8c:	b590      	push	{r4, r7, lr}
   15a8e:	b087      	sub	sp, #28
   15a90:	af02      	add	r7, sp, #8
   15a92:	0002      	movs	r2, r0
   15a94:	6039      	str	r1, [r7, #0]
   15a96:	1dfb      	adds	r3, r7, #7
   15a98:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   15a9a:	1dfb      	adds	r3, r7, #7
   15a9c:	781b      	ldrb	r3, [r3, #0]
   15a9e:	2b2c      	cmp	r3, #44	; 0x2c
   15aa0:	d002      	beq.n	15aa8 <wifi_cb+0x1c>
   15aa2:	2b32      	cmp	r3, #50	; 0x32
   15aa4:	d03d      	beq.n	15b22 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   15aa6:	e06f      	b.n	15b88 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   15aa8:	683b      	ldr	r3, [r7, #0]
   15aaa:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   15aac:	68fb      	ldr	r3, [r7, #12]
   15aae:	781b      	ldrb	r3, [r3, #0]
   15ab0:	2b01      	cmp	r3, #1
   15ab2:	d107      	bne.n	15ac4 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   15ab4:	4b36      	ldr	r3, [pc, #216]	; (15b90 <wifi_cb+0x104>)
   15ab6:	0019      	movs	r1, r3
   15ab8:	2001      	movs	r0, #1
   15aba:	4b36      	ldr	r3, [pc, #216]	; (15b94 <wifi_cb+0x108>)
   15abc:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   15abe:	4b36      	ldr	r3, [pc, #216]	; (15b98 <wifi_cb+0x10c>)
   15ac0:	4798      	blx	r3
            break;
   15ac2:	e05e      	b.n	15b82 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   15ac4:	68fb      	ldr	r3, [r7, #12]
   15ac6:	781b      	ldrb	r3, [r3, #0]
   15ac8:	2b00      	cmp	r3, #0
   15aca:	d15a      	bne.n	15b82 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   15acc:	4b33      	ldr	r3, [pc, #204]	; (15b9c <wifi_cb+0x110>)
   15ace:	0019      	movs	r1, r3
   15ad0:	2001      	movs	r0, #1
   15ad2:	4b30      	ldr	r3, [pc, #192]	; (15b94 <wifi_cb+0x108>)
   15ad4:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   15ad6:	2002      	movs	r0, #2
   15ad8:	4b31      	ldr	r3, [pc, #196]	; (15ba0 <wifi_cb+0x114>)
   15ada:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   15adc:	2008      	movs	r0, #8
   15ade:	4b31      	ldr	r3, [pc, #196]	; (15ba4 <wifi_cb+0x118>)
   15ae0:	4798      	blx	r3
   15ae2:	1e03      	subs	r3, r0, #0
   15ae4:	d006      	beq.n	15af4 <wifi_cb+0x68>
                    f_close(&file_object);
   15ae6:	4b30      	ldr	r3, [pc, #192]	; (15ba8 <wifi_cb+0x11c>)
   15ae8:	0018      	movs	r0, r3
   15aea:	4b30      	ldr	r3, [pc, #192]	; (15bac <wifi_cb+0x120>)
   15aec:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   15aee:	2008      	movs	r0, #8
   15af0:	4b2b      	ldr	r3, [pc, #172]	; (15ba0 <wifi_cb+0x114>)
   15af2:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   15af4:	2004      	movs	r0, #4
   15af6:	4b2b      	ldr	r3, [pc, #172]	; (15ba4 <wifi_cb+0x118>)
   15af8:	4798      	blx	r3
   15afa:	1e03      	subs	r3, r0, #0
   15afc:	d002      	beq.n	15b04 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   15afe:	2004      	movs	r0, #4
   15b00:	4b27      	ldr	r3, [pc, #156]	; (15ba0 <wifi_cb+0x114>)
   15b02:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   15b04:	4b2a      	ldr	r3, [pc, #168]	; (15bb0 <wifi_cb+0x124>)
   15b06:	2101      	movs	r1, #1
   15b08:	0018      	movs	r0, r3
   15b0a:	4b2a      	ldr	r3, [pc, #168]	; (15bb4 <wifi_cb+0x128>)
   15b0c:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15b0e:	4a2a      	ldr	r2, [pc, #168]	; (15bb8 <wifi_cb+0x12c>)
   15b10:	482a      	ldr	r0, [pc, #168]	; (15bbc <wifi_cb+0x130>)
   15b12:	23ff      	movs	r3, #255	; 0xff
   15b14:	9300      	str	r3, [sp, #0]
   15b16:	0013      	movs	r3, r2
   15b18:	2202      	movs	r2, #2
   15b1a:	210b      	movs	r1, #11
   15b1c:	4c28      	ldr	r4, [pc, #160]	; (15bc0 <wifi_cb+0x134>)
   15b1e:	47a0      	blx	r4
            break;
   15b20:	e02f      	b.n	15b82 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   15b22:	683b      	ldr	r3, [r7, #0]
   15b24:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   15b26:	68bb      	ldr	r3, [r7, #8]
   15b28:	781b      	ldrb	r3, [r3, #0]
   15b2a:	0018      	movs	r0, r3
   15b2c:	68bb      	ldr	r3, [r7, #8]
   15b2e:	3301      	adds	r3, #1
   15b30:	781b      	ldrb	r3, [r3, #0]
   15b32:	001c      	movs	r4, r3
   15b34:	68bb      	ldr	r3, [r7, #8]
   15b36:	3302      	adds	r3, #2
   15b38:	781b      	ldrb	r3, [r3, #0]
   15b3a:	001a      	movs	r2, r3
   15b3c:	68bb      	ldr	r3, [r7, #8]
   15b3e:	3303      	adds	r3, #3
   15b40:	781b      	ldrb	r3, [r3, #0]
   15b42:	4920      	ldr	r1, [pc, #128]	; (15bc4 <wifi_cb+0x138>)
   15b44:	9301      	str	r3, [sp, #4]
   15b46:	9200      	str	r2, [sp, #0]
   15b48:	0023      	movs	r3, r4
   15b4a:	0002      	movs	r2, r0
   15b4c:	2001      	movs	r0, #1
   15b4e:	4c11      	ldr	r4, [pc, #68]	; (15b94 <wifi_cb+0x108>)
   15b50:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   15b52:	2002      	movs	r0, #2
   15b54:	4b1c      	ldr	r3, [pc, #112]	; (15bc8 <wifi_cb+0x13c>)
   15b56:	4798      	blx	r3
            if (do_download_flag == 1) {
   15b58:	4b1c      	ldr	r3, [pc, #112]	; (15bcc <wifi_cb+0x140>)
   15b5a:	781b      	ldrb	r3, [r3, #0]
   15b5c:	2b01      	cmp	r3, #1
   15b5e:	d102      	bne.n	15b66 <wifi_cb+0xda>
                start_download();
   15b60:	4b1b      	ldr	r3, [pc, #108]	; (15bd0 <wifi_cb+0x144>)
   15b62:	4798      	blx	r3
        } break;
   15b64:	e00f      	b.n	15b86 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   15b66:	4a1b      	ldr	r2, [pc, #108]	; (15bd4 <wifi_cb+0x148>)
   15b68:	4b11      	ldr	r3, [pc, #68]	; (15bb0 <wifi_cb+0x124>)
   15b6a:	0011      	movs	r1, r2
   15b6c:	0018      	movs	r0, r3
   15b6e:	4b1a      	ldr	r3, [pc, #104]	; (15bd8 <wifi_cb+0x14c>)
   15b70:	4798      	blx	r3
   15b72:	1e03      	subs	r3, r0, #0
   15b74:	d007      	beq.n	15b86 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15b76:	4b19      	ldr	r3, [pc, #100]	; (15bdc <wifi_cb+0x150>)
   15b78:	0019      	movs	r1, r3
   15b7a:	2001      	movs	r0, #1
   15b7c:	4b05      	ldr	r3, [pc, #20]	; (15b94 <wifi_cb+0x108>)
   15b7e:	4798      	blx	r3
        } break;
   15b80:	e001      	b.n	15b86 <wifi_cb+0xfa>
            break;
   15b82:	46c0      	nop			; (mov r8, r8)
   15b84:	e000      	b.n	15b88 <wifi_cb+0xfc>
        } break;
   15b86:	46c0      	nop			; (mov r8, r8)
    }
}
   15b88:	46c0      	nop			; (mov r8, r8)
   15b8a:	46bd      	mov	sp, r7
   15b8c:	b005      	add	sp, #20
   15b8e:	bd90      	pop	{r4, r7, pc}
   15b90:	00035f6c 	.word	0x00035f6c
   15b94:	0001d751 	.word	0x0001d751
   15b98:	00021d31 	.word	0x00021d31
   15b9c:	00035f8c 	.word	0x00035f8c
   15ba0:	0001529d 	.word	0x0001529d
   15ba4:	000152f9 	.word	0x000152f9
   15ba8:	200006e8 	.word	0x200006e8
   15bac:	0002dbfd 	.word	0x0002dbfd
   15bb0:	20000714 	.word	0x20000714
   15bb4:	0002f20d 	.word	0x0002f20d
   15bb8:	00035fb0 	.word	0x00035fb0
   15bbc:	00035fbc 	.word	0x00035fbc
   15bc0:	0002185d 	.word	0x0002185d
   15bc4:	00035fc8 	.word	0x00035fc8
   15bc8:	000152d1 	.word	0x000152d1
   15bcc:	200004b4 	.word	0x200004b4
   15bd0:	00015621 	.word	0x00015621
   15bd4:	00035be4 	.word	0x00035be4
   15bd8:	0002f0d9 	.word	0x0002f0d9
   15bdc:	00035ff0 	.word	0x00035ff0

00015be0 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   15be0:	b590      	push	{r4, r7, lr}
   15be2:	b083      	sub	sp, #12
   15be4:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   15be6:	4b29      	ldr	r3, [pc, #164]	; (15c8c <init_storage+0xac>)
   15be8:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   15bea:	4b29      	ldr	r3, [pc, #164]	; (15c90 <init_storage+0xb0>)
   15bec:	0019      	movs	r1, r3
   15bee:	2001      	movs	r0, #1
   15bf0:	4b28      	ldr	r3, [pc, #160]	; (15c94 <init_storage+0xb4>)
   15bf2:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   15bf4:	1dfc      	adds	r4, r7, #7
   15bf6:	2000      	movs	r0, #0
   15bf8:	4b27      	ldr	r3, [pc, #156]	; (15c98 <init_storage+0xb8>)
   15bfa:	4798      	blx	r3
   15bfc:	0003      	movs	r3, r0
   15bfe:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   15c00:	1dfb      	adds	r3, r7, #7
   15c02:	781b      	ldrb	r3, [r3, #0]
   15c04:	2b01      	cmp	r3, #1
   15c06:	d110      	bne.n	15c2a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   15c08:	4b24      	ldr	r3, [pc, #144]	; (15c9c <init_storage+0xbc>)
   15c0a:	0019      	movs	r1, r3
   15c0c:	2001      	movs	r0, #1
   15c0e:	4b21      	ldr	r3, [pc, #132]	; (15c94 <init_storage+0xb4>)
   15c10:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   15c12:	4b23      	ldr	r3, [pc, #140]	; (15ca0 <init_storage+0xc0>)
   15c14:	0019      	movs	r1, r3
   15c16:	2001      	movs	r0, #1
   15c18:	4b1e      	ldr	r3, [pc, #120]	; (15c94 <init_storage+0xb4>)
   15c1a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   15c1c:	46c0      	nop			; (mov r8, r8)
   15c1e:	2000      	movs	r0, #0
   15c20:	4b20      	ldr	r3, [pc, #128]	; (15ca4 <init_storage+0xc4>)
   15c22:	4798      	blx	r3
   15c24:	0003      	movs	r3, r0
   15c26:	2b02      	cmp	r3, #2
   15c28:	d1f9      	bne.n	15c1e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   15c2a:	1dfb      	adds	r3, r7, #7
   15c2c:	781b      	ldrb	r3, [r3, #0]
   15c2e:	2b00      	cmp	r3, #0
   15c30:	d1e0      	bne.n	15bf4 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   15c32:	4b1d      	ldr	r3, [pc, #116]	; (15ca8 <init_storage+0xc8>)
   15c34:	0019      	movs	r1, r3
   15c36:	2001      	movs	r0, #1
   15c38:	4b16      	ldr	r3, [pc, #88]	; (15c94 <init_storage+0xb4>)
   15c3a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   15c3c:	238c      	movs	r3, #140	; 0x8c
   15c3e:	009a      	lsls	r2, r3, #2
   15c40:	4b1a      	ldr	r3, [pc, #104]	; (15cac <init_storage+0xcc>)
   15c42:	2100      	movs	r1, #0
   15c44:	0018      	movs	r0, r3
   15c46:	4b1a      	ldr	r3, [pc, #104]	; (15cb0 <init_storage+0xd0>)
   15c48:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   15c4a:	1dbc      	adds	r4, r7, #6
   15c4c:	4b17      	ldr	r3, [pc, #92]	; (15cac <init_storage+0xcc>)
   15c4e:	0019      	movs	r1, r3
   15c50:	2000      	movs	r0, #0
   15c52:	4b18      	ldr	r3, [pc, #96]	; (15cb4 <init_storage+0xd4>)
   15c54:	4798      	blx	r3
   15c56:	0003      	movs	r3, r0
   15c58:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   15c5a:	1dbb      	adds	r3, r7, #6
   15c5c:	781b      	ldrb	r3, [r3, #0]
   15c5e:	2b0b      	cmp	r3, #11
   15c60:	d107      	bne.n	15c72 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   15c62:	1dbb      	adds	r3, r7, #6
   15c64:	781a      	ldrb	r2, [r3, #0]
   15c66:	4b14      	ldr	r3, [pc, #80]	; (15cb8 <init_storage+0xd8>)
   15c68:	0019      	movs	r1, r3
   15c6a:	2001      	movs	r0, #1
   15c6c:	4b09      	ldr	r3, [pc, #36]	; (15c94 <init_storage+0xb4>)
   15c6e:	4798      	blx	r3
            return;
   15c70:	e008      	b.n	15c84 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   15c72:	4b12      	ldr	r3, [pc, #72]	; (15cbc <init_storage+0xdc>)
   15c74:	0019      	movs	r1, r3
   15c76:	2001      	movs	r0, #1
   15c78:	4b06      	ldr	r3, [pc, #24]	; (15c94 <init_storage+0xb4>)
   15c7a:	4798      	blx	r3
        add_state(STORAGE_READY);
   15c7c:	2001      	movs	r0, #1
   15c7e:	4b10      	ldr	r3, [pc, #64]	; (15cc0 <init_storage+0xe0>)
   15c80:	4798      	blx	r3
        return;
   15c82:	46c0      	nop			; (mov r8, r8)
    }
}
   15c84:	46bd      	mov	sp, r7
   15c86:	b003      	add	sp, #12
   15c88:	bd90      	pop	{r4, r7, pc}
   15c8a:	46c0      	nop			; (mov r8, r8)
   15c8c:	0001e569 	.word	0x0001e569
   15c90:	00036014 	.word	0x00036014
   15c94:	0001d751 	.word	0x0001d751
   15c98:	0001ea45 	.word	0x0001ea45
   15c9c:	0003604c 	.word	0x0003604c
   15ca0:	00036074 	.word	0x00036074
   15ca4:	0001e5b9 	.word	0x0001e5b9
   15ca8:	000360a8 	.word	0x000360a8
   15cac:	200004b8 	.word	0x200004b8
   15cb0:	00034317 	.word	0x00034317
   15cb4:	0002d1a5 	.word	0x0002d1a5
   15cb8:	000360cc 	.word	0x000360cc
   15cbc:	000360fc 	.word	0x000360fc
   15cc0:	000152d1 	.word	0x000152d1

00015cc4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   15cc4:	b580      	push	{r7, lr}
   15cc6:	b082      	sub	sp, #8
   15cc8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   15cca:	1d3b      	adds	r3, r7, #4
   15ccc:	0018      	movs	r0, r3
   15cce:	4b08      	ldr	r3, [pc, #32]	; (15cf0 <configure_timer+0x2c>)
   15cd0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   15cd2:	1d3a      	adds	r2, r7, #4
   15cd4:	4b07      	ldr	r3, [pc, #28]	; (15cf4 <configure_timer+0x30>)
   15cd6:	0011      	movs	r1, r2
   15cd8:	0018      	movs	r0, r3
   15cda:	4b07      	ldr	r3, [pc, #28]	; (15cf8 <configure_timer+0x34>)
   15cdc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   15cde:	4b05      	ldr	r3, [pc, #20]	; (15cf4 <configure_timer+0x30>)
   15ce0:	0018      	movs	r0, r3
   15ce2:	4b06      	ldr	r3, [pc, #24]	; (15cfc <configure_timer+0x38>)
   15ce4:	4798      	blx	r3
}
   15ce6:	46c0      	nop			; (mov r8, r8)
   15ce8:	46bd      	mov	sp, r7
   15cea:	b002      	add	sp, #8
   15cec:	bd80      	pop	{r7, pc}
   15cee:	46c0      	nop			; (mov r8, r8)
   15cf0:	00031cf5 	.word	0x00031cf5
   15cf4:	200046b4 	.word	0x200046b4
   15cf8:	00031d19 	.word	0x00031d19
   15cfc:	00031e05 	.word	0x00031e05

00015d00 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15d00:	b580      	push	{r7, lr}
   15d02:	b088      	sub	sp, #32
   15d04:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   15d06:	003b      	movs	r3, r7
   15d08:	0018      	movs	r0, r3
   15d0a:	4b12      	ldr	r3, [pc, #72]	; (15d54 <configure_http_client+0x54>)
   15d0c:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15d0e:	003b      	movs	r3, r7
   15d10:	2280      	movs	r2, #128	; 0x80
   15d12:	0092      	lsls	r2, r2, #2
   15d14:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   15d16:	003b      	movs	r3, r7
   15d18:	4a0f      	ldr	r2, [pc, #60]	; (15d58 <configure_http_client+0x58>)
   15d1a:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15d1c:	003a      	movs	r2, r7
   15d1e:	4b0f      	ldr	r3, [pc, #60]	; (15d5c <configure_http_client+0x5c>)
   15d20:	0011      	movs	r1, r2
   15d22:	0018      	movs	r0, r3
   15d24:	4b0e      	ldr	r3, [pc, #56]	; (15d60 <configure_http_client+0x60>)
   15d26:	4798      	blx	r3
   15d28:	0003      	movs	r3, r0
   15d2a:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   15d2c:	69fb      	ldr	r3, [r7, #28]
   15d2e:	2b00      	cmp	r3, #0
   15d30:	da06      	bge.n	15d40 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15d32:	69fa      	ldr	r2, [r7, #28]
   15d34:	4b0b      	ldr	r3, [pc, #44]	; (15d64 <configure_http_client+0x64>)
   15d36:	0019      	movs	r1, r3
   15d38:	2001      	movs	r0, #1
   15d3a:	4b0b      	ldr	r3, [pc, #44]	; (15d68 <configure_http_client+0x68>)
   15d3c:	4798      	blx	r3
        while (1) {
   15d3e:	e7fe      	b.n	15d3e <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   15d40:	4a0a      	ldr	r2, [pc, #40]	; (15d6c <configure_http_client+0x6c>)
   15d42:	4b06      	ldr	r3, [pc, #24]	; (15d5c <configure_http_client+0x5c>)
   15d44:	0011      	movs	r1, r2
   15d46:	0018      	movs	r0, r3
   15d48:	4b09      	ldr	r3, [pc, #36]	; (15d70 <configure_http_client+0x70>)
   15d4a:	4798      	blx	r3
}
   15d4c:	46c0      	nop			; (mov r8, r8)
   15d4e:	46bd      	mov	sp, r7
   15d50:	b008      	add	sp, #32
   15d52:	bd80      	pop	{r7, pc}
   15d54:	00030389 	.word	0x00030389
   15d58:	200046b4 	.word	0x200046b4
   15d5c:	2000470c 	.word	0x2000470c
   15d60:	000303d5 	.word	0x000303d5
   15d64:	00036120 	.word	0x00036120
   15d68:	0001d751 	.word	0x0001d751
   15d6c:	000158b1 	.word	0x000158b1
   15d70:	000304c1 	.word	0x000304c1

00015d74 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   15d74:	b580      	push	{r7, lr}
   15d76:	b082      	sub	sp, #8
   15d78:	af00      	add	r7, sp, #0
   15d7a:	603a      	str	r2, [r7, #0]
   15d7c:	1dfb      	adds	r3, r7, #7
   15d7e:	1c02      	adds	r2, r0, #0
   15d80:	701a      	strb	r2, [r3, #0]
   15d82:	1dbb      	adds	r3, r7, #6
   15d84:	1c0a      	adds	r2, r1, #0
   15d86:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   15d88:	683a      	ldr	r2, [r7, #0]
   15d8a:	1dbb      	adds	r3, r7, #6
   15d8c:	7819      	ldrb	r1, [r3, #0]
   15d8e:	1dfb      	adds	r3, r7, #7
   15d90:	781b      	ldrb	r3, [r3, #0]
   15d92:	b25b      	sxtb	r3, r3
   15d94:	0018      	movs	r0, r3
   15d96:	4b03      	ldr	r3, [pc, #12]	; (15da4 <socket_event_handler+0x30>)
   15d98:	4798      	blx	r3
}
   15d9a:	46c0      	nop			; (mov r8, r8)
   15d9c:	46bd      	mov	sp, r7
   15d9e:	b002      	add	sp, #8
   15da0:	bd80      	pop	{r7, pc}
   15da2:	46c0      	nop			; (mov r8, r8)
   15da4:	0002f081 	.word	0x0002f081

00015da8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   15da8:	b580      	push	{r7, lr}
   15daa:	b082      	sub	sp, #8
   15dac:	af00      	add	r7, sp, #0
   15dae:	6078      	str	r0, [r7, #4]
   15db0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   15db2:	683a      	ldr	r2, [r7, #0]
   15db4:	687b      	ldr	r3, [r7, #4]
   15db6:	0011      	movs	r1, r2
   15db8:	0018      	movs	r0, r3
   15dba:	4b03      	ldr	r3, [pc, #12]	; (15dc8 <socket_resolve_handler+0x20>)
   15dbc:	4798      	blx	r3
}
   15dbe:	46c0      	nop			; (mov r8, r8)
   15dc0:	46bd      	mov	sp, r7
   15dc2:	b002      	add	sp, #8
   15dc4:	bd80      	pop	{r7, pc}
   15dc6:	46c0      	nop			; (mov r8, r8)
   15dc8:	0002f0b5 	.word	0x0002f0b5

00015dcc <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   15dcc:	b590      	push	{r4, r7, lr}
   15dce:	b089      	sub	sp, #36	; 0x24
   15dd0:	af02      	add	r7, sp, #8
   15dd2:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   15dd4:	2310      	movs	r3, #16
   15dd6:	18fb      	adds	r3, r7, r3
   15dd8:	2200      	movs	r2, #0
   15dda:	701a      	strb	r2, [r3, #0]
   15ddc:	2310      	movs	r3, #16
   15dde:	18fb      	adds	r3, r7, r3
   15de0:	2200      	movs	r2, #0
   15de2:	705a      	strb	r2, [r3, #1]
   15de4:	2310      	movs	r3, #16
   15de6:	18fb      	adds	r3, r7, r3
   15de8:	2200      	movs	r2, #0
   15dea:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15dec:	687b      	ldr	r3, [r7, #4]
   15dee:	685b      	ldr	r3, [r3, #4]
   15df0:	685a      	ldr	r2, [r3, #4]
   15df2:	687b      	ldr	r3, [r7, #4]
   15df4:	685b      	ldr	r3, [r3, #4]
   15df6:	689b      	ldr	r3, [r3, #8]
   15df8:	492a      	ldr	r1, [pc, #168]	; (15ea4 <SubscribeHandlerLedTopic+0xd8>)
   15dfa:	2001      	movs	r0, #1
   15dfc:	4c2a      	ldr	r4, [pc, #168]	; (15ea8 <SubscribeHandlerLedTopic+0xdc>)
   15dfe:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   15e00:	687b      	ldr	r3, [r7, #4]
   15e02:	681b      	ldr	r3, [r3, #0]
   15e04:	689b      	ldr	r3, [r3, #8]
   15e06:	4929      	ldr	r1, [pc, #164]	; (15eac <SubscribeHandlerLedTopic+0xe0>)
   15e08:	2204      	movs	r2, #4
   15e0a:	0018      	movs	r0, r3
   15e0c:	4b28      	ldr	r3, [pc, #160]	; (15eb0 <SubscribeHandlerLedTopic+0xe4>)
   15e0e:	4798      	blx	r3
   15e10:	1e03      	subs	r3, r0, #0
   15e12:	d143      	bne.n	15e9c <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   15e14:	687b      	ldr	r3, [r7, #4]
   15e16:	681b      	ldr	r3, [r3, #0]
   15e18:	689b      	ldr	r3, [r3, #8]
   15e1a:	3304      	adds	r3, #4
   15e1c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   15e1e:	2300      	movs	r3, #0
   15e20:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   15e22:	e015      	b.n	15e50 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   15e24:	697c      	ldr	r4, [r7, #20]
   15e26:	1c63      	adds	r3, r4, #1
   15e28:	617b      	str	r3, [r7, #20]
   15e2a:	68fb      	ldr	r3, [r7, #12]
   15e2c:	220c      	movs	r2, #12
   15e2e:	18b9      	adds	r1, r7, r2
   15e30:	220a      	movs	r2, #10
   15e32:	0018      	movs	r0, r3
   15e34:	4b1f      	ldr	r3, [pc, #124]	; (15eb4 <SubscribeHandlerLedTopic+0xe8>)
   15e36:	4798      	blx	r3
   15e38:	0003      	movs	r3, r0
   15e3a:	b2da      	uxtb	r2, r3
   15e3c:	2310      	movs	r3, #16
   15e3e:	18fb      	adds	r3, r7, r3
   15e40:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   15e42:	68fb      	ldr	r3, [r7, #12]
   15e44:	781b      	ldrb	r3, [r3, #0]
   15e46:	2b2c      	cmp	r3, #44	; 0x2c
   15e48:	d10a      	bne.n	15e60 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   15e4a:	68fb      	ldr	r3, [r7, #12]
   15e4c:	3301      	adds	r3, #1
   15e4e:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   15e50:	697b      	ldr	r3, [r7, #20]
   15e52:	2b02      	cmp	r3, #2
   15e54:	dc05      	bgt.n	15e62 <SubscribeHandlerLedTopic+0x96>
   15e56:	68fb      	ldr	r3, [r7, #12]
   15e58:	781b      	ldrb	r3, [r3, #0]
   15e5a:	2b00      	cmp	r3, #0
   15e5c:	d1e2      	bne.n	15e24 <SubscribeHandlerLedTopic+0x58>
   15e5e:	e000      	b.n	15e62 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   15e60:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   15e62:	2310      	movs	r3, #16
   15e64:	18fb      	adds	r3, r7, r3
   15e66:	781b      	ldrb	r3, [r3, #0]
   15e68:	001a      	movs	r2, r3
   15e6a:	2310      	movs	r3, #16
   15e6c:	18fb      	adds	r3, r7, r3
   15e6e:	785b      	ldrb	r3, [r3, #1]
   15e70:	0018      	movs	r0, r3
   15e72:	2310      	movs	r3, #16
   15e74:	18fb      	adds	r3, r7, r3
   15e76:	789b      	ldrb	r3, [r3, #2]
   15e78:	490f      	ldr	r1, [pc, #60]	; (15eb8 <SubscribeHandlerLedTopic+0xec>)
   15e7a:	9300      	str	r3, [sp, #0]
   15e7c:	0003      	movs	r3, r0
   15e7e:	2001      	movs	r0, #1
   15e80:	4c09      	ldr	r4, [pc, #36]	; (15ea8 <SubscribeHandlerLedTopic+0xdc>)
   15e82:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   15e84:	2310      	movs	r3, #16
   15e86:	18fb      	adds	r3, r7, r3
   15e88:	7818      	ldrb	r0, [r3, #0]
   15e8a:	2310      	movs	r3, #16
   15e8c:	18fb      	adds	r3, r7, r3
   15e8e:	7859      	ldrb	r1, [r3, #1]
   15e90:	2310      	movs	r3, #16
   15e92:	18fb      	adds	r3, r7, r3
   15e94:	789b      	ldrb	r3, [r3, #2]
   15e96:	001a      	movs	r2, r3
   15e98:	4b08      	ldr	r3, [pc, #32]	; (15ebc <SubscribeHandlerLedTopic+0xf0>)
   15e9a:	4798      	blx	r3
    }
}
   15e9c:	46c0      	nop			; (mov r8, r8)
   15e9e:	46bd      	mov	sp, r7
   15ea0:	b007      	add	sp, #28
   15ea2:	bd90      	pop	{r4, r7, pc}
   15ea4:	00036168 	.word	0x00036168
   15ea8:	0001d751 	.word	0x0001d751
   15eac:	00036170 	.word	0x00036170
   15eb0:	000346dd 	.word	0x000346dd
   15eb4:	00034889 	.word	0x00034889
   15eb8:	00036178 	.word	0x00036178
   15ebc:	00015165 	.word	0x00015165

00015ec0 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   15ec0:	b590      	push	{r4, r7, lr}
   15ec2:	b08b      	sub	sp, #44	; 0x2c
   15ec4:	af00      	add	r7, sp, #0
   15ec6:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   15ec8:	230c      	movs	r3, #12
   15eca:	18fb      	adds	r3, r7, r3
   15ecc:	2214      	movs	r2, #20
   15ece:	21ff      	movs	r1, #255	; 0xff
   15ed0:	0018      	movs	r0, r3
   15ed2:	4b48      	ldr	r3, [pc, #288]	; (15ff4 <SubscribeHandlerGameTopic+0x134>)
   15ed4:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   15ed6:	687b      	ldr	r3, [r7, #4]
   15ed8:	681b      	ldr	r3, [r3, #0]
   15eda:	689b      	ldr	r3, [r3, #8]
   15edc:	4946      	ldr	r1, [pc, #280]	; (15ff8 <SubscribeHandlerGameTopic+0x138>)
   15ede:	2209      	movs	r2, #9
   15ee0:	0018      	movs	r0, r3
   15ee2:	4b46      	ldr	r3, [pc, #280]	; (15ffc <SubscribeHandlerGameTopic+0x13c>)
   15ee4:	4798      	blx	r3
   15ee6:	1e03      	subs	r3, r0, #0
   15ee8:	d166      	bne.n	15fb8 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   15eea:	4b45      	ldr	r3, [pc, #276]	; (16000 <SubscribeHandlerGameTopic+0x140>)
   15eec:	0019      	movs	r1, r3
   15eee:	2001      	movs	r0, #1
   15ef0:	4b44      	ldr	r3, [pc, #272]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15ef2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15ef4:	687b      	ldr	r3, [r7, #4]
   15ef6:	685b      	ldr	r3, [r3, #4]
   15ef8:	685a      	ldr	r2, [r3, #4]
   15efa:	687b      	ldr	r3, [r7, #4]
   15efc:	685b      	ldr	r3, [r3, #4]
   15efe:	689b      	ldr	r3, [r3, #8]
   15f00:	4941      	ldr	r1, [pc, #260]	; (16008 <SubscribeHandlerGameTopic+0x148>)
   15f02:	2001      	movs	r0, #1
   15f04:	4c3f      	ldr	r4, [pc, #252]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15f06:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   15f08:	687b      	ldr	r3, [r7, #4]
   15f0a:	681b      	ldr	r3, [r3, #0]
   15f0c:	68da      	ldr	r2, [r3, #12]
   15f0e:	687b      	ldr	r3, [r7, #4]
   15f10:	681b      	ldr	r3, [r3, #0]
   15f12:	689b      	ldr	r3, [r3, #8]
   15f14:	493d      	ldr	r1, [pc, #244]	; (1600c <SubscribeHandlerGameTopic+0x14c>)
   15f16:	2001      	movs	r0, #1
   15f18:	4c3a      	ldr	r4, [pc, #232]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15f1a:	47a0      	blx	r4

        int nb = 0;
   15f1c:	2300      	movs	r3, #0
   15f1e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	681b      	ldr	r3, [r3, #0]
   15f24:	689b      	ldr	r3, [r3, #8]
   15f26:	3309      	adds	r3, #9
   15f28:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   15f2a:	e015      	b.n	15f58 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   15f2c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   15f2e:	1c63      	adds	r3, r4, #1
   15f30:	627b      	str	r3, [r7, #36]	; 0x24
   15f32:	68bb      	ldr	r3, [r7, #8]
   15f34:	2208      	movs	r2, #8
   15f36:	18b9      	adds	r1, r7, r2
   15f38:	220a      	movs	r2, #10
   15f3a:	0018      	movs	r0, r3
   15f3c:	4b34      	ldr	r3, [pc, #208]	; (16010 <SubscribeHandlerGameTopic+0x150>)
   15f3e:	4798      	blx	r3
   15f40:	0003      	movs	r3, r0
   15f42:	b2da      	uxtb	r2, r3
   15f44:	230c      	movs	r3, #12
   15f46:	18fb      	adds	r3, r7, r3
   15f48:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   15f4a:	68bb      	ldr	r3, [r7, #8]
   15f4c:	781b      	ldrb	r3, [r3, #0]
   15f4e:	2b2c      	cmp	r3, #44	; 0x2c
   15f50:	d10a      	bne.n	15f68 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   15f52:	68bb      	ldr	r3, [r7, #8]
   15f54:	3301      	adds	r3, #1
   15f56:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   15f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f5a:	2b13      	cmp	r3, #19
   15f5c:	dc05      	bgt.n	15f6a <SubscribeHandlerGameTopic+0xaa>
   15f5e:	68bb      	ldr	r3, [r7, #8]
   15f60:	781b      	ldrb	r3, [r3, #0]
   15f62:	2b00      	cmp	r3, #0
   15f64:	d1e2      	bne.n	15f2c <SubscribeHandlerGameTopic+0x6c>
   15f66:	e000      	b.n	15f6a <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   15f68:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   15f6a:	4b2a      	ldr	r3, [pc, #168]	; (16014 <SubscribeHandlerGameTopic+0x154>)
   15f6c:	0019      	movs	r1, r3
   15f6e:	2001      	movs	r0, #1
   15f70:	4b24      	ldr	r3, [pc, #144]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15f72:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   15f74:	2300      	movs	r3, #0
   15f76:	623b      	str	r3, [r7, #32]
   15f78:	e00d      	b.n	15f96 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   15f7a:	230c      	movs	r3, #12
   15f7c:	18fa      	adds	r2, r7, r3
   15f7e:	6a3b      	ldr	r3, [r7, #32]
   15f80:	18d3      	adds	r3, r2, r3
   15f82:	781b      	ldrb	r3, [r3, #0]
   15f84:	001a      	movs	r2, r3
   15f86:	4b24      	ldr	r3, [pc, #144]	; (16018 <SubscribeHandlerGameTopic+0x158>)
   15f88:	0019      	movs	r1, r3
   15f8a:	2001      	movs	r0, #1
   15f8c:	4b1d      	ldr	r3, [pc, #116]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15f8e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   15f90:	6a3b      	ldr	r3, [r7, #32]
   15f92:	3301      	adds	r3, #1
   15f94:	623b      	str	r3, [r7, #32]
   15f96:	6a3b      	ldr	r3, [r7, #32]
   15f98:	2b13      	cmp	r3, #19
   15f9a:	ddee      	ble.n	15f7a <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   15f9c:	230c      	movs	r3, #12
   15f9e:	18fb      	adds	r3, r7, r3
   15fa0:	0018      	movs	r0, r3
   15fa2:	4b1e      	ldr	r3, [pc, #120]	; (1601c <SubscribeHandlerGameTopic+0x15c>)
   15fa4:	4798      	blx	r3
   15fa6:	0003      	movs	r3, r0
   15fa8:	2b01      	cmp	r3, #1
   15faa:	d11e      	bne.n	15fea <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   15fac:	4b1c      	ldr	r3, [pc, #112]	; (16020 <SubscribeHandlerGameTopic+0x160>)
   15fae:	0019      	movs	r1, r3
   15fb0:	2001      	movs	r0, #1
   15fb2:	4b14      	ldr	r3, [pc, #80]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15fb4:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   15fb6:	e018      	b.n	15fea <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   15fb8:	4b1a      	ldr	r3, [pc, #104]	; (16024 <SubscribeHandlerGameTopic+0x164>)
   15fba:	0019      	movs	r1, r3
   15fbc:	2001      	movs	r0, #1
   15fbe:	4b11      	ldr	r3, [pc, #68]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15fc0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15fc2:	687b      	ldr	r3, [r7, #4]
   15fc4:	685b      	ldr	r3, [r3, #4]
   15fc6:	685a      	ldr	r2, [r3, #4]
   15fc8:	687b      	ldr	r3, [r7, #4]
   15fca:	685b      	ldr	r3, [r3, #4]
   15fcc:	689b      	ldr	r3, [r3, #8]
   15fce:	490e      	ldr	r1, [pc, #56]	; (16008 <SubscribeHandlerGameTopic+0x148>)
   15fd0:	2001      	movs	r0, #1
   15fd2:	4c0c      	ldr	r4, [pc, #48]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15fd4:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   15fd6:	687b      	ldr	r3, [r7, #4]
   15fd8:	681b      	ldr	r3, [r3, #0]
   15fda:	68da      	ldr	r2, [r3, #12]
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	681b      	ldr	r3, [r3, #0]
   15fe0:	689b      	ldr	r3, [r3, #8]
   15fe2:	490a      	ldr	r1, [pc, #40]	; (1600c <SubscribeHandlerGameTopic+0x14c>)
   15fe4:	2001      	movs	r0, #1
   15fe6:	4c07      	ldr	r4, [pc, #28]	; (16004 <SubscribeHandlerGameTopic+0x144>)
   15fe8:	47a0      	blx	r4
}
   15fea:	46c0      	nop			; (mov r8, r8)
   15fec:	46bd      	mov	sp, r7
   15fee:	b00b      	add	sp, #44	; 0x2c
   15ff0:	bd90      	pop	{r4, r7, pc}
   15ff2:	46c0      	nop			; (mov r8, r8)
   15ff4:	00034317 	.word	0x00034317
   15ff8:	0003618c 	.word	0x0003618c
   15ffc:	000346dd 	.word	0x000346dd
   16000:	00036198 	.word	0x00036198
   16004:	0001d751 	.word	0x0001d751
   16008:	00036168 	.word	0x00036168
   1600c:	000361b4 	.word	0x000361b4
   16010:	00034889 	.word	0x00034889
   16014:	000361bc 	.word	0x000361bc
   16018:	000361d0 	.word	0x000361d0
   1601c:	00013db1 	.word	0x00013db1
   16020:	000361d4 	.word	0x000361d4
   16024:	000361f0 	.word	0x000361f0

00016028 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   16028:	b590      	push	{r4, r7, lr}
   1602a:	b083      	sub	sp, #12
   1602c:	af00      	add	r7, sp, #0
   1602e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   16030:	4b09      	ldr	r3, [pc, #36]	; (16058 <SubscribeHandlerImuTopic+0x30>)
   16032:	0019      	movs	r1, r3
   16034:	2001      	movs	r0, #1
   16036:	4b09      	ldr	r3, [pc, #36]	; (1605c <SubscribeHandlerImuTopic+0x34>)
   16038:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1603a:	687b      	ldr	r3, [r7, #4]
   1603c:	685b      	ldr	r3, [r3, #4]
   1603e:	685a      	ldr	r2, [r3, #4]
   16040:	687b      	ldr	r3, [r7, #4]
   16042:	685b      	ldr	r3, [r3, #4]
   16044:	689b      	ldr	r3, [r3, #8]
   16046:	4906      	ldr	r1, [pc, #24]	; (16060 <SubscribeHandlerImuTopic+0x38>)
   16048:	2001      	movs	r0, #1
   1604a:	4c04      	ldr	r4, [pc, #16]	; (1605c <SubscribeHandlerImuTopic+0x34>)
   1604c:	47a0      	blx	r4
}
   1604e:	46c0      	nop			; (mov r8, r8)
   16050:	46bd      	mov	sp, r7
   16052:	b003      	add	sp, #12
   16054:	bd90      	pop	{r4, r7, pc}
   16056:	46c0      	nop			; (mov r8, r8)
   16058:	00036220 	.word	0x00036220
   1605c:	0001d751 	.word	0x0001d751
   16060:	00036168 	.word	0x00036168

00016064 <SubscribeHandlerSprinklerTopic>:
	LogMessage(LOG_DEBUG_LVL, "\r\nDistance topic received!\r\n");
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandlerSprinklerTopic(MessageData *msgData)
{
   16064:	b590      	push	{r4, r7, lr}
   16066:	b083      	sub	sp, #12
   16068:	af00      	add	r7, sp, #0
   1606a:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nSprinkler topic received!\r\n");
   1606c:	4b1d      	ldr	r3, [pc, #116]	; (160e4 <SubscribeHandlerSprinklerTopic+0x80>)
   1606e:	0019      	movs	r1, r3
   16070:	2001      	movs	r0, #1
   16072:	4b1d      	ldr	r3, [pc, #116]	; (160e8 <SubscribeHandlerSprinklerTopic+0x84>)
   16074:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->message->payloadlen, msgData->message->payload);
   16076:	687b      	ldr	r3, [r7, #4]
   16078:	681b      	ldr	r3, [r3, #0]
   1607a:	68da      	ldr	r2, [r3, #12]
   1607c:	687b      	ldr	r3, [r7, #4]
   1607e:	681b      	ldr	r3, [r3, #0]
   16080:	689b      	ldr	r3, [r3, #8]
   16082:	491a      	ldr	r1, [pc, #104]	; (160ec <SubscribeHandlerSprinklerTopic+0x88>)
   16084:	2001      	movs	r0, #1
   16086:	4c18      	ldr	r4, [pc, #96]	; (160e8 <SubscribeHandlerSprinklerTopic+0x84>)
   16088:	47a0      	blx	r4
	//LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
	// Handle Sprinkler message
	if (strncmp((char *)msgData->message->payload, "0", msgData->message->payloadlen) == 0)
   1608a:	687b      	ldr	r3, [r7, #4]
   1608c:	681b      	ldr	r3, [r3, #0]
   1608e:	6898      	ldr	r0, [r3, #8]
   16090:	687b      	ldr	r3, [r7, #4]
   16092:	681b      	ldr	r3, [r3, #0]
   16094:	68da      	ldr	r2, [r3, #12]
   16096:	4b16      	ldr	r3, [pc, #88]	; (160f0 <SubscribeHandlerSprinklerTopic+0x8c>)
   16098:	0019      	movs	r1, r3
   1609a:	4b16      	ldr	r3, [pc, #88]	; (160f4 <SubscribeHandlerSprinklerTopic+0x90>)
   1609c:	4798      	blx	r3
   1609e:	1e03      	subs	r3, r0, #0
   160a0:	d108      	bne.n	160b4 <SubscribeHandlerSprinklerTopic+0x50>
	{
		port_pin_set_output_level(RELAY_PIN, 0);
   160a2:	2100      	movs	r1, #0
   160a4:	2015      	movs	r0, #21
   160a6:	4b14      	ldr	r3, [pc, #80]	; (160f8 <SubscribeHandlerSprinklerTopic+0x94>)
   160a8:	4798      	blx	r3
		port_pin_set_output_level(RELAY_PIN, false);
   160aa:	2100      	movs	r1, #0
   160ac:	2015      	movs	r0, #21
   160ae:	4b12      	ldr	r3, [pc, #72]	; (160f8 <SubscribeHandlerSprinklerTopic+0x94>)
   160b0:	4798      	blx	r3
	else if (strncmp((char *)msgData->message->payload, "1", msgData->message->payloadlen) == 0)
	{
		port_pin_set_output_level(RELAY_PIN, 1);
		port_pin_set_output_level(RELAY_PIN, true);
	}
}
   160b2:	e013      	b.n	160dc <SubscribeHandlerSprinklerTopic+0x78>
	else if (strncmp((char *)msgData->message->payload, "1", msgData->message->payloadlen) == 0)
   160b4:	687b      	ldr	r3, [r7, #4]
   160b6:	681b      	ldr	r3, [r3, #0]
   160b8:	6898      	ldr	r0, [r3, #8]
   160ba:	687b      	ldr	r3, [r7, #4]
   160bc:	681b      	ldr	r3, [r3, #0]
   160be:	68da      	ldr	r2, [r3, #12]
   160c0:	4b0e      	ldr	r3, [pc, #56]	; (160fc <SubscribeHandlerSprinklerTopic+0x98>)
   160c2:	0019      	movs	r1, r3
   160c4:	4b0b      	ldr	r3, [pc, #44]	; (160f4 <SubscribeHandlerSprinklerTopic+0x90>)
   160c6:	4798      	blx	r3
   160c8:	1e03      	subs	r3, r0, #0
   160ca:	d107      	bne.n	160dc <SubscribeHandlerSprinklerTopic+0x78>
		port_pin_set_output_level(RELAY_PIN, 1);
   160cc:	2101      	movs	r1, #1
   160ce:	2015      	movs	r0, #21
   160d0:	4b09      	ldr	r3, [pc, #36]	; (160f8 <SubscribeHandlerSprinklerTopic+0x94>)
   160d2:	4798      	blx	r3
		port_pin_set_output_level(RELAY_PIN, true);
   160d4:	2101      	movs	r1, #1
   160d6:	2015      	movs	r0, #21
   160d8:	4b07      	ldr	r3, [pc, #28]	; (160f8 <SubscribeHandlerSprinklerTopic+0x94>)
   160da:	4798      	blx	r3
}
   160dc:	46c0      	nop			; (mov r8, r8)
   160de:	46bd      	mov	sp, r7
   160e0:	b003      	add	sp, #12
   160e2:	bd90      	pop	{r4, r7, pc}
   160e4:	00036258 	.word	0x00036258
   160e8:	0001d751 	.word	0x0001d751
   160ec:	00036168 	.word	0x00036168
   160f0:	00036278 	.word	0x00036278
   160f4:	000346dd 	.word	0x000346dd
   160f8:	00015235 	.word	0x00015235
   160fc:	0003627c 	.word	0x0003627c

00016100 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16100:	b590      	push	{r4, r7, lr}
   16102:	b08b      	sub	sp, #44	; 0x2c
   16104:	af06      	add	r7, sp, #24
   16106:	60f8      	str	r0, [r7, #12]
   16108:	60b9      	str	r1, [r7, #8]
   1610a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1610c:	68bb      	ldr	r3, [r7, #8]
   1610e:	2b01      	cmp	r3, #1
   16110:	d03b      	beq.n	1618a <mqtt_callback+0x8a>
   16112:	2b05      	cmp	r3, #5
   16114:	d064      	beq.n	161e0 <mqtt_callback+0xe0>
   16116:	2b00      	cmp	r3, #0
   16118:	d000      	beq.n	1611c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   1611a:	e067      	b.n	161ec <mqtt_callback+0xec>
            if (data->sock_connected.result >= 0) {
   1611c:	687b      	ldr	r3, [r7, #4]
   1611e:	681b      	ldr	r3, [r3, #0]
   16120:	2b00      	cmp	r3, #0
   16122:	db25      	blt.n	16170 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16124:	4b33      	ldr	r3, [pc, #204]	; (161f4 <mqtt_callback+0xf4>)
   16126:	0019      	movs	r1, r3
   16128:	2001      	movs	r0, #1
   1612a:	4b33      	ldr	r3, [pc, #204]	; (161f8 <mqtt_callback+0xf8>)
   1612c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   1612e:	4933      	ldr	r1, [pc, #204]	; (161fc <mqtt_callback+0xfc>)
   16130:	4a33      	ldr	r2, [pc, #204]	; (16200 <mqtt_callback+0x100>)
   16132:	68f8      	ldr	r0, [r7, #12]
   16134:	2300      	movs	r3, #0
   16136:	9305      	str	r3, [sp, #20]
   16138:	2300      	movs	r3, #0
   1613a:	9304      	str	r3, [sp, #16]
   1613c:	2300      	movs	r3, #0
   1613e:	9303      	str	r3, [sp, #12]
   16140:	2300      	movs	r3, #0
   16142:	9302      	str	r3, [sp, #8]
   16144:	2300      	movs	r3, #0
   16146:	9301      	str	r3, [sp, #4]
   16148:	4b2d      	ldr	r3, [pc, #180]	; (16200 <mqtt_callback+0x100>)
   1614a:	9300      	str	r3, [sp, #0]
   1614c:	000b      	movs	r3, r1
   1614e:	2101      	movs	r1, #1
   16150:	4c2c      	ldr	r4, [pc, #176]	; (16204 <mqtt_callback+0x104>)
   16152:	47a0      	blx	r4
   16154:	1e03      	subs	r3, r0, #0
   16156:	d005      	beq.n	16164 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16158:	4b2b      	ldr	r3, [pc, #172]	; (16208 <mqtt_callback+0x108>)
   1615a:	0019      	movs	r1, r3
   1615c:	2001      	movs	r0, #1
   1615e:	4b26      	ldr	r3, [pc, #152]	; (161f8 <mqtt_callback+0xf8>)
   16160:	4798      	blx	r3
        } break;
   16162:	e043      	b.n	161ec <mqtt_callback+0xec>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16164:	4b29      	ldr	r3, [pc, #164]	; (1620c <mqtt_callback+0x10c>)
   16166:	0019      	movs	r1, r3
   16168:	2001      	movs	r0, #1
   1616a:	4b23      	ldr	r3, [pc, #140]	; (161f8 <mqtt_callback+0xf8>)
   1616c:	4798      	blx	r3
        } break;
   1616e:	e03d      	b.n	161ec <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16170:	4a27      	ldr	r2, [pc, #156]	; (16210 <mqtt_callback+0x110>)
   16172:	4b28      	ldr	r3, [pc, #160]	; (16214 <mqtt_callback+0x114>)
   16174:	0019      	movs	r1, r3
   16176:	2001      	movs	r0, #1
   16178:	4b1f      	ldr	r3, [pc, #124]	; (161f8 <mqtt_callback+0xf8>)
   1617a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1617c:	4a24      	ldr	r2, [pc, #144]	; (16210 <mqtt_callback+0x110>)
   1617e:	68fb      	ldr	r3, [r7, #12]
   16180:	0011      	movs	r1, r2
   16182:	0018      	movs	r0, r3
   16184:	4b24      	ldr	r3, [pc, #144]	; (16218 <mqtt_callback+0x118>)
   16186:	4798      	blx	r3
        } break;
   16188:	e030      	b.n	161ec <mqtt_callback+0xec>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1618a:	687b      	ldr	r3, [r7, #4]
   1618c:	781b      	ldrb	r3, [r3, #0]
   1618e:	2b00      	cmp	r3, #0
   16190:	d11d      	bne.n	161ce <mqtt_callback+0xce>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   16192:	4b22      	ldr	r3, [pc, #136]	; (1621c <mqtt_callback+0x11c>)
   16194:	4922      	ldr	r1, [pc, #136]	; (16220 <mqtt_callback+0x120>)
   16196:	68f8      	ldr	r0, [r7, #12]
   16198:	2202      	movs	r2, #2
   1619a:	4c22      	ldr	r4, [pc, #136]	; (16224 <mqtt_callback+0x124>)
   1619c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   1619e:	4b22      	ldr	r3, [pc, #136]	; (16228 <mqtt_callback+0x128>)
   161a0:	4922      	ldr	r1, [pc, #136]	; (1622c <mqtt_callback+0x12c>)
   161a2:	68f8      	ldr	r0, [r7, #12]
   161a4:	2202      	movs	r2, #2
   161a6:	4c1f      	ldr	r4, [pc, #124]	; (16224 <mqtt_callback+0x124>)
   161a8:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   161aa:	4b21      	ldr	r3, [pc, #132]	; (16230 <mqtt_callback+0x130>)
   161ac:	4921      	ldr	r1, [pc, #132]	; (16234 <mqtt_callback+0x134>)
   161ae:	68f8      	ldr	r0, [r7, #12]
   161b0:	2202      	movs	r2, #2
   161b2:	4c1c      	ldr	r4, [pc, #112]	; (16224 <mqtt_callback+0x124>)
   161b4:	47a0      	blx	r4
				mqtt_subscribe(module_inst, SPRINKLER_TOPIC, 2, SubscribeHandlerSprinklerTopic);
   161b6:	4b20      	ldr	r3, [pc, #128]	; (16238 <mqtt_callback+0x138>)
   161b8:	4920      	ldr	r1, [pc, #128]	; (1623c <mqtt_callback+0x13c>)
   161ba:	68f8      	ldr	r0, [r7, #12]
   161bc:	2202      	movs	r2, #2
   161be:	4c19      	ldr	r4, [pc, #100]	; (16224 <mqtt_callback+0x124>)
   161c0:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   161c2:	4b1f      	ldr	r3, [pc, #124]	; (16240 <mqtt_callback+0x140>)
   161c4:	0019      	movs	r1, r3
   161c6:	2001      	movs	r0, #1
   161c8:	4b0b      	ldr	r3, [pc, #44]	; (161f8 <mqtt_callback+0xf8>)
   161ca:	4798      	blx	r3
            break;
   161cc:	e00e      	b.n	161ec <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   161ce:	687b      	ldr	r3, [r7, #4]
   161d0:	781b      	ldrb	r3, [r3, #0]
   161d2:	001a      	movs	r2, r3
   161d4:	4b1b      	ldr	r3, [pc, #108]	; (16244 <mqtt_callback+0x144>)
   161d6:	0019      	movs	r1, r3
   161d8:	2001      	movs	r0, #1
   161da:	4b07      	ldr	r3, [pc, #28]	; (161f8 <mqtt_callback+0xf8>)
   161dc:	4798      	blx	r3
            break;
   161de:	e005      	b.n	161ec <mqtt_callback+0xec>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   161e0:	4b19      	ldr	r3, [pc, #100]	; (16248 <mqtt_callback+0x148>)
   161e2:	0019      	movs	r1, r3
   161e4:	2001      	movs	r0, #1
   161e6:	4b04      	ldr	r3, [pc, #16]	; (161f8 <mqtt_callback+0xf8>)
   161e8:	4798      	blx	r3
            break;
   161ea:	46c0      	nop			; (mov r8, r8)
}
   161ec:	46c0      	nop			; (mov r8, r8)
   161ee:	46bd      	mov	sp, r7
   161f0:	b005      	add	sp, #20
   161f2:	bd90      	pop	{r4, r7, pc}
   161f4:	000362ac 	.word	0x000362ac
   161f8:	0001d751 	.word	0x0001d751
   161fc:	000362c8 	.word	0x000362c8
   16200:	000362d8 	.word	0x000362d8
   16204:	0002f121 	.word	0x0002f121
   16208:	000362e4 	.word	0x000362e4
   1620c:	0003630c 	.word	0x0003630c
   16210:	00035be4 	.word	0x00035be4
   16214:	00036328 	.word	0x00036328
   16218:	0002f0d9 	.word	0x0002f0d9
   1621c:	00015ec1 	.word	0x00015ec1
   16220:	00036360 	.word	0x00036360
   16224:	0002f2c1 	.word	0x0002f2c1
   16228:	00015dcd 	.word	0x00015dcd
   1622c:	00036288 	.word	0x00036288
   16230:	00016029 	.word	0x00016029
   16234:	00036374 	.word	0x00036374
   16238:	00016065 	.word	0x00016065
   1623c:	00036388 	.word	0x00036388
   16240:	00036394 	.word	0x00036394
   16244:	000363a8 	.word	0x000363a8
   16248:	000363dc 	.word	0x000363dc

0001624c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   1624c:	b580      	push	{r7, lr}
   1624e:	b088      	sub	sp, #32
   16250:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   16252:	1d3b      	adds	r3, r7, #4
   16254:	0018      	movs	r0, r3
   16256:	4b1f      	ldr	r3, [pc, #124]	; (162d4 <configure_mqtt+0x88>)
   16258:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1625a:	1d3b      	adds	r3, r7, #4
   1625c:	4a1e      	ldr	r2, [pc, #120]	; (162d8 <configure_mqtt+0x8c>)
   1625e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16260:	1d3b      	adds	r3, r7, #4
   16262:	2280      	movs	r2, #128	; 0x80
   16264:	0092      	lsls	r2, r2, #2
   16266:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   16268:	1d3b      	adds	r3, r7, #4
   1626a:	4a1c      	ldr	r2, [pc, #112]	; (162dc <configure_mqtt+0x90>)
   1626c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1626e:	1d3b      	adds	r3, r7, #4
   16270:	2280      	movs	r2, #128	; 0x80
   16272:	0092      	lsls	r2, r2, #2
   16274:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   16276:	1d3b      	adds	r3, r7, #4
   16278:	4a19      	ldr	r2, [pc, #100]	; (162e0 <configure_mqtt+0x94>)
   1627a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   1627c:	1d3b      	adds	r3, r7, #4
   1627e:	4a19      	ldr	r2, [pc, #100]	; (162e4 <configure_mqtt+0x98>)
   16280:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16282:	1d3a      	adds	r2, r7, #4
   16284:	4b18      	ldr	r3, [pc, #96]	; (162e8 <configure_mqtt+0x9c>)
   16286:	0011      	movs	r1, r2
   16288:	0018      	movs	r0, r3
   1628a:	4b18      	ldr	r3, [pc, #96]	; (162ec <configure_mqtt+0xa0>)
   1628c:	4798      	blx	r3
   1628e:	0003      	movs	r3, r0
   16290:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16292:	69fb      	ldr	r3, [r7, #28]
   16294:	2b00      	cmp	r3, #0
   16296:	da06      	bge.n	162a6 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   16298:	69fa      	ldr	r2, [r7, #28]
   1629a:	4b15      	ldr	r3, [pc, #84]	; (162f0 <configure_mqtt+0xa4>)
   1629c:	0019      	movs	r1, r3
   1629e:	2001      	movs	r0, #1
   162a0:	4b14      	ldr	r3, [pc, #80]	; (162f4 <configure_mqtt+0xa8>)
   162a2:	4798      	blx	r3
        while (1) {
   162a4:	e7fe      	b.n	162a4 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   162a6:	4a14      	ldr	r2, [pc, #80]	; (162f8 <configure_mqtt+0xac>)
   162a8:	4b0f      	ldr	r3, [pc, #60]	; (162e8 <configure_mqtt+0x9c>)
   162aa:	0011      	movs	r1, r2
   162ac:	0018      	movs	r0, r3
   162ae:	4b13      	ldr	r3, [pc, #76]	; (162fc <configure_mqtt+0xb0>)
   162b0:	4798      	blx	r3
   162b2:	0003      	movs	r3, r0
   162b4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   162b6:	69fb      	ldr	r3, [r7, #28]
   162b8:	2b00      	cmp	r3, #0
   162ba:	da06      	bge.n	162ca <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   162bc:	69fa      	ldr	r2, [r7, #28]
   162be:	4b10      	ldr	r3, [pc, #64]	; (16300 <configure_mqtt+0xb4>)
   162c0:	0019      	movs	r1, r3
   162c2:	2001      	movs	r0, #1
   162c4:	4b0b      	ldr	r3, [pc, #44]	; (162f4 <configure_mqtt+0xa8>)
   162c6:	4798      	blx	r3
        while (1) {
   162c8:	e7fe      	b.n	162c8 <configure_mqtt+0x7c>
        }
    }
}
   162ca:	46c0      	nop			; (mov r8, r8)
   162cc:	46bd      	mov	sp, r7
   162ce:	b008      	add	sp, #32
   162d0:	bd80      	pop	{r7, pc}
   162d2:	46c0      	nop			; (mov r8, r8)
   162d4:	0002f019 	.word	0x0002f019
   162d8:	2000074c 	.word	0x2000074c
   162dc:	2000094c 	.word	0x2000094c
   162e0:	0000075b 	.word	0x0000075b
   162e4:	00001770 	.word	0x00001770
   162e8:	20000714 	.word	0x20000714
   162ec:	0002ef69 	.word	0x0002ef69
   162f0:	000363f0 	.word	0x000363f0
   162f4:	0001d751 	.word	0x0001d751
   162f8:	00016101 	.word	0x00016101
   162fc:	0002f059 	.word	0x0002f059
   16300:	00036424 	.word	0x00036424

00016304 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   16304:	b580      	push	{r7, lr}
   16306:	b084      	sub	sp, #16
   16308:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   1630a:	1d3b      	adds	r3, r7, #4
   1630c:	0018      	movs	r0, r3
   1630e:	4b0b      	ldr	r3, [pc, #44]	; (1633c <configure_extint_channel+0x38>)
   16310:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   16312:	1d3b      	adds	r3, r7, #4
   16314:	2237      	movs	r2, #55	; 0x37
   16316:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16318:	1d3b      	adds	r3, r7, #4
   1631a:	2200      	movs	r2, #0
   1631c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1631e:	1d3b      	adds	r3, r7, #4
   16320:	2201      	movs	r2, #1
   16322:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16324:	1d3b      	adds	r3, r7, #4
   16326:	2202      	movs	r2, #2
   16328:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   1632a:	1d3b      	adds	r3, r7, #4
   1632c:	0019      	movs	r1, r3
   1632e:	2007      	movs	r0, #7
   16330:	4b03      	ldr	r3, [pc, #12]	; (16340 <configure_extint_channel+0x3c>)
   16332:	4798      	blx	r3
}
   16334:	46c0      	nop			; (mov r8, r8)
   16336:	46bd      	mov	sp, r7
   16338:	b004      	add	sp, #16
   1633a:	bd80      	pop	{r7, pc}
   1633c:	00026151 	.word	0x00026151
   16340:	00026185 	.word	0x00026185

00016344 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   16344:	b580      	push	{r7, lr}
   16346:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16348:	4b06      	ldr	r3, [pc, #24]	; (16364 <configure_extint_callbacks+0x20>)
   1634a:	2200      	movs	r2, #0
   1634c:	2107      	movs	r1, #7
   1634e:	0018      	movs	r0, r3
   16350:	4b05      	ldr	r3, [pc, #20]	; (16368 <configure_extint_callbacks+0x24>)
   16352:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16354:	2100      	movs	r1, #0
   16356:	2007      	movs	r0, #7
   16358:	4b04      	ldr	r3, [pc, #16]	; (1636c <configure_extint_callbacks+0x28>)
   1635a:	4798      	blx	r3
}
   1635c:	46c0      	nop			; (mov r8, r8)
   1635e:	46bd      	mov	sp, r7
   16360:	bd80      	pop	{r7, pc}
   16362:	46c0      	nop			; (mov r8, r8)
   16364:	00016371 	.word	0x00016371
   16368:	00025d51 	.word	0x00025d51
   1636c:	00025db5 	.word	0x00025db5

00016370 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16370:	b5b0      	push	{r4, r5, r7, lr}
   16372:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   16374:	4b0c      	ldr	r3, [pc, #48]	; (163a8 <extint_detection_callback+0x38>)
   16376:	681b      	ldr	r3, [r3, #0]
   16378:	1c5a      	adds	r2, r3, #1
   1637a:	4b0b      	ldr	r3, [pc, #44]	; (163a8 <extint_detection_callback+0x38>)
   1637c:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   1637e:	4b0a      	ldr	r3, [pc, #40]	; (163a8 <extint_detection_callback+0x38>)
   16380:	681b      	ldr	r3, [r3, #0]
   16382:	2b28      	cmp	r3, #40	; 0x28
   16384:	d902      	bls.n	1638c <extint_detection_callback+0x1c>
   16386:	4b08      	ldr	r3, [pc, #32]	; (163a8 <extint_detection_callback+0x38>)
   16388:	2201      	movs	r2, #1
   1638a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   1638c:	4b06      	ldr	r3, [pc, #24]	; (163a8 <extint_detection_callback+0x38>)
   1638e:	681b      	ldr	r3, [r3, #0]
   16390:	4a06      	ldr	r2, [pc, #24]	; (163ac <extint_detection_callback+0x3c>)
   16392:	4807      	ldr	r0, [pc, #28]	; (163b0 <extint_detection_callback+0x40>)
   16394:	213f      	movs	r1, #63	; 0x3f
   16396:	4c07      	ldr	r4, [pc, #28]	; (163b4 <extint_detection_callback+0x44>)
   16398:	47a0      	blx	r4
    isPressed = true;
   1639a:	4b07      	ldr	r3, [pc, #28]	; (163b8 <extint_detection_callback+0x48>)
   1639c:	2201      	movs	r2, #1
   1639e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   163a0:	46c0      	nop			; (mov r8, r8)
   163a2:	46bd      	mov	sp, r7
   163a4:	bdb0      	pop	{r4, r5, r7, pc}
   163a6:	46c0      	nop			; (mov r8, r8)
   163a8:	200000a8 	.word	0x200000a8
   163ac:	00036458 	.word	0x00036458
   163b0:	20000068 	.word	0x20000068
   163b4:	00034571 	.word	0x00034571
   163b8:	20000b4c 	.word	0x20000b4c

000163bc <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   163bc:	b580      	push	{r7, lr}
   163be:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   163c0:	4a15      	ldr	r2, [pc, #84]	; (16418 <HTTP_DownloadFileInit+0x5c>)
   163c2:	4b16      	ldr	r3, [pc, #88]	; (1641c <HTTP_DownloadFileInit+0x60>)
   163c4:	0011      	movs	r1, r2
   163c6:	0018      	movs	r0, r3
   163c8:	4b15      	ldr	r3, [pc, #84]	; (16420 <HTTP_DownloadFileInit+0x64>)
   163ca:	4798      	blx	r3
   163cc:	1e03      	subs	r3, r0, #0
   163ce:	d008      	beq.n	163e2 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   163d0:	4b14      	ldr	r3, [pc, #80]	; (16424 <HTTP_DownloadFileInit+0x68>)
   163d2:	0019      	movs	r1, r3
   163d4:	2001      	movs	r0, #1
   163d6:	4b14      	ldr	r3, [pc, #80]	; (16428 <HTTP_DownloadFileInit+0x6c>)
   163d8:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   163da:	e002      	b.n	163e2 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   163dc:	2000      	movs	r0, #0
   163de:	4b13      	ldr	r3, [pc, #76]	; (1642c <HTTP_DownloadFileInit+0x70>)
   163e0:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   163e2:	4b0e      	ldr	r3, [pc, #56]	; (1641c <HTTP_DownloadFileInit+0x60>)
   163e4:	2234      	movs	r2, #52	; 0x34
   163e6:	5c9b      	ldrb	r3, [r3, r2]
   163e8:	2b00      	cmp	r3, #0
   163ea:	d1f7      	bne.n	163dc <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   163ec:	4b10      	ldr	r3, [pc, #64]	; (16430 <HTTP_DownloadFileInit+0x74>)
   163ee:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   163f0:	4b10      	ldr	r3, [pc, #64]	; (16434 <HTTP_DownloadFileInit+0x78>)
   163f2:	2201      	movs	r2, #1
   163f4:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   163f6:	4a10      	ldr	r2, [pc, #64]	; (16438 <HTTP_DownloadFileInit+0x7c>)
   163f8:	4b10      	ldr	r3, [pc, #64]	; (1643c <HTTP_DownloadFileInit+0x80>)
   163fa:	0011      	movs	r1, r2
   163fc:	0018      	movs	r0, r3
   163fe:	4b10      	ldr	r3, [pc, #64]	; (16440 <HTTP_DownloadFileInit+0x84>)
   16400:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   16402:	4b10      	ldr	r3, [pc, #64]	; (16444 <HTTP_DownloadFileInit+0x88>)
   16404:	4798      	blx	r3

    start_download();
   16406:	4b10      	ldr	r3, [pc, #64]	; (16448 <HTTP_DownloadFileInit+0x8c>)
   16408:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1640a:	4b10      	ldr	r3, [pc, #64]	; (1644c <HTTP_DownloadFileInit+0x90>)
   1640c:	2203      	movs	r2, #3
   1640e:	701a      	strb	r2, [r3, #0]
}
   16410:	46c0      	nop			; (mov r8, r8)
   16412:	46bd      	mov	sp, r7
   16414:	bd80      	pop	{r7, pc}
   16416:	46c0      	nop			; (mov r8, r8)
   16418:	00035be4 	.word	0x00035be4
   1641c:	20000714 	.word	0x20000714
   16420:	0002f20d 	.word	0x0002f20d
   16424:	00035ff0 	.word	0x00035ff0
   16428:	0001d751 	.word	0x0001d751
   1642c:	00021841 	.word	0x00021841
   16430:	00024dfd 	.word	0x00024dfd
   16434:	200004b4 	.word	0x200004b4
   16438:	00015a2d 	.word	0x00015a2d
   1643c:	000159f9 	.word	0x000159f9
   16440:	00024e45 	.word	0x00024e45
   16444:	00024dad 	.word	0x00024dad
   16448:	00015621 	.word	0x00015621
   1644c:	20000489 	.word	0x20000489

00016450 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   16450:	b590      	push	{r4, r7, lr}
   16452:	b085      	sub	sp, #20
   16454:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16456:	e009      	b.n	1646c <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16458:	2000      	movs	r0, #0
   1645a:	4b2a      	ldr	r3, [pc, #168]	; (16504 <HTTP_DownloadFileTransaction+0xb4>)
   1645c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1645e:	4b2a      	ldr	r3, [pc, #168]	; (16508 <HTTP_DownloadFileTransaction+0xb8>)
   16460:	0018      	movs	r0, r3
   16462:	4b2a      	ldr	r3, [pc, #168]	; (1650c <HTTP_DownloadFileTransaction+0xbc>)
   16464:	4798      	blx	r3
        vTaskDelay(5);
   16466:	2005      	movs	r0, #5
   16468:	4b29      	ldr	r3, [pc, #164]	; (16510 <HTTP_DownloadFileTransaction+0xc0>)
   1646a:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1646c:	2010      	movs	r0, #16
   1646e:	4b29      	ldr	r3, [pc, #164]	; (16514 <HTTP_DownloadFileTransaction+0xc4>)
   16470:	4798      	blx	r3
   16472:	0003      	movs	r3, r0
   16474:	001a      	movs	r2, r3
   16476:	2301      	movs	r3, #1
   16478:	4053      	eors	r3, r2
   1647a:	b2db      	uxtb	r3, r3
   1647c:	2b00      	cmp	r3, #0
   1647e:	d009      	beq.n	16494 <HTTP_DownloadFileTransaction+0x44>
   16480:	2020      	movs	r0, #32
   16482:	4b24      	ldr	r3, [pc, #144]	; (16514 <HTTP_DownloadFileTransaction+0xc4>)
   16484:	4798      	blx	r3
   16486:	0003      	movs	r3, r0
   16488:	001a      	movs	r2, r3
   1648a:	2301      	movs	r3, #1
   1648c:	4053      	eors	r3, r2
   1648e:	b2db      	uxtb	r3, r3
   16490:	2b00      	cmp	r3, #0
   16492:	d1e1      	bne.n	16458 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   16494:	4b20      	ldr	r3, [pc, #128]	; (16518 <HTTP_DownloadFileTransaction+0xc8>)
   16496:	4798      	blx	r3
    vTaskDelay(1000);
   16498:	23fa      	movs	r3, #250	; 0xfa
   1649a:	009b      	lsls	r3, r3, #2
   1649c:	0018      	movs	r0, r3
   1649e:	4b1c      	ldr	r3, [pc, #112]	; (16510 <HTTP_DownloadFileTransaction+0xc0>)
   164a0:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   164a2:	4b1e      	ldr	r3, [pc, #120]	; (1651c <HTTP_DownloadFileTransaction+0xcc>)
   164a4:	2200      	movs	r2, #0
   164a6:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   164a8:	003b      	movs	r3, r7
   164aa:	4a1d      	ldr	r2, [pc, #116]	; (16520 <HTTP_DownloadFileTransaction+0xd0>)
   164ac:	ca13      	ldmia	r2!, {r0, r1, r4}
   164ae:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   164b0:	003b      	movs	r3, r7
   164b2:	2230      	movs	r2, #48	; 0x30
   164b4:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   164b6:	230f      	movs	r3, #15
   164b8:	18fc      	adds	r4, r7, r3
   164ba:	0039      	movs	r1, r7
   164bc:	4b19      	ldr	r3, [pc, #100]	; (16524 <HTTP_DownloadFileTransaction+0xd4>)
   164be:	220a      	movs	r2, #10
   164c0:	0018      	movs	r0, r3
   164c2:	4b19      	ldr	r3, [pc, #100]	; (16528 <HTTP_DownloadFileTransaction+0xd8>)
   164c4:	4798      	blx	r3
   164c6:	0003      	movs	r3, r0
   164c8:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   164ca:	230f      	movs	r3, #15
   164cc:	18fb      	adds	r3, r7, r3
   164ce:	781b      	ldrb	r3, [r3, #0]
   164d0:	2b00      	cmp	r3, #0
   164d2:	d008      	beq.n	164e6 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   164d4:	230f      	movs	r3, #15
   164d6:	18fb      	adds	r3, r7, r3
   164d8:	781a      	ldrb	r2, [r3, #0]
   164da:	4b14      	ldr	r3, [pc, #80]	; (1652c <HTTP_DownloadFileTransaction+0xdc>)
   164dc:	0019      	movs	r1, r3
   164de:	2000      	movs	r0, #0
   164e0:	4b13      	ldr	r3, [pc, #76]	; (16530 <HTTP_DownloadFileTransaction+0xe0>)
   164e2:	4798      	blx	r3
   164e4:	e003      	b.n	164ee <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   164e6:	4b13      	ldr	r3, [pc, #76]	; (16534 <HTTP_DownloadFileTransaction+0xe4>)
   164e8:	0018      	movs	r0, r3
   164ea:	4b13      	ldr	r3, [pc, #76]	; (16538 <HTTP_DownloadFileTransaction+0xe8>)
   164ec:	4798      	blx	r3
    }
	
	f_close(&file_object);
   164ee:	4b0d      	ldr	r3, [pc, #52]	; (16524 <HTTP_DownloadFileTransaction+0xd4>)
   164f0:	0018      	movs	r0, r3
   164f2:	4b12      	ldr	r3, [pc, #72]	; (1653c <HTTP_DownloadFileTransaction+0xec>)
   164f4:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   164f6:	4b12      	ldr	r3, [pc, #72]	; (16540 <HTTP_DownloadFileTransaction+0xf0>)
   164f8:	2200      	movs	r2, #0
   164fa:	701a      	strb	r2, [r3, #0]
}
   164fc:	46c0      	nop			; (mov r8, r8)
   164fe:	46bd      	mov	sp, r7
   16500:	b005      	add	sp, #20
   16502:	bd90      	pop	{r4, r7, pc}
   16504:	00021841 	.word	0x00021841
   16508:	200046b4 	.word	0x200046b4
   1650c:	00031f35 	.word	0x00031f35
   16510:	0001ba11 	.word	0x0001ba11
   16514:	000152f9 	.word	0x000152f9
   16518:	00024dfd 	.word	0x00024dfd
   1651c:	200004b4 	.word	0x200004b4
   16520:	00036490 	.word	0x00036490
   16524:	200006e8 	.word	0x200006e8
   16528:	0002d1fd 	.word	0x0002d1fd
   1652c:	0003646c 	.word	0x0003646c
   16530:	0001d751 	.word	0x0001d751
   16534:	0003647c 	.word	0x0003647c
   16538:	0001d665 	.word	0x0001d665
   1653c:	0002dbfd 	.word	0x0002dbfd
   16540:	20000489 	.word	0x20000489

00016544 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   16544:	b580      	push	{r7, lr}
   16546:	af00      	add	r7, sp, #0
    socketDeinit();
   16548:	4b18      	ldr	r3, [pc, #96]	; (165ac <MQTT_InitRoutine+0x68>)
   1654a:	4798      	blx	r3
    configure_mqtt();
   1654c:	4b18      	ldr	r3, [pc, #96]	; (165b0 <MQTT_InitRoutine+0x6c>)
   1654e:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16550:	4a18      	ldr	r2, [pc, #96]	; (165b4 <MQTT_InitRoutine+0x70>)
   16552:	4b19      	ldr	r3, [pc, #100]	; (165b8 <MQTT_InitRoutine+0x74>)
   16554:	0011      	movs	r1, r2
   16556:	0018      	movs	r0, r3
   16558:	4b18      	ldr	r3, [pc, #96]	; (165bc <MQTT_InitRoutine+0x78>)
   1655a:	4798      	blx	r3
    socketInit();
   1655c:	4b18      	ldr	r3, [pc, #96]	; (165c0 <MQTT_InitRoutine+0x7c>)
   1655e:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16560:	4b18      	ldr	r3, [pc, #96]	; (165c4 <MQTT_InitRoutine+0x80>)
   16562:	2234      	movs	r2, #52	; 0x34
   16564:	5c9b      	ldrb	r3, [r3, r2]
   16566:	2201      	movs	r2, #1
   16568:	4053      	eors	r3, r2
   1656a:	b2db      	uxtb	r3, r3
   1656c:	2b00      	cmp	r3, #0
   1656e:	d00c      	beq.n	1658a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16570:	4a15      	ldr	r2, [pc, #84]	; (165c8 <MQTT_InitRoutine+0x84>)
   16572:	4b14      	ldr	r3, [pc, #80]	; (165c4 <MQTT_InitRoutine+0x80>)
   16574:	0011      	movs	r1, r2
   16576:	0018      	movs	r0, r3
   16578:	4b14      	ldr	r3, [pc, #80]	; (165cc <MQTT_InitRoutine+0x88>)
   1657a:	4798      	blx	r3
   1657c:	1e03      	subs	r3, r0, #0
   1657e:	d004      	beq.n	1658a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16580:	4b13      	ldr	r3, [pc, #76]	; (165d0 <MQTT_InitRoutine+0x8c>)
   16582:	0019      	movs	r1, r3
   16584:	2001      	movs	r0, #1
   16586:	4b13      	ldr	r3, [pc, #76]	; (165d4 <MQTT_InitRoutine+0x90>)
   16588:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1658a:	4b0e      	ldr	r3, [pc, #56]	; (165c4 <MQTT_InitRoutine+0x80>)
   1658c:	2234      	movs	r2, #52	; 0x34
   1658e:	5c9b      	ldrb	r3, [r3, r2]
   16590:	2b00      	cmp	r3, #0
   16592:	d004      	beq.n	1659e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   16594:	4b10      	ldr	r3, [pc, #64]	; (165d8 <MQTT_InitRoutine+0x94>)
   16596:	0019      	movs	r1, r3
   16598:	2001      	movs	r0, #1
   1659a:	4b0e      	ldr	r3, [pc, #56]	; (165d4 <MQTT_InitRoutine+0x90>)
   1659c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1659e:	4b0f      	ldr	r3, [pc, #60]	; (165dc <MQTT_InitRoutine+0x98>)
   165a0:	2201      	movs	r2, #1
   165a2:	701a      	strb	r2, [r3, #0]
}
   165a4:	46c0      	nop			; (mov r8, r8)
   165a6:	46bd      	mov	sp, r7
   165a8:	bd80      	pop	{r7, pc}
   165aa:	46c0      	nop			; (mov r8, r8)
   165ac:	00024dfd 	.word	0x00024dfd
   165b0:	0001624d 	.word	0x0001624d
   165b4:	00015da9 	.word	0x00015da9
   165b8:	00015d75 	.word	0x00015d75
   165bc:	00024e45 	.word	0x00024e45
   165c0:	00024dad 	.word	0x00024dad
   165c4:	20000714 	.word	0x20000714
   165c8:	00035be4 	.word	0x00035be4
   165cc:	0002f0d9 	.word	0x0002f0d9
   165d0:	00035ff0 	.word	0x00035ff0
   165d4:	0001d751 	.word	0x0001d751
   165d8:	0003649c 	.word	0x0003649c
   165dc:	20000489 	.word	0x20000489

000165e0 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   165e0:	b580      	push	{r7, lr}
   165e2:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   165e4:	2000      	movs	r0, #0
   165e6:	4b0e      	ldr	r3, [pc, #56]	; (16620 <MQTT_HandleTransactions+0x40>)
   165e8:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   165ea:	4b0e      	ldr	r3, [pc, #56]	; (16624 <MQTT_HandleTransactions+0x44>)
   165ec:	0018      	movs	r0, r3
   165ee:	4b0e      	ldr	r3, [pc, #56]	; (16628 <MQTT_HandleTransactions+0x48>)
   165f0:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   165f2:	4b0e      	ldr	r3, [pc, #56]	; (1662c <MQTT_HandleTransactions+0x4c>)
   165f4:	4798      	blx	r3
    MQTT_HandleImuMessages();
   165f6:	4b0e      	ldr	r3, [pc, #56]	; (16630 <MQTT_HandleTransactions+0x50>)
   165f8:	4798      	blx	r3
	MQTT_HandleMicMessages();
   165fa:	4b0e      	ldr	r3, [pc, #56]	; (16634 <MQTT_HandleTransactions+0x54>)
   165fc:	4798      	blx	r3
	MQTT_HandleTempMessages();
   165fe:	4b0e      	ldr	r3, [pc, #56]	; (16638 <MQTT_HandleTransactions+0x58>)
   16600:	4798      	blx	r3
	MQTT_HandleMoistureMessages();
   16602:	4b0e      	ldr	r3, [pc, #56]	; (1663c <MQTT_HandleTransactions+0x5c>)
   16604:	4798      	blx	r3
	//MQTT_HandleSprinklerMessages();

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16606:	4b0e      	ldr	r3, [pc, #56]	; (16640 <MQTT_HandleTransactions+0x60>)
   16608:	2234      	movs	r2, #52	; 0x34
   1660a:	5c9b      	ldrb	r3, [r3, r2]
   1660c:	2b00      	cmp	r3, #0
   1660e:	d004      	beq.n	1661a <MQTT_HandleTransactions+0x3a>
   16610:	4b0b      	ldr	r3, [pc, #44]	; (16640 <MQTT_HandleTransactions+0x60>)
   16612:	2164      	movs	r1, #100	; 0x64
   16614:	0018      	movs	r0, r3
   16616:	4b0b      	ldr	r3, [pc, #44]	; (16644 <MQTT_HandleTransactions+0x64>)
   16618:	4798      	blx	r3
}
   1661a:	46c0      	nop			; (mov r8, r8)
   1661c:	46bd      	mov	sp, r7
   1661e:	bd80      	pop	{r7, pc}
   16620:	00021841 	.word	0x00021841
   16624:	200046b4 	.word	0x200046b4
   16628:	00031f35 	.word	0x00031f35
   1662c:	00016875 	.word	0x00016875
   16630:	00016649 	.word	0x00016649
   16634:	000166d5 	.word	0x000166d5
   16638:	00016749 	.word	0x00016749
   1663c:	00016805 	.word	0x00016805
   16640:	20000714 	.word	0x20000714
   16644:	0002f309 	.word	0x0002f309

00016648 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   16648:	b590      	push	{r4, r7, lr}
   1664a:	b085      	sub	sp, #20
   1664c:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   1664e:	4b18      	ldr	r3, [pc, #96]	; (166b0 <MQTT_HandleImuMessages+0x68>)
   16650:	681b      	ldr	r3, [r3, #0]
   16652:	0039      	movs	r1, r7
   16654:	2200      	movs	r2, #0
   16656:	0018      	movs	r0, r3
   16658:	4b16      	ldr	r3, [pc, #88]	; (166b4 <MQTT_HandleImuMessages+0x6c>)
   1665a:	4798      	blx	r3
   1665c:	0003      	movs	r3, r0
   1665e:	2b01      	cmp	r3, #1
   16660:	d121      	bne.n	166a6 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   16662:	003b      	movs	r3, r7
   16664:	2200      	movs	r2, #0
   16666:	5e9b      	ldrsh	r3, [r3, r2]
   16668:	001c      	movs	r4, r3
   1666a:	003b      	movs	r3, r7
   1666c:	2202      	movs	r2, #2
   1666e:	5e9b      	ldrsh	r3, [r3, r2]
   16670:	0019      	movs	r1, r3
   16672:	003b      	movs	r3, r7
   16674:	2204      	movs	r2, #4
   16676:	5e9b      	ldrsh	r3, [r3, r2]
   16678:	4a0f      	ldr	r2, [pc, #60]	; (166b8 <MQTT_HandleImuMessages+0x70>)
   1667a:	4810      	ldr	r0, [pc, #64]	; (166bc <MQTT_HandleImuMessages+0x74>)
   1667c:	9301      	str	r3, [sp, #4]
   1667e:	9100      	str	r1, [sp, #0]
   16680:	0023      	movs	r3, r4
   16682:	213f      	movs	r1, #63	; 0x3f
   16684:	4c0e      	ldr	r4, [pc, #56]	; (166c0 <MQTT_HandleImuMessages+0x78>)
   16686:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16688:	4b0c      	ldr	r3, [pc, #48]	; (166bc <MQTT_HandleImuMessages+0x74>)
   1668a:	0018      	movs	r0, r3
   1668c:	4b0d      	ldr	r3, [pc, #52]	; (166c4 <MQTT_HandleImuMessages+0x7c>)
   1668e:	4798      	blx	r3
   16690:	0004      	movs	r4, r0
   16692:	4a0a      	ldr	r2, [pc, #40]	; (166bc <MQTT_HandleImuMessages+0x74>)
   16694:	490c      	ldr	r1, [pc, #48]	; (166c8 <MQTT_HandleImuMessages+0x80>)
   16696:	480d      	ldr	r0, [pc, #52]	; (166cc <MQTT_HandleImuMessages+0x84>)
   16698:	2300      	movs	r3, #0
   1669a:	9301      	str	r3, [sp, #4]
   1669c:	2301      	movs	r3, #1
   1669e:	9300      	str	r3, [sp, #0]
   166a0:	0023      	movs	r3, r4
   166a2:	4c0b      	ldr	r4, [pc, #44]	; (166d0 <MQTT_HandleImuMessages+0x88>)
   166a4:	47a0      	blx	r4
    }
}
   166a6:	46c0      	nop			; (mov r8, r8)
   166a8:	46bd      	mov	sp, r7
   166aa:	b003      	add	sp, #12
   166ac:	bd90      	pop	{r4, r7, pc}
   166ae:	46c0      	nop			; (mov r8, r8)
   166b0:	20000494 	.word	0x20000494
   166b4:	0001a865 	.word	0x0001a865
   166b8:	000364b8 	.word	0x000364b8
   166bc:	20000028 	.word	0x20000028
   166c0:	00034571 	.word	0x00034571
   166c4:	000346cf 	.word	0x000346cf
   166c8:	00036374 	.word	0x00036374
   166cc:	20000714 	.word	0x20000714
   166d0:	0002f255 	.word	0x0002f255

000166d4 <MQTT_HandleMicMessages>:

static void MQTT_HandleMicMessages(void)
{
   166d4:	b590      	push	{r4, r7, lr}
   166d6:	b085      	sub	sp, #20
   166d8:	af02      	add	r7, sp, #8
	uint16_t mic_data;
	if (pdPASS == xQueueReceive(xQueueMicBuffer, &mic_data, 0)) {
   166da:	4b12      	ldr	r3, [pc, #72]	; (16724 <MQTT_HandleMicMessages+0x50>)
   166dc:	681b      	ldr	r3, [r3, #0]
   166de:	1db9      	adds	r1, r7, #6
   166e0:	2200      	movs	r2, #0
   166e2:	0018      	movs	r0, r3
   166e4:	4b10      	ldr	r3, [pc, #64]	; (16728 <MQTT_HandleMicMessages+0x54>)
   166e6:	4798      	blx	r3
   166e8:	0003      	movs	r3, r0
   166ea:	2b01      	cmp	r3, #1
   166ec:	d115      	bne.n	1671a <MQTT_HandleMicMessages+0x46>
		snprintf(mqtt_msg, 63, "%d", mic_data);
   166ee:	1dbb      	adds	r3, r7, #6
   166f0:	881b      	ldrh	r3, [r3, #0]
   166f2:	4a0e      	ldr	r2, [pc, #56]	; (1672c <MQTT_HandleMicMessages+0x58>)
   166f4:	480e      	ldr	r0, [pc, #56]	; (16730 <MQTT_HandleMicMessages+0x5c>)
   166f6:	213f      	movs	r1, #63	; 0x3f
   166f8:	4c0e      	ldr	r4, [pc, #56]	; (16734 <MQTT_HandleMicMessages+0x60>)
   166fa:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, MEMs_MIC_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   166fc:	4b0c      	ldr	r3, [pc, #48]	; (16730 <MQTT_HandleMicMessages+0x5c>)
   166fe:	0018      	movs	r0, r3
   16700:	4b0d      	ldr	r3, [pc, #52]	; (16738 <MQTT_HandleMicMessages+0x64>)
   16702:	4798      	blx	r3
   16704:	0004      	movs	r4, r0
   16706:	4a0a      	ldr	r2, [pc, #40]	; (16730 <MQTT_HandleMicMessages+0x5c>)
   16708:	490c      	ldr	r1, [pc, #48]	; (1673c <MQTT_HandleMicMessages+0x68>)
   1670a:	480d      	ldr	r0, [pc, #52]	; (16740 <MQTT_HandleMicMessages+0x6c>)
   1670c:	2300      	movs	r3, #0
   1670e:	9301      	str	r3, [sp, #4]
   16710:	2301      	movs	r3, #1
   16712:	9300      	str	r3, [sp, #0]
   16714:	0023      	movs	r3, r4
   16716:	4c0b      	ldr	r4, [pc, #44]	; (16744 <MQTT_HandleMicMessages+0x70>)
   16718:	47a0      	blx	r4
	}
}
   1671a:	46c0      	nop			; (mov r8, r8)
   1671c:	46bd      	mov	sp, r7
   1671e:	b003      	add	sp, #12
   16720:	bd90      	pop	{r4, r7, pc}
   16722:	46c0      	nop			; (mov r8, r8)
   16724:	200004a8 	.word	0x200004a8
   16728:	0001a865 	.word	0x0001a865
   1672c:	000364dc 	.word	0x000364dc
   16730:	20000028 	.word	0x20000028
   16734:	00034571 	.word	0x00034571
   16738:	000346cf 	.word	0x000346cf
   1673c:	000364e0 	.word	0x000364e0
   16740:	20000714 	.word	0x20000714
   16744:	0002f255 	.word	0x0002f255

00016748 <MQTT_HandleTempMessages>:

static void MQTT_HandleTempMessages(void)
{
   16748:	b590      	push	{r4, r7, lr}
   1674a:	b087      	sub	sp, #28
   1674c:	af02      	add	r7, sp, #8
	float temp;
	int temp_tmp = temp*100;
   1674e:	683a      	ldr	r2, [r7, #0]
   16750:	4b1f      	ldr	r3, [pc, #124]	; (167d0 <MQTT_HandleTempMessages+0x88>)
   16752:	4920      	ldr	r1, [pc, #128]	; (167d4 <MQTT_HandleTempMessages+0x8c>)
   16754:	1c10      	adds	r0, r2, #0
   16756:	4798      	blx	r3
   16758:	1c03      	adds	r3, r0, #0
   1675a:	1c1a      	adds	r2, r3, #0
   1675c:	4b1e      	ldr	r3, [pc, #120]	; (167d8 <MQTT_HandleTempMessages+0x90>)
   1675e:	1c10      	adds	r0, r2, #0
   16760:	4798      	blx	r3
   16762:	0003      	movs	r3, r0
   16764:	60fb      	str	r3, [r7, #12]
	int tmp_units = temp_tmp/100;
   16766:	68fa      	ldr	r2, [r7, #12]
   16768:	4b1c      	ldr	r3, [pc, #112]	; (167dc <MQTT_HandleTempMessages+0x94>)
   1676a:	2164      	movs	r1, #100	; 0x64
   1676c:	0010      	movs	r0, r2
   1676e:	4798      	blx	r3
   16770:	0003      	movs	r3, r0
   16772:	60bb      	str	r3, [r7, #8]
	int tmp_frac = temp_tmp - (tmp_units*100);
   16774:	68bb      	ldr	r3, [r7, #8]
   16776:	2264      	movs	r2, #100	; 0x64
   16778:	4252      	negs	r2, r2
   1677a:	435a      	muls	r2, r3
   1677c:	68fb      	ldr	r3, [r7, #12]
   1677e:	18d3      	adds	r3, r2, r3
   16780:	607b      	str	r3, [r7, #4]
	if (pdPASS == xQueueReceive(xQueueTempBuffer, &temp, 0)) {
   16782:	4b17      	ldr	r3, [pc, #92]	; (167e0 <MQTT_HandleTempMessages+0x98>)
   16784:	681b      	ldr	r3, [r3, #0]
   16786:	0039      	movs	r1, r7
   16788:	2200      	movs	r2, #0
   1678a:	0018      	movs	r0, r3
   1678c:	4b15      	ldr	r3, [pc, #84]	; (167e4 <MQTT_HandleTempMessages+0x9c>)
   1678e:	4798      	blx	r3
   16790:	0003      	movs	r3, r0
   16792:	2b01      	cmp	r3, #1
   16794:	d117      	bne.n	167c6 <MQTT_HandleTempMessages+0x7e>
		snprintf(mqtt_msg, 63, "%d.%d", tmp_units, tmp_frac);
   16796:	68b9      	ldr	r1, [r7, #8]
   16798:	4a13      	ldr	r2, [pc, #76]	; (167e8 <MQTT_HandleTempMessages+0xa0>)
   1679a:	4814      	ldr	r0, [pc, #80]	; (167ec <MQTT_HandleTempMessages+0xa4>)
   1679c:	687b      	ldr	r3, [r7, #4]
   1679e:	9300      	str	r3, [sp, #0]
   167a0:	000b      	movs	r3, r1
   167a2:	213f      	movs	r1, #63	; 0x3f
   167a4:	4c12      	ldr	r4, [pc, #72]	; (167f0 <MQTT_HandleTempMessages+0xa8>)
   167a6:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   167a8:	4b10      	ldr	r3, [pc, #64]	; (167ec <MQTT_HandleTempMessages+0xa4>)
   167aa:	0018      	movs	r0, r3
   167ac:	4b11      	ldr	r3, [pc, #68]	; (167f4 <MQTT_HandleTempMessages+0xac>)
   167ae:	4798      	blx	r3
   167b0:	0004      	movs	r4, r0
   167b2:	4a0e      	ldr	r2, [pc, #56]	; (167ec <MQTT_HandleTempMessages+0xa4>)
   167b4:	4910      	ldr	r1, [pc, #64]	; (167f8 <MQTT_HandleTempMessages+0xb0>)
   167b6:	4811      	ldr	r0, [pc, #68]	; (167fc <MQTT_HandleTempMessages+0xb4>)
   167b8:	2300      	movs	r3, #0
   167ba:	9301      	str	r3, [sp, #4]
   167bc:	2301      	movs	r3, #1
   167be:	9300      	str	r3, [sp, #0]
   167c0:	0023      	movs	r3, r4
   167c2:	4c0f      	ldr	r4, [pc, #60]	; (16800 <MQTT_HandleTempMessages+0xb8>)
   167c4:	47a0      	blx	r4
	}
}
   167c6:	46c0      	nop			; (mov r8, r8)
   167c8:	46bd      	mov	sp, r7
   167ca:	b005      	add	sp, #20
   167cc:	bd90      	pop	{r4, r7, pc}
   167ce:	46c0      	nop			; (mov r8, r8)
   167d0:	00032585 	.word	0x00032585
   167d4:	42c80000 	.word	0x42c80000
   167d8:	000327c5 	.word	0x000327c5
   167dc:	00032359 	.word	0x00032359
   167e0:	200004ac 	.word	0x200004ac
   167e4:	0001a865 	.word	0x0001a865
   167e8:	000364fc 	.word	0x000364fc
   167ec:	20000028 	.word	0x20000028
   167f0:	00034571 	.word	0x00034571
   167f4:	000346cf 	.word	0x000346cf
   167f8:	00036504 	.word	0x00036504
   167fc:	20000714 	.word	0x20000714
   16800:	0002f255 	.word	0x0002f255

00016804 <MQTT_HandleMoistureMessages>:

static void MQTT_HandleMoistureMessages(void)
{
   16804:	b590      	push	{r4, r7, lr}
   16806:	b085      	sub	sp, #20
   16808:	af02      	add	r7, sp, #8
	int32_t moist;
	if (pdPASS == xQueueReceive(xQueueMoistureBuffer, &moist, 0)) {
   1680a:	4b11      	ldr	r3, [pc, #68]	; (16850 <MQTT_HandleMoistureMessages+0x4c>)
   1680c:	681b      	ldr	r3, [r3, #0]
   1680e:	1d39      	adds	r1, r7, #4
   16810:	2200      	movs	r2, #0
   16812:	0018      	movs	r0, r3
   16814:	4b0f      	ldr	r3, [pc, #60]	; (16854 <MQTT_HandleMoistureMessages+0x50>)
   16816:	4798      	blx	r3
   16818:	0003      	movs	r3, r0
   1681a:	2b01      	cmp	r3, #1
   1681c:	d114      	bne.n	16848 <MQTT_HandleMoistureMessages+0x44>
		snprintf(mqtt_msg, 63, "%d", moist);
   1681e:	687b      	ldr	r3, [r7, #4]
   16820:	4a0d      	ldr	r2, [pc, #52]	; (16858 <MQTT_HandleMoistureMessages+0x54>)
   16822:	480e      	ldr	r0, [pc, #56]	; (1685c <MQTT_HandleMoistureMessages+0x58>)
   16824:	213f      	movs	r1, #63	; 0x3f
   16826:	4c0e      	ldr	r4, [pc, #56]	; (16860 <MQTT_HandleMoistureMessages+0x5c>)
   16828:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, MOISTURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1682a:	4b0c      	ldr	r3, [pc, #48]	; (1685c <MQTT_HandleMoistureMessages+0x58>)
   1682c:	0018      	movs	r0, r3
   1682e:	4b0d      	ldr	r3, [pc, #52]	; (16864 <MQTT_HandleMoistureMessages+0x60>)
   16830:	4798      	blx	r3
   16832:	0004      	movs	r4, r0
   16834:	4a09      	ldr	r2, [pc, #36]	; (1685c <MQTT_HandleMoistureMessages+0x58>)
   16836:	490c      	ldr	r1, [pc, #48]	; (16868 <MQTT_HandleMoistureMessages+0x64>)
   16838:	480c      	ldr	r0, [pc, #48]	; (1686c <MQTT_HandleMoistureMessages+0x68>)
   1683a:	2300      	movs	r3, #0
   1683c:	9301      	str	r3, [sp, #4]
   1683e:	2301      	movs	r3, #1
   16840:	9300      	str	r3, [sp, #0]
   16842:	0023      	movs	r3, r4
   16844:	4c0a      	ldr	r4, [pc, #40]	; (16870 <MQTT_HandleMoistureMessages+0x6c>)
   16846:	47a0      	blx	r4
	}
}
   16848:	46c0      	nop			; (mov r8, r8)
   1684a:	46bd      	mov	sp, r7
   1684c:	b003      	add	sp, #12
   1684e:	bd90      	pop	{r4, r7, pc}
   16850:	200004b0 	.word	0x200004b0
   16854:	0001a865 	.word	0x0001a865
   16858:	000364dc 	.word	0x000364dc
   1685c:	20000028 	.word	0x20000028
   16860:	00034571 	.word	0x00034571
   16864:	000346cf 	.word	0x000346cf
   16868:	00036524 	.word	0x00036524
   1686c:	20000714 	.word	0x20000714
   16870:	0002f255 	.word	0x0002f255

00016874 <MQTT_HandleGameMessages>:
		mqtt_publish(&mqtt_inst, SPRINKLER_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
	}
}*/

static void MQTT_HandleGameMessages(void)
{
   16874:	b590      	push	{r4, r7, lr}
   16876:	b08b      	sub	sp, #44	; 0x2c
   16878:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   1687a:	4b39      	ldr	r3, [pc, #228]	; (16960 <MQTT_HandleGameMessages+0xec>)
   1687c:	681b      	ldr	r3, [r3, #0]
   1687e:	2208      	movs	r2, #8
   16880:	18b9      	adds	r1, r7, r2
   16882:	2200      	movs	r2, #0
   16884:	0018      	movs	r0, r3
   16886:	4b37      	ldr	r3, [pc, #220]	; (16964 <MQTT_HandleGameMessages+0xf0>)
   16888:	4798      	blx	r3
   1688a:	0003      	movs	r3, r0
   1688c:	2b01      	cmp	r3, #1
   1688e:	d163      	bne.n	16958 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   16890:	4b35      	ldr	r3, [pc, #212]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   16892:	4a36      	ldr	r2, [pc, #216]	; (1696c <MQTT_HandleGameMessages+0xf8>)
   16894:	ca03      	ldmia	r2!, {r0, r1}
   16896:	c303      	stmia	r3!, {r0, r1}
   16898:	8812      	ldrh	r2, [r2, #0]
   1689a:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   1689c:	2300      	movs	r3, #0
   1689e:	61fb      	str	r3, [r7, #28]
   168a0:	e02d      	b.n	168fe <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   168a2:	2308      	movs	r3, #8
   168a4:	18fa      	adds	r2, r7, r3
   168a6:	69fb      	ldr	r3, [r7, #28]
   168a8:	18d3      	adds	r3, r2, r3
   168aa:	781b      	ldrb	r3, [r3, #0]
   168ac:	2bff      	cmp	r3, #255	; 0xff
   168ae:	d02a      	beq.n	16906 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   168b0:	2308      	movs	r3, #8
   168b2:	18fa      	adds	r2, r7, r3
   168b4:	69fb      	ldr	r3, [r7, #28]
   168b6:	18d3      	adds	r3, r2, r3
   168b8:	781b      	ldrb	r3, [r3, #0]
   168ba:	4a2d      	ldr	r2, [pc, #180]	; (16970 <MQTT_HandleGameMessages+0xfc>)
   168bc:	0038      	movs	r0, r7
   168be:	2103      	movs	r1, #3
   168c0:	4c2c      	ldr	r4, [pc, #176]	; (16974 <MQTT_HandleGameMessages+0x100>)
   168c2:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   168c4:	003a      	movs	r2, r7
   168c6:	4b28      	ldr	r3, [pc, #160]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   168c8:	0011      	movs	r1, r2
   168ca:	0018      	movs	r0, r3
   168cc:	4b2a      	ldr	r3, [pc, #168]	; (16978 <MQTT_HandleGameMessages+0x104>)
   168ce:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   168d0:	69fb      	ldr	r3, [r7, #28]
   168d2:	3301      	adds	r3, #1
   168d4:	2208      	movs	r2, #8
   168d6:	18ba      	adds	r2, r7, r2
   168d8:	5cd3      	ldrb	r3, [r2, r3]
   168da:	2bff      	cmp	r3, #255	; 0xff
   168dc:	d00c      	beq.n	168f8 <MQTT_HandleGameMessages+0x84>
   168de:	69fb      	ldr	r3, [r7, #28]
   168e0:	3301      	adds	r3, #1
   168e2:	2b13      	cmp	r3, #19
   168e4:	dc08      	bgt.n	168f8 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   168e6:	003b      	movs	r3, r7
   168e8:	222c      	movs	r2, #44	; 0x2c
   168ea:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   168ec:	003a      	movs	r2, r7
   168ee:	4b1e      	ldr	r3, [pc, #120]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   168f0:	0011      	movs	r1, r2
   168f2:	0018      	movs	r0, r3
   168f4:	4b20      	ldr	r3, [pc, #128]	; (16978 <MQTT_HandleGameMessages+0x104>)
   168f6:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   168f8:	69fb      	ldr	r3, [r7, #28]
   168fa:	3301      	adds	r3, #1
   168fc:	61fb      	str	r3, [r7, #28]
   168fe:	69fb      	ldr	r3, [r7, #28]
   16900:	2b13      	cmp	r3, #19
   16902:	ddce      	ble.n	168a2 <MQTT_HandleGameMessages+0x2e>
   16904:	e000      	b.n	16908 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   16906:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   16908:	4b17      	ldr	r3, [pc, #92]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   1690a:	0018      	movs	r0, r3
   1690c:	4b1b      	ldr	r3, [pc, #108]	; (1697c <MQTT_HandleGameMessages+0x108>)
   1690e:	4798      	blx	r3
   16910:	0003      	movs	r3, r0
   16912:	001a      	movs	r2, r3
   16914:	4b14      	ldr	r3, [pc, #80]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   16916:	18d2      	adds	r2, r2, r3
   16918:	4b19      	ldr	r3, [pc, #100]	; (16980 <MQTT_HandleGameMessages+0x10c>)
   1691a:	0010      	movs	r0, r2
   1691c:	0019      	movs	r1, r3
   1691e:	2303      	movs	r3, #3
   16920:	001a      	movs	r2, r3
   16922:	4b18      	ldr	r3, [pc, #96]	; (16984 <MQTT_HandleGameMessages+0x110>)
   16924:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   16926:	4b10      	ldr	r3, [pc, #64]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   16928:	0019      	movs	r1, r3
   1692a:	2001      	movs	r0, #1
   1692c:	4b16      	ldr	r3, [pc, #88]	; (16988 <MQTT_HandleGameMessages+0x114>)
   1692e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   16930:	4b16      	ldr	r3, [pc, #88]	; (1698c <MQTT_HandleGameMessages+0x118>)
   16932:	0019      	movs	r1, r3
   16934:	2001      	movs	r0, #1
   16936:	4b14      	ldr	r3, [pc, #80]	; (16988 <MQTT_HandleGameMessages+0x114>)
   16938:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1693a:	4b0b      	ldr	r3, [pc, #44]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   1693c:	0018      	movs	r0, r3
   1693e:	4b0f      	ldr	r3, [pc, #60]	; (1697c <MQTT_HandleGameMessages+0x108>)
   16940:	4798      	blx	r3
   16942:	0004      	movs	r4, r0
   16944:	4a08      	ldr	r2, [pc, #32]	; (16968 <MQTT_HandleGameMessages+0xf4>)
   16946:	4912      	ldr	r1, [pc, #72]	; (16990 <MQTT_HandleGameMessages+0x11c>)
   16948:	4812      	ldr	r0, [pc, #72]	; (16994 <MQTT_HandleGameMessages+0x120>)
   1694a:	2300      	movs	r3, #0
   1694c:	9301      	str	r3, [sp, #4]
   1694e:	2301      	movs	r3, #1
   16950:	9300      	str	r3, [sp, #0]
   16952:	0023      	movs	r3, r4
   16954:	4c10      	ldr	r4, [pc, #64]	; (16998 <MQTT_HandleGameMessages+0x124>)
   16956:	47a0      	blx	r4
    }
}
   16958:	46c0      	nop			; (mov r8, r8)
   1695a:	46bd      	mov	sp, r7
   1695c:	b009      	add	sp, #36	; 0x24
   1695e:	bd90      	pop	{r4, r7, pc}
   16960:	20000490 	.word	0x20000490
   16964:	0001a865 	.word	0x0001a865
   16968:	20000028 	.word	0x20000028
   1696c:	0003618c 	.word	0x0003618c
   16970:	000364dc 	.word	0x000364dc
   16974:	00034571 	.word	0x00034571
   16978:	00034655 	.word	0x00034655
   1697c:	000346cf 	.word	0x000346cf
   16980:	00036540 	.word	0x00036540
   16984:	000342e1 	.word	0x000342e1
   16988:	0001d751 	.word	0x0001d751
   1698c:	00036544 	.word	0x00036544
   16990:	00036548 	.word	0x00036548
   16994:	20000714 	.word	0x20000714
   16998:	0002f255 	.word	0x0002f255

0001699c <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   1699c:	b590      	push	{r4, r7, lr}
   1699e:	b08d      	sub	sp, #52	; 0x34
   169a0:	af02      	add	r7, sp, #8
   169a2:	6078      	str	r0, [r7, #4]
    
	tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   169a4:	2064      	movs	r0, #100	; 0x64
   169a6:	4b9e      	ldr	r3, [pc, #632]	; (16c20 <vWifiTask+0x284>)
   169a8:	4798      	blx	r3
    init_state();
   169aa:	4b9e      	ldr	r3, [pc, #632]	; (16c24 <vWifiTask+0x288>)
   169ac:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   169ae:	2200      	movs	r2, #0
   169b0:	2104      	movs	r1, #4
   169b2:	2005      	movs	r0, #5
   169b4:	4b9c      	ldr	r3, [pc, #624]	; (16c28 <vWifiTask+0x28c>)
   169b6:	4798      	blx	r3
   169b8:	0002      	movs	r2, r0
   169ba:	4b9c      	ldr	r3, [pc, #624]	; (16c2c <vWifiTask+0x290>)
   169bc:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   169be:	2200      	movs	r2, #0
   169c0:	2106      	movs	r1, #6
   169c2:	2005      	movs	r0, #5
   169c4:	4b98      	ldr	r3, [pc, #608]	; (16c28 <vWifiTask+0x28c>)
   169c6:	4798      	blx	r3
   169c8:	0002      	movs	r2, r0
   169ca:	4b99      	ldr	r3, [pc, #612]	; (16c30 <vWifiTask+0x294>)
   169cc:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   169ce:	2200      	movs	r2, #0
   169d0:	2114      	movs	r1, #20
   169d2:	2002      	movs	r0, #2
   169d4:	4b94      	ldr	r3, [pc, #592]	; (16c28 <vWifiTask+0x28c>)
   169d6:	4798      	blx	r3
   169d8:	0002      	movs	r2, r0
   169da:	4b96      	ldr	r3, [pc, #600]	; (16c34 <vWifiTask+0x298>)
   169dc:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   169de:	2200      	movs	r2, #0
   169e0:	2102      	movs	r1, #2
   169e2:	2005      	movs	r0, #5
   169e4:	4b90      	ldr	r3, [pc, #576]	; (16c28 <vWifiTask+0x28c>)
   169e6:	4798      	blx	r3
   169e8:	0002      	movs	r2, r0
   169ea:	4b93      	ldr	r3, [pc, #588]	; (16c38 <vWifiTask+0x29c>)
   169ec:	601a      	str	r2, [r3, #0]
	xQueueNitrogenBuffer = xQueueCreate(5, sizeof(uint16_t));
   169ee:	2200      	movs	r2, #0
   169f0:	2102      	movs	r1, #2
   169f2:	2005      	movs	r0, #5
   169f4:	4b8c      	ldr	r3, [pc, #560]	; (16c28 <vWifiTask+0x28c>)
   169f6:	4798      	blx	r3
   169f8:	0002      	movs	r2, r0
   169fa:	4b90      	ldr	r3, [pc, #576]	; (16c3c <vWifiTask+0x2a0>)
   169fc:	601a      	str	r2, [r3, #0]
	xQueuePhosphorusBuffer = xQueueCreate(5, sizeof(uint16_t));
   169fe:	2200      	movs	r2, #0
   16a00:	2102      	movs	r1, #2
   16a02:	2005      	movs	r0, #5
   16a04:	4b88      	ldr	r3, [pc, #544]	; (16c28 <vWifiTask+0x28c>)
   16a06:	4798      	blx	r3
   16a08:	0002      	movs	r2, r0
   16a0a:	4b8d      	ldr	r3, [pc, #564]	; (16c40 <vWifiTask+0x2a4>)
   16a0c:	601a      	str	r2, [r3, #0]
	xQueuePotassiumBuffer = xQueueCreate(5, sizeof(uint16_t));
   16a0e:	2200      	movs	r2, #0
   16a10:	2102      	movs	r1, #2
   16a12:	2005      	movs	r0, #5
   16a14:	4b84      	ldr	r3, [pc, #528]	; (16c28 <vWifiTask+0x28c>)
   16a16:	4798      	blx	r3
   16a18:	0002      	movs	r2, r0
   16a1a:	4b8a      	ldr	r3, [pc, #552]	; (16c44 <vWifiTask+0x2a8>)
   16a1c:	601a      	str	r2, [r3, #0]
	xQueueMicBuffer = xQueueCreate(5, sizeof(uint16_t));
   16a1e:	2200      	movs	r2, #0
   16a20:	2102      	movs	r1, #2
   16a22:	2005      	movs	r0, #5
   16a24:	4b80      	ldr	r3, [pc, #512]	; (16c28 <vWifiTask+0x28c>)
   16a26:	4798      	blx	r3
   16a28:	0002      	movs	r2, r0
   16a2a:	4b87      	ldr	r3, [pc, #540]	; (16c48 <vWifiTask+0x2ac>)
   16a2c:	601a      	str	r2, [r3, #0]
	xQueueTempBuffer = xQueueCreate(5, sizeof(float));
   16a2e:	2200      	movs	r2, #0
   16a30:	2104      	movs	r1, #4
   16a32:	2005      	movs	r0, #5
   16a34:	4b7c      	ldr	r3, [pc, #496]	; (16c28 <vWifiTask+0x28c>)
   16a36:	4798      	blx	r3
   16a38:	0002      	movs	r2, r0
   16a3a:	4b84      	ldr	r3, [pc, #528]	; (16c4c <vWifiTask+0x2b0>)
   16a3c:	601a      	str	r2, [r3, #0]
	xQueueMoistureBuffer = xQueueCreate(5, sizeof(int32_t));
   16a3e:	2200      	movs	r2, #0
   16a40:	2104      	movs	r1, #4
   16a42:	2005      	movs	r0, #5
   16a44:	4b78      	ldr	r3, [pc, #480]	; (16c28 <vWifiTask+0x28c>)
   16a46:	4798      	blx	r3
   16a48:	0002      	movs	r2, r0
   16a4a:	4b81      	ldr	r3, [pc, #516]	; (16c50 <vWifiTask+0x2b4>)
   16a4c:	601a      	str	r2, [r3, #0]
	//xQueueSprinklerBuffer = xQueueCreate(5, sizeof(bool));

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueMicBuffer == NULL || xQueueTempBuffer == NULL || xQueueMoistureBuffer == NULL || xQueueNitrogenBuffer == NULL || xQueuePhosphorusBuffer == NULL || xQueuePotassiumBuffer == NULL) {
   16a4e:	4b77      	ldr	r3, [pc, #476]	; (16c2c <vWifiTask+0x290>)
   16a50:	681b      	ldr	r3, [r3, #0]
   16a52:	2b00      	cmp	r3, #0
   16a54:	d023      	beq.n	16a9e <vWifiTask+0x102>
   16a56:	4b76      	ldr	r3, [pc, #472]	; (16c30 <vWifiTask+0x294>)
   16a58:	681b      	ldr	r3, [r3, #0]
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d01f      	beq.n	16a9e <vWifiTask+0x102>
   16a5e:	4b75      	ldr	r3, [pc, #468]	; (16c34 <vWifiTask+0x298>)
   16a60:	681b      	ldr	r3, [r3, #0]
   16a62:	2b00      	cmp	r3, #0
   16a64:	d01b      	beq.n	16a9e <vWifiTask+0x102>
   16a66:	4b74      	ldr	r3, [pc, #464]	; (16c38 <vWifiTask+0x29c>)
   16a68:	681b      	ldr	r3, [r3, #0]
   16a6a:	2b00      	cmp	r3, #0
   16a6c:	d017      	beq.n	16a9e <vWifiTask+0x102>
   16a6e:	4b76      	ldr	r3, [pc, #472]	; (16c48 <vWifiTask+0x2ac>)
   16a70:	681b      	ldr	r3, [r3, #0]
   16a72:	2b00      	cmp	r3, #0
   16a74:	d013      	beq.n	16a9e <vWifiTask+0x102>
   16a76:	4b75      	ldr	r3, [pc, #468]	; (16c4c <vWifiTask+0x2b0>)
   16a78:	681b      	ldr	r3, [r3, #0]
   16a7a:	2b00      	cmp	r3, #0
   16a7c:	d00f      	beq.n	16a9e <vWifiTask+0x102>
   16a7e:	4b74      	ldr	r3, [pc, #464]	; (16c50 <vWifiTask+0x2b4>)
   16a80:	681b      	ldr	r3, [r3, #0]
   16a82:	2b00      	cmp	r3, #0
   16a84:	d00b      	beq.n	16a9e <vWifiTask+0x102>
   16a86:	4b6d      	ldr	r3, [pc, #436]	; (16c3c <vWifiTask+0x2a0>)
   16a88:	681b      	ldr	r3, [r3, #0]
   16a8a:	2b00      	cmp	r3, #0
   16a8c:	d007      	beq.n	16a9e <vWifiTask+0x102>
   16a8e:	4b6c      	ldr	r3, [pc, #432]	; (16c40 <vWifiTask+0x2a4>)
   16a90:	681b      	ldr	r3, [r3, #0]
   16a92:	2b00      	cmp	r3, #0
   16a94:	d003      	beq.n	16a9e <vWifiTask+0x102>
   16a96:	4b6b      	ldr	r3, [pc, #428]	; (16c44 <vWifiTask+0x2a8>)
   16a98:	681b      	ldr	r3, [r3, #0]
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	d103      	bne.n	16aa6 <vWifiTask+0x10a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   16a9e:	4b6d      	ldr	r3, [pc, #436]	; (16c54 <vWifiTask+0x2b8>)
   16aa0:	0018      	movs	r0, r3
   16aa2:	4b6d      	ldr	r3, [pc, #436]	; (16c58 <vWifiTask+0x2bc>)
   16aa4:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   16aa6:	4b6d      	ldr	r3, [pc, #436]	; (16c5c <vWifiTask+0x2c0>)
   16aa8:	0018      	movs	r0, r3
   16aaa:	4b6b      	ldr	r3, [pc, #428]	; (16c58 <vWifiTask+0x2bc>)
   16aac:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   16aae:	4b6c      	ldr	r3, [pc, #432]	; (16c60 <vWifiTask+0x2c4>)
   16ab0:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   16ab2:	4b6c      	ldr	r3, [pc, #432]	; (16c64 <vWifiTask+0x2c8>)
   16ab4:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   16ab6:	4b6c      	ldr	r3, [pc, #432]	; (16c68 <vWifiTask+0x2cc>)
   16ab8:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   16aba:	4b6c      	ldr	r3, [pc, #432]	; (16c6c <vWifiTask+0x2d0>)
   16abc:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   16abe:	4b6c      	ldr	r3, [pc, #432]	; (16c70 <vWifiTask+0x2d4>)
   16ac0:	4798      	blx	r3
    configure_extint_callbacks();
   16ac2:	4b6c      	ldr	r3, [pc, #432]	; (16c74 <vWifiTask+0x2d8>)
   16ac4:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16ac6:	230c      	movs	r3, #12
   16ac8:	18fb      	adds	r3, r7, r3
   16aca:	2218      	movs	r2, #24
   16acc:	2100      	movs	r1, #0
   16ace:	0018      	movs	r0, r3
   16ad0:	4b69      	ldr	r3, [pc, #420]	; (16c78 <vWifiTask+0x2dc>)
   16ad2:	4798      	blx	r3

    nm_bsp_init();
   16ad4:	4b69      	ldr	r3, [pc, #420]	; (16c7c <vWifiTask+0x2e0>)
   16ad6:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   16ad8:	230c      	movs	r3, #12
   16ada:	18fb      	adds	r3, r7, r3
   16adc:	4a68      	ldr	r2, [pc, #416]	; (16c80 <vWifiTask+0x2e4>)
   16ade:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16ae0:	2327      	movs	r3, #39	; 0x27
   16ae2:	18fc      	adds	r4, r7, r3
   16ae4:	230c      	movs	r3, #12
   16ae6:	18fb      	adds	r3, r7, r3
   16ae8:	0018      	movs	r0, r3
   16aea:	4b66      	ldr	r3, [pc, #408]	; (16c84 <vWifiTask+0x2e8>)
   16aec:	4798      	blx	r3
   16aee:	0003      	movs	r3, r0
   16af0:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   16af2:	2327      	movs	r3, #39	; 0x27
   16af4:	18fb      	adds	r3, r7, r3
   16af6:	781b      	ldrb	r3, [r3, #0]
   16af8:	b25b      	sxtb	r3, r3
   16afa:	2b00      	cmp	r3, #0
   16afc:	d009      	beq.n	16b12 <vWifiTask+0x176>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16afe:	2327      	movs	r3, #39	; 0x27
   16b00:	18fb      	adds	r3, r7, r3
   16b02:	2200      	movs	r2, #0
   16b04:	569a      	ldrsb	r2, [r3, r2]
   16b06:	4b60      	ldr	r3, [pc, #384]	; (16c88 <vWifiTask+0x2ec>)
   16b08:	0019      	movs	r1, r3
   16b0a:	2001      	movs	r0, #1
   16b0c:	4b5f      	ldr	r3, [pc, #380]	; (16c8c <vWifiTask+0x2f0>)
   16b0e:	4798      	blx	r3
        while (1) {
   16b10:	e7fe      	b.n	16b10 <vWifiTask+0x174>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16b12:	4a5f      	ldr	r2, [pc, #380]	; (16c90 <vWifiTask+0x2f4>)
   16b14:	4b5f      	ldr	r3, [pc, #380]	; (16c94 <vWifiTask+0x2f8>)
   16b16:	0019      	movs	r1, r3
   16b18:	2001      	movs	r0, #1
   16b1a:	4b5c      	ldr	r3, [pc, #368]	; (16c8c <vWifiTask+0x2f0>)
   16b1c:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   16b1e:	4b5e      	ldr	r3, [pc, #376]	; (16c98 <vWifiTask+0x2fc>)
   16b20:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16b22:	4a5e      	ldr	r2, [pc, #376]	; (16c9c <vWifiTask+0x300>)
   16b24:	4b5e      	ldr	r3, [pc, #376]	; (16ca0 <vWifiTask+0x304>)
   16b26:	0011      	movs	r1, r2
   16b28:	0018      	movs	r0, r3
   16b2a:	4b5e      	ldr	r3, [pc, #376]	; (16ca4 <vWifiTask+0x308>)
   16b2c:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16b2e:	4a5e      	ldr	r2, [pc, #376]	; (16ca8 <vWifiTask+0x30c>)
   16b30:	4857      	ldr	r0, [pc, #348]	; (16c90 <vWifiTask+0x2f4>)
   16b32:	23ff      	movs	r3, #255	; 0xff
   16b34:	9300      	str	r3, [sp, #0]
   16b36:	0013      	movs	r3, r2
   16b38:	2202      	movs	r2, #2
   16b3a:	210b      	movs	r1, #11
   16b3c:	4c5b      	ldr	r4, [pc, #364]	; (16cac <vWifiTask+0x310>)
   16b3e:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16b40:	e006      	b.n	16b50 <vWifiTask+0x1b4>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16b42:	2000      	movs	r0, #0
   16b44:	4b5a      	ldr	r3, [pc, #360]	; (16cb0 <vWifiTask+0x314>)
   16b46:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16b48:	4b5a      	ldr	r3, [pc, #360]	; (16cb4 <vWifiTask+0x318>)
   16b4a:	0018      	movs	r0, r3
   16b4c:	4b5a      	ldr	r3, [pc, #360]	; (16cb8 <vWifiTask+0x31c>)
   16b4e:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16b50:	2002      	movs	r0, #2
   16b52:	4b5a      	ldr	r3, [pc, #360]	; (16cbc <vWifiTask+0x320>)
   16b54:	4798      	blx	r3
   16b56:	0003      	movs	r3, r0
   16b58:	001a      	movs	r2, r3
   16b5a:	2301      	movs	r3, #1
   16b5c:	4053      	eors	r3, r2
   16b5e:	b2db      	uxtb	r3, r3
   16b60:	2b00      	cmp	r3, #0
   16b62:	d1ee      	bne.n	16b42 <vWifiTask+0x1a6>
    }

    vTaskDelay(1000);
   16b64:	23fa      	movs	r3, #250	; 0xfa
   16b66:	009b      	lsls	r3, r3, #2
   16b68:	0018      	movs	r0, r3
   16b6a:	4b2d      	ldr	r3, [pc, #180]	; (16c20 <vWifiTask+0x284>)
   16b6c:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   16b6e:	4b54      	ldr	r3, [pc, #336]	; (16cc0 <vWifiTask+0x324>)
   16b70:	2201      	movs	r2, #1
   16b72:	701a      	strb	r2, [r3, #0]
    while (1) {
		
        switch (wifiStateMachine) {
   16b74:	4b52      	ldr	r3, [pc, #328]	; (16cc0 <vWifiTask+0x324>)
   16b76:	781b      	ldrb	r3, [r3, #0]
   16b78:	b25b      	sxtb	r3, r3
   16b7a:	2b01      	cmp	r3, #1
   16b7c:	d00b      	beq.n	16b96 <vWifiTask+0x1fa>
   16b7e:	dc02      	bgt.n	16b86 <vWifiTask+0x1ea>
   16b80:	2b00      	cmp	r3, #0
   16b82:	d005      	beq.n	16b90 <vWifiTask+0x1f4>
   16b84:	e010      	b.n	16ba8 <vWifiTask+0x20c>
   16b86:	2b02      	cmp	r3, #2
   16b88:	d008      	beq.n	16b9c <vWifiTask+0x200>
   16b8a:	2b03      	cmp	r3, #3
   16b8c:	d009      	beq.n	16ba2 <vWifiTask+0x206>
   16b8e:	e00b      	b.n	16ba8 <vWifiTask+0x20c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   16b90:	4b4c      	ldr	r3, [pc, #304]	; (16cc4 <vWifiTask+0x328>)
   16b92:	4798      	blx	r3

                break;
   16b94:	e00c      	b.n	16bb0 <vWifiTask+0x214>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   16b96:	4b4c      	ldr	r3, [pc, #304]	; (16cc8 <vWifiTask+0x32c>)
   16b98:	4798      	blx	r3
                break;
   16b9a:	e009      	b.n	16bb0 <vWifiTask+0x214>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   16b9c:	4b4b      	ldr	r3, [pc, #300]	; (16ccc <vWifiTask+0x330>)
   16b9e:	4798      	blx	r3
                break;
   16ba0:	e006      	b.n	16bb0 <vWifiTask+0x214>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   16ba2:	4b4b      	ldr	r3, [pc, #300]	; (16cd0 <vWifiTask+0x334>)
   16ba4:	4798      	blx	r3
                break;
   16ba6:	e003      	b.n	16bb0 <vWifiTask+0x214>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   16ba8:	4b45      	ldr	r3, [pc, #276]	; (16cc0 <vWifiTask+0x324>)
   16baa:	2200      	movs	r2, #0
   16bac:	701a      	strb	r2, [r3, #0]
                break;
   16bae:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   16bb0:	230b      	movs	r3, #11
   16bb2:	18fb      	adds	r3, r7, r3
   16bb4:	2200      	movs	r2, #0
   16bb6:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   16bb8:	4b1c      	ldr	r3, [pc, #112]	; (16c2c <vWifiTask+0x290>)
   16bba:	681b      	ldr	r3, [r3, #0]
   16bbc:	220b      	movs	r2, #11
   16bbe:	18b9      	adds	r1, r7, r2
   16bc0:	2200      	movs	r2, #0
   16bc2:	0018      	movs	r0, r3
   16bc4:	4b43      	ldr	r3, [pc, #268]	; (16cd4 <vWifiTask+0x338>)
   16bc6:	4798      	blx	r3
   16bc8:	0003      	movs	r3, r0
   16bca:	2b01      	cmp	r3, #1
   16bcc:	d105      	bne.n	16bda <vWifiTask+0x23e>
            wifiStateMachine = DataToReceive;  // Update new state
   16bce:	230b      	movs	r3, #11
   16bd0:	18fb      	adds	r3, r7, r3
   16bd2:	781b      	ldrb	r3, [r3, #0]
   16bd4:	b25a      	sxtb	r2, r3
   16bd6:	4b3a      	ldr	r3, [pc, #232]	; (16cc0 <vWifiTask+0x324>)
   16bd8:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   16bda:	4b3f      	ldr	r3, [pc, #252]	; (16cd8 <vWifiTask+0x33c>)
   16bdc:	781b      	ldrb	r3, [r3, #0]
   16bde:	b2db      	uxtb	r3, r3
   16be0:	2b00      	cmp	r3, #0
   16be2:	d017      	beq.n	16c14 <vWifiTask+0x278>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   16be4:	4b3d      	ldr	r3, [pc, #244]	; (16cdc <vWifiTask+0x340>)
   16be6:	0018      	movs	r0, r3
   16be8:	4b3d      	ldr	r3, [pc, #244]	; (16ce0 <vWifiTask+0x344>)
   16bea:	4798      	blx	r3
   16bec:	0004      	movs	r4, r0
   16bee:	4a3b      	ldr	r2, [pc, #236]	; (16cdc <vWifiTask+0x340>)
   16bf0:	493c      	ldr	r1, [pc, #240]	; (16ce4 <vWifiTask+0x348>)
   16bf2:	483d      	ldr	r0, [pc, #244]	; (16ce8 <vWifiTask+0x34c>)
   16bf4:	2300      	movs	r3, #0
   16bf6:	9301      	str	r3, [sp, #4]
   16bf8:	2301      	movs	r3, #1
   16bfa:	9300      	str	r3, [sp, #0]
   16bfc:	0023      	movs	r3, r4
   16bfe:	4c3b      	ldr	r4, [pc, #236]	; (16cec <vWifiTask+0x350>)
   16c00:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   16c02:	4a36      	ldr	r2, [pc, #216]	; (16cdc <vWifiTask+0x340>)
   16c04:	4b3a      	ldr	r3, [pc, #232]	; (16cf0 <vWifiTask+0x354>)
   16c06:	0019      	movs	r1, r3
   16c08:	2001      	movs	r0, #1
   16c0a:	4b20      	ldr	r3, [pc, #128]	; (16c8c <vWifiTask+0x2f0>)
   16c0c:	4798      	blx	r3
            isPressed = false;
   16c0e:	4b32      	ldr	r3, [pc, #200]	; (16cd8 <vWifiTask+0x33c>)
   16c10:	2200      	movs	r2, #0
   16c12:	701a      	strb	r2, [r3, #0]

        }
		mic_read();
   16c14:	4b37      	ldr	r3, [pc, #220]	; (16cf4 <vWifiTask+0x358>)
   16c16:	4798      	blx	r3

        vTaskDelay(100);
   16c18:	2064      	movs	r0, #100	; 0x64
   16c1a:	4b01      	ldr	r3, [pc, #4]	; (16c20 <vWifiTask+0x284>)
   16c1c:	4798      	blx	r3
    while (1) {
   16c1e:	e7a9      	b.n	16b74 <vWifiTask+0x1d8>
   16c20:	0001ba11 	.word	0x0001ba11
   16c24:	00015289 	.word	0x00015289
   16c28:	00019d05 	.word	0x00019d05
   16c2c:	2000048c 	.word	0x2000048c
   16c30:	20000494 	.word	0x20000494
   16c34:	20000490 	.word	0x20000490
   16c38:	20000498 	.word	0x20000498
   16c3c:	2000049c 	.word	0x2000049c
   16c40:	200004a0 	.word	0x200004a0
   16c44:	200004a4 	.word	0x200004a4
   16c48:	200004a8 	.word	0x200004a8
   16c4c:	200004ac 	.word	0x200004ac
   16c50:	200004b0 	.word	0x200004b0
   16c54:	0003655c 	.word	0x0003655c
   16c58:	0001d665 	.word	0x0001d665
   16c5c:	00036584 	.word	0x00036584
   16c60:	00015cc5 	.word	0x00015cc5
   16c64:	00015d01 	.word	0x00015d01
   16c68:	0001624d 	.word	0x0001624d
   16c6c:	00015be1 	.word	0x00015be1
   16c70:	00016305 	.word	0x00016305
   16c74:	00016345 	.word	0x00016345
   16c78:	00034317 	.word	0x00034317
   16c7c:	0001fb75 	.word	0x0001fb75
   16c80:	00015a8d 	.word	0x00015a8d
   16c84:	0002164d 	.word	0x0002164d
   16c88:	000365a0 	.word	0x000365a0
   16c8c:	0001d751 	.word	0x0001d751
   16c90:	00035fbc 	.word	0x00035fbc
   16c94:	000365cc 	.word	0x000365cc
   16c98:	00024dad 	.word	0x00024dad
   16c9c:	00015da9 	.word	0x00015da9
   16ca0:	00015d75 	.word	0x00015d75
   16ca4:	00024e45 	.word	0x00024e45
   16ca8:	00035fb0 	.word	0x00035fb0
   16cac:	0002185d 	.word	0x0002185d
   16cb0:	00021841 	.word	0x00021841
   16cb4:	200046b4 	.word	0x200046b4
   16cb8:	00031f35 	.word	0x00031f35
   16cbc:	000152f9 	.word	0x000152f9
   16cc0:	20000489 	.word	0x20000489
   16cc4:	00016545 	.word	0x00016545
   16cc8:	000165e1 	.word	0x000165e1
   16ccc:	000163bd 	.word	0x000163bd
   16cd0:	00016451 	.word	0x00016451
   16cd4:	0001a865 	.word	0x0001a865
   16cd8:	20000b4c 	.word	0x20000b4c
   16cdc:	20000068 	.word	0x20000068
   16ce0:	000346cf 	.word	0x000346cf
   16ce4:	000365f0 	.word	0x000365f0
   16ce8:	20000714 	.word	0x20000714
   16cec:	0002f255 	.word	0x0002f255
   16cf0:	0003660c 	.word	0x0003660c
   16cf4:	00014825 	.word	0x00014825

00016cf8 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   16cf8:	b590      	push	{r4, r7, lr}
   16cfa:	b083      	sub	sp, #12
   16cfc:	af00      	add	r7, sp, #0
   16cfe:	0002      	movs	r2, r0
   16d00:	1dfb      	adds	r3, r7, #7
   16d02:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   16d04:	1dfb      	adds	r3, r7, #7
   16d06:	781b      	ldrb	r3, [r3, #0]
   16d08:	2b03      	cmp	r3, #3
   16d0a:	d806      	bhi.n	16d1a <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   16d0c:	4b05      	ldr	r3, [pc, #20]	; (16d24 <WifiHandlerSetState+0x2c>)
   16d0e:	6818      	ldr	r0, [r3, #0]
   16d10:	1df9      	adds	r1, r7, #7
   16d12:	2300      	movs	r3, #0
   16d14:	220a      	movs	r2, #10
   16d16:	4c04      	ldr	r4, [pc, #16]	; (16d28 <WifiHandlerSetState+0x30>)
   16d18:	47a0      	blx	r4
    }
}
   16d1a:	46c0      	nop			; (mov r8, r8)
   16d1c:	46bd      	mov	sp, r7
   16d1e:	b003      	add	sp, #12
   16d20:	bd90      	pop	{r4, r7, pc}
   16d22:	46c0      	nop			; (mov r8, r8)
   16d24:	2000048c 	.word	0x2000048c
   16d28:	00019fad 	.word	0x00019fad

00016d2c <WifiAddNitrogenDataToQueue>:
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
    return error;
}

int WifiAddNitrogenDataToQueue(uint16_t *N)
{
   16d2c:	b590      	push	{r4, r7, lr}
   16d2e:	b085      	sub	sp, #20
   16d30:	af00      	add	r7, sp, #0
   16d32:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueNitrogenBuffer, N, (TickType_t)10);
   16d34:	4b06      	ldr	r3, [pc, #24]	; (16d50 <WifiAddNitrogenDataToQueue+0x24>)
   16d36:	6818      	ldr	r0, [r3, #0]
   16d38:	6879      	ldr	r1, [r7, #4]
   16d3a:	2300      	movs	r3, #0
   16d3c:	220a      	movs	r2, #10
   16d3e:	4c05      	ldr	r4, [pc, #20]	; (16d54 <WifiAddNitrogenDataToQueue+0x28>)
   16d40:	47a0      	blx	r4
   16d42:	0003      	movs	r3, r0
   16d44:	60fb      	str	r3, [r7, #12]
	return error;
   16d46:	68fb      	ldr	r3, [r7, #12]
}
   16d48:	0018      	movs	r0, r3
   16d4a:	46bd      	mov	sp, r7
   16d4c:	b005      	add	sp, #20
   16d4e:	bd90      	pop	{r4, r7, pc}
   16d50:	2000049c 	.word	0x2000049c
   16d54:	00019fad 	.word	0x00019fad

00016d58 <WifiAddMicDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddMicDataToQueue(uint16_t *mic_data)
{
   16d58:	b590      	push	{r4, r7, lr}
   16d5a:	b085      	sub	sp, #20
   16d5c:	af00      	add	r7, sp, #0
   16d5e:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueMicBuffer, mic_data, (TickType_t)10);
   16d60:	4b06      	ldr	r3, [pc, #24]	; (16d7c <WifiAddMicDataToQueue+0x24>)
   16d62:	6818      	ldr	r0, [r3, #0]
   16d64:	6879      	ldr	r1, [r7, #4]
   16d66:	2300      	movs	r3, #0
   16d68:	220a      	movs	r2, #10
   16d6a:	4c05      	ldr	r4, [pc, #20]	; (16d80 <WifiAddMicDataToQueue+0x28>)
   16d6c:	47a0      	blx	r4
   16d6e:	0003      	movs	r3, r0
   16d70:	60fb      	str	r3, [r7, #12]
	return error;
   16d72:	68fb      	ldr	r3, [r7, #12]
}
   16d74:	0018      	movs	r0, r3
   16d76:	46bd      	mov	sp, r7
   16d78:	b005      	add	sp, #20
   16d7a:	bd90      	pop	{r4, r7, pc}
   16d7c:	200004a8 	.word	0x200004a8
   16d80:	00019fad 	.word	0x00019fad

00016d84 <WifiAddTempDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddTempDataToQueue(float *temp)
{
   16d84:	b590      	push	{r4, r7, lr}
   16d86:	b085      	sub	sp, #20
   16d88:	af00      	add	r7, sp, #0
   16d8a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTempBuffer, temp, (TickType_t)10);
   16d8c:	4b06      	ldr	r3, [pc, #24]	; (16da8 <WifiAddTempDataToQueue+0x24>)
   16d8e:	6818      	ldr	r0, [r3, #0]
   16d90:	6879      	ldr	r1, [r7, #4]
   16d92:	2300      	movs	r3, #0
   16d94:	220a      	movs	r2, #10
   16d96:	4c05      	ldr	r4, [pc, #20]	; (16dac <WifiAddTempDataToQueue+0x28>)
   16d98:	47a0      	blx	r4
   16d9a:	0003      	movs	r3, r0
   16d9c:	60fb      	str	r3, [r7, #12]
	return error;
   16d9e:	68fb      	ldr	r3, [r7, #12]
}
   16da0:	0018      	movs	r0, r3
   16da2:	46bd      	mov	sp, r7
   16da4:	b005      	add	sp, #20
   16da6:	bd90      	pop	{r4, r7, pc}
   16da8:	200004ac 	.word	0x200004ac
   16dac:	00019fad 	.word	0x00019fad

00016db0 <WifiAddMoistureDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddMoistureDataToQueue(int32_t *moist)
{
   16db0:	b590      	push	{r4, r7, lr}
   16db2:	b085      	sub	sp, #20
   16db4:	af00      	add	r7, sp, #0
   16db6:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueMoistureBuffer, moist, (TickType_t)10);
   16db8:	4b06      	ldr	r3, [pc, #24]	; (16dd4 <WifiAddMoistureDataToQueue+0x24>)
   16dba:	6818      	ldr	r0, [r3, #0]
   16dbc:	6879      	ldr	r1, [r7, #4]
   16dbe:	2300      	movs	r3, #0
   16dc0:	220a      	movs	r2, #10
   16dc2:	4c05      	ldr	r4, [pc, #20]	; (16dd8 <WifiAddMoistureDataToQueue+0x28>)
   16dc4:	47a0      	blx	r4
   16dc6:	0003      	movs	r3, r0
   16dc8:	60fb      	str	r3, [r7, #12]
	return error;
   16dca:	68fb      	ldr	r3, [r7, #12]
}
   16dcc:	0018      	movs	r0, r3
   16dce:	46bd      	mov	sp, r7
   16dd0:	b005      	add	sp, #20
   16dd2:	bd90      	pop	{r4, r7, pc}
   16dd4:	200004b0 	.word	0x200004b0
   16dd8:	00019fad 	.word	0x00019fad

00016ddc <system_gclk_chan_get_config_defaults>:
{
   16ddc:	b580      	push	{r7, lr}
   16dde:	b082      	sub	sp, #8
   16de0:	af00      	add	r7, sp, #0
   16de2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   16de4:	687b      	ldr	r3, [r7, #4]
   16de6:	2200      	movs	r2, #0
   16de8:	701a      	strb	r2, [r3, #0]
}
   16dea:	46c0      	nop			; (mov r8, r8)
   16dec:	46bd      	mov	sp, r7
   16dee:	b002      	add	sp, #8
   16df0:	bd80      	pop	{r7, pc}
	...

00016df4 <system_apb_clock_set_mask>:
{
   16df4:	b580      	push	{r7, lr}
   16df6:	b082      	sub	sp, #8
   16df8:	af00      	add	r7, sp, #0
   16dfa:	0002      	movs	r2, r0
   16dfc:	6039      	str	r1, [r7, #0]
   16dfe:	1dfb      	adds	r3, r7, #7
   16e00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   16e02:	1dfb      	adds	r3, r7, #7
   16e04:	781b      	ldrb	r3, [r3, #0]
   16e06:	2b01      	cmp	r3, #1
   16e08:	d00a      	beq.n	16e20 <system_apb_clock_set_mask+0x2c>
   16e0a:	2b02      	cmp	r3, #2
   16e0c:	d00f      	beq.n	16e2e <system_apb_clock_set_mask+0x3a>
   16e0e:	2b00      	cmp	r3, #0
   16e10:	d114      	bne.n	16e3c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   16e12:	4b0e      	ldr	r3, [pc, #56]	; (16e4c <system_apb_clock_set_mask+0x58>)
   16e14:	4a0d      	ldr	r2, [pc, #52]	; (16e4c <system_apb_clock_set_mask+0x58>)
   16e16:	6991      	ldr	r1, [r2, #24]
   16e18:	683a      	ldr	r2, [r7, #0]
   16e1a:	430a      	orrs	r2, r1
   16e1c:	619a      	str	r2, [r3, #24]
			break;
   16e1e:	e00f      	b.n	16e40 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   16e20:	4b0a      	ldr	r3, [pc, #40]	; (16e4c <system_apb_clock_set_mask+0x58>)
   16e22:	4a0a      	ldr	r2, [pc, #40]	; (16e4c <system_apb_clock_set_mask+0x58>)
   16e24:	69d1      	ldr	r1, [r2, #28]
   16e26:	683a      	ldr	r2, [r7, #0]
   16e28:	430a      	orrs	r2, r1
   16e2a:	61da      	str	r2, [r3, #28]
			break;
   16e2c:	e008      	b.n	16e40 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   16e2e:	4b07      	ldr	r3, [pc, #28]	; (16e4c <system_apb_clock_set_mask+0x58>)
   16e30:	4a06      	ldr	r2, [pc, #24]	; (16e4c <system_apb_clock_set_mask+0x58>)
   16e32:	6a11      	ldr	r1, [r2, #32]
   16e34:	683a      	ldr	r2, [r7, #0]
   16e36:	430a      	orrs	r2, r1
   16e38:	621a      	str	r2, [r3, #32]
			break;
   16e3a:	e001      	b.n	16e40 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16e3c:	2317      	movs	r3, #23
   16e3e:	e000      	b.n	16e42 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   16e40:	2300      	movs	r3, #0
}
   16e42:	0018      	movs	r0, r3
   16e44:	46bd      	mov	sp, r7
   16e46:	b002      	add	sp, #8
   16e48:	bd80      	pop	{r7, pc}
   16e4a:	46c0      	nop			; (mov r8, r8)
   16e4c:	40000400 	.word	0x40000400

00016e50 <system_pinmux_get_config_defaults>:
{
   16e50:	b580      	push	{r7, lr}
   16e52:	b082      	sub	sp, #8
   16e54:	af00      	add	r7, sp, #0
   16e56:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16e58:	687b      	ldr	r3, [r7, #4]
   16e5a:	2280      	movs	r2, #128	; 0x80
   16e5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16e5e:	687b      	ldr	r3, [r7, #4]
   16e60:	2200      	movs	r2, #0
   16e62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16e64:	687b      	ldr	r3, [r7, #4]
   16e66:	2201      	movs	r2, #1
   16e68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   16e6a:	687b      	ldr	r3, [r7, #4]
   16e6c:	2200      	movs	r2, #0
   16e6e:	70da      	strb	r2, [r3, #3]
}
   16e70:	46c0      	nop			; (mov r8, r8)
   16e72:	46bd      	mov	sp, r7
   16e74:	b002      	add	sp, #8
   16e76:	bd80      	pop	{r7, pc}

00016e78 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   16e78:	b580      	push	{r7, lr}
   16e7a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16e7c:	4b05      	ldr	r3, [pc, #20]	; (16e94 <system_is_debugger_present+0x1c>)
   16e7e:	789b      	ldrb	r3, [r3, #2]
   16e80:	b2db      	uxtb	r3, r3
   16e82:	001a      	movs	r2, r3
   16e84:	2302      	movs	r3, #2
   16e86:	4013      	ands	r3, r2
   16e88:	1e5a      	subs	r2, r3, #1
   16e8a:	4193      	sbcs	r3, r2
   16e8c:	b2db      	uxtb	r3, r3
}
   16e8e:	0018      	movs	r0, r3
   16e90:	46bd      	mov	sp, r7
   16e92:	bd80      	pop	{r7, pc}
   16e94:	41002000 	.word	0x41002000

00016e98 <system_interrupt_enter_critical_section>:
{
   16e98:	b580      	push	{r7, lr}
   16e9a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16e9c:	4b02      	ldr	r3, [pc, #8]	; (16ea8 <system_interrupt_enter_critical_section+0x10>)
   16e9e:	4798      	blx	r3
}
   16ea0:	46c0      	nop			; (mov r8, r8)
   16ea2:	46bd      	mov	sp, r7
   16ea4:	bd80      	pop	{r7, pc}
   16ea6:	46c0      	nop			; (mov r8, r8)
   16ea8:	00025aa5 	.word	0x00025aa5

00016eac <system_interrupt_leave_critical_section>:
{
   16eac:	b580      	push	{r7, lr}
   16eae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   16eb0:	4b02      	ldr	r3, [pc, #8]	; (16ebc <system_interrupt_leave_critical_section+0x10>)
   16eb2:	4798      	blx	r3
}
   16eb4:	46c0      	nop			; (mov r8, r8)
   16eb6:	46bd      	mov	sp, r7
   16eb8:	bd80      	pop	{r7, pc}
   16eba:	46c0      	nop			; (mov r8, r8)
   16ebc:	00025af9 	.word	0x00025af9

00016ec0 <system_interrupt_disable>:
{
   16ec0:	b580      	push	{r7, lr}
   16ec2:	b082      	sub	sp, #8
   16ec4:	af00      	add	r7, sp, #0
   16ec6:	0002      	movs	r2, r0
   16ec8:	1dfb      	adds	r3, r7, #7
   16eca:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16ecc:	4a07      	ldr	r2, [pc, #28]	; (16eec <system_interrupt_disable+0x2c>)
   16ece:	1dfb      	adds	r3, r7, #7
   16ed0:	781b      	ldrb	r3, [r3, #0]
   16ed2:	0019      	movs	r1, r3
   16ed4:	231f      	movs	r3, #31
   16ed6:	400b      	ands	r3, r1
   16ed8:	2101      	movs	r1, #1
   16eda:	4099      	lsls	r1, r3
   16edc:	000b      	movs	r3, r1
   16ede:	0019      	movs	r1, r3
   16ee0:	2380      	movs	r3, #128	; 0x80
   16ee2:	50d1      	str	r1, [r2, r3]
}
   16ee4:	46c0      	nop			; (mov r8, r8)
   16ee6:	46bd      	mov	sp, r7
   16ee8:	b002      	add	sp, #8
   16eea:	bd80      	pop	{r7, pc}
   16eec:	e000e100 	.word	0xe000e100

00016ef0 <i2c_master_is_syncing>:
{
   16ef0:	b580      	push	{r7, lr}
   16ef2:	b084      	sub	sp, #16
   16ef4:	af00      	add	r7, sp, #0
   16ef6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   16ef8:	687b      	ldr	r3, [r7, #4]
   16efa:	681b      	ldr	r3, [r3, #0]
   16efc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   16efe:	68fb      	ldr	r3, [r7, #12]
   16f00:	69db      	ldr	r3, [r3, #28]
   16f02:	2207      	movs	r2, #7
   16f04:	4013      	ands	r3, r2
   16f06:	1e5a      	subs	r2, r3, #1
   16f08:	4193      	sbcs	r3, r2
   16f0a:	b2db      	uxtb	r3, r3
}
   16f0c:	0018      	movs	r0, r3
   16f0e:	46bd      	mov	sp, r7
   16f10:	b004      	add	sp, #16
   16f12:	bd80      	pop	{r7, pc}

00016f14 <_i2c_master_wait_for_sync>:
{
   16f14:	b580      	push	{r7, lr}
   16f16:	b082      	sub	sp, #8
   16f18:	af00      	add	r7, sp, #0
   16f1a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   16f1c:	46c0      	nop			; (mov r8, r8)
   16f1e:	687b      	ldr	r3, [r7, #4]
   16f20:	0018      	movs	r0, r3
   16f22:	4b04      	ldr	r3, [pc, #16]	; (16f34 <_i2c_master_wait_for_sync+0x20>)
   16f24:	4798      	blx	r3
   16f26:	1e03      	subs	r3, r0, #0
   16f28:	d1f9      	bne.n	16f1e <_i2c_master_wait_for_sync+0xa>
}
   16f2a:	46c0      	nop			; (mov r8, r8)
   16f2c:	46bd      	mov	sp, r7
   16f2e:	b002      	add	sp, #8
   16f30:	bd80      	pop	{r7, pc}
   16f32:	46c0      	nop			; (mov r8, r8)
   16f34:	00016ef1 	.word	0x00016ef1

00016f38 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   16f38:	b580      	push	{r7, lr}
   16f3a:	b084      	sub	sp, #16
   16f3c:	af00      	add	r7, sp, #0
   16f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16f40:	687b      	ldr	r3, [r7, #4]
   16f42:	681b      	ldr	r3, [r3, #0]
   16f44:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   16f46:	687b      	ldr	r3, [r7, #4]
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	0018      	movs	r0, r3
   16f4c:	4b0d      	ldr	r3, [pc, #52]	; (16f84 <i2c_master_disable+0x4c>)
   16f4e:	4798      	blx	r3
   16f50:	0003      	movs	r3, r0
   16f52:	0018      	movs	r0, r3
   16f54:	4b0c      	ldr	r3, [pc, #48]	; (16f88 <i2c_master_disable+0x50>)
   16f56:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   16f58:	687b      	ldr	r3, [r7, #4]
   16f5a:	0018      	movs	r0, r3
   16f5c:	4b0b      	ldr	r3, [pc, #44]	; (16f8c <i2c_master_disable+0x54>)
   16f5e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   16f60:	68fb      	ldr	r3, [r7, #12]
   16f62:	2283      	movs	r2, #131	; 0x83
   16f64:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   16f66:	68fb      	ldr	r3, [r7, #12]
   16f68:	2283      	movs	r2, #131	; 0x83
   16f6a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   16f6c:	68fb      	ldr	r3, [r7, #12]
   16f6e:	681b      	ldr	r3, [r3, #0]
   16f70:	2202      	movs	r2, #2
   16f72:	4393      	bics	r3, r2
   16f74:	001a      	movs	r2, r3
   16f76:	68fb      	ldr	r3, [r7, #12]
   16f78:	601a      	str	r2, [r3, #0]

}
   16f7a:	46c0      	nop			; (mov r8, r8)
   16f7c:	46bd      	mov	sp, r7
   16f7e:	b004      	add	sp, #16
   16f80:	bd80      	pop	{r7, pc}
   16f82:	46c0      	nop			; (mov r8, r8)
   16f84:	00026f79 	.word	0x00026f79
   16f88:	00016ec1 	.word	0x00016ec1
   16f8c:	00016f15 	.word	0x00016f15

00016f90 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   16f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f92:	b097      	sub	sp, #92	; 0x5c
   16f94:	af00      	add	r7, sp, #0
   16f96:	6178      	str	r0, [r7, #20]
   16f98:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   16f9a:	2300      	movs	r3, #0
   16f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   16f9e:	2300      	movs	r3, #0
   16fa0:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   16fa2:	2300      	movs	r3, #0
   16fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   16fa6:	233b      	movs	r3, #59	; 0x3b
   16fa8:	2210      	movs	r2, #16
   16faa:	4694      	mov	ip, r2
   16fac:	44bc      	add	ip, r7
   16fae:	4463      	add	r3, ip
   16fb0:	2200      	movs	r2, #0
   16fb2:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16fb4:	697b      	ldr	r3, [r7, #20]
   16fb6:	681b      	ldr	r3, [r3, #0]
   16fb8:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   16fba:	697b      	ldr	r3, [r7, #20]
   16fbc:	681b      	ldr	r3, [r3, #0]
   16fbe:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   16fc0:	2323      	movs	r3, #35	; 0x23
   16fc2:	2210      	movs	r2, #16
   16fc4:	18ba      	adds	r2, r7, r2
   16fc6:	18d4      	adds	r4, r2, r3
   16fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16fca:	0018      	movs	r0, r3
   16fcc:	4bc0      	ldr	r3, [pc, #768]	; (172d0 <_i2c_master_set_config+0x340>)
   16fce:	4798      	blx	r3
   16fd0:	0003      	movs	r3, r0
   16fd2:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16fd4:	230c      	movs	r3, #12
   16fd6:	2210      	movs	r2, #16
   16fd8:	4694      	mov	ip, r2
   16fda:	44bc      	add	ip, r7
   16fdc:	4463      	add	r3, ip
   16fde:	0018      	movs	r0, r3
   16fe0:	4bbc      	ldr	r3, [pc, #752]	; (172d4 <_i2c_master_set_config+0x344>)
   16fe2:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   16fe4:	693b      	ldr	r3, [r7, #16]
   16fe6:	69db      	ldr	r3, [r3, #28]
   16fe8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   16fea:	693b      	ldr	r3, [r7, #16]
   16fec:	6a1b      	ldr	r3, [r3, #32]
   16fee:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   16ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16ff2:	2b00      	cmp	r3, #0
   16ff4:	d106      	bne.n	17004 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   16ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ff8:	2100      	movs	r1, #0
   16ffa:	0018      	movs	r0, r3
   16ffc:	4bb6      	ldr	r3, [pc, #728]	; (172d8 <_i2c_master_set_config+0x348>)
   16ffe:	4798      	blx	r3
   17000:	0003      	movs	r3, r0
   17002:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17006:	b2da      	uxtb	r2, r3
   17008:	230c      	movs	r3, #12
   1700a:	2110      	movs	r1, #16
   1700c:	468c      	mov	ip, r1
   1700e:	44bc      	add	ip, r7
   17010:	4463      	add	r3, ip
   17012:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17014:	230c      	movs	r3, #12
   17016:	2210      	movs	r2, #16
   17018:	4694      	mov	ip, r2
   1701a:	44bc      	add	ip, r7
   1701c:	4463      	add	r3, ip
   1701e:	2202      	movs	r2, #2
   17020:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   17022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17024:	0c1b      	lsrs	r3, r3, #16
   17026:	b2db      	uxtb	r3, r3
   17028:	220c      	movs	r2, #12
   1702a:	2110      	movs	r1, #16
   1702c:	468c      	mov	ip, r1
   1702e:	44bc      	add	ip, r7
   17030:	4462      	add	r2, ip
   17032:	0011      	movs	r1, r2
   17034:	0018      	movs	r0, r3
   17036:	4ba9      	ldr	r3, [pc, #676]	; (172dc <_i2c_master_set_config+0x34c>)
   17038:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   1703a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1703c:	2b00      	cmp	r3, #0
   1703e:	d106      	bne.n	1704e <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   17040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17042:	2101      	movs	r1, #1
   17044:	0018      	movs	r0, r3
   17046:	4ba4      	ldr	r3, [pc, #656]	; (172d8 <_i2c_master_set_config+0x348>)
   17048:	4798      	blx	r3
   1704a:	0003      	movs	r3, r0
   1704c:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1704e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17050:	b2da      	uxtb	r2, r3
   17052:	230c      	movs	r3, #12
   17054:	2110      	movs	r1, #16
   17056:	468c      	mov	ip, r1
   17058:	44bc      	add	ip, r7
   1705a:	4463      	add	r3, ip
   1705c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1705e:	230c      	movs	r3, #12
   17060:	2210      	movs	r2, #16
   17062:	4694      	mov	ip, r2
   17064:	44bc      	add	ip, r7
   17066:	4463      	add	r3, ip
   17068:	2202      	movs	r2, #2
   1706a:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   1706c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1706e:	0c1b      	lsrs	r3, r3, #16
   17070:	b2db      	uxtb	r3, r3
   17072:	220c      	movs	r2, #12
   17074:	2110      	movs	r1, #16
   17076:	468c      	mov	ip, r1
   17078:	44bc      	add	ip, r7
   1707a:	4462      	add	r2, ip
   1707c:	0011      	movs	r1, r2
   1707e:	0018      	movs	r0, r3
   17080:	4b96      	ldr	r3, [pc, #600]	; (172dc <_i2c_master_set_config+0x34c>)
   17082:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17084:	693b      	ldr	r3, [r7, #16]
   17086:	8a9a      	ldrh	r2, [r3, #20]
   17088:	697b      	ldr	r3, [r7, #20]
   1708a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   1708c:	693b      	ldr	r3, [r7, #16]
   1708e:	8ada      	ldrh	r2, [r3, #22]
   17090:	697b      	ldr	r3, [r7, #20]
   17092:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17094:	693b      	ldr	r3, [r7, #16]
   17096:	7e1b      	ldrb	r3, [r3, #24]
   17098:	2b00      	cmp	r3, #0
   1709a:	d103      	bne.n	170a4 <_i2c_master_set_config+0x114>
   1709c:	4b90      	ldr	r3, [pc, #576]	; (172e0 <_i2c_master_set_config+0x350>)
   1709e:	4798      	blx	r3
   170a0:	1e03      	subs	r3, r0, #0
   170a2:	d002      	beq.n	170aa <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   170a4:	2380      	movs	r3, #128	; 0x80
   170a6:	657b      	str	r3, [r7, #84]	; 0x54
   170a8:	e001      	b.n	170ae <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   170aa:	2300      	movs	r3, #0
   170ac:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   170ae:	693b      	ldr	r3, [r7, #16]
   170b0:	691b      	ldr	r3, [r3, #16]
   170b2:	2b00      	cmp	r3, #0
   170b4:	d004      	beq.n	170c0 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   170b6:	693b      	ldr	r3, [r7, #16]
   170b8:	691b      	ldr	r3, [r3, #16]
   170ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   170bc:	4313      	orrs	r3, r2
   170be:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   170c0:	693b      	ldr	r3, [r7, #16]
   170c2:	689b      	ldr	r3, [r3, #8]
   170c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   170c6:	4313      	orrs	r3, r2
   170c8:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   170ca:	693b      	ldr	r3, [r7, #16]
   170cc:	2224      	movs	r2, #36	; 0x24
   170ce:	5c9b      	ldrb	r3, [r3, r2]
   170d0:	2b00      	cmp	r3, #0
   170d2:	d004      	beq.n	170de <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   170d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   170d6:	2280      	movs	r2, #128	; 0x80
   170d8:	05d2      	lsls	r2, r2, #23
   170da:	4313      	orrs	r3, r2
   170dc:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   170de:	693b      	ldr	r3, [r7, #16]
   170e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   170e2:	2b00      	cmp	r3, #0
   170e4:	d004      	beq.n	170f0 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   170e6:	693b      	ldr	r3, [r7, #16]
   170e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   170ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   170ec:	4313      	orrs	r3, r2
   170ee:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   170f0:	693b      	ldr	r3, [r7, #16]
   170f2:	222c      	movs	r2, #44	; 0x2c
   170f4:	5c9b      	ldrb	r3, [r3, r2]
   170f6:	2b00      	cmp	r3, #0
   170f8:	d105      	bne.n	17106 <_i2c_master_set_config+0x176>
   170fa:	693b      	ldr	r3, [r7, #16]
   170fc:	689a      	ldr	r2, [r3, #8]
   170fe:	2380      	movs	r3, #128	; 0x80
   17100:	049b      	lsls	r3, r3, #18
   17102:	429a      	cmp	r2, r3
   17104:	d104      	bne.n	17110 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17108:	2280      	movs	r2, #128	; 0x80
   1710a:	0512      	lsls	r2, r2, #20
   1710c:	4313      	orrs	r3, r2
   1710e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17110:	693b      	ldr	r3, [r7, #16]
   17112:	222d      	movs	r2, #45	; 0x2d
   17114:	5c9b      	ldrb	r3, [r3, r2]
   17116:	2b00      	cmp	r3, #0
   17118:	d004      	beq.n	17124 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   1711a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1711c:	2280      	movs	r2, #128	; 0x80
   1711e:	0412      	lsls	r2, r2, #16
   17120:	4313      	orrs	r3, r2
   17122:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17124:	693b      	ldr	r3, [r7, #16]
   17126:	222e      	movs	r2, #46	; 0x2e
   17128:	5c9b      	ldrb	r3, [r3, r2]
   1712a:	2b00      	cmp	r3, #0
   1712c:	d004      	beq.n	17138 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1712e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17130:	2280      	movs	r2, #128	; 0x80
   17132:	03d2      	lsls	r2, r2, #15
   17134:	4313      	orrs	r3, r2
   17136:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1713a:	681a      	ldr	r2, [r3, #0]
   1713c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1713e:	431a      	orrs	r2, r3
   17140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17142:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17146:	2280      	movs	r2, #128	; 0x80
   17148:	0052      	lsls	r2, r2, #1
   1714a:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   1714c:	2323      	movs	r3, #35	; 0x23
   1714e:	2210      	movs	r2, #16
   17150:	4694      	mov	ip, r2
   17152:	44bc      	add	ip, r7
   17154:	4463      	add	r3, ip
   17156:	781b      	ldrb	r3, [r3, #0]
   17158:	3314      	adds	r3, #20
   1715a:	b2db      	uxtb	r3, r3
   1715c:	0018      	movs	r0, r3
   1715e:	4b61      	ldr	r3, [pc, #388]	; (172e4 <_i2c_master_set_config+0x354>)
   17160:	4798      	blx	r3
   17162:	0003      	movs	r3, r0
   17164:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17166:	693b      	ldr	r3, [r7, #16]
   17168:	681b      	ldr	r3, [r3, #0]
   1716a:	22fa      	movs	r2, #250	; 0xfa
   1716c:	0092      	lsls	r2, r2, #2
   1716e:	4353      	muls	r3, r2
   17170:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   17172:	693b      	ldr	r3, [r7, #16]
   17174:	685b      	ldr	r3, [r3, #4]
   17176:	22fa      	movs	r2, #250	; 0xfa
   17178:	0092      	lsls	r2, r2, #2
   1717a:	4353      	muls	r3, r2
   1717c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1717e:	693b      	ldr	r3, [r7, #16]
   17180:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17182:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17184:	4b58      	ldr	r3, [pc, #352]	; (172e8 <_i2c_master_set_config+0x358>)
   17186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17188:	4798      	blx	r3
   1718a:	0005      	movs	r5, r0
   1718c:	000e      	movs	r6, r1
   1718e:	4b56      	ldr	r3, [pc, #344]	; (172e8 <_i2c_master_set_config+0x358>)
   17190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17192:	4798      	blx	r3
   17194:	60b8      	str	r0, [r7, #8]
   17196:	60f9      	str	r1, [r7, #12]
   17198:	4b53      	ldr	r3, [pc, #332]	; (172e8 <_i2c_master_set_config+0x358>)
   1719a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1719c:	4798      	blx	r3
   1719e:	4c53      	ldr	r4, [pc, #332]	; (172ec <_i2c_master_set_config+0x35c>)
   171a0:	4a53      	ldr	r2, [pc, #332]	; (172f0 <_i2c_master_set_config+0x360>)
   171a2:	4b54      	ldr	r3, [pc, #336]	; (172f4 <_i2c_master_set_config+0x364>)
   171a4:	47a0      	blx	r4
   171a6:	0003      	movs	r3, r0
   171a8:	000c      	movs	r4, r1
   171aa:	603b      	str	r3, [r7, #0]
   171ac:	607c      	str	r4, [r7, #4]
   171ae:	4b4e      	ldr	r3, [pc, #312]	; (172e8 <_i2c_master_set_config+0x358>)
   171b0:	6a38      	ldr	r0, [r7, #32]
   171b2:	4798      	blx	r3
   171b4:	0002      	movs	r2, r0
   171b6:	000b      	movs	r3, r1
   171b8:	4c4c      	ldr	r4, [pc, #304]	; (172ec <_i2c_master_set_config+0x35c>)
   171ba:	6838      	ldr	r0, [r7, #0]
   171bc:	6879      	ldr	r1, [r7, #4]
   171be:	47a0      	blx	r4
   171c0:	0003      	movs	r3, r0
   171c2:	000c      	movs	r4, r1
   171c4:	0018      	movs	r0, r3
   171c6:	0021      	movs	r1, r4
   171c8:	4c4b      	ldr	r4, [pc, #300]	; (172f8 <_i2c_master_set_config+0x368>)
   171ca:	2200      	movs	r2, #0
   171cc:	4b4b      	ldr	r3, [pc, #300]	; (172fc <_i2c_master_set_config+0x36c>)
   171ce:	47a0      	blx	r4
   171d0:	0003      	movs	r3, r0
   171d2:	000c      	movs	r4, r1
   171d4:	001a      	movs	r2, r3
   171d6:	0023      	movs	r3, r4
   171d8:	4c44      	ldr	r4, [pc, #272]	; (172ec <_i2c_master_set_config+0x35c>)
   171da:	68b8      	ldr	r0, [r7, #8]
   171dc:	68f9      	ldr	r1, [r7, #12]
   171de:	47a0      	blx	r4
   171e0:	0003      	movs	r3, r0
   171e2:	000c      	movs	r4, r1
   171e4:	001a      	movs	r2, r3
   171e6:	0023      	movs	r3, r4
   171e8:	4c45      	ldr	r4, [pc, #276]	; (17300 <_i2c_master_set_config+0x370>)
   171ea:	0028      	movs	r0, r5
   171ec:	0031      	movs	r1, r6
   171ee:	47a0      	blx	r4
   171f0:	0003      	movs	r3, r0
   171f2:	000c      	movs	r4, r1
   171f4:	001d      	movs	r5, r3
   171f6:	0026      	movs	r6, r4
   171f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   171fa:	005a      	lsls	r2, r3, #1
   171fc:	4b3a      	ldr	r3, [pc, #232]	; (172e8 <_i2c_master_set_config+0x358>)
   171fe:	0010      	movs	r0, r2
   17200:	4798      	blx	r3
   17202:	0002      	movs	r2, r0
   17204:	000b      	movs	r3, r1
   17206:	4c3c      	ldr	r4, [pc, #240]	; (172f8 <_i2c_master_set_config+0x368>)
   17208:	0028      	movs	r0, r5
   1720a:	0031      	movs	r1, r6
   1720c:	47a0      	blx	r4
   1720e:	0003      	movs	r3, r0
   17210:	000c      	movs	r4, r1
   17212:	0018      	movs	r0, r3
   17214:	0021      	movs	r1, r4
   17216:	4c3a      	ldr	r4, [pc, #232]	; (17300 <_i2c_master_set_config+0x370>)
   17218:	2200      	movs	r2, #0
   1721a:	4b3a      	ldr	r3, [pc, #232]	; (17304 <_i2c_master_set_config+0x374>)
   1721c:	47a0      	blx	r4
   1721e:	0003      	movs	r3, r0
   17220:	000c      	movs	r4, r1
   17222:	001d      	movs	r5, r3
   17224:	0026      	movs	r6, r4
   17226:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17228:	005a      	lsls	r2, r3, #1
   1722a:	4b2f      	ldr	r3, [pc, #188]	; (172e8 <_i2c_master_set_config+0x358>)
   1722c:	0010      	movs	r0, r2
   1722e:	4798      	blx	r3
   17230:	0002      	movs	r2, r0
   17232:	000b      	movs	r3, r1
   17234:	4c34      	ldr	r4, [pc, #208]	; (17308 <_i2c_master_set_config+0x378>)
   17236:	0028      	movs	r0, r5
   17238:	0031      	movs	r1, r6
   1723a:	47a0      	blx	r4
   1723c:	0003      	movs	r3, r0
   1723e:	000c      	movs	r4, r1
   17240:	0019      	movs	r1, r3
   17242:	0022      	movs	r2, r4
   17244:	4b31      	ldr	r3, [pc, #196]	; (1730c <_i2c_master_set_config+0x37c>)
   17246:	0008      	movs	r0, r1
   17248:	0011      	movs	r1, r2
   1724a:	4798      	blx	r3
   1724c:	0003      	movs	r3, r0
   1724e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   17250:	693b      	ldr	r3, [r7, #16]
   17252:	689a      	ldr	r2, [r3, #8]
   17254:	2380      	movs	r3, #128	; 0x80
   17256:	049b      	lsls	r3, r3, #18
   17258:	429a      	cmp	r2, r3
   1725a:	d16a      	bne.n	17332 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   1725c:	4b22      	ldr	r3, [pc, #136]	; (172e8 <_i2c_master_set_config+0x358>)
   1725e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17260:	4798      	blx	r3
   17262:	4c25      	ldr	r4, [pc, #148]	; (172f8 <_i2c_master_set_config+0x368>)
   17264:	0002      	movs	r2, r0
   17266:	000b      	movs	r3, r1
   17268:	47a0      	blx	r4
   1726a:	0003      	movs	r3, r0
   1726c:	000c      	movs	r4, r1
   1726e:	001d      	movs	r5, r3
   17270:	0026      	movs	r6, r4
   17272:	4b1d      	ldr	r3, [pc, #116]	; (172e8 <_i2c_master_set_config+0x358>)
   17274:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17276:	4798      	blx	r3
   17278:	4c1c      	ldr	r4, [pc, #112]	; (172ec <_i2c_master_set_config+0x35c>)
   1727a:	2200      	movs	r2, #0
   1727c:	4b24      	ldr	r3, [pc, #144]	; (17310 <_i2c_master_set_config+0x380>)
   1727e:	47a0      	blx	r4
   17280:	0003      	movs	r3, r0
   17282:	000c      	movs	r4, r1
   17284:	001a      	movs	r2, r3
   17286:	0023      	movs	r3, r4
   17288:	4c1f      	ldr	r4, [pc, #124]	; (17308 <_i2c_master_set_config+0x378>)
   1728a:	0028      	movs	r0, r5
   1728c:	0031      	movs	r1, r6
   1728e:	47a0      	blx	r4
   17290:	0003      	movs	r3, r0
   17292:	000c      	movs	r4, r1
   17294:	0018      	movs	r0, r3
   17296:	0021      	movs	r1, r4
   17298:	4c19      	ldr	r4, [pc, #100]	; (17300 <_i2c_master_set_config+0x370>)
   1729a:	2200      	movs	r2, #0
   1729c:	4b19      	ldr	r3, [pc, #100]	; (17304 <_i2c_master_set_config+0x374>)
   1729e:	47a0      	blx	r4
   172a0:	0003      	movs	r3, r0
   172a2:	000c      	movs	r4, r1
   172a4:	0019      	movs	r1, r3
   172a6:	0022      	movs	r2, r4
   172a8:	4b18      	ldr	r3, [pc, #96]	; (1730c <_i2c_master_set_config+0x37c>)
   172aa:	0008      	movs	r0, r1
   172ac:	0011      	movs	r1, r2
   172ae:	4798      	blx	r3
   172b0:	0003      	movs	r3, r0
   172b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   172b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   172b6:	2b00      	cmp	r3, #0
   172b8:	d02e      	beq.n	17318 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   172ba:	4b16      	ldr	r3, [pc, #88]	; (17314 <_i2c_master_set_config+0x384>)
   172bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   172be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   172c0:	4798      	blx	r3
   172c2:	0003      	movs	r3, r0
   172c4:	1e9a      	subs	r2, r3, #2
   172c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   172c8:	1ad3      	subs	r3, r2, r3
   172ca:	653b      	str	r3, [r7, #80]	; 0x50
   172cc:	e031      	b.n	17332 <_i2c_master_set_config+0x3a2>
   172ce:	46c0      	nop			; (mov r8, r8)
   172d0:	00026ea9 	.word	0x00026ea9
   172d4:	00016e51 	.word	0x00016e51
   172d8:	00026ced 	.word	0x00026ced
   172dc:	00029a99 	.word	0x00029a99
   172e0:	00016e79 	.word	0x00016e79
   172e4:	0002985d 	.word	0x0002985d
   172e8:	000340a5 	.word	0x000340a5
   172ec:	0003348d 	.word	0x0003348d
   172f0:	e826d695 	.word	0xe826d695
   172f4:	3e112e0b 	.word	0x3e112e0b
   172f8:	00032805 	.word	0x00032805
   172fc:	40240000 	.word	0x40240000
   17300:	0003398d 	.word	0x0003398d
   17304:	3ff00000 	.word	0x3ff00000
   17308:	00032e25 	.word	0x00032e25
   1730c:	00033fb9 	.word	0x00033fb9
   17310:	40080000 	.word	0x40080000
   17314:	00032245 	.word	0x00032245
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1731a:	005a      	lsls	r2, r3, #1
   1731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1731e:	18d3      	adds	r3, r2, r3
   17320:	1e5a      	subs	r2, r3, #1
   17322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17324:	0059      	lsls	r1, r3, #1
   17326:	4b1d      	ldr	r3, [pc, #116]	; (1739c <_i2c_master_set_config+0x40c>)
   17328:	0010      	movs	r0, r2
   1732a:	4798      	blx	r3
   1732c:	0003      	movs	r3, r0
   1732e:	3b01      	subs	r3, #1
   17330:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   17332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17334:	2bff      	cmp	r3, #255	; 0xff
   17336:	dc08      	bgt.n	1734a <_i2c_master_set_config+0x3ba>
   17338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1733a:	2b00      	cmp	r3, #0
   1733c:	db05      	blt.n	1734a <_i2c_master_set_config+0x3ba>
   1733e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17340:	2bff      	cmp	r3, #255	; 0xff
   17342:	dc02      	bgt.n	1734a <_i2c_master_set_config+0x3ba>
   17344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17346:	2b00      	cmp	r3, #0
   17348:	da06      	bge.n	17358 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1734a:	233b      	movs	r3, #59	; 0x3b
   1734c:	2210      	movs	r2, #16
   1734e:	4694      	mov	ip, r2
   17350:	44bc      	add	ip, r7
   17352:	4463      	add	r3, ip
   17354:	2240      	movs	r2, #64	; 0x40
   17356:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17358:	233b      	movs	r3, #59	; 0x3b
   1735a:	2210      	movs	r2, #16
   1735c:	4694      	mov	ip, r2
   1735e:	44bc      	add	ip, r7
   17360:	4463      	add	r3, ip
   17362:	781b      	ldrb	r3, [r3, #0]
   17364:	2b40      	cmp	r3, #64	; 0x40
   17366:	d00e      	beq.n	17386 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1736a:	22ff      	movs	r2, #255	; 0xff
   1736c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1736e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17370:	041b      	lsls	r3, r3, #16
   17372:	0019      	movs	r1, r3
   17374:	23ff      	movs	r3, #255	; 0xff
   17376:	041b      	lsls	r3, r3, #16
   17378:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1737a:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1737c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1737e:	0612      	lsls	r2, r2, #24
   17380:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17384:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   17386:	233b      	movs	r3, #59	; 0x3b
   17388:	2210      	movs	r2, #16
   1738a:	4694      	mov	ip, r2
   1738c:	44bc      	add	ip, r7
   1738e:	4463      	add	r3, ip
   17390:	781b      	ldrb	r3, [r3, #0]
}
   17392:	0018      	movs	r0, r3
   17394:	46bd      	mov	sp, r7
   17396:	b017      	add	sp, #92	; 0x5c
   17398:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1739a:	46c0      	nop			; (mov r8, r8)
   1739c:	00032245 	.word	0x00032245

000173a0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   173a0:	b590      	push	{r4, r7, lr}
   173a2:	b08b      	sub	sp, #44	; 0x2c
   173a4:	af00      	add	r7, sp, #0
   173a6:	60f8      	str	r0, [r7, #12]
   173a8:	60b9      	str	r1, [r7, #8]
   173aa:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   173ac:	68fb      	ldr	r3, [r7, #12]
   173ae:	68ba      	ldr	r2, [r7, #8]
   173b0:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   173b2:	68fb      	ldr	r3, [r7, #12]
   173b4:	681b      	ldr	r3, [r3, #0]
   173b6:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   173b8:	68fb      	ldr	r3, [r7, #12]
   173ba:	681b      	ldr	r3, [r3, #0]
   173bc:	0018      	movs	r0, r3
   173be:	4b3b      	ldr	r3, [pc, #236]	; (174ac <i2c_master_init+0x10c>)
   173c0:	4798      	blx	r3
   173c2:	0003      	movs	r3, r0
   173c4:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   173c6:	6a3b      	ldr	r3, [r7, #32]
   173c8:	3302      	adds	r3, #2
   173ca:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   173cc:	6a3b      	ldr	r3, [r7, #32]
   173ce:	3314      	adds	r3, #20
   173d0:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   173d2:	2201      	movs	r2, #1
   173d4:	69fb      	ldr	r3, [r7, #28]
   173d6:	409a      	lsls	r2, r3
   173d8:	0013      	movs	r3, r2
   173da:	0019      	movs	r1, r3
   173dc:	2002      	movs	r0, #2
   173de:	4b34      	ldr	r3, [pc, #208]	; (174b0 <i2c_master_init+0x110>)
   173e0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   173e2:	2314      	movs	r3, #20
   173e4:	18fb      	adds	r3, r7, r3
   173e6:	0018      	movs	r0, r3
   173e8:	4b32      	ldr	r3, [pc, #200]	; (174b4 <i2c_master_init+0x114>)
   173ea:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   173ec:	687b      	ldr	r3, [r7, #4]
   173ee:	7b1a      	ldrb	r2, [r3, #12]
   173f0:	2314      	movs	r3, #20
   173f2:	18fb      	adds	r3, r7, r3
   173f4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   173f6:	69bb      	ldr	r3, [r7, #24]
   173f8:	b2db      	uxtb	r3, r3
   173fa:	2214      	movs	r2, #20
   173fc:	18ba      	adds	r2, r7, r2
   173fe:	0011      	movs	r1, r2
   17400:	0018      	movs	r0, r3
   17402:	4b2d      	ldr	r3, [pc, #180]	; (174b8 <i2c_master_init+0x118>)
   17404:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17406:	69bb      	ldr	r3, [r7, #24]
   17408:	b2db      	uxtb	r3, r3
   1740a:	0018      	movs	r0, r3
   1740c:	4b2b      	ldr	r3, [pc, #172]	; (174bc <i2c_master_init+0x11c>)
   1740e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17410:	687b      	ldr	r3, [r7, #4]
   17412:	7b1b      	ldrb	r3, [r3, #12]
   17414:	2100      	movs	r1, #0
   17416:	0018      	movs	r0, r3
   17418:	4b29      	ldr	r3, [pc, #164]	; (174c0 <i2c_master_init+0x120>)
   1741a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1741e:	681b      	ldr	r3, [r3, #0]
   17420:	2202      	movs	r2, #2
   17422:	4013      	ands	r3, r2
   17424:	d001      	beq.n	1742a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   17426:	231c      	movs	r3, #28
   17428:	e03b      	b.n	174a2 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   1742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1742c:	681b      	ldr	r3, [r3, #0]
   1742e:	2201      	movs	r2, #1
   17430:	4013      	ands	r3, r2
   17432:	d001      	beq.n	17438 <i2c_master_init+0x98>
		return STATUS_BUSY;
   17434:	2305      	movs	r3, #5
   17436:	e034      	b.n	174a2 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17438:	68fb      	ldr	r3, [r7, #12]
   1743a:	681b      	ldr	r3, [r3, #0]
   1743c:	2217      	movs	r2, #23
   1743e:	18bc      	adds	r4, r7, r2
   17440:	0018      	movs	r0, r3
   17442:	4b1a      	ldr	r3, [pc, #104]	; (174ac <i2c_master_init+0x10c>)
   17444:	4798      	blx	r3
   17446:	0003      	movs	r3, r0
   17448:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   1744a:	4a1e      	ldr	r2, [pc, #120]	; (174c4 <i2c_master_init+0x124>)
   1744c:	2317      	movs	r3, #23
   1744e:	18fb      	adds	r3, r7, r3
   17450:	781b      	ldrb	r3, [r3, #0]
   17452:	0011      	movs	r1, r2
   17454:	0018      	movs	r0, r3
   17456:	4b1c      	ldr	r3, [pc, #112]	; (174c8 <i2c_master_init+0x128>)
   17458:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1745a:	2317      	movs	r3, #23
   1745c:	18fb      	adds	r3, r7, r3
   1745e:	781a      	ldrb	r2, [r3, #0]
   17460:	4b1a      	ldr	r3, [pc, #104]	; (174cc <i2c_master_init+0x12c>)
   17462:	0092      	lsls	r2, r2, #2
   17464:	68f9      	ldr	r1, [r7, #12]
   17466:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   17468:	68fb      	ldr	r3, [r7, #12]
   1746a:	2200      	movs	r2, #0
   1746c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1746e:	68fb      	ldr	r3, [r7, #12]
   17470:	2200      	movs	r2, #0
   17472:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   17474:	68fb      	ldr	r3, [r7, #12]
   17476:	2200      	movs	r2, #0
   17478:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1747a:	68fb      	ldr	r3, [r7, #12]
   1747c:	2200      	movs	r2, #0
   1747e:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   17480:	68fb      	ldr	r3, [r7, #12]
   17482:	2225      	movs	r2, #37	; 0x25
   17484:	2100      	movs	r1, #0
   17486:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   17488:	68fb      	ldr	r3, [r7, #12]
   1748a:	2200      	movs	r2, #0
   1748c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17490:	2214      	movs	r2, #20
   17492:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   17494:	687a      	ldr	r2, [r7, #4]
   17496:	68fb      	ldr	r3, [r7, #12]
   17498:	0011      	movs	r1, r2
   1749a:	0018      	movs	r0, r3
   1749c:	4b0c      	ldr	r3, [pc, #48]	; (174d0 <i2c_master_init+0x130>)
   1749e:	4798      	blx	r3
   174a0:	0003      	movs	r3, r0
}
   174a2:	0018      	movs	r0, r3
   174a4:	46bd      	mov	sp, r7
   174a6:	b00b      	add	sp, #44	; 0x2c
   174a8:	bd90      	pop	{r4, r7, pc}
   174aa:	46c0      	nop			; (mov r8, r8)
   174ac:	00026ea9 	.word	0x00026ea9
   174b0:	00016df5 	.word	0x00016df5
   174b4:	00016ddd 	.word	0x00016ddd
   174b8:	00029739 	.word	0x00029739
   174bc:	0002977d 	.word	0x0002977d
   174c0:	00026c61 	.word	0x00026c61
   174c4:	00013415 	.word	0x00013415
   174c8:	00026f0d 	.word	0x00026f0d
   174cc:	20005a0c 	.word	0x20005a0c
   174d0:	00016f91 	.word	0x00016f91

000174d4 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   174d4:	b580      	push	{r7, lr}
   174d6:	b084      	sub	sp, #16
   174d8:	af00      	add	r7, sp, #0
   174da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   174dc:	687b      	ldr	r3, [r7, #4]
   174de:	681b      	ldr	r3, [r3, #0]
   174e0:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   174e2:	687b      	ldr	r3, [r7, #4]
   174e4:	0018      	movs	r0, r3
   174e6:	4b0f      	ldr	r3, [pc, #60]	; (17524 <i2c_master_reset+0x50>)
   174e8:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   174ea:	687b      	ldr	r3, [r7, #4]
   174ec:	0018      	movs	r0, r3
   174ee:	4b0e      	ldr	r3, [pc, #56]	; (17528 <i2c_master_reset+0x54>)
   174f0:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   174f2:	4b0e      	ldr	r3, [pc, #56]	; (1752c <i2c_master_reset+0x58>)
   174f4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   174f6:	687b      	ldr	r3, [r7, #4]
   174f8:	681b      	ldr	r3, [r3, #0]
   174fa:	0018      	movs	r0, r3
   174fc:	4b0c      	ldr	r3, [pc, #48]	; (17530 <i2c_master_reset+0x5c>)
   174fe:	4798      	blx	r3
   17500:	0003      	movs	r3, r0
   17502:	0018      	movs	r0, r3
   17504:	4b0b      	ldr	r3, [pc, #44]	; (17534 <i2c_master_reset+0x60>)
   17506:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17508:	4b0b      	ldr	r3, [pc, #44]	; (17538 <i2c_master_reset+0x64>)
   1750a:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1750c:	687b      	ldr	r3, [r7, #4]
   1750e:	0018      	movs	r0, r3
   17510:	4b04      	ldr	r3, [pc, #16]	; (17524 <i2c_master_reset+0x50>)
   17512:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   17514:	68fb      	ldr	r3, [r7, #12]
   17516:	2201      	movs	r2, #1
   17518:	601a      	str	r2, [r3, #0]
}
   1751a:	46c0      	nop			; (mov r8, r8)
   1751c:	46bd      	mov	sp, r7
   1751e:	b004      	add	sp, #16
   17520:	bd80      	pop	{r7, pc}
   17522:	46c0      	nop			; (mov r8, r8)
   17524:	00016f15 	.word	0x00016f15
   17528:	00016f39 	.word	0x00016f39
   1752c:	00016e99 	.word	0x00016e99
   17530:	00026f79 	.word	0x00026f79
   17534:	000298b5 	.word	0x000298b5
   17538:	00016ead 	.word	0x00016ead

0001753c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1753c:	b580      	push	{r7, lr}
   1753e:	b084      	sub	sp, #16
   17540:	af00      	add	r7, sp, #0
   17542:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17544:	687b      	ldr	r3, [r7, #4]
   17546:	681b      	ldr	r3, [r3, #0]
   17548:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1754a:	68fb      	ldr	r3, [r7, #12]
   1754c:	7e1b      	ldrb	r3, [r3, #24]
   1754e:	b2db      	uxtb	r3, r3
   17550:	001a      	movs	r2, r3
   17552:	2302      	movs	r3, #2
   17554:	4013      	ands	r3, r2
   17556:	d00b      	beq.n	17570 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17558:	68fb      	ldr	r3, [r7, #12]
   1755a:	2202      	movs	r2, #2
   1755c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1755e:	68fb      	ldr	r3, [r7, #12]
   17560:	8b5b      	ldrh	r3, [r3, #26]
   17562:	b29b      	uxth	r3, r3
   17564:	001a      	movs	r2, r3
   17566:	2302      	movs	r3, #2
   17568:	4013      	ands	r3, r2
   1756a:	d011      	beq.n	17590 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1756c:	2341      	movs	r3, #65	; 0x41
   1756e:	e010      	b.n	17592 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   17570:	68fb      	ldr	r3, [r7, #12]
   17572:	8b5b      	ldrh	r3, [r3, #26]
   17574:	b29b      	uxth	r3, r3
   17576:	001a      	movs	r2, r3
   17578:	2304      	movs	r3, #4
   1757a:	4013      	ands	r3, r2
   1757c:	d008      	beq.n	17590 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1757e:	68fb      	ldr	r3, [r7, #12]
   17580:	685b      	ldr	r3, [r3, #4]
   17582:	22c0      	movs	r2, #192	; 0xc0
   17584:	0292      	lsls	r2, r2, #10
   17586:	431a      	orrs	r2, r3
   17588:	68fb      	ldr	r3, [r7, #12]
   1758a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1758c:	2318      	movs	r3, #24
   1758e:	e000      	b.n	17592 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   17590:	2300      	movs	r3, #0
}
   17592:	0018      	movs	r0, r3
   17594:	46bd      	mov	sp, r7
   17596:	b004      	add	sp, #16
   17598:	bd80      	pop	{r7, pc}

0001759a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1759a:	b580      	push	{r7, lr}
   1759c:	b084      	sub	sp, #16
   1759e:	af00      	add	r7, sp, #0
   175a0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   175a2:	687b      	ldr	r3, [r7, #4]
   175a4:	681b      	ldr	r3, [r3, #0]
   175a6:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   175a8:	230e      	movs	r3, #14
   175aa:	18fb      	adds	r3, r7, r3
   175ac:	2200      	movs	r2, #0
   175ae:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   175b0:	e00f      	b.n	175d2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   175b2:	230e      	movs	r3, #14
   175b4:	18fb      	adds	r3, r7, r3
   175b6:	220e      	movs	r2, #14
   175b8:	18ba      	adds	r2, r7, r2
   175ba:	8812      	ldrh	r2, [r2, #0]
   175bc:	3201      	adds	r2, #1
   175be:	801a      	strh	r2, [r3, #0]
   175c0:	687b      	ldr	r3, [r7, #4]
   175c2:	891b      	ldrh	r3, [r3, #8]
   175c4:	220e      	movs	r2, #14
   175c6:	18ba      	adds	r2, r7, r2
   175c8:	8812      	ldrh	r2, [r2, #0]
   175ca:	429a      	cmp	r2, r3
   175cc:	d301      	bcc.n	175d2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   175ce:	2312      	movs	r3, #18
   175d0:	e00e      	b.n	175f0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   175d2:	68bb      	ldr	r3, [r7, #8]
   175d4:	7e1b      	ldrb	r3, [r3, #24]
   175d6:	b2db      	uxtb	r3, r3
   175d8:	001a      	movs	r2, r3
   175da:	2301      	movs	r3, #1
   175dc:	4013      	ands	r3, r2
   175de:	d106      	bne.n	175ee <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   175e0:	68bb      	ldr	r3, [r7, #8]
   175e2:	7e1b      	ldrb	r3, [r3, #24]
   175e4:	b2db      	uxtb	r3, r3
   175e6:	001a      	movs	r2, r3
   175e8:	2302      	movs	r3, #2
   175ea:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   175ec:	d0e1      	beq.n	175b2 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   175ee:	2300      	movs	r3, #0
}
   175f0:	0018      	movs	r0, r3
   175f2:	46bd      	mov	sp, r7
   175f4:	b004      	add	sp, #16
   175f6:	bd80      	pop	{r7, pc}

000175f8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   175f8:	b590      	push	{r4, r7, lr}
   175fa:	b085      	sub	sp, #20
   175fc:	af00      	add	r7, sp, #0
   175fe:	6078      	str	r0, [r7, #4]
   17600:	000a      	movs	r2, r1
   17602:	1cfb      	adds	r3, r7, #3
   17604:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17606:	687b      	ldr	r3, [r7, #4]
   17608:	681b      	ldr	r3, [r3, #0]
   1760a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1760c:	68fb      	ldr	r3, [r7, #12]
   1760e:	685b      	ldr	r3, [r3, #4]
   17610:	2280      	movs	r2, #128	; 0x80
   17612:	02d2      	lsls	r2, r2, #11
   17614:	431a      	orrs	r2, r3
   17616:	68fb      	ldr	r3, [r7, #12]
   17618:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1761a:	1cfb      	adds	r3, r7, #3
   1761c:	781a      	ldrb	r2, [r3, #0]
   1761e:	68fb      	ldr	r3, [r7, #12]
   17620:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17622:	230b      	movs	r3, #11
   17624:	18fc      	adds	r4, r7, r3
   17626:	687b      	ldr	r3, [r7, #4]
   17628:	0018      	movs	r0, r3
   1762a:	4b07      	ldr	r3, [pc, #28]	; (17648 <_i2c_master_send_hs_master_code+0x50>)
   1762c:	4798      	blx	r3
   1762e:	0003      	movs	r3, r0
   17630:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17632:	68fb      	ldr	r3, [r7, #12]
   17634:	2201      	movs	r2, #1
   17636:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17638:	230b      	movs	r3, #11
   1763a:	18fb      	adds	r3, r7, r3
   1763c:	781b      	ldrb	r3, [r3, #0]
}
   1763e:	0018      	movs	r0, r3
   17640:	46bd      	mov	sp, r7
   17642:	b005      	add	sp, #20
   17644:	bd90      	pop	{r4, r7, pc}
   17646:	46c0      	nop			; (mov r8, r8)
   17648:	0001759b 	.word	0x0001759b

0001764c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1764c:	b580      	push	{r7, lr}
   1764e:	af00      	add	r7, sp, #0
   17650:	2000      	movs	r0, #0
   17652:	4b02      	ldr	r3, [pc, #8]	; (1765c <TC3_Handler+0x10>)
   17654:	4798      	blx	r3
   17656:	46c0      	nop			; (mov r8, r8)
   17658:	46bd      	mov	sp, r7
   1765a:	bd80      	pop	{r7, pc}
   1765c:	00017689 	.word	0x00017689

00017660 <TC4_Handler>:
   17660:	b580      	push	{r7, lr}
   17662:	af00      	add	r7, sp, #0
   17664:	2001      	movs	r0, #1
   17666:	4b02      	ldr	r3, [pc, #8]	; (17670 <TC4_Handler+0x10>)
   17668:	4798      	blx	r3
   1766a:	46c0      	nop			; (mov r8, r8)
   1766c:	46bd      	mov	sp, r7
   1766e:	bd80      	pop	{r7, pc}
   17670:	00017689 	.word	0x00017689

00017674 <TC5_Handler>:
   17674:	b580      	push	{r7, lr}
   17676:	af00      	add	r7, sp, #0
   17678:	2002      	movs	r0, #2
   1767a:	4b02      	ldr	r3, [pc, #8]	; (17684 <TC5_Handler+0x10>)
   1767c:	4798      	blx	r3
   1767e:	46c0      	nop			; (mov r8, r8)
   17680:	46bd      	mov	sp, r7
   17682:	bd80      	pop	{r7, pc}
   17684:	00017689 	.word	0x00017689

00017688 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17688:	b580      	push	{r7, lr}
   1768a:	b084      	sub	sp, #16
   1768c:	af00      	add	r7, sp, #0
   1768e:	0002      	movs	r2, r0
   17690:	1dfb      	adds	r3, r7, #7
   17692:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17694:	1dfb      	adds	r3, r7, #7
   17696:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17698:	4b28      	ldr	r3, [pc, #160]	; (1773c <_tc_interrupt_handler+0xb4>)
   1769a:	0092      	lsls	r2, r2, #2
   1769c:	58d3      	ldr	r3, [r2, r3]
   1769e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   176a0:	68fb      	ldr	r3, [r7, #12]
   176a2:	681b      	ldr	r3, [r3, #0]
   176a4:	7b9b      	ldrb	r3, [r3, #14]
   176a6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   176a8:	68fa      	ldr	r2, [r7, #12]
   176aa:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   176ac:	4013      	ands	r3, r2
   176ae:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   176b0:	68fb      	ldr	r3, [r7, #12]
   176b2:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   176b4:	230b      	movs	r3, #11
   176b6:	18fb      	adds	r3, r7, r3
   176b8:	400a      	ands	r2, r1
   176ba:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   176bc:	230b      	movs	r3, #11
   176be:	18fb      	adds	r3, r7, r3
   176c0:	781b      	ldrb	r3, [r3, #0]
   176c2:	2201      	movs	r2, #1
   176c4:	4013      	ands	r3, r2
   176c6:	d008      	beq.n	176da <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   176c8:	68fb      	ldr	r3, [r7, #12]
   176ca:	689b      	ldr	r3, [r3, #8]
   176cc:	68fa      	ldr	r2, [r7, #12]
   176ce:	0010      	movs	r0, r2
   176d0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   176d2:	68fb      	ldr	r3, [r7, #12]
   176d4:	681b      	ldr	r3, [r3, #0]
   176d6:	2201      	movs	r2, #1
   176d8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   176da:	230b      	movs	r3, #11
   176dc:	18fb      	adds	r3, r7, r3
   176de:	781b      	ldrb	r3, [r3, #0]
   176e0:	2202      	movs	r2, #2
   176e2:	4013      	ands	r3, r2
   176e4:	d008      	beq.n	176f8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   176e6:	68fb      	ldr	r3, [r7, #12]
   176e8:	68db      	ldr	r3, [r3, #12]
   176ea:	68fa      	ldr	r2, [r7, #12]
   176ec:	0010      	movs	r0, r2
   176ee:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   176f0:	68fb      	ldr	r3, [r7, #12]
   176f2:	681b      	ldr	r3, [r3, #0]
   176f4:	2202      	movs	r2, #2
   176f6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   176f8:	230b      	movs	r3, #11
   176fa:	18fb      	adds	r3, r7, r3
   176fc:	781b      	ldrb	r3, [r3, #0]
   176fe:	2210      	movs	r2, #16
   17700:	4013      	ands	r3, r2
   17702:	d008      	beq.n	17716 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17704:	68fb      	ldr	r3, [r7, #12]
   17706:	691b      	ldr	r3, [r3, #16]
   17708:	68fa      	ldr	r2, [r7, #12]
   1770a:	0010      	movs	r0, r2
   1770c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1770e:	68fb      	ldr	r3, [r7, #12]
   17710:	681b      	ldr	r3, [r3, #0]
   17712:	2210      	movs	r2, #16
   17714:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17716:	230b      	movs	r3, #11
   17718:	18fb      	adds	r3, r7, r3
   1771a:	781b      	ldrb	r3, [r3, #0]
   1771c:	2220      	movs	r2, #32
   1771e:	4013      	ands	r3, r2
   17720:	d008      	beq.n	17734 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17722:	68fb      	ldr	r3, [r7, #12]
   17724:	695b      	ldr	r3, [r3, #20]
   17726:	68fa      	ldr	r2, [r7, #12]
   17728:	0010      	movs	r0, r2
   1772a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1772c:	68fb      	ldr	r3, [r7, #12]
   1772e:	681b      	ldr	r3, [r3, #0]
   17730:	2220      	movs	r2, #32
   17732:	739a      	strb	r2, [r3, #14]
	}
}
   17734:	46c0      	nop			; (mov r8, r8)
   17736:	46bd      	mov	sp, r7
   17738:	b004      	add	sp, #16
   1773a:	bd80      	pop	{r7, pc}
   1773c:	200047f4 	.word	0x200047f4

00017740 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17740:	b580      	push	{r7, lr}
   17742:	b084      	sub	sp, #16
   17744:	af00      	add	r7, sp, #0
   17746:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17748:	2300      	movs	r3, #0
   1774a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1774c:	687b      	ldr	r3, [r7, #4]
   1774e:	2b00      	cmp	r3, #0
   17750:	d101      	bne.n	17756 <FreeRTOS_CLIRegisterCommand+0x16>
   17752:	b672      	cpsid	i
   17754:	e7fe      	b.n	17754 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17756:	2008      	movs	r0, #8
   17758:	4b11      	ldr	r3, [pc, #68]	; (177a0 <FreeRTOS_CLIRegisterCommand+0x60>)
   1775a:	4798      	blx	r3
   1775c:	0003      	movs	r3, r0
   1775e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17760:	68bb      	ldr	r3, [r7, #8]
   17762:	2b00      	cmp	r3, #0
   17764:	d101      	bne.n	1776a <FreeRTOS_CLIRegisterCommand+0x2a>
   17766:	b672      	cpsid	i
   17768:	e7fe      	b.n	17768 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1776a:	68bb      	ldr	r3, [r7, #8]
   1776c:	2b00      	cmp	r3, #0
   1776e:	d012      	beq.n	17796 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17770:	4b0c      	ldr	r3, [pc, #48]	; (177a4 <FreeRTOS_CLIRegisterCommand+0x64>)
   17772:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17774:	68bb      	ldr	r3, [r7, #8]
   17776:	687a      	ldr	r2, [r7, #4]
   17778:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1777a:	68bb      	ldr	r3, [r7, #8]
   1777c:	2200      	movs	r2, #0
   1777e:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17780:	4b09      	ldr	r3, [pc, #36]	; (177a8 <FreeRTOS_CLIRegisterCommand+0x68>)
   17782:	681b      	ldr	r3, [r3, #0]
   17784:	68ba      	ldr	r2, [r7, #8]
   17786:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17788:	4b07      	ldr	r3, [pc, #28]	; (177a8 <FreeRTOS_CLIRegisterCommand+0x68>)
   1778a:	68ba      	ldr	r2, [r7, #8]
   1778c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1778e:	4b07      	ldr	r3, [pc, #28]	; (177ac <FreeRTOS_CLIRegisterCommand+0x6c>)
   17790:	4798      	blx	r3

		xReturn = pdPASS;
   17792:	2301      	movs	r3, #1
   17794:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17796:	68fb      	ldr	r3, [r7, #12]
}
   17798:	0018      	movs	r0, r3
   1779a:	46bd      	mov	sp, r7
   1779c:	b004      	add	sp, #16
   1779e:	bd80      	pop	{r7, pc}
   177a0:	00019b51 	.word	0x00019b51
   177a4:	00019a19 	.word	0x00019a19
   177a8:	200000f8 	.word	0x200000f8
   177ac:	00019a3d 	.word	0x00019a3d

000177b0 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   177b0:	b580      	push	{r7, lr}
   177b2:	b088      	sub	sp, #32
   177b4:	af00      	add	r7, sp, #0
   177b6:	60f8      	str	r0, [r7, #12]
   177b8:	60b9      	str	r1, [r7, #8]
   177ba:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   177bc:	2301      	movs	r3, #1
   177be:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   177c0:	4b3d      	ldr	r3, [pc, #244]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   177c2:	681b      	ldr	r3, [r3, #0]
   177c4:	2b00      	cmp	r3, #0
   177c6:	d144      	bne.n	17852 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   177c8:	4b3b      	ldr	r3, [pc, #236]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   177ca:	4a3c      	ldr	r2, [pc, #240]	; (178bc <FreeRTOS_CLIProcessCommand+0x10c>)
   177cc:	601a      	str	r2, [r3, #0]
   177ce:	e03a      	b.n	17846 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   177d0:	4b39      	ldr	r3, [pc, #228]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   177d2:	681b      	ldr	r3, [r3, #0]
   177d4:	681b      	ldr	r3, [r3, #0]
   177d6:	681b      	ldr	r3, [r3, #0]
   177d8:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   177da:	69bb      	ldr	r3, [r7, #24]
   177dc:	0018      	movs	r0, r3
   177de:	4b38      	ldr	r3, [pc, #224]	; (178c0 <FreeRTOS_CLIProcessCommand+0x110>)
   177e0:	4798      	blx	r3
   177e2:	0003      	movs	r3, r0
   177e4:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   177e6:	68fa      	ldr	r2, [r7, #12]
   177e8:	697b      	ldr	r3, [r7, #20]
   177ea:	18d3      	adds	r3, r2, r3
   177ec:	781b      	ldrb	r3, [r3, #0]
   177ee:	2b20      	cmp	r3, #32
   177f0:	d005      	beq.n	177fe <FreeRTOS_CLIProcessCommand+0x4e>
   177f2:	68fa      	ldr	r2, [r7, #12]
   177f4:	697b      	ldr	r3, [r7, #20]
   177f6:	18d3      	adds	r3, r2, r3
   177f8:	781b      	ldrb	r3, [r3, #0]
   177fa:	2b00      	cmp	r3, #0
   177fc:	d11e      	bne.n	1783c <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   177fe:	697a      	ldr	r2, [r7, #20]
   17800:	69b9      	ldr	r1, [r7, #24]
   17802:	68fb      	ldr	r3, [r7, #12]
   17804:	0018      	movs	r0, r3
   17806:	4b2f      	ldr	r3, [pc, #188]	; (178c4 <FreeRTOS_CLIProcessCommand+0x114>)
   17808:	4798      	blx	r3
   1780a:	1e03      	subs	r3, r0, #0
   1780c:	d116      	bne.n	1783c <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1780e:	4b2a      	ldr	r3, [pc, #168]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17810:	681b      	ldr	r3, [r3, #0]
   17812:	681b      	ldr	r3, [r3, #0]
   17814:	7b1b      	ldrb	r3, [r3, #12]
   17816:	b25b      	sxtb	r3, r3
   17818:	2b00      	cmp	r3, #0
   1781a:	db19      	blt.n	17850 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1781c:	68fb      	ldr	r3, [r7, #12]
   1781e:	0018      	movs	r0, r3
   17820:	4b29      	ldr	r3, [pc, #164]	; (178c8 <FreeRTOS_CLIProcessCommand+0x118>)
   17822:	4798      	blx	r3
   17824:	0003      	movs	r3, r0
   17826:	001a      	movs	r2, r3
   17828:	4b23      	ldr	r3, [pc, #140]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1782a:	681b      	ldr	r3, [r3, #0]
   1782c:	681b      	ldr	r3, [r3, #0]
   1782e:	7b1b      	ldrb	r3, [r3, #12]
   17830:	b25b      	sxtb	r3, r3
   17832:	429a      	cmp	r2, r3
   17834:	d00c      	beq.n	17850 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17836:	2300      	movs	r3, #0
   17838:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1783a:	e009      	b.n	17850 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1783c:	4b1e      	ldr	r3, [pc, #120]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1783e:	681b      	ldr	r3, [r3, #0]
   17840:	685a      	ldr	r2, [r3, #4]
   17842:	4b1d      	ldr	r3, [pc, #116]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17844:	601a      	str	r2, [r3, #0]
   17846:	4b1c      	ldr	r3, [pc, #112]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17848:	681b      	ldr	r3, [r3, #0]
   1784a:	2b00      	cmp	r3, #0
   1784c:	d1c0      	bne.n	177d0 <FreeRTOS_CLIProcessCommand+0x20>
   1784e:	e000      	b.n	17852 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17850:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17852:	4b19      	ldr	r3, [pc, #100]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17854:	681b      	ldr	r3, [r3, #0]
   17856:	2b00      	cmp	r3, #0
   17858:	d00c      	beq.n	17874 <FreeRTOS_CLIProcessCommand+0xc4>
   1785a:	69fb      	ldr	r3, [r7, #28]
   1785c:	2b00      	cmp	r3, #0
   1785e:	d109      	bne.n	17874 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17860:	687a      	ldr	r2, [r7, #4]
   17862:	491a      	ldr	r1, [pc, #104]	; (178cc <FreeRTOS_CLIProcessCommand+0x11c>)
   17864:	68bb      	ldr	r3, [r7, #8]
   17866:	0018      	movs	r0, r3
   17868:	4b19      	ldr	r3, [pc, #100]	; (178d0 <FreeRTOS_CLIProcessCommand+0x120>)
   1786a:	4798      	blx	r3
		pxCommand = NULL;
   1786c:	4b12      	ldr	r3, [pc, #72]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1786e:	2200      	movs	r2, #0
   17870:	601a      	str	r2, [r3, #0]
   17872:	e01c      	b.n	178ae <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17874:	4b10      	ldr	r3, [pc, #64]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17876:	681b      	ldr	r3, [r3, #0]
   17878:	2b00      	cmp	r3, #0
   1787a:	d010      	beq.n	1789e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1787c:	4b0e      	ldr	r3, [pc, #56]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   1787e:	681b      	ldr	r3, [r3, #0]
   17880:	681b      	ldr	r3, [r3, #0]
   17882:	689b      	ldr	r3, [r3, #8]
   17884:	68fa      	ldr	r2, [r7, #12]
   17886:	6879      	ldr	r1, [r7, #4]
   17888:	68b8      	ldr	r0, [r7, #8]
   1788a:	4798      	blx	r3
   1788c:	0003      	movs	r3, r0
   1788e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17890:	69fb      	ldr	r3, [r7, #28]
   17892:	2b00      	cmp	r3, #0
   17894:	d10b      	bne.n	178ae <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17896:	4b08      	ldr	r3, [pc, #32]	; (178b8 <FreeRTOS_CLIProcessCommand+0x108>)
   17898:	2200      	movs	r2, #0
   1789a:	601a      	str	r2, [r3, #0]
   1789c:	e007      	b.n	178ae <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1789e:	687a      	ldr	r2, [r7, #4]
   178a0:	490c      	ldr	r1, [pc, #48]	; (178d4 <FreeRTOS_CLIProcessCommand+0x124>)
   178a2:	68bb      	ldr	r3, [r7, #8]
   178a4:	0018      	movs	r0, r3
   178a6:	4b0a      	ldr	r3, [pc, #40]	; (178d0 <FreeRTOS_CLIProcessCommand+0x120>)
   178a8:	4798      	blx	r3
		xReturn = pdFALSE;
   178aa:	2300      	movs	r3, #0
   178ac:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   178ae:	69fb      	ldr	r3, [r7, #28]
}
   178b0:	0018      	movs	r0, r3
   178b2:	46bd      	mov	sp, r7
   178b4:	b008      	add	sp, #32
   178b6:	bd80      	pop	{r7, pc}
   178b8:	20000b50 	.word	0x20000b50
   178bc:	200000f0 	.word	0x200000f0
   178c0:	000346cf 	.word	0x000346cf
   178c4:	000346dd 	.word	0x000346dd
   178c8:	00017939 	.word	0x00017939
   178cc:	00036668 	.word	0x00036668
   178d0:	000346ff 	.word	0x000346ff
   178d4:	000366c0 	.word	0x000366c0

000178d8 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   178d8:	b580      	push	{r7, lr}
   178da:	b086      	sub	sp, #24
   178dc:	af00      	add	r7, sp, #0
   178de:	60f8      	str	r0, [r7, #12]
   178e0:	60b9      	str	r1, [r7, #8]
   178e2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   178e4:	4b11      	ldr	r3, [pc, #68]	; (1792c <prvHelpCommand+0x54>)
   178e6:	681b      	ldr	r3, [r3, #0]
   178e8:	2b00      	cmp	r3, #0
   178ea:	d102      	bne.n	178f2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   178ec:	4b0f      	ldr	r3, [pc, #60]	; (1792c <prvHelpCommand+0x54>)
   178ee:	4a10      	ldr	r2, [pc, #64]	; (17930 <prvHelpCommand+0x58>)
   178f0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   178f2:	4b0e      	ldr	r3, [pc, #56]	; (1792c <prvHelpCommand+0x54>)
   178f4:	681b      	ldr	r3, [r3, #0]
   178f6:	681b      	ldr	r3, [r3, #0]
   178f8:	6859      	ldr	r1, [r3, #4]
   178fa:	68ba      	ldr	r2, [r7, #8]
   178fc:	68fb      	ldr	r3, [r7, #12]
   178fe:	0018      	movs	r0, r3
   17900:	4b0c      	ldr	r3, [pc, #48]	; (17934 <prvHelpCommand+0x5c>)
   17902:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   17904:	4b09      	ldr	r3, [pc, #36]	; (1792c <prvHelpCommand+0x54>)
   17906:	681b      	ldr	r3, [r3, #0]
   17908:	685a      	ldr	r2, [r3, #4]
   1790a:	4b08      	ldr	r3, [pc, #32]	; (1792c <prvHelpCommand+0x54>)
   1790c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1790e:	4b07      	ldr	r3, [pc, #28]	; (1792c <prvHelpCommand+0x54>)
   17910:	681b      	ldr	r3, [r3, #0]
   17912:	2b00      	cmp	r3, #0
   17914:	d102      	bne.n	1791c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   17916:	2300      	movs	r3, #0
   17918:	617b      	str	r3, [r7, #20]
   1791a:	e001      	b.n	17920 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1791c:	2301      	movs	r3, #1
   1791e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17920:	697b      	ldr	r3, [r7, #20]
}
   17922:	0018      	movs	r0, r3
   17924:	46bd      	mov	sp, r7
   17926:	b006      	add	sp, #24
   17928:	bd80      	pop	{r7, pc}
   1792a:	46c0      	nop			; (mov r8, r8)
   1792c:	20000b54 	.word	0x20000b54
   17930:	200000f0 	.word	0x200000f0
   17934:	000346ff 	.word	0x000346ff

00017938 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17938:	b580      	push	{r7, lr}
   1793a:	b084      	sub	sp, #16
   1793c:	af00      	add	r7, sp, #0
   1793e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17940:	230f      	movs	r3, #15
   17942:	18fb      	adds	r3, r7, r3
   17944:	2200      	movs	r2, #0
   17946:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17948:	2300      	movs	r3, #0
   1794a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1794c:	e018      	b.n	17980 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1794e:	687b      	ldr	r3, [r7, #4]
   17950:	781b      	ldrb	r3, [r3, #0]
   17952:	2b20      	cmp	r3, #32
   17954:	d10f      	bne.n	17976 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17956:	68bb      	ldr	r3, [r7, #8]
   17958:	2b01      	cmp	r3, #1
   1795a:	d00e      	beq.n	1797a <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1795c:	230f      	movs	r3, #15
   1795e:	18fb      	adds	r3, r7, r3
   17960:	781b      	ldrb	r3, [r3, #0]
   17962:	b25b      	sxtb	r3, r3
   17964:	b2db      	uxtb	r3, r3
   17966:	3301      	adds	r3, #1
   17968:	b2da      	uxtb	r2, r3
   1796a:	230f      	movs	r3, #15
   1796c:	18fb      	adds	r3, r7, r3
   1796e:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17970:	2301      	movs	r3, #1
   17972:	60bb      	str	r3, [r7, #8]
   17974:	e001      	b.n	1797a <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17976:	2300      	movs	r3, #0
   17978:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1797a:	687b      	ldr	r3, [r7, #4]
   1797c:	3301      	adds	r3, #1
   1797e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   17980:	687b      	ldr	r3, [r7, #4]
   17982:	781b      	ldrb	r3, [r3, #0]
   17984:	2b00      	cmp	r3, #0
   17986:	d1e2      	bne.n	1794e <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17988:	68bb      	ldr	r3, [r7, #8]
   1798a:	2b01      	cmp	r3, #1
   1798c:	d109      	bne.n	179a2 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1798e:	230f      	movs	r3, #15
   17990:	18fb      	adds	r3, r7, r3
   17992:	781b      	ldrb	r3, [r3, #0]
   17994:	b25b      	sxtb	r3, r3
   17996:	b2db      	uxtb	r3, r3
   17998:	3b01      	subs	r3, #1
   1799a:	b2da      	uxtb	r2, r3
   1799c:	230f      	movs	r3, #15
   1799e:	18fb      	adds	r3, r7, r3
   179a0:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   179a2:	230f      	movs	r3, #15
   179a4:	18fb      	adds	r3, r7, r3
   179a6:	781b      	ldrb	r3, [r3, #0]
   179a8:	b25b      	sxtb	r3, r3
}
   179aa:	0018      	movs	r0, r3
   179ac:	46bd      	mov	sp, r7
   179ae:	b004      	add	sp, #16
   179b0:	bd80      	pop	{r7, pc}
	...

000179b4 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   179b4:	b580      	push	{r7, lr}
   179b6:	b082      	sub	sp, #8
   179b8:	af00      	add	r7, sp, #0
   179ba:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   179bc:	687b      	ldr	r3, [r7, #4]
   179be:	0018      	movs	r0, r3
   179c0:	4b03      	ldr	r3, [pc, #12]	; (179d0 <prvTraceGetQueueNumber+0x1c>)
   179c2:	4798      	blx	r3
   179c4:	0003      	movs	r3, r0
}
   179c6:	0018      	movs	r0, r3
   179c8:	46bd      	mov	sp, r7
   179ca:	b002      	add	sp, #8
   179cc:	bd80      	pop	{r7, pc}
   179ce:	46c0      	nop			; (mov r8, r8)
   179d0:	0001b175 	.word	0x0001b175

000179d4 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   179d4:	b580      	push	{r7, lr}
   179d6:	b082      	sub	sp, #8
   179d8:	af00      	add	r7, sp, #0
   179da:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   179dc:	687b      	ldr	r3, [r7, #4]
   179de:	0018      	movs	r0, r3
   179e0:	4b03      	ldr	r3, [pc, #12]	; (179f0 <prvTraceGetQueueType+0x1c>)
   179e2:	4798      	blx	r3
   179e4:	0003      	movs	r3, r0
}
   179e6:	0018      	movs	r0, r3
   179e8:	46bd      	mov	sp, r7
   179ea:	b002      	add	sp, #8
   179ec:	bd80      	pop	{r7, pc}
   179ee:	46c0      	nop			; (mov r8, r8)
   179f0:	0001b1a1 	.word	0x0001b1a1

000179f4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   179f4:	b580      	push	{r7, lr}
   179f6:	b082      	sub	sp, #8
   179f8:	af00      	add	r7, sp, #0
   179fa:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   179fc:	687b      	ldr	r3, [r7, #4]
   179fe:	0018      	movs	r0, r3
   17a00:	4b03      	ldr	r3, [pc, #12]	; (17a10 <prvTraceGetTaskNumberLow16+0x1c>)
   17a02:	4798      	blx	r3
   17a04:	0003      	movs	r3, r0
   17a06:	b29b      	uxth	r3, r3
}
   17a08:	0018      	movs	r0, r3
   17a0a:	46bd      	mov	sp, r7
   17a0c:	b002      	add	sp, #8
   17a0e:	bd80      	pop	{r7, pc}
   17a10:	0001c4d1 	.word	0x0001c4d1

00017a14 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   17a14:	b580      	push	{r7, lr}
   17a16:	b082      	sub	sp, #8
   17a18:	af00      	add	r7, sp, #0
   17a1a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17a1c:	687b      	ldr	r3, [r7, #4]
   17a1e:	0018      	movs	r0, r3
   17a20:	4b04      	ldr	r3, [pc, #16]	; (17a34 <prvTraceGetTaskNumberHigh16+0x20>)
   17a22:	4798      	blx	r3
   17a24:	0003      	movs	r3, r0
   17a26:	0c1b      	lsrs	r3, r3, #16
   17a28:	b29b      	uxth	r3, r3
}
   17a2a:	0018      	movs	r0, r3
   17a2c:	46bd      	mov	sp, r7
   17a2e:	b002      	add	sp, #8
   17a30:	bd80      	pop	{r7, pc}
   17a32:	46c0      	nop			; (mov r8, r8)
   17a34:	0001c4d1 	.word	0x0001c4d1

00017a38 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17a38:	b580      	push	{r7, lr}
   17a3a:	b082      	sub	sp, #8
   17a3c:	af00      	add	r7, sp, #0
   17a3e:	6078      	str	r0, [r7, #4]
   17a40:	000a      	movs	r2, r1
   17a42:	1cbb      	adds	r3, r7, #2
   17a44:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17a46:	687b      	ldr	r3, [r7, #4]
   17a48:	0018      	movs	r0, r3
   17a4a:	4b08      	ldr	r3, [pc, #32]	; (17a6c <prvTraceSetTaskNumberLow16+0x34>)
   17a4c:	4798      	blx	r3
   17a4e:	0003      	movs	r3, r0
   17a50:	0c1b      	lsrs	r3, r3, #16
   17a52:	041a      	lsls	r2, r3, #16
   17a54:	1cbb      	adds	r3, r7, #2
   17a56:	881b      	ldrh	r3, [r3, #0]
   17a58:	431a      	orrs	r2, r3
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	0011      	movs	r1, r2
   17a5e:	0018      	movs	r0, r3
   17a60:	4b03      	ldr	r3, [pc, #12]	; (17a70 <prvTraceSetTaskNumberLow16+0x38>)
   17a62:	4798      	blx	r3
}
   17a64:	46c0      	nop			; (mov r8, r8)
   17a66:	46bd      	mov	sp, r7
   17a68:	b002      	add	sp, #8
   17a6a:	bd80      	pop	{r7, pc}
   17a6c:	0001c4d1 	.word	0x0001c4d1
   17a70:	0001c4f9 	.word	0x0001c4f9

00017a74 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17a74:	b580      	push	{r7, lr}
   17a76:	b082      	sub	sp, #8
   17a78:	af00      	add	r7, sp, #0
   17a7a:	6078      	str	r0, [r7, #4]
   17a7c:	000a      	movs	r2, r1
   17a7e:	1cbb      	adds	r3, r7, #2
   17a80:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   17a82:	687b      	ldr	r3, [r7, #4]
   17a84:	0018      	movs	r0, r3
   17a86:	4b09      	ldr	r3, [pc, #36]	; (17aac <prvTraceSetTaskNumberHigh16+0x38>)
   17a88:	4798      	blx	r3
   17a8a:	0003      	movs	r3, r0
   17a8c:	041b      	lsls	r3, r3, #16
   17a8e:	0c1a      	lsrs	r2, r3, #16
   17a90:	1cbb      	adds	r3, r7, #2
   17a92:	881b      	ldrh	r3, [r3, #0]
   17a94:	041b      	lsls	r3, r3, #16
   17a96:	431a      	orrs	r2, r3
   17a98:	687b      	ldr	r3, [r7, #4]
   17a9a:	0011      	movs	r1, r2
   17a9c:	0018      	movs	r0, r3
   17a9e:	4b04      	ldr	r3, [pc, #16]	; (17ab0 <prvTraceSetTaskNumberHigh16+0x3c>)
   17aa0:	4798      	blx	r3
}
   17aa2:	46c0      	nop			; (mov r8, r8)
   17aa4:	46bd      	mov	sp, r7
   17aa6:	b002      	add	sp, #8
   17aa8:	bd80      	pop	{r7, pc}
   17aaa:	46c0      	nop			; (mov r8, r8)
   17aac:	0001c4d1 	.word	0x0001c4d1
   17ab0:	0001c4f9 	.word	0x0001c4f9

00017ab4 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17ab4:	b580      	push	{r7, lr}
   17ab6:	b082      	sub	sp, #8
   17ab8:	af00      	add	r7, sp, #0
   17aba:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17abc:	687b      	ldr	r3, [r7, #4]
   17abe:	0018      	movs	r0, r3
   17ac0:	4b03      	ldr	r3, [pc, #12]	; (17ad0 <prvTraceGetQueueNumberLow16+0x1c>)
   17ac2:	4798      	blx	r3
   17ac4:	0003      	movs	r3, r0
   17ac6:	b29b      	uxth	r3, r3
}
   17ac8:	0018      	movs	r0, r3
   17aca:	46bd      	mov	sp, r7
   17acc:	b002      	add	sp, #8
   17ace:	bd80      	pop	{r7, pc}
   17ad0:	000179b5 	.word	0x000179b5

00017ad4 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   17ad4:	b580      	push	{r7, lr}
   17ad6:	b082      	sub	sp, #8
   17ad8:	af00      	add	r7, sp, #0
   17ada:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17adc:	687b      	ldr	r3, [r7, #4]
   17ade:	0018      	movs	r0, r3
   17ae0:	4b04      	ldr	r3, [pc, #16]	; (17af4 <prvTraceGetQueueNumberHigh16+0x20>)
   17ae2:	4798      	blx	r3
   17ae4:	0003      	movs	r3, r0
   17ae6:	0c1b      	lsrs	r3, r3, #16
   17ae8:	b29b      	uxth	r3, r3
}
   17aea:	0018      	movs	r0, r3
   17aec:	46bd      	mov	sp, r7
   17aee:	b002      	add	sp, #8
   17af0:	bd80      	pop	{r7, pc}
   17af2:	46c0      	nop			; (mov r8, r8)
   17af4:	000179b5 	.word	0x000179b5

00017af8 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17af8:	b580      	push	{r7, lr}
   17afa:	b082      	sub	sp, #8
   17afc:	af00      	add	r7, sp, #0
   17afe:	6078      	str	r0, [r7, #4]
   17b00:	000a      	movs	r2, r1
   17b02:	1cbb      	adds	r3, r7, #2
   17b04:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   17b06:	687b      	ldr	r3, [r7, #4]
   17b08:	0018      	movs	r0, r3
   17b0a:	4b08      	ldr	r3, [pc, #32]	; (17b2c <prvTraceSetQueueNumberLow16+0x34>)
   17b0c:	4798      	blx	r3
   17b0e:	0003      	movs	r3, r0
   17b10:	0c1b      	lsrs	r3, r3, #16
   17b12:	041a      	lsls	r2, r3, #16
   17b14:	1cbb      	adds	r3, r7, #2
   17b16:	881b      	ldrh	r3, [r3, #0]
   17b18:	431a      	orrs	r2, r3
   17b1a:	687b      	ldr	r3, [r7, #4]
   17b1c:	0011      	movs	r1, r2
   17b1e:	0018      	movs	r0, r3
   17b20:	4b03      	ldr	r3, [pc, #12]	; (17b30 <prvTraceSetQueueNumberLow16+0x38>)
   17b22:	4798      	blx	r3
}
   17b24:	46c0      	nop			; (mov r8, r8)
   17b26:	46bd      	mov	sp, r7
   17b28:	b002      	add	sp, #8
   17b2a:	bd80      	pop	{r7, pc}
   17b2c:	000179b5 	.word	0x000179b5
   17b30:	0001b189 	.word	0x0001b189

00017b34 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   17b34:	b580      	push	{r7, lr}
   17b36:	b082      	sub	sp, #8
   17b38:	af00      	add	r7, sp, #0
   17b3a:	6078      	str	r0, [r7, #4]
   17b3c:	000a      	movs	r2, r1
   17b3e:	1cbb      	adds	r3, r7, #2
   17b40:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   17b42:	687b      	ldr	r3, [r7, #4]
   17b44:	0018      	movs	r0, r3
   17b46:	4b09      	ldr	r3, [pc, #36]	; (17b6c <prvTraceSetQueueNumberHigh16+0x38>)
   17b48:	4798      	blx	r3
   17b4a:	0003      	movs	r3, r0
   17b4c:	041b      	lsls	r3, r3, #16
   17b4e:	0c1a      	lsrs	r2, r3, #16
   17b50:	1cbb      	adds	r3, r7, #2
   17b52:	881b      	ldrh	r3, [r3, #0]
   17b54:	041b      	lsls	r3, r3, #16
   17b56:	431a      	orrs	r2, r3
   17b58:	687b      	ldr	r3, [r7, #4]
   17b5a:	0011      	movs	r1, r2
   17b5c:	0018      	movs	r0, r3
   17b5e:	4b04      	ldr	r3, [pc, #16]	; (17b70 <prvTraceSetQueueNumberHigh16+0x3c>)
   17b60:	4798      	blx	r3
}
   17b62:	46c0      	nop			; (mov r8, r8)
   17b64:	46bd      	mov	sp, r7
   17b66:	b002      	add	sp, #8
   17b68:	bd80      	pop	{r7, pc}
   17b6a:	46c0      	nop			; (mov r8, r8)
   17b6c:	000179b5 	.word	0x000179b5
   17b70:	0001b189 	.word	0x0001b189

00017b74 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   17b74:	b580      	push	{r7, lr}
   17b76:	b084      	sub	sp, #16
   17b78:	af00      	add	r7, sp, #0
   17b7a:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   17b7c:	2300      	movs	r3, #0
   17b7e:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17b80:	2300      	movs	r3, #0
   17b82:	60bb      	str	r3, [r7, #8]
   17b84:	e018      	b.n	17bb8 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   17b86:	4b14      	ldr	r3, [pc, #80]	; (17bd8 <prvAddTaskToStackMonitor+0x64>)
   17b88:	68ba      	ldr	r2, [r7, #8]
   17b8a:	00d2      	lsls	r2, r2, #3
   17b8c:	58d3      	ldr	r3, [r2, r3]
   17b8e:	2b00      	cmp	r3, #0
   17b90:	d10f      	bne.n	17bb2 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   17b92:	4b11      	ldr	r3, [pc, #68]	; (17bd8 <prvAddTaskToStackMonitor+0x64>)
   17b94:	68ba      	ldr	r2, [r7, #8]
   17b96:	00d2      	lsls	r2, r2, #3
   17b98:	6879      	ldr	r1, [r7, #4]
   17b9a:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   17b9c:	4a0e      	ldr	r2, [pc, #56]	; (17bd8 <prvAddTaskToStackMonitor+0x64>)
   17b9e:	68bb      	ldr	r3, [r7, #8]
   17ba0:	00db      	lsls	r3, r3, #3
   17ba2:	18d3      	adds	r3, r2, r3
   17ba4:	3304      	adds	r3, #4
   17ba6:	2201      	movs	r2, #1
   17ba8:	4252      	negs	r2, r2
   17baa:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   17bac:	2301      	movs	r3, #1
   17bae:	60fb      	str	r3, [r7, #12]
			break;
   17bb0:	e005      	b.n	17bbe <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17bb2:	68bb      	ldr	r3, [r7, #8]
   17bb4:	3301      	adds	r3, #1
   17bb6:	60bb      	str	r3, [r7, #8]
   17bb8:	68bb      	ldr	r3, [r7, #8]
   17bba:	2b09      	cmp	r3, #9
   17bbc:	dde3      	ble.n	17b86 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   17bbe:	68fb      	ldr	r3, [r7, #12]
   17bc0:	2b00      	cmp	r3, #0
   17bc2:	d104      	bne.n	17bce <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   17bc4:	4b05      	ldr	r3, [pc, #20]	; (17bdc <prvAddTaskToStackMonitor+0x68>)
   17bc6:	681b      	ldr	r3, [r3, #0]
   17bc8:	1c5a      	adds	r2, r3, #1
   17bca:	4b04      	ldr	r3, [pc, #16]	; (17bdc <prvAddTaskToStackMonitor+0x68>)
   17bcc:	601a      	str	r2, [r3, #0]
	}
}
   17bce:	46c0      	nop			; (mov r8, r8)
   17bd0:	46bd      	mov	sp, r7
   17bd2:	b004      	add	sp, #16
   17bd4:	bd80      	pop	{r7, pc}
   17bd6:	46c0      	nop			; (mov r8, r8)
   17bd8:	20000b5c 	.word	0x20000b5c
   17bdc:	20000bac 	.word	0x20000bac

00017be0 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   17be0:	b590      	push	{r4, r7, lr}
   17be2:	b085      	sub	sp, #20
   17be4:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   17be6:	2300      	movs	r3, #0
   17be8:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   17bea:	4b2b      	ldr	r3, [pc, #172]	; (17c98 <prvReportStackUsage+0xb8>)
   17bec:	681b      	ldr	r3, [r3, #0]
   17bee:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   17bf0:	4b29      	ldr	r3, [pc, #164]	; (17c98 <prvReportStackUsage+0xb8>)
   17bf2:	681a      	ldr	r2, [r3, #0]
   17bf4:	4b29      	ldr	r3, [pc, #164]	; (17c9c <prvReportStackUsage+0xbc>)
   17bf6:	00d2      	lsls	r2, r2, #3
   17bf8:	58d3      	ldr	r3, [r2, r3]
   17bfa:	2b00      	cmp	r3, #0
   17bfc:	d035      	beq.n	17c6a <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   17bfe:	4b26      	ldr	r3, [pc, #152]	; (17c98 <prvReportStackUsage+0xb8>)
   17c00:	681a      	ldr	r2, [r3, #0]
   17c02:	4b26      	ldr	r3, [pc, #152]	; (17c9c <prvReportStackUsage+0xbc>)
   17c04:	00d2      	lsls	r2, r2, #3
   17c06:	58d3      	ldr	r3, [r2, r3]
   17c08:	0018      	movs	r0, r3
   17c0a:	4b25      	ldr	r3, [pc, #148]	; (17ca0 <prvReportStackUsage+0xc0>)
   17c0c:	4798      	blx	r3
   17c0e:	0003      	movs	r3, r0
   17c10:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   17c12:	4b21      	ldr	r3, [pc, #132]	; (17c98 <prvReportStackUsage+0xb8>)
   17c14:	681b      	ldr	r3, [r3, #0]
   17c16:	4a21      	ldr	r2, [pc, #132]	; (17c9c <prvReportStackUsage+0xbc>)
   17c18:	00db      	lsls	r3, r3, #3
   17c1a:	18d3      	adds	r3, r2, r3
   17c1c:	3304      	adds	r3, #4
   17c1e:	681a      	ldr	r2, [r3, #0]
   17c20:	687b      	ldr	r3, [r7, #4]
   17c22:	429a      	cmp	r2, r3
   17c24:	d907      	bls.n	17c36 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   17c26:	4b1c      	ldr	r3, [pc, #112]	; (17c98 <prvReportStackUsage+0xb8>)
   17c28:	681b      	ldr	r3, [r3, #0]
   17c2a:	4a1c      	ldr	r2, [pc, #112]	; (17c9c <prvReportStackUsage+0xbc>)
   17c2c:	00db      	lsls	r3, r3, #3
   17c2e:	18d3      	adds	r3, r2, r3
   17c30:	3304      	adds	r3, #4
   17c32:	687a      	ldr	r2, [r7, #4]
   17c34:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   17c36:	4b18      	ldr	r3, [pc, #96]	; (17c98 <prvReportStackUsage+0xb8>)
   17c38:	681a      	ldr	r2, [r3, #0]
   17c3a:	4b18      	ldr	r3, [pc, #96]	; (17c9c <prvReportStackUsage+0xbc>)
   17c3c:	00d2      	lsls	r2, r2, #3
   17c3e:	58d3      	ldr	r3, [r2, r3]
   17c40:	0018      	movs	r0, r3
   17c42:	4b18      	ldr	r3, [pc, #96]	; (17ca4 <prvReportStackUsage+0xc4>)
   17c44:	4798      	blx	r3
   17c46:	0003      	movs	r3, r0
   17c48:	b2db      	uxtb	r3, r3
   17c4a:	0019      	movs	r1, r3
   17c4c:	4b12      	ldr	r3, [pc, #72]	; (17c98 <prvReportStackUsage+0xb8>)
   17c4e:	681b      	ldr	r3, [r3, #0]
   17c50:	4a12      	ldr	r2, [pc, #72]	; (17c9c <prvReportStackUsage+0xbc>)
   17c52:	00db      	lsls	r3, r3, #3
   17c54:	18d3      	adds	r3, r2, r3
   17c56:	3304      	adds	r3, #4
   17c58:	681b      	ldr	r3, [r3, #0]
   17c5a:	000a      	movs	r2, r1
   17c5c:	2103      	movs	r1, #3
   17c5e:	20ea      	movs	r0, #234	; 0xea
   17c60:	4c11      	ldr	r4, [pc, #68]	; (17ca8 <prvReportStackUsage+0xc8>)
   17c62:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   17c64:	68fb      	ldr	r3, [r7, #12]
   17c66:	3301      	adds	r3, #1
   17c68:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   17c6a:	4b0b      	ldr	r3, [pc, #44]	; (17c98 <prvReportStackUsage+0xb8>)
   17c6c:	681b      	ldr	r3, [r3, #0]
   17c6e:	1c5a      	adds	r2, r3, #1
   17c70:	4b0e      	ldr	r3, [pc, #56]	; (17cac <prvReportStackUsage+0xcc>)
   17c72:	210a      	movs	r1, #10
   17c74:	0010      	movs	r0, r2
   17c76:	4798      	blx	r3
   17c78:	000b      	movs	r3, r1
   17c7a:	001a      	movs	r2, r3
   17c7c:	4b06      	ldr	r3, [pc, #24]	; (17c98 <prvReportStackUsage+0xb8>)
   17c7e:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   17c80:	68fb      	ldr	r3, [r7, #12]
   17c82:	2b00      	cmp	r3, #0
   17c84:	dc04      	bgt.n	17c90 <prvReportStackUsage+0xb0>
   17c86:	4b04      	ldr	r3, [pc, #16]	; (17c98 <prvReportStackUsage+0xb8>)
   17c88:	681a      	ldr	r2, [r3, #0]
   17c8a:	68bb      	ldr	r3, [r7, #8]
   17c8c:	429a      	cmp	r2, r3
   17c8e:	d1af      	bne.n	17bf0 <prvReportStackUsage+0x10>
}
   17c90:	46c0      	nop			; (mov r8, r8)
   17c92:	46bd      	mov	sp, r7
   17c94:	b005      	add	sp, #20
   17c96:	bd90      	pop	{r4, r7, pc}
   17c98:	20000bb0 	.word	0x20000bb0
   17c9c:	20000b5c 	.word	0x20000b5c
   17ca0:	0001c671 	.word	0x0001c671
   17ca4:	000179f5 	.word	0x000179f5
   17ca8:	0001853d 	.word	0x0001853d
   17cac:	00032525 	.word	0x00032525

00017cb0 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   17cb0:	b580      	push	{r7, lr}
   17cb2:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   17cb4:	4b02      	ldr	r3, [pc, #8]	; (17cc0 <prvTraceGetCurrentTaskHandle+0x10>)
   17cb6:	4798      	blx	r3
   17cb8:	0003      	movs	r3, r0
}
   17cba:	0018      	movs	r0, r3
   17cbc:	46bd      	mov	sp, r7
   17cbe:	bd80      	pop	{r7, pc}
   17cc0:	0001c71d 	.word	0x0001c71d

00017cc4 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   17cc4:	b590      	push	{r4, r7, lr}
   17cc6:	b085      	sub	sp, #20
   17cc8:	af02      	add	r7, sp, #8
   17cca:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   17ccc:	4b14      	ldr	r3, [pc, #80]	; (17d20 <vTraceEnable+0x5c>)
   17cce:	4798      	blx	r3

	if (startOption == TRC_START)
   17cd0:	687b      	ldr	r3, [r7, #4]
   17cd2:	2b01      	cmp	r3, #1
   17cd4:	d102      	bne.n	17cdc <vTraceEnable+0x18>
	{
		vTraceStart();
   17cd6:	4b13      	ldr	r3, [pc, #76]	; (17d24 <vTraceEnable+0x60>)
   17cd8:	4798      	blx	r3
   17cda:	e00e      	b.n	17cfa <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   17cdc:	687b      	ldr	r3, [r7, #4]
   17cde:	2b02      	cmp	r3, #2
   17ce0:	d104      	bne.n	17cec <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   17ce2:	4b11      	ldr	r3, [pc, #68]	; (17d28 <vTraceEnable+0x64>)
   17ce4:	0018      	movs	r0, r3
   17ce6:	4b11      	ldr	r3, [pc, #68]	; (17d2c <vTraceEnable+0x68>)
   17ce8:	4798      	blx	r3
   17cea:	e006      	b.n	17cfa <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   17cec:	687b      	ldr	r3, [r7, #4]
   17cee:	2b00      	cmp	r3, #0
   17cf0:	d003      	beq.n	17cfa <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   17cf2:	4b0f      	ldr	r3, [pc, #60]	; (17d30 <vTraceEnable+0x6c>)
   17cf4:	0018      	movs	r0, r3
   17cf6:	4b0d      	ldr	r3, [pc, #52]	; (17d2c <vTraceEnable+0x68>)
   17cf8:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   17cfa:	4b0e      	ldr	r3, [pc, #56]	; (17d34 <vTraceEnable+0x70>)
   17cfc:	681b      	ldr	r3, [r3, #0]
   17cfe:	2b00      	cmp	r3, #0
   17d00:	d10a      	bne.n	17d18 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   17d02:	2396      	movs	r3, #150	; 0x96
   17d04:	005a      	lsls	r2, r3, #1
   17d06:	490c      	ldr	r1, [pc, #48]	; (17d38 <vTraceEnable+0x74>)
   17d08:	480c      	ldr	r0, [pc, #48]	; (17d3c <vTraceEnable+0x78>)
   17d0a:	4b0a      	ldr	r3, [pc, #40]	; (17d34 <vTraceEnable+0x70>)
   17d0c:	9301      	str	r3, [sp, #4]
   17d0e:	2304      	movs	r3, #4
   17d10:	9300      	str	r3, [sp, #0]
   17d12:	2300      	movs	r3, #0
   17d14:	4c0a      	ldr	r4, [pc, #40]	; (17d40 <vTraceEnable+0x7c>)
   17d16:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   17d18:	46c0      	nop			; (mov r8, r8)
   17d1a:	46bd      	mov	sp, r7
   17d1c:	b003      	add	sp, #12
   17d1e:	bd90      	pop	{r4, r7, pc}
   17d20:	00018c09 	.word	0x00018c09
   17d24:	00018161 	.word	0x00018161
   17d28:	00036720 	.word	0x00036720
   17d2c:	000192b1 	.word	0x000192b1
   17d30:	00036760 	.word	0x00036760
   17d34:	20000b58 	.word	0x20000b58
   17d38:	00036794 	.word	0x00036794
   17d3c:	00017d45 	.word	0x00017d45
   17d40:	0001b675 	.word	0x0001b675

00017d44 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   17d44:	b580      	push	{r7, lr}
   17d46:	b082      	sub	sp, #8
   17d48:	af00      	add	r7, sp, #0
   17d4a:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   17d4c:	4b04      	ldr	r3, [pc, #16]	; (17d60 <TzCtrl+0x1c>)
   17d4e:	4798      	blx	r3
   17d50:	1e03      	subs	r3, r0, #0
   17d52:	d001      	beq.n	17d58 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   17d54:	4b03      	ldr	r3, [pc, #12]	; (17d64 <TzCtrl+0x20>)
   17d56:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   17d58:	2004      	movs	r0, #4
   17d5a:	4b03      	ldr	r3, [pc, #12]	; (17d68 <TzCtrl+0x24>)
   17d5c:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   17d5e:	e7f5      	b.n	17d4c <TzCtrl+0x8>
   17d60:	000181a5 	.word	0x000181a5
   17d64:	00017be1 	.word	0x00017be1
   17d68:	0001ba11 	.word	0x0001ba11

00017d6c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   17d6c:	b580      	push	{r7, lr}
   17d6e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   17d70:	4b60      	ldr	r3, [pc, #384]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17d72:	681b      	ldr	r3, [r3, #0]
   17d74:	2209      	movs	r2, #9
   17d76:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   17d78:	4b5e      	ldr	r3, [pc, #376]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17d7a:	681b      	ldr	r3, [r3, #0]
   17d7c:	2264      	movs	r2, #100	; 0x64
   17d7e:	210a      	movs	r1, #10
   17d80:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   17d82:	4b5c      	ldr	r3, [pc, #368]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17d84:	681b      	ldr	r3, [r3, #0]
   17d86:	2265      	movs	r2, #101	; 0x65
   17d88:	210a      	movs	r1, #10
   17d8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   17d8c:	4b59      	ldr	r3, [pc, #356]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17d8e:	681b      	ldr	r3, [r3, #0]
   17d90:	2266      	movs	r2, #102	; 0x66
   17d92:	210a      	movs	r1, #10
   17d94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   17d96:	4b57      	ldr	r3, [pc, #348]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17d98:	681b      	ldr	r3, [r3, #0]
   17d9a:	2267      	movs	r2, #103	; 0x67
   17d9c:	210f      	movs	r1, #15
   17d9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   17da0:	4b54      	ldr	r3, [pc, #336]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17da2:	681b      	ldr	r3, [r3, #0]
   17da4:	2268      	movs	r2, #104	; 0x68
   17da6:	2105      	movs	r1, #5
   17da8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   17daa:	4b52      	ldr	r3, [pc, #328]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17dac:	681b      	ldr	r3, [r3, #0]
   17dae:	2269      	movs	r2, #105	; 0x69
   17db0:	2105      	movs	r1, #5
   17db2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   17db4:	4b4f      	ldr	r3, [pc, #316]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17db6:	681b      	ldr	r3, [r3, #0]
   17db8:	226a      	movs	r2, #106	; 0x6a
   17dba:	2105      	movs	r1, #5
   17dbc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   17dbe:	4b4d      	ldr	r3, [pc, #308]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17dc0:	681b      	ldr	r3, [r3, #0]
   17dc2:	226b      	movs	r2, #107	; 0x6b
   17dc4:	2105      	movs	r1, #5
   17dc6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   17dc8:	4b4a      	ldr	r3, [pc, #296]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17dca:	681b      	ldr	r3, [r3, #0]
   17dcc:	226c      	movs	r2, #108	; 0x6c
   17dce:	2105      	movs	r1, #5
   17dd0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   17dd2:	4b48      	ldr	r3, [pc, #288]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17dd4:	681b      	ldr	r3, [r3, #0]
   17dd6:	2270      	movs	r2, #112	; 0x70
   17dd8:	210f      	movs	r1, #15
   17dda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   17ddc:	4b45      	ldr	r3, [pc, #276]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17dde:	681b      	ldr	r3, [r3, #0]
   17de0:	2271      	movs	r2, #113	; 0x71
   17de2:	210f      	movs	r1, #15
   17de4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   17de6:	4b43      	ldr	r3, [pc, #268]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17de8:	681b      	ldr	r3, [r3, #0]
   17dea:	2272      	movs	r2, #114	; 0x72
   17dec:	210f      	movs	r1, #15
   17dee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   17df0:	4b40      	ldr	r3, [pc, #256]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17df2:	681b      	ldr	r3, [r3, #0]
   17df4:	2273      	movs	r2, #115	; 0x73
   17df6:	210f      	movs	r1, #15
   17df8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   17dfa:	4b3e      	ldr	r3, [pc, #248]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17dfc:	681b      	ldr	r3, [r3, #0]
   17dfe:	2274      	movs	r2, #116	; 0x74
   17e00:	210f      	movs	r1, #15
   17e02:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   17e04:	4b3b      	ldr	r3, [pc, #236]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e06:	681b      	ldr	r3, [r3, #0]
   17e08:	2275      	movs	r2, #117	; 0x75
   17e0a:	210f      	movs	r1, #15
   17e0c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   17e0e:	4b39      	ldr	r3, [pc, #228]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e10:	681b      	ldr	r3, [r3, #0]
   17e12:	2276      	movs	r2, #118	; 0x76
   17e14:	210f      	movs	r1, #15
   17e16:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   17e18:	4b36      	ldr	r3, [pc, #216]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e1a:	681b      	ldr	r3, [r3, #0]
   17e1c:	2277      	movs	r2, #119	; 0x77
   17e1e:	210f      	movs	r1, #15
   17e20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   17e22:	4b34      	ldr	r3, [pc, #208]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e24:	681b      	ldr	r3, [r3, #0]
   17e26:	2278      	movs	r2, #120	; 0x78
   17e28:	210f      	movs	r1, #15
   17e2a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   17e2c:	4b31      	ldr	r3, [pc, #196]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e2e:	681b      	ldr	r3, [r3, #0]
   17e30:	227c      	movs	r2, #124	; 0x7c
   17e32:	2110      	movs	r1, #16
   17e34:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   17e36:	4b2f      	ldr	r3, [pc, #188]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e38:	681b      	ldr	r3, [r3, #0]
   17e3a:	227d      	movs	r2, #125	; 0x7d
   17e3c:	2110      	movs	r1, #16
   17e3e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   17e40:	4b2c      	ldr	r3, [pc, #176]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e42:	681b      	ldr	r3, [r3, #0]
   17e44:	227e      	movs	r2, #126	; 0x7e
   17e46:	2110      	movs	r1, #16
   17e48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   17e4a:	4b2a      	ldr	r3, [pc, #168]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e4c:	681b      	ldr	r3, [r3, #0]
   17e4e:	227f      	movs	r2, #127	; 0x7f
   17e50:	2113      	movs	r1, #19
   17e52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   17e54:	4b27      	ldr	r3, [pc, #156]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e56:	681b      	ldr	r3, [r3, #0]
   17e58:	2280      	movs	r2, #128	; 0x80
   17e5a:	2111      	movs	r1, #17
   17e5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   17e5e:	4b25      	ldr	r3, [pc, #148]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e60:	681b      	ldr	r3, [r3, #0]
   17e62:	2281      	movs	r2, #129	; 0x81
   17e64:	2110      	movs	r1, #16
   17e66:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   17e68:	4b22      	ldr	r3, [pc, #136]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e6a:	681b      	ldr	r3, [r3, #0]
   17e6c:	2282      	movs	r2, #130	; 0x82
   17e6e:	2113      	movs	r1, #19
   17e70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   17e72:	4b20      	ldr	r3, [pc, #128]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e74:	681b      	ldr	r3, [r3, #0]
   17e76:	2283      	movs	r2, #131	; 0x83
   17e78:	2113      	movs	r1, #19
   17e7a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   17e7c:	4b1d      	ldr	r3, [pc, #116]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e7e:	681b      	ldr	r3, [r3, #0]
   17e80:	2284      	movs	r2, #132	; 0x84
   17e82:	2113      	movs	r1, #19
   17e84:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   17e86:	4b1b      	ldr	r3, [pc, #108]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e88:	681b      	ldr	r3, [r3, #0]
   17e8a:	2288      	movs	r2, #136	; 0x88
   17e8c:	2100      	movs	r1, #0
   17e8e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   17e90:	4b18      	ldr	r3, [pc, #96]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e92:	681b      	ldr	r3, [r3, #0]
   17e94:	228a      	movs	r2, #138	; 0x8a
   17e96:	21a0      	movs	r1, #160	; 0xa0
   17e98:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   17e9a:	4b16      	ldr	r3, [pc, #88]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17e9c:	681b      	ldr	r3, [r3, #0]
   17e9e:	228c      	movs	r2, #140	; 0x8c
   17ea0:	21a0      	movs	r1, #160	; 0xa0
   17ea2:	0049      	lsls	r1, r1, #1
   17ea4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   17ea6:	4b13      	ldr	r3, [pc, #76]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17ea8:	681b      	ldr	r3, [r3, #0]
   17eaa:	228e      	movs	r2, #142	; 0x8e
   17eac:	21f0      	movs	r1, #240	; 0xf0
   17eae:	0049      	lsls	r1, r1, #1
   17eb0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   17eb2:	4b10      	ldr	r3, [pc, #64]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17eb4:	681b      	ldr	r3, [r3, #0]
   17eb6:	2290      	movs	r2, #144	; 0x90
   17eb8:	490f      	ldr	r1, [pc, #60]	; (17ef8 <vTraceInitObjectPropertyTable+0x18c>)
   17eba:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   17ebc:	4b0d      	ldr	r3, [pc, #52]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17ebe:	681b      	ldr	r3, [r3, #0]
   17ec0:	2292      	movs	r2, #146	; 0x92
   17ec2:	490e      	ldr	r1, [pc, #56]	; (17efc <vTraceInitObjectPropertyTable+0x190>)
   17ec4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   17ec6:	4b0b      	ldr	r3, [pc, #44]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17ec8:	681b      	ldr	r3, [r3, #0]
   17eca:	2294      	movs	r2, #148	; 0x94
   17ecc:	490c      	ldr	r1, [pc, #48]	; (17f00 <vTraceInitObjectPropertyTable+0x194>)
   17ece:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   17ed0:	4b08      	ldr	r3, [pc, #32]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17ed2:	681b      	ldr	r3, [r3, #0]
   17ed4:	2296      	movs	r2, #150	; 0x96
   17ed6:	490b      	ldr	r1, [pc, #44]	; (17f04 <vTraceInitObjectPropertyTable+0x198>)
   17ed8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   17eda:	4b06      	ldr	r3, [pc, #24]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17edc:	681b      	ldr	r3, [r3, #0]
   17ede:	2298      	movs	r2, #152	; 0x98
   17ee0:	218c      	movs	r1, #140	; 0x8c
   17ee2:	00c9      	lsls	r1, r1, #3
   17ee4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   17ee6:	4b03      	ldr	r3, [pc, #12]	; (17ef4 <vTraceInitObjectPropertyTable+0x188>)
   17ee8:	681b      	ldr	r3, [r3, #0]
   17eea:	4a07      	ldr	r2, [pc, #28]	; (17f08 <vTraceInitObjectPropertyTable+0x19c>)
   17eec:	661a      	str	r2, [r3, #96]	; 0x60
}
   17eee:	46c0      	nop			; (mov r8, r8)
   17ef0:	46bd      	mov	sp, r7
   17ef2:	bd80      	pop	{r7, pc}
   17ef4:	20000c70 	.word	0x20000c70
   17ef8:	000002fd 	.word	0x000002fd
   17efc:	00000352 	.word	0x00000352
   17f00:	000003a2 	.word	0x000003a2
   17f04:	00000401 	.word	0x00000401
   17f08:	000004bf 	.word	0x000004bf

00017f0c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   17f0c:	b580      	push	{r7, lr}
   17f0e:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   17f10:	4b2e      	ldr	r3, [pc, #184]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f12:	2200      	movs	r2, #0
   17f14:	825a      	strh	r2, [r3, #18]
   17f16:	4b2d      	ldr	r3, [pc, #180]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f18:	8a5a      	ldrh	r2, [r3, #18]
   17f1a:	4b2c      	ldr	r3, [pc, #176]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f1c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   17f1e:	4b2b      	ldr	r3, [pc, #172]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f20:	220a      	movs	r2, #10
   17f22:	829a      	strh	r2, [r3, #20]
   17f24:	4b29      	ldr	r3, [pc, #164]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f26:	8a9a      	ldrh	r2, [r3, #20]
   17f28:	4b28      	ldr	r3, [pc, #160]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f2a:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   17f2c:	4b27      	ldr	r3, [pc, #156]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f2e:	2214      	movs	r2, #20
   17f30:	82da      	strh	r2, [r3, #22]
   17f32:	4b26      	ldr	r3, [pc, #152]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f34:	8ada      	ldrh	r2, [r3, #22]
   17f36:	4b25      	ldr	r3, [pc, #148]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f38:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   17f3a:	4b24      	ldr	r3, [pc, #144]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f3c:	221e      	movs	r2, #30
   17f3e:	831a      	strh	r2, [r3, #24]
   17f40:	4b22      	ldr	r3, [pc, #136]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f42:	8b1a      	ldrh	r2, [r3, #24]
   17f44:	4b21      	ldr	r3, [pc, #132]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f46:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   17f48:	4b20      	ldr	r3, [pc, #128]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f4a:	222d      	movs	r2, #45	; 0x2d
   17f4c:	835a      	strh	r2, [r3, #26]
   17f4e:	4b1f      	ldr	r3, [pc, #124]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f50:	8b5a      	ldrh	r2, [r3, #26]
   17f52:	4b1e      	ldr	r3, [pc, #120]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f54:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   17f56:	4b1d      	ldr	r3, [pc, #116]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f58:	2232      	movs	r2, #50	; 0x32
   17f5a:	839a      	strh	r2, [r3, #28]
   17f5c:	4b1b      	ldr	r3, [pc, #108]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f5e:	8b9a      	ldrh	r2, [r3, #28]
   17f60:	4b1a      	ldr	r3, [pc, #104]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f62:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   17f64:	4b19      	ldr	r3, [pc, #100]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f66:	2237      	movs	r2, #55	; 0x37
   17f68:	83da      	strh	r2, [r3, #30]
   17f6a:	4b18      	ldr	r3, [pc, #96]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f6c:	8bda      	ldrh	r2, [r3, #30]
   17f6e:	4b17      	ldr	r3, [pc, #92]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f70:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   17f72:	4b16      	ldr	r3, [pc, #88]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f74:	223c      	movs	r2, #60	; 0x3c
   17f76:	841a      	strh	r2, [r3, #32]
   17f78:	4b14      	ldr	r3, [pc, #80]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f7a:	8c1a      	ldrh	r2, [r3, #32]
   17f7c:	4b13      	ldr	r3, [pc, #76]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f7e:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   17f80:	4b12      	ldr	r3, [pc, #72]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f82:	2241      	movs	r2, #65	; 0x41
   17f84:	845a      	strh	r2, [r3, #34]	; 0x22
   17f86:	4b11      	ldr	r3, [pc, #68]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f88:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   17f8a:	4b10      	ldr	r3, [pc, #64]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f8c:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   17f8e:	4b0f      	ldr	r3, [pc, #60]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f90:	2209      	movs	r2, #9
   17f92:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   17f94:	4b0d      	ldr	r3, [pc, #52]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f96:	2213      	movs	r2, #19
   17f98:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   17f9a:	4b0c      	ldr	r3, [pc, #48]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17f9c:	221d      	movs	r2, #29
   17f9e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   17fa0:	4b0a      	ldr	r3, [pc, #40]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17fa2:	222c      	movs	r2, #44	; 0x2c
   17fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   17fa6:	4b09      	ldr	r3, [pc, #36]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17fa8:	2231      	movs	r2, #49	; 0x31
   17faa:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   17fac:	4b07      	ldr	r3, [pc, #28]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17fae:	2236      	movs	r2, #54	; 0x36
   17fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   17fb2:	4b06      	ldr	r3, [pc, #24]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17fb4:	223b      	movs	r2, #59	; 0x3b
   17fb6:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   17fb8:	4b04      	ldr	r3, [pc, #16]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17fba:	2240      	movs	r2, #64	; 0x40
   17fbc:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   17fbe:	4b03      	ldr	r3, [pc, #12]	; (17fcc <vTraceInitObjectHandleStack+0xc0>)
   17fc0:	2245      	movs	r2, #69	; 0x45
   17fc2:	869a      	strh	r2, [r3, #52]	; 0x34
}
   17fc4:	46c0      	nop			; (mov r8, r8)
   17fc6:	46bd      	mov	sp, r7
   17fc8:	bd80      	pop	{r7, pc}
   17fca:	46c0      	nop			; (mov r8, r8)
   17fcc:	20000be0 	.word	0x20000be0

00017fd0 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   17fd0:	b580      	push	{r7, lr}
   17fd2:	b082      	sub	sp, #8
   17fd4:	af00      	add	r7, sp, #0
   17fd6:	0002      	movs	r2, r0
   17fd8:	1dfb      	adds	r3, r7, #7
   17fda:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   17fdc:	1dfb      	adds	r3, r7, #7
   17fde:	781b      	ldrb	r3, [r3, #0]
   17fe0:	2b08      	cmp	r3, #8
   17fe2:	d816      	bhi.n	18012 <pszTraceGetErrorNotEnoughHandles+0x42>
   17fe4:	009a      	lsls	r2, r3, #2
   17fe6:	4b0d      	ldr	r3, [pc, #52]	; (1801c <pszTraceGetErrorNotEnoughHandles+0x4c>)
   17fe8:	18d3      	adds	r3, r2, r3
   17fea:	681b      	ldr	r3, [r3, #0]
   17fec:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   17fee:	4b0c      	ldr	r3, [pc, #48]	; (18020 <pszTraceGetErrorNotEnoughHandles+0x50>)
   17ff0:	e010      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   17ff2:	4b0c      	ldr	r3, [pc, #48]	; (18024 <pszTraceGetErrorNotEnoughHandles+0x54>)
   17ff4:	e00e      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   17ff6:	4b0c      	ldr	r3, [pc, #48]	; (18028 <pszTraceGetErrorNotEnoughHandles+0x58>)
   17ff8:	e00c      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   17ffa:	4b0c      	ldr	r3, [pc, #48]	; (1802c <pszTraceGetErrorNotEnoughHandles+0x5c>)
   17ffc:	e00a      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   17ffe:	4b0c      	ldr	r3, [pc, #48]	; (18030 <pszTraceGetErrorNotEnoughHandles+0x60>)
   18000:	e008      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   18002:	4b0c      	ldr	r3, [pc, #48]	; (18034 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18004:	e006      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   18006:	4b0c      	ldr	r3, [pc, #48]	; (18038 <pszTraceGetErrorNotEnoughHandles+0x68>)
   18008:	e004      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1800a:	4b0c      	ldr	r3, [pc, #48]	; (1803c <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1800c:	e002      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1800e:	4b0c      	ldr	r3, [pc, #48]	; (18040 <pszTraceGetErrorNotEnoughHandles+0x70>)
   18010:	e000      	b.n	18014 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   18012:	4b0c      	ldr	r3, [pc, #48]	; (18044 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18014:	0018      	movs	r0, r3
   18016:	46bd      	mov	sp, r7
   18018:	b002      	add	sp, #8
   1801a:	bd80      	pop	{r7, pc}
   1801c:	00036a9c 	.word	0x00036a9c
   18020:	0003679c 	.word	0x0003679c
   18024:	000367e4 	.word	0x000367e4
   18028:	0003682c 	.word	0x0003682c
   1802c:	00036880 	.word	0x00036880
   18030:	000368cc 	.word	0x000368cc
   18034:	00036918 	.word	0x00036918
   18038:	00036964 	.word	0x00036964
   1803c:	000369b8 	.word	0x000369b8
   18040:	00036a10 	.word	0x00036a10
   18044:	00036a6c 	.word	0x00036a6c

00018048 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18048:	b590      	push	{r4, r7, lr}
   1804a:	b087      	sub	sp, #28
   1804c:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1804e:	2317      	movs	r3, #23
   18050:	18fb      	adds	r3, r7, r3
   18052:	2200      	movs	r2, #0
   18054:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18056:	4b36      	ldr	r3, [pc, #216]	; (18130 <uiTraceStart+0xe8>)
   18058:	681b      	ldr	r3, [r3, #0]
   1805a:	2b00      	cmp	r3, #0
   1805c:	d10b      	bne.n	18076 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1805e:	4b34      	ldr	r3, [pc, #208]	; (18130 <uiTraceStart+0xe8>)
   18060:	681b      	ldr	r3, [r3, #0]
   18062:	2b00      	cmp	r3, #0
   18064:	d105      	bne.n	18072 <uiTraceStart+0x2a>
   18066:	4b33      	ldr	r3, [pc, #204]	; (18134 <uiTraceStart+0xec>)
   18068:	0018      	movs	r0, r3
   1806a:	4b33      	ldr	r3, [pc, #204]	; (18138 <uiTraceStart+0xf0>)
   1806c:	4798      	blx	r3
   1806e:	2300      	movs	r3, #0
   18070:	e059      	b.n	18126 <uiTraceStart+0xde>
		return 0;
   18072:	2300      	movs	r3, #0
   18074:	e057      	b.n	18126 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18076:	4b2e      	ldr	r3, [pc, #184]	; (18130 <uiTraceStart+0xe8>)
   18078:	681b      	ldr	r3, [r3, #0]
   1807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1807c:	2b01      	cmp	r3, #1
   1807e:	d101      	bne.n	18084 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18080:	2301      	movs	r3, #1
   18082:	e050      	b.n	18126 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18084:	4b2d      	ldr	r3, [pc, #180]	; (1813c <uiTraceStart+0xf4>)
   18086:	681b      	ldr	r3, [r3, #0]
   18088:	2b00      	cmp	r3, #0
   1808a:	d149      	bne.n	18120 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1808c:	f3ef 8310 	mrs	r3, PRIMASK
   18090:	60bb      	str	r3, [r7, #8]
  return(result);
   18092:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18094:	613b      	str	r3, [r7, #16]
   18096:	2301      	movs	r3, #1
   18098:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1809a:	68fb      	ldr	r3, [r7, #12]
   1809c:	f383 8810 	msr	PRIMASK, r3
   180a0:	4b27      	ldr	r3, [pc, #156]	; (18140 <uiTraceStart+0xf8>)
   180a2:	681b      	ldr	r3, [r3, #0]
   180a4:	1c5a      	adds	r2, r3, #1
   180a6:	4b26      	ldr	r3, [pc, #152]	; (18140 <uiTraceStart+0xf8>)
   180a8:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   180aa:	4b21      	ldr	r3, [pc, #132]	; (18130 <uiTraceStart+0xe8>)
   180ac:	681b      	ldr	r3, [r3, #0]
   180ae:	2201      	movs	r2, #1
   180b0:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   180b2:	4b24      	ldr	r3, [pc, #144]	; (18144 <uiTraceStart+0xfc>)
   180b4:	4798      	blx	r3
   180b6:	0003      	movs	r3, r0
   180b8:	0018      	movs	r0, r3
   180ba:	4b23      	ldr	r3, [pc, #140]	; (18148 <uiTraceStart+0x100>)
   180bc:	4798      	blx	r3
   180be:	0003      	movs	r3, r0
   180c0:	001a      	movs	r2, r3
   180c2:	2317      	movs	r3, #23
   180c4:	18fb      	adds	r3, r7, r3
   180c6:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   180c8:	2317      	movs	r3, #23
   180ca:	18fb      	adds	r3, r7, r3
   180cc:	781b      	ldrb	r3, [r3, #0]
   180ce:	2b00      	cmp	r3, #0
   180d0:	d116      	bne.n	18100 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   180d2:	2317      	movs	r3, #23
   180d4:	18fc      	adds	r4, r7, r3
   180d6:	2003      	movs	r0, #3
   180d8:	4b1c      	ldr	r3, [pc, #112]	; (1814c <uiTraceStart+0x104>)
   180da:	4798      	blx	r3
   180dc:	0003      	movs	r3, r0
   180de:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   180e0:	4a1b      	ldr	r2, [pc, #108]	; (18150 <uiTraceStart+0x108>)
   180e2:	2317      	movs	r3, #23
   180e4:	18fb      	adds	r3, r7, r3
   180e6:	781b      	ldrb	r3, [r3, #0]
   180e8:	0019      	movs	r1, r3
   180ea:	2003      	movs	r0, #3
   180ec:	4b19      	ldr	r3, [pc, #100]	; (18154 <uiTraceStart+0x10c>)
   180ee:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   180f0:	2317      	movs	r3, #23
   180f2:	18fb      	adds	r3, r7, r3
   180f4:	781b      	ldrb	r3, [r3, #0]
   180f6:	2200      	movs	r2, #0
   180f8:	0019      	movs	r1, r3
   180fa:	2003      	movs	r0, #3
   180fc:	4b16      	ldr	r3, [pc, #88]	; (18158 <uiTraceStart+0x110>)
   180fe:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18100:	2317      	movs	r3, #23
   18102:	18fb      	adds	r3, r7, r3
   18104:	781b      	ldrb	r3, [r3, #0]
   18106:	0018      	movs	r0, r3
   18108:	4b14      	ldr	r3, [pc, #80]	; (1815c <uiTraceStart+0x114>)
   1810a:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1810c:	4b0c      	ldr	r3, [pc, #48]	; (18140 <uiTraceStart+0xf8>)
   1810e:	681b      	ldr	r3, [r3, #0]
   18110:	1e5a      	subs	r2, r3, #1
   18112:	4b0b      	ldr	r3, [pc, #44]	; (18140 <uiTraceStart+0xf8>)
   18114:	601a      	str	r2, [r3, #0]
   18116:	693b      	ldr	r3, [r7, #16]
   18118:	607b      	str	r3, [r7, #4]
   1811a:	687b      	ldr	r3, [r7, #4]
   1811c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18120:	4b03      	ldr	r3, [pc, #12]	; (18130 <uiTraceStart+0xe8>)
   18122:	681b      	ldr	r3, [r3, #0]
   18124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18126:	0018      	movs	r0, r3
   18128:	46bd      	mov	sp, r7
   1812a:	b007      	add	sp, #28
   1812c:	bd90      	pop	{r4, r7, pc}
   1812e:	46c0      	nop			; (mov r8, r8)
   18130:	20000c70 	.word	0x20000c70
   18134:	00036ac0 	.word	0x00036ac0
   18138:	000192b1 	.word	0x000192b1
   1813c:	20000bd0 	.word	0x20000bd0
   18140:	20000bc8 	.word	0x20000bc8
   18144:	00017cb1 	.word	0x00017cb1
   18148:	000179f5 	.word	0x000179f5
   1814c:	00018f95 	.word	0x00018f95
   18150:	00036b04 	.word	0x00036b04
   18154:	000191c5 	.word	0x000191c5
   18158:	00018929 	.word	0x00018929
   1815c:	00018811 	.word	0x00018811

00018160 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18160:	b580      	push	{r7, lr}
   18162:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18164:	4b02      	ldr	r3, [pc, #8]	; (18170 <vTraceStart+0x10>)
   18166:	4798      	blx	r3
}
   18168:	46c0      	nop			; (mov r8, r8)
   1816a:	46bd      	mov	sp, r7
   1816c:	bd80      	pop	{r7, pc}
   1816e:	46c0      	nop			; (mov r8, r8)
   18170:	00018049 	.word	0x00018049

00018174 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18174:	b580      	push	{r7, lr}
   18176:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18178:	4b08      	ldr	r3, [pc, #32]	; (1819c <vTraceStop+0x28>)
   1817a:	681b      	ldr	r3, [r3, #0]
   1817c:	2b00      	cmp	r3, #0
   1817e:	d003      	beq.n	18188 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18180:	4b06      	ldr	r3, [pc, #24]	; (1819c <vTraceStop+0x28>)
   18182:	681b      	ldr	r3, [r3, #0]
   18184:	2200      	movs	r2, #0
   18186:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18188:	4b05      	ldr	r3, [pc, #20]	; (181a0 <vTraceStop+0x2c>)
   1818a:	681b      	ldr	r3, [r3, #0]
   1818c:	2b00      	cmp	r3, #0
   1818e:	d002      	beq.n	18196 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18190:	4b03      	ldr	r3, [pc, #12]	; (181a0 <vTraceStop+0x2c>)
   18192:	681b      	ldr	r3, [r3, #0]
   18194:	4798      	blx	r3
	}
}
   18196:	46c0      	nop			; (mov r8, r8)
   18198:	46bd      	mov	sp, r7
   1819a:	bd80      	pop	{r7, pc}
   1819c:	20000c70 	.word	0x20000c70
   181a0:	20000bd8 	.word	0x20000bd8

000181a4 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   181a4:	b580      	push	{r7, lr}
   181a6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   181a8:	4b05      	ldr	r3, [pc, #20]	; (181c0 <xTraceIsRecordingEnabled+0x1c>)
   181aa:	681b      	ldr	r3, [r3, #0]
   181ac:	2b00      	cmp	r3, #0
   181ae:	d003      	beq.n	181b8 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   181b0:	4b03      	ldr	r3, [pc, #12]	; (181c0 <xTraceIsRecordingEnabled+0x1c>)
   181b2:	681b      	ldr	r3, [r3, #0]
   181b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   181b6:	e000      	b.n	181ba <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   181b8:	2300      	movs	r3, #0
	}
}
   181ba:	0018      	movs	r0, r3
   181bc:	46bd      	mov	sp, r7
   181be:	bd80      	pop	{r7, pc}
   181c0:	20000c70 	.word	0x20000c70

000181c4 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   181c4:	b590      	push	{r4, r7, lr}
   181c6:	b089      	sub	sp, #36	; 0x24
   181c8:	af00      	add	r7, sp, #0
   181ca:	0002      	movs	r2, r0
   181cc:	1dfb      	adds	r3, r7, #7
   181ce:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   181d0:	1dfb      	adds	r3, r7, #7
   181d2:	781b      	ldrb	r3, [r3, #0]
   181d4:	2b00      	cmp	r3, #0
   181d6:	d057      	beq.n	18288 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   181d8:	4b2e      	ldr	r3, [pc, #184]	; (18294 <prvTraceStoreTaskReady+0xd0>)
   181da:	681b      	ldr	r3, [r3, #0]
   181dc:	2b00      	cmp	r3, #0
   181de:	d055      	beq.n	1828c <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   181e0:	1dfb      	adds	r3, r7, #7
   181e2:	781b      	ldrb	r3, [r3, #0]
   181e4:	2b0f      	cmp	r3, #15
   181e6:	d904      	bls.n	181f2 <prvTraceStoreTaskReady+0x2e>
   181e8:	4b2b      	ldr	r3, [pc, #172]	; (18298 <prvTraceStoreTaskReady+0xd4>)
   181ea:	0018      	movs	r0, r3
   181ec:	4b2b      	ldr	r3, [pc, #172]	; (1829c <prvTraceStoreTaskReady+0xd8>)
   181ee:	4798      	blx	r3
   181f0:	e04d      	b.n	1828e <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   181f2:	4b2b      	ldr	r3, [pc, #172]	; (182a0 <prvTraceStoreTaskReady+0xdc>)
   181f4:	681b      	ldr	r3, [r3, #0]
   181f6:	2b00      	cmp	r3, #0
   181f8:	d004      	beq.n	18204 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   181fa:	4b2a      	ldr	r3, [pc, #168]	; (182a4 <prvTraceStoreTaskReady+0xe0>)
   181fc:	0018      	movs	r0, r3
   181fe:	4b27      	ldr	r3, [pc, #156]	; (1829c <prvTraceStoreTaskReady+0xd8>)
   18200:	4798      	blx	r3
		return;
   18202:	e044      	b.n	1828e <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18204:	f3ef 8310 	mrs	r3, PRIMASK
   18208:	60fb      	str	r3, [r7, #12]
  return(result);
   1820a:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1820c:	61fb      	str	r3, [r7, #28]
   1820e:	2301      	movs	r3, #1
   18210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18212:	693b      	ldr	r3, [r7, #16]
   18214:	f383 8810 	msr	PRIMASK, r3
   18218:	4b21      	ldr	r3, [pc, #132]	; (182a0 <prvTraceStoreTaskReady+0xdc>)
   1821a:	681b      	ldr	r3, [r3, #0]
   1821c:	1c5a      	adds	r2, r3, #1
   1821e:	4b20      	ldr	r3, [pc, #128]	; (182a0 <prvTraceStoreTaskReady+0xdc>)
   18220:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   18222:	4b21      	ldr	r3, [pc, #132]	; (182a8 <prvTraceStoreTaskReady+0xe4>)
   18224:	681b      	ldr	r3, [r3, #0]
   18226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18228:	2b00      	cmp	r3, #0
   1822a:	d022      	beq.n	18272 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1822c:	231a      	movs	r3, #26
   1822e:	18fc      	adds	r4, r7, r3
   18230:	4b1e      	ldr	r3, [pc, #120]	; (182ac <prvTraceStoreTaskReady+0xe8>)
   18232:	0018      	movs	r0, r3
   18234:	4b1e      	ldr	r3, [pc, #120]	; (182b0 <prvTraceStoreTaskReady+0xec>)
   18236:	4798      	blx	r3
   18238:	0003      	movs	r3, r0
   1823a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1823c:	2319      	movs	r3, #25
   1823e:	18fb      	adds	r3, r7, r3
   18240:	1dfa      	adds	r2, r7, #7
   18242:	7812      	ldrb	r2, [r2, #0]
   18244:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18246:	4b1b      	ldr	r3, [pc, #108]	; (182b4 <prvTraceStoreTaskReady+0xf0>)
   18248:	4798      	blx	r3
   1824a:	0003      	movs	r3, r0
   1824c:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1824e:	697b      	ldr	r3, [r7, #20]
   18250:	2b00      	cmp	r3, #0
   18252:	d00e      	beq.n	18272 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18254:	697b      	ldr	r3, [r7, #20]
   18256:	2202      	movs	r2, #2
   18258:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1825a:	697b      	ldr	r3, [r7, #20]
   1825c:	221a      	movs	r2, #26
   1825e:	18ba      	adds	r2, r7, r2
   18260:	8812      	ldrh	r2, [r2, #0]
   18262:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18264:	697b      	ldr	r3, [r7, #20]
   18266:	2219      	movs	r2, #25
   18268:	18ba      	adds	r2, r7, r2
   1826a:	7812      	ldrb	r2, [r2, #0]
   1826c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1826e:	4b12      	ldr	r3, [pc, #72]	; (182b8 <prvTraceStoreTaskReady+0xf4>)
   18270:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18272:	4b0b      	ldr	r3, [pc, #44]	; (182a0 <prvTraceStoreTaskReady+0xdc>)
   18274:	681b      	ldr	r3, [r3, #0]
   18276:	1e5a      	subs	r2, r3, #1
   18278:	4b09      	ldr	r3, [pc, #36]	; (182a0 <prvTraceStoreTaskReady+0xdc>)
   1827a:	601a      	str	r2, [r3, #0]
   1827c:	69fb      	ldr	r3, [r7, #28]
   1827e:	60bb      	str	r3, [r7, #8]
   18280:	68bb      	ldr	r3, [r7, #8]
   18282:	f383 8810 	msr	PRIMASK, r3
   18286:	e002      	b.n	1828e <prvTraceStoreTaskReady+0xca>
		return;
   18288:	46c0      	nop			; (mov r8, r8)
   1828a:	e000      	b.n	1828e <prvTraceStoreTaskReady+0xca>
		return;
   1828c:	46c0      	nop			; (mov r8, r8)
}
   1828e:	46bd      	mov	sp, r7
   18290:	b009      	add	sp, #36	; 0x24
   18292:	bd90      	pop	{r4, r7, pc}
   18294:	20000104 	.word	0x20000104
   18298:	00036e6c 	.word	0x00036e6c
   1829c:	000192b1 	.word	0x000192b1
   182a0:	20000bc8 	.word	0x20000bc8
   182a4:	00036eac 	.word	0x00036eac
   182a8:	20000c70 	.word	0x20000c70
   182ac:	0000ffff 	.word	0x0000ffff
   182b0:	000194c5 	.word	0x000194c5
   182b4:	00018e69 	.word	0x00018e69
   182b8:	0001946d 	.word	0x0001946d

000182bc <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   182bc:	b580      	push	{r7, lr}
   182be:	b08e      	sub	sp, #56	; 0x38
   182c0:	af00      	add	r7, sp, #0
   182c2:	60f8      	str	r0, [r7, #12]
   182c4:	60b9      	str	r1, [r7, #8]
   182c6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   182c8:	4b48      	ldr	r3, [pc, #288]	; (183ec <vTraceStoreMemMangEvent+0x130>)
   182ca:	681b      	ldr	r3, [r3, #0]
   182cc:	2b00      	cmp	r3, #0
   182ce:	d100      	bne.n	182d2 <vTraceStoreMemMangEvent+0x16>
   182d0:	e088      	b.n	183e4 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   182d2:	687b      	ldr	r3, [r7, #4]
   182d4:	2b00      	cmp	r3, #0
   182d6:	da03      	bge.n	182e0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   182d8:	687b      	ldr	r3, [r7, #4]
   182da:	425b      	negs	r3, r3
   182dc:	637b      	str	r3, [r7, #52]	; 0x34
   182de:	e001      	b.n	182e4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   182e0:	687b      	ldr	r3, [r7, #4]
   182e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   182e4:	f3ef 8310 	mrs	r3, PRIMASK
   182e8:	61bb      	str	r3, [r7, #24]
  return(result);
   182ea:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   182ec:	633b      	str	r3, [r7, #48]	; 0x30
   182ee:	2301      	movs	r3, #1
   182f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   182f2:	69fb      	ldr	r3, [r7, #28]
   182f4:	f383 8810 	msr	PRIMASK, r3
   182f8:	4b3d      	ldr	r3, [pc, #244]	; (183f0 <vTraceStoreMemMangEvent+0x134>)
   182fa:	681b      	ldr	r3, [r3, #0]
   182fc:	1c5a      	adds	r2, r3, #1
   182fe:	4b3c      	ldr	r3, [pc, #240]	; (183f0 <vTraceStoreMemMangEvent+0x134>)
   18300:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   18302:	68bb      	ldr	r3, [r7, #8]
   18304:	2b00      	cmp	r3, #0
   18306:	d005      	beq.n	18314 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   18308:	4b3a      	ldr	r3, [pc, #232]	; (183f4 <vTraceStoreMemMangEvent+0x138>)
   1830a:	681a      	ldr	r2, [r3, #0]
   1830c:	687b      	ldr	r3, [r7, #4]
   1830e:	18d2      	adds	r2, r2, r3
   18310:	4b38      	ldr	r3, [pc, #224]	; (183f4 <vTraceStoreMemMangEvent+0x138>)
   18312:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18314:	4b35      	ldr	r3, [pc, #212]	; (183ec <vTraceStoreMemMangEvent+0x130>)
   18316:	681b      	ldr	r3, [r3, #0]
   18318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1831a:	2b00      	cmp	r3, #0
   1831c:	d057      	beq.n	183ce <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1831e:	20ff      	movs	r0, #255	; 0xff
   18320:	4b35      	ldr	r3, [pc, #212]	; (183f8 <vTraceStoreMemMangEvent+0x13c>)
   18322:	4798      	blx	r3
   18324:	0003      	movs	r3, r0
   18326:	001a      	movs	r2, r3
   18328:	232f      	movs	r3, #47	; 0x2f
   1832a:	18fb      	adds	r3, r7, r3
   1832c:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18330:	4a32      	ldr	r2, [pc, #200]	; (183fc <vTraceStoreMemMangEvent+0x140>)
   18332:	0019      	movs	r1, r3
   18334:	0010      	movs	r0, r2
   18336:	4b32      	ldr	r3, [pc, #200]	; (18400 <vTraceStoreMemMangEvent+0x144>)
   18338:	4798      	blx	r3
   1833a:	0002      	movs	r2, r0
   1833c:	232c      	movs	r3, #44	; 0x2c
   1833e:	18fb      	adds	r3, r7, r3
   18340:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   18342:	4b30      	ldr	r3, [pc, #192]	; (18404 <vTraceStoreMemMangEvent+0x148>)
   18344:	4798      	blx	r3
   18346:	0003      	movs	r3, r0
   18348:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1834c:	2b00      	cmp	r3, #0
   1834e:	d03e      	beq.n	183ce <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   18350:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18352:	222f      	movs	r2, #47	; 0x2f
   18354:	18ba      	adds	r2, r7, r2
   18356:	7812      	ldrb	r2, [r2, #0]
   18358:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1835c:	2200      	movs	r2, #0
   1835e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   18360:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18362:	222c      	movs	r2, #44	; 0x2c
   18364:	18ba      	adds	r2, r7, r2
   18366:	8812      	ldrh	r2, [r2, #0]
   18368:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1836a:	4b27      	ldr	r3, [pc, #156]	; (18408 <vTraceStoreMemMangEvent+0x14c>)
   1836c:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1836e:	68bb      	ldr	r3, [r7, #8]
   18370:	4a22      	ldr	r2, [pc, #136]	; (183fc <vTraceStoreMemMangEvent+0x140>)
   18372:	0019      	movs	r1, r3
   18374:	0010      	movs	r0, r2
   18376:	4b22      	ldr	r3, [pc, #136]	; (18400 <vTraceStoreMemMangEvent+0x144>)
   18378:	4798      	blx	r3
   1837a:	0002      	movs	r2, r0
   1837c:	2326      	movs	r3, #38	; 0x26
   1837e:	18fb      	adds	r3, r7, r3
   18380:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18382:	2325      	movs	r3, #37	; 0x25
   18384:	18fb      	adds	r3, r7, r3
   18386:	2200      	movs	r2, #0
   18388:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1838a:	4b1e      	ldr	r3, [pc, #120]	; (18404 <vTraceStoreMemMangEvent+0x148>)
   1838c:	4798      	blx	r3
   1838e:	0003      	movs	r3, r0
   18390:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18392:	6a3b      	ldr	r3, [r7, #32]
   18394:	2b00      	cmp	r3, #0
   18396:	d01a      	beq.n	183ce <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18398:	6a3b      	ldr	r3, [r7, #32]
   1839a:	2226      	movs	r2, #38	; 0x26
   1839c:	18ba      	adds	r2, r7, r2
   1839e:	8812      	ldrh	r2, [r2, #0]
   183a0:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   183a2:	6a3b      	ldr	r3, [r7, #32]
   183a4:	2225      	movs	r2, #37	; 0x25
   183a6:	18ba      	adds	r2, r7, r2
   183a8:	7812      	ldrb	r2, [r2, #0]
   183aa:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   183ac:	68fb      	ldr	r3, [r7, #12]
   183ae:	b2db      	uxtb	r3, r3
   183b0:	3301      	adds	r3, #1
   183b2:	b2da      	uxtb	r2, r3
   183b4:	6a3b      	ldr	r3, [r7, #32]
   183b6:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   183b8:	68fb      	ldr	r3, [r7, #12]
   183ba:	b2da      	uxtb	r2, r3
   183bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   183be:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   183c0:	4b11      	ldr	r3, [pc, #68]	; (18408 <vTraceStoreMemMangEvent+0x14c>)
   183c2:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   183c4:	4b09      	ldr	r3, [pc, #36]	; (183ec <vTraceStoreMemMangEvent+0x130>)
   183c6:	681b      	ldr	r3, [r3, #0]
   183c8:	4a0a      	ldr	r2, [pc, #40]	; (183f4 <vTraceStoreMemMangEvent+0x138>)
   183ca:	6812      	ldr	r2, [r2, #0]
   183cc:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   183ce:	4b08      	ldr	r3, [pc, #32]	; (183f0 <vTraceStoreMemMangEvent+0x134>)
   183d0:	681b      	ldr	r3, [r3, #0]
   183d2:	1e5a      	subs	r2, r3, #1
   183d4:	4b06      	ldr	r3, [pc, #24]	; (183f0 <vTraceStoreMemMangEvent+0x134>)
   183d6:	601a      	str	r2, [r3, #0]
   183d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   183da:	617b      	str	r3, [r7, #20]
   183dc:	697b      	ldr	r3, [r7, #20]
   183de:	f383 8810 	msr	PRIMASK, r3
   183e2:	e000      	b.n	183e6 <vTraceStoreMemMangEvent+0x12a>
		return;
   183e4:	46c0      	nop			; (mov r8, r8)
}
   183e6:	46bd      	mov	sp, r7
   183e8:	b00e      	add	sp, #56	; 0x38
   183ea:	bd80      	pop	{r7, pc}
   183ec:	20000c70 	.word	0x20000c70
   183f0:	20000bc8 	.word	0x20000bc8
   183f4:	20000bdc 	.word	0x20000bdc
   183f8:	000194c5 	.word	0x000194c5
   183fc:	0000ffff 	.word	0x0000ffff
   18400:	00018689 	.word	0x00018689
   18404:	00018e69 	.word	0x00018e69
   18408:	0001946d 	.word	0x0001946d

0001840c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1840c:	b590      	push	{r4, r7, lr}
   1840e:	b08b      	sub	sp, #44	; 0x2c
   18410:	af00      	add	r7, sp, #0
   18412:	60f8      	str	r0, [r7, #12]
   18414:	607a      	str	r2, [r7, #4]
   18416:	230b      	movs	r3, #11
   18418:	18fb      	adds	r3, r7, r3
   1841a:	1c0a      	adds	r2, r1, #0
   1841c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1841e:	68fb      	ldr	r3, [r7, #12]
   18420:	2bfe      	cmp	r3, #254	; 0xfe
   18422:	d904      	bls.n	1842e <prvTraceStoreKernelCall+0x22>
   18424:	4b39      	ldr	r3, [pc, #228]	; (1850c <prvTraceStoreKernelCall+0x100>)
   18426:	0018      	movs	r0, r3
   18428:	4b39      	ldr	r3, [pc, #228]	; (18510 <prvTraceStoreKernelCall+0x104>)
   1842a:	4798      	blx	r3
   1842c:	e06b      	b.n	18506 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1842e:	230b      	movs	r3, #11
   18430:	18fb      	adds	r3, r7, r3
   18432:	781b      	ldrb	r3, [r3, #0]
   18434:	2b08      	cmp	r3, #8
   18436:	d904      	bls.n	18442 <prvTraceStoreKernelCall+0x36>
   18438:	4b36      	ldr	r3, [pc, #216]	; (18514 <prvTraceStoreKernelCall+0x108>)
   1843a:	0018      	movs	r0, r3
   1843c:	4b34      	ldr	r3, [pc, #208]	; (18510 <prvTraceStoreKernelCall+0x104>)
   1843e:	4798      	blx	r3
   18440:	e061      	b.n	18506 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   18442:	4b35      	ldr	r3, [pc, #212]	; (18518 <prvTraceStoreKernelCall+0x10c>)
   18444:	681a      	ldr	r2, [r3, #0]
   18446:	230b      	movs	r3, #11
   18448:	18fb      	adds	r3, r7, r3
   1844a:	781b      	ldrb	r3, [r3, #0]
   1844c:	2164      	movs	r1, #100	; 0x64
   1844e:	18d3      	adds	r3, r2, r3
   18450:	185b      	adds	r3, r3, r1
   18452:	781b      	ldrb	r3, [r3, #0]
   18454:	001a      	movs	r2, r3
   18456:	687b      	ldr	r3, [r7, #4]
   18458:	429a      	cmp	r2, r3
   1845a:	d204      	bcs.n	18466 <prvTraceStoreKernelCall+0x5a>
   1845c:	4b2f      	ldr	r3, [pc, #188]	; (1851c <prvTraceStoreKernelCall+0x110>)
   1845e:	0018      	movs	r0, r3
   18460:	4b2b      	ldr	r3, [pc, #172]	; (18510 <prvTraceStoreKernelCall+0x104>)
   18462:	4798      	blx	r3
   18464:	e04f      	b.n	18506 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   18466:	4b2e      	ldr	r3, [pc, #184]	; (18520 <prvTraceStoreKernelCall+0x114>)
   18468:	681b      	ldr	r3, [r3, #0]
   1846a:	2b00      	cmp	r3, #0
   1846c:	d004      	beq.n	18478 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1846e:	4b2d      	ldr	r3, [pc, #180]	; (18524 <prvTraceStoreKernelCall+0x118>)
   18470:	0018      	movs	r0, r3
   18472:	4b27      	ldr	r3, [pc, #156]	; (18510 <prvTraceStoreKernelCall+0x104>)
   18474:	4798      	blx	r3
		return;
   18476:	e046      	b.n	18506 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   18478:	4b2b      	ldr	r3, [pc, #172]	; (18528 <prvTraceStoreKernelCall+0x11c>)
   1847a:	781b      	ldrb	r3, [r3, #0]
   1847c:	2b00      	cmp	r3, #0
   1847e:	d041      	beq.n	18504 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18480:	f3ef 8310 	mrs	r3, PRIMASK
   18484:	617b      	str	r3, [r7, #20]
  return(result);
   18486:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   18488:	627b      	str	r3, [r7, #36]	; 0x24
   1848a:	2301      	movs	r3, #1
   1848c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1848e:	69bb      	ldr	r3, [r7, #24]
   18490:	f383 8810 	msr	PRIMASK, r3
   18494:	4b22      	ldr	r3, [pc, #136]	; (18520 <prvTraceStoreKernelCall+0x114>)
   18496:	681b      	ldr	r3, [r3, #0]
   18498:	1c5a      	adds	r2, r3, #1
   1849a:	4b21      	ldr	r3, [pc, #132]	; (18520 <prvTraceStoreKernelCall+0x114>)
   1849c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1849e:	4b1e      	ldr	r3, [pc, #120]	; (18518 <prvTraceStoreKernelCall+0x10c>)
   184a0:	681b      	ldr	r3, [r3, #0]
   184a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   184a4:	2b00      	cmp	r3, #0
   184a6:	d022      	beq.n	184ee <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   184a8:	2322      	movs	r3, #34	; 0x22
   184aa:	18fc      	adds	r4, r7, r3
   184ac:	4b1f      	ldr	r3, [pc, #124]	; (1852c <prvTraceStoreKernelCall+0x120>)
   184ae:	0018      	movs	r0, r3
   184b0:	4b1f      	ldr	r3, [pc, #124]	; (18530 <prvTraceStoreKernelCall+0x124>)
   184b2:	4798      	blx	r3
   184b4:	0003      	movs	r3, r0
   184b6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   184b8:	2321      	movs	r3, #33	; 0x21
   184ba:	18fb      	adds	r3, r7, r3
   184bc:	687a      	ldr	r2, [r7, #4]
   184be:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   184c0:	4b1c      	ldr	r3, [pc, #112]	; (18534 <prvTraceStoreKernelCall+0x128>)
   184c2:	4798      	blx	r3
   184c4:	0003      	movs	r3, r0
   184c6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   184c8:	69fb      	ldr	r3, [r7, #28]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d00f      	beq.n	184ee <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   184ce:	69fb      	ldr	r3, [r7, #28]
   184d0:	2222      	movs	r2, #34	; 0x22
   184d2:	18ba      	adds	r2, r7, r2
   184d4:	8812      	ldrh	r2, [r2, #0]
   184d6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   184d8:	68fb      	ldr	r3, [r7, #12]
   184da:	b2da      	uxtb	r2, r3
   184dc:	69fb      	ldr	r3, [r7, #28]
   184de:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   184e0:	69fb      	ldr	r3, [r7, #28]
   184e2:	2221      	movs	r2, #33	; 0x21
   184e4:	18ba      	adds	r2, r7, r2
   184e6:	7812      	ldrb	r2, [r2, #0]
   184e8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   184ea:	4b13      	ldr	r3, [pc, #76]	; (18538 <prvTraceStoreKernelCall+0x12c>)
   184ec:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   184ee:	4b0c      	ldr	r3, [pc, #48]	; (18520 <prvTraceStoreKernelCall+0x114>)
   184f0:	681b      	ldr	r3, [r3, #0]
   184f2:	1e5a      	subs	r2, r3, #1
   184f4:	4b0a      	ldr	r3, [pc, #40]	; (18520 <prvTraceStoreKernelCall+0x114>)
   184f6:	601a      	str	r2, [r3, #0]
   184f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   184fa:	613b      	str	r3, [r7, #16]
   184fc:	693b      	ldr	r3, [r7, #16]
   184fe:	f383 8810 	msr	PRIMASK, r3
   18502:	e000      	b.n	18506 <prvTraceStoreKernelCall+0xfa>
		return;
   18504:	46c0      	nop			; (mov r8, r8)
}
   18506:	46bd      	mov	sp, r7
   18508:	b00b      	add	sp, #44	; 0x2c
   1850a:	bd90      	pop	{r4, r7, pc}
   1850c:	00036f1c 	.word	0x00036f1c
   18510:	000192b1 	.word	0x000192b1
   18514:	00036f54 	.word	0x00036f54
   18518:	20000c70 	.word	0x20000c70
   1851c:	00036f9c 	.word	0x00036f9c
   18520:	20000bc8 	.word	0x20000bc8
   18524:	00036fe4 	.word	0x00036fe4
   18528:	20000bd4 	.word	0x20000bd4
   1852c:	0000ffff 	.word	0x0000ffff
   18530:	000194c5 	.word	0x000194c5
   18534:	00018e69 	.word	0x00018e69
   18538:	0001946d 	.word	0x0001946d

0001853c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1853c:	b580      	push	{r7, lr}
   1853e:	b08a      	sub	sp, #40	; 0x28
   18540:	af00      	add	r7, sp, #0
   18542:	60f8      	str	r0, [r7, #12]
   18544:	607a      	str	r2, [r7, #4]
   18546:	603b      	str	r3, [r7, #0]
   18548:	230b      	movs	r3, #11
   1854a:	18fb      	adds	r3, r7, r3
   1854c:	1c0a      	adds	r2, r1, #0
   1854e:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   18550:	68fb      	ldr	r3, [r7, #12]
   18552:	2bfe      	cmp	r3, #254	; 0xfe
   18554:	d904      	bls.n	18560 <prvTraceStoreKernelCallWithParam+0x24>
   18556:	4b40      	ldr	r3, [pc, #256]	; (18658 <prvTraceStoreKernelCallWithParam+0x11c>)
   18558:	0018      	movs	r0, r3
   1855a:	4b40      	ldr	r3, [pc, #256]	; (1865c <prvTraceStoreKernelCallWithParam+0x120>)
   1855c:	4798      	blx	r3
   1855e:	e077      	b.n	18650 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18560:	230b      	movs	r3, #11
   18562:	18fb      	adds	r3, r7, r3
   18564:	781b      	ldrb	r3, [r3, #0]
   18566:	2b08      	cmp	r3, #8
   18568:	d904      	bls.n	18574 <prvTraceStoreKernelCallWithParam+0x38>
   1856a:	4b3d      	ldr	r3, [pc, #244]	; (18660 <prvTraceStoreKernelCallWithParam+0x124>)
   1856c:	0018      	movs	r0, r3
   1856e:	4b3b      	ldr	r3, [pc, #236]	; (1865c <prvTraceStoreKernelCallWithParam+0x120>)
   18570:	4798      	blx	r3
   18572:	e06d      	b.n	18650 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18574:	4b3b      	ldr	r3, [pc, #236]	; (18664 <prvTraceStoreKernelCallWithParam+0x128>)
   18576:	681a      	ldr	r2, [r3, #0]
   18578:	230b      	movs	r3, #11
   1857a:	18fb      	adds	r3, r7, r3
   1857c:	781b      	ldrb	r3, [r3, #0]
   1857e:	2164      	movs	r1, #100	; 0x64
   18580:	18d3      	adds	r3, r2, r3
   18582:	185b      	adds	r3, r3, r1
   18584:	781b      	ldrb	r3, [r3, #0]
   18586:	001a      	movs	r2, r3
   18588:	687b      	ldr	r3, [r7, #4]
   1858a:	429a      	cmp	r2, r3
   1858c:	d204      	bcs.n	18598 <prvTraceStoreKernelCallWithParam+0x5c>
   1858e:	4b36      	ldr	r3, [pc, #216]	; (18668 <prvTraceStoreKernelCallWithParam+0x12c>)
   18590:	0018      	movs	r0, r3
   18592:	4b32      	ldr	r3, [pc, #200]	; (1865c <prvTraceStoreKernelCallWithParam+0x120>)
   18594:	4798      	blx	r3
   18596:	e05b      	b.n	18650 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18598:	4b34      	ldr	r3, [pc, #208]	; (1866c <prvTraceStoreKernelCallWithParam+0x130>)
   1859a:	681b      	ldr	r3, [r3, #0]
   1859c:	2b00      	cmp	r3, #0
   1859e:	d004      	beq.n	185aa <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   185a0:	4b33      	ldr	r3, [pc, #204]	; (18670 <prvTraceStoreKernelCallWithParam+0x134>)
   185a2:	0018      	movs	r0, r3
   185a4:	4b2d      	ldr	r3, [pc, #180]	; (1865c <prvTraceStoreKernelCallWithParam+0x120>)
   185a6:	4798      	blx	r3
		return;
   185a8:	e052      	b.n	18650 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   185aa:	f3ef 8310 	mrs	r3, PRIMASK
   185ae:	617b      	str	r3, [r7, #20]
  return(result);
   185b0:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   185b2:	627b      	str	r3, [r7, #36]	; 0x24
   185b4:	2301      	movs	r3, #1
   185b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   185b8:	69bb      	ldr	r3, [r7, #24]
   185ba:	f383 8810 	msr	PRIMASK, r3
   185be:	4b2b      	ldr	r3, [pc, #172]	; (1866c <prvTraceStoreKernelCallWithParam+0x130>)
   185c0:	681b      	ldr	r3, [r3, #0]
   185c2:	1c5a      	adds	r2, r3, #1
   185c4:	4b29      	ldr	r3, [pc, #164]	; (1866c <prvTraceStoreKernelCallWithParam+0x130>)
   185c6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   185c8:	4b26      	ldr	r3, [pc, #152]	; (18664 <prvTraceStoreKernelCallWithParam+0x128>)
   185ca:	681b      	ldr	r3, [r3, #0]
   185cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   185ce:	2b00      	cmp	r3, #0
   185d0:	d034      	beq.n	1863c <prvTraceStoreKernelCallWithParam+0x100>
   185d2:	4b28      	ldr	r3, [pc, #160]	; (18674 <prvTraceStoreKernelCallWithParam+0x138>)
   185d4:	781b      	ldrb	r3, [r3, #0]
   185d6:	2b00      	cmp	r3, #0
   185d8:	d030      	beq.n	1863c <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   185da:	20ff      	movs	r0, #255	; 0xff
   185dc:	4b26      	ldr	r3, [pc, #152]	; (18678 <prvTraceStoreKernelCallWithParam+0x13c>)
   185de:	4798      	blx	r3
   185e0:	0003      	movs	r3, r0
   185e2:	001a      	movs	r2, r3
   185e4:	2323      	movs	r3, #35	; 0x23
   185e6:	18fb      	adds	r3, r7, r3
   185e8:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   185ea:	683b      	ldr	r3, [r7, #0]
   185ec:	0019      	movs	r1, r3
   185ee:	20ff      	movs	r0, #255	; 0xff
   185f0:	4b22      	ldr	r3, [pc, #136]	; (1867c <prvTraceStoreKernelCallWithParam+0x140>)
   185f2:	4798      	blx	r3
   185f4:	0002      	movs	r2, r0
   185f6:	2322      	movs	r3, #34	; 0x22
   185f8:	18fb      	adds	r3, r7, r3
   185fa:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   185fc:	2321      	movs	r3, #33	; 0x21
   185fe:	18fb      	adds	r3, r7, r3
   18600:	687a      	ldr	r2, [r7, #4]
   18602:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18604:	4b1e      	ldr	r3, [pc, #120]	; (18680 <prvTraceStoreKernelCallWithParam+0x144>)
   18606:	4798      	blx	r3
   18608:	0003      	movs	r3, r0
   1860a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1860c:	69fb      	ldr	r3, [r7, #28]
   1860e:	2b00      	cmp	r3, #0
   18610:	d014      	beq.n	1863c <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18612:	69fb      	ldr	r3, [r7, #28]
   18614:	2223      	movs	r2, #35	; 0x23
   18616:	18ba      	adds	r2, r7, r2
   18618:	7812      	ldrb	r2, [r2, #0]
   1861a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1861c:	68fb      	ldr	r3, [r7, #12]
   1861e:	b2da      	uxtb	r2, r3
   18620:	69fb      	ldr	r3, [r7, #28]
   18622:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18624:	69fb      	ldr	r3, [r7, #28]
   18626:	2221      	movs	r2, #33	; 0x21
   18628:	18ba      	adds	r2, r7, r2
   1862a:	7812      	ldrb	r2, [r2, #0]
   1862c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1862e:	69fb      	ldr	r3, [r7, #28]
   18630:	2222      	movs	r2, #34	; 0x22
   18632:	18ba      	adds	r2, r7, r2
   18634:	7812      	ldrb	r2, [r2, #0]
   18636:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18638:	4b12      	ldr	r3, [pc, #72]	; (18684 <prvTraceStoreKernelCallWithParam+0x148>)
   1863a:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1863c:	4b0b      	ldr	r3, [pc, #44]	; (1866c <prvTraceStoreKernelCallWithParam+0x130>)
   1863e:	681b      	ldr	r3, [r3, #0]
   18640:	1e5a      	subs	r2, r3, #1
   18642:	4b0a      	ldr	r3, [pc, #40]	; (1866c <prvTraceStoreKernelCallWithParam+0x130>)
   18644:	601a      	str	r2, [r3, #0]
   18646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18648:	613b      	str	r3, [r7, #16]
   1864a:	693b      	ldr	r3, [r7, #16]
   1864c:	f383 8810 	msr	PRIMASK, r3
}
   18650:	46bd      	mov	sp, r7
   18652:	b00a      	add	sp, #40	; 0x28
   18654:	bd80      	pop	{r7, pc}
   18656:	46c0      	nop			; (mov r8, r8)
   18658:	0003701c 	.word	0x0003701c
   1865c:	000192b1 	.word	0x000192b1
   18660:	0003705c 	.word	0x0003705c
   18664:	20000c70 	.word	0x20000c70
   18668:	000370ac 	.word	0x000370ac
   1866c:	20000bc8 	.word	0x20000bc8
   18670:	000370fc 	.word	0x000370fc
   18674:	20000bd4 	.word	0x20000bd4
   18678:	000194c5 	.word	0x000194c5
   1867c:	00018689 	.word	0x00018689
   18680:	00018e69 	.word	0x00018e69
   18684:	0001946d 	.word	0x0001946d

00018688 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18688:	b580      	push	{r7, lr}
   1868a:	b084      	sub	sp, #16
   1868c:	af00      	add	r7, sp, #0
   1868e:	6078      	str	r0, [r7, #4]
   18690:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18692:	687b      	ldr	r3, [r7, #4]
   18694:	2bff      	cmp	r3, #255	; 0xff
   18696:	d009      	beq.n	186ac <prvTraceGetParam+0x24>
   18698:	687b      	ldr	r3, [r7, #4]
   1869a:	4a19      	ldr	r2, [pc, #100]	; (18700 <prvTraceGetParam+0x78>)
   1869c:	4293      	cmp	r3, r2
   1869e:	d005      	beq.n	186ac <prvTraceGetParam+0x24>
   186a0:	4b18      	ldr	r3, [pc, #96]	; (18704 <prvTraceGetParam+0x7c>)
   186a2:	0018      	movs	r0, r3
   186a4:	4b18      	ldr	r3, [pc, #96]	; (18708 <prvTraceGetParam+0x80>)
   186a6:	4798      	blx	r3
   186a8:	683b      	ldr	r3, [r7, #0]
   186aa:	e024      	b.n	186f6 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   186ac:	683a      	ldr	r2, [r7, #0]
   186ae:	687b      	ldr	r3, [r7, #4]
   186b0:	429a      	cmp	r2, r3
   186b2:	d801      	bhi.n	186b8 <prvTraceGetParam+0x30>
	{
		return param;
   186b4:	683b      	ldr	r3, [r7, #0]
   186b6:	e01e      	b.n	186f6 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   186b8:	4b14      	ldr	r3, [pc, #80]	; (1870c <prvTraceGetParam+0x84>)
   186ba:	4798      	blx	r3
   186bc:	0003      	movs	r3, r0
   186be:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   186c0:	68fb      	ldr	r3, [r7, #12]
   186c2:	2b00      	cmp	r3, #0
   186c4:	d014      	beq.n	186f0 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   186c6:	68fb      	ldr	r3, [r7, #12]
   186c8:	2201      	movs	r2, #1
   186ca:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   186cc:	687b      	ldr	r3, [r7, #4]
   186ce:	43db      	mvns	r3, r3
   186d0:	683a      	ldr	r2, [r7, #0]
   186d2:	4013      	ands	r3, r2
   186d4:	0a1b      	lsrs	r3, r3, #8
   186d6:	b2da      	uxtb	r2, r3
   186d8:	68fb      	ldr	r3, [r7, #12]
   186da:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   186dc:	687b      	ldr	r3, [r7, #4]
   186de:	43db      	mvns	r3, r3
   186e0:	683a      	ldr	r2, [r7, #0]
   186e2:	4013      	ands	r3, r2
   186e4:	0c1b      	lsrs	r3, r3, #16
   186e6:	b29a      	uxth	r2, r3
   186e8:	68fb      	ldr	r3, [r7, #12]
   186ea:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   186ec:	4b08      	ldr	r3, [pc, #32]	; (18710 <prvTraceGetParam+0x88>)
   186ee:	4798      	blx	r3
		}

		return param & param_max;
   186f0:	683b      	ldr	r3, [r7, #0]
   186f2:	687a      	ldr	r2, [r7, #4]
   186f4:	4013      	ands	r3, r2
	}
}
   186f6:	0018      	movs	r0, r3
   186f8:	46bd      	mov	sp, r7
   186fa:	b004      	add	sp, #16
   186fc:	bd80      	pop	{r7, pc}
   186fe:	46c0      	nop			; (mov r8, r8)
   18700:	0000ffff 	.word	0x0000ffff
   18704:	00037134 	.word	0x00037134
   18708:	000192b1 	.word	0x000192b1
   1870c:	00018e69 	.word	0x00018e69
   18710:	0001946d 	.word	0x0001946d

00018714 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18714:	b580      	push	{r7, lr}
   18716:	b08a      	sub	sp, #40	; 0x28
   18718:	af00      	add	r7, sp, #0
   1871a:	6078      	str	r0, [r7, #4]
   1871c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1871e:	2326      	movs	r3, #38	; 0x26
   18720:	18fb      	adds	r3, r7, r3
   18722:	2200      	movs	r2, #0
   18724:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18726:	687b      	ldr	r3, [r7, #4]
   18728:	2bfe      	cmp	r3, #254	; 0xfe
   1872a:	d904      	bls.n	18736 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1872c:	4b2d      	ldr	r3, [pc, #180]	; (187e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1872e:	0018      	movs	r0, r3
   18730:	4b2d      	ldr	r3, [pc, #180]	; (187e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18732:	4798      	blx	r3
   18734:	e053      	b.n	187de <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18736:	4b2d      	ldr	r3, [pc, #180]	; (187ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18738:	681b      	ldr	r3, [r3, #0]
   1873a:	2b00      	cmp	r3, #0
   1873c:	d004      	beq.n	18748 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1873e:	4b2c      	ldr	r3, [pc, #176]	; (187f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18740:	0018      	movs	r0, r3
   18742:	4b29      	ldr	r3, [pc, #164]	; (187e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18744:	4798      	blx	r3
		return;
   18746:	e04a      	b.n	187de <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18748:	f3ef 8310 	mrs	r3, PRIMASK
   1874c:	613b      	str	r3, [r7, #16]
  return(result);
   1874e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18750:	623b      	str	r3, [r7, #32]
   18752:	2301      	movs	r3, #1
   18754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18756:	697b      	ldr	r3, [r7, #20]
   18758:	f383 8810 	msr	PRIMASK, r3
   1875c:	4b23      	ldr	r3, [pc, #140]	; (187ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1875e:	681b      	ldr	r3, [r3, #0]
   18760:	1c5a      	adds	r2, r3, #1
   18762:	4b22      	ldr	r3, [pc, #136]	; (187ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18764:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18766:	4b23      	ldr	r3, [pc, #140]	; (187f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18768:	681b      	ldr	r3, [r3, #0]
   1876a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1876c:	2b00      	cmp	r3, #0
   1876e:	d02c      	beq.n	187ca <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18770:	4b21      	ldr	r3, [pc, #132]	; (187f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18772:	781b      	ldrb	r3, [r3, #0]
   18774:	2b00      	cmp	r3, #0
   18776:	d028      	beq.n	187ca <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18778:	20ff      	movs	r0, #255	; 0xff
   1877a:	4b20      	ldr	r3, [pc, #128]	; (187fc <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1877c:	4798      	blx	r3
   1877e:	0003      	movs	r3, r0
   18780:	001a      	movs	r2, r3
   18782:	231f      	movs	r3, #31
   18784:	18fb      	adds	r3, r7, r3
   18786:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18788:	683b      	ldr	r3, [r7, #0]
   1878a:	4a1d      	ldr	r2, [pc, #116]	; (18800 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1878c:	0019      	movs	r1, r3
   1878e:	0010      	movs	r0, r2
   18790:	4b1c      	ldr	r3, [pc, #112]	; (18804 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18792:	4798      	blx	r3
   18794:	0002      	movs	r2, r0
   18796:	2326      	movs	r3, #38	; 0x26
   18798:	18fb      	adds	r3, r7, r3
   1879a:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1879c:	4b1a      	ldr	r3, [pc, #104]	; (18808 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1879e:	4798      	blx	r3
   187a0:	0003      	movs	r3, r0
   187a2:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   187a4:	69bb      	ldr	r3, [r7, #24]
   187a6:	2b00      	cmp	r3, #0
   187a8:	d00f      	beq.n	187ca <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   187aa:	69bb      	ldr	r3, [r7, #24]
   187ac:	221f      	movs	r2, #31
   187ae:	18ba      	adds	r2, r7, r2
   187b0:	7812      	ldrb	r2, [r2, #0]
   187b2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   187b4:	687b      	ldr	r3, [r7, #4]
   187b6:	b2da      	uxtb	r2, r3
   187b8:	69bb      	ldr	r3, [r7, #24]
   187ba:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   187bc:	69bb      	ldr	r3, [r7, #24]
   187be:	2226      	movs	r2, #38	; 0x26
   187c0:	18ba      	adds	r2, r7, r2
   187c2:	8812      	ldrh	r2, [r2, #0]
   187c4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   187c6:	4b11      	ldr	r3, [pc, #68]	; (1880c <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   187c8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   187ca:	4b08      	ldr	r3, [pc, #32]	; (187ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   187cc:	681b      	ldr	r3, [r3, #0]
   187ce:	1e5a      	subs	r2, r3, #1
   187d0:	4b06      	ldr	r3, [pc, #24]	; (187ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   187d2:	601a      	str	r2, [r3, #0]
   187d4:	6a3b      	ldr	r3, [r7, #32]
   187d6:	60fb      	str	r3, [r7, #12]
   187d8:	68fb      	ldr	r3, [r7, #12]
   187da:	f383 8810 	msr	PRIMASK, r3
}
   187de:	46bd      	mov	sp, r7
   187e0:	b00a      	add	sp, #40	; 0x28
   187e2:	bd80      	pop	{r7, pc}
   187e4:	00037170 	.word	0x00037170
   187e8:	000192b1 	.word	0x000192b1
   187ec:	20000bc8 	.word	0x20000bc8
   187f0:	000371c8 	.word	0x000371c8
   187f4:	20000c70 	.word	0x20000c70
   187f8:	20000bd4 	.word	0x20000bd4
   187fc:	000194c5 	.word	0x000194c5
   18800:	0000ffff 	.word	0x0000ffff
   18804:	00018689 	.word	0x00018689
   18808:	00018e69 	.word	0x00018e69
   1880c:	0001946d 	.word	0x0001946d

00018810 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18810:	b590      	push	{r4, r7, lr}
   18812:	b089      	sub	sp, #36	; 0x24
   18814:	af00      	add	r7, sp, #0
   18816:	0002      	movs	r2, r0
   18818:	1dfb      	adds	r3, r7, #7
   1881a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1881c:	1dfb      	adds	r3, r7, #7
   1881e:	781b      	ldrb	r3, [r3, #0]
   18820:	2b0f      	cmp	r3, #15
   18822:	d904      	bls.n	1882e <prvTraceStoreTaskswitch+0x1e>
   18824:	4b34      	ldr	r3, [pc, #208]	; (188f8 <prvTraceStoreTaskswitch+0xe8>)
   18826:	0018      	movs	r0, r3
   18828:	4b34      	ldr	r3, [pc, #208]	; (188fc <prvTraceStoreTaskswitch+0xec>)
   1882a:	4798      	blx	r3
   1882c:	e061      	b.n	188f2 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1882e:	f3ef 8310 	mrs	r3, PRIMASK
   18832:	60fb      	str	r3, [r7, #12]
  return(result);
   18834:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18836:	61fb      	str	r3, [r7, #28]
   18838:	2301      	movs	r3, #1
   1883a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1883c:	693b      	ldr	r3, [r7, #16]
   1883e:	f383 8810 	msr	PRIMASK, r3
   18842:	4b2f      	ldr	r3, [pc, #188]	; (18900 <prvTraceStoreTaskswitch+0xf0>)
   18844:	681b      	ldr	r3, [r3, #0]
   18846:	1c5a      	adds	r2, r3, #1
   18848:	4b2d      	ldr	r3, [pc, #180]	; (18900 <prvTraceStoreTaskswitch+0xf0>)
   1884a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1884c:	4b2d      	ldr	r3, [pc, #180]	; (18904 <prvTraceStoreTaskswitch+0xf4>)
   1884e:	781b      	ldrb	r3, [r3, #0]
   18850:	1dfa      	adds	r2, r7, #7
   18852:	7812      	ldrb	r2, [r2, #0]
   18854:	429a      	cmp	r2, r3
   18856:	d042      	beq.n	188de <prvTraceStoreTaskswitch+0xce>
   18858:	4b2b      	ldr	r3, [pc, #172]	; (18908 <prvTraceStoreTaskswitch+0xf8>)
   1885a:	681b      	ldr	r3, [r3, #0]
   1885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1885e:	2b00      	cmp	r3, #0
   18860:	d03d      	beq.n	188de <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18862:	4b2a      	ldr	r3, [pc, #168]	; (1890c <prvTraceStoreTaskswitch+0xfc>)
   18864:	2200      	movs	r2, #0
   18866:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18868:	231a      	movs	r3, #26
   1886a:	18fc      	adds	r4, r7, r3
   1886c:	4b28      	ldr	r3, [pc, #160]	; (18910 <prvTraceStoreTaskswitch+0x100>)
   1886e:	0018      	movs	r0, r3
   18870:	4b28      	ldr	r3, [pc, #160]	; (18914 <prvTraceStoreTaskswitch+0x104>)
   18872:	4798      	blx	r3
   18874:	0003      	movs	r3, r0
   18876:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18878:	4b22      	ldr	r3, [pc, #136]	; (18904 <prvTraceStoreTaskswitch+0xf4>)
   1887a:	1dfa      	adds	r2, r7, #7
   1887c:	7812      	ldrb	r2, [r2, #0]
   1887e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18880:	2319      	movs	r3, #25
   18882:	18fb      	adds	r3, r7, r3
   18884:	4a1f      	ldr	r2, [pc, #124]	; (18904 <prvTraceStoreTaskswitch+0xf4>)
   18886:	7812      	ldrb	r2, [r2, #0]
   18888:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1888a:	4b23      	ldr	r3, [pc, #140]	; (18918 <prvTraceStoreTaskswitch+0x108>)
   1888c:	4798      	blx	r3
   1888e:	0003      	movs	r3, r0
   18890:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18892:	697b      	ldr	r3, [r7, #20]
   18894:	2b00      	cmp	r3, #0
   18896:	d022      	beq.n	188de <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18898:	4b1a      	ldr	r3, [pc, #104]	; (18904 <prvTraceStoreTaskswitch+0xf4>)
   1889a:	781b      	ldrb	r3, [r3, #0]
   1889c:	0019      	movs	r1, r3
   1889e:	2003      	movs	r0, #3
   188a0:	4b1e      	ldr	r3, [pc, #120]	; (1891c <prvTraceStoreTaskswitch+0x10c>)
   188a2:	4798      	blx	r3
   188a4:	0003      	movs	r3, r0
   188a6:	2b01      	cmp	r3, #1
   188a8:	d103      	bne.n	188b2 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   188aa:	697b      	ldr	r3, [r7, #20]
   188ac:	2207      	movs	r2, #7
   188ae:	701a      	strb	r2, [r3, #0]
   188b0:	e002      	b.n	188b8 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   188b2:	697b      	ldr	r3, [r7, #20]
   188b4:	2206      	movs	r2, #6
   188b6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   188b8:	697b      	ldr	r3, [r7, #20]
   188ba:	221a      	movs	r2, #26
   188bc:	18ba      	adds	r2, r7, r2
   188be:	8812      	ldrh	r2, [r2, #0]
   188c0:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   188c2:	697b      	ldr	r3, [r7, #20]
   188c4:	2219      	movs	r2, #25
   188c6:	18ba      	adds	r2, r7, r2
   188c8:	7812      	ldrb	r2, [r2, #0]
   188ca:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   188cc:	4b0d      	ldr	r3, [pc, #52]	; (18904 <prvTraceStoreTaskswitch+0xf4>)
   188ce:	781b      	ldrb	r3, [r3, #0]
   188d0:	2201      	movs	r2, #1
   188d2:	0019      	movs	r1, r3
   188d4:	2003      	movs	r0, #3
   188d6:	4b12      	ldr	r3, [pc, #72]	; (18920 <prvTraceStoreTaskswitch+0x110>)
   188d8:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   188da:	4b12      	ldr	r3, [pc, #72]	; (18924 <prvTraceStoreTaskswitch+0x114>)
   188dc:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   188de:	4b08      	ldr	r3, [pc, #32]	; (18900 <prvTraceStoreTaskswitch+0xf0>)
   188e0:	681b      	ldr	r3, [r3, #0]
   188e2:	1e5a      	subs	r2, r3, #1
   188e4:	4b06      	ldr	r3, [pc, #24]	; (18900 <prvTraceStoreTaskswitch+0xf0>)
   188e6:	601a      	str	r2, [r3, #0]
   188e8:	69fb      	ldr	r3, [r7, #28]
   188ea:	60bb      	str	r3, [r7, #8]
   188ec:	68bb      	ldr	r3, [r7, #8]
   188ee:	f383 8810 	msr	PRIMASK, r3
}
   188f2:	46bd      	mov	sp, r7
   188f4:	b009      	add	sp, #36	; 0x24
   188f6:	bd90      	pop	{r4, r7, pc}
   188f8:	00037200 	.word	0x00037200
   188fc:	000192b1 	.word	0x000192b1
   18900:	20000bc8 	.word	0x20000bc8
   18904:	20000bd4 	.word	0x20000bd4
   18908:	20000c70 	.word	0x20000c70
   1890c:	20000bb4 	.word	0x20000bb4
   18910:	0000ffff 	.word	0x0000ffff
   18914:	000194c5 	.word	0x000194c5
   18918:	00018e69 	.word	0x00018e69
   1891c:	00018b0d 	.word	0x00018b0d
   18920:	00018a69 	.word	0x00018a69
   18924:	0001946d 	.word	0x0001946d

00018928 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18928:	b590      	push	{r4, r7, lr}
   1892a:	b083      	sub	sp, #12
   1892c:	af00      	add	r7, sp, #0
   1892e:	0004      	movs	r4, r0
   18930:	0008      	movs	r0, r1
   18932:	0011      	movs	r1, r2
   18934:	1dfb      	adds	r3, r7, #7
   18936:	1c22      	adds	r2, r4, #0
   18938:	701a      	strb	r2, [r3, #0]
   1893a:	1dbb      	adds	r3, r7, #6
   1893c:	1c02      	adds	r2, r0, #0
   1893e:	701a      	strb	r2, [r3, #0]
   18940:	1d7b      	adds	r3, r7, #5
   18942:	1c0a      	adds	r2, r1, #0
   18944:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18946:	1dfb      	adds	r3, r7, #7
   18948:	781b      	ldrb	r3, [r3, #0]
   1894a:	2b08      	cmp	r3, #8
   1894c:	d904      	bls.n	18958 <prvTraceSetPriorityProperty+0x30>
   1894e:	4b1a      	ldr	r3, [pc, #104]	; (189b8 <prvTraceSetPriorityProperty+0x90>)
   18950:	0018      	movs	r0, r3
   18952:	4b1a      	ldr	r3, [pc, #104]	; (189bc <prvTraceSetPriorityProperty+0x94>)
   18954:	4798      	blx	r3
   18956:	e02c      	b.n	189b2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18958:	4b19      	ldr	r3, [pc, #100]	; (189c0 <prvTraceSetPriorityProperty+0x98>)
   1895a:	681a      	ldr	r2, [r3, #0]
   1895c:	1dfb      	adds	r3, r7, #7
   1895e:	781b      	ldrb	r3, [r3, #0]
   18960:	2164      	movs	r1, #100	; 0x64
   18962:	18d3      	adds	r3, r2, r3
   18964:	185b      	adds	r3, r3, r1
   18966:	781b      	ldrb	r3, [r3, #0]
   18968:	1dba      	adds	r2, r7, #6
   1896a:	7812      	ldrb	r2, [r2, #0]
   1896c:	429a      	cmp	r2, r3
   1896e:	d904      	bls.n	1897a <prvTraceSetPriorityProperty+0x52>
   18970:	4b14      	ldr	r3, [pc, #80]	; (189c4 <prvTraceSetPriorityProperty+0x9c>)
   18972:	0018      	movs	r0, r3
   18974:	4b11      	ldr	r3, [pc, #68]	; (189bc <prvTraceSetPriorityProperty+0x94>)
   18976:	4798      	blx	r3
   18978:	e01b      	b.n	189b2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1897a:	4b11      	ldr	r3, [pc, #68]	; (189c0 <prvTraceSetPriorityProperty+0x98>)
   1897c:	681c      	ldr	r4, [r3, #0]
   1897e:	1dfb      	adds	r3, r7, #7
   18980:	781a      	ldrb	r2, [r3, #0]
   18982:	1dbb      	adds	r3, r7, #6
   18984:	781b      	ldrb	r3, [r3, #0]
   18986:	0011      	movs	r1, r2
   18988:	0018      	movs	r0, r3
   1898a:	4b0f      	ldr	r3, [pc, #60]	; (189c8 <prvTraceSetPriorityProperty+0xa0>)
   1898c:	4798      	blx	r3
   1898e:	0003      	movs	r3, r0
   18990:	0018      	movs	r0, r3
   18992:	4b0b      	ldr	r3, [pc, #44]	; (189c0 <prvTraceSetPriorityProperty+0x98>)
   18994:	681a      	ldr	r2, [r3, #0]
   18996:	1dfb      	adds	r3, r7, #7
   18998:	781b      	ldrb	r3, [r3, #0]
   1899a:	2170      	movs	r1, #112	; 0x70
   1899c:	18d3      	adds	r3, r2, r3
   1899e:	185b      	adds	r3, r3, r1
   189a0:	781b      	ldrb	r3, [r3, #0]
   189a2:	18c3      	adds	r3, r0, r3
   189a4:	3301      	adds	r3, #1
   189a6:	229c      	movs	r2, #156	; 0x9c
   189a8:	18e3      	adds	r3, r4, r3
   189aa:	189b      	adds	r3, r3, r2
   189ac:	1d7a      	adds	r2, r7, #5
   189ae:	7812      	ldrb	r2, [r2, #0]
   189b0:	701a      	strb	r2, [r3, #0]
}
   189b2:	46bd      	mov	sp, r7
   189b4:	b003      	add	sp, #12
   189b6:	bd90      	pop	{r4, r7, pc}
   189b8:	00037394 	.word	0x00037394
   189bc:	000192b1 	.word	0x000192b1
   189c0:	20000c70 	.word	0x20000c70
   189c4:	000373e0 	.word	0x000373e0
   189c8:	00018ebd 	.word	0x00018ebd

000189cc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   189cc:	b590      	push	{r4, r7, lr}
   189ce:	b083      	sub	sp, #12
   189d0:	af00      	add	r7, sp, #0
   189d2:	0002      	movs	r2, r0
   189d4:	1dfb      	adds	r3, r7, #7
   189d6:	701a      	strb	r2, [r3, #0]
   189d8:	1dbb      	adds	r3, r7, #6
   189da:	1c0a      	adds	r2, r1, #0
   189dc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   189de:	1dfb      	adds	r3, r7, #7
   189e0:	781b      	ldrb	r3, [r3, #0]
   189e2:	2b08      	cmp	r3, #8
   189e4:	d905      	bls.n	189f2 <prvTraceGetPriorityProperty+0x26>
   189e6:	4b1b      	ldr	r3, [pc, #108]	; (18a54 <prvTraceGetPriorityProperty+0x88>)
   189e8:	0018      	movs	r0, r3
   189ea:	4b1b      	ldr	r3, [pc, #108]	; (18a58 <prvTraceGetPriorityProperty+0x8c>)
   189ec:	4798      	blx	r3
   189ee:	2300      	movs	r3, #0
   189f0:	e02b      	b.n	18a4a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   189f2:	4b1a      	ldr	r3, [pc, #104]	; (18a5c <prvTraceGetPriorityProperty+0x90>)
   189f4:	681a      	ldr	r2, [r3, #0]
   189f6:	1dfb      	adds	r3, r7, #7
   189f8:	781b      	ldrb	r3, [r3, #0]
   189fa:	2164      	movs	r1, #100	; 0x64
   189fc:	18d3      	adds	r3, r2, r3
   189fe:	185b      	adds	r3, r3, r1
   18a00:	781b      	ldrb	r3, [r3, #0]
   18a02:	1dba      	adds	r2, r7, #6
   18a04:	7812      	ldrb	r2, [r2, #0]
   18a06:	429a      	cmp	r2, r3
   18a08:	d905      	bls.n	18a16 <prvTraceGetPriorityProperty+0x4a>
   18a0a:	4b15      	ldr	r3, [pc, #84]	; (18a60 <prvTraceGetPriorityProperty+0x94>)
   18a0c:	0018      	movs	r0, r3
   18a0e:	4b12      	ldr	r3, [pc, #72]	; (18a58 <prvTraceGetPriorityProperty+0x8c>)
   18a10:	4798      	blx	r3
   18a12:	2300      	movs	r3, #0
   18a14:	e019      	b.n	18a4a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   18a16:	4b11      	ldr	r3, [pc, #68]	; (18a5c <prvTraceGetPriorityProperty+0x90>)
   18a18:	681c      	ldr	r4, [r3, #0]
   18a1a:	1dfb      	adds	r3, r7, #7
   18a1c:	781a      	ldrb	r2, [r3, #0]
   18a1e:	1dbb      	adds	r3, r7, #6
   18a20:	781b      	ldrb	r3, [r3, #0]
   18a22:	0011      	movs	r1, r2
   18a24:	0018      	movs	r0, r3
   18a26:	4b0f      	ldr	r3, [pc, #60]	; (18a64 <prvTraceGetPriorityProperty+0x98>)
   18a28:	4798      	blx	r3
   18a2a:	0003      	movs	r3, r0
   18a2c:	0018      	movs	r0, r3
   18a2e:	4b0b      	ldr	r3, [pc, #44]	; (18a5c <prvTraceGetPriorityProperty+0x90>)
   18a30:	681a      	ldr	r2, [r3, #0]
   18a32:	1dfb      	adds	r3, r7, #7
   18a34:	781b      	ldrb	r3, [r3, #0]
   18a36:	2170      	movs	r1, #112	; 0x70
   18a38:	18d3      	adds	r3, r2, r3
   18a3a:	185b      	adds	r3, r3, r1
   18a3c:	781b      	ldrb	r3, [r3, #0]
   18a3e:	18c3      	adds	r3, r0, r3
   18a40:	3301      	adds	r3, #1
   18a42:	229c      	movs	r2, #156	; 0x9c
   18a44:	18e3      	adds	r3, r4, r3
   18a46:	189b      	adds	r3, r3, r2
   18a48:	781b      	ldrb	r3, [r3, #0]
}
   18a4a:	0018      	movs	r0, r3
   18a4c:	46bd      	mov	sp, r7
   18a4e:	b003      	add	sp, #12
   18a50:	bd90      	pop	{r4, r7, pc}
   18a52:	46c0      	nop			; (mov r8, r8)
   18a54:	00037420 	.word	0x00037420
   18a58:	000192b1 	.word	0x000192b1
   18a5c:	20000c70 	.word	0x20000c70
   18a60:	0003746c 	.word	0x0003746c
   18a64:	00018ebd 	.word	0x00018ebd

00018a68 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18a68:	b590      	push	{r4, r7, lr}
   18a6a:	b083      	sub	sp, #12
   18a6c:	af00      	add	r7, sp, #0
   18a6e:	0004      	movs	r4, r0
   18a70:	0008      	movs	r0, r1
   18a72:	0011      	movs	r1, r2
   18a74:	1dfb      	adds	r3, r7, #7
   18a76:	1c22      	adds	r2, r4, #0
   18a78:	701a      	strb	r2, [r3, #0]
   18a7a:	1dbb      	adds	r3, r7, #6
   18a7c:	1c02      	adds	r2, r0, #0
   18a7e:	701a      	strb	r2, [r3, #0]
   18a80:	1d7b      	adds	r3, r7, #5
   18a82:	1c0a      	adds	r2, r1, #0
   18a84:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18a86:	1dfb      	adds	r3, r7, #7
   18a88:	781b      	ldrb	r3, [r3, #0]
   18a8a:	2b08      	cmp	r3, #8
   18a8c:	d904      	bls.n	18a98 <prvTraceSetObjectState+0x30>
   18a8e:	4b1a      	ldr	r3, [pc, #104]	; (18af8 <prvTraceSetObjectState+0x90>)
   18a90:	0018      	movs	r0, r3
   18a92:	4b1a      	ldr	r3, [pc, #104]	; (18afc <prvTraceSetObjectState+0x94>)
   18a94:	4798      	blx	r3
   18a96:	e02b      	b.n	18af0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18a98:	4b19      	ldr	r3, [pc, #100]	; (18b00 <prvTraceSetObjectState+0x98>)
   18a9a:	681a      	ldr	r2, [r3, #0]
   18a9c:	1dfb      	adds	r3, r7, #7
   18a9e:	781b      	ldrb	r3, [r3, #0]
   18aa0:	2164      	movs	r1, #100	; 0x64
   18aa2:	18d3      	adds	r3, r2, r3
   18aa4:	185b      	adds	r3, r3, r1
   18aa6:	781b      	ldrb	r3, [r3, #0]
   18aa8:	1dba      	adds	r2, r7, #6
   18aaa:	7812      	ldrb	r2, [r2, #0]
   18aac:	429a      	cmp	r2, r3
   18aae:	d904      	bls.n	18aba <prvTraceSetObjectState+0x52>
   18ab0:	4b14      	ldr	r3, [pc, #80]	; (18b04 <prvTraceSetObjectState+0x9c>)
   18ab2:	0018      	movs	r0, r3
   18ab4:	4b11      	ldr	r3, [pc, #68]	; (18afc <prvTraceSetObjectState+0x94>)
   18ab6:	4798      	blx	r3
   18ab8:	e01a      	b.n	18af0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18aba:	4b11      	ldr	r3, [pc, #68]	; (18b00 <prvTraceSetObjectState+0x98>)
   18abc:	681c      	ldr	r4, [r3, #0]
   18abe:	1dfb      	adds	r3, r7, #7
   18ac0:	781a      	ldrb	r2, [r3, #0]
   18ac2:	1dbb      	adds	r3, r7, #6
   18ac4:	781b      	ldrb	r3, [r3, #0]
   18ac6:	0011      	movs	r1, r2
   18ac8:	0018      	movs	r0, r3
   18aca:	4b0f      	ldr	r3, [pc, #60]	; (18b08 <prvTraceSetObjectState+0xa0>)
   18acc:	4798      	blx	r3
   18ace:	0003      	movs	r3, r0
   18ad0:	0018      	movs	r0, r3
   18ad2:	4b0b      	ldr	r3, [pc, #44]	; (18b00 <prvTraceSetObjectState+0x98>)
   18ad4:	681a      	ldr	r2, [r3, #0]
   18ad6:	1dfb      	adds	r3, r7, #7
   18ad8:	781b      	ldrb	r3, [r3, #0]
   18ada:	2170      	movs	r1, #112	; 0x70
   18adc:	18d3      	adds	r3, r2, r3
   18ade:	185b      	adds	r3, r3, r1
   18ae0:	781b      	ldrb	r3, [r3, #0]
   18ae2:	18c3      	adds	r3, r0, r3
   18ae4:	229c      	movs	r2, #156	; 0x9c
   18ae6:	18e3      	adds	r3, r4, r3
   18ae8:	189b      	adds	r3, r3, r2
   18aea:	1d7a      	adds	r2, r7, #5
   18aec:	7812      	ldrb	r2, [r2, #0]
   18aee:	701a      	strb	r2, [r3, #0]
}
   18af0:	46bd      	mov	sp, r7
   18af2:	b003      	add	sp, #12
   18af4:	bd90      	pop	{r4, r7, pc}
   18af6:	46c0      	nop			; (mov r8, r8)
   18af8:	000374ac 	.word	0x000374ac
   18afc:	000192b1 	.word	0x000192b1
   18b00:	20000c70 	.word	0x20000c70
   18b04:	000374f0 	.word	0x000374f0
   18b08:	00018ebd 	.word	0x00018ebd

00018b0c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18b0c:	b590      	push	{r4, r7, lr}
   18b0e:	b083      	sub	sp, #12
   18b10:	af00      	add	r7, sp, #0
   18b12:	0002      	movs	r2, r0
   18b14:	1dfb      	adds	r3, r7, #7
   18b16:	701a      	strb	r2, [r3, #0]
   18b18:	1dbb      	adds	r3, r7, #6
   18b1a:	1c0a      	adds	r2, r1, #0
   18b1c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18b1e:	1dfb      	adds	r3, r7, #7
   18b20:	781b      	ldrb	r3, [r3, #0]
   18b22:	2b08      	cmp	r3, #8
   18b24:	d905      	bls.n	18b32 <prvTraceGetObjectState+0x26>
   18b26:	4b1a      	ldr	r3, [pc, #104]	; (18b90 <prvTraceGetObjectState+0x84>)
   18b28:	0018      	movs	r0, r3
   18b2a:	4b1a      	ldr	r3, [pc, #104]	; (18b94 <prvTraceGetObjectState+0x88>)
   18b2c:	4798      	blx	r3
   18b2e:	2300      	movs	r3, #0
   18b30:	e02a      	b.n	18b88 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18b32:	4b19      	ldr	r3, [pc, #100]	; (18b98 <prvTraceGetObjectState+0x8c>)
   18b34:	681a      	ldr	r2, [r3, #0]
   18b36:	1dfb      	adds	r3, r7, #7
   18b38:	781b      	ldrb	r3, [r3, #0]
   18b3a:	2164      	movs	r1, #100	; 0x64
   18b3c:	18d3      	adds	r3, r2, r3
   18b3e:	185b      	adds	r3, r3, r1
   18b40:	781b      	ldrb	r3, [r3, #0]
   18b42:	1dba      	adds	r2, r7, #6
   18b44:	7812      	ldrb	r2, [r2, #0]
   18b46:	429a      	cmp	r2, r3
   18b48:	d905      	bls.n	18b56 <prvTraceGetObjectState+0x4a>
   18b4a:	4b14      	ldr	r3, [pc, #80]	; (18b9c <prvTraceGetObjectState+0x90>)
   18b4c:	0018      	movs	r0, r3
   18b4e:	4b11      	ldr	r3, [pc, #68]	; (18b94 <prvTraceGetObjectState+0x88>)
   18b50:	4798      	blx	r3
   18b52:	2300      	movs	r3, #0
   18b54:	e018      	b.n	18b88 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   18b56:	4b10      	ldr	r3, [pc, #64]	; (18b98 <prvTraceGetObjectState+0x8c>)
   18b58:	681c      	ldr	r4, [r3, #0]
   18b5a:	1dfb      	adds	r3, r7, #7
   18b5c:	781a      	ldrb	r2, [r3, #0]
   18b5e:	1dbb      	adds	r3, r7, #6
   18b60:	781b      	ldrb	r3, [r3, #0]
   18b62:	0011      	movs	r1, r2
   18b64:	0018      	movs	r0, r3
   18b66:	4b0e      	ldr	r3, [pc, #56]	; (18ba0 <prvTraceGetObjectState+0x94>)
   18b68:	4798      	blx	r3
   18b6a:	0003      	movs	r3, r0
   18b6c:	0018      	movs	r0, r3
   18b6e:	4b0a      	ldr	r3, [pc, #40]	; (18b98 <prvTraceGetObjectState+0x8c>)
   18b70:	681a      	ldr	r2, [r3, #0]
   18b72:	1dfb      	adds	r3, r7, #7
   18b74:	781b      	ldrb	r3, [r3, #0]
   18b76:	2170      	movs	r1, #112	; 0x70
   18b78:	18d3      	adds	r3, r2, r3
   18b7a:	185b      	adds	r3, r3, r1
   18b7c:	781b      	ldrb	r3, [r3, #0]
   18b7e:	18c3      	adds	r3, r0, r3
   18b80:	229c      	movs	r2, #156	; 0x9c
   18b82:	18e3      	adds	r3, r4, r3
   18b84:	189b      	adds	r3, r3, r2
   18b86:	781b      	ldrb	r3, [r3, #0]
}
   18b88:	0018      	movs	r0, r3
   18b8a:	46bd      	mov	sp, r7
   18b8c:	b003      	add	sp, #12
   18b8e:	bd90      	pop	{r4, r7, pc}
   18b90:	0003752c 	.word	0x0003752c
   18b94:	000192b1 	.word	0x000192b1
   18b98:	20000c70 	.word	0x20000c70
   18b9c:	00037570 	.word	0x00037570
   18ba0:	00018ebd 	.word	0x00018ebd

00018ba4 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   18ba4:	b590      	push	{r4, r7, lr}
   18ba6:	b083      	sub	sp, #12
   18ba8:	af00      	add	r7, sp, #0
   18baa:	0002      	movs	r2, r0
   18bac:	1dfb      	adds	r3, r7, #7
   18bae:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   18bb0:	4b11      	ldr	r3, [pc, #68]	; (18bf8 <prvTraceSetTaskInstanceFinished+0x54>)
   18bb2:	681b      	ldr	r3, [r3, #0]
   18bb4:	2267      	movs	r2, #103	; 0x67
   18bb6:	5c9b      	ldrb	r3, [r3, r2]
   18bb8:	1dfa      	adds	r2, r7, #7
   18bba:	7812      	ldrb	r2, [r2, #0]
   18bbc:	429a      	cmp	r2, r3
   18bbe:	d904      	bls.n	18bca <prvTraceSetTaskInstanceFinished+0x26>
   18bc0:	4b0e      	ldr	r3, [pc, #56]	; (18bfc <prvTraceSetTaskInstanceFinished+0x58>)
   18bc2:	0018      	movs	r0, r3
   18bc4:	4b0e      	ldr	r3, [pc, #56]	; (18c00 <prvTraceSetTaskInstanceFinished+0x5c>)
   18bc6:	4798      	blx	r3
   18bc8:	e013      	b.n	18bf2 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   18bca:	4b0b      	ldr	r3, [pc, #44]	; (18bf8 <prvTraceSetTaskInstanceFinished+0x54>)
   18bcc:	681c      	ldr	r4, [r3, #0]
   18bce:	1dfb      	adds	r3, r7, #7
   18bd0:	781b      	ldrb	r3, [r3, #0]
   18bd2:	2103      	movs	r1, #3
   18bd4:	0018      	movs	r0, r3
   18bd6:	4b0b      	ldr	r3, [pc, #44]	; (18c04 <prvTraceSetTaskInstanceFinished+0x60>)
   18bd8:	4798      	blx	r3
   18bda:	0003      	movs	r3, r0
   18bdc:	0019      	movs	r1, r3
   18bde:	4b06      	ldr	r3, [pc, #24]	; (18bf8 <prvTraceSetTaskInstanceFinished+0x54>)
   18be0:	681b      	ldr	r3, [r3, #0]
   18be2:	2273      	movs	r2, #115	; 0x73
   18be4:	5c9b      	ldrb	r3, [r3, r2]
   18be6:	18cb      	adds	r3, r1, r3
   18be8:	229c      	movs	r2, #156	; 0x9c
   18bea:	18e3      	adds	r3, r4, r3
   18bec:	189b      	adds	r3, r3, r2
   18bee:	2200      	movs	r2, #0
   18bf0:	701a      	strb	r2, [r3, #0]
#endif
}
   18bf2:	46bd      	mov	sp, r7
   18bf4:	b003      	add	sp, #12
   18bf6:	bd90      	pop	{r4, r7, pc}
   18bf8:	20000c70 	.word	0x20000c70
   18bfc:	000375ac 	.word	0x000375ac
   18c00:	000192b1 	.word	0x000192b1
   18c04:	00018ebd 	.word	0x00018ebd

00018c08 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   18c08:	b580      	push	{r7, lr}
   18c0a:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   18c0c:	4b75      	ldr	r3, [pc, #468]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c0e:	681b      	ldr	r3, [r3, #0]
   18c10:	2b00      	cmp	r3, #0
   18c12:	d103      	bne.n	18c1c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   18c14:	4b73      	ldr	r3, [pc, #460]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c16:	4a74      	ldr	r2, [pc, #464]	; (18de8 <prvTraceInitTraceData+0x1e0>)
   18c18:	601a      	str	r2, [r3, #0]
   18c1a:	e006      	b.n	18c2a <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   18c1c:	4b71      	ldr	r3, [pc, #452]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c1e:	681b      	ldr	r3, [r3, #0]
   18c20:	781b      	ldrb	r3, [r3, #0]
   18c22:	b2db      	uxtb	r3, r3
   18c24:	2b01      	cmp	r3, #1
   18c26:	d100      	bne.n	18c2a <prvTraceInitTraceData+0x22>
   18c28:	e0d8      	b.n	18ddc <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   18c2a:	4b70      	ldr	r3, [pc, #448]	; (18dec <prvTraceInitTraceData+0x1e4>)
   18c2c:	681a      	ldr	r2, [r3, #0]
   18c2e:	4b70      	ldr	r3, [pc, #448]	; (18df0 <prvTraceInitTraceData+0x1e8>)
   18c30:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   18c32:	4b6c      	ldr	r3, [pc, #432]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c34:	6818      	ldr	r0, [r3, #0]
   18c36:	23bd      	movs	r3, #189	; 0xbd
   18c38:	011b      	lsls	r3, r3, #4
   18c3a:	001a      	movs	r2, r3
   18c3c:	2100      	movs	r1, #0
   18c3e:	4b6d      	ldr	r3, [pc, #436]	; (18df4 <prvTraceInitTraceData+0x1ec>)
   18c40:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   18c42:	4b68      	ldr	r3, [pc, #416]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c44:	681b      	ldr	r3, [r3, #0]
   18c46:	4a6c      	ldr	r2, [pc, #432]	; (18df8 <prvTraceInitTraceData+0x1f0>)
   18c48:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   18c4a:	4b66      	ldr	r3, [pc, #408]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c4c:	681b      	ldr	r3, [r3, #0]
   18c4e:	2205      	movs	r2, #5
   18c50:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   18c52:	4b64      	ldr	r3, [pc, #400]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c54:	681b      	ldr	r3, [r3, #0]
   18c56:	2200      	movs	r2, #0
   18c58:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   18c5a:	4b62      	ldr	r3, [pc, #392]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c5c:	681b      	ldr	r3, [r3, #0]
   18c5e:	22bd      	movs	r2, #189	; 0xbd
   18c60:	0112      	lsls	r2, r2, #4
   18c62:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   18c64:	4b5f      	ldr	r3, [pc, #380]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c66:	681b      	ldr	r3, [r3, #0]
   18c68:	2296      	movs	r2, #150	; 0x96
   18c6a:	0052      	lsls	r2, r2, #1
   18c6c:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   18c6e:	4b5d      	ldr	r3, [pc, #372]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c70:	681b      	ldr	r3, [r3, #0]
   18c72:	4a62      	ldr	r2, [pc, #392]	; (18dfc <prvTraceInitTraceData+0x1f4>)
   18c74:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   18c76:	4b5b      	ldr	r3, [pc, #364]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c78:	681b      	ldr	r3, [r3, #0]
   18c7a:	2200      	movs	r2, #0
   18c7c:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   18c7e:	4b59      	ldr	r3, [pc, #356]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c80:	681b      	ldr	r3, [r3, #0]
   18c82:	2200      	movs	r2, #0
   18c84:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   18c86:	4b5e      	ldr	r3, [pc, #376]	; (18e00 <prvTraceInitTraceData+0x1f8>)
   18c88:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   18c8a:	4b56      	ldr	r3, [pc, #344]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c8c:	681b      	ldr	r3, [r3, #0]
   18c8e:	4a5d      	ldr	r2, [pc, #372]	; (18e04 <prvTraceInitTraceData+0x1fc>)
   18c90:	495d      	ldr	r1, [pc, #372]	; (18e08 <prvTraceInitTraceData+0x200>)
   18c92:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   18c94:	4b53      	ldr	r3, [pc, #332]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18c96:	681a      	ldr	r2, [r3, #0]
   18c98:	23ac      	movs	r3, #172	; 0xac
   18c9a:	00db      	lsls	r3, r3, #3
   18c9c:	21c8      	movs	r1, #200	; 0xc8
   18c9e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   18ca0:	4b50      	ldr	r3, [pc, #320]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18ca2:	681b      	ldr	r3, [r3, #0]
   18ca4:	4a59      	ldr	r2, [pc, #356]	; (18e0c <prvTraceInitTraceData+0x204>)
   18ca6:	2101      	movs	r1, #1
   18ca8:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   18caa:	4b4e      	ldr	r3, [pc, #312]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18cac:	681a      	ldr	r2, [r3, #0]
   18cae:	23d7      	movs	r3, #215	; 0xd7
   18cb0:	00db      	lsls	r3, r3, #3
   18cb2:	4957      	ldr	r1, [pc, #348]	; (18e10 <prvTraceInitTraceData+0x208>)
   18cb4:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   18cb6:	4b4b      	ldr	r3, [pc, #300]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18cb8:	681b      	ldr	r3, [r3, #0]
   18cba:	4a56      	ldr	r2, [pc, #344]	; (18e14 <prvTraceInitTraceData+0x20c>)
   18cbc:	4694      	mov	ip, r2
   18cbe:	4463      	add	r3, ip
   18cc0:	4955      	ldr	r1, [pc, #340]	; (18e18 <prvTraceInitTraceData+0x210>)
   18cc2:	2250      	movs	r2, #80	; 0x50
   18cc4:	0018      	movs	r0, r3
   18cc6:	4b55      	ldr	r3, [pc, #340]	; (18e1c <prvTraceInitTraceData+0x214>)
   18cc8:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   18cca:	4b46      	ldr	r3, [pc, #280]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18ccc:	681b      	ldr	r3, [r3, #0]
   18cce:	4a54      	ldr	r2, [pc, #336]	; (18e20 <prvTraceInitTraceData+0x218>)
   18cd0:	4954      	ldr	r1, [pc, #336]	; (18e24 <prvTraceInitTraceData+0x21c>)
   18cd2:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   18cd4:	4b43      	ldr	r3, [pc, #268]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18cd6:	681b      	ldr	r3, [r3, #0]
   18cd8:	4a53      	ldr	r2, [pc, #332]	; (18e28 <prvTraceInitTraceData+0x220>)
   18cda:	210a      	movs	r1, #10
   18cdc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   18cde:	4b41      	ldr	r3, [pc, #260]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18ce0:	681b      	ldr	r3, [r3, #0]
   18ce2:	4a52      	ldr	r2, [pc, #328]	; (18e2c <prvTraceInitTraceData+0x224>)
   18ce4:	210b      	movs	r1, #11
   18ce6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   18ce8:	4b3e      	ldr	r3, [pc, #248]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18cea:	681b      	ldr	r3, [r3, #0]
   18cec:	4a50      	ldr	r2, [pc, #320]	; (18e30 <prvTraceInitTraceData+0x228>)
   18cee:	210c      	movs	r1, #12
   18cf0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   18cf2:	4b3c      	ldr	r3, [pc, #240]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18cf4:	681b      	ldr	r3, [r3, #0]
   18cf6:	4a4f      	ldr	r2, [pc, #316]	; (18e34 <prvTraceInitTraceData+0x22c>)
   18cf8:	210d      	movs	r1, #13
   18cfa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   18cfc:	4b39      	ldr	r3, [pc, #228]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18cfe:	681b      	ldr	r3, [r3, #0]
   18d00:	4a4d      	ldr	r2, [pc, #308]	; (18e38 <prvTraceInitTraceData+0x230>)
   18d02:	2171      	movs	r1, #113	; 0x71
   18d04:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   18d06:	4b37      	ldr	r3, [pc, #220]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d08:	681b      	ldr	r3, [r3, #0]
   18d0a:	4a4c      	ldr	r2, [pc, #304]	; (18e3c <prvTraceInitTraceData+0x234>)
   18d0c:	2172      	movs	r1, #114	; 0x72
   18d0e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   18d10:	4b34      	ldr	r3, [pc, #208]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d12:	681b      	ldr	r3, [r3, #0]
   18d14:	4a4a      	ldr	r2, [pc, #296]	; (18e40 <prvTraceInitTraceData+0x238>)
   18d16:	2173      	movs	r1, #115	; 0x73
   18d18:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   18d1a:	4b32      	ldr	r3, [pc, #200]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d1c:	681b      	ldr	r3, [r3, #0]
   18d1e:	4a49      	ldr	r2, [pc, #292]	; (18e44 <prvTraceInitTraceData+0x23c>)
   18d20:	2174      	movs	r1, #116	; 0x74
   18d22:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   18d24:	4b2f      	ldr	r3, [pc, #188]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d26:	681b      	ldr	r3, [r3, #0]
   18d28:	4a47      	ldr	r2, [pc, #284]	; (18e48 <prvTraceInitTraceData+0x240>)
   18d2a:	21f1      	movs	r1, #241	; 0xf1
   18d2c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   18d2e:	4b2d      	ldr	r3, [pc, #180]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d30:	681b      	ldr	r3, [r3, #0]
   18d32:	4a46      	ldr	r2, [pc, #280]	; (18e4c <prvTraceInitTraceData+0x244>)
   18d34:	21f2      	movs	r1, #242	; 0xf2
   18d36:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   18d38:	4b2a      	ldr	r3, [pc, #168]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d3a:	681b      	ldr	r3, [r3, #0]
   18d3c:	4a44      	ldr	r2, [pc, #272]	; (18e50 <prvTraceInitTraceData+0x248>)
   18d3e:	21f3      	movs	r1, #243	; 0xf3
   18d40:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   18d42:	4b28      	ldr	r3, [pc, #160]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d44:	681b      	ldr	r3, [r3, #0]
   18d46:	4a43      	ldr	r2, [pc, #268]	; (18e54 <prvTraceInitTraceData+0x24c>)
   18d48:	21f4      	movs	r1, #244	; 0xf4
   18d4a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   18d4c:	4b42      	ldr	r3, [pc, #264]	; (18e58 <prvTraceInitTraceData+0x250>)
   18d4e:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   18d50:	4b24      	ldr	r3, [pc, #144]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d52:	681b      	ldr	r3, [r3, #0]
   18d54:	22f4      	movs	r2, #244	; 0xf4
   18d56:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   18d58:	4b22      	ldr	r3, [pc, #136]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d5a:	681b      	ldr	r3, [r3, #0]
   18d5c:	22f3      	movs	r2, #243	; 0xf3
   18d5e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   18d60:	4b20      	ldr	r3, [pc, #128]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d62:	681b      	ldr	r3, [r3, #0]
   18d64:	22f2      	movs	r2, #242	; 0xf2
   18d66:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   18d68:	4b1e      	ldr	r3, [pc, #120]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d6a:	681b      	ldr	r3, [r3, #0]
   18d6c:	22f1      	movs	r2, #241	; 0xf1
   18d6e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   18d70:	4b1c      	ldr	r3, [pc, #112]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d72:	681b      	ldr	r3, [r3, #0]
   18d74:	2274      	movs	r2, #116	; 0x74
   18d76:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   18d78:	4b1a      	ldr	r3, [pc, #104]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d7a:	681b      	ldr	r3, [r3, #0]
   18d7c:	2273      	movs	r2, #115	; 0x73
   18d7e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   18d80:	4b18      	ldr	r3, [pc, #96]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d82:	681b      	ldr	r3, [r3, #0]
   18d84:	2272      	movs	r2, #114	; 0x72
   18d86:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   18d88:	4b16      	ldr	r3, [pc, #88]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d8a:	681b      	ldr	r3, [r3, #0]
   18d8c:	2271      	movs	r2, #113	; 0x71
   18d8e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   18d90:	4b14      	ldr	r3, [pc, #80]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d92:	681b      	ldr	r3, [r3, #0]
   18d94:	2204      	movs	r2, #4
   18d96:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   18d98:	4b12      	ldr	r3, [pc, #72]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18d9a:	681b      	ldr	r3, [r3, #0]
   18d9c:	2203      	movs	r2, #3
   18d9e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   18da0:	4b10      	ldr	r3, [pc, #64]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18da2:	681b      	ldr	r3, [r3, #0]
   18da4:	2202      	movs	r2, #2
   18da6:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   18da8:	4b0e      	ldr	r3, [pc, #56]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18daa:	681b      	ldr	r3, [r3, #0]
   18dac:	2201      	movs	r2, #1
   18dae:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   18db0:	4b2a      	ldr	r3, [pc, #168]	; (18e5c <prvTraceInitTraceData+0x254>)
   18db2:	681b      	ldr	r3, [r3, #0]
   18db4:	2b00      	cmp	r3, #0
   18db6:	d012      	beq.n	18dde <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18db8:	4b0a      	ldr	r3, [pc, #40]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18dba:	681b      	ldr	r3, [r3, #0]
   18dbc:	4a15      	ldr	r2, [pc, #84]	; (18e14 <prvTraceInitTraceData+0x20c>)
   18dbe:	1898      	adds	r0, r3, r2
   18dc0:	4b26      	ldr	r3, [pc, #152]	; (18e5c <prvTraceInitTraceData+0x254>)
   18dc2:	681b      	ldr	r3, [r3, #0]
   18dc4:	2250      	movs	r2, #80	; 0x50
   18dc6:	0019      	movs	r1, r3
   18dc8:	4b14      	ldr	r3, [pc, #80]	; (18e1c <prvTraceInitTraceData+0x214>)
   18dca:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   18dcc:	4b05      	ldr	r3, [pc, #20]	; (18de4 <prvTraceInitTraceData+0x1dc>)
   18dce:	681b      	ldr	r3, [r3, #0]
   18dd0:	4a23      	ldr	r2, [pc, #140]	; (18e60 <prvTraceInitTraceData+0x258>)
   18dd2:	2101      	movs	r1, #1
   18dd4:	5099      	str	r1, [r3, r2]
		vTraceStop();
   18dd6:	4b23      	ldr	r3, [pc, #140]	; (18e64 <prvTraceInitTraceData+0x25c>)
   18dd8:	4798      	blx	r3
   18dda:	e000      	b.n	18dde <prvTraceInitTraceData+0x1d6>
			return;
   18ddc:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   18dde:	46bd      	mov	sp, r7
   18de0:	bd80      	pop	{r7, pc}
   18de2:	46c0      	nop			; (mov r8, r8)
   18de4:	20000c70 	.word	0x20000c70
   18de8:	20004800 	.word	0x20004800
   18dec:	e000e018 	.word	0xe000e018
   18df0:	200053d0 	.word	0x200053d0
   18df4:	00034317 	.word	0x00034317
   18df8:	00001aa1 	.word	0x00001aa1
   18dfc:	f0f0f0f0 	.word	0xf0f0f0f0
   18e00:	00017d6d 	.word	0x00017d6d
   18e04:	0000055c 	.word	0x0000055c
   18e08:	f1f1f1f1 	.word	0xf1f1f1f1
   18e0c:	00000564 	.word	0x00000564
   18e10:	f2f2f2f2 	.word	0xf2f2f2f2
   18e14:	000006bc 	.word	0x000006bc
   18e18:	000375f4 	.word	0x000375f4
   18e1c:	0001917d 	.word	0x0001917d
   18e20:	0000070c 	.word	0x0000070c
   18e24:	f3f3f3f3 	.word	0xf3f3f3f3
   18e28:	00000bc4 	.word	0x00000bc4
   18e2c:	00000bc5 	.word	0x00000bc5
   18e30:	00000bc6 	.word	0x00000bc6
   18e34:	00000bc7 	.word	0x00000bc7
   18e38:	00000bc8 	.word	0x00000bc8
   18e3c:	00000bc9 	.word	0x00000bc9
   18e40:	00000bca 	.word	0x00000bca
   18e44:	00000bcb 	.word	0x00000bcb
   18e48:	00000bcc 	.word	0x00000bcc
   18e4c:	00000bcd 	.word	0x00000bcd
   18e50:	00000bce 	.word	0x00000bce
   18e54:	00000bcf 	.word	0x00000bcf
   18e58:	00017f0d 	.word	0x00017f0d
   18e5c:	20000bd0 	.word	0x20000bd0
   18e60:	000006b4 	.word	0x000006b4
   18e64:	00018175 	.word	0x00018175

00018e68 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   18e68:	b580      	push	{r7, lr}
   18e6a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   18e6c:	4b10      	ldr	r3, [pc, #64]	; (18eb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18e6e:	681b      	ldr	r3, [r3, #0]
   18e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18e72:	2b00      	cmp	r3, #0
   18e74:	d101      	bne.n	18e7a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   18e76:	2300      	movs	r3, #0
   18e78:	e017      	b.n	18eaa <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18e7a:	4b0d      	ldr	r3, [pc, #52]	; (18eb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18e7c:	681b      	ldr	r3, [r3, #0]
   18e7e:	69da      	ldr	r2, [r3, #28]
   18e80:	232c      	movs	r3, #44	; 0x2c
   18e82:	33ff      	adds	r3, #255	; 0xff
   18e84:	429a      	cmp	r2, r3
   18e86:	d905      	bls.n	18e94 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   18e88:	4b0a      	ldr	r3, [pc, #40]	; (18eb4 <prvTraceNextFreeEventBufferSlot+0x4c>)
   18e8a:	0018      	movs	r0, r3
   18e8c:	4b0a      	ldr	r3, [pc, #40]	; (18eb8 <prvTraceNextFreeEventBufferSlot+0x50>)
   18e8e:	4798      	blx	r3
		return NULL;
   18e90:	2300      	movs	r3, #0
   18e92:	e00a      	b.n	18eaa <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   18e94:	4b06      	ldr	r3, [pc, #24]	; (18eb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18e96:	681a      	ldr	r2, [r3, #0]
   18e98:	4b05      	ldr	r3, [pc, #20]	; (18eb0 <prvTraceNextFreeEventBufferSlot+0x48>)
   18e9a:	681b      	ldr	r3, [r3, #0]
   18e9c:	69db      	ldr	r3, [r3, #28]
   18e9e:	009b      	lsls	r3, r3, #2
   18ea0:	21e2      	movs	r1, #226	; 0xe2
   18ea2:	00c9      	lsls	r1, r1, #3
   18ea4:	468c      	mov	ip, r1
   18ea6:	4463      	add	r3, ip
   18ea8:	18d3      	adds	r3, r2, r3
}
   18eaa:	0018      	movs	r0, r3
   18eac:	46bd      	mov	sp, r7
   18eae:	bd80      	pop	{r7, pc}
   18eb0:	20000c70 	.word	0x20000c70
   18eb4:	00037608 	.word	0x00037608
   18eb8:	000192b1 	.word	0x000192b1

00018ebc <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   18ebc:	b580      	push	{r7, lr}
   18ebe:	b082      	sub	sp, #8
   18ec0:	af00      	add	r7, sp, #0
   18ec2:	0002      	movs	r2, r0
   18ec4:	1dfb      	adds	r3, r7, #7
   18ec6:	701a      	strb	r2, [r3, #0]
   18ec8:	1dbb      	adds	r3, r7, #6
   18eca:	1c0a      	adds	r2, r1, #0
   18ecc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18ece:	1dbb      	adds	r3, r7, #6
   18ed0:	781b      	ldrb	r3, [r3, #0]
   18ed2:	2b08      	cmp	r3, #8
   18ed4:	d905      	bls.n	18ee2 <uiIndexOfObject+0x26>
   18ed6:	4b2a      	ldr	r3, [pc, #168]	; (18f80 <uiIndexOfObject+0xc4>)
   18ed8:	0018      	movs	r0, r3
   18eda:	4b2a      	ldr	r3, [pc, #168]	; (18f84 <uiIndexOfObject+0xc8>)
   18edc:	4798      	blx	r3
   18ede:	2300      	movs	r3, #0
   18ee0:	e049      	b.n	18f76 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   18ee2:	1dfb      	adds	r3, r7, #7
   18ee4:	781b      	ldrb	r3, [r3, #0]
   18ee6:	2b00      	cmp	r3, #0
   18ee8:	d00b      	beq.n	18f02 <uiIndexOfObject+0x46>
   18eea:	4b27      	ldr	r3, [pc, #156]	; (18f88 <uiIndexOfObject+0xcc>)
   18eec:	681a      	ldr	r2, [r3, #0]
   18eee:	1dbb      	adds	r3, r7, #6
   18ef0:	781b      	ldrb	r3, [r3, #0]
   18ef2:	2164      	movs	r1, #100	; 0x64
   18ef4:	18d3      	adds	r3, r2, r3
   18ef6:	185b      	adds	r3, r3, r1
   18ef8:	781b      	ldrb	r3, [r3, #0]
   18efa:	1dfa      	adds	r2, r7, #7
   18efc:	7812      	ldrb	r2, [r2, #0]
   18efe:	429a      	cmp	r2, r3
   18f00:	d905      	bls.n	18f0e <uiIndexOfObject+0x52>
   18f02:	4b22      	ldr	r3, [pc, #136]	; (18f8c <uiIndexOfObject+0xd0>)
   18f04:	0018      	movs	r0, r3
   18f06:	4b1f      	ldr	r3, [pc, #124]	; (18f84 <uiIndexOfObject+0xc8>)
   18f08:	4798      	blx	r3
   18f0a:	2300      	movs	r3, #0
   18f0c:	e033      	b.n	18f76 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   18f0e:	1dbb      	adds	r3, r7, #6
   18f10:	781b      	ldrb	r3, [r3, #0]
   18f12:	2b08      	cmp	r3, #8
   18f14:	d82a      	bhi.n	18f6c <uiIndexOfObject+0xb0>
   18f16:	1dfb      	adds	r3, r7, #7
   18f18:	781b      	ldrb	r3, [r3, #0]
   18f1a:	2b00      	cmp	r3, #0
   18f1c:	d026      	beq.n	18f6c <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   18f1e:	4b1a      	ldr	r3, [pc, #104]	; (18f88 <uiIndexOfObject+0xcc>)
   18f20:	681a      	ldr	r2, [r3, #0]
   18f22:	1dbb      	adds	r3, r7, #6
   18f24:	781b      	ldrb	r3, [r3, #0]
   18f26:	2164      	movs	r1, #100	; 0x64
   18f28:	18d3      	adds	r3, r2, r3
   18f2a:	185b      	adds	r3, r3, r1
   18f2c:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   18f2e:	1dfa      	adds	r2, r7, #7
   18f30:	7812      	ldrb	r2, [r2, #0]
   18f32:	429a      	cmp	r2, r3
   18f34:	d81a      	bhi.n	18f6c <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18f36:	4b14      	ldr	r3, [pc, #80]	; (18f88 <uiIndexOfObject+0xcc>)
   18f38:	681a      	ldr	r2, [r3, #0]
   18f3a:	1dbb      	adds	r3, r7, #6
   18f3c:	781b      	ldrb	r3, [r3, #0]
   18f3e:	3340      	adds	r3, #64	; 0x40
   18f40:	005b      	lsls	r3, r3, #1
   18f42:	18d3      	adds	r3, r2, r3
   18f44:	3308      	adds	r3, #8
   18f46:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18f48:	4b0f      	ldr	r3, [pc, #60]	; (18f88 <uiIndexOfObject+0xcc>)
   18f4a:	6819      	ldr	r1, [r3, #0]
   18f4c:	1dbb      	adds	r3, r7, #6
   18f4e:	781b      	ldrb	r3, [r3, #0]
   18f50:	207c      	movs	r0, #124	; 0x7c
   18f52:	18cb      	adds	r3, r1, r3
   18f54:	181b      	adds	r3, r3, r0
   18f56:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18f58:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18f5a:	1df9      	adds	r1, r7, #7
   18f5c:	7809      	ldrb	r1, [r1, #0]
   18f5e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18f60:	b289      	uxth	r1, r1
   18f62:	434b      	muls	r3, r1
   18f64:	b29b      	uxth	r3, r3
   18f66:	18d3      	adds	r3, r2, r3
   18f68:	b29b      	uxth	r3, r3
   18f6a:	e004      	b.n	18f76 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   18f6c:	4b08      	ldr	r3, [pc, #32]	; (18f90 <uiIndexOfObject+0xd4>)
   18f6e:	0018      	movs	r0, r3
   18f70:	4b04      	ldr	r3, [pc, #16]	; (18f84 <uiIndexOfObject+0xc8>)
   18f72:	4798      	blx	r3
	return 0;
   18f74:	2300      	movs	r3, #0
}
   18f76:	0018      	movs	r0, r3
   18f78:	46bd      	mov	sp, r7
   18f7a:	b002      	add	sp, #8
   18f7c:	bd80      	pop	{r7, pc}
   18f7e:	46c0      	nop			; (mov r8, r8)
   18f80:	00037630 	.word	0x00037630
   18f84:	000192b1 	.word	0x000192b1
   18f88:	20000c70 	.word	0x20000c70
   18f8c:	00037670 	.word	0x00037670
   18f90:	000376b0 	.word	0x000376b0

00018f94 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   18f94:	b580      	push	{r7, lr}
   18f96:	b088      	sub	sp, #32
   18f98:	af00      	add	r7, sp, #0
   18f9a:	0002      	movs	r2, r0
   18f9c:	1dfb      	adds	r3, r7, #7
   18f9e:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   18fa0:	4b5a      	ldr	r3, [pc, #360]	; (1910c <prvTraceGetObjectHandle+0x178>)
   18fa2:	681b      	ldr	r3, [r3, #0]
   18fa4:	2b00      	cmp	r3, #0
   18fa6:	d105      	bne.n	18fb4 <prvTraceGetObjectHandle+0x20>
   18fa8:	4b59      	ldr	r3, [pc, #356]	; (19110 <prvTraceGetObjectHandle+0x17c>)
   18faa:	0018      	movs	r0, r3
   18fac:	4b59      	ldr	r3, [pc, #356]	; (19114 <prvTraceGetObjectHandle+0x180>)
   18fae:	4798      	blx	r3
   18fb0:	2300      	movs	r3, #0
   18fb2:	e0a7      	b.n	19104 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18fb4:	1dfb      	adds	r3, r7, #7
   18fb6:	781b      	ldrb	r3, [r3, #0]
   18fb8:	2b08      	cmp	r3, #8
   18fba:	d905      	bls.n	18fc8 <prvTraceGetObjectHandle+0x34>
   18fbc:	4b56      	ldr	r3, [pc, #344]	; (19118 <prvTraceGetObjectHandle+0x184>)
   18fbe:	0018      	movs	r0, r3
   18fc0:	4b54      	ldr	r3, [pc, #336]	; (19114 <prvTraceGetObjectHandle+0x180>)
   18fc2:	4798      	blx	r3
   18fc4:	2300      	movs	r3, #0
   18fc6:	e09d      	b.n	19104 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18fc8:	f3ef 8310 	mrs	r3, PRIMASK
   18fcc:	60fb      	str	r3, [r7, #12]
  return(result);
   18fce:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   18fd0:	61bb      	str	r3, [r7, #24]
   18fd2:	2301      	movs	r3, #1
   18fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18fd6:	693b      	ldr	r3, [r7, #16]
   18fd8:	f383 8810 	msr	PRIMASK, r3
   18fdc:	4b4f      	ldr	r3, [pc, #316]	; (1911c <prvTraceGetObjectHandle+0x188>)
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	1c5a      	adds	r2, r3, #1
   18fe2:	4b4e      	ldr	r3, [pc, #312]	; (1911c <prvTraceGetObjectHandle+0x188>)
   18fe4:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   18fe6:	1dfb      	adds	r3, r7, #7
   18fe8:	781a      	ldrb	r2, [r3, #0]
   18fea:	4b4d      	ldr	r3, [pc, #308]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   18fec:	0052      	lsls	r2, r2, #1
   18fee:	5ad3      	ldrh	r3, [r2, r3]
   18ff0:	001a      	movs	r2, r3
   18ff2:	4b4c      	ldr	r3, [pc, #304]	; (19124 <prvTraceGetObjectHandle+0x190>)
   18ff4:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   18ff6:	4b4b      	ldr	r3, [pc, #300]	; (19124 <prvTraceGetObjectHandle+0x190>)
   18ff8:	681b      	ldr	r3, [r3, #0]
   18ffa:	4a49      	ldr	r2, [pc, #292]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   18ffc:	2148      	movs	r1, #72	; 0x48
   18ffe:	18d3      	adds	r3, r2, r3
   19000:	185b      	adds	r3, r3, r1
   19002:	781b      	ldrb	r3, [r3, #0]
   19004:	2b00      	cmp	r3, #0
   19006:	d117      	bne.n	19038 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19008:	4b46      	ldr	r3, [pc, #280]	; (19124 <prvTraceGetObjectHandle+0x190>)
   1900a:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1900c:	4b45      	ldr	r3, [pc, #276]	; (19124 <prvTraceGetObjectHandle+0x190>)
   1900e:	681b      	ldr	r3, [r3, #0]
   19010:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   19012:	1dfb      	adds	r3, r7, #7
   19014:	781b      	ldrb	r3, [r3, #0]
   19016:	4842      	ldr	r0, [pc, #264]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   19018:	3308      	adds	r3, #8
   1901a:	005b      	lsls	r3, r3, #1
   1901c:	18c3      	adds	r3, r0, r3
   1901e:	3302      	adds	r3, #2
   19020:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19022:	b2db      	uxtb	r3, r3
   19024:	1acb      	subs	r3, r1, r3
   19026:	b2db      	uxtb	r3, r3
   19028:	3301      	adds	r3, #1
   1902a:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1902c:	4b3c      	ldr	r3, [pc, #240]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   1902e:	2148      	movs	r1, #72	; 0x48
   19030:	189b      	adds	r3, r3, r2
   19032:	185b      	adds	r3, r3, r1
   19034:	1c02      	adds	r2, r0, #0
   19036:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19038:	4b3a      	ldr	r3, [pc, #232]	; (19124 <prvTraceGetObjectHandle+0x190>)
   1903a:	681a      	ldr	r2, [r3, #0]
   1903c:	231f      	movs	r3, #31
   1903e:	18fb      	adds	r3, r7, r3
   19040:	4937      	ldr	r1, [pc, #220]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   19042:	2048      	movs	r0, #72	; 0x48
   19044:	188a      	adds	r2, r1, r2
   19046:	1812      	adds	r2, r2, r0
   19048:	7812      	ldrb	r2, [r2, #0]
   1904a:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1904c:	1dfb      	adds	r3, r7, #7
   1904e:	781a      	ldrb	r2, [r3, #0]
   19050:	4b33      	ldr	r3, [pc, #204]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   19052:	0052      	lsls	r2, r2, #1
   19054:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19056:	1dfb      	adds	r3, r7, #7
   19058:	781b      	ldrb	r3, [r3, #0]
   1905a:	4931      	ldr	r1, [pc, #196]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   1905c:	3310      	adds	r3, #16
   1905e:	005b      	lsls	r3, r3, #1
   19060:	18cb      	adds	r3, r1, r3
   19062:	3304      	adds	r3, #4
   19064:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19066:	429a      	cmp	r2, r3
   19068:	d90d      	bls.n	19086 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1906a:	1dfb      	adds	r3, r7, #7
   1906c:	781b      	ldrb	r3, [r3, #0]
   1906e:	0018      	movs	r0, r3
   19070:	4b2d      	ldr	r3, [pc, #180]	; (19128 <prvTraceGetObjectHandle+0x194>)
   19072:	4798      	blx	r3
   19074:	0003      	movs	r3, r0
   19076:	0018      	movs	r0, r3
   19078:	4b26      	ldr	r3, [pc, #152]	; (19114 <prvTraceGetObjectHandle+0x180>)
   1907a:	4798      	blx	r3
		handle = 0;
   1907c:	231f      	movs	r3, #31
   1907e:	18fb      	adds	r3, r7, r3
   19080:	2200      	movs	r2, #0
   19082:	701a      	strb	r2, [r3, #0]
   19084:	e031      	b.n	190ea <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19086:	1dfb      	adds	r3, r7, #7
   19088:	781b      	ldrb	r3, [r3, #0]
   1908a:	4a25      	ldr	r2, [pc, #148]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   1908c:	0059      	lsls	r1, r3, #1
   1908e:	5a8a      	ldrh	r2, [r1, r2]
   19090:	3201      	adds	r2, #1
   19092:	b291      	uxth	r1, r2
   19094:	4a22      	ldr	r2, [pc, #136]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   19096:	005b      	lsls	r3, r3, #1
   19098:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1909a:	1dfb      	adds	r3, r7, #7
   1909c:	781a      	ldrb	r2, [r3, #0]
   1909e:	4b20      	ldr	r3, [pc, #128]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   190a0:	0052      	lsls	r2, r2, #1
   190a2:	5ad3      	ldrh	r3, [r2, r3]
   190a4:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   190a6:	1dfb      	adds	r3, r7, #7
   190a8:	781b      	ldrb	r3, [r3, #0]
   190aa:	4a1d      	ldr	r2, [pc, #116]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   190ac:	3308      	adds	r3, #8
   190ae:	005b      	lsls	r3, r3, #1
   190b0:	18d3      	adds	r3, r2, r3
   190b2:	3302      	adds	r3, #2
   190b4:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   190b6:	1acb      	subs	r3, r1, r3
   190b8:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   190ba:	1dfb      	adds	r3, r7, #7
   190bc:	781b      	ldrb	r3, [r3, #0]
   190be:	4a18      	ldr	r2, [pc, #96]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   190c0:	3318      	adds	r3, #24
   190c2:	005b      	lsls	r3, r3, #1
   190c4:	18d3      	adds	r3, r2, r3
   190c6:	3306      	adds	r3, #6
   190c8:	881b      	ldrh	r3, [r3, #0]
   190ca:	001a      	movs	r2, r3
		if (hndCount >
   190cc:	697b      	ldr	r3, [r7, #20]
   190ce:	429a      	cmp	r2, r3
   190d0:	da0b      	bge.n	190ea <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   190d2:	1dfb      	adds	r3, r7, #7
   190d4:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   190d6:	697a      	ldr	r2, [r7, #20]
   190d8:	b2d2      	uxtb	r2, r2
   190da:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   190dc:	4a10      	ldr	r2, [pc, #64]	; (19120 <prvTraceGetObjectHandle+0x18c>)
   190de:	3318      	adds	r3, #24
   190e0:	005b      	lsls	r3, r3, #1
   190e2:	18d3      	adds	r3, r2, r3
   190e4:	3306      	adds	r3, #6
   190e6:	1c0a      	adds	r2, r1, #0
   190e8:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   190ea:	4b0c      	ldr	r3, [pc, #48]	; (1911c <prvTraceGetObjectHandle+0x188>)
   190ec:	681b      	ldr	r3, [r3, #0]
   190ee:	1e5a      	subs	r2, r3, #1
   190f0:	4b0a      	ldr	r3, [pc, #40]	; (1911c <prvTraceGetObjectHandle+0x188>)
   190f2:	601a      	str	r2, [r3, #0]
   190f4:	69bb      	ldr	r3, [r7, #24]
   190f6:	60bb      	str	r3, [r7, #8]
   190f8:	68bb      	ldr	r3, [r7, #8]
   190fa:	f383 8810 	msr	PRIMASK, r3

	return handle;
   190fe:	231f      	movs	r3, #31
   19100:	18fb      	adds	r3, r7, r3
   19102:	781b      	ldrb	r3, [r3, #0]
}
   19104:	0018      	movs	r0, r3
   19106:	46bd      	mov	sp, r7
   19108:	b008      	add	sp, #32
   1910a:	bd80      	pop	{r7, pc}
   1910c:	20000c70 	.word	0x20000c70
   19110:	00036b10 	.word	0x00036b10
   19114:	000192b1 	.word	0x000192b1
   19118:	000376f0 	.word	0x000376f0
   1911c:	20000bc8 	.word	0x20000bc8
   19120:	20000be0 	.word	0x20000be0
   19124:	20000c74 	.word	0x20000c74
   19128:	00017fd1 	.word	0x00017fd1

0001912c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1912c:	b590      	push	{r4, r7, lr}
   1912e:	b085      	sub	sp, #20
   19130:	af00      	add	r7, sp, #0
   19132:	0002      	movs	r2, r0
   19134:	1dfb      	adds	r3, r7, #7
   19136:	701a      	strb	r2, [r3, #0]
   19138:	1dbb      	adds	r3, r7, #6
   1913a:	1c0a      	adds	r2, r1, #0
   1913c:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1913e:	230e      	movs	r3, #14
   19140:	18fc      	adds	r4, r7, r3
   19142:	1dfb      	adds	r3, r7, #7
   19144:	781a      	ldrb	r2, [r3, #0]
   19146:	1dbb      	adds	r3, r7, #6
   19148:	781b      	ldrb	r3, [r3, #0]
   1914a:	0011      	movs	r1, r2
   1914c:	0018      	movs	r0, r3
   1914e:	4b09      	ldr	r3, [pc, #36]	; (19174 <prvMarkObjectAsUsed+0x48>)
   19150:	4798      	blx	r3
   19152:	0003      	movs	r3, r0
   19154:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19156:	4b08      	ldr	r3, [pc, #32]	; (19178 <prvMarkObjectAsUsed+0x4c>)
   19158:	681a      	ldr	r2, [r3, #0]
   1915a:	230e      	movs	r3, #14
   1915c:	18fb      	adds	r3, r7, r3
   1915e:	881b      	ldrh	r3, [r3, #0]
   19160:	219c      	movs	r1, #156	; 0x9c
   19162:	18d3      	adds	r3, r2, r3
   19164:	185b      	adds	r3, r3, r1
   19166:	2201      	movs	r2, #1
   19168:	701a      	strb	r2, [r3, #0]
}
   1916a:	46c0      	nop			; (mov r8, r8)
   1916c:	46bd      	mov	sp, r7
   1916e:	b005      	add	sp, #20
   19170:	bd90      	pop	{r4, r7, pc}
   19172:	46c0      	nop			; (mov r8, r8)
   19174:	00018ebd 	.word	0x00018ebd
   19178:	20000c70 	.word	0x20000c70

0001917c <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1917c:	b580      	push	{r7, lr}
   1917e:	b086      	sub	sp, #24
   19180:	af00      	add	r7, sp, #0
   19182:	60f8      	str	r0, [r7, #12]
   19184:	60b9      	str	r1, [r7, #8]
   19186:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19188:	2300      	movs	r3, #0
   1918a:	617b      	str	r3, [r7, #20]
   1918c:	e010      	b.n	191b0 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1918e:	68fa      	ldr	r2, [r7, #12]
   19190:	697b      	ldr	r3, [r7, #20]
   19192:	18d3      	adds	r3, r2, r3
   19194:	68b9      	ldr	r1, [r7, #8]
   19196:	697a      	ldr	r2, [r7, #20]
   19198:	188a      	adds	r2, r1, r2
   1919a:	7812      	ldrb	r2, [r2, #0]
   1919c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1919e:	68ba      	ldr	r2, [r7, #8]
   191a0:	697b      	ldr	r3, [r7, #20]
   191a2:	18d3      	adds	r3, r2, r3
   191a4:	781b      	ldrb	r3, [r3, #0]
   191a6:	2b00      	cmp	r3, #0
   191a8:	d007      	beq.n	191ba <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   191aa:	697b      	ldr	r3, [r7, #20]
   191ac:	3301      	adds	r3, #1
   191ae:	617b      	str	r3, [r7, #20]
   191b0:	697a      	ldr	r2, [r7, #20]
   191b2:	687b      	ldr	r3, [r7, #4]
   191b4:	429a      	cmp	r2, r3
   191b6:	d3ea      	bcc.n	1918e <prvStrncpy+0x12>
			break;
	}
}
   191b8:	e000      	b.n	191bc <prvStrncpy+0x40>
			break;
   191ba:	46c0      	nop			; (mov r8, r8)
}
   191bc:	46c0      	nop			; (mov r8, r8)
   191be:	46bd      	mov	sp, r7
   191c0:	b006      	add	sp, #24
   191c2:	bd80      	pop	{r7, pc}

000191c4 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   191c4:	b580      	push	{r7, lr}
   191c6:	b082      	sub	sp, #8
   191c8:	af00      	add	r7, sp, #0
   191ca:	603a      	str	r2, [r7, #0]
   191cc:	1dfb      	adds	r3, r7, #7
   191ce:	1c02      	adds	r2, r0, #0
   191d0:	701a      	strb	r2, [r3, #0]
   191d2:	1dbb      	adds	r3, r7, #6
   191d4:	1c0a      	adds	r2, r1, #0
   191d6:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   191d8:	683b      	ldr	r3, [r7, #0]
   191da:	2b00      	cmp	r3, #0
   191dc:	d104      	bne.n	191e8 <prvTraceSetObjectName+0x24>
   191de:	4b2a      	ldr	r3, [pc, #168]	; (19288 <prvTraceSetObjectName+0xc4>)
   191e0:	0018      	movs	r0, r3
   191e2:	4b2a      	ldr	r3, [pc, #168]	; (1928c <prvTraceSetObjectName+0xc8>)
   191e4:	4798      	blx	r3
   191e6:	e04b      	b.n	19280 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   191e8:	1dfb      	adds	r3, r7, #7
   191ea:	781b      	ldrb	r3, [r3, #0]
   191ec:	2b08      	cmp	r3, #8
   191ee:	d904      	bls.n	191fa <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   191f0:	4b27      	ldr	r3, [pc, #156]	; (19290 <prvTraceSetObjectName+0xcc>)
   191f2:	0018      	movs	r0, r3
   191f4:	4b25      	ldr	r3, [pc, #148]	; (1928c <prvTraceSetObjectName+0xc8>)
   191f6:	4798      	blx	r3
		return;
   191f8:	e042      	b.n	19280 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   191fa:	1dbb      	adds	r3, r7, #6
   191fc:	781b      	ldrb	r3, [r3, #0]
   191fe:	2b00      	cmp	r3, #0
   19200:	d104      	bne.n	1920c <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   19202:	4b24      	ldr	r3, [pc, #144]	; (19294 <prvTraceSetObjectName+0xd0>)
   19204:	0018      	movs	r0, r3
   19206:	4b21      	ldr	r3, [pc, #132]	; (1928c <prvTraceSetObjectName+0xc8>)
   19208:	4798      	blx	r3
		return;
   1920a:	e039      	b.n	19280 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1920c:	4b22      	ldr	r3, [pc, #136]	; (19298 <prvTraceSetObjectName+0xd4>)
   1920e:	681a      	ldr	r2, [r3, #0]
   19210:	1dfb      	adds	r3, r7, #7
   19212:	781b      	ldrb	r3, [r3, #0]
   19214:	2164      	movs	r1, #100	; 0x64
   19216:	18d3      	adds	r3, r2, r3
   19218:	185b      	adds	r3, r3, r1
   1921a:	781b      	ldrb	r3, [r3, #0]
   1921c:	1dba      	adds	r2, r7, #6
   1921e:	7812      	ldrb	r2, [r2, #0]
   19220:	429a      	cmp	r2, r3
   19222:	d909      	bls.n	19238 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19224:	1dfb      	adds	r3, r7, #7
   19226:	781b      	ldrb	r3, [r3, #0]
   19228:	0018      	movs	r0, r3
   1922a:	4b1c      	ldr	r3, [pc, #112]	; (1929c <prvTraceSetObjectName+0xd8>)
   1922c:	4798      	blx	r3
   1922e:	0003      	movs	r3, r0
   19230:	0018      	movs	r0, r3
   19232:	4b16      	ldr	r3, [pc, #88]	; (1928c <prvTraceSetObjectName+0xc8>)
   19234:	4798      	blx	r3
   19236:	e023      	b.n	19280 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19238:	1dfb      	adds	r3, r7, #7
   1923a:	781a      	ldrb	r2, [r3, #0]
   1923c:	1dbb      	adds	r3, r7, #6
   1923e:	781b      	ldrb	r3, [r3, #0]
   19240:	0011      	movs	r1, r2
   19242:	0018      	movs	r0, r3
   19244:	4b16      	ldr	r3, [pc, #88]	; (192a0 <prvTraceSetObjectName+0xdc>)
   19246:	4798      	blx	r3
   19248:	0003      	movs	r3, r0
   1924a:	001a      	movs	r2, r3
   1924c:	4b15      	ldr	r3, [pc, #84]	; (192a4 <prvTraceSetObjectName+0xe0>)
   1924e:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   19250:	4b15      	ldr	r3, [pc, #84]	; (192a8 <prvTraceSetObjectName+0xe4>)
   19252:	681b      	ldr	r3, [r3, #0]
   19254:	2b00      	cmp	r3, #0
   19256:	d113      	bne.n	19280 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19258:	4b0f      	ldr	r3, [pc, #60]	; (19298 <prvTraceSetObjectName+0xd4>)
   1925a:	681a      	ldr	r2, [r3, #0]
   1925c:	4b11      	ldr	r3, [pc, #68]	; (192a4 <prvTraceSetObjectName+0xe0>)
   1925e:	881b      	ldrh	r3, [r3, #0]
   19260:	3398      	adds	r3, #152	; 0x98
   19262:	18d3      	adds	r3, r2, r3
   19264:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19266:	4b0c      	ldr	r3, [pc, #48]	; (19298 <prvTraceSetObjectName+0xd4>)
   19268:	681a      	ldr	r2, [r3, #0]
   1926a:	1dfb      	adds	r3, r7, #7
   1926c:	781b      	ldrb	r3, [r3, #0]
   1926e:	2170      	movs	r1, #112	; 0x70
   19270:	18d3      	adds	r3, r2, r3
   19272:	185b      	adds	r3, r3, r1
   19274:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19276:	001a      	movs	r2, r3
   19278:	683b      	ldr	r3, [r7, #0]
   1927a:	0019      	movs	r1, r3
   1927c:	4b0b      	ldr	r3, [pc, #44]	; (192ac <prvTraceSetObjectName+0xe8>)
   1927e:	4798      	blx	r3
		}
	}
}
   19280:	46bd      	mov	sp, r7
   19282:	b002      	add	sp, #8
   19284:	bd80      	pop	{r7, pc}
   19286:	46c0      	nop			; (mov r8, r8)
   19288:	000377f4 	.word	0x000377f4
   1928c:	000192b1 	.word	0x000192b1
   19290:	00037828 	.word	0x00037828
   19294:	00037858 	.word	0x00037858
   19298:	20000c70 	.word	0x20000c70
   1929c:	00017fd1 	.word	0x00017fd1
   192a0:	00018ebd 	.word	0x00018ebd
   192a4:	20000c78 	.word	0x20000c78
   192a8:	20000bd0 	.word	0x20000bd0
   192ac:	0001917d 	.word	0x0001917d

000192b0 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   192b0:	b580      	push	{r7, lr}
   192b2:	b082      	sub	sp, #8
   192b4:	af00      	add	r7, sp, #0
   192b6:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   192b8:	4b11      	ldr	r3, [pc, #68]	; (19300 <prvTraceError+0x50>)
   192ba:	681b      	ldr	r3, [r3, #0]
   192bc:	2b00      	cmp	r3, #0
   192be:	d001      	beq.n	192c4 <prvTraceError+0x14>
	{
		vTraceStop();
   192c0:	4b10      	ldr	r3, [pc, #64]	; (19304 <prvTraceError+0x54>)
   192c2:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   192c4:	4b10      	ldr	r3, [pc, #64]	; (19308 <prvTraceError+0x58>)
   192c6:	681b      	ldr	r3, [r3, #0]
   192c8:	2b00      	cmp	r3, #0
   192ca:	d115      	bne.n	192f8 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   192cc:	4b0e      	ldr	r3, [pc, #56]	; (19308 <prvTraceError+0x58>)
   192ce:	687a      	ldr	r2, [r7, #4]
   192d0:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   192d2:	4b0b      	ldr	r3, [pc, #44]	; (19300 <prvTraceError+0x50>)
   192d4:	681b      	ldr	r3, [r3, #0]
   192d6:	2b00      	cmp	r3, #0
   192d8:	d00e      	beq.n	192f8 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   192da:	4b09      	ldr	r3, [pc, #36]	; (19300 <prvTraceError+0x50>)
   192dc:	681b      	ldr	r3, [r3, #0]
   192de:	4a0b      	ldr	r2, [pc, #44]	; (1930c <prvTraceError+0x5c>)
   192e0:	1898      	adds	r0, r3, r2
   192e2:	4b09      	ldr	r3, [pc, #36]	; (19308 <prvTraceError+0x58>)
   192e4:	681b      	ldr	r3, [r3, #0]
   192e6:	2250      	movs	r2, #80	; 0x50
   192e8:	0019      	movs	r1, r3
   192ea:	4b09      	ldr	r3, [pc, #36]	; (19310 <prvTraceError+0x60>)
   192ec:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   192ee:	4b04      	ldr	r3, [pc, #16]	; (19300 <prvTraceError+0x50>)
   192f0:	681b      	ldr	r3, [r3, #0]
   192f2:	4a08      	ldr	r2, [pc, #32]	; (19314 <prvTraceError+0x64>)
   192f4:	2101      	movs	r1, #1
   192f6:	5099      	str	r1, [r3, r2]
		}
	}
}
   192f8:	46c0      	nop			; (mov r8, r8)
   192fa:	46bd      	mov	sp, r7
   192fc:	b002      	add	sp, #8
   192fe:	bd80      	pop	{r7, pc}
   19300:	20000c70 	.word	0x20000c70
   19304:	00018175 	.word	0x00018175
   19308:	20000bd0 	.word	0x20000bd0
   1930c:	000006bc 	.word	0x000006bc
   19310:	0001917d 	.word	0x0001917d
   19314:	000006b4 	.word	0x000006b4

00019318 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19318:	b580      	push	{r7, lr}
   1931a:	b086      	sub	sp, #24
   1931c:	af00      	add	r7, sp, #0
   1931e:	0002      	movs	r2, r0
   19320:	1dfb      	adds	r3, r7, #7
   19322:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19324:	2300      	movs	r3, #0
   19326:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19328:	2300      	movs	r3, #0
   1932a:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1932c:	1dfb      	adds	r3, r7, #7
   1932e:	781b      	ldrb	r3, [r3, #0]
   19330:	2b00      	cmp	r3, #0
   19332:	d000      	beq.n	19336 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19334:	e089      	b.n	1944a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19336:	4b49      	ldr	r3, [pc, #292]	; (1945c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19338:	0018      	movs	r0, r3
   1933a:	4b49      	ldr	r3, [pc, #292]	; (19460 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1933c:	4798      	blx	r3
   1933e:	e08a      	b.n	19456 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   19340:	4b48      	ldr	r3, [pc, #288]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19342:	681b      	ldr	r3, [r3, #0]
   19344:	69da      	ldr	r2, [r3, #28]
   19346:	697b      	ldr	r3, [r7, #20]
   19348:	18d3      	adds	r3, r2, r3
   1934a:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1934c:	4b45      	ldr	r3, [pc, #276]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1934e:	6819      	ldr	r1, [r3, #0]
   19350:	693b      	ldr	r3, [r7, #16]
   19352:	009a      	lsls	r2, r3, #2
   19354:	23e2      	movs	r3, #226	; 0xe2
   19356:	00db      	lsls	r3, r3, #3
   19358:	188a      	adds	r2, r1, r2
   1935a:	18d3      	adds	r3, r2, r3
   1935c:	781b      	ldrb	r3, [r3, #0]
   1935e:	2b98      	cmp	r3, #152	; 0x98
   19360:	d934      	bls.n	193cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   19362:	4b40      	ldr	r3, [pc, #256]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19364:	6819      	ldr	r1, [r3, #0]
   19366:	693b      	ldr	r3, [r7, #16]
   19368:	009a      	lsls	r2, r3, #2
   1936a:	23e2      	movs	r3, #226	; 0xe2
   1936c:	00db      	lsls	r3, r3, #3
   1936e:	188a      	adds	r2, r1, r2
   19370:	18d3      	adds	r3, r2, r3
   19372:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19374:	2ba7      	cmp	r3, #167	; 0xa7
   19376:	d829      	bhi.n	193cc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   19378:	4b3a      	ldr	r3, [pc, #232]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1937a:	6819      	ldr	r1, [r3, #0]
   1937c:	693b      	ldr	r3, [r7, #16]
   1937e:	009a      	lsls	r2, r3, #2
   19380:	23e2      	movs	r3, #226	; 0xe2
   19382:	00db      	lsls	r3, r3, #3
   19384:	188a      	adds	r2, r1, r2
   19386:	18d3      	adds	r3, r2, r3
   19388:	781a      	ldrb	r2, [r3, #0]
   1938a:	230f      	movs	r3, #15
   1938c:	18fb      	adds	r3, r7, r3
   1938e:	3268      	adds	r2, #104	; 0x68
   19390:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19392:	230f      	movs	r3, #15
   19394:	18fb      	adds	r3, r7, r3
   19396:	781a      	ldrb	r2, [r3, #0]
   19398:	693b      	ldr	r3, [r7, #16]
   1939a:	18d2      	adds	r2, r2, r3
   1939c:	4b31      	ldr	r3, [pc, #196]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1939e:	681b      	ldr	r3, [r3, #0]
   193a0:	699b      	ldr	r3, [r3, #24]
   193a2:	429a      	cmp	r2, r3
   193a4:	d24d      	bcs.n	19442 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   193a6:	4b2f      	ldr	r3, [pc, #188]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   193a8:	681a      	ldr	r2, [r3, #0]
   193aa:	693b      	ldr	r3, [r7, #16]
   193ac:	009b      	lsls	r3, r3, #2
   193ae:	21e2      	movs	r1, #226	; 0xe2
   193b0:	00c9      	lsls	r1, r1, #3
   193b2:	468c      	mov	ip, r1
   193b4:	4463      	add	r3, ip
   193b6:	18d0      	adds	r0, r2, r3
   193b8:	230f      	movs	r3, #15
   193ba:	18fb      	adds	r3, r7, r3
   193bc:	781b      	ldrb	r3, [r3, #0]
   193be:	3301      	adds	r3, #1
   193c0:	009b      	lsls	r3, r3, #2
   193c2:	001a      	movs	r2, r3
   193c4:	2100      	movs	r1, #0
   193c6:	4b28      	ldr	r3, [pc, #160]	; (19468 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   193c8:	4798      	blx	r3
		{
   193ca:	e03a      	b.n	19442 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   193cc:	4b25      	ldr	r3, [pc, #148]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   193ce:	6819      	ldr	r1, [r3, #0]
   193d0:	693b      	ldr	r3, [r7, #16]
   193d2:	009a      	lsls	r2, r3, #2
   193d4:	23e2      	movs	r3, #226	; 0xe2
   193d6:	00db      	lsls	r3, r3, #3
   193d8:	188a      	adds	r2, r1, r2
   193da:	18d3      	adds	r3, r2, r3
   193dc:	781b      	ldrb	r3, [r3, #0]
   193de:	2b01      	cmp	r3, #1
   193e0:	d130      	bne.n	19444 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   193e2:	693b      	ldr	r3, [r7, #16]
   193e4:	1c5a      	adds	r2, r3, #1
   193e6:	4b1f      	ldr	r3, [pc, #124]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   193e8:	681b      	ldr	r3, [r3, #0]
   193ea:	699b      	ldr	r3, [r3, #24]
   193ec:	429a      	cmp	r2, r3
   193ee:	d20e      	bcs.n	1940e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   193f0:	4b1c      	ldr	r3, [pc, #112]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   193f2:	681a      	ldr	r2, [r3, #0]
   193f4:	693b      	ldr	r3, [r7, #16]
   193f6:	009b      	lsls	r3, r3, #2
   193f8:	21e2      	movs	r1, #226	; 0xe2
   193fa:	00c9      	lsls	r1, r1, #3
   193fc:	468c      	mov	ip, r1
   193fe:	4463      	add	r3, ip
   19400:	18d3      	adds	r3, r2, r3
   19402:	2208      	movs	r2, #8
   19404:	2100      	movs	r1, #0
   19406:	0018      	movs	r0, r3
   19408:	4b17      	ldr	r3, [pc, #92]	; (19468 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1940a:	4798      	blx	r3
   1940c:	e01a      	b.n	19444 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1940e:	4b15      	ldr	r3, [pc, #84]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19410:	681b      	ldr	r3, [r3, #0]
   19412:	22e2      	movs	r2, #226	; 0xe2
   19414:	00d2      	lsls	r2, r2, #3
   19416:	4694      	mov	ip, r2
   19418:	4463      	add	r3, ip
   1941a:	2204      	movs	r2, #4
   1941c:	2100      	movs	r1, #0
   1941e:	0018      	movs	r0, r3
   19420:	4b11      	ldr	r3, [pc, #68]	; (19468 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   19422:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   19424:	4b0f      	ldr	r3, [pc, #60]	; (19464 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19426:	681a      	ldr	r2, [r3, #0]
   19428:	693b      	ldr	r3, [r7, #16]
   1942a:	009b      	lsls	r3, r3, #2
   1942c:	21e2      	movs	r1, #226	; 0xe2
   1942e:	00c9      	lsls	r1, r1, #3
   19430:	468c      	mov	ip, r1
   19432:	4463      	add	r3, ip
   19434:	18d3      	adds	r3, r2, r3
   19436:	2204      	movs	r2, #4
   19438:	2100      	movs	r1, #0
   1943a:	0018      	movs	r0, r3
   1943c:	4b0a      	ldr	r3, [pc, #40]	; (19468 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1943e:	4798      	blx	r3
   19440:	e000      	b.n	19444 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   19442:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   19444:	697b      	ldr	r3, [r7, #20]
   19446:	3301      	adds	r3, #1
   19448:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1944a:	1dfb      	adds	r3, r7, #7
   1944c:	781a      	ldrb	r2, [r3, #0]
   1944e:	697b      	ldr	r3, [r7, #20]
   19450:	429a      	cmp	r2, r3
   19452:	d900      	bls.n	19456 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   19454:	e774      	b.n	19340 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   19456:	46bd      	mov	sp, r7
   19458:	b006      	add	sp, #24
   1945a:	bd80      	pop	{r7, pc}
   1945c:	000378b8 	.word	0x000378b8
   19460:	000192b1 	.word	0x000192b1
   19464:	20000c70 	.word	0x20000c70
   19468:	00034317 	.word	0x00034317

0001946c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1946c:	b580      	push	{r7, lr}
   1946e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   19470:	4b12      	ldr	r3, [pc, #72]	; (194bc <prvTraceUpdateCounters+0x50>)
   19472:	681b      	ldr	r3, [r3, #0]
   19474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19476:	2b00      	cmp	r3, #0
   19478:	d01c      	beq.n	194b4 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1947a:	4b10      	ldr	r3, [pc, #64]	; (194bc <prvTraceUpdateCounters+0x50>)
   1947c:	681b      	ldr	r3, [r3, #0]
   1947e:	695a      	ldr	r2, [r3, #20]
   19480:	3201      	adds	r2, #1
   19482:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   19484:	4b0d      	ldr	r3, [pc, #52]	; (194bc <prvTraceUpdateCounters+0x50>)
   19486:	681b      	ldr	r3, [r3, #0]
   19488:	69da      	ldr	r2, [r3, #28]
   1948a:	3201      	adds	r2, #1
   1948c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1948e:	4b0b      	ldr	r3, [pc, #44]	; (194bc <prvTraceUpdateCounters+0x50>)
   19490:	681b      	ldr	r3, [r3, #0]
   19492:	69da      	ldr	r2, [r3, #28]
   19494:	232c      	movs	r3, #44	; 0x2c
   19496:	33ff      	adds	r3, #255	; 0xff
   19498:	429a      	cmp	r2, r3
   1949a:	d907      	bls.n	194ac <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1949c:	4b07      	ldr	r3, [pc, #28]	; (194bc <prvTraceUpdateCounters+0x50>)
   1949e:	681b      	ldr	r3, [r3, #0]
   194a0:	2201      	movs	r2, #1
   194a2:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   194a4:	4b05      	ldr	r3, [pc, #20]	; (194bc <prvTraceUpdateCounters+0x50>)
   194a6:	681b      	ldr	r3, [r3, #0]
   194a8:	2200      	movs	r2, #0
   194aa:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   194ac:	2001      	movs	r0, #1
   194ae:	4b04      	ldr	r3, [pc, #16]	; (194c0 <prvTraceUpdateCounters+0x54>)
   194b0:	4798      	blx	r3
   194b2:	e000      	b.n	194b6 <prvTraceUpdateCounters+0x4a>
		return;
   194b4:	46c0      	nop			; (mov r8, r8)
#endif
}
   194b6:	46bd      	mov	sp, r7
   194b8:	bd80      	pop	{r7, pc}
   194ba:	46c0      	nop			; (mov r8, r8)
   194bc:	20000c70 	.word	0x20000c70
   194c0:	00019319 	.word	0x00019319

000194c4 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   194c4:	b5b0      	push	{r4, r5, r7, lr}
   194c6:	b086      	sub	sp, #24
   194c8:	af00      	add	r7, sp, #0
   194ca:	0002      	movs	r2, r0
   194cc:	1dbb      	adds	r3, r7, #6
   194ce:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   194d0:	2300      	movs	r3, #0
   194d2:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   194d4:	2300      	movs	r3, #0
   194d6:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   194d8:	2300      	movs	r3, #0
   194da:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   194dc:	1dbb      	adds	r3, r7, #6
   194de:	881b      	ldrh	r3, [r3, #0]
   194e0:	2bff      	cmp	r3, #255	; 0xff
   194e2:	d00a      	beq.n	194fa <prvTraceGetDTS+0x36>
   194e4:	1dbb      	adds	r3, r7, #6
   194e6:	881b      	ldrh	r3, [r3, #0]
   194e8:	4a60      	ldr	r2, [pc, #384]	; (1966c <prvTraceGetDTS+0x1a8>)
   194ea:	4293      	cmp	r3, r2
   194ec:	d005      	beq.n	194fa <prvTraceGetDTS+0x36>
   194ee:	4b60      	ldr	r3, [pc, #384]	; (19670 <prvTraceGetDTS+0x1ac>)
   194f0:	0018      	movs	r0, r3
   194f2:	4b60      	ldr	r3, [pc, #384]	; (19674 <prvTraceGetDTS+0x1b0>)
   194f4:	4798      	blx	r3
   194f6:	2300      	movs	r3, #0
   194f8:	e0b3      	b.n	19662 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   194fa:	4b5f      	ldr	r3, [pc, #380]	; (19678 <prvTraceGetDTS+0x1b4>)
   194fc:	681b      	ldr	r3, [r3, #0]
   194fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19500:	2b00      	cmp	r3, #0
   19502:	d118      	bne.n	19536 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   19504:	4b5d      	ldr	r3, [pc, #372]	; (1967c <prvTraceGetDTS+0x1b8>)
   19506:	681b      	ldr	r3, [r3, #0]
   19508:	2b00      	cmp	r3, #0
   1950a:	d006      	beq.n	1951a <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1950c:	4b5a      	ldr	r3, [pc, #360]	; (19678 <prvTraceGetDTS+0x1b4>)
   1950e:	681b      	ldr	r3, [r3, #0]
   19510:	4a5a      	ldr	r2, [pc, #360]	; (1967c <prvTraceGetDTS+0x1b8>)
   19512:	6812      	ldr	r2, [r2, #0]
   19514:	0892      	lsrs	r2, r2, #2
   19516:	625a      	str	r2, [r3, #36]	; 0x24
   19518:	e00d      	b.n	19536 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1951a:	4b59      	ldr	r3, [pc, #356]	; (19680 <prvTraceGetDTS+0x1bc>)
   1951c:	681a      	ldr	r2, [r3, #0]
   1951e:	4b59      	ldr	r3, [pc, #356]	; (19684 <prvTraceGetDTS+0x1c0>)
   19520:	681b      	ldr	r3, [r3, #0]
   19522:	429a      	cmp	r2, r3
   19524:	d007      	beq.n	19536 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19526:	4b54      	ldr	r3, [pc, #336]	; (19678 <prvTraceGetDTS+0x1b4>)
   19528:	681c      	ldr	r4, [r3, #0]
   1952a:	2000      	movs	r0, #0
   1952c:	4b56      	ldr	r3, [pc, #344]	; (19688 <prvTraceGetDTS+0x1c4>)
   1952e:	4798      	blx	r3
   19530:	0003      	movs	r3, r0
   19532:	089b      	lsrs	r3, r3, #2
   19534:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19536:	230c      	movs	r3, #12
   19538:	18fb      	adds	r3, r7, r3
   1953a:	0018      	movs	r0, r3
   1953c:	4b53      	ldr	r3, [pc, #332]	; (1968c <prvTraceGetDTS+0x1c8>)
   1953e:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   19540:	68fa      	ldr	r2, [r7, #12]
   19542:	4b53      	ldr	r3, [pc, #332]	; (19690 <prvTraceGetDTS+0x1cc>)
   19544:	681b      	ldr	r3, [r3, #0]
   19546:	1ad3      	subs	r3, r2, r3
   19548:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1954a:	68fa      	ldr	r2, [r7, #12]
   1954c:	4b50      	ldr	r3, [pc, #320]	; (19690 <prvTraceGetDTS+0x1cc>)
   1954e:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   19550:	4b49      	ldr	r3, [pc, #292]	; (19678 <prvTraceGetDTS+0x1b4>)
   19552:	681b      	ldr	r3, [r3, #0]
   19554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19556:	2b00      	cmp	r3, #0
   19558:	d044      	beq.n	195e4 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1955a:	4b47      	ldr	r3, [pc, #284]	; (19678 <prvTraceGetDTS+0x1b4>)
   1955c:	681b      	ldr	r3, [r3, #0]
   1955e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19560:	693b      	ldr	r3, [r7, #16]
   19562:	429a      	cmp	r2, r3
   19564:	d21e      	bcs.n	195a4 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19566:	4b44      	ldr	r3, [pc, #272]	; (19678 <prvTraceGetDTS+0x1b4>)
   19568:	681c      	ldr	r4, [r3, #0]
   1956a:	4b43      	ldr	r3, [pc, #268]	; (19678 <prvTraceGetDTS+0x1b4>)
   1956c:	681b      	ldr	r3, [r3, #0]
   1956e:	6add      	ldr	r5, [r3, #44]	; 0x2c
   19570:	4b41      	ldr	r3, [pc, #260]	; (19678 <prvTraceGetDTS+0x1b4>)
   19572:	681b      	ldr	r3, [r3, #0]
   19574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19576:	4b47      	ldr	r3, [pc, #284]	; (19694 <prvTraceGetDTS+0x1d0>)
   19578:	0011      	movs	r1, r2
   1957a:	6938      	ldr	r0, [r7, #16]
   1957c:	4798      	blx	r3
   1957e:	0003      	movs	r3, r0
   19580:	18eb      	adds	r3, r5, r3
   19582:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19584:	4b3c      	ldr	r3, [pc, #240]	; (19678 <prvTraceGetDTS+0x1b4>)
   19586:	681c      	ldr	r4, [r3, #0]
   19588:	4b3b      	ldr	r3, [pc, #236]	; (19678 <prvTraceGetDTS+0x1b4>)
   1958a:	681b      	ldr	r3, [r3, #0]
   1958c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1958e:	4b3a      	ldr	r3, [pc, #232]	; (19678 <prvTraceGetDTS+0x1b4>)
   19590:	681b      	ldr	r3, [r3, #0]
   19592:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19594:	693a      	ldr	r2, [r7, #16]
   19596:	4b40      	ldr	r3, [pc, #256]	; (19698 <prvTraceGetDTS+0x1d4>)
   19598:	0010      	movs	r0, r2
   1959a:	4798      	blx	r3
   1959c:	000b      	movs	r3, r1
   1959e:	18eb      	adds	r3, r5, r3
   195a0:	62a3      	str	r3, [r4, #40]	; 0x28
   195a2:	e007      	b.n	195b4 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   195a4:	4b34      	ldr	r3, [pc, #208]	; (19678 <prvTraceGetDTS+0x1b4>)
   195a6:	681b      	ldr	r3, [r3, #0]
   195a8:	4a33      	ldr	r2, [pc, #204]	; (19678 <prvTraceGetDTS+0x1b4>)
   195aa:	6812      	ldr	r2, [r2, #0]
   195ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
   195ae:	693a      	ldr	r2, [r7, #16]
   195b0:	188a      	adds	r2, r1, r2
   195b2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   195b4:	4b30      	ldr	r3, [pc, #192]	; (19678 <prvTraceGetDTS+0x1b4>)
   195b6:	681b      	ldr	r3, [r3, #0]
   195b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   195ba:	4b2f      	ldr	r3, [pc, #188]	; (19678 <prvTraceGetDTS+0x1b4>)
   195bc:	681b      	ldr	r3, [r3, #0]
   195be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   195c0:	429a      	cmp	r2, r3
   195c2:	d313      	bcc.n	195ec <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   195c4:	4b2c      	ldr	r3, [pc, #176]	; (19678 <prvTraceGetDTS+0x1b4>)
   195c6:	681b      	ldr	r3, [r3, #0]
   195c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   195ca:	3201      	adds	r2, #1
   195cc:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   195ce:	4b2a      	ldr	r3, [pc, #168]	; (19678 <prvTraceGetDTS+0x1b4>)
   195d0:	681b      	ldr	r3, [r3, #0]
   195d2:	4a29      	ldr	r2, [pc, #164]	; (19678 <prvTraceGetDTS+0x1b4>)
   195d4:	6812      	ldr	r2, [r2, #0]
   195d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
   195d8:	4a27      	ldr	r2, [pc, #156]	; (19678 <prvTraceGetDTS+0x1b4>)
   195da:	6812      	ldr	r2, [r2, #0]
   195dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
   195de:	1a8a      	subs	r2, r1, r2
   195e0:	629a      	str	r2, [r3, #40]	; 0x28
   195e2:	e003      	b.n	195ec <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   195e4:	4b24      	ldr	r3, [pc, #144]	; (19678 <prvTraceGetDTS+0x1b4>)
   195e6:	681b      	ldr	r3, [r3, #0]
   195e8:	68fa      	ldr	r2, [r7, #12]
   195ea:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   195ec:	1dbb      	adds	r3, r7, #6
   195ee:	881a      	ldrh	r2, [r3, #0]
   195f0:	693b      	ldr	r3, [r7, #16]
   195f2:	429a      	cmp	r2, r3
   195f4:	d22f      	bcs.n	19656 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   195f6:	4b29      	ldr	r3, [pc, #164]	; (1969c <prvTraceGetDTS+0x1d8>)
   195f8:	4798      	blx	r3
   195fa:	0003      	movs	r3, r0
   195fc:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   195fe:	697b      	ldr	r3, [r7, #20]
   19600:	2b00      	cmp	r3, #0
   19602:	d028      	beq.n	19656 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19604:	1dbb      	adds	r3, r7, #6
   19606:	881b      	ldrh	r3, [r3, #0]
   19608:	4a18      	ldr	r2, [pc, #96]	; (1966c <prvTraceGetDTS+0x1a8>)
   1960a:	4293      	cmp	r3, r2
   1960c:	d10b      	bne.n	19626 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1960e:	697b      	ldr	r3, [r7, #20]
   19610:	22a9      	movs	r2, #169	; 0xa9
   19612:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19614:	693b      	ldr	r3, [r7, #16]
   19616:	0c1b      	lsrs	r3, r3, #16
   19618:	b29a      	uxth	r2, r3
   1961a:	697b      	ldr	r3, [r7, #20]
   1961c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1961e:	697b      	ldr	r3, [r7, #20]
   19620:	2200      	movs	r2, #0
   19622:	705a      	strb	r2, [r3, #1]
   19624:	e015      	b.n	19652 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19626:	1dbb      	adds	r3, r7, #6
   19628:	881b      	ldrh	r3, [r3, #0]
   1962a:	2bff      	cmp	r3, #255	; 0xff
   1962c:	d10d      	bne.n	1964a <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1962e:	697b      	ldr	r3, [r7, #20]
   19630:	22a8      	movs	r2, #168	; 0xa8
   19632:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19634:	693b      	ldr	r3, [r7, #16]
   19636:	0a1b      	lsrs	r3, r3, #8
   19638:	b29a      	uxth	r2, r3
   1963a:	697b      	ldr	r3, [r7, #20]
   1963c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1963e:	693b      	ldr	r3, [r7, #16]
   19640:	0e1b      	lsrs	r3, r3, #24
   19642:	b2da      	uxtb	r2, r3
   19644:	697b      	ldr	r3, [r7, #20]
   19646:	705a      	strb	r2, [r3, #1]
   19648:	e003      	b.n	19652 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1964a:	4b15      	ldr	r3, [pc, #84]	; (196a0 <prvTraceGetDTS+0x1dc>)
   1964c:	0018      	movs	r0, r3
   1964e:	4b09      	ldr	r3, [pc, #36]	; (19674 <prvTraceGetDTS+0x1b0>)
   19650:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   19652:	4b14      	ldr	r3, [pc, #80]	; (196a4 <prvTraceGetDTS+0x1e0>)
   19654:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19656:	693b      	ldr	r3, [r7, #16]
   19658:	b29b      	uxth	r3, r3
   1965a:	1dba      	adds	r2, r7, #6
   1965c:	8812      	ldrh	r2, [r2, #0]
   1965e:	4013      	ands	r3, r2
   19660:	b29b      	uxth	r3, r3
}
   19662:	0018      	movs	r0, r3
   19664:	46bd      	mov	sp, r7
   19666:	b006      	add	sp, #24
   19668:	bdb0      	pop	{r4, r5, r7, pc}
   1966a:	46c0      	nop			; (mov r8, r8)
   1966c:	0000ffff 	.word	0x0000ffff
   19670:	00037910 	.word	0x00037910
   19674:	000192b1 	.word	0x000192b1
   19678:	20000c70 	.word	0x20000c70
   1967c:	20000bcc 	.word	0x20000bcc
   19680:	e000e018 	.word	0xe000e018
   19684:	200053d0 	.word	0x200053d0
   19688:	00029661 	.word	0x00029661
   1968c:	000196a9 	.word	0x000196a9
   19690:	20000c7c 	.word	0x20000c7c
   19694:	00032245 	.word	0x00032245
   19698:	00032351 	.word	0x00032351
   1969c:	00018e69 	.word	0x00018e69
   196a0:	00037950 	.word	0x00037950
   196a4:	0001946d 	.word	0x0001946d

000196a8 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   196a8:	b580      	push	{r7, lr}
   196aa:	b084      	sub	sp, #16
   196ac:	af00      	add	r7, sp, #0
   196ae:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   196b0:	2300      	movs	r3, #0
   196b2:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   196b4:	2300      	movs	r3, #0
   196b6:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   196b8:	4b2d      	ldr	r3, [pc, #180]	; (19770 <prvTracePortGetTimeStamp+0xc8>)
   196ba:	681b      	ldr	r3, [r3, #0]
   196bc:	2b01      	cmp	r3, #1
   196be:	d107      	bne.n	196d0 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   196c0:	687b      	ldr	r3, [r7, #4]
   196c2:	2b00      	cmp	r3, #0
   196c4:	d04f      	beq.n	19766 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   196c6:	4b2b      	ldr	r3, [pc, #172]	; (19774 <prvTracePortGetTimeStamp+0xcc>)
   196c8:	681a      	ldr	r2, [r3, #0]
   196ca:	687b      	ldr	r3, [r7, #4]
   196cc:	601a      	str	r2, [r3, #0]
		return;
   196ce:	e04a      	b.n	19766 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   196d0:	4b29      	ldr	r3, [pc, #164]	; (19778 <prvTracePortGetTimeStamp+0xd0>)
   196d2:	681a      	ldr	r2, [r3, #0]
   196d4:	4b29      	ldr	r3, [pc, #164]	; (1977c <prvTracePortGetTimeStamp+0xd4>)
   196d6:	681b      	ldr	r3, [r3, #0]
   196d8:	1ad3      	subs	r3, r2, r3
   196da:	3301      	adds	r3, #1
   196dc:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   196de:	4b28      	ldr	r3, [pc, #160]	; (19780 <prvTracePortGetTimeStamp+0xd8>)
   196e0:	681a      	ldr	r2, [r3, #0]
   196e2:	4b28      	ldr	r3, [pc, #160]	; (19784 <prvTracePortGetTimeStamp+0xdc>)
   196e4:	681b      	ldr	r3, [r3, #0]
   196e6:	1ad3      	subs	r3, r2, r3
   196e8:	3b01      	subs	r3, #1
   196ea:	2b00      	cmp	r3, #0
   196ec:	db03      	blt.n	196f6 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   196ee:	4b24      	ldr	r3, [pc, #144]	; (19780 <prvTracePortGetTimeStamp+0xd8>)
   196f0:	681b      	ldr	r3, [r3, #0]
   196f2:	60fb      	str	r3, [r7, #12]
   196f4:	e002      	b.n	196fc <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   196f6:	4b23      	ldr	r3, [pc, #140]	; (19784 <prvTracePortGetTimeStamp+0xdc>)
   196f8:	681b      	ldr	r3, [r3, #0]
   196fa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   196fc:	4b20      	ldr	r3, [pc, #128]	; (19780 <prvTracePortGetTimeStamp+0xd8>)
   196fe:	681b      	ldr	r3, [r3, #0]
   19700:	68fa      	ldr	r2, [r7, #12]
   19702:	429a      	cmp	r2, r3
   19704:	d107      	bne.n	19716 <prvTracePortGetTimeStamp+0x6e>
   19706:	4b20      	ldr	r3, [pc, #128]	; (19788 <prvTracePortGetTimeStamp+0xe0>)
   19708:	681b      	ldr	r3, [r3, #0]
   1970a:	68ba      	ldr	r2, [r7, #8]
   1970c:	429a      	cmp	r2, r3
   1970e:	d202      	bcs.n	19716 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19710:	68fb      	ldr	r3, [r7, #12]
   19712:	3301      	adds	r3, #1
   19714:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19716:	687b      	ldr	r3, [r7, #4]
   19718:	2b00      	cmp	r3, #0
   1971a:	d016      	beq.n	1974a <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1971c:	4b16      	ldr	r3, [pc, #88]	; (19778 <prvTracePortGetTimeStamp+0xd0>)
   1971e:	681b      	ldr	r3, [r3, #0]
   19720:	3301      	adds	r3, #1
   19722:	089b      	lsrs	r3, r3, #2
   19724:	68fa      	ldr	r2, [r7, #12]
   19726:	435a      	muls	r2, r3
   19728:	4b12      	ldr	r3, [pc, #72]	; (19774 <prvTracePortGetTimeStamp+0xcc>)
   1972a:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1972c:	4b12      	ldr	r3, [pc, #72]	; (19778 <prvTracePortGetTimeStamp+0xd0>)
   1972e:	681b      	ldr	r3, [r3, #0]
   19730:	3301      	adds	r3, #1
   19732:	2203      	movs	r2, #3
   19734:	4013      	ands	r3, r2
   19736:	68fa      	ldr	r2, [r7, #12]
   19738:	435a      	muls	r2, r3
   1973a:	68bb      	ldr	r3, [r7, #8]
   1973c:	18d3      	adds	r3, r2, r3
   1973e:	089a      	lsrs	r2, r3, #2
   19740:	4b0c      	ldr	r3, [pc, #48]	; (19774 <prvTracePortGetTimeStamp+0xcc>)
   19742:	681b      	ldr	r3, [r3, #0]
   19744:	18d2      	adds	r2, r2, r3
   19746:	4b0b      	ldr	r3, [pc, #44]	; (19774 <prvTracePortGetTimeStamp+0xcc>)
   19748:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1974a:	4b0d      	ldr	r3, [pc, #52]	; (19780 <prvTracePortGetTimeStamp+0xd8>)
   1974c:	68fa      	ldr	r2, [r7, #12]
   1974e:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19750:	687b      	ldr	r3, [r7, #4]
   19752:	2b00      	cmp	r3, #0
   19754:	d003      	beq.n	1975e <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19756:	4b07      	ldr	r3, [pc, #28]	; (19774 <prvTracePortGetTimeStamp+0xcc>)
   19758:	681a      	ldr	r2, [r3, #0]
   1975a:	687b      	ldr	r3, [r7, #4]
   1975c:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1975e:	4b0a      	ldr	r3, [pc, #40]	; (19788 <prvTracePortGetTimeStamp+0xe0>)
   19760:	68ba      	ldr	r2, [r7, #8]
   19762:	601a      	str	r2, [r3, #0]
   19764:	e000      	b.n	19768 <prvTracePortGetTimeStamp+0xc0>
		return;
   19766:	46c0      	nop			; (mov r8, r8)
}
   19768:	46bd      	mov	sp, r7
   1976a:	b004      	add	sp, #16
   1976c:	bd80      	pop	{r7, pc}
   1976e:	46c0      	nop			; (mov r8, r8)
   19770:	20000bbc 	.word	0x20000bbc
   19774:	20000bc0 	.word	0x20000bc0
   19778:	e000e014 	.word	0xe000e014
   1977c:	e000e018 	.word	0xe000e018
   19780:	20000c80 	.word	0x20000c80
   19784:	20000bb8 	.word	0x20000bb8
   19788:	20000c84 	.word	0x20000c84

0001978c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1978c:	b580      	push	{r7, lr}
   1978e:	b082      	sub	sp, #8
   19790:	af00      	add	r7, sp, #0
   19792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19794:	687b      	ldr	r3, [r7, #4]
   19796:	3308      	adds	r3, #8
   19798:	001a      	movs	r2, r3
   1979a:	687b      	ldr	r3, [r7, #4]
   1979c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1979e:	687b      	ldr	r3, [r7, #4]
   197a0:	2201      	movs	r2, #1
   197a2:	4252      	negs	r2, r2
   197a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   197a6:	687b      	ldr	r3, [r7, #4]
   197a8:	3308      	adds	r3, #8
   197aa:	001a      	movs	r2, r3
   197ac:	687b      	ldr	r3, [r7, #4]
   197ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   197b0:	687b      	ldr	r3, [r7, #4]
   197b2:	3308      	adds	r3, #8
   197b4:	001a      	movs	r2, r3
   197b6:	687b      	ldr	r3, [r7, #4]
   197b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   197ba:	687b      	ldr	r3, [r7, #4]
   197bc:	2200      	movs	r2, #0
   197be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   197c0:	46c0      	nop			; (mov r8, r8)
   197c2:	46bd      	mov	sp, r7
   197c4:	b002      	add	sp, #8
   197c6:	bd80      	pop	{r7, pc}

000197c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   197c8:	b580      	push	{r7, lr}
   197ca:	b082      	sub	sp, #8
   197cc:	af00      	add	r7, sp, #0
   197ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   197d0:	687b      	ldr	r3, [r7, #4]
   197d2:	2200      	movs	r2, #0
   197d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   197d6:	46c0      	nop			; (mov r8, r8)
   197d8:	46bd      	mov	sp, r7
   197da:	b002      	add	sp, #8
   197dc:	bd80      	pop	{r7, pc}

000197de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   197de:	b580      	push	{r7, lr}
   197e0:	b084      	sub	sp, #16
   197e2:	af00      	add	r7, sp, #0
   197e4:	6078      	str	r0, [r7, #4]
   197e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   197e8:	687b      	ldr	r3, [r7, #4]
   197ea:	685b      	ldr	r3, [r3, #4]
   197ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   197ee:	683b      	ldr	r3, [r7, #0]
   197f0:	68fa      	ldr	r2, [r7, #12]
   197f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   197f4:	68fb      	ldr	r3, [r7, #12]
   197f6:	689a      	ldr	r2, [r3, #8]
   197f8:	683b      	ldr	r3, [r7, #0]
   197fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   197fc:	68fb      	ldr	r3, [r7, #12]
   197fe:	689b      	ldr	r3, [r3, #8]
   19800:	683a      	ldr	r2, [r7, #0]
   19802:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19804:	68fb      	ldr	r3, [r7, #12]
   19806:	683a      	ldr	r2, [r7, #0]
   19808:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1980a:	683b      	ldr	r3, [r7, #0]
   1980c:	687a      	ldr	r2, [r7, #4]
   1980e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19810:	687b      	ldr	r3, [r7, #4]
   19812:	681b      	ldr	r3, [r3, #0]
   19814:	1c5a      	adds	r2, r3, #1
   19816:	687b      	ldr	r3, [r7, #4]
   19818:	601a      	str	r2, [r3, #0]
}
   1981a:	46c0      	nop			; (mov r8, r8)
   1981c:	46bd      	mov	sp, r7
   1981e:	b004      	add	sp, #16
   19820:	bd80      	pop	{r7, pc}

00019822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19822:	b580      	push	{r7, lr}
   19824:	b084      	sub	sp, #16
   19826:	af00      	add	r7, sp, #0
   19828:	6078      	str	r0, [r7, #4]
   1982a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1982c:	683b      	ldr	r3, [r7, #0]
   1982e:	681b      	ldr	r3, [r3, #0]
   19830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19832:	68bb      	ldr	r3, [r7, #8]
   19834:	3301      	adds	r3, #1
   19836:	d103      	bne.n	19840 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19838:	687b      	ldr	r3, [r7, #4]
   1983a:	691b      	ldr	r3, [r3, #16]
   1983c:	60fb      	str	r3, [r7, #12]
   1983e:	e00c      	b.n	1985a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19840:	687b      	ldr	r3, [r7, #4]
   19842:	3308      	adds	r3, #8
   19844:	60fb      	str	r3, [r7, #12]
   19846:	e002      	b.n	1984e <vListInsert+0x2c>
   19848:	68fb      	ldr	r3, [r7, #12]
   1984a:	685b      	ldr	r3, [r3, #4]
   1984c:	60fb      	str	r3, [r7, #12]
   1984e:	68fb      	ldr	r3, [r7, #12]
   19850:	685b      	ldr	r3, [r3, #4]
   19852:	681a      	ldr	r2, [r3, #0]
   19854:	68bb      	ldr	r3, [r7, #8]
   19856:	429a      	cmp	r2, r3
   19858:	d9f6      	bls.n	19848 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1985a:	68fb      	ldr	r3, [r7, #12]
   1985c:	685a      	ldr	r2, [r3, #4]
   1985e:	683b      	ldr	r3, [r7, #0]
   19860:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19862:	683b      	ldr	r3, [r7, #0]
   19864:	685b      	ldr	r3, [r3, #4]
   19866:	683a      	ldr	r2, [r7, #0]
   19868:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1986a:	683b      	ldr	r3, [r7, #0]
   1986c:	68fa      	ldr	r2, [r7, #12]
   1986e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19870:	68fb      	ldr	r3, [r7, #12]
   19872:	683a      	ldr	r2, [r7, #0]
   19874:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19876:	683b      	ldr	r3, [r7, #0]
   19878:	687a      	ldr	r2, [r7, #4]
   1987a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1987c:	687b      	ldr	r3, [r7, #4]
   1987e:	681b      	ldr	r3, [r3, #0]
   19880:	1c5a      	adds	r2, r3, #1
   19882:	687b      	ldr	r3, [r7, #4]
   19884:	601a      	str	r2, [r3, #0]
}
   19886:	46c0      	nop			; (mov r8, r8)
   19888:	46bd      	mov	sp, r7
   1988a:	b004      	add	sp, #16
   1988c:	bd80      	pop	{r7, pc}

0001988e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1988e:	b580      	push	{r7, lr}
   19890:	b084      	sub	sp, #16
   19892:	af00      	add	r7, sp, #0
   19894:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19896:	687b      	ldr	r3, [r7, #4]
   19898:	691b      	ldr	r3, [r3, #16]
   1989a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1989c:	687b      	ldr	r3, [r7, #4]
   1989e:	685b      	ldr	r3, [r3, #4]
   198a0:	687a      	ldr	r2, [r7, #4]
   198a2:	6892      	ldr	r2, [r2, #8]
   198a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   198a6:	687b      	ldr	r3, [r7, #4]
   198a8:	689b      	ldr	r3, [r3, #8]
   198aa:	687a      	ldr	r2, [r7, #4]
   198ac:	6852      	ldr	r2, [r2, #4]
   198ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   198b0:	68fb      	ldr	r3, [r7, #12]
   198b2:	685a      	ldr	r2, [r3, #4]
   198b4:	687b      	ldr	r3, [r7, #4]
   198b6:	429a      	cmp	r2, r3
   198b8:	d103      	bne.n	198c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   198ba:	687b      	ldr	r3, [r7, #4]
   198bc:	689a      	ldr	r2, [r3, #8]
   198be:	68fb      	ldr	r3, [r7, #12]
   198c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   198c2:	687b      	ldr	r3, [r7, #4]
   198c4:	2200      	movs	r2, #0
   198c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   198c8:	68fb      	ldr	r3, [r7, #12]
   198ca:	681b      	ldr	r3, [r3, #0]
   198cc:	1e5a      	subs	r2, r3, #1
   198ce:	68fb      	ldr	r3, [r7, #12]
   198d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   198d2:	68fb      	ldr	r3, [r7, #12]
   198d4:	681b      	ldr	r3, [r3, #0]
}
   198d6:	0018      	movs	r0, r3
   198d8:	46bd      	mov	sp, r7
   198da:	b004      	add	sp, #16
   198dc:	bd80      	pop	{r7, pc}
	...

000198e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   198e0:	b580      	push	{r7, lr}
   198e2:	b084      	sub	sp, #16
   198e4:	af00      	add	r7, sp, #0
   198e6:	60f8      	str	r0, [r7, #12]
   198e8:	60b9      	str	r1, [r7, #8]
   198ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   198ec:	68fb      	ldr	r3, [r7, #12]
   198ee:	3b04      	subs	r3, #4
   198f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   198f2:	68fb      	ldr	r3, [r7, #12]
   198f4:	2280      	movs	r2, #128	; 0x80
   198f6:	0452      	lsls	r2, r2, #17
   198f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   198fa:	68fb      	ldr	r3, [r7, #12]
   198fc:	3b04      	subs	r3, #4
   198fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19900:	68ba      	ldr	r2, [r7, #8]
   19902:	68fb      	ldr	r3, [r7, #12]
   19904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19906:	68fb      	ldr	r3, [r7, #12]
   19908:	3b04      	subs	r3, #4
   1990a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1990c:	4a08      	ldr	r2, [pc, #32]	; (19930 <pxPortInitialiseStack+0x50>)
   1990e:	68fb      	ldr	r3, [r7, #12]
   19910:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19912:	68fb      	ldr	r3, [r7, #12]
   19914:	3b14      	subs	r3, #20
   19916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19918:	687a      	ldr	r2, [r7, #4]
   1991a:	68fb      	ldr	r3, [r7, #12]
   1991c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1991e:	68fb      	ldr	r3, [r7, #12]
   19920:	3b20      	subs	r3, #32
   19922:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19924:	68fb      	ldr	r3, [r7, #12]
}
   19926:	0018      	movs	r0, r3
   19928:	46bd      	mov	sp, r7
   1992a:	b004      	add	sp, #16
   1992c:	bd80      	pop	{r7, pc}
   1992e:	46c0      	nop			; (mov r8, r8)
   19930:	00019935 	.word	0x00019935

00019934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19934:	b580      	push	{r7, lr}
   19936:	b082      	sub	sp, #8
   19938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1993a:	2300      	movs	r3, #0
   1993c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1993e:	4b07      	ldr	r3, [pc, #28]	; (1995c <prvTaskExitError+0x28>)
   19940:	681b      	ldr	r3, [r3, #0]
   19942:	3301      	adds	r3, #1
   19944:	d001      	beq.n	1994a <prvTaskExitError+0x16>
   19946:	b672      	cpsid	i
   19948:	e7fe      	b.n	19948 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1994a:	b672      	cpsid	i
	while( ulDummy == 0 )
   1994c:	46c0      	nop			; (mov r8, r8)
   1994e:	687b      	ldr	r3, [r7, #4]
   19950:	2b00      	cmp	r3, #0
   19952:	d0fc      	beq.n	1994e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19954:	46c0      	nop			; (mov r8, r8)
   19956:	46bd      	mov	sp, r7
   19958:	b002      	add	sp, #8
   1995a:	bd80      	pop	{r7, pc}
   1995c:	2000010c 	.word	0x2000010c

00019960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19960:	b580      	push	{r7, lr}
   19962:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19964:	46c0      	nop			; (mov r8, r8)
   19966:	46bd      	mov	sp, r7
   19968:	bd80      	pop	{r7, pc}
   1996a:	0000      	movs	r0, r0
   1996c:	0000      	movs	r0, r0
	...

00019970 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19970:	4a0b      	ldr	r2, [pc, #44]	; (199a0 <pxCurrentTCBConst2>)
   19972:	6813      	ldr	r3, [r2, #0]
   19974:	6818      	ldr	r0, [r3, #0]
   19976:	3020      	adds	r0, #32
   19978:	f380 8809 	msr	PSP, r0
   1997c:	2002      	movs	r0, #2
   1997e:	f380 8814 	msr	CONTROL, r0
   19982:	f3bf 8f6f 	isb	sy
   19986:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19988:	46ae      	mov	lr, r5
   1998a:	bc08      	pop	{r3}
   1998c:	bc04      	pop	{r2}
   1998e:	b662      	cpsie	i
   19990:	4718      	bx	r3
   19992:	46c0      	nop			; (mov r8, r8)
   19994:	46c0      	nop			; (mov r8, r8)
   19996:	46c0      	nop			; (mov r8, r8)
   19998:	46c0      	nop			; (mov r8, r8)
   1999a:	46c0      	nop			; (mov r8, r8)
   1999c:	46c0      	nop			; (mov r8, r8)
   1999e:	46c0      	nop			; (mov r8, r8)

000199a0 <pxCurrentTCBConst2>:
   199a0:	20003f58 	.word	0x20003f58
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   199a4:	46c0      	nop			; (mov r8, r8)
   199a6:	46c0      	nop			; (mov r8, r8)

000199a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   199a8:	b580      	push	{r7, lr}
   199aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   199ac:	4b0e      	ldr	r3, [pc, #56]	; (199e8 <xPortStartScheduler+0x40>)
   199ae:	4a0e      	ldr	r2, [pc, #56]	; (199e8 <xPortStartScheduler+0x40>)
   199b0:	6812      	ldr	r2, [r2, #0]
   199b2:	21ff      	movs	r1, #255	; 0xff
   199b4:	0409      	lsls	r1, r1, #16
   199b6:	430a      	orrs	r2, r1
   199b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   199ba:	4b0b      	ldr	r3, [pc, #44]	; (199e8 <xPortStartScheduler+0x40>)
   199bc:	4a0a      	ldr	r2, [pc, #40]	; (199e8 <xPortStartScheduler+0x40>)
   199be:	6812      	ldr	r2, [r2, #0]
   199c0:	21ff      	movs	r1, #255	; 0xff
   199c2:	0609      	lsls	r1, r1, #24
   199c4:	430a      	orrs	r2, r1
   199c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   199c8:	4b08      	ldr	r3, [pc, #32]	; (199ec <xPortStartScheduler+0x44>)
   199ca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   199cc:	4b08      	ldr	r3, [pc, #32]	; (199f0 <xPortStartScheduler+0x48>)
   199ce:	2200      	movs	r2, #0
   199d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   199d2:	4b08      	ldr	r3, [pc, #32]	; (199f4 <xPortStartScheduler+0x4c>)
   199d4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   199d6:	4b08      	ldr	r3, [pc, #32]	; (199f8 <xPortStartScheduler+0x50>)
   199d8:	4798      	blx	r3
	prvTaskExitError();
   199da:	4b08      	ldr	r3, [pc, #32]	; (199fc <xPortStartScheduler+0x54>)
   199dc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   199de:	2300      	movs	r3, #0
}
   199e0:	0018      	movs	r0, r3
   199e2:	46bd      	mov	sp, r7
   199e4:	bd80      	pop	{r7, pc}
   199e6:	46c0      	nop			; (mov r8, r8)
   199e8:	e000ed20 	.word	0xe000ed20
   199ec:	00019b09 	.word	0x00019b09
   199f0:	2000010c 	.word	0x2000010c
   199f4:	00019971 	.word	0x00019971
   199f8:	0001c065 	.word	0x0001c065
   199fc:	00019935 	.word	0x00019935

00019a00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19a00:	b580      	push	{r7, lr}
   19a02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19a04:	4b03      	ldr	r3, [pc, #12]	; (19a14 <vPortYield+0x14>)
   19a06:	2280      	movs	r2, #128	; 0x80
   19a08:	0552      	lsls	r2, r2, #21
   19a0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   19a0c:	46c0      	nop			; (mov r8, r8)
   19a0e:	46bd      	mov	sp, r7
   19a10:	bd80      	pop	{r7, pc}
   19a12:	46c0      	nop			; (mov r8, r8)
   19a14:	e000ed04 	.word	0xe000ed04

00019a18 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19a18:	b580      	push	{r7, lr}
   19a1a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   19a1c:	b672      	cpsid	i
    uxCriticalNesting++;
   19a1e:	4b06      	ldr	r3, [pc, #24]	; (19a38 <vPortEnterCritical+0x20>)
   19a20:	681b      	ldr	r3, [r3, #0]
   19a22:	1c5a      	adds	r2, r3, #1
   19a24:	4b04      	ldr	r3, [pc, #16]	; (19a38 <vPortEnterCritical+0x20>)
   19a26:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19a28:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19a2c:	f3bf 8f6f 	isb	sy
}
   19a30:	46c0      	nop			; (mov r8, r8)
   19a32:	46bd      	mov	sp, r7
   19a34:	bd80      	pop	{r7, pc}
   19a36:	46c0      	nop			; (mov r8, r8)
   19a38:	2000010c 	.word	0x2000010c

00019a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   19a3c:	b580      	push	{r7, lr}
   19a3e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19a40:	4b09      	ldr	r3, [pc, #36]	; (19a68 <vPortExitCritical+0x2c>)
   19a42:	681b      	ldr	r3, [r3, #0]
   19a44:	2b00      	cmp	r3, #0
   19a46:	d101      	bne.n	19a4c <vPortExitCritical+0x10>
   19a48:	b672      	cpsid	i
   19a4a:	e7fe      	b.n	19a4a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   19a4c:	4b06      	ldr	r3, [pc, #24]	; (19a68 <vPortExitCritical+0x2c>)
   19a4e:	681b      	ldr	r3, [r3, #0]
   19a50:	1e5a      	subs	r2, r3, #1
   19a52:	4b05      	ldr	r3, [pc, #20]	; (19a68 <vPortExitCritical+0x2c>)
   19a54:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19a56:	4b04      	ldr	r3, [pc, #16]	; (19a68 <vPortExitCritical+0x2c>)
   19a58:	681b      	ldr	r3, [r3, #0]
   19a5a:	2b00      	cmp	r3, #0
   19a5c:	d100      	bne.n	19a60 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   19a5e:	b662      	cpsie	i
    }
}
   19a60:	46c0      	nop			; (mov r8, r8)
   19a62:	46bd      	mov	sp, r7
   19a64:	bd80      	pop	{r7, pc}
   19a66:	46c0      	nop			; (mov r8, r8)
   19a68:	2000010c 	.word	0x2000010c

00019a6c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   19a6c:	f3ef 8010 	mrs	r0, PRIMASK
   19a70:	b672      	cpsid	i
   19a72:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19a74:	46c0      	nop			; (mov r8, r8)
   19a76:	0018      	movs	r0, r3

00019a78 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19a78:	f380 8810 	msr	PRIMASK, r0
   19a7c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   19a7e:	46c0      	nop			; (mov r8, r8)

00019a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19a80:	f3ef 8009 	mrs	r0, PSP
   19a84:	4b0e      	ldr	r3, [pc, #56]	; (19ac0 <pxCurrentTCBConst>)
   19a86:	681a      	ldr	r2, [r3, #0]
   19a88:	3820      	subs	r0, #32
   19a8a:	6010      	str	r0, [r2, #0]
   19a8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19a8e:	4644      	mov	r4, r8
   19a90:	464d      	mov	r5, r9
   19a92:	4656      	mov	r6, sl
   19a94:	465f      	mov	r7, fp
   19a96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19a98:	b508      	push	{r3, lr}
   19a9a:	b672      	cpsid	i
   19a9c:	f002 fae2 	bl	1c064 <vTaskSwitchContext>
   19aa0:	b662      	cpsie	i
   19aa2:	bc0c      	pop	{r2, r3}
   19aa4:	6811      	ldr	r1, [r2, #0]
   19aa6:	6808      	ldr	r0, [r1, #0]
   19aa8:	3010      	adds	r0, #16
   19aaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19aac:	46a0      	mov	r8, r4
   19aae:	46a9      	mov	r9, r5
   19ab0:	46b2      	mov	sl, r6
   19ab2:	46bb      	mov	fp, r7
   19ab4:	f380 8809 	msr	PSP, r0
   19ab8:	3820      	subs	r0, #32
   19aba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19abc:	4718      	bx	r3
   19abe:	46c0      	nop			; (mov r8, r8)

00019ac0 <pxCurrentTCBConst>:
   19ac0:	20003f58 	.word	0x20003f58
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19ac4:	46c0      	nop			; (mov r8, r8)
   19ac6:	46c0      	nop			; (mov r8, r8)

00019ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19ac8:	b580      	push	{r7, lr}
   19aca:	b082      	sub	sp, #8
   19acc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   19ace:	4b0a      	ldr	r3, [pc, #40]	; (19af8 <SysTick_Handler+0x30>)
   19ad0:	4798      	blx	r3
   19ad2:	0003      	movs	r3, r0
   19ad4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19ad6:	4b09      	ldr	r3, [pc, #36]	; (19afc <SysTick_Handler+0x34>)
   19ad8:	4798      	blx	r3
   19ada:	1e03      	subs	r3, r0, #0
   19adc:	d003      	beq.n	19ae6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   19ade:	4b08      	ldr	r3, [pc, #32]	; (19b00 <SysTick_Handler+0x38>)
   19ae0:	2280      	movs	r2, #128	; 0x80
   19ae2:	0552      	lsls	r2, r2, #21
   19ae4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19ae6:	687b      	ldr	r3, [r7, #4]
   19ae8:	0018      	movs	r0, r3
   19aea:	4b06      	ldr	r3, [pc, #24]	; (19b04 <SysTick_Handler+0x3c>)
   19aec:	4798      	blx	r3
}
   19aee:	46c0      	nop			; (mov r8, r8)
   19af0:	46bd      	mov	sp, r7
   19af2:	b002      	add	sp, #8
   19af4:	bd80      	pop	{r7, pc}
   19af6:	46c0      	nop			; (mov r8, r8)
   19af8:	00019a6d 	.word	0x00019a6d
   19afc:	0001be75 	.word	0x0001be75
   19b00:	e000ed04 	.word	0xe000ed04
   19b04:	00019a79 	.word	0x00019a79

00019b08 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19b08:	b5b0      	push	{r4, r5, r7, lr}
   19b0a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   19b0c:	4b0b      	ldr	r3, [pc, #44]	; (19b3c <prvSetupTimerInterrupt+0x34>)
   19b0e:	2200      	movs	r2, #0
   19b10:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   19b12:	4b0b      	ldr	r3, [pc, #44]	; (19b40 <prvSetupTimerInterrupt+0x38>)
   19b14:	2200      	movs	r2, #0
   19b16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   19b18:	4c0a      	ldr	r4, [pc, #40]	; (19b44 <prvSetupTimerInterrupt+0x3c>)
   19b1a:	2000      	movs	r0, #0
   19b1c:	4b0a      	ldr	r3, [pc, #40]	; (19b48 <prvSetupTimerInterrupt+0x40>)
   19b1e:	4798      	blx	r3
   19b20:	4b0a      	ldr	r3, [pc, #40]	; (19b4c <prvSetupTimerInterrupt+0x44>)
   19b22:	22fa      	movs	r2, #250	; 0xfa
   19b24:	0091      	lsls	r1, r2, #2
   19b26:	4798      	blx	r3
   19b28:	0003      	movs	r3, r0
   19b2a:	3b01      	subs	r3, #1
   19b2c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   19b2e:	4b03      	ldr	r3, [pc, #12]	; (19b3c <prvSetupTimerInterrupt+0x34>)
   19b30:	2207      	movs	r2, #7
   19b32:	601a      	str	r2, [r3, #0]
}
   19b34:	46c0      	nop			; (mov r8, r8)
   19b36:	46bd      	mov	sp, r7
   19b38:	bdb0      	pop	{r4, r5, r7, pc}
   19b3a:	46c0      	nop			; (mov r8, r8)
   19b3c:	e000e010 	.word	0xe000e010
   19b40:	e000e018 	.word	0xe000e018
   19b44:	e000e014 	.word	0xe000e014
   19b48:	00029661 	.word	0x00029661
   19b4c:	00032245 	.word	0x00032245

00019b50 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19b50:	b580      	push	{r7, lr}
   19b52:	b084      	sub	sp, #16
   19b54:	af00      	add	r7, sp, #0
   19b56:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19b58:	2300      	movs	r3, #0
   19b5a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   19b5c:	687b      	ldr	r3, [r7, #4]
   19b5e:	2207      	movs	r2, #7
   19b60:	4013      	ands	r3, r2
   19b62:	d004      	beq.n	19b6e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   19b64:	687b      	ldr	r3, [r7, #4]
   19b66:	2207      	movs	r2, #7
   19b68:	4393      	bics	r3, r2
   19b6a:	3308      	adds	r3, #8
   19b6c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   19b6e:	4b21      	ldr	r3, [pc, #132]	; (19bf4 <pvPortMalloc+0xa4>)
   19b70:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   19b72:	4b21      	ldr	r3, [pc, #132]	; (19bf8 <pvPortMalloc+0xa8>)
   19b74:	681b      	ldr	r3, [r3, #0]
   19b76:	2b00      	cmp	r3, #0
   19b78:	d105      	bne.n	19b86 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   19b7a:	4b20      	ldr	r3, [pc, #128]	; (19bfc <pvPortMalloc+0xac>)
   19b7c:	2207      	movs	r2, #7
   19b7e:	4393      	bics	r3, r2
   19b80:	001a      	movs	r2, r3
   19b82:	4b1d      	ldr	r3, [pc, #116]	; (19bf8 <pvPortMalloc+0xa8>)
   19b84:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19b86:	4b1e      	ldr	r3, [pc, #120]	; (19c00 <pvPortMalloc+0xb0>)
   19b88:	681a      	ldr	r2, [r3, #0]
   19b8a:	687b      	ldr	r3, [r7, #4]
   19b8c:	18d3      	adds	r3, r2, r3
   19b8e:	4a1d      	ldr	r2, [pc, #116]	; (19c04 <pvPortMalloc+0xb4>)
   19b90:	4293      	cmp	r3, r2
   19b92:	d813      	bhi.n	19bbc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   19b94:	4b1a      	ldr	r3, [pc, #104]	; (19c00 <pvPortMalloc+0xb0>)
   19b96:	681a      	ldr	r2, [r3, #0]
   19b98:	687b      	ldr	r3, [r7, #4]
   19b9a:	18d2      	adds	r2, r2, r3
   19b9c:	4b18      	ldr	r3, [pc, #96]	; (19c00 <pvPortMalloc+0xb0>)
   19b9e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19ba0:	429a      	cmp	r2, r3
   19ba2:	d90b      	bls.n	19bbc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   19ba4:	4b14      	ldr	r3, [pc, #80]	; (19bf8 <pvPortMalloc+0xa8>)
   19ba6:	681a      	ldr	r2, [r3, #0]
   19ba8:	4b15      	ldr	r3, [pc, #84]	; (19c00 <pvPortMalloc+0xb0>)
   19baa:	681b      	ldr	r3, [r3, #0]
   19bac:	18d3      	adds	r3, r2, r3
   19bae:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   19bb0:	4b13      	ldr	r3, [pc, #76]	; (19c00 <pvPortMalloc+0xb0>)
   19bb2:	681a      	ldr	r2, [r3, #0]
   19bb4:	687b      	ldr	r3, [r7, #4]
   19bb6:	18d2      	adds	r2, r2, r3
   19bb8:	4b11      	ldr	r3, [pc, #68]	; (19c00 <pvPortMalloc+0xb0>)
   19bba:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   19bbc:	68fb      	ldr	r3, [r7, #12]
   19bbe:	2b00      	cmp	r3, #0
   19bc0:	d006      	beq.n	19bd0 <pvPortMalloc+0x80>
   19bc2:	68fb      	ldr	r3, [r7, #12]
   19bc4:	687a      	ldr	r2, [r7, #4]
   19bc6:	0019      	movs	r1, r3
   19bc8:	2094      	movs	r0, #148	; 0x94
   19bca:	4b0f      	ldr	r3, [pc, #60]	; (19c08 <pvPortMalloc+0xb8>)
   19bcc:	4798      	blx	r3
   19bce:	e005      	b.n	19bdc <pvPortMalloc+0x8c>
   19bd0:	68fb      	ldr	r3, [r7, #12]
   19bd2:	687a      	ldr	r2, [r7, #4]
   19bd4:	0019      	movs	r1, r3
   19bd6:	20e8      	movs	r0, #232	; 0xe8
   19bd8:	4b0b      	ldr	r3, [pc, #44]	; (19c08 <pvPortMalloc+0xb8>)
   19bda:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   19bdc:	4b0b      	ldr	r3, [pc, #44]	; (19c0c <pvPortMalloc+0xbc>)
   19bde:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   19be0:	68fb      	ldr	r3, [r7, #12]
   19be2:	2b00      	cmp	r3, #0
   19be4:	d101      	bne.n	19bea <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   19be6:	4b0a      	ldr	r3, [pc, #40]	; (19c10 <pvPortMalloc+0xc0>)
   19be8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   19bea:	68fb      	ldr	r3, [r7, #12]
}
   19bec:	0018      	movs	r0, r3
   19bee:	46bd      	mov	sp, r7
   19bf0:	b004      	add	sp, #16
   19bf2:	bd80      	pop	{r7, pc}
   19bf4:	0001bcd1 	.word	0x0001bcd1
   19bf8:	20003f54 	.word	0x20003f54
   19bfc:	20000c90 	.word	0x20000c90
   19c00:	20003f50 	.word	0x20003f50
   19c04:	000032bf 	.word	0x000032bf
   19c08:	000182bd 	.word	0x000182bd
   19c0c:	0001bce9 	.word	0x0001bce9
   19c10:	00032215 	.word	0x00032215

00019c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   19c14:	b580      	push	{r7, lr}
   19c16:	b082      	sub	sp, #8
   19c18:	af00      	add	r7, sp, #0
   19c1a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   19c1c:	687b      	ldr	r3, [r7, #4]
   19c1e:	2b00      	cmp	r3, #0
   19c20:	d001      	beq.n	19c26 <vPortFree+0x12>
   19c22:	b672      	cpsid	i
   19c24:	e7fe      	b.n	19c24 <vPortFree+0x10>
}
   19c26:	46c0      	nop			; (mov r8, r8)
   19c28:	46bd      	mov	sp, r7
   19c2a:	b002      	add	sp, #8
   19c2c:	bd80      	pop	{r7, pc}
	...

00019c30 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   19c30:	b580      	push	{r7, lr}
   19c32:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   19c34:	4b03      	ldr	r3, [pc, #12]	; (19c44 <xPortGetFreeHeapSize+0x14>)
   19c36:	681b      	ldr	r3, [r3, #0]
   19c38:	22cb      	movs	r2, #203	; 0xcb
   19c3a:	0192      	lsls	r2, r2, #6
   19c3c:	1ad3      	subs	r3, r2, r3
}
   19c3e:	0018      	movs	r0, r3
   19c40:	46bd      	mov	sp, r7
   19c42:	bd80      	pop	{r7, pc}
   19c44:	20003f50 	.word	0x20003f50

00019c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   19c48:	b580      	push	{r7, lr}
   19c4a:	b084      	sub	sp, #16
   19c4c:	af00      	add	r7, sp, #0
   19c4e:	6078      	str	r0, [r7, #4]
   19c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19c52:	687b      	ldr	r3, [r7, #4]
   19c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   19c56:	68fb      	ldr	r3, [r7, #12]
   19c58:	2b00      	cmp	r3, #0
   19c5a:	d101      	bne.n	19c60 <xQueueGenericReset+0x18>
   19c5c:	b672      	cpsid	i
   19c5e:	e7fe      	b.n	19c5e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   19c60:	4b23      	ldr	r3, [pc, #140]	; (19cf0 <xQueueGenericReset+0xa8>)
   19c62:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   19c64:	68fb      	ldr	r3, [r7, #12]
   19c66:	681a      	ldr	r2, [r3, #0]
   19c68:	68fb      	ldr	r3, [r7, #12]
   19c6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   19c6c:	68fb      	ldr	r3, [r7, #12]
   19c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19c70:	434b      	muls	r3, r1
   19c72:	18d2      	adds	r2, r2, r3
   19c74:	68fb      	ldr	r3, [r7, #12]
   19c76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   19c78:	68fb      	ldr	r3, [r7, #12]
   19c7a:	2200      	movs	r2, #0
   19c7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   19c7e:	68fb      	ldr	r3, [r7, #12]
   19c80:	681a      	ldr	r2, [r3, #0]
   19c82:	68fb      	ldr	r3, [r7, #12]
   19c84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   19c86:	68fb      	ldr	r3, [r7, #12]
   19c88:	681a      	ldr	r2, [r3, #0]
   19c8a:	68fb      	ldr	r3, [r7, #12]
   19c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19c8e:	1e59      	subs	r1, r3, #1
   19c90:	68fb      	ldr	r3, [r7, #12]
   19c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19c94:	434b      	muls	r3, r1
   19c96:	18d2      	adds	r2, r2, r3
   19c98:	68fb      	ldr	r3, [r7, #12]
   19c9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   19c9c:	68fb      	ldr	r3, [r7, #12]
   19c9e:	2244      	movs	r2, #68	; 0x44
   19ca0:	21ff      	movs	r1, #255	; 0xff
   19ca2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   19ca4:	68fb      	ldr	r3, [r7, #12]
   19ca6:	2245      	movs	r2, #69	; 0x45
   19ca8:	21ff      	movs	r1, #255	; 0xff
   19caa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   19cac:	683b      	ldr	r3, [r7, #0]
   19cae:	2b00      	cmp	r3, #0
   19cb0:	d10d      	bne.n	19cce <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19cb2:	68fb      	ldr	r3, [r7, #12]
   19cb4:	691b      	ldr	r3, [r3, #16]
   19cb6:	2b00      	cmp	r3, #0
   19cb8:	d013      	beq.n	19ce2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   19cba:	68fb      	ldr	r3, [r7, #12]
   19cbc:	3310      	adds	r3, #16
   19cbe:	0018      	movs	r0, r3
   19cc0:	4b0c      	ldr	r3, [pc, #48]	; (19cf4 <xQueueGenericReset+0xac>)
   19cc2:	4798      	blx	r3
   19cc4:	1e03      	subs	r3, r0, #0
   19cc6:	d00c      	beq.n	19ce2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   19cc8:	4b0b      	ldr	r3, [pc, #44]	; (19cf8 <xQueueGenericReset+0xb0>)
   19cca:	4798      	blx	r3
   19ccc:	e009      	b.n	19ce2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   19cce:	68fb      	ldr	r3, [r7, #12]
   19cd0:	3310      	adds	r3, #16
   19cd2:	0018      	movs	r0, r3
   19cd4:	4b09      	ldr	r3, [pc, #36]	; (19cfc <xQueueGenericReset+0xb4>)
   19cd6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   19cd8:	68fb      	ldr	r3, [r7, #12]
   19cda:	3324      	adds	r3, #36	; 0x24
   19cdc:	0018      	movs	r0, r3
   19cde:	4b07      	ldr	r3, [pc, #28]	; (19cfc <xQueueGenericReset+0xb4>)
   19ce0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   19ce2:	4b07      	ldr	r3, [pc, #28]	; (19d00 <xQueueGenericReset+0xb8>)
   19ce4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   19ce6:	2301      	movs	r3, #1
}
   19ce8:	0018      	movs	r0, r3
   19cea:	46bd      	mov	sp, r7
   19cec:	b004      	add	sp, #16
   19cee:	bd80      	pop	{r7, pc}
   19cf0:	00019a19 	.word	0x00019a19
   19cf4:	0001c2a9 	.word	0x0001c2a9
   19cf8:	00019a01 	.word	0x00019a01
   19cfc:	0001978d 	.word	0x0001978d
   19d00:	00019a3d 	.word	0x00019a3d

00019d04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   19d04:	b590      	push	{r4, r7, lr}
   19d06:	b08b      	sub	sp, #44	; 0x2c
   19d08:	af02      	add	r7, sp, #8
   19d0a:	60f8      	str	r0, [r7, #12]
   19d0c:	60b9      	str	r1, [r7, #8]
   19d0e:	1dfb      	adds	r3, r7, #7
   19d10:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   19d12:	68fb      	ldr	r3, [r7, #12]
   19d14:	2b00      	cmp	r3, #0
   19d16:	d101      	bne.n	19d1c <xQueueGenericCreate+0x18>
   19d18:	b672      	cpsid	i
   19d1a:	e7fe      	b.n	19d1a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   19d1c:	68bb      	ldr	r3, [r7, #8]
   19d1e:	2b00      	cmp	r3, #0
   19d20:	d102      	bne.n	19d28 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   19d22:	2300      	movs	r3, #0
   19d24:	61fb      	str	r3, [r7, #28]
   19d26:	e003      	b.n	19d30 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19d28:	68fb      	ldr	r3, [r7, #12]
   19d2a:	68ba      	ldr	r2, [r7, #8]
   19d2c:	4353      	muls	r3, r2
   19d2e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   19d30:	69fb      	ldr	r3, [r7, #28]
   19d32:	3354      	adds	r3, #84	; 0x54
   19d34:	0018      	movs	r0, r3
   19d36:	4b19      	ldr	r3, [pc, #100]	; (19d9c <xQueueGenericCreate+0x98>)
   19d38:	4798      	blx	r3
   19d3a:	0003      	movs	r3, r0
   19d3c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   19d3e:	69bb      	ldr	r3, [r7, #24]
   19d40:	2b00      	cmp	r3, #0
   19d42:	d00d      	beq.n	19d60 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   19d44:	69bb      	ldr	r3, [r7, #24]
   19d46:	3354      	adds	r3, #84	; 0x54
   19d48:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   19d4a:	1dfb      	adds	r3, r7, #7
   19d4c:	781c      	ldrb	r4, [r3, #0]
   19d4e:	697a      	ldr	r2, [r7, #20]
   19d50:	68b9      	ldr	r1, [r7, #8]
   19d52:	68f8      	ldr	r0, [r7, #12]
   19d54:	69bb      	ldr	r3, [r7, #24]
   19d56:	9300      	str	r3, [sp, #0]
   19d58:	0023      	movs	r3, r4
   19d5a:	4c11      	ldr	r4, [pc, #68]	; (19da0 <xQueueGenericCreate+0x9c>)
   19d5c:	47a0      	blx	r4
   19d5e:	e017      	b.n	19d90 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   19d60:	4b10      	ldr	r3, [pc, #64]	; (19da4 <xQueueGenericCreate+0xa0>)
   19d62:	4798      	blx	r3
   19d64:	0003      	movs	r3, r0
   19d66:	0018      	movs	r0, r3
   19d68:	4b0f      	ldr	r3, [pc, #60]	; (19da8 <xQueueGenericCreate+0xa4>)
   19d6a:	4798      	blx	r3
   19d6c:	0003      	movs	r3, r0
   19d6e:	001a      	movs	r2, r3
   19d70:	4b0e      	ldr	r3, [pc, #56]	; (19dac <xQueueGenericCreate+0xa8>)
   19d72:	881b      	ldrh	r3, [r3, #0]
   19d74:	4013      	ands	r3, r2
   19d76:	b29b      	uxth	r3, r3
   19d78:	2b00      	cmp	r3, #0
   19d7a:	d009      	beq.n	19d90 <xQueueGenericCreate+0x8c>
   19d7c:	1dfb      	adds	r3, r7, #7
   19d7e:	781b      	ldrb	r3, [r3, #0]
   19d80:	4a0b      	ldr	r2, [pc, #44]	; (19db0 <xQueueGenericCreate+0xac>)
   19d82:	5cd3      	ldrb	r3, [r2, r3]
   19d84:	3340      	adds	r3, #64	; 0x40
   19d86:	b2db      	uxtb	r3, r3
   19d88:	2100      	movs	r1, #0
   19d8a:	0018      	movs	r0, r3
   19d8c:	4b09      	ldr	r3, [pc, #36]	; (19db4 <xQueueGenericCreate+0xb0>)
   19d8e:	4798      	blx	r3
		}

		return pxNewQueue;
   19d90:	69bb      	ldr	r3, [r7, #24]
	}
   19d92:	0018      	movs	r0, r3
   19d94:	46bd      	mov	sp, r7
   19d96:	b009      	add	sp, #36	; 0x24
   19d98:	bd90      	pop	{r4, r7, pc}
   19d9a:	46c0      	nop			; (mov r8, r8)
   19d9c:	00019b51 	.word	0x00019b51
   19da0:	00019db9 	.word	0x00019db9
   19da4:	00017cb1 	.word	0x00017cb1
   19da8:	00017a15 	.word	0x00017a15
   19dac:	20000108 	.word	0x20000108
   19db0:	200000fc 	.word	0x200000fc
   19db4:	00018715 	.word	0x00018715

00019db8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   19db8:	b5b0      	push	{r4, r5, r7, lr}
   19dba:	b084      	sub	sp, #16
   19dbc:	af00      	add	r7, sp, #0
   19dbe:	60f8      	str	r0, [r7, #12]
   19dc0:	60b9      	str	r1, [r7, #8]
   19dc2:	607a      	str	r2, [r7, #4]
   19dc4:	001a      	movs	r2, r3
   19dc6:	1cfb      	adds	r3, r7, #3
   19dc8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   19dca:	68bb      	ldr	r3, [r7, #8]
   19dcc:	2b00      	cmp	r3, #0
   19dce:	d103      	bne.n	19dd8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   19dd0:	6a3b      	ldr	r3, [r7, #32]
   19dd2:	6a3a      	ldr	r2, [r7, #32]
   19dd4:	601a      	str	r2, [r3, #0]
   19dd6:	e002      	b.n	19dde <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   19dd8:	6a3b      	ldr	r3, [r7, #32]
   19dda:	687a      	ldr	r2, [r7, #4]
   19ddc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   19dde:	6a3b      	ldr	r3, [r7, #32]
   19de0:	68fa      	ldr	r2, [r7, #12]
   19de2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   19de4:	6a3b      	ldr	r3, [r7, #32]
   19de6:	68ba      	ldr	r2, [r7, #8]
   19de8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   19dea:	6a3b      	ldr	r3, [r7, #32]
   19dec:	2101      	movs	r1, #1
   19dee:	0018      	movs	r0, r3
   19df0:	4b41      	ldr	r3, [pc, #260]	; (19ef8 <prvInitialiseNewQueue+0x140>)
   19df2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   19df4:	6a3b      	ldr	r3, [r7, #32]
   19df6:	1cfa      	adds	r2, r7, #3
   19df8:	2150      	movs	r1, #80	; 0x50
   19dfa:	7812      	ldrb	r2, [r2, #0]
   19dfc:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   19dfe:	6a3b      	ldr	r3, [r7, #32]
   19e00:	2200      	movs	r2, #0
   19e02:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   19e04:	6a3b      	ldr	r3, [r7, #32]
   19e06:	0018      	movs	r0, r3
   19e08:	4b3c      	ldr	r3, [pc, #240]	; (19efc <prvInitialiseNewQueue+0x144>)
   19e0a:	4798      	blx	r3
   19e0c:	0003      	movs	r3, r0
   19e0e:	001a      	movs	r2, r3
   19e10:	4b3b      	ldr	r3, [pc, #236]	; (19f00 <prvInitialiseNewQueue+0x148>)
   19e12:	5c9b      	ldrb	r3, [r3, r2]
   19e14:	0018      	movs	r0, r3
   19e16:	4b3b      	ldr	r3, [pc, #236]	; (19f04 <prvInitialiseNewQueue+0x14c>)
   19e18:	4798      	blx	r3
   19e1a:	0003      	movs	r3, r0
   19e1c:	b29a      	uxth	r2, r3
   19e1e:	6a3b      	ldr	r3, [r7, #32]
   19e20:	0011      	movs	r1, r2
   19e22:	0018      	movs	r0, r3
   19e24:	4b38      	ldr	r3, [pc, #224]	; (19f08 <prvInitialiseNewQueue+0x150>)
   19e26:	4798      	blx	r3
   19e28:	4b38      	ldr	r3, [pc, #224]	; (19f0c <prvInitialiseNewQueue+0x154>)
   19e2a:	881a      	ldrh	r2, [r3, #0]
   19e2c:	6a3b      	ldr	r3, [r7, #32]
   19e2e:	0011      	movs	r1, r2
   19e30:	0018      	movs	r0, r3
   19e32:	4b37      	ldr	r3, [pc, #220]	; (19f10 <prvInitialiseNewQueue+0x158>)
   19e34:	4798      	blx	r3
   19e36:	6a3b      	ldr	r3, [r7, #32]
   19e38:	0018      	movs	r0, r3
   19e3a:	4b30      	ldr	r3, [pc, #192]	; (19efc <prvInitialiseNewQueue+0x144>)
   19e3c:	4798      	blx	r3
   19e3e:	0003      	movs	r3, r0
   19e40:	001a      	movs	r2, r3
   19e42:	4b2f      	ldr	r3, [pc, #188]	; (19f00 <prvInitialiseNewQueue+0x148>)
   19e44:	5c9c      	ldrb	r4, [r3, r2]
   19e46:	6a3b      	ldr	r3, [r7, #32]
   19e48:	0018      	movs	r0, r3
   19e4a:	4b32      	ldr	r3, [pc, #200]	; (19f14 <prvInitialiseNewQueue+0x15c>)
   19e4c:	4798      	blx	r3
   19e4e:	0003      	movs	r3, r0
   19e50:	b2db      	uxtb	r3, r3
   19e52:	0019      	movs	r1, r3
   19e54:	0020      	movs	r0, r4
   19e56:	4b30      	ldr	r3, [pc, #192]	; (19f18 <prvInitialiseNewQueue+0x160>)
   19e58:	4798      	blx	r3
   19e5a:	4b30      	ldr	r3, [pc, #192]	; (19f1c <prvInitialiseNewQueue+0x164>)
   19e5c:	4798      	blx	r3
   19e5e:	0003      	movs	r3, r0
   19e60:	0018      	movs	r0, r3
   19e62:	4b2f      	ldr	r3, [pc, #188]	; (19f20 <prvInitialiseNewQueue+0x168>)
   19e64:	4798      	blx	r3
   19e66:	0003      	movs	r3, r0
   19e68:	001a      	movs	r2, r3
   19e6a:	4b2e      	ldr	r3, [pc, #184]	; (19f24 <prvInitialiseNewQueue+0x16c>)
   19e6c:	881b      	ldrh	r3, [r3, #0]
   19e6e:	4013      	ands	r3, r2
   19e70:	b29b      	uxth	r3, r3
   19e72:	2b00      	cmp	r3, #0
   19e74:	d029      	beq.n	19eca <prvInitialiseNewQueue+0x112>
   19e76:	6a3b      	ldr	r3, [r7, #32]
   19e78:	0018      	movs	r0, r3
   19e7a:	4b2b      	ldr	r3, [pc, #172]	; (19f28 <prvInitialiseNewQueue+0x170>)
   19e7c:	4798      	blx	r3
   19e7e:	0003      	movs	r3, r0
   19e80:	001a      	movs	r2, r3
   19e82:	4b28      	ldr	r3, [pc, #160]	; (19f24 <prvInitialiseNewQueue+0x16c>)
   19e84:	881b      	ldrh	r3, [r3, #0]
   19e86:	4013      	ands	r3, r2
   19e88:	b29b      	uxth	r3, r3
   19e8a:	2b00      	cmp	r3, #0
   19e8c:	d01d      	beq.n	19eca <prvInitialiseNewQueue+0x112>
   19e8e:	6a3b      	ldr	r3, [r7, #32]
   19e90:	0018      	movs	r0, r3
   19e92:	4b1a      	ldr	r3, [pc, #104]	; (19efc <prvInitialiseNewQueue+0x144>)
   19e94:	4798      	blx	r3
   19e96:	0003      	movs	r3, r0
   19e98:	001a      	movs	r2, r3
   19e9a:	4b19      	ldr	r3, [pc, #100]	; (19f00 <prvInitialiseNewQueue+0x148>)
   19e9c:	5c9b      	ldrb	r3, [r3, r2]
   19e9e:	3318      	adds	r3, #24
   19ea0:	b2db      	uxtb	r3, r3
   19ea2:	001d      	movs	r5, r3
   19ea4:	6a3b      	ldr	r3, [r7, #32]
   19ea6:	0018      	movs	r0, r3
   19ea8:	4b14      	ldr	r3, [pc, #80]	; (19efc <prvInitialiseNewQueue+0x144>)
   19eaa:	4798      	blx	r3
   19eac:	0003      	movs	r3, r0
   19eae:	001a      	movs	r2, r3
   19eb0:	4b13      	ldr	r3, [pc, #76]	; (19f00 <prvInitialiseNewQueue+0x148>)
   19eb2:	5c9c      	ldrb	r4, [r3, r2]
   19eb4:	6a3b      	ldr	r3, [r7, #32]
   19eb6:	0018      	movs	r0, r3
   19eb8:	4b16      	ldr	r3, [pc, #88]	; (19f14 <prvInitialiseNewQueue+0x15c>)
   19eba:	4798      	blx	r3
   19ebc:	0003      	movs	r3, r0
   19ebe:	b2db      	uxtb	r3, r3
   19ec0:	001a      	movs	r2, r3
   19ec2:	0021      	movs	r1, r4
   19ec4:	0028      	movs	r0, r5
   19ec6:	4b19      	ldr	r3, [pc, #100]	; (19f2c <prvInitialiseNewQueue+0x174>)
   19ec8:	4798      	blx	r3
   19eca:	6a3b      	ldr	r3, [r7, #32]
   19ecc:	0018      	movs	r0, r3
   19ece:	4b0b      	ldr	r3, [pc, #44]	; (19efc <prvInitialiseNewQueue+0x144>)
   19ed0:	4798      	blx	r3
   19ed2:	0003      	movs	r3, r0
   19ed4:	001a      	movs	r2, r3
   19ed6:	4b0a      	ldr	r3, [pc, #40]	; (19f00 <prvInitialiseNewQueue+0x148>)
   19ed8:	5c9c      	ldrb	r4, [r3, r2]
   19eda:	6a3b      	ldr	r3, [r7, #32]
   19edc:	0018      	movs	r0, r3
   19ede:	4b0d      	ldr	r3, [pc, #52]	; (19f14 <prvInitialiseNewQueue+0x15c>)
   19ee0:	4798      	blx	r3
   19ee2:	0003      	movs	r3, r0
   19ee4:	b2db      	uxtb	r3, r3
   19ee6:	2200      	movs	r2, #0
   19ee8:	0019      	movs	r1, r3
   19eea:	0020      	movs	r0, r4
   19eec:	4b10      	ldr	r3, [pc, #64]	; (19f30 <prvInitialiseNewQueue+0x178>)
   19eee:	4798      	blx	r3
}
   19ef0:	46c0      	nop			; (mov r8, r8)
   19ef2:	46bd      	mov	sp, r7
   19ef4:	b004      	add	sp, #16
   19ef6:	bdb0      	pop	{r4, r5, r7, pc}
   19ef8:	00019c49 	.word	0x00019c49
   19efc:	000179d5 	.word	0x000179d5
   19f00:	200000fc 	.word	0x200000fc
   19f04:	00018f95 	.word	0x00018f95
   19f08:	00017af9 	.word	0x00017af9
   19f0c:	2000010a 	.word	0x2000010a
   19f10:	00017b35 	.word	0x00017b35
   19f14:	00017ab5 	.word	0x00017ab5
   19f18:	0001912d 	.word	0x0001912d
   19f1c:	00017cb1 	.word	0x00017cb1
   19f20:	00017a15 	.word	0x00017a15
   19f24:	20000108 	.word	0x20000108
   19f28:	00017ad5 	.word	0x00017ad5
   19f2c:	0001840d 	.word	0x0001840d
   19f30:	00018a69 	.word	0x00018a69

00019f34 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   19f34:	b590      	push	{r4, r7, lr}
   19f36:	b083      	sub	sp, #12
   19f38:	af00      	add	r7, sp, #0
   19f3a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   19f3c:	687b      	ldr	r3, [r7, #4]
   19f3e:	2b00      	cmp	r3, #0
   19f40:	d00e      	beq.n	19f60 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   19f42:	687b      	ldr	r3, [r7, #4]
   19f44:	2200      	movs	r2, #0
   19f46:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   19f48:	687b      	ldr	r3, [r7, #4]
   19f4a:	2200      	movs	r2, #0
   19f4c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   19f4e:	687b      	ldr	r3, [r7, #4]
   19f50:	2200      	movs	r2, #0
   19f52:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   19f54:	6878      	ldr	r0, [r7, #4]
   19f56:	2300      	movs	r3, #0
   19f58:	2200      	movs	r2, #0
   19f5a:	2100      	movs	r1, #0
   19f5c:	4c02      	ldr	r4, [pc, #8]	; (19f68 <prvInitialiseMutex+0x34>)
   19f5e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   19f60:	46c0      	nop			; (mov r8, r8)
   19f62:	46bd      	mov	sp, r7
   19f64:	b003      	add	sp, #12
   19f66:	bd90      	pop	{r4, r7, pc}
   19f68:	00019fad 	.word	0x00019fad

00019f6c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   19f6c:	b580      	push	{r7, lr}
   19f6e:	b086      	sub	sp, #24
   19f70:	af00      	add	r7, sp, #0
   19f72:	0002      	movs	r2, r0
   19f74:	1dfb      	adds	r3, r7, #7
   19f76:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   19f78:	2301      	movs	r3, #1
   19f7a:	617b      	str	r3, [r7, #20]
   19f7c:	2300      	movs	r3, #0
   19f7e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   19f80:	1dfb      	adds	r3, r7, #7
   19f82:	781a      	ldrb	r2, [r3, #0]
   19f84:	6939      	ldr	r1, [r7, #16]
   19f86:	697b      	ldr	r3, [r7, #20]
   19f88:	0018      	movs	r0, r3
   19f8a:	4b06      	ldr	r3, [pc, #24]	; (19fa4 <xQueueCreateMutex+0x38>)
   19f8c:	4798      	blx	r3
   19f8e:	0003      	movs	r3, r0
   19f90:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   19f92:	68fb      	ldr	r3, [r7, #12]
   19f94:	0018      	movs	r0, r3
   19f96:	4b04      	ldr	r3, [pc, #16]	; (19fa8 <xQueueCreateMutex+0x3c>)
   19f98:	4798      	blx	r3

		return pxNewQueue;
   19f9a:	68fb      	ldr	r3, [r7, #12]
	}
   19f9c:	0018      	movs	r0, r3
   19f9e:	46bd      	mov	sp, r7
   19fa0:	b006      	add	sp, #24
   19fa2:	bd80      	pop	{r7, pc}
   19fa4:	00019d05 	.word	0x00019d05
   19fa8:	00019f35 	.word	0x00019f35

00019fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   19fac:	b5b0      	push	{r4, r5, r7, lr}
   19fae:	b08a      	sub	sp, #40	; 0x28
   19fb0:	af00      	add	r7, sp, #0
   19fb2:	60f8      	str	r0, [r7, #12]
   19fb4:	60b9      	str	r1, [r7, #8]
   19fb6:	607a      	str	r2, [r7, #4]
   19fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   19fba:	2300      	movs	r3, #0
   19fbc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19fbe:	68fb      	ldr	r3, [r7, #12]
   19fc0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   19fc2:	6a3b      	ldr	r3, [r7, #32]
   19fc4:	2b00      	cmp	r3, #0
   19fc6:	d101      	bne.n	19fcc <xQueueGenericSend+0x20>
   19fc8:	b672      	cpsid	i
   19fca:	e7fe      	b.n	19fca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19fcc:	68bb      	ldr	r3, [r7, #8]
   19fce:	2b00      	cmp	r3, #0
   19fd0:	d103      	bne.n	19fda <xQueueGenericSend+0x2e>
   19fd2:	6a3b      	ldr	r3, [r7, #32]
   19fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19fd6:	2b00      	cmp	r3, #0
   19fd8:	d101      	bne.n	19fde <xQueueGenericSend+0x32>
   19fda:	2301      	movs	r3, #1
   19fdc:	e000      	b.n	19fe0 <xQueueGenericSend+0x34>
   19fde:	2300      	movs	r3, #0
   19fe0:	2b00      	cmp	r3, #0
   19fe2:	d101      	bne.n	19fe8 <xQueueGenericSend+0x3c>
   19fe4:	b672      	cpsid	i
   19fe6:	e7fe      	b.n	19fe6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19fe8:	683b      	ldr	r3, [r7, #0]
   19fea:	2b02      	cmp	r3, #2
   19fec:	d103      	bne.n	19ff6 <xQueueGenericSend+0x4a>
   19fee:	6a3b      	ldr	r3, [r7, #32]
   19ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19ff2:	2b01      	cmp	r3, #1
   19ff4:	d101      	bne.n	19ffa <xQueueGenericSend+0x4e>
   19ff6:	2301      	movs	r3, #1
   19ff8:	e000      	b.n	19ffc <xQueueGenericSend+0x50>
   19ffa:	2300      	movs	r3, #0
   19ffc:	2b00      	cmp	r3, #0
   19ffe:	d101      	bne.n	1a004 <xQueueGenericSend+0x58>
   1a000:	b672      	cpsid	i
   1a002:	e7fe      	b.n	1a002 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a004:	4bbc      	ldr	r3, [pc, #752]	; (1a2f8 <xQueueGenericSend+0x34c>)
   1a006:	4798      	blx	r3
   1a008:	1e03      	subs	r3, r0, #0
   1a00a:	d102      	bne.n	1a012 <xQueueGenericSend+0x66>
   1a00c:	687b      	ldr	r3, [r7, #4]
   1a00e:	2b00      	cmp	r3, #0
   1a010:	d101      	bne.n	1a016 <xQueueGenericSend+0x6a>
   1a012:	2301      	movs	r3, #1
   1a014:	e000      	b.n	1a018 <xQueueGenericSend+0x6c>
   1a016:	2300      	movs	r3, #0
   1a018:	2b00      	cmp	r3, #0
   1a01a:	d101      	bne.n	1a020 <xQueueGenericSend+0x74>
   1a01c:	b672      	cpsid	i
   1a01e:	e7fe      	b.n	1a01e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a020:	4bb6      	ldr	r3, [pc, #728]	; (1a2fc <xQueueGenericSend+0x350>)
   1a022:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a024:	6a3b      	ldr	r3, [r7, #32]
   1a026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a028:	6a3b      	ldr	r3, [r7, #32]
   1a02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a02c:	429a      	cmp	r2, r3
   1a02e:	d303      	bcc.n	1a038 <xQueueGenericSend+0x8c>
   1a030:	683b      	ldr	r3, [r7, #0]
   1a032:	2b02      	cmp	r3, #2
   1a034:	d000      	beq.n	1a038 <xQueueGenericSend+0x8c>
   1a036:	e08e      	b.n	1a156 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a038:	4bb1      	ldr	r3, [pc, #708]	; (1a300 <xQueueGenericSend+0x354>)
   1a03a:	4798      	blx	r3
   1a03c:	0003      	movs	r3, r0
   1a03e:	0018      	movs	r0, r3
   1a040:	4bb0      	ldr	r3, [pc, #704]	; (1a304 <xQueueGenericSend+0x358>)
   1a042:	4798      	blx	r3
   1a044:	0003      	movs	r3, r0
   1a046:	001a      	movs	r2, r3
   1a048:	4baf      	ldr	r3, [pc, #700]	; (1a308 <xQueueGenericSend+0x35c>)
   1a04a:	881b      	ldrh	r3, [r3, #0]
   1a04c:	4013      	ands	r3, r2
   1a04e:	b29b      	uxth	r3, r3
   1a050:	2b00      	cmp	r3, #0
   1a052:	d02e      	beq.n	1a0b2 <xQueueGenericSend+0x106>
   1a054:	6a3b      	ldr	r3, [r7, #32]
   1a056:	0018      	movs	r0, r3
   1a058:	4bac      	ldr	r3, [pc, #688]	; (1a30c <xQueueGenericSend+0x360>)
   1a05a:	4798      	blx	r3
   1a05c:	0003      	movs	r3, r0
   1a05e:	001a      	movs	r2, r3
   1a060:	4ba9      	ldr	r3, [pc, #676]	; (1a308 <xQueueGenericSend+0x35c>)
   1a062:	881b      	ldrh	r3, [r3, #0]
   1a064:	4013      	ands	r3, r2
   1a066:	b29b      	uxth	r3, r3
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d022      	beq.n	1a0b2 <xQueueGenericSend+0x106>
   1a06c:	683b      	ldr	r3, [r7, #0]
   1a06e:	2b00      	cmp	r3, #0
   1a070:	d10b      	bne.n	1a08a <xQueueGenericSend+0xde>
   1a072:	6a3b      	ldr	r3, [r7, #32]
   1a074:	0018      	movs	r0, r3
   1a076:	4ba6      	ldr	r3, [pc, #664]	; (1a310 <xQueueGenericSend+0x364>)
   1a078:	4798      	blx	r3
   1a07a:	0003      	movs	r3, r0
   1a07c:	001a      	movs	r2, r3
   1a07e:	4ba5      	ldr	r3, [pc, #660]	; (1a314 <xQueueGenericSend+0x368>)
   1a080:	5c9b      	ldrb	r3, [r3, r2]
   1a082:	3320      	adds	r3, #32
   1a084:	b2db      	uxtb	r3, r3
   1a086:	001d      	movs	r5, r3
   1a088:	e000      	b.n	1a08c <xQueueGenericSend+0xe0>
   1a08a:	2525      	movs	r5, #37	; 0x25
   1a08c:	6a3b      	ldr	r3, [r7, #32]
   1a08e:	0018      	movs	r0, r3
   1a090:	4b9f      	ldr	r3, [pc, #636]	; (1a310 <xQueueGenericSend+0x364>)
   1a092:	4798      	blx	r3
   1a094:	0003      	movs	r3, r0
   1a096:	001a      	movs	r2, r3
   1a098:	4b9e      	ldr	r3, [pc, #632]	; (1a314 <xQueueGenericSend+0x368>)
   1a09a:	5c9c      	ldrb	r4, [r3, r2]
   1a09c:	6a3b      	ldr	r3, [r7, #32]
   1a09e:	0018      	movs	r0, r3
   1a0a0:	4b9d      	ldr	r3, [pc, #628]	; (1a318 <xQueueGenericSend+0x36c>)
   1a0a2:	4798      	blx	r3
   1a0a4:	0003      	movs	r3, r0
   1a0a6:	b2db      	uxtb	r3, r3
   1a0a8:	001a      	movs	r2, r3
   1a0aa:	0021      	movs	r1, r4
   1a0ac:	0028      	movs	r0, r5
   1a0ae:	4b9b      	ldr	r3, [pc, #620]	; (1a31c <xQueueGenericSend+0x370>)
   1a0b0:	4798      	blx	r3
   1a0b2:	6a3b      	ldr	r3, [r7, #32]
   1a0b4:	0018      	movs	r0, r3
   1a0b6:	4b96      	ldr	r3, [pc, #600]	; (1a310 <xQueueGenericSend+0x364>)
   1a0b8:	4798      	blx	r3
   1a0ba:	0003      	movs	r3, r0
   1a0bc:	001a      	movs	r2, r3
   1a0be:	4b95      	ldr	r3, [pc, #596]	; (1a314 <xQueueGenericSend+0x368>)
   1a0c0:	5c9c      	ldrb	r4, [r3, r2]
   1a0c2:	6a3b      	ldr	r3, [r7, #32]
   1a0c4:	0018      	movs	r0, r3
   1a0c6:	4b94      	ldr	r3, [pc, #592]	; (1a318 <xQueueGenericSend+0x36c>)
   1a0c8:	4798      	blx	r3
   1a0ca:	0003      	movs	r3, r0
   1a0cc:	b2dd      	uxtb	r5, r3
   1a0ce:	6a3b      	ldr	r3, [r7, #32]
   1a0d0:	0018      	movs	r0, r3
   1a0d2:	4b8f      	ldr	r3, [pc, #572]	; (1a310 <xQueueGenericSend+0x364>)
   1a0d4:	4798      	blx	r3
   1a0d6:	0003      	movs	r3, r0
   1a0d8:	001a      	movs	r2, r3
   1a0da:	4b8e      	ldr	r3, [pc, #568]	; (1a314 <xQueueGenericSend+0x368>)
   1a0dc:	5c9b      	ldrb	r3, [r3, r2]
   1a0de:	2b02      	cmp	r3, #2
   1a0e0:	d005      	beq.n	1a0ee <xQueueGenericSend+0x142>
   1a0e2:	6a3b      	ldr	r3, [r7, #32]
   1a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a0e6:	b2db      	uxtb	r3, r3
   1a0e8:	3301      	adds	r3, #1
   1a0ea:	b2db      	uxtb	r3, r3
   1a0ec:	e000      	b.n	1a0f0 <xQueueGenericSend+0x144>
   1a0ee:	2300      	movs	r3, #0
   1a0f0:	001a      	movs	r2, r3
   1a0f2:	0029      	movs	r1, r5
   1a0f4:	0020      	movs	r0, r4
   1a0f6:	4b8a      	ldr	r3, [pc, #552]	; (1a320 <xQueueGenericSend+0x374>)
   1a0f8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a0fa:	683a      	ldr	r2, [r7, #0]
   1a0fc:	68b9      	ldr	r1, [r7, #8]
   1a0fe:	6a3b      	ldr	r3, [r7, #32]
   1a100:	0018      	movs	r0, r3
   1a102:	4b88      	ldr	r3, [pc, #544]	; (1a324 <xQueueGenericSend+0x378>)
   1a104:	4798      	blx	r3
   1a106:	0003      	movs	r3, r0
   1a108:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a10a:	6a3b      	ldr	r3, [r7, #32]
   1a10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a10e:	2b00      	cmp	r3, #0
   1a110:	d00a      	beq.n	1a128 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a112:	683a      	ldr	r2, [r7, #0]
   1a114:	6a3b      	ldr	r3, [r7, #32]
   1a116:	0011      	movs	r1, r2
   1a118:	0018      	movs	r0, r3
   1a11a:	4b83      	ldr	r3, [pc, #524]	; (1a328 <xQueueGenericSend+0x37c>)
   1a11c:	4798      	blx	r3
   1a11e:	1e03      	subs	r3, r0, #0
   1a120:	d015      	beq.n	1a14e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a122:	4b82      	ldr	r3, [pc, #520]	; (1a32c <xQueueGenericSend+0x380>)
   1a124:	4798      	blx	r3
   1a126:	e012      	b.n	1a14e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a128:	6a3b      	ldr	r3, [r7, #32]
   1a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a12c:	2b00      	cmp	r3, #0
   1a12e:	d009      	beq.n	1a144 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a130:	6a3b      	ldr	r3, [r7, #32]
   1a132:	3324      	adds	r3, #36	; 0x24
   1a134:	0018      	movs	r0, r3
   1a136:	4b7e      	ldr	r3, [pc, #504]	; (1a330 <xQueueGenericSend+0x384>)
   1a138:	4798      	blx	r3
   1a13a:	1e03      	subs	r3, r0, #0
   1a13c:	d007      	beq.n	1a14e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a13e:	4b7b      	ldr	r3, [pc, #492]	; (1a32c <xQueueGenericSend+0x380>)
   1a140:	4798      	blx	r3
   1a142:	e004      	b.n	1a14e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a144:	69fb      	ldr	r3, [r7, #28]
   1a146:	2b00      	cmp	r3, #0
   1a148:	d001      	beq.n	1a14e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a14a:	4b78      	ldr	r3, [pc, #480]	; (1a32c <xQueueGenericSend+0x380>)
   1a14c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a14e:	4b79      	ldr	r3, [pc, #484]	; (1a334 <xQueueGenericSend+0x388>)
   1a150:	4798      	blx	r3
				return pdPASS;
   1a152:	2301      	movs	r3, #1
   1a154:	e142      	b.n	1a3dc <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a156:	687b      	ldr	r3, [r7, #4]
   1a158:	2b00      	cmp	r3, #0
   1a15a:	d140      	bne.n	1a1de <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a15c:	4b75      	ldr	r3, [pc, #468]	; (1a334 <xQueueGenericSend+0x388>)
   1a15e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a160:	4b67      	ldr	r3, [pc, #412]	; (1a300 <xQueueGenericSend+0x354>)
   1a162:	4798      	blx	r3
   1a164:	0003      	movs	r3, r0
   1a166:	0018      	movs	r0, r3
   1a168:	4b66      	ldr	r3, [pc, #408]	; (1a304 <xQueueGenericSend+0x358>)
   1a16a:	4798      	blx	r3
   1a16c:	0003      	movs	r3, r0
   1a16e:	001a      	movs	r2, r3
   1a170:	4b65      	ldr	r3, [pc, #404]	; (1a308 <xQueueGenericSend+0x35c>)
   1a172:	881b      	ldrh	r3, [r3, #0]
   1a174:	4013      	ands	r3, r2
   1a176:	b29b      	uxth	r3, r3
   1a178:	2b00      	cmp	r3, #0
   1a17a:	d02e      	beq.n	1a1da <xQueueGenericSend+0x22e>
   1a17c:	6a3b      	ldr	r3, [r7, #32]
   1a17e:	0018      	movs	r0, r3
   1a180:	4b62      	ldr	r3, [pc, #392]	; (1a30c <xQueueGenericSend+0x360>)
   1a182:	4798      	blx	r3
   1a184:	0003      	movs	r3, r0
   1a186:	001a      	movs	r2, r3
   1a188:	4b5f      	ldr	r3, [pc, #380]	; (1a308 <xQueueGenericSend+0x35c>)
   1a18a:	881b      	ldrh	r3, [r3, #0]
   1a18c:	4013      	ands	r3, r2
   1a18e:	b29b      	uxth	r3, r3
   1a190:	2b00      	cmp	r3, #0
   1a192:	d022      	beq.n	1a1da <xQueueGenericSend+0x22e>
   1a194:	683b      	ldr	r3, [r7, #0]
   1a196:	2b00      	cmp	r3, #0
   1a198:	d10b      	bne.n	1a1b2 <xQueueGenericSend+0x206>
   1a19a:	6a3b      	ldr	r3, [r7, #32]
   1a19c:	0018      	movs	r0, r3
   1a19e:	4b5c      	ldr	r3, [pc, #368]	; (1a310 <xQueueGenericSend+0x364>)
   1a1a0:	4798      	blx	r3
   1a1a2:	0003      	movs	r3, r0
   1a1a4:	001a      	movs	r2, r3
   1a1a6:	4b5b      	ldr	r3, [pc, #364]	; (1a314 <xQueueGenericSend+0x368>)
   1a1a8:	5c9b      	ldrb	r3, [r3, r2]
   1a1aa:	3348      	adds	r3, #72	; 0x48
   1a1ac:	b2db      	uxtb	r3, r3
   1a1ae:	001d      	movs	r5, r3
   1a1b0:	e000      	b.n	1a1b4 <xQueueGenericSend+0x208>
   1a1b2:	254d      	movs	r5, #77	; 0x4d
   1a1b4:	6a3b      	ldr	r3, [r7, #32]
   1a1b6:	0018      	movs	r0, r3
   1a1b8:	4b55      	ldr	r3, [pc, #340]	; (1a310 <xQueueGenericSend+0x364>)
   1a1ba:	4798      	blx	r3
   1a1bc:	0003      	movs	r3, r0
   1a1be:	001a      	movs	r2, r3
   1a1c0:	4b54      	ldr	r3, [pc, #336]	; (1a314 <xQueueGenericSend+0x368>)
   1a1c2:	5c9c      	ldrb	r4, [r3, r2]
   1a1c4:	6a3b      	ldr	r3, [r7, #32]
   1a1c6:	0018      	movs	r0, r3
   1a1c8:	4b53      	ldr	r3, [pc, #332]	; (1a318 <xQueueGenericSend+0x36c>)
   1a1ca:	4798      	blx	r3
   1a1cc:	0003      	movs	r3, r0
   1a1ce:	b2db      	uxtb	r3, r3
   1a1d0:	001a      	movs	r2, r3
   1a1d2:	0021      	movs	r1, r4
   1a1d4:	0028      	movs	r0, r5
   1a1d6:	4b51      	ldr	r3, [pc, #324]	; (1a31c <xQueueGenericSend+0x370>)
   1a1d8:	4798      	blx	r3
					return errQUEUE_FULL;
   1a1da:	2300      	movs	r3, #0
   1a1dc:	e0fe      	b.n	1a3dc <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1e0:	2b00      	cmp	r3, #0
   1a1e2:	d106      	bne.n	1a1f2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a1e4:	2314      	movs	r3, #20
   1a1e6:	18fb      	adds	r3, r7, r3
   1a1e8:	0018      	movs	r0, r3
   1a1ea:	4b53      	ldr	r3, [pc, #332]	; (1a338 <xQueueGenericSend+0x38c>)
   1a1ec:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a1ee:	2301      	movs	r3, #1
   1a1f0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a1f2:	4b50      	ldr	r3, [pc, #320]	; (1a334 <xQueueGenericSend+0x388>)
   1a1f4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a1f6:	4b51      	ldr	r3, [pc, #324]	; (1a33c <xQueueGenericSend+0x390>)
   1a1f8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a1fa:	4b40      	ldr	r3, [pc, #256]	; (1a2fc <xQueueGenericSend+0x350>)
   1a1fc:	4798      	blx	r3
   1a1fe:	6a3b      	ldr	r3, [r7, #32]
   1a200:	2244      	movs	r2, #68	; 0x44
   1a202:	5c9b      	ldrb	r3, [r3, r2]
   1a204:	b25b      	sxtb	r3, r3
   1a206:	3301      	adds	r3, #1
   1a208:	d103      	bne.n	1a212 <xQueueGenericSend+0x266>
   1a20a:	6a3b      	ldr	r3, [r7, #32]
   1a20c:	2244      	movs	r2, #68	; 0x44
   1a20e:	2100      	movs	r1, #0
   1a210:	5499      	strb	r1, [r3, r2]
   1a212:	6a3b      	ldr	r3, [r7, #32]
   1a214:	2245      	movs	r2, #69	; 0x45
   1a216:	5c9b      	ldrb	r3, [r3, r2]
   1a218:	b25b      	sxtb	r3, r3
   1a21a:	3301      	adds	r3, #1
   1a21c:	d103      	bne.n	1a226 <xQueueGenericSend+0x27a>
   1a21e:	6a3b      	ldr	r3, [r7, #32]
   1a220:	2245      	movs	r2, #69	; 0x45
   1a222:	2100      	movs	r1, #0
   1a224:	5499      	strb	r1, [r3, r2]
   1a226:	4b43      	ldr	r3, [pc, #268]	; (1a334 <xQueueGenericSend+0x388>)
   1a228:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a22a:	1d3a      	adds	r2, r7, #4
   1a22c:	2314      	movs	r3, #20
   1a22e:	18fb      	adds	r3, r7, r3
   1a230:	0011      	movs	r1, r2
   1a232:	0018      	movs	r0, r3
   1a234:	4b42      	ldr	r3, [pc, #264]	; (1a340 <xQueueGenericSend+0x394>)
   1a236:	4798      	blx	r3
   1a238:	1e03      	subs	r3, r0, #0
   1a23a:	d000      	beq.n	1a23e <xQueueGenericSend+0x292>
   1a23c:	e08a      	b.n	1a354 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a23e:	6a3b      	ldr	r3, [r7, #32]
   1a240:	0018      	movs	r0, r3
   1a242:	4b40      	ldr	r3, [pc, #256]	; (1a344 <xQueueGenericSend+0x398>)
   1a244:	4798      	blx	r3
   1a246:	1e03      	subs	r3, r0, #0
   1a248:	d04f      	beq.n	1a2ea <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a24a:	4b2d      	ldr	r3, [pc, #180]	; (1a300 <xQueueGenericSend+0x354>)
   1a24c:	4798      	blx	r3
   1a24e:	0003      	movs	r3, r0
   1a250:	0018      	movs	r0, r3
   1a252:	4b2c      	ldr	r3, [pc, #176]	; (1a304 <xQueueGenericSend+0x358>)
   1a254:	4798      	blx	r3
   1a256:	0003      	movs	r3, r0
   1a258:	001a      	movs	r2, r3
   1a25a:	4b2b      	ldr	r3, [pc, #172]	; (1a308 <xQueueGenericSend+0x35c>)
   1a25c:	881b      	ldrh	r3, [r3, #0]
   1a25e:	4013      	ands	r3, r2
   1a260:	b29b      	uxth	r3, r3
   1a262:	2b00      	cmp	r3, #0
   1a264:	d02e      	beq.n	1a2c4 <xQueueGenericSend+0x318>
   1a266:	6a3b      	ldr	r3, [r7, #32]
   1a268:	0018      	movs	r0, r3
   1a26a:	4b28      	ldr	r3, [pc, #160]	; (1a30c <xQueueGenericSend+0x360>)
   1a26c:	4798      	blx	r3
   1a26e:	0003      	movs	r3, r0
   1a270:	001a      	movs	r2, r3
   1a272:	4b25      	ldr	r3, [pc, #148]	; (1a308 <xQueueGenericSend+0x35c>)
   1a274:	881b      	ldrh	r3, [r3, #0]
   1a276:	4013      	ands	r3, r2
   1a278:	b29b      	uxth	r3, r3
   1a27a:	2b00      	cmp	r3, #0
   1a27c:	d022      	beq.n	1a2c4 <xQueueGenericSend+0x318>
   1a27e:	683b      	ldr	r3, [r7, #0]
   1a280:	2b00      	cmp	r3, #0
   1a282:	d10b      	bne.n	1a29c <xQueueGenericSend+0x2f0>
   1a284:	6a3b      	ldr	r3, [r7, #32]
   1a286:	0018      	movs	r0, r3
   1a288:	4b21      	ldr	r3, [pc, #132]	; (1a310 <xQueueGenericSend+0x364>)
   1a28a:	4798      	blx	r3
   1a28c:	0003      	movs	r3, r0
   1a28e:	001a      	movs	r2, r3
   1a290:	4b20      	ldr	r3, [pc, #128]	; (1a314 <xQueueGenericSend+0x368>)
   1a292:	5c9b      	ldrb	r3, [r3, r2]
   1a294:	3370      	adds	r3, #112	; 0x70
   1a296:	b2db      	uxtb	r3, r3
   1a298:	001d      	movs	r5, r3
   1a29a:	e000      	b.n	1a29e <xQueueGenericSend+0x2f2>
   1a29c:	2575      	movs	r5, #117	; 0x75
   1a29e:	6a3b      	ldr	r3, [r7, #32]
   1a2a0:	0018      	movs	r0, r3
   1a2a2:	4b1b      	ldr	r3, [pc, #108]	; (1a310 <xQueueGenericSend+0x364>)
   1a2a4:	4798      	blx	r3
   1a2a6:	0003      	movs	r3, r0
   1a2a8:	001a      	movs	r2, r3
   1a2aa:	4b1a      	ldr	r3, [pc, #104]	; (1a314 <xQueueGenericSend+0x368>)
   1a2ac:	5c9c      	ldrb	r4, [r3, r2]
   1a2ae:	6a3b      	ldr	r3, [r7, #32]
   1a2b0:	0018      	movs	r0, r3
   1a2b2:	4b19      	ldr	r3, [pc, #100]	; (1a318 <xQueueGenericSend+0x36c>)
   1a2b4:	4798      	blx	r3
   1a2b6:	0003      	movs	r3, r0
   1a2b8:	b2db      	uxtb	r3, r3
   1a2ba:	001a      	movs	r2, r3
   1a2bc:	0021      	movs	r1, r4
   1a2be:	0028      	movs	r0, r5
   1a2c0:	4b16      	ldr	r3, [pc, #88]	; (1a31c <xQueueGenericSend+0x370>)
   1a2c2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a2c4:	6a3b      	ldr	r3, [r7, #32]
   1a2c6:	3310      	adds	r3, #16
   1a2c8:	687a      	ldr	r2, [r7, #4]
   1a2ca:	0011      	movs	r1, r2
   1a2cc:	0018      	movs	r0, r3
   1a2ce:	4b1e      	ldr	r3, [pc, #120]	; (1a348 <xQueueGenericSend+0x39c>)
   1a2d0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1a2d2:	6a3b      	ldr	r3, [r7, #32]
   1a2d4:	0018      	movs	r0, r3
   1a2d6:	4b1d      	ldr	r3, [pc, #116]	; (1a34c <xQueueGenericSend+0x3a0>)
   1a2d8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1a2da:	4b1d      	ldr	r3, [pc, #116]	; (1a350 <xQueueGenericSend+0x3a4>)
   1a2dc:	4798      	blx	r3
   1a2de:	1e03      	subs	r3, r0, #0
   1a2e0:	d000      	beq.n	1a2e4 <xQueueGenericSend+0x338>
   1a2e2:	e69d      	b.n	1a020 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1a2e4:	4b11      	ldr	r3, [pc, #68]	; (1a32c <xQueueGenericSend+0x380>)
   1a2e6:	4798      	blx	r3
   1a2e8:	e69a      	b.n	1a020 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1a2ea:	6a3b      	ldr	r3, [r7, #32]
   1a2ec:	0018      	movs	r0, r3
   1a2ee:	4b17      	ldr	r3, [pc, #92]	; (1a34c <xQueueGenericSend+0x3a0>)
   1a2f0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a2f2:	4b17      	ldr	r3, [pc, #92]	; (1a350 <xQueueGenericSend+0x3a4>)
   1a2f4:	4798      	blx	r3
   1a2f6:	e693      	b.n	1a020 <xQueueGenericSend+0x74>
   1a2f8:	0001c739 	.word	0x0001c739
   1a2fc:	00019a19 	.word	0x00019a19
   1a300:	00017cb1 	.word	0x00017cb1
   1a304:	00017a15 	.word	0x00017a15
   1a308:	20000108 	.word	0x20000108
   1a30c:	00017ad5 	.word	0x00017ad5
   1a310:	000179d5 	.word	0x000179d5
   1a314:	200000fc 	.word	0x200000fc
   1a318:	00017ab5 	.word	0x00017ab5
   1a31c:	0001840d 	.word	0x0001840d
   1a320:	00018a69 	.word	0x00018a69
   1a324:	0001b1e5 	.word	0x0001b1e5
   1a328:	0001b4e9 	.word	0x0001b4e9
   1a32c:	00019a01 	.word	0x00019a01
   1a330:	0001c2a9 	.word	0x0001c2a9
   1a334:	00019a3d 	.word	0x00019a3d
   1a338:	0001c3e9 	.word	0x0001c3e9
   1a33c:	0001bcd1 	.word	0x0001bcd1
   1a340:	0001c411 	.word	0x0001c411
   1a344:	0001b439 	.word	0x0001b439
   1a348:	0001c185 	.word	0x0001c185
   1a34c:	0001b315 	.word	0x0001b315
   1a350:	0001bce9 	.word	0x0001bce9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1a354:	6a3b      	ldr	r3, [r7, #32]
   1a356:	0018      	movs	r0, r3
   1a358:	4b22      	ldr	r3, [pc, #136]	; (1a3e4 <xQueueGenericSend+0x438>)
   1a35a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a35c:	4b22      	ldr	r3, [pc, #136]	; (1a3e8 <xQueueGenericSend+0x43c>)
   1a35e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1a360:	4b22      	ldr	r3, [pc, #136]	; (1a3ec <xQueueGenericSend+0x440>)
   1a362:	4798      	blx	r3
   1a364:	0003      	movs	r3, r0
   1a366:	0018      	movs	r0, r3
   1a368:	4b21      	ldr	r3, [pc, #132]	; (1a3f0 <xQueueGenericSend+0x444>)
   1a36a:	4798      	blx	r3
   1a36c:	0003      	movs	r3, r0
   1a36e:	001a      	movs	r2, r3
   1a370:	4b20      	ldr	r3, [pc, #128]	; (1a3f4 <xQueueGenericSend+0x448>)
   1a372:	881b      	ldrh	r3, [r3, #0]
   1a374:	4013      	ands	r3, r2
   1a376:	b29b      	uxth	r3, r3
   1a378:	2b00      	cmp	r3, #0
   1a37a:	d02e      	beq.n	1a3da <xQueueGenericSend+0x42e>
   1a37c:	6a3b      	ldr	r3, [r7, #32]
   1a37e:	0018      	movs	r0, r3
   1a380:	4b1d      	ldr	r3, [pc, #116]	; (1a3f8 <xQueueGenericSend+0x44c>)
   1a382:	4798      	blx	r3
   1a384:	0003      	movs	r3, r0
   1a386:	001a      	movs	r2, r3
   1a388:	4b1a      	ldr	r3, [pc, #104]	; (1a3f4 <xQueueGenericSend+0x448>)
   1a38a:	881b      	ldrh	r3, [r3, #0]
   1a38c:	4013      	ands	r3, r2
   1a38e:	b29b      	uxth	r3, r3
   1a390:	2b00      	cmp	r3, #0
   1a392:	d022      	beq.n	1a3da <xQueueGenericSend+0x42e>
   1a394:	683b      	ldr	r3, [r7, #0]
   1a396:	2b00      	cmp	r3, #0
   1a398:	d10b      	bne.n	1a3b2 <xQueueGenericSend+0x406>
   1a39a:	6a3b      	ldr	r3, [r7, #32]
   1a39c:	0018      	movs	r0, r3
   1a39e:	4b17      	ldr	r3, [pc, #92]	; (1a3fc <xQueueGenericSend+0x450>)
   1a3a0:	4798      	blx	r3
   1a3a2:	0003      	movs	r3, r0
   1a3a4:	001a      	movs	r2, r3
   1a3a6:	4b16      	ldr	r3, [pc, #88]	; (1a400 <xQueueGenericSend+0x454>)
   1a3a8:	5c9b      	ldrb	r3, [r3, r2]
   1a3aa:	3348      	adds	r3, #72	; 0x48
   1a3ac:	b2db      	uxtb	r3, r3
   1a3ae:	001d      	movs	r5, r3
   1a3b0:	e000      	b.n	1a3b4 <xQueueGenericSend+0x408>
   1a3b2:	254d      	movs	r5, #77	; 0x4d
   1a3b4:	6a3b      	ldr	r3, [r7, #32]
   1a3b6:	0018      	movs	r0, r3
   1a3b8:	4b10      	ldr	r3, [pc, #64]	; (1a3fc <xQueueGenericSend+0x450>)
   1a3ba:	4798      	blx	r3
   1a3bc:	0003      	movs	r3, r0
   1a3be:	001a      	movs	r2, r3
   1a3c0:	4b0f      	ldr	r3, [pc, #60]	; (1a400 <xQueueGenericSend+0x454>)
   1a3c2:	5c9c      	ldrb	r4, [r3, r2]
   1a3c4:	6a3b      	ldr	r3, [r7, #32]
   1a3c6:	0018      	movs	r0, r3
   1a3c8:	4b0e      	ldr	r3, [pc, #56]	; (1a404 <xQueueGenericSend+0x458>)
   1a3ca:	4798      	blx	r3
   1a3cc:	0003      	movs	r3, r0
   1a3ce:	b2db      	uxtb	r3, r3
   1a3d0:	001a      	movs	r2, r3
   1a3d2:	0021      	movs	r1, r4
   1a3d4:	0028      	movs	r0, r5
   1a3d6:	4b0c      	ldr	r3, [pc, #48]	; (1a408 <xQueueGenericSend+0x45c>)
   1a3d8:	4798      	blx	r3
			return errQUEUE_FULL;
   1a3da:	2300      	movs	r3, #0
		}
	}
}
   1a3dc:	0018      	movs	r0, r3
   1a3de:	46bd      	mov	sp, r7
   1a3e0:	b00a      	add	sp, #40	; 0x28
   1a3e2:	bdb0      	pop	{r4, r5, r7, pc}
   1a3e4:	0001b315 	.word	0x0001b315
   1a3e8:	0001bce9 	.word	0x0001bce9
   1a3ec:	00017cb1 	.word	0x00017cb1
   1a3f0:	00017a15 	.word	0x00017a15
   1a3f4:	20000108 	.word	0x20000108
   1a3f8:	00017ad5 	.word	0x00017ad5
   1a3fc:	000179d5 	.word	0x000179d5
   1a400:	200000fc 	.word	0x200000fc
   1a404:	00017ab5 	.word	0x00017ab5
   1a408:	0001840d 	.word	0x0001840d

0001a40c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1a40c:	b5b0      	push	{r4, r5, r7, lr}
   1a40e:	b088      	sub	sp, #32
   1a410:	af00      	add	r7, sp, #0
   1a412:	60f8      	str	r0, [r7, #12]
   1a414:	60b9      	str	r1, [r7, #8]
   1a416:	607a      	str	r2, [r7, #4]
   1a418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a41a:	68fb      	ldr	r3, [r7, #12]
   1a41c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1a41e:	69bb      	ldr	r3, [r7, #24]
   1a420:	2b00      	cmp	r3, #0
   1a422:	d101      	bne.n	1a428 <xQueueGenericSendFromISR+0x1c>
   1a424:	b672      	cpsid	i
   1a426:	e7fe      	b.n	1a426 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a428:	68bb      	ldr	r3, [r7, #8]
   1a42a:	2b00      	cmp	r3, #0
   1a42c:	d103      	bne.n	1a436 <xQueueGenericSendFromISR+0x2a>
   1a42e:	69bb      	ldr	r3, [r7, #24]
   1a430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a432:	2b00      	cmp	r3, #0
   1a434:	d101      	bne.n	1a43a <xQueueGenericSendFromISR+0x2e>
   1a436:	2301      	movs	r3, #1
   1a438:	e000      	b.n	1a43c <xQueueGenericSendFromISR+0x30>
   1a43a:	2300      	movs	r3, #0
   1a43c:	2b00      	cmp	r3, #0
   1a43e:	d101      	bne.n	1a444 <xQueueGenericSendFromISR+0x38>
   1a440:	b672      	cpsid	i
   1a442:	e7fe      	b.n	1a442 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a444:	683b      	ldr	r3, [r7, #0]
   1a446:	2b02      	cmp	r3, #2
   1a448:	d103      	bne.n	1a452 <xQueueGenericSendFromISR+0x46>
   1a44a:	69bb      	ldr	r3, [r7, #24]
   1a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a44e:	2b01      	cmp	r3, #1
   1a450:	d101      	bne.n	1a456 <xQueueGenericSendFromISR+0x4a>
   1a452:	2301      	movs	r3, #1
   1a454:	e000      	b.n	1a458 <xQueueGenericSendFromISR+0x4c>
   1a456:	2300      	movs	r3, #0
   1a458:	2b00      	cmp	r3, #0
   1a45a:	d101      	bne.n	1a460 <xQueueGenericSendFromISR+0x54>
   1a45c:	b672      	cpsid	i
   1a45e:	e7fe      	b.n	1a45e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a460:	4b68      	ldr	r3, [pc, #416]	; (1a604 <xQueueGenericSendFromISR+0x1f8>)
   1a462:	4798      	blx	r3
   1a464:	0003      	movs	r3, r0
   1a466:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a468:	69bb      	ldr	r3, [r7, #24]
   1a46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a46c:	69bb      	ldr	r3, [r7, #24]
   1a46e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a470:	429a      	cmp	r2, r3
   1a472:	d303      	bcc.n	1a47c <xQueueGenericSendFromISR+0x70>
   1a474:	683b      	ldr	r3, [r7, #0]
   1a476:	2b02      	cmp	r3, #2
   1a478:	d000      	beq.n	1a47c <xQueueGenericSendFromISR+0x70>
   1a47a:	e088      	b.n	1a58e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a47c:	2313      	movs	r3, #19
   1a47e:	18fb      	adds	r3, r7, r3
   1a480:	69ba      	ldr	r2, [r7, #24]
   1a482:	2145      	movs	r1, #69	; 0x45
   1a484:	5c52      	ldrb	r2, [r2, r1]
   1a486:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a488:	69bb      	ldr	r3, [r7, #24]
   1a48a:	0018      	movs	r0, r3
   1a48c:	4b5e      	ldr	r3, [pc, #376]	; (1a608 <xQueueGenericSendFromISR+0x1fc>)
   1a48e:	4798      	blx	r3
   1a490:	0003      	movs	r3, r0
   1a492:	001a      	movs	r2, r3
   1a494:	4b5d      	ldr	r3, [pc, #372]	; (1a60c <xQueueGenericSendFromISR+0x200>)
   1a496:	881b      	ldrh	r3, [r3, #0]
   1a498:	4013      	ands	r3, r2
   1a49a:	b29b      	uxth	r3, r3
   1a49c:	2b00      	cmp	r3, #0
   1a49e:	d022      	beq.n	1a4e6 <xQueueGenericSendFromISR+0xda>
   1a4a0:	683b      	ldr	r3, [r7, #0]
   1a4a2:	2b00      	cmp	r3, #0
   1a4a4:	d10b      	bne.n	1a4be <xQueueGenericSendFromISR+0xb2>
   1a4a6:	69bb      	ldr	r3, [r7, #24]
   1a4a8:	0018      	movs	r0, r3
   1a4aa:	4b59      	ldr	r3, [pc, #356]	; (1a610 <xQueueGenericSendFromISR+0x204>)
   1a4ac:	4798      	blx	r3
   1a4ae:	0003      	movs	r3, r0
   1a4b0:	001a      	movs	r2, r3
   1a4b2:	4b58      	ldr	r3, [pc, #352]	; (1a614 <xQueueGenericSendFromISR+0x208>)
   1a4b4:	5c9b      	ldrb	r3, [r3, r2]
   1a4b6:	3330      	adds	r3, #48	; 0x30
   1a4b8:	b2db      	uxtb	r3, r3
   1a4ba:	001d      	movs	r5, r3
   1a4bc:	e000      	b.n	1a4c0 <xQueueGenericSendFromISR+0xb4>
   1a4be:	2535      	movs	r5, #53	; 0x35
   1a4c0:	69bb      	ldr	r3, [r7, #24]
   1a4c2:	0018      	movs	r0, r3
   1a4c4:	4b52      	ldr	r3, [pc, #328]	; (1a610 <xQueueGenericSendFromISR+0x204>)
   1a4c6:	4798      	blx	r3
   1a4c8:	0003      	movs	r3, r0
   1a4ca:	001a      	movs	r2, r3
   1a4cc:	4b51      	ldr	r3, [pc, #324]	; (1a614 <xQueueGenericSendFromISR+0x208>)
   1a4ce:	5c9c      	ldrb	r4, [r3, r2]
   1a4d0:	69bb      	ldr	r3, [r7, #24]
   1a4d2:	0018      	movs	r0, r3
   1a4d4:	4b50      	ldr	r3, [pc, #320]	; (1a618 <xQueueGenericSendFromISR+0x20c>)
   1a4d6:	4798      	blx	r3
   1a4d8:	0003      	movs	r3, r0
   1a4da:	b2db      	uxtb	r3, r3
   1a4dc:	001a      	movs	r2, r3
   1a4de:	0021      	movs	r1, r4
   1a4e0:	0028      	movs	r0, r5
   1a4e2:	4b4e      	ldr	r3, [pc, #312]	; (1a61c <xQueueGenericSendFromISR+0x210>)
   1a4e4:	4798      	blx	r3
   1a4e6:	69bb      	ldr	r3, [r7, #24]
   1a4e8:	0018      	movs	r0, r3
   1a4ea:	4b49      	ldr	r3, [pc, #292]	; (1a610 <xQueueGenericSendFromISR+0x204>)
   1a4ec:	4798      	blx	r3
   1a4ee:	0003      	movs	r3, r0
   1a4f0:	001a      	movs	r2, r3
   1a4f2:	4b48      	ldr	r3, [pc, #288]	; (1a614 <xQueueGenericSendFromISR+0x208>)
   1a4f4:	5c9c      	ldrb	r4, [r3, r2]
   1a4f6:	69bb      	ldr	r3, [r7, #24]
   1a4f8:	0018      	movs	r0, r3
   1a4fa:	4b47      	ldr	r3, [pc, #284]	; (1a618 <xQueueGenericSendFromISR+0x20c>)
   1a4fc:	4798      	blx	r3
   1a4fe:	0003      	movs	r3, r0
   1a500:	b2d9      	uxtb	r1, r3
   1a502:	69bb      	ldr	r3, [r7, #24]
   1a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a506:	b2db      	uxtb	r3, r3
   1a508:	3301      	adds	r3, #1
   1a50a:	b2db      	uxtb	r3, r3
   1a50c:	001a      	movs	r2, r3
   1a50e:	0020      	movs	r0, r4
   1a510:	4b43      	ldr	r3, [pc, #268]	; (1a620 <xQueueGenericSendFromISR+0x214>)
   1a512:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a514:	683a      	ldr	r2, [r7, #0]
   1a516:	68b9      	ldr	r1, [r7, #8]
   1a518:	69bb      	ldr	r3, [r7, #24]
   1a51a:	0018      	movs	r0, r3
   1a51c:	4b41      	ldr	r3, [pc, #260]	; (1a624 <xQueueGenericSendFromISR+0x218>)
   1a51e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a520:	2313      	movs	r3, #19
   1a522:	18fb      	adds	r3, r7, r3
   1a524:	781b      	ldrb	r3, [r3, #0]
   1a526:	b25b      	sxtb	r3, r3
   1a528:	3301      	adds	r3, #1
   1a52a:	d124      	bne.n	1a576 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a52c:	69bb      	ldr	r3, [r7, #24]
   1a52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a530:	2b00      	cmp	r3, #0
   1a532:	d00e      	beq.n	1a552 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a534:	683a      	ldr	r2, [r7, #0]
   1a536:	69bb      	ldr	r3, [r7, #24]
   1a538:	0011      	movs	r1, r2
   1a53a:	0018      	movs	r0, r3
   1a53c:	4b3a      	ldr	r3, [pc, #232]	; (1a628 <xQueueGenericSendFromISR+0x21c>)
   1a53e:	4798      	blx	r3
   1a540:	1e03      	subs	r3, r0, #0
   1a542:	d021      	beq.n	1a588 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a544:	687b      	ldr	r3, [r7, #4]
   1a546:	2b00      	cmp	r3, #0
   1a548:	d01e      	beq.n	1a588 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a54a:	687b      	ldr	r3, [r7, #4]
   1a54c:	2201      	movs	r2, #1
   1a54e:	601a      	str	r2, [r3, #0]
   1a550:	e01a      	b.n	1a588 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a552:	69bb      	ldr	r3, [r7, #24]
   1a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a556:	2b00      	cmp	r3, #0
   1a558:	d016      	beq.n	1a588 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a55a:	69bb      	ldr	r3, [r7, #24]
   1a55c:	3324      	adds	r3, #36	; 0x24
   1a55e:	0018      	movs	r0, r3
   1a560:	4b32      	ldr	r3, [pc, #200]	; (1a62c <xQueueGenericSendFromISR+0x220>)
   1a562:	4798      	blx	r3
   1a564:	1e03      	subs	r3, r0, #0
   1a566:	d00f      	beq.n	1a588 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a568:	687b      	ldr	r3, [r7, #4]
   1a56a:	2b00      	cmp	r3, #0
   1a56c:	d00c      	beq.n	1a588 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a56e:	687b      	ldr	r3, [r7, #4]
   1a570:	2201      	movs	r2, #1
   1a572:	601a      	str	r2, [r3, #0]
   1a574:	e008      	b.n	1a588 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a576:	2313      	movs	r3, #19
   1a578:	18fb      	adds	r3, r7, r3
   1a57a:	781b      	ldrb	r3, [r3, #0]
   1a57c:	3301      	adds	r3, #1
   1a57e:	b2db      	uxtb	r3, r3
   1a580:	b259      	sxtb	r1, r3
   1a582:	69bb      	ldr	r3, [r7, #24]
   1a584:	2245      	movs	r2, #69	; 0x45
   1a586:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a588:	2301      	movs	r3, #1
   1a58a:	61fb      	str	r3, [r7, #28]
		{
   1a58c:	e030      	b.n	1a5f0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a58e:	69bb      	ldr	r3, [r7, #24]
   1a590:	0018      	movs	r0, r3
   1a592:	4b1d      	ldr	r3, [pc, #116]	; (1a608 <xQueueGenericSendFromISR+0x1fc>)
   1a594:	4798      	blx	r3
   1a596:	0003      	movs	r3, r0
   1a598:	001a      	movs	r2, r3
   1a59a:	4b1c      	ldr	r3, [pc, #112]	; (1a60c <xQueueGenericSendFromISR+0x200>)
   1a59c:	881b      	ldrh	r3, [r3, #0]
   1a59e:	4013      	ands	r3, r2
   1a5a0:	b29b      	uxth	r3, r3
   1a5a2:	2b00      	cmp	r3, #0
   1a5a4:	d022      	beq.n	1a5ec <xQueueGenericSendFromISR+0x1e0>
   1a5a6:	683b      	ldr	r3, [r7, #0]
   1a5a8:	2b00      	cmp	r3, #0
   1a5aa:	d10b      	bne.n	1a5c4 <xQueueGenericSendFromISR+0x1b8>
   1a5ac:	69bb      	ldr	r3, [r7, #24]
   1a5ae:	0018      	movs	r0, r3
   1a5b0:	4b17      	ldr	r3, [pc, #92]	; (1a610 <xQueueGenericSendFromISR+0x204>)
   1a5b2:	4798      	blx	r3
   1a5b4:	0003      	movs	r3, r0
   1a5b6:	001a      	movs	r2, r3
   1a5b8:	4b16      	ldr	r3, [pc, #88]	; (1a614 <xQueueGenericSendFromISR+0x208>)
   1a5ba:	5c9b      	ldrb	r3, [r3, r2]
   1a5bc:	3358      	adds	r3, #88	; 0x58
   1a5be:	b2db      	uxtb	r3, r3
   1a5c0:	001d      	movs	r5, r3
   1a5c2:	e000      	b.n	1a5c6 <xQueueGenericSendFromISR+0x1ba>
   1a5c4:	255d      	movs	r5, #93	; 0x5d
   1a5c6:	69bb      	ldr	r3, [r7, #24]
   1a5c8:	0018      	movs	r0, r3
   1a5ca:	4b11      	ldr	r3, [pc, #68]	; (1a610 <xQueueGenericSendFromISR+0x204>)
   1a5cc:	4798      	blx	r3
   1a5ce:	0003      	movs	r3, r0
   1a5d0:	001a      	movs	r2, r3
   1a5d2:	4b10      	ldr	r3, [pc, #64]	; (1a614 <xQueueGenericSendFromISR+0x208>)
   1a5d4:	5c9c      	ldrb	r4, [r3, r2]
   1a5d6:	69bb      	ldr	r3, [r7, #24]
   1a5d8:	0018      	movs	r0, r3
   1a5da:	4b0f      	ldr	r3, [pc, #60]	; (1a618 <xQueueGenericSendFromISR+0x20c>)
   1a5dc:	4798      	blx	r3
   1a5de:	0003      	movs	r3, r0
   1a5e0:	b2db      	uxtb	r3, r3
   1a5e2:	001a      	movs	r2, r3
   1a5e4:	0021      	movs	r1, r4
   1a5e6:	0028      	movs	r0, r5
   1a5e8:	4b0c      	ldr	r3, [pc, #48]	; (1a61c <xQueueGenericSendFromISR+0x210>)
   1a5ea:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a5ec:	2300      	movs	r3, #0
   1a5ee:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a5f0:	697b      	ldr	r3, [r7, #20]
   1a5f2:	0018      	movs	r0, r3
   1a5f4:	4b0e      	ldr	r3, [pc, #56]	; (1a630 <xQueueGenericSendFromISR+0x224>)
   1a5f6:	4798      	blx	r3

	return xReturn;
   1a5f8:	69fb      	ldr	r3, [r7, #28]
}
   1a5fa:	0018      	movs	r0, r3
   1a5fc:	46bd      	mov	sp, r7
   1a5fe:	b008      	add	sp, #32
   1a600:	bdb0      	pop	{r4, r5, r7, pc}
   1a602:	46c0      	nop			; (mov r8, r8)
   1a604:	00019a6d 	.word	0x00019a6d
   1a608:	00017ad5 	.word	0x00017ad5
   1a60c:	20000108 	.word	0x20000108
   1a610:	000179d5 	.word	0x000179d5
   1a614:	200000fc 	.word	0x200000fc
   1a618:	00017ab5 	.word	0x00017ab5
   1a61c:	0001840d 	.word	0x0001840d
   1a620:	00018a69 	.word	0x00018a69
   1a624:	0001b1e5 	.word	0x0001b1e5
   1a628:	0001b4e9 	.word	0x0001b4e9
   1a62c:	0001c2a9 	.word	0x0001c2a9
   1a630:	00019a79 	.word	0x00019a79

0001a634 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1a634:	b580      	push	{r7, lr}
   1a636:	b082      	sub	sp, #8
   1a638:	af00      	add	r7, sp, #0
   1a63a:	6078      	str	r0, [r7, #4]
   1a63c:	6039      	str	r1, [r7, #0]
   1a63e:	6839      	ldr	r1, [r7, #0]
   1a640:	687b      	ldr	r3, [r7, #4]
   1a642:	2200      	movs	r2, #0
   1a644:	0018      	movs	r0, r3
   1a646:	4b03      	ldr	r3, [pc, #12]	; (1a654 <xQueueGiveFromISR+0x20>)
   1a648:	4798      	blx	r3
   1a64a:	0003      	movs	r3, r0
   1a64c:	0018      	movs	r0, r3
   1a64e:	46bd      	mov	sp, r7
   1a650:	b002      	add	sp, #8
   1a652:	bd80      	pop	{r7, pc}
   1a654:	0001a659 	.word	0x0001a659

0001a658 <MyWrapper>:
{
   1a658:	b5b0      	push	{r4, r5, r7, lr}
   1a65a:	b08a      	sub	sp, #40	; 0x28
   1a65c:	af00      	add	r7, sp, #0
   1a65e:	60f8      	str	r0, [r7, #12]
   1a660:	60b9      	str	r1, [r7, #8]
   1a662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a664:	68fb      	ldr	r3, [r7, #12]
   1a666:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1a668:	6a3b      	ldr	r3, [r7, #32]
   1a66a:	2b00      	cmp	r3, #0
   1a66c:	d101      	bne.n	1a672 <MyWrapper+0x1a>
   1a66e:	b672      	cpsid	i
   1a670:	e7fe      	b.n	1a670 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a672:	6a3b      	ldr	r3, [r7, #32]
   1a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a676:	2b00      	cmp	r3, #0
   1a678:	d001      	beq.n	1a67e <MyWrapper+0x26>
   1a67a:	b672      	cpsid	i
   1a67c:	e7fe      	b.n	1a67c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1a67e:	6a3b      	ldr	r3, [r7, #32]
   1a680:	681b      	ldr	r3, [r3, #0]
   1a682:	2b00      	cmp	r3, #0
   1a684:	d103      	bne.n	1a68e <MyWrapper+0x36>
   1a686:	6a3b      	ldr	r3, [r7, #32]
   1a688:	685b      	ldr	r3, [r3, #4]
   1a68a:	2b00      	cmp	r3, #0
   1a68c:	d101      	bne.n	1a692 <MyWrapper+0x3a>
   1a68e:	2301      	movs	r3, #1
   1a690:	e000      	b.n	1a694 <MyWrapper+0x3c>
   1a692:	2300      	movs	r3, #0
   1a694:	2b00      	cmp	r3, #0
   1a696:	d101      	bne.n	1a69c <MyWrapper+0x44>
   1a698:	b672      	cpsid	i
   1a69a:	e7fe      	b.n	1a69a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a69c:	4b66      	ldr	r3, [pc, #408]	; (1a838 <MyWrapper+0x1e0>)
   1a69e:	4798      	blx	r3
   1a6a0:	0003      	movs	r3, r0
   1a6a2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a6a4:	6a3b      	ldr	r3, [r7, #32]
   1a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a6a8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1a6aa:	6a3b      	ldr	r3, [r7, #32]
   1a6ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1a6ae:	69bb      	ldr	r3, [r7, #24]
   1a6b0:	429a      	cmp	r2, r3
   1a6b2:	d800      	bhi.n	1a6b6 <MyWrapper+0x5e>
   1a6b4:	e085      	b.n	1a7c2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a6b6:	2317      	movs	r3, #23
   1a6b8:	18fb      	adds	r3, r7, r3
   1a6ba:	6a3a      	ldr	r2, [r7, #32]
   1a6bc:	2145      	movs	r1, #69	; 0x45
   1a6be:	5c52      	ldrb	r2, [r2, r1]
   1a6c0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a6c2:	6a3b      	ldr	r3, [r7, #32]
   1a6c4:	0018      	movs	r0, r3
   1a6c6:	4b5d      	ldr	r3, [pc, #372]	; (1a83c <MyWrapper+0x1e4>)
   1a6c8:	4798      	blx	r3
   1a6ca:	0003      	movs	r3, r0
   1a6cc:	001a      	movs	r2, r3
   1a6ce:	4b5c      	ldr	r3, [pc, #368]	; (1a840 <MyWrapper+0x1e8>)
   1a6d0:	881b      	ldrh	r3, [r3, #0]
   1a6d2:	4013      	ands	r3, r2
   1a6d4:	b29b      	uxth	r3, r3
   1a6d6:	2b00      	cmp	r3, #0
   1a6d8:	d022      	beq.n	1a720 <MyWrapper+0xc8>
   1a6da:	687b      	ldr	r3, [r7, #4]
   1a6dc:	2b00      	cmp	r3, #0
   1a6de:	d10b      	bne.n	1a6f8 <MyWrapper+0xa0>
   1a6e0:	6a3b      	ldr	r3, [r7, #32]
   1a6e2:	0018      	movs	r0, r3
   1a6e4:	4b57      	ldr	r3, [pc, #348]	; (1a844 <MyWrapper+0x1ec>)
   1a6e6:	4798      	blx	r3
   1a6e8:	0003      	movs	r3, r0
   1a6ea:	001a      	movs	r2, r3
   1a6ec:	4b56      	ldr	r3, [pc, #344]	; (1a848 <MyWrapper+0x1f0>)
   1a6ee:	5c9b      	ldrb	r3, [r3, r2]
   1a6f0:	3330      	adds	r3, #48	; 0x30
   1a6f2:	b2db      	uxtb	r3, r3
   1a6f4:	001d      	movs	r5, r3
   1a6f6:	e000      	b.n	1a6fa <MyWrapper+0xa2>
   1a6f8:	2535      	movs	r5, #53	; 0x35
   1a6fa:	6a3b      	ldr	r3, [r7, #32]
   1a6fc:	0018      	movs	r0, r3
   1a6fe:	4b51      	ldr	r3, [pc, #324]	; (1a844 <MyWrapper+0x1ec>)
   1a700:	4798      	blx	r3
   1a702:	0003      	movs	r3, r0
   1a704:	001a      	movs	r2, r3
   1a706:	4b50      	ldr	r3, [pc, #320]	; (1a848 <MyWrapper+0x1f0>)
   1a708:	5c9c      	ldrb	r4, [r3, r2]
   1a70a:	6a3b      	ldr	r3, [r7, #32]
   1a70c:	0018      	movs	r0, r3
   1a70e:	4b4f      	ldr	r3, [pc, #316]	; (1a84c <MyWrapper+0x1f4>)
   1a710:	4798      	blx	r3
   1a712:	0003      	movs	r3, r0
   1a714:	b2db      	uxtb	r3, r3
   1a716:	001a      	movs	r2, r3
   1a718:	0021      	movs	r1, r4
   1a71a:	0028      	movs	r0, r5
   1a71c:	4b4c      	ldr	r3, [pc, #304]	; (1a850 <MyWrapper+0x1f8>)
   1a71e:	4798      	blx	r3
   1a720:	6a3b      	ldr	r3, [r7, #32]
   1a722:	0018      	movs	r0, r3
   1a724:	4b47      	ldr	r3, [pc, #284]	; (1a844 <MyWrapper+0x1ec>)
   1a726:	4798      	blx	r3
   1a728:	0003      	movs	r3, r0
   1a72a:	001a      	movs	r2, r3
   1a72c:	4b46      	ldr	r3, [pc, #280]	; (1a848 <MyWrapper+0x1f0>)
   1a72e:	5c9c      	ldrb	r4, [r3, r2]
   1a730:	6a3b      	ldr	r3, [r7, #32]
   1a732:	0018      	movs	r0, r3
   1a734:	4b45      	ldr	r3, [pc, #276]	; (1a84c <MyWrapper+0x1f4>)
   1a736:	4798      	blx	r3
   1a738:	0003      	movs	r3, r0
   1a73a:	b2d9      	uxtb	r1, r3
   1a73c:	6a3b      	ldr	r3, [r7, #32]
   1a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a740:	b2db      	uxtb	r3, r3
   1a742:	3301      	adds	r3, #1
   1a744:	b2db      	uxtb	r3, r3
   1a746:	001a      	movs	r2, r3
   1a748:	0020      	movs	r0, r4
   1a74a:	4b42      	ldr	r3, [pc, #264]	; (1a854 <MyWrapper+0x1fc>)
   1a74c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a74e:	69bb      	ldr	r3, [r7, #24]
   1a750:	1c5a      	adds	r2, r3, #1
   1a752:	6a3b      	ldr	r3, [r7, #32]
   1a754:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a756:	2317      	movs	r3, #23
   1a758:	18fb      	adds	r3, r7, r3
   1a75a:	781b      	ldrb	r3, [r3, #0]
   1a75c:	b25b      	sxtb	r3, r3
   1a75e:	3301      	adds	r3, #1
   1a760:	d123      	bne.n	1a7aa <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a762:	6a3b      	ldr	r3, [r7, #32]
   1a764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a766:	2b00      	cmp	r3, #0
   1a768:	d00d      	beq.n	1a786 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1a76a:	6a3b      	ldr	r3, [r7, #32]
   1a76c:	2100      	movs	r1, #0
   1a76e:	0018      	movs	r0, r3
   1a770:	4b39      	ldr	r3, [pc, #228]	; (1a858 <MyWrapper+0x200>)
   1a772:	4798      	blx	r3
   1a774:	1e03      	subs	r3, r0, #0
   1a776:	d021      	beq.n	1a7bc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a778:	68bb      	ldr	r3, [r7, #8]
   1a77a:	2b00      	cmp	r3, #0
   1a77c:	d01e      	beq.n	1a7bc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a77e:	68bb      	ldr	r3, [r7, #8]
   1a780:	2201      	movs	r2, #1
   1a782:	601a      	str	r2, [r3, #0]
   1a784:	e01a      	b.n	1a7bc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a786:	6a3b      	ldr	r3, [r7, #32]
   1a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a78a:	2b00      	cmp	r3, #0
   1a78c:	d016      	beq.n	1a7bc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a78e:	6a3b      	ldr	r3, [r7, #32]
   1a790:	3324      	adds	r3, #36	; 0x24
   1a792:	0018      	movs	r0, r3
   1a794:	4b31      	ldr	r3, [pc, #196]	; (1a85c <MyWrapper+0x204>)
   1a796:	4798      	blx	r3
   1a798:	1e03      	subs	r3, r0, #0
   1a79a:	d00f      	beq.n	1a7bc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a79c:	68bb      	ldr	r3, [r7, #8]
   1a79e:	2b00      	cmp	r3, #0
   1a7a0:	d00c      	beq.n	1a7bc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a7a2:	68bb      	ldr	r3, [r7, #8]
   1a7a4:	2201      	movs	r2, #1
   1a7a6:	601a      	str	r2, [r3, #0]
   1a7a8:	e008      	b.n	1a7bc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a7aa:	2317      	movs	r3, #23
   1a7ac:	18fb      	adds	r3, r7, r3
   1a7ae:	781b      	ldrb	r3, [r3, #0]
   1a7b0:	3301      	adds	r3, #1
   1a7b2:	b2db      	uxtb	r3, r3
   1a7b4:	b259      	sxtb	r1, r3
   1a7b6:	6a3b      	ldr	r3, [r7, #32]
   1a7b8:	2245      	movs	r2, #69	; 0x45
   1a7ba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a7bc:	2301      	movs	r3, #1
   1a7be:	627b      	str	r3, [r7, #36]	; 0x24
   1a7c0:	e030      	b.n	1a824 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a7c2:	6a3b      	ldr	r3, [r7, #32]
   1a7c4:	0018      	movs	r0, r3
   1a7c6:	4b1d      	ldr	r3, [pc, #116]	; (1a83c <MyWrapper+0x1e4>)
   1a7c8:	4798      	blx	r3
   1a7ca:	0003      	movs	r3, r0
   1a7cc:	001a      	movs	r2, r3
   1a7ce:	4b1c      	ldr	r3, [pc, #112]	; (1a840 <MyWrapper+0x1e8>)
   1a7d0:	881b      	ldrh	r3, [r3, #0]
   1a7d2:	4013      	ands	r3, r2
   1a7d4:	b29b      	uxth	r3, r3
   1a7d6:	2b00      	cmp	r3, #0
   1a7d8:	d022      	beq.n	1a820 <MyWrapper+0x1c8>
   1a7da:	687b      	ldr	r3, [r7, #4]
   1a7dc:	2b00      	cmp	r3, #0
   1a7de:	d10b      	bne.n	1a7f8 <MyWrapper+0x1a0>
   1a7e0:	6a3b      	ldr	r3, [r7, #32]
   1a7e2:	0018      	movs	r0, r3
   1a7e4:	4b17      	ldr	r3, [pc, #92]	; (1a844 <MyWrapper+0x1ec>)
   1a7e6:	4798      	blx	r3
   1a7e8:	0003      	movs	r3, r0
   1a7ea:	001a      	movs	r2, r3
   1a7ec:	4b16      	ldr	r3, [pc, #88]	; (1a848 <MyWrapper+0x1f0>)
   1a7ee:	5c9b      	ldrb	r3, [r3, r2]
   1a7f0:	3358      	adds	r3, #88	; 0x58
   1a7f2:	b2db      	uxtb	r3, r3
   1a7f4:	001d      	movs	r5, r3
   1a7f6:	e000      	b.n	1a7fa <MyWrapper+0x1a2>
   1a7f8:	255d      	movs	r5, #93	; 0x5d
   1a7fa:	6a3b      	ldr	r3, [r7, #32]
   1a7fc:	0018      	movs	r0, r3
   1a7fe:	4b11      	ldr	r3, [pc, #68]	; (1a844 <MyWrapper+0x1ec>)
   1a800:	4798      	blx	r3
   1a802:	0003      	movs	r3, r0
   1a804:	001a      	movs	r2, r3
   1a806:	4b10      	ldr	r3, [pc, #64]	; (1a848 <MyWrapper+0x1f0>)
   1a808:	5c9c      	ldrb	r4, [r3, r2]
   1a80a:	6a3b      	ldr	r3, [r7, #32]
   1a80c:	0018      	movs	r0, r3
   1a80e:	4b0f      	ldr	r3, [pc, #60]	; (1a84c <MyWrapper+0x1f4>)
   1a810:	4798      	blx	r3
   1a812:	0003      	movs	r3, r0
   1a814:	b2db      	uxtb	r3, r3
   1a816:	001a      	movs	r2, r3
   1a818:	0021      	movs	r1, r4
   1a81a:	0028      	movs	r0, r5
   1a81c:	4b0c      	ldr	r3, [pc, #48]	; (1a850 <MyWrapper+0x1f8>)
   1a81e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a820:	2300      	movs	r3, #0
   1a822:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a824:	69fb      	ldr	r3, [r7, #28]
   1a826:	0018      	movs	r0, r3
   1a828:	4b0d      	ldr	r3, [pc, #52]	; (1a860 <MyWrapper+0x208>)
   1a82a:	4798      	blx	r3

	return xReturn;
   1a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1a82e:	0018      	movs	r0, r3
   1a830:	46bd      	mov	sp, r7
   1a832:	b00a      	add	sp, #40	; 0x28
   1a834:	bdb0      	pop	{r4, r5, r7, pc}
   1a836:	46c0      	nop			; (mov r8, r8)
   1a838:	00019a6d 	.word	0x00019a6d
   1a83c:	00017ad5 	.word	0x00017ad5
   1a840:	20000108 	.word	0x20000108
   1a844:	000179d5 	.word	0x000179d5
   1a848:	200000fc 	.word	0x200000fc
   1a84c:	00017ab5 	.word	0x00017ab5
   1a850:	0001840d 	.word	0x0001840d
   1a854:	00018a69 	.word	0x00018a69
   1a858:	0001b4e9 	.word	0x0001b4e9
   1a85c:	0001c2a9 	.word	0x0001c2a9
   1a860:	00019a79 	.word	0x00019a79

0001a864 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1a864:	b5b0      	push	{r4, r5, r7, lr}
   1a866:	b08a      	sub	sp, #40	; 0x28
   1a868:	af00      	add	r7, sp, #0
   1a86a:	60f8      	str	r0, [r7, #12]
   1a86c:	60b9      	str	r1, [r7, #8]
   1a86e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1a870:	2300      	movs	r3, #0
   1a872:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a874:	68fb      	ldr	r3, [r7, #12]
   1a876:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a878:	6a3b      	ldr	r3, [r7, #32]
   1a87a:	2b00      	cmp	r3, #0
   1a87c:	d101      	bne.n	1a882 <xQueueReceive+0x1e>
   1a87e:	b672      	cpsid	i
   1a880:	e7fe      	b.n	1a880 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a882:	68bb      	ldr	r3, [r7, #8]
   1a884:	2b00      	cmp	r3, #0
   1a886:	d103      	bne.n	1a890 <xQueueReceive+0x2c>
   1a888:	6a3b      	ldr	r3, [r7, #32]
   1a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a88c:	2b00      	cmp	r3, #0
   1a88e:	d101      	bne.n	1a894 <xQueueReceive+0x30>
   1a890:	2301      	movs	r3, #1
   1a892:	e000      	b.n	1a896 <xQueueReceive+0x32>
   1a894:	2300      	movs	r3, #0
   1a896:	2b00      	cmp	r3, #0
   1a898:	d101      	bne.n	1a89e <xQueueReceive+0x3a>
   1a89a:	b672      	cpsid	i
   1a89c:	e7fe      	b.n	1a89c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a89e:	4bbf      	ldr	r3, [pc, #764]	; (1ab9c <xQueueReceive+0x338>)
   1a8a0:	4798      	blx	r3
   1a8a2:	1e03      	subs	r3, r0, #0
   1a8a4:	d102      	bne.n	1a8ac <xQueueReceive+0x48>
   1a8a6:	687b      	ldr	r3, [r7, #4]
   1a8a8:	2b00      	cmp	r3, #0
   1a8aa:	d101      	bne.n	1a8b0 <xQueueReceive+0x4c>
   1a8ac:	2301      	movs	r3, #1
   1a8ae:	e000      	b.n	1a8b2 <xQueueReceive+0x4e>
   1a8b0:	2300      	movs	r3, #0
   1a8b2:	2b00      	cmp	r3, #0
   1a8b4:	d101      	bne.n	1a8ba <xQueueReceive+0x56>
   1a8b6:	b672      	cpsid	i
   1a8b8:	e7fe      	b.n	1a8b8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a8ba:	4bb9      	ldr	r3, [pc, #740]	; (1aba0 <xQueueReceive+0x33c>)
   1a8bc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a8be:	6a3b      	ldr	r3, [r7, #32]
   1a8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a8c2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a8c4:	69fb      	ldr	r3, [r7, #28]
   1a8c6:	2b00      	cmp	r3, #0
   1a8c8:	d100      	bne.n	1a8cc <xQueueReceive+0x68>
   1a8ca:	e07d      	b.n	1a9c8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1a8cc:	68ba      	ldr	r2, [r7, #8]
   1a8ce:	6a3b      	ldr	r3, [r7, #32]
   1a8d0:	0011      	movs	r1, r2
   1a8d2:	0018      	movs	r0, r3
   1a8d4:	4bb3      	ldr	r3, [pc, #716]	; (1aba4 <xQueueReceive+0x340>)
   1a8d6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1a8d8:	4bb3      	ldr	r3, [pc, #716]	; (1aba8 <xQueueReceive+0x344>)
   1a8da:	4798      	blx	r3
   1a8dc:	0003      	movs	r3, r0
   1a8de:	0018      	movs	r0, r3
   1a8e0:	4bb2      	ldr	r3, [pc, #712]	; (1abac <xQueueReceive+0x348>)
   1a8e2:	4798      	blx	r3
   1a8e4:	0003      	movs	r3, r0
   1a8e6:	001a      	movs	r2, r3
   1a8e8:	4bb1      	ldr	r3, [pc, #708]	; (1abb0 <xQueueReceive+0x34c>)
   1a8ea:	881b      	ldrh	r3, [r3, #0]
   1a8ec:	4013      	ands	r3, r2
   1a8ee:	b29b      	uxth	r3, r3
   1a8f0:	2b00      	cmp	r3, #0
   1a8f2:	d029      	beq.n	1a948 <xQueueReceive+0xe4>
   1a8f4:	6a3b      	ldr	r3, [r7, #32]
   1a8f6:	0018      	movs	r0, r3
   1a8f8:	4bae      	ldr	r3, [pc, #696]	; (1abb4 <xQueueReceive+0x350>)
   1a8fa:	4798      	blx	r3
   1a8fc:	0003      	movs	r3, r0
   1a8fe:	001a      	movs	r2, r3
   1a900:	4bab      	ldr	r3, [pc, #684]	; (1abb0 <xQueueReceive+0x34c>)
   1a902:	881b      	ldrh	r3, [r3, #0]
   1a904:	4013      	ands	r3, r2
   1a906:	b29b      	uxth	r3, r3
   1a908:	2b00      	cmp	r3, #0
   1a90a:	d01d      	beq.n	1a948 <xQueueReceive+0xe4>
   1a90c:	6a3b      	ldr	r3, [r7, #32]
   1a90e:	0018      	movs	r0, r3
   1a910:	4ba9      	ldr	r3, [pc, #676]	; (1abb8 <xQueueReceive+0x354>)
   1a912:	4798      	blx	r3
   1a914:	0003      	movs	r3, r0
   1a916:	001a      	movs	r2, r3
   1a918:	4ba8      	ldr	r3, [pc, #672]	; (1abbc <xQueueReceive+0x358>)
   1a91a:	5c9b      	ldrb	r3, [r3, r2]
   1a91c:	3328      	adds	r3, #40	; 0x28
   1a91e:	b2db      	uxtb	r3, r3
   1a920:	001d      	movs	r5, r3
   1a922:	6a3b      	ldr	r3, [r7, #32]
   1a924:	0018      	movs	r0, r3
   1a926:	4ba4      	ldr	r3, [pc, #656]	; (1abb8 <xQueueReceive+0x354>)
   1a928:	4798      	blx	r3
   1a92a:	0003      	movs	r3, r0
   1a92c:	001a      	movs	r2, r3
   1a92e:	4ba3      	ldr	r3, [pc, #652]	; (1abbc <xQueueReceive+0x358>)
   1a930:	5c9c      	ldrb	r4, [r3, r2]
   1a932:	6a3b      	ldr	r3, [r7, #32]
   1a934:	0018      	movs	r0, r3
   1a936:	4ba2      	ldr	r3, [pc, #648]	; (1abc0 <xQueueReceive+0x35c>)
   1a938:	4798      	blx	r3
   1a93a:	0003      	movs	r3, r0
   1a93c:	b2db      	uxtb	r3, r3
   1a93e:	001a      	movs	r2, r3
   1a940:	0021      	movs	r1, r4
   1a942:	0028      	movs	r0, r5
   1a944:	4b9f      	ldr	r3, [pc, #636]	; (1abc4 <xQueueReceive+0x360>)
   1a946:	4798      	blx	r3
   1a948:	6a3b      	ldr	r3, [r7, #32]
   1a94a:	0018      	movs	r0, r3
   1a94c:	4b9a      	ldr	r3, [pc, #616]	; (1abb8 <xQueueReceive+0x354>)
   1a94e:	4798      	blx	r3
   1a950:	0003      	movs	r3, r0
   1a952:	001a      	movs	r2, r3
   1a954:	4b99      	ldr	r3, [pc, #612]	; (1abbc <xQueueReceive+0x358>)
   1a956:	5c9c      	ldrb	r4, [r3, r2]
   1a958:	6a3b      	ldr	r3, [r7, #32]
   1a95a:	0018      	movs	r0, r3
   1a95c:	4b98      	ldr	r3, [pc, #608]	; (1abc0 <xQueueReceive+0x35c>)
   1a95e:	4798      	blx	r3
   1a960:	0003      	movs	r3, r0
   1a962:	b2dd      	uxtb	r5, r3
   1a964:	6a3b      	ldr	r3, [r7, #32]
   1a966:	0018      	movs	r0, r3
   1a968:	4b93      	ldr	r3, [pc, #588]	; (1abb8 <xQueueReceive+0x354>)
   1a96a:	4798      	blx	r3
   1a96c:	0003      	movs	r3, r0
   1a96e:	001a      	movs	r2, r3
   1a970:	4b92      	ldr	r3, [pc, #584]	; (1abbc <xQueueReceive+0x358>)
   1a972:	5c9b      	ldrb	r3, [r3, r2]
   1a974:	2b02      	cmp	r3, #2
   1a976:	d108      	bne.n	1a98a <xQueueReceive+0x126>
   1a978:	4b8b      	ldr	r3, [pc, #556]	; (1aba8 <xQueueReceive+0x344>)
   1a97a:	4798      	blx	r3
   1a97c:	0003      	movs	r3, r0
   1a97e:	0018      	movs	r0, r3
   1a980:	4b91      	ldr	r3, [pc, #580]	; (1abc8 <xQueueReceive+0x364>)
   1a982:	4798      	blx	r3
   1a984:	0003      	movs	r3, r0
   1a986:	b2db      	uxtb	r3, r3
   1a988:	e004      	b.n	1a994 <xQueueReceive+0x130>
   1a98a:	6a3b      	ldr	r3, [r7, #32]
   1a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a98e:	b2db      	uxtb	r3, r3
   1a990:	3b01      	subs	r3, #1
   1a992:	b2db      	uxtb	r3, r3
   1a994:	001a      	movs	r2, r3
   1a996:	0029      	movs	r1, r5
   1a998:	0020      	movs	r0, r4
   1a99a:	4b8c      	ldr	r3, [pc, #560]	; (1abcc <xQueueReceive+0x368>)
   1a99c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1a99e:	69fb      	ldr	r3, [r7, #28]
   1a9a0:	1e5a      	subs	r2, r3, #1
   1a9a2:	6a3b      	ldr	r3, [r7, #32]
   1a9a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a9a6:	6a3b      	ldr	r3, [r7, #32]
   1a9a8:	691b      	ldr	r3, [r3, #16]
   1a9aa:	2b00      	cmp	r3, #0
   1a9ac:	d008      	beq.n	1a9c0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a9ae:	6a3b      	ldr	r3, [r7, #32]
   1a9b0:	3310      	adds	r3, #16
   1a9b2:	0018      	movs	r0, r3
   1a9b4:	4b86      	ldr	r3, [pc, #536]	; (1abd0 <xQueueReceive+0x36c>)
   1a9b6:	4798      	blx	r3
   1a9b8:	1e03      	subs	r3, r0, #0
   1a9ba:	d001      	beq.n	1a9c0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a9bc:	4b85      	ldr	r3, [pc, #532]	; (1abd4 <xQueueReceive+0x370>)
   1a9be:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a9c0:	4b85      	ldr	r3, [pc, #532]	; (1abd8 <xQueueReceive+0x374>)
   1a9c2:	4798      	blx	r3
				return pdPASS;
   1a9c4:	2301      	movs	r3, #1
   1a9c6:	e15f      	b.n	1ac88 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a9c8:	687b      	ldr	r3, [r7, #4]
   1a9ca:	2b00      	cmp	r3, #0
   1a9cc:	d13b      	bne.n	1aa46 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a9ce:	4b82      	ldr	r3, [pc, #520]	; (1abd8 <xQueueReceive+0x374>)
   1a9d0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a9d2:	4b75      	ldr	r3, [pc, #468]	; (1aba8 <xQueueReceive+0x344>)
   1a9d4:	4798      	blx	r3
   1a9d6:	0003      	movs	r3, r0
   1a9d8:	0018      	movs	r0, r3
   1a9da:	4b74      	ldr	r3, [pc, #464]	; (1abac <xQueueReceive+0x348>)
   1a9dc:	4798      	blx	r3
   1a9de:	0003      	movs	r3, r0
   1a9e0:	001a      	movs	r2, r3
   1a9e2:	4b73      	ldr	r3, [pc, #460]	; (1abb0 <xQueueReceive+0x34c>)
   1a9e4:	881b      	ldrh	r3, [r3, #0]
   1a9e6:	4013      	ands	r3, r2
   1a9e8:	b29b      	uxth	r3, r3
   1a9ea:	2b00      	cmp	r3, #0
   1a9ec:	d029      	beq.n	1aa42 <xQueueReceive+0x1de>
   1a9ee:	6a3b      	ldr	r3, [r7, #32]
   1a9f0:	0018      	movs	r0, r3
   1a9f2:	4b70      	ldr	r3, [pc, #448]	; (1abb4 <xQueueReceive+0x350>)
   1a9f4:	4798      	blx	r3
   1a9f6:	0003      	movs	r3, r0
   1a9f8:	001a      	movs	r2, r3
   1a9fa:	4b6d      	ldr	r3, [pc, #436]	; (1abb0 <xQueueReceive+0x34c>)
   1a9fc:	881b      	ldrh	r3, [r3, #0]
   1a9fe:	4013      	ands	r3, r2
   1aa00:	b29b      	uxth	r3, r3
   1aa02:	2b00      	cmp	r3, #0
   1aa04:	d01d      	beq.n	1aa42 <xQueueReceive+0x1de>
   1aa06:	6a3b      	ldr	r3, [r7, #32]
   1aa08:	0018      	movs	r0, r3
   1aa0a:	4b6b      	ldr	r3, [pc, #428]	; (1abb8 <xQueueReceive+0x354>)
   1aa0c:	4798      	blx	r3
   1aa0e:	0003      	movs	r3, r0
   1aa10:	001a      	movs	r2, r3
   1aa12:	4b6a      	ldr	r3, [pc, #424]	; (1abbc <xQueueReceive+0x358>)
   1aa14:	5c9b      	ldrb	r3, [r3, r2]
   1aa16:	3350      	adds	r3, #80	; 0x50
   1aa18:	b2db      	uxtb	r3, r3
   1aa1a:	001d      	movs	r5, r3
   1aa1c:	6a3b      	ldr	r3, [r7, #32]
   1aa1e:	0018      	movs	r0, r3
   1aa20:	4b65      	ldr	r3, [pc, #404]	; (1abb8 <xQueueReceive+0x354>)
   1aa22:	4798      	blx	r3
   1aa24:	0003      	movs	r3, r0
   1aa26:	001a      	movs	r2, r3
   1aa28:	4b64      	ldr	r3, [pc, #400]	; (1abbc <xQueueReceive+0x358>)
   1aa2a:	5c9c      	ldrb	r4, [r3, r2]
   1aa2c:	6a3b      	ldr	r3, [r7, #32]
   1aa2e:	0018      	movs	r0, r3
   1aa30:	4b63      	ldr	r3, [pc, #396]	; (1abc0 <xQueueReceive+0x35c>)
   1aa32:	4798      	blx	r3
   1aa34:	0003      	movs	r3, r0
   1aa36:	b2db      	uxtb	r3, r3
   1aa38:	001a      	movs	r2, r3
   1aa3a:	0021      	movs	r1, r4
   1aa3c:	0028      	movs	r0, r5
   1aa3e:	4b61      	ldr	r3, [pc, #388]	; (1abc4 <xQueueReceive+0x360>)
   1aa40:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1aa42:	2300      	movs	r3, #0
   1aa44:	e120      	b.n	1ac88 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa48:	2b00      	cmp	r3, #0
   1aa4a:	d106      	bne.n	1aa5a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1aa4c:	2314      	movs	r3, #20
   1aa4e:	18fb      	adds	r3, r7, r3
   1aa50:	0018      	movs	r0, r3
   1aa52:	4b62      	ldr	r3, [pc, #392]	; (1abdc <xQueueReceive+0x378>)
   1aa54:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1aa56:	2301      	movs	r3, #1
   1aa58:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1aa5a:	4b5f      	ldr	r3, [pc, #380]	; (1abd8 <xQueueReceive+0x374>)
   1aa5c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1aa5e:	4b60      	ldr	r3, [pc, #384]	; (1abe0 <xQueueReceive+0x37c>)
   1aa60:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1aa62:	4b4f      	ldr	r3, [pc, #316]	; (1aba0 <xQueueReceive+0x33c>)
   1aa64:	4798      	blx	r3
   1aa66:	6a3b      	ldr	r3, [r7, #32]
   1aa68:	2244      	movs	r2, #68	; 0x44
   1aa6a:	5c9b      	ldrb	r3, [r3, r2]
   1aa6c:	b25b      	sxtb	r3, r3
   1aa6e:	3301      	adds	r3, #1
   1aa70:	d103      	bne.n	1aa7a <xQueueReceive+0x216>
   1aa72:	6a3b      	ldr	r3, [r7, #32]
   1aa74:	2244      	movs	r2, #68	; 0x44
   1aa76:	2100      	movs	r1, #0
   1aa78:	5499      	strb	r1, [r3, r2]
   1aa7a:	6a3b      	ldr	r3, [r7, #32]
   1aa7c:	2245      	movs	r2, #69	; 0x45
   1aa7e:	5c9b      	ldrb	r3, [r3, r2]
   1aa80:	b25b      	sxtb	r3, r3
   1aa82:	3301      	adds	r3, #1
   1aa84:	d103      	bne.n	1aa8e <xQueueReceive+0x22a>
   1aa86:	6a3b      	ldr	r3, [r7, #32]
   1aa88:	2245      	movs	r2, #69	; 0x45
   1aa8a:	2100      	movs	r1, #0
   1aa8c:	5499      	strb	r1, [r3, r2]
   1aa8e:	4b52      	ldr	r3, [pc, #328]	; (1abd8 <xQueueReceive+0x374>)
   1aa90:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1aa92:	1d3a      	adds	r2, r7, #4
   1aa94:	2314      	movs	r3, #20
   1aa96:	18fb      	adds	r3, r7, r3
   1aa98:	0011      	movs	r1, r2
   1aa9a:	0018      	movs	r0, r3
   1aa9c:	4b51      	ldr	r3, [pc, #324]	; (1abe4 <xQueueReceive+0x380>)
   1aa9e:	4798      	blx	r3
   1aaa0:	1e03      	subs	r3, r0, #0
   1aaa2:	d000      	beq.n	1aaa6 <xQueueReceive+0x242>
   1aaa4:	e0aa      	b.n	1abfc <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1aaa6:	6a3b      	ldr	r3, [r7, #32]
   1aaa8:	0018      	movs	r0, r3
   1aaaa:	4b4f      	ldr	r3, [pc, #316]	; (1abe8 <xQueueReceive+0x384>)
   1aaac:	4798      	blx	r3
   1aaae:	1e03      	subs	r3, r0, #0
   1aab0:	d06d      	beq.n	1ab8e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1aab2:	4b3d      	ldr	r3, [pc, #244]	; (1aba8 <xQueueReceive+0x344>)
   1aab4:	4798      	blx	r3
   1aab6:	0003      	movs	r3, r0
   1aab8:	0018      	movs	r0, r3
   1aaba:	4b3c      	ldr	r3, [pc, #240]	; (1abac <xQueueReceive+0x348>)
   1aabc:	4798      	blx	r3
   1aabe:	0003      	movs	r3, r0
   1aac0:	001a      	movs	r2, r3
   1aac2:	4b3b      	ldr	r3, [pc, #236]	; (1abb0 <xQueueReceive+0x34c>)
   1aac4:	881b      	ldrh	r3, [r3, #0]
   1aac6:	4013      	ands	r3, r2
   1aac8:	b29b      	uxth	r3, r3
   1aaca:	2b00      	cmp	r3, #0
   1aacc:	d029      	beq.n	1ab22 <xQueueReceive+0x2be>
   1aace:	6a3b      	ldr	r3, [r7, #32]
   1aad0:	0018      	movs	r0, r3
   1aad2:	4b38      	ldr	r3, [pc, #224]	; (1abb4 <xQueueReceive+0x350>)
   1aad4:	4798      	blx	r3
   1aad6:	0003      	movs	r3, r0
   1aad8:	001a      	movs	r2, r3
   1aada:	4b35      	ldr	r3, [pc, #212]	; (1abb0 <xQueueReceive+0x34c>)
   1aadc:	881b      	ldrh	r3, [r3, #0]
   1aade:	4013      	ands	r3, r2
   1aae0:	b29b      	uxth	r3, r3
   1aae2:	2b00      	cmp	r3, #0
   1aae4:	d01d      	beq.n	1ab22 <xQueueReceive+0x2be>
   1aae6:	6a3b      	ldr	r3, [r7, #32]
   1aae8:	0018      	movs	r0, r3
   1aaea:	4b33      	ldr	r3, [pc, #204]	; (1abb8 <xQueueReceive+0x354>)
   1aaec:	4798      	blx	r3
   1aaee:	0003      	movs	r3, r0
   1aaf0:	001a      	movs	r2, r3
   1aaf2:	4b32      	ldr	r3, [pc, #200]	; (1abbc <xQueueReceive+0x358>)
   1aaf4:	5c9b      	ldrb	r3, [r3, r2]
   1aaf6:	3368      	adds	r3, #104	; 0x68
   1aaf8:	b2db      	uxtb	r3, r3
   1aafa:	001d      	movs	r5, r3
   1aafc:	6a3b      	ldr	r3, [r7, #32]
   1aafe:	0018      	movs	r0, r3
   1ab00:	4b2d      	ldr	r3, [pc, #180]	; (1abb8 <xQueueReceive+0x354>)
   1ab02:	4798      	blx	r3
   1ab04:	0003      	movs	r3, r0
   1ab06:	001a      	movs	r2, r3
   1ab08:	4b2c      	ldr	r3, [pc, #176]	; (1abbc <xQueueReceive+0x358>)
   1ab0a:	5c9c      	ldrb	r4, [r3, r2]
   1ab0c:	6a3b      	ldr	r3, [r7, #32]
   1ab0e:	0018      	movs	r0, r3
   1ab10:	4b2b      	ldr	r3, [pc, #172]	; (1abc0 <xQueueReceive+0x35c>)
   1ab12:	4798      	blx	r3
   1ab14:	0003      	movs	r3, r0
   1ab16:	b2db      	uxtb	r3, r3
   1ab18:	001a      	movs	r2, r3
   1ab1a:	0021      	movs	r1, r4
   1ab1c:	0028      	movs	r0, r5
   1ab1e:	4b29      	ldr	r3, [pc, #164]	; (1abc4 <xQueueReceive+0x360>)
   1ab20:	4798      	blx	r3
   1ab22:	6a3b      	ldr	r3, [r7, #32]
   1ab24:	0018      	movs	r0, r3
   1ab26:	4b24      	ldr	r3, [pc, #144]	; (1abb8 <xQueueReceive+0x354>)
   1ab28:	4798      	blx	r3
   1ab2a:	0003      	movs	r3, r0
   1ab2c:	001a      	movs	r2, r3
   1ab2e:	4b23      	ldr	r3, [pc, #140]	; (1abbc <xQueueReceive+0x358>)
   1ab30:	5c9b      	ldrb	r3, [r3, r2]
   1ab32:	2b02      	cmp	r3, #2
   1ab34:	d018      	beq.n	1ab68 <xQueueReceive+0x304>
   1ab36:	4b1c      	ldr	r3, [pc, #112]	; (1aba8 <xQueueReceive+0x344>)
   1ab38:	4798      	blx	r3
   1ab3a:	0003      	movs	r3, r0
   1ab3c:	0018      	movs	r0, r3
   1ab3e:	4b1b      	ldr	r3, [pc, #108]	; (1abac <xQueueReceive+0x348>)
   1ab40:	4798      	blx	r3
   1ab42:	0003      	movs	r3, r0
   1ab44:	001a      	movs	r2, r3
   1ab46:	4b1a      	ldr	r3, [pc, #104]	; (1abb0 <xQueueReceive+0x34c>)
   1ab48:	881b      	ldrh	r3, [r3, #0]
   1ab4a:	4013      	ands	r3, r2
   1ab4c:	b29b      	uxth	r3, r3
   1ab4e:	2b00      	cmp	r3, #0
   1ab50:	d00a      	beq.n	1ab68 <xQueueReceive+0x304>
   1ab52:	4b15      	ldr	r3, [pc, #84]	; (1aba8 <xQueueReceive+0x344>)
   1ab54:	4798      	blx	r3
   1ab56:	0003      	movs	r3, r0
   1ab58:	0018      	movs	r0, r3
   1ab5a:	4b1b      	ldr	r3, [pc, #108]	; (1abc8 <xQueueReceive+0x364>)
   1ab5c:	4798      	blx	r3
   1ab5e:	0003      	movs	r3, r0
   1ab60:	b2db      	uxtb	r3, r3
   1ab62:	0018      	movs	r0, r3
   1ab64:	4b21      	ldr	r3, [pc, #132]	; (1abec <xQueueReceive+0x388>)
   1ab66:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1ab68:	6a3b      	ldr	r3, [r7, #32]
   1ab6a:	3324      	adds	r3, #36	; 0x24
   1ab6c:	687a      	ldr	r2, [r7, #4]
   1ab6e:	0011      	movs	r1, r2
   1ab70:	0018      	movs	r0, r3
   1ab72:	4b1f      	ldr	r3, [pc, #124]	; (1abf0 <xQueueReceive+0x38c>)
   1ab74:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1ab76:	6a3b      	ldr	r3, [r7, #32]
   1ab78:	0018      	movs	r0, r3
   1ab7a:	4b1e      	ldr	r3, [pc, #120]	; (1abf4 <xQueueReceive+0x390>)
   1ab7c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1ab7e:	4b1e      	ldr	r3, [pc, #120]	; (1abf8 <xQueueReceive+0x394>)
   1ab80:	4798      	blx	r3
   1ab82:	1e03      	subs	r3, r0, #0
   1ab84:	d000      	beq.n	1ab88 <xQueueReceive+0x324>
   1ab86:	e698      	b.n	1a8ba <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1ab88:	4b12      	ldr	r3, [pc, #72]	; (1abd4 <xQueueReceive+0x370>)
   1ab8a:	4798      	blx	r3
   1ab8c:	e695      	b.n	1a8ba <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1ab8e:	6a3b      	ldr	r3, [r7, #32]
   1ab90:	0018      	movs	r0, r3
   1ab92:	4b18      	ldr	r3, [pc, #96]	; (1abf4 <xQueueReceive+0x390>)
   1ab94:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1ab96:	4b18      	ldr	r3, [pc, #96]	; (1abf8 <xQueueReceive+0x394>)
   1ab98:	4798      	blx	r3
   1ab9a:	e68e      	b.n	1a8ba <xQueueReceive+0x56>
   1ab9c:	0001c739 	.word	0x0001c739
   1aba0:	00019a19 	.word	0x00019a19
   1aba4:	0001b2c5 	.word	0x0001b2c5
   1aba8:	00017cb1 	.word	0x00017cb1
   1abac:	00017a15 	.word	0x00017a15
   1abb0:	20000108 	.word	0x20000108
   1abb4:	00017ad5 	.word	0x00017ad5
   1abb8:	000179d5 	.word	0x000179d5
   1abbc:	200000fc 	.word	0x200000fc
   1abc0:	00017ab5 	.word	0x00017ab5
   1abc4:	0001840d 	.word	0x0001840d
   1abc8:	000179f5 	.word	0x000179f5
   1abcc:	00018a69 	.word	0x00018a69
   1abd0:	0001c2a9 	.word	0x0001c2a9
   1abd4:	00019a01 	.word	0x00019a01
   1abd8:	00019a3d 	.word	0x00019a3d
   1abdc:	0001c3e9 	.word	0x0001c3e9
   1abe0:	0001bcd1 	.word	0x0001bcd1
   1abe4:	0001c411 	.word	0x0001c411
   1abe8:	0001b405 	.word	0x0001b405
   1abec:	00018ba5 	.word	0x00018ba5
   1abf0:	0001c185 	.word	0x0001c185
   1abf4:	0001b315 	.word	0x0001b315
   1abf8:	0001bce9 	.word	0x0001bce9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1abfc:	6a3b      	ldr	r3, [r7, #32]
   1abfe:	0018      	movs	r0, r3
   1ac00:	4b23      	ldr	r3, [pc, #140]	; (1ac90 <xQueueReceive+0x42c>)
   1ac02:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ac04:	4b23      	ldr	r3, [pc, #140]	; (1ac94 <xQueueReceive+0x430>)
   1ac06:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ac08:	6a3b      	ldr	r3, [r7, #32]
   1ac0a:	0018      	movs	r0, r3
   1ac0c:	4b22      	ldr	r3, [pc, #136]	; (1ac98 <xQueueReceive+0x434>)
   1ac0e:	4798      	blx	r3
   1ac10:	1e03      	subs	r3, r0, #0
   1ac12:	d100      	bne.n	1ac16 <xQueueReceive+0x3b2>
   1ac14:	e651      	b.n	1a8ba <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ac16:	4b21      	ldr	r3, [pc, #132]	; (1ac9c <xQueueReceive+0x438>)
   1ac18:	4798      	blx	r3
   1ac1a:	0003      	movs	r3, r0
   1ac1c:	0018      	movs	r0, r3
   1ac1e:	4b20      	ldr	r3, [pc, #128]	; (1aca0 <xQueueReceive+0x43c>)
   1ac20:	4798      	blx	r3
   1ac22:	0003      	movs	r3, r0
   1ac24:	001a      	movs	r2, r3
   1ac26:	4b1f      	ldr	r3, [pc, #124]	; (1aca4 <xQueueReceive+0x440>)
   1ac28:	881b      	ldrh	r3, [r3, #0]
   1ac2a:	4013      	ands	r3, r2
   1ac2c:	b29b      	uxth	r3, r3
   1ac2e:	2b00      	cmp	r3, #0
   1ac30:	d029      	beq.n	1ac86 <xQueueReceive+0x422>
   1ac32:	6a3b      	ldr	r3, [r7, #32]
   1ac34:	0018      	movs	r0, r3
   1ac36:	4b1c      	ldr	r3, [pc, #112]	; (1aca8 <xQueueReceive+0x444>)
   1ac38:	4798      	blx	r3
   1ac3a:	0003      	movs	r3, r0
   1ac3c:	001a      	movs	r2, r3
   1ac3e:	4b19      	ldr	r3, [pc, #100]	; (1aca4 <xQueueReceive+0x440>)
   1ac40:	881b      	ldrh	r3, [r3, #0]
   1ac42:	4013      	ands	r3, r2
   1ac44:	b29b      	uxth	r3, r3
   1ac46:	2b00      	cmp	r3, #0
   1ac48:	d01d      	beq.n	1ac86 <xQueueReceive+0x422>
   1ac4a:	6a3b      	ldr	r3, [r7, #32]
   1ac4c:	0018      	movs	r0, r3
   1ac4e:	4b17      	ldr	r3, [pc, #92]	; (1acac <xQueueReceive+0x448>)
   1ac50:	4798      	blx	r3
   1ac52:	0003      	movs	r3, r0
   1ac54:	001a      	movs	r2, r3
   1ac56:	4b16      	ldr	r3, [pc, #88]	; (1acb0 <xQueueReceive+0x44c>)
   1ac58:	5c9b      	ldrb	r3, [r3, r2]
   1ac5a:	3350      	adds	r3, #80	; 0x50
   1ac5c:	b2db      	uxtb	r3, r3
   1ac5e:	001d      	movs	r5, r3
   1ac60:	6a3b      	ldr	r3, [r7, #32]
   1ac62:	0018      	movs	r0, r3
   1ac64:	4b11      	ldr	r3, [pc, #68]	; (1acac <xQueueReceive+0x448>)
   1ac66:	4798      	blx	r3
   1ac68:	0003      	movs	r3, r0
   1ac6a:	001a      	movs	r2, r3
   1ac6c:	4b10      	ldr	r3, [pc, #64]	; (1acb0 <xQueueReceive+0x44c>)
   1ac6e:	5c9c      	ldrb	r4, [r3, r2]
   1ac70:	6a3b      	ldr	r3, [r7, #32]
   1ac72:	0018      	movs	r0, r3
   1ac74:	4b0f      	ldr	r3, [pc, #60]	; (1acb4 <xQueueReceive+0x450>)
   1ac76:	4798      	blx	r3
   1ac78:	0003      	movs	r3, r0
   1ac7a:	b2db      	uxtb	r3, r3
   1ac7c:	001a      	movs	r2, r3
   1ac7e:	0021      	movs	r1, r4
   1ac80:	0028      	movs	r0, r5
   1ac82:	4b0d      	ldr	r3, [pc, #52]	; (1acb8 <xQueueReceive+0x454>)
   1ac84:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1ac86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1ac88:	0018      	movs	r0, r3
   1ac8a:	46bd      	mov	sp, r7
   1ac8c:	b00a      	add	sp, #40	; 0x28
   1ac8e:	bdb0      	pop	{r4, r5, r7, pc}
   1ac90:	0001b315 	.word	0x0001b315
   1ac94:	0001bce9 	.word	0x0001bce9
   1ac98:	0001b405 	.word	0x0001b405
   1ac9c:	00017cb1 	.word	0x00017cb1
   1aca0:	00017a15 	.word	0x00017a15
   1aca4:	20000108 	.word	0x20000108
   1aca8:	00017ad5 	.word	0x00017ad5
   1acac:	000179d5 	.word	0x000179d5
   1acb0:	200000fc 	.word	0x200000fc
   1acb4:	00017ab5 	.word	0x00017ab5
   1acb8:	0001840d 	.word	0x0001840d

0001acbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1acbc:	b5b0      	push	{r4, r5, r7, lr}
   1acbe:	b08a      	sub	sp, #40	; 0x28
   1acc0:	af00      	add	r7, sp, #0
   1acc2:	6078      	str	r0, [r7, #4]
   1acc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1acc6:	2300      	movs	r3, #0
   1acc8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1acca:	687b      	ldr	r3, [r7, #4]
   1accc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1acce:	2300      	movs	r3, #0
   1acd0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1acd2:	69fb      	ldr	r3, [r7, #28]
   1acd4:	2b00      	cmp	r3, #0
   1acd6:	d101      	bne.n	1acdc <xQueueSemaphoreTake+0x20>
   1acd8:	b672      	cpsid	i
   1acda:	e7fe      	b.n	1acda <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1acdc:	69fb      	ldr	r3, [r7, #28]
   1acde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ace0:	2b00      	cmp	r3, #0
   1ace2:	d001      	beq.n	1ace8 <xQueueSemaphoreTake+0x2c>
   1ace4:	b672      	cpsid	i
   1ace6:	e7fe      	b.n	1ace6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ace8:	4bcb      	ldr	r3, [pc, #812]	; (1b018 <xQueueSemaphoreTake+0x35c>)
   1acea:	4798      	blx	r3
   1acec:	1e03      	subs	r3, r0, #0
   1acee:	d102      	bne.n	1acf6 <xQueueSemaphoreTake+0x3a>
   1acf0:	683b      	ldr	r3, [r7, #0]
   1acf2:	2b00      	cmp	r3, #0
   1acf4:	d101      	bne.n	1acfa <xQueueSemaphoreTake+0x3e>
   1acf6:	2301      	movs	r3, #1
   1acf8:	e000      	b.n	1acfc <xQueueSemaphoreTake+0x40>
   1acfa:	2300      	movs	r3, #0
   1acfc:	2b00      	cmp	r3, #0
   1acfe:	d101      	bne.n	1ad04 <xQueueSemaphoreTake+0x48>
   1ad00:	b672      	cpsid	i
   1ad02:	e7fe      	b.n	1ad02 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1ad04:	4bc5      	ldr	r3, [pc, #788]	; (1b01c <xQueueSemaphoreTake+0x360>)
   1ad06:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1ad08:	69fb      	ldr	r3, [r7, #28]
   1ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad0c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1ad0e:	69bb      	ldr	r3, [r7, #24]
   1ad10:	2b00      	cmp	r3, #0
   1ad12:	d100      	bne.n	1ad16 <xQueueSemaphoreTake+0x5a>
   1ad14:	e080      	b.n	1ae18 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1ad16:	4bc2      	ldr	r3, [pc, #776]	; (1b020 <xQueueSemaphoreTake+0x364>)
   1ad18:	4798      	blx	r3
   1ad1a:	0003      	movs	r3, r0
   1ad1c:	0018      	movs	r0, r3
   1ad1e:	4bc1      	ldr	r3, [pc, #772]	; (1b024 <xQueueSemaphoreTake+0x368>)
   1ad20:	4798      	blx	r3
   1ad22:	0003      	movs	r3, r0
   1ad24:	001a      	movs	r2, r3
   1ad26:	4bc0      	ldr	r3, [pc, #768]	; (1b028 <xQueueSemaphoreTake+0x36c>)
   1ad28:	881b      	ldrh	r3, [r3, #0]
   1ad2a:	4013      	ands	r3, r2
   1ad2c:	b29b      	uxth	r3, r3
   1ad2e:	2b00      	cmp	r3, #0
   1ad30:	d029      	beq.n	1ad86 <xQueueSemaphoreTake+0xca>
   1ad32:	69fb      	ldr	r3, [r7, #28]
   1ad34:	0018      	movs	r0, r3
   1ad36:	4bbd      	ldr	r3, [pc, #756]	; (1b02c <xQueueSemaphoreTake+0x370>)
   1ad38:	4798      	blx	r3
   1ad3a:	0003      	movs	r3, r0
   1ad3c:	001a      	movs	r2, r3
   1ad3e:	4bba      	ldr	r3, [pc, #744]	; (1b028 <xQueueSemaphoreTake+0x36c>)
   1ad40:	881b      	ldrh	r3, [r3, #0]
   1ad42:	4013      	ands	r3, r2
   1ad44:	b29b      	uxth	r3, r3
   1ad46:	2b00      	cmp	r3, #0
   1ad48:	d01d      	beq.n	1ad86 <xQueueSemaphoreTake+0xca>
   1ad4a:	69fb      	ldr	r3, [r7, #28]
   1ad4c:	0018      	movs	r0, r3
   1ad4e:	4bb8      	ldr	r3, [pc, #736]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1ad50:	4798      	blx	r3
   1ad52:	0003      	movs	r3, r0
   1ad54:	001a      	movs	r2, r3
   1ad56:	4bb7      	ldr	r3, [pc, #732]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1ad58:	5c9b      	ldrb	r3, [r3, r2]
   1ad5a:	3328      	adds	r3, #40	; 0x28
   1ad5c:	b2db      	uxtb	r3, r3
   1ad5e:	001d      	movs	r5, r3
   1ad60:	69fb      	ldr	r3, [r7, #28]
   1ad62:	0018      	movs	r0, r3
   1ad64:	4bb2      	ldr	r3, [pc, #712]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1ad66:	4798      	blx	r3
   1ad68:	0003      	movs	r3, r0
   1ad6a:	001a      	movs	r2, r3
   1ad6c:	4bb1      	ldr	r3, [pc, #708]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1ad6e:	5c9c      	ldrb	r4, [r3, r2]
   1ad70:	69fb      	ldr	r3, [r7, #28]
   1ad72:	0018      	movs	r0, r3
   1ad74:	4bb0      	ldr	r3, [pc, #704]	; (1b038 <xQueueSemaphoreTake+0x37c>)
   1ad76:	4798      	blx	r3
   1ad78:	0003      	movs	r3, r0
   1ad7a:	b2db      	uxtb	r3, r3
   1ad7c:	001a      	movs	r2, r3
   1ad7e:	0021      	movs	r1, r4
   1ad80:	0028      	movs	r0, r5
   1ad82:	4bae      	ldr	r3, [pc, #696]	; (1b03c <xQueueSemaphoreTake+0x380>)
   1ad84:	4798      	blx	r3
   1ad86:	69fb      	ldr	r3, [r7, #28]
   1ad88:	0018      	movs	r0, r3
   1ad8a:	4ba9      	ldr	r3, [pc, #676]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1ad8c:	4798      	blx	r3
   1ad8e:	0003      	movs	r3, r0
   1ad90:	001a      	movs	r2, r3
   1ad92:	4ba8      	ldr	r3, [pc, #672]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1ad94:	5c9c      	ldrb	r4, [r3, r2]
   1ad96:	69fb      	ldr	r3, [r7, #28]
   1ad98:	0018      	movs	r0, r3
   1ad9a:	4ba7      	ldr	r3, [pc, #668]	; (1b038 <xQueueSemaphoreTake+0x37c>)
   1ad9c:	4798      	blx	r3
   1ad9e:	0003      	movs	r3, r0
   1ada0:	b2dd      	uxtb	r5, r3
   1ada2:	69fb      	ldr	r3, [r7, #28]
   1ada4:	0018      	movs	r0, r3
   1ada6:	4ba2      	ldr	r3, [pc, #648]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1ada8:	4798      	blx	r3
   1adaa:	0003      	movs	r3, r0
   1adac:	001a      	movs	r2, r3
   1adae:	4ba1      	ldr	r3, [pc, #644]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1adb0:	5c9b      	ldrb	r3, [r3, r2]
   1adb2:	2b02      	cmp	r3, #2
   1adb4:	d108      	bne.n	1adc8 <xQueueSemaphoreTake+0x10c>
   1adb6:	4b9a      	ldr	r3, [pc, #616]	; (1b020 <xQueueSemaphoreTake+0x364>)
   1adb8:	4798      	blx	r3
   1adba:	0003      	movs	r3, r0
   1adbc:	0018      	movs	r0, r3
   1adbe:	4ba0      	ldr	r3, [pc, #640]	; (1b040 <xQueueSemaphoreTake+0x384>)
   1adc0:	4798      	blx	r3
   1adc2:	0003      	movs	r3, r0
   1adc4:	b2db      	uxtb	r3, r3
   1adc6:	e004      	b.n	1add2 <xQueueSemaphoreTake+0x116>
   1adc8:	69fb      	ldr	r3, [r7, #28]
   1adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1adcc:	b2db      	uxtb	r3, r3
   1adce:	3b01      	subs	r3, #1
   1add0:	b2db      	uxtb	r3, r3
   1add2:	001a      	movs	r2, r3
   1add4:	0029      	movs	r1, r5
   1add6:	0020      	movs	r0, r4
   1add8:	4b9a      	ldr	r3, [pc, #616]	; (1b044 <xQueueSemaphoreTake+0x388>)
   1adda:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1addc:	69bb      	ldr	r3, [r7, #24]
   1adde:	1e5a      	subs	r2, r3, #1
   1ade0:	69fb      	ldr	r3, [r7, #28]
   1ade2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1ade4:	69fb      	ldr	r3, [r7, #28]
   1ade6:	681b      	ldr	r3, [r3, #0]
   1ade8:	2b00      	cmp	r3, #0
   1adea:	d104      	bne.n	1adf6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1adec:	4b96      	ldr	r3, [pc, #600]	; (1b048 <xQueueSemaphoreTake+0x38c>)
   1adee:	4798      	blx	r3
   1adf0:	0002      	movs	r2, r0
   1adf2:	69fb      	ldr	r3, [r7, #28]
   1adf4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1adf6:	69fb      	ldr	r3, [r7, #28]
   1adf8:	691b      	ldr	r3, [r3, #16]
   1adfa:	2b00      	cmp	r3, #0
   1adfc:	d008      	beq.n	1ae10 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1adfe:	69fb      	ldr	r3, [r7, #28]
   1ae00:	3310      	adds	r3, #16
   1ae02:	0018      	movs	r0, r3
   1ae04:	4b91      	ldr	r3, [pc, #580]	; (1b04c <xQueueSemaphoreTake+0x390>)
   1ae06:	4798      	blx	r3
   1ae08:	1e03      	subs	r3, r0, #0
   1ae0a:	d001      	beq.n	1ae10 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1ae0c:	4b90      	ldr	r3, [pc, #576]	; (1b050 <xQueueSemaphoreTake+0x394>)
   1ae0e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1ae10:	4b90      	ldr	r3, [pc, #576]	; (1b054 <xQueueSemaphoreTake+0x398>)
   1ae12:	4798      	blx	r3
				return pdPASS;
   1ae14:	2301      	movs	r3, #1
   1ae16:	e18b      	b.n	1b130 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ae18:	683b      	ldr	r3, [r7, #0]
   1ae1a:	2b00      	cmp	r3, #0
   1ae1c:	d140      	bne.n	1aea0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1ae1e:	6a3b      	ldr	r3, [r7, #32]
   1ae20:	2b00      	cmp	r3, #0
   1ae22:	d001      	beq.n	1ae28 <xQueueSemaphoreTake+0x16c>
   1ae24:	b672      	cpsid	i
   1ae26:	e7fe      	b.n	1ae26 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1ae28:	4b8a      	ldr	r3, [pc, #552]	; (1b054 <xQueueSemaphoreTake+0x398>)
   1ae2a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ae2c:	4b7c      	ldr	r3, [pc, #496]	; (1b020 <xQueueSemaphoreTake+0x364>)
   1ae2e:	4798      	blx	r3
   1ae30:	0003      	movs	r3, r0
   1ae32:	0018      	movs	r0, r3
   1ae34:	4b7b      	ldr	r3, [pc, #492]	; (1b024 <xQueueSemaphoreTake+0x368>)
   1ae36:	4798      	blx	r3
   1ae38:	0003      	movs	r3, r0
   1ae3a:	001a      	movs	r2, r3
   1ae3c:	4b7a      	ldr	r3, [pc, #488]	; (1b028 <xQueueSemaphoreTake+0x36c>)
   1ae3e:	881b      	ldrh	r3, [r3, #0]
   1ae40:	4013      	ands	r3, r2
   1ae42:	b29b      	uxth	r3, r3
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	d029      	beq.n	1ae9c <xQueueSemaphoreTake+0x1e0>
   1ae48:	69fb      	ldr	r3, [r7, #28]
   1ae4a:	0018      	movs	r0, r3
   1ae4c:	4b77      	ldr	r3, [pc, #476]	; (1b02c <xQueueSemaphoreTake+0x370>)
   1ae4e:	4798      	blx	r3
   1ae50:	0003      	movs	r3, r0
   1ae52:	001a      	movs	r2, r3
   1ae54:	4b74      	ldr	r3, [pc, #464]	; (1b028 <xQueueSemaphoreTake+0x36c>)
   1ae56:	881b      	ldrh	r3, [r3, #0]
   1ae58:	4013      	ands	r3, r2
   1ae5a:	b29b      	uxth	r3, r3
   1ae5c:	2b00      	cmp	r3, #0
   1ae5e:	d01d      	beq.n	1ae9c <xQueueSemaphoreTake+0x1e0>
   1ae60:	69fb      	ldr	r3, [r7, #28]
   1ae62:	0018      	movs	r0, r3
   1ae64:	4b72      	ldr	r3, [pc, #456]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1ae66:	4798      	blx	r3
   1ae68:	0003      	movs	r3, r0
   1ae6a:	001a      	movs	r2, r3
   1ae6c:	4b71      	ldr	r3, [pc, #452]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1ae6e:	5c9b      	ldrb	r3, [r3, r2]
   1ae70:	3350      	adds	r3, #80	; 0x50
   1ae72:	b2db      	uxtb	r3, r3
   1ae74:	001d      	movs	r5, r3
   1ae76:	69fb      	ldr	r3, [r7, #28]
   1ae78:	0018      	movs	r0, r3
   1ae7a:	4b6d      	ldr	r3, [pc, #436]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1ae7c:	4798      	blx	r3
   1ae7e:	0003      	movs	r3, r0
   1ae80:	001a      	movs	r2, r3
   1ae82:	4b6c      	ldr	r3, [pc, #432]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1ae84:	5c9c      	ldrb	r4, [r3, r2]
   1ae86:	69fb      	ldr	r3, [r7, #28]
   1ae88:	0018      	movs	r0, r3
   1ae8a:	4b6b      	ldr	r3, [pc, #428]	; (1b038 <xQueueSemaphoreTake+0x37c>)
   1ae8c:	4798      	blx	r3
   1ae8e:	0003      	movs	r3, r0
   1ae90:	b2db      	uxtb	r3, r3
   1ae92:	001a      	movs	r2, r3
   1ae94:	0021      	movs	r1, r4
   1ae96:	0028      	movs	r0, r5
   1ae98:	4b68      	ldr	r3, [pc, #416]	; (1b03c <xQueueSemaphoreTake+0x380>)
   1ae9a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1ae9c:	2300      	movs	r3, #0
   1ae9e:	e147      	b.n	1b130 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aea2:	2b00      	cmp	r3, #0
   1aea4:	d106      	bne.n	1aeb4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1aea6:	230c      	movs	r3, #12
   1aea8:	18fb      	adds	r3, r7, r3
   1aeaa:	0018      	movs	r0, r3
   1aeac:	4b6a      	ldr	r3, [pc, #424]	; (1b058 <xQueueSemaphoreTake+0x39c>)
   1aeae:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1aeb0:	2301      	movs	r3, #1
   1aeb2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1aeb4:	4b67      	ldr	r3, [pc, #412]	; (1b054 <xQueueSemaphoreTake+0x398>)
   1aeb6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1aeb8:	4b68      	ldr	r3, [pc, #416]	; (1b05c <xQueueSemaphoreTake+0x3a0>)
   1aeba:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1aebc:	4b57      	ldr	r3, [pc, #348]	; (1b01c <xQueueSemaphoreTake+0x360>)
   1aebe:	4798      	blx	r3
   1aec0:	69fb      	ldr	r3, [r7, #28]
   1aec2:	2244      	movs	r2, #68	; 0x44
   1aec4:	5c9b      	ldrb	r3, [r3, r2]
   1aec6:	b25b      	sxtb	r3, r3
   1aec8:	3301      	adds	r3, #1
   1aeca:	d103      	bne.n	1aed4 <xQueueSemaphoreTake+0x218>
   1aecc:	69fb      	ldr	r3, [r7, #28]
   1aece:	2244      	movs	r2, #68	; 0x44
   1aed0:	2100      	movs	r1, #0
   1aed2:	5499      	strb	r1, [r3, r2]
   1aed4:	69fb      	ldr	r3, [r7, #28]
   1aed6:	2245      	movs	r2, #69	; 0x45
   1aed8:	5c9b      	ldrb	r3, [r3, r2]
   1aeda:	b25b      	sxtb	r3, r3
   1aedc:	3301      	adds	r3, #1
   1aede:	d103      	bne.n	1aee8 <xQueueSemaphoreTake+0x22c>
   1aee0:	69fb      	ldr	r3, [r7, #28]
   1aee2:	2245      	movs	r2, #69	; 0x45
   1aee4:	2100      	movs	r1, #0
   1aee6:	5499      	strb	r1, [r3, r2]
   1aee8:	4b5a      	ldr	r3, [pc, #360]	; (1b054 <xQueueSemaphoreTake+0x398>)
   1aeea:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1aeec:	003a      	movs	r2, r7
   1aeee:	230c      	movs	r3, #12
   1aef0:	18fb      	adds	r3, r7, r3
   1aef2:	0011      	movs	r1, r2
   1aef4:	0018      	movs	r0, r3
   1aef6:	4b5a      	ldr	r3, [pc, #360]	; (1b060 <xQueueSemaphoreTake+0x3a4>)
   1aef8:	4798      	blx	r3
   1aefa:	1e03      	subs	r3, r0, #0
   1aefc:	d000      	beq.n	1af00 <xQueueSemaphoreTake+0x244>
   1aefe:	e0bd      	b.n	1b07c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1af00:	69fb      	ldr	r3, [r7, #28]
   1af02:	0018      	movs	r0, r3
   1af04:	4b57      	ldr	r3, [pc, #348]	; (1b064 <xQueueSemaphoreTake+0x3a8>)
   1af06:	4798      	blx	r3
   1af08:	1e03      	subs	r3, r0, #0
   1af0a:	d100      	bne.n	1af0e <xQueueSemaphoreTake+0x252>
   1af0c:	e07c      	b.n	1b008 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1af0e:	4b44      	ldr	r3, [pc, #272]	; (1b020 <xQueueSemaphoreTake+0x364>)
   1af10:	4798      	blx	r3
   1af12:	0003      	movs	r3, r0
   1af14:	0018      	movs	r0, r3
   1af16:	4b43      	ldr	r3, [pc, #268]	; (1b024 <xQueueSemaphoreTake+0x368>)
   1af18:	4798      	blx	r3
   1af1a:	0003      	movs	r3, r0
   1af1c:	001a      	movs	r2, r3
   1af1e:	4b42      	ldr	r3, [pc, #264]	; (1b028 <xQueueSemaphoreTake+0x36c>)
   1af20:	881b      	ldrh	r3, [r3, #0]
   1af22:	4013      	ands	r3, r2
   1af24:	b29b      	uxth	r3, r3
   1af26:	2b00      	cmp	r3, #0
   1af28:	d029      	beq.n	1af7e <xQueueSemaphoreTake+0x2c2>
   1af2a:	69fb      	ldr	r3, [r7, #28]
   1af2c:	0018      	movs	r0, r3
   1af2e:	4b3f      	ldr	r3, [pc, #252]	; (1b02c <xQueueSemaphoreTake+0x370>)
   1af30:	4798      	blx	r3
   1af32:	0003      	movs	r3, r0
   1af34:	001a      	movs	r2, r3
   1af36:	4b3c      	ldr	r3, [pc, #240]	; (1b028 <xQueueSemaphoreTake+0x36c>)
   1af38:	881b      	ldrh	r3, [r3, #0]
   1af3a:	4013      	ands	r3, r2
   1af3c:	b29b      	uxth	r3, r3
   1af3e:	2b00      	cmp	r3, #0
   1af40:	d01d      	beq.n	1af7e <xQueueSemaphoreTake+0x2c2>
   1af42:	69fb      	ldr	r3, [r7, #28]
   1af44:	0018      	movs	r0, r3
   1af46:	4b3a      	ldr	r3, [pc, #232]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1af48:	4798      	blx	r3
   1af4a:	0003      	movs	r3, r0
   1af4c:	001a      	movs	r2, r3
   1af4e:	4b39      	ldr	r3, [pc, #228]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1af50:	5c9b      	ldrb	r3, [r3, r2]
   1af52:	3368      	adds	r3, #104	; 0x68
   1af54:	b2db      	uxtb	r3, r3
   1af56:	001d      	movs	r5, r3
   1af58:	69fb      	ldr	r3, [r7, #28]
   1af5a:	0018      	movs	r0, r3
   1af5c:	4b34      	ldr	r3, [pc, #208]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1af5e:	4798      	blx	r3
   1af60:	0003      	movs	r3, r0
   1af62:	001a      	movs	r2, r3
   1af64:	4b33      	ldr	r3, [pc, #204]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1af66:	5c9c      	ldrb	r4, [r3, r2]
   1af68:	69fb      	ldr	r3, [r7, #28]
   1af6a:	0018      	movs	r0, r3
   1af6c:	4b32      	ldr	r3, [pc, #200]	; (1b038 <xQueueSemaphoreTake+0x37c>)
   1af6e:	4798      	blx	r3
   1af70:	0003      	movs	r3, r0
   1af72:	b2db      	uxtb	r3, r3
   1af74:	001a      	movs	r2, r3
   1af76:	0021      	movs	r1, r4
   1af78:	0028      	movs	r0, r5
   1af7a:	4b30      	ldr	r3, [pc, #192]	; (1b03c <xQueueSemaphoreTake+0x380>)
   1af7c:	4798      	blx	r3
   1af7e:	69fb      	ldr	r3, [r7, #28]
   1af80:	0018      	movs	r0, r3
   1af82:	4b2b      	ldr	r3, [pc, #172]	; (1b030 <xQueueSemaphoreTake+0x374>)
   1af84:	4798      	blx	r3
   1af86:	0003      	movs	r3, r0
   1af88:	001a      	movs	r2, r3
   1af8a:	4b2a      	ldr	r3, [pc, #168]	; (1b034 <xQueueSemaphoreTake+0x378>)
   1af8c:	5c9b      	ldrb	r3, [r3, r2]
   1af8e:	2b02      	cmp	r3, #2
   1af90:	d018      	beq.n	1afc4 <xQueueSemaphoreTake+0x308>
   1af92:	4b23      	ldr	r3, [pc, #140]	; (1b020 <xQueueSemaphoreTake+0x364>)
   1af94:	4798      	blx	r3
   1af96:	0003      	movs	r3, r0
   1af98:	0018      	movs	r0, r3
   1af9a:	4b22      	ldr	r3, [pc, #136]	; (1b024 <xQueueSemaphoreTake+0x368>)
   1af9c:	4798      	blx	r3
   1af9e:	0003      	movs	r3, r0
   1afa0:	001a      	movs	r2, r3
   1afa2:	4b21      	ldr	r3, [pc, #132]	; (1b028 <xQueueSemaphoreTake+0x36c>)
   1afa4:	881b      	ldrh	r3, [r3, #0]
   1afa6:	4013      	ands	r3, r2
   1afa8:	b29b      	uxth	r3, r3
   1afaa:	2b00      	cmp	r3, #0
   1afac:	d00a      	beq.n	1afc4 <xQueueSemaphoreTake+0x308>
   1afae:	4b1c      	ldr	r3, [pc, #112]	; (1b020 <xQueueSemaphoreTake+0x364>)
   1afb0:	4798      	blx	r3
   1afb2:	0003      	movs	r3, r0
   1afb4:	0018      	movs	r0, r3
   1afb6:	4b22      	ldr	r3, [pc, #136]	; (1b040 <xQueueSemaphoreTake+0x384>)
   1afb8:	4798      	blx	r3
   1afba:	0003      	movs	r3, r0
   1afbc:	b2db      	uxtb	r3, r3
   1afbe:	0018      	movs	r0, r3
   1afc0:	4b29      	ldr	r3, [pc, #164]	; (1b068 <xQueueSemaphoreTake+0x3ac>)
   1afc2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1afc4:	69fb      	ldr	r3, [r7, #28]
   1afc6:	681b      	ldr	r3, [r3, #0]
   1afc8:	2b00      	cmp	r3, #0
   1afca:	d10a      	bne.n	1afe2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1afcc:	4b13      	ldr	r3, [pc, #76]	; (1b01c <xQueueSemaphoreTake+0x360>)
   1afce:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1afd0:	69fb      	ldr	r3, [r7, #28]
   1afd2:	685b      	ldr	r3, [r3, #4]
   1afd4:	0018      	movs	r0, r3
   1afd6:	4b25      	ldr	r3, [pc, #148]	; (1b06c <xQueueSemaphoreTake+0x3b0>)
   1afd8:	4798      	blx	r3
   1afda:	0003      	movs	r3, r0
   1afdc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1afde:	4b1d      	ldr	r3, [pc, #116]	; (1b054 <xQueueSemaphoreTake+0x398>)
   1afe0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1afe2:	69fb      	ldr	r3, [r7, #28]
   1afe4:	3324      	adds	r3, #36	; 0x24
   1afe6:	683a      	ldr	r2, [r7, #0]
   1afe8:	0011      	movs	r1, r2
   1afea:	0018      	movs	r0, r3
   1afec:	4b20      	ldr	r3, [pc, #128]	; (1b070 <xQueueSemaphoreTake+0x3b4>)
   1afee:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1aff0:	69fb      	ldr	r3, [r7, #28]
   1aff2:	0018      	movs	r0, r3
   1aff4:	4b1f      	ldr	r3, [pc, #124]	; (1b074 <xQueueSemaphoreTake+0x3b8>)
   1aff6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1aff8:	4b1f      	ldr	r3, [pc, #124]	; (1b078 <xQueueSemaphoreTake+0x3bc>)
   1affa:	4798      	blx	r3
   1affc:	1e03      	subs	r3, r0, #0
   1affe:	d000      	beq.n	1b002 <xQueueSemaphoreTake+0x346>
   1b000:	e680      	b.n	1ad04 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b002:	4b13      	ldr	r3, [pc, #76]	; (1b050 <xQueueSemaphoreTake+0x394>)
   1b004:	4798      	blx	r3
   1b006:	e67d      	b.n	1ad04 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b008:	69fb      	ldr	r3, [r7, #28]
   1b00a:	0018      	movs	r0, r3
   1b00c:	4b19      	ldr	r3, [pc, #100]	; (1b074 <xQueueSemaphoreTake+0x3b8>)
   1b00e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b010:	4b19      	ldr	r3, [pc, #100]	; (1b078 <xQueueSemaphoreTake+0x3bc>)
   1b012:	4798      	blx	r3
   1b014:	e676      	b.n	1ad04 <xQueueSemaphoreTake+0x48>
   1b016:	46c0      	nop			; (mov r8, r8)
   1b018:	0001c739 	.word	0x0001c739
   1b01c:	00019a19 	.word	0x00019a19
   1b020:	00017cb1 	.word	0x00017cb1
   1b024:	00017a15 	.word	0x00017a15
   1b028:	20000108 	.word	0x20000108
   1b02c:	00017ad5 	.word	0x00017ad5
   1b030:	000179d5 	.word	0x000179d5
   1b034:	200000fc 	.word	0x200000fc
   1b038:	00017ab5 	.word	0x00017ab5
   1b03c:	0001840d 	.word	0x0001840d
   1b040:	000179f5 	.word	0x000179f5
   1b044:	00018a69 	.word	0x00018a69
   1b048:	0001cc05 	.word	0x0001cc05
   1b04c:	0001c2a9 	.word	0x0001c2a9
   1b050:	00019a01 	.word	0x00019a01
   1b054:	00019a3d 	.word	0x00019a3d
   1b058:	0001c3e9 	.word	0x0001c3e9
   1b05c:	0001bcd1 	.word	0x0001bcd1
   1b060:	0001c411 	.word	0x0001c411
   1b064:	0001b405 	.word	0x0001b405
   1b068:	00018ba5 	.word	0x00018ba5
   1b06c:	0001c771 	.word	0x0001c771
   1b070:	0001c185 	.word	0x0001c185
   1b074:	0001b315 	.word	0x0001b315
   1b078:	0001bce9 	.word	0x0001bce9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b07c:	69fb      	ldr	r3, [r7, #28]
   1b07e:	0018      	movs	r0, r3
   1b080:	4b2d      	ldr	r3, [pc, #180]	; (1b138 <xQueueSemaphoreTake+0x47c>)
   1b082:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b084:	4b2d      	ldr	r3, [pc, #180]	; (1b13c <xQueueSemaphoreTake+0x480>)
   1b086:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b088:	69fb      	ldr	r3, [r7, #28]
   1b08a:	0018      	movs	r0, r3
   1b08c:	4b2c      	ldr	r3, [pc, #176]	; (1b140 <xQueueSemaphoreTake+0x484>)
   1b08e:	4798      	blx	r3
   1b090:	1e03      	subs	r3, r0, #0
   1b092:	d100      	bne.n	1b096 <xQueueSemaphoreTake+0x3da>
   1b094:	e636      	b.n	1ad04 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b096:	6a3b      	ldr	r3, [r7, #32]
   1b098:	2b00      	cmp	r3, #0
   1b09a:	d010      	beq.n	1b0be <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b09c:	4b29      	ldr	r3, [pc, #164]	; (1b144 <xQueueSemaphoreTake+0x488>)
   1b09e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b0a0:	69fb      	ldr	r3, [r7, #28]
   1b0a2:	0018      	movs	r0, r3
   1b0a4:	4b28      	ldr	r3, [pc, #160]	; (1b148 <xQueueSemaphoreTake+0x48c>)
   1b0a6:	4798      	blx	r3
   1b0a8:	0003      	movs	r3, r0
   1b0aa:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b0ac:	69fb      	ldr	r3, [r7, #28]
   1b0ae:	685b      	ldr	r3, [r3, #4]
   1b0b0:	697a      	ldr	r2, [r7, #20]
   1b0b2:	0011      	movs	r1, r2
   1b0b4:	0018      	movs	r0, r3
   1b0b6:	4b25      	ldr	r3, [pc, #148]	; (1b14c <xQueueSemaphoreTake+0x490>)
   1b0b8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b0ba:	4b25      	ldr	r3, [pc, #148]	; (1b150 <xQueueSemaphoreTake+0x494>)
   1b0bc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b0be:	4b25      	ldr	r3, [pc, #148]	; (1b154 <xQueueSemaphoreTake+0x498>)
   1b0c0:	4798      	blx	r3
   1b0c2:	0003      	movs	r3, r0
   1b0c4:	0018      	movs	r0, r3
   1b0c6:	4b24      	ldr	r3, [pc, #144]	; (1b158 <xQueueSemaphoreTake+0x49c>)
   1b0c8:	4798      	blx	r3
   1b0ca:	0003      	movs	r3, r0
   1b0cc:	001a      	movs	r2, r3
   1b0ce:	4b23      	ldr	r3, [pc, #140]	; (1b15c <xQueueSemaphoreTake+0x4a0>)
   1b0d0:	881b      	ldrh	r3, [r3, #0]
   1b0d2:	4013      	ands	r3, r2
   1b0d4:	b29b      	uxth	r3, r3
   1b0d6:	2b00      	cmp	r3, #0
   1b0d8:	d029      	beq.n	1b12e <xQueueSemaphoreTake+0x472>
   1b0da:	69fb      	ldr	r3, [r7, #28]
   1b0dc:	0018      	movs	r0, r3
   1b0de:	4b20      	ldr	r3, [pc, #128]	; (1b160 <xQueueSemaphoreTake+0x4a4>)
   1b0e0:	4798      	blx	r3
   1b0e2:	0003      	movs	r3, r0
   1b0e4:	001a      	movs	r2, r3
   1b0e6:	4b1d      	ldr	r3, [pc, #116]	; (1b15c <xQueueSemaphoreTake+0x4a0>)
   1b0e8:	881b      	ldrh	r3, [r3, #0]
   1b0ea:	4013      	ands	r3, r2
   1b0ec:	b29b      	uxth	r3, r3
   1b0ee:	2b00      	cmp	r3, #0
   1b0f0:	d01d      	beq.n	1b12e <xQueueSemaphoreTake+0x472>
   1b0f2:	69fb      	ldr	r3, [r7, #28]
   1b0f4:	0018      	movs	r0, r3
   1b0f6:	4b1b      	ldr	r3, [pc, #108]	; (1b164 <xQueueSemaphoreTake+0x4a8>)
   1b0f8:	4798      	blx	r3
   1b0fa:	0003      	movs	r3, r0
   1b0fc:	001a      	movs	r2, r3
   1b0fe:	4b1a      	ldr	r3, [pc, #104]	; (1b168 <xQueueSemaphoreTake+0x4ac>)
   1b100:	5c9b      	ldrb	r3, [r3, r2]
   1b102:	3350      	adds	r3, #80	; 0x50
   1b104:	b2db      	uxtb	r3, r3
   1b106:	001d      	movs	r5, r3
   1b108:	69fb      	ldr	r3, [r7, #28]
   1b10a:	0018      	movs	r0, r3
   1b10c:	4b15      	ldr	r3, [pc, #84]	; (1b164 <xQueueSemaphoreTake+0x4a8>)
   1b10e:	4798      	blx	r3
   1b110:	0003      	movs	r3, r0
   1b112:	001a      	movs	r2, r3
   1b114:	4b14      	ldr	r3, [pc, #80]	; (1b168 <xQueueSemaphoreTake+0x4ac>)
   1b116:	5c9c      	ldrb	r4, [r3, r2]
   1b118:	69fb      	ldr	r3, [r7, #28]
   1b11a:	0018      	movs	r0, r3
   1b11c:	4b13      	ldr	r3, [pc, #76]	; (1b16c <xQueueSemaphoreTake+0x4b0>)
   1b11e:	4798      	blx	r3
   1b120:	0003      	movs	r3, r0
   1b122:	b2db      	uxtb	r3, r3
   1b124:	001a      	movs	r2, r3
   1b126:	0021      	movs	r1, r4
   1b128:	0028      	movs	r0, r5
   1b12a:	4b11      	ldr	r3, [pc, #68]	; (1b170 <xQueueSemaphoreTake+0x4b4>)
   1b12c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b12e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b130:	0018      	movs	r0, r3
   1b132:	46bd      	mov	sp, r7
   1b134:	b00a      	add	sp, #40	; 0x28
   1b136:	bdb0      	pop	{r4, r5, r7, pc}
   1b138:	0001b315 	.word	0x0001b315
   1b13c:	0001bce9 	.word	0x0001bce9
   1b140:	0001b405 	.word	0x0001b405
   1b144:	00019a19 	.word	0x00019a19
   1b148:	0001b1b7 	.word	0x0001b1b7
   1b14c:	0001ca69 	.word	0x0001ca69
   1b150:	00019a3d 	.word	0x00019a3d
   1b154:	00017cb1 	.word	0x00017cb1
   1b158:	00017a15 	.word	0x00017a15
   1b15c:	20000108 	.word	0x20000108
   1b160:	00017ad5 	.word	0x00017ad5
   1b164:	000179d5 	.word	0x000179d5
   1b168:	200000fc 	.word	0x200000fc
   1b16c:	00017ab5 	.word	0x00017ab5
   1b170:	0001840d 	.word	0x0001840d

0001b174 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b174:	b580      	push	{r7, lr}
   1b176:	b082      	sub	sp, #8
   1b178:	af00      	add	r7, sp, #0
   1b17a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b17c:	687b      	ldr	r3, [r7, #4]
   1b17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b180:	0018      	movs	r0, r3
   1b182:	46bd      	mov	sp, r7
   1b184:	b002      	add	sp, #8
   1b186:	bd80      	pop	{r7, pc}

0001b188 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b188:	b580      	push	{r7, lr}
   1b18a:	b082      	sub	sp, #8
   1b18c:	af00      	add	r7, sp, #0
   1b18e:	6078      	str	r0, [r7, #4]
   1b190:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b192:	687b      	ldr	r3, [r7, #4]
   1b194:	683a      	ldr	r2, [r7, #0]
   1b196:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b198:	46c0      	nop			; (mov r8, r8)
   1b19a:	46bd      	mov	sp, r7
   1b19c:	b002      	add	sp, #8
   1b19e:	bd80      	pop	{r7, pc}

0001b1a0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b1a0:	b580      	push	{r7, lr}
   1b1a2:	b082      	sub	sp, #8
   1b1a4:	af00      	add	r7, sp, #0
   1b1a6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b1a8:	687b      	ldr	r3, [r7, #4]
   1b1aa:	2250      	movs	r2, #80	; 0x50
   1b1ac:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b1ae:	0018      	movs	r0, r3
   1b1b0:	46bd      	mov	sp, r7
   1b1b2:	b002      	add	sp, #8
   1b1b4:	bd80      	pop	{r7, pc}

0001b1b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b1b6:	b580      	push	{r7, lr}
   1b1b8:	b084      	sub	sp, #16
   1b1ba:	af00      	add	r7, sp, #0
   1b1bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b1be:	687b      	ldr	r3, [r7, #4]
   1b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b1c2:	2b00      	cmp	r3, #0
   1b1c4:	d006      	beq.n	1b1d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b1c6:	687b      	ldr	r3, [r7, #4]
   1b1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b1ca:	681b      	ldr	r3, [r3, #0]
   1b1cc:	2205      	movs	r2, #5
   1b1ce:	1ad3      	subs	r3, r2, r3
   1b1d0:	60fb      	str	r3, [r7, #12]
   1b1d2:	e001      	b.n	1b1d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b1d4:	2300      	movs	r3, #0
   1b1d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b1d8:	68fb      	ldr	r3, [r7, #12]
	}
   1b1da:	0018      	movs	r0, r3
   1b1dc:	46bd      	mov	sp, r7
   1b1de:	b004      	add	sp, #16
   1b1e0:	bd80      	pop	{r7, pc}
	...

0001b1e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b1e4:	b580      	push	{r7, lr}
   1b1e6:	b086      	sub	sp, #24
   1b1e8:	af00      	add	r7, sp, #0
   1b1ea:	60f8      	str	r0, [r7, #12]
   1b1ec:	60b9      	str	r1, [r7, #8]
   1b1ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b1f0:	2300      	movs	r3, #0
   1b1f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b1f4:	68fb      	ldr	r3, [r7, #12]
   1b1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b1f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b1fa:	68fb      	ldr	r3, [r7, #12]
   1b1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b1fe:	2b00      	cmp	r3, #0
   1b200:	d10e      	bne.n	1b220 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b202:	68fb      	ldr	r3, [r7, #12]
   1b204:	681b      	ldr	r3, [r3, #0]
   1b206:	2b00      	cmp	r3, #0
   1b208:	d14e      	bne.n	1b2a8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b20a:	68fb      	ldr	r3, [r7, #12]
   1b20c:	685b      	ldr	r3, [r3, #4]
   1b20e:	0018      	movs	r0, r3
   1b210:	4b2a      	ldr	r3, [pc, #168]	; (1b2bc <prvCopyDataToQueue+0xd8>)
   1b212:	4798      	blx	r3
   1b214:	0003      	movs	r3, r0
   1b216:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b218:	68fb      	ldr	r3, [r7, #12]
   1b21a:	2200      	movs	r2, #0
   1b21c:	605a      	str	r2, [r3, #4]
   1b21e:	e043      	b.n	1b2a8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b220:	687b      	ldr	r3, [r7, #4]
   1b222:	2b00      	cmp	r3, #0
   1b224:	d119      	bne.n	1b25a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b226:	68fb      	ldr	r3, [r7, #12]
   1b228:	6898      	ldr	r0, [r3, #8]
   1b22a:	68fb      	ldr	r3, [r7, #12]
   1b22c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b22e:	68bb      	ldr	r3, [r7, #8]
   1b230:	0019      	movs	r1, r3
   1b232:	4b23      	ldr	r3, [pc, #140]	; (1b2c0 <prvCopyDataToQueue+0xdc>)
   1b234:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b236:	68fb      	ldr	r3, [r7, #12]
   1b238:	689a      	ldr	r2, [r3, #8]
   1b23a:	68fb      	ldr	r3, [r7, #12]
   1b23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b23e:	18d2      	adds	r2, r2, r3
   1b240:	68fb      	ldr	r3, [r7, #12]
   1b242:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b244:	68fb      	ldr	r3, [r7, #12]
   1b246:	689a      	ldr	r2, [r3, #8]
   1b248:	68fb      	ldr	r3, [r7, #12]
   1b24a:	685b      	ldr	r3, [r3, #4]
   1b24c:	429a      	cmp	r2, r3
   1b24e:	d32b      	bcc.n	1b2a8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b250:	68fb      	ldr	r3, [r7, #12]
   1b252:	681a      	ldr	r2, [r3, #0]
   1b254:	68fb      	ldr	r3, [r7, #12]
   1b256:	609a      	str	r2, [r3, #8]
   1b258:	e026      	b.n	1b2a8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b25a:	68fb      	ldr	r3, [r7, #12]
   1b25c:	68d8      	ldr	r0, [r3, #12]
   1b25e:	68fb      	ldr	r3, [r7, #12]
   1b260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b262:	68bb      	ldr	r3, [r7, #8]
   1b264:	0019      	movs	r1, r3
   1b266:	4b16      	ldr	r3, [pc, #88]	; (1b2c0 <prvCopyDataToQueue+0xdc>)
   1b268:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1b26a:	68fb      	ldr	r3, [r7, #12]
   1b26c:	68da      	ldr	r2, [r3, #12]
   1b26e:	68fb      	ldr	r3, [r7, #12]
   1b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b272:	425b      	negs	r3, r3
   1b274:	18d2      	adds	r2, r2, r3
   1b276:	68fb      	ldr	r3, [r7, #12]
   1b278:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b27a:	68fb      	ldr	r3, [r7, #12]
   1b27c:	68da      	ldr	r2, [r3, #12]
   1b27e:	68fb      	ldr	r3, [r7, #12]
   1b280:	681b      	ldr	r3, [r3, #0]
   1b282:	429a      	cmp	r2, r3
   1b284:	d207      	bcs.n	1b296 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1b286:	68fb      	ldr	r3, [r7, #12]
   1b288:	685a      	ldr	r2, [r3, #4]
   1b28a:	68fb      	ldr	r3, [r7, #12]
   1b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b28e:	425b      	negs	r3, r3
   1b290:	18d2      	adds	r2, r2, r3
   1b292:	68fb      	ldr	r3, [r7, #12]
   1b294:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b296:	687b      	ldr	r3, [r7, #4]
   1b298:	2b02      	cmp	r3, #2
   1b29a:	d105      	bne.n	1b2a8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b29c:	693b      	ldr	r3, [r7, #16]
   1b29e:	2b00      	cmp	r3, #0
   1b2a0:	d002      	beq.n	1b2a8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b2a2:	693b      	ldr	r3, [r7, #16]
   1b2a4:	3b01      	subs	r3, #1
   1b2a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b2a8:	693b      	ldr	r3, [r7, #16]
   1b2aa:	1c5a      	adds	r2, r3, #1
   1b2ac:	68fb      	ldr	r3, [r7, #12]
   1b2ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b2b0:	697b      	ldr	r3, [r7, #20]
}
   1b2b2:	0018      	movs	r0, r3
   1b2b4:	46bd      	mov	sp, r7
   1b2b6:	b006      	add	sp, #24
   1b2b8:	bd80      	pop	{r7, pc}
   1b2ba:	46c0      	nop			; (mov r8, r8)
   1b2bc:	0001c901 	.word	0x0001c901
   1b2c0:	000342e1 	.word	0x000342e1

0001b2c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b2c4:	b580      	push	{r7, lr}
   1b2c6:	b082      	sub	sp, #8
   1b2c8:	af00      	add	r7, sp, #0
   1b2ca:	6078      	str	r0, [r7, #4]
   1b2cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b2ce:	687b      	ldr	r3, [r7, #4]
   1b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d018      	beq.n	1b308 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1b2d6:	687b      	ldr	r3, [r7, #4]
   1b2d8:	68da      	ldr	r2, [r3, #12]
   1b2da:	687b      	ldr	r3, [r7, #4]
   1b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b2de:	18d2      	adds	r2, r2, r3
   1b2e0:	687b      	ldr	r3, [r7, #4]
   1b2e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b2e4:	687b      	ldr	r3, [r7, #4]
   1b2e6:	68da      	ldr	r2, [r3, #12]
   1b2e8:	687b      	ldr	r3, [r7, #4]
   1b2ea:	685b      	ldr	r3, [r3, #4]
   1b2ec:	429a      	cmp	r2, r3
   1b2ee:	d303      	bcc.n	1b2f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1b2f0:	687b      	ldr	r3, [r7, #4]
   1b2f2:	681a      	ldr	r2, [r3, #0]
   1b2f4:	687b      	ldr	r3, [r7, #4]
   1b2f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1b2f8:	687b      	ldr	r3, [r7, #4]
   1b2fa:	68d9      	ldr	r1, [r3, #12]
   1b2fc:	687b      	ldr	r3, [r7, #4]
   1b2fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b300:	683b      	ldr	r3, [r7, #0]
   1b302:	0018      	movs	r0, r3
   1b304:	4b02      	ldr	r3, [pc, #8]	; (1b310 <prvCopyDataFromQueue+0x4c>)
   1b306:	4798      	blx	r3
	}
}
   1b308:	46c0      	nop			; (mov r8, r8)
   1b30a:	46bd      	mov	sp, r7
   1b30c:	b002      	add	sp, #8
   1b30e:	bd80      	pop	{r7, pc}
   1b310:	000342e1 	.word	0x000342e1

0001b314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b314:	b580      	push	{r7, lr}
   1b316:	b084      	sub	sp, #16
   1b318:	af00      	add	r7, sp, #0
   1b31a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b31c:	4b34      	ldr	r3, [pc, #208]	; (1b3f0 <prvUnlockQueue+0xdc>)
   1b31e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b320:	230f      	movs	r3, #15
   1b322:	18fb      	adds	r3, r7, r3
   1b324:	687a      	ldr	r2, [r7, #4]
   1b326:	2145      	movs	r1, #69	; 0x45
   1b328:	5c52      	ldrb	r2, [r2, r1]
   1b32a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b32c:	e022      	b.n	1b374 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1b32e:	687b      	ldr	r3, [r7, #4]
   1b330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b332:	2b00      	cmp	r3, #0
   1b334:	d009      	beq.n	1b34a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b336:	687b      	ldr	r3, [r7, #4]
   1b338:	2100      	movs	r1, #0
   1b33a:	0018      	movs	r0, r3
   1b33c:	4b2d      	ldr	r3, [pc, #180]	; (1b3f4 <prvUnlockQueue+0xe0>)
   1b33e:	4798      	blx	r3
   1b340:	1e03      	subs	r3, r0, #0
   1b342:	d00f      	beq.n	1b364 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1b344:	4b2c      	ldr	r3, [pc, #176]	; (1b3f8 <prvUnlockQueue+0xe4>)
   1b346:	4798      	blx	r3
   1b348:	e00c      	b.n	1b364 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b34a:	687b      	ldr	r3, [r7, #4]
   1b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b34e:	2b00      	cmp	r3, #0
   1b350:	d017      	beq.n	1b382 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b352:	687b      	ldr	r3, [r7, #4]
   1b354:	3324      	adds	r3, #36	; 0x24
   1b356:	0018      	movs	r0, r3
   1b358:	4b28      	ldr	r3, [pc, #160]	; (1b3fc <prvUnlockQueue+0xe8>)
   1b35a:	4798      	blx	r3
   1b35c:	1e03      	subs	r3, r0, #0
   1b35e:	d001      	beq.n	1b364 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1b360:	4b25      	ldr	r3, [pc, #148]	; (1b3f8 <prvUnlockQueue+0xe4>)
   1b362:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b364:	230f      	movs	r3, #15
   1b366:	18fb      	adds	r3, r7, r3
   1b368:	781b      	ldrb	r3, [r3, #0]
   1b36a:	3b01      	subs	r3, #1
   1b36c:	b2da      	uxtb	r2, r3
   1b36e:	230f      	movs	r3, #15
   1b370:	18fb      	adds	r3, r7, r3
   1b372:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b374:	230f      	movs	r3, #15
   1b376:	18fb      	adds	r3, r7, r3
   1b378:	781b      	ldrb	r3, [r3, #0]
   1b37a:	b25b      	sxtb	r3, r3
   1b37c:	2b00      	cmp	r3, #0
   1b37e:	dcd6      	bgt.n	1b32e <prvUnlockQueue+0x1a>
   1b380:	e000      	b.n	1b384 <prvUnlockQueue+0x70>
						break;
   1b382:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1b384:	687b      	ldr	r3, [r7, #4]
   1b386:	2245      	movs	r2, #69	; 0x45
   1b388:	21ff      	movs	r1, #255	; 0xff
   1b38a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b38c:	4b1c      	ldr	r3, [pc, #112]	; (1b400 <prvUnlockQueue+0xec>)
   1b38e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1b390:	4b17      	ldr	r3, [pc, #92]	; (1b3f0 <prvUnlockQueue+0xdc>)
   1b392:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1b394:	230e      	movs	r3, #14
   1b396:	18fb      	adds	r3, r7, r3
   1b398:	687a      	ldr	r2, [r7, #4]
   1b39a:	2144      	movs	r1, #68	; 0x44
   1b39c:	5c52      	ldrb	r2, [r2, r1]
   1b39e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b3a0:	e014      	b.n	1b3cc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b3a2:	687b      	ldr	r3, [r7, #4]
   1b3a4:	691b      	ldr	r3, [r3, #16]
   1b3a6:	2b00      	cmp	r3, #0
   1b3a8:	d017      	beq.n	1b3da <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b3aa:	687b      	ldr	r3, [r7, #4]
   1b3ac:	3310      	adds	r3, #16
   1b3ae:	0018      	movs	r0, r3
   1b3b0:	4b12      	ldr	r3, [pc, #72]	; (1b3fc <prvUnlockQueue+0xe8>)
   1b3b2:	4798      	blx	r3
   1b3b4:	1e03      	subs	r3, r0, #0
   1b3b6:	d001      	beq.n	1b3bc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1b3b8:	4b0f      	ldr	r3, [pc, #60]	; (1b3f8 <prvUnlockQueue+0xe4>)
   1b3ba:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1b3bc:	230e      	movs	r3, #14
   1b3be:	18fb      	adds	r3, r7, r3
   1b3c0:	781b      	ldrb	r3, [r3, #0]
   1b3c2:	3b01      	subs	r3, #1
   1b3c4:	b2da      	uxtb	r2, r3
   1b3c6:	230e      	movs	r3, #14
   1b3c8:	18fb      	adds	r3, r7, r3
   1b3ca:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b3cc:	230e      	movs	r3, #14
   1b3ce:	18fb      	adds	r3, r7, r3
   1b3d0:	781b      	ldrb	r3, [r3, #0]
   1b3d2:	b25b      	sxtb	r3, r3
   1b3d4:	2b00      	cmp	r3, #0
   1b3d6:	dce4      	bgt.n	1b3a2 <prvUnlockQueue+0x8e>
   1b3d8:	e000      	b.n	1b3dc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1b3da:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1b3dc:	687b      	ldr	r3, [r7, #4]
   1b3de:	2244      	movs	r2, #68	; 0x44
   1b3e0:	21ff      	movs	r1, #255	; 0xff
   1b3e2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b3e4:	4b06      	ldr	r3, [pc, #24]	; (1b400 <prvUnlockQueue+0xec>)
   1b3e6:	4798      	blx	r3
}
   1b3e8:	46c0      	nop			; (mov r8, r8)
   1b3ea:	46bd      	mov	sp, r7
   1b3ec:	b004      	add	sp, #16
   1b3ee:	bd80      	pop	{r7, pc}
   1b3f0:	00019a19 	.word	0x00019a19
   1b3f4:	0001b4e9 	.word	0x0001b4e9
   1b3f8:	0001c4bd 	.word	0x0001c4bd
   1b3fc:	0001c2a9 	.word	0x0001c2a9
   1b400:	00019a3d 	.word	0x00019a3d

0001b404 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1b404:	b580      	push	{r7, lr}
   1b406:	b084      	sub	sp, #16
   1b408:	af00      	add	r7, sp, #0
   1b40a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b40c:	4b08      	ldr	r3, [pc, #32]	; (1b430 <prvIsQueueEmpty+0x2c>)
   1b40e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1b410:	687b      	ldr	r3, [r7, #4]
   1b412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b414:	2b00      	cmp	r3, #0
   1b416:	d102      	bne.n	1b41e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1b418:	2301      	movs	r3, #1
   1b41a:	60fb      	str	r3, [r7, #12]
   1b41c:	e001      	b.n	1b422 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1b41e:	2300      	movs	r3, #0
   1b420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b422:	4b04      	ldr	r3, [pc, #16]	; (1b434 <prvIsQueueEmpty+0x30>)
   1b424:	4798      	blx	r3

	return xReturn;
   1b426:	68fb      	ldr	r3, [r7, #12]
}
   1b428:	0018      	movs	r0, r3
   1b42a:	46bd      	mov	sp, r7
   1b42c:	b004      	add	sp, #16
   1b42e:	bd80      	pop	{r7, pc}
   1b430:	00019a19 	.word	0x00019a19
   1b434:	00019a3d 	.word	0x00019a3d

0001b438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1b438:	b580      	push	{r7, lr}
   1b43a:	b084      	sub	sp, #16
   1b43c:	af00      	add	r7, sp, #0
   1b43e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b440:	4b09      	ldr	r3, [pc, #36]	; (1b468 <prvIsQueueFull+0x30>)
   1b442:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1b444:	687b      	ldr	r3, [r7, #4]
   1b446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b448:	687b      	ldr	r3, [r7, #4]
   1b44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b44c:	429a      	cmp	r2, r3
   1b44e:	d102      	bne.n	1b456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1b450:	2301      	movs	r3, #1
   1b452:	60fb      	str	r3, [r7, #12]
   1b454:	e001      	b.n	1b45a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1b456:	2300      	movs	r3, #0
   1b458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b45a:	4b04      	ldr	r3, [pc, #16]	; (1b46c <prvIsQueueFull+0x34>)
   1b45c:	4798      	blx	r3

	return xReturn;
   1b45e:	68fb      	ldr	r3, [r7, #12]
}
   1b460:	0018      	movs	r0, r3
   1b462:	46bd      	mov	sp, r7
   1b464:	b004      	add	sp, #16
   1b466:	bd80      	pop	{r7, pc}
   1b468:	00019a19 	.word	0x00019a19
   1b46c:	00019a3d 	.word	0x00019a3d

0001b470 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b470:	b580      	push	{r7, lr}
   1b472:	b086      	sub	sp, #24
   1b474:	af00      	add	r7, sp, #0
   1b476:	60f8      	str	r0, [r7, #12]
   1b478:	60b9      	str	r1, [r7, #8]
   1b47a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b47c:	68fb      	ldr	r3, [r7, #12]
   1b47e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1b480:	4b15      	ldr	r3, [pc, #84]	; (1b4d8 <vQueueWaitForMessageRestricted+0x68>)
   1b482:	4798      	blx	r3
   1b484:	697b      	ldr	r3, [r7, #20]
   1b486:	2244      	movs	r2, #68	; 0x44
   1b488:	5c9b      	ldrb	r3, [r3, r2]
   1b48a:	b25b      	sxtb	r3, r3
   1b48c:	3301      	adds	r3, #1
   1b48e:	d103      	bne.n	1b498 <vQueueWaitForMessageRestricted+0x28>
   1b490:	697b      	ldr	r3, [r7, #20]
   1b492:	2244      	movs	r2, #68	; 0x44
   1b494:	2100      	movs	r1, #0
   1b496:	5499      	strb	r1, [r3, r2]
   1b498:	697b      	ldr	r3, [r7, #20]
   1b49a:	2245      	movs	r2, #69	; 0x45
   1b49c:	5c9b      	ldrb	r3, [r3, r2]
   1b49e:	b25b      	sxtb	r3, r3
   1b4a0:	3301      	adds	r3, #1
   1b4a2:	d103      	bne.n	1b4ac <vQueueWaitForMessageRestricted+0x3c>
   1b4a4:	697b      	ldr	r3, [r7, #20]
   1b4a6:	2245      	movs	r2, #69	; 0x45
   1b4a8:	2100      	movs	r1, #0
   1b4aa:	5499      	strb	r1, [r3, r2]
   1b4ac:	4b0b      	ldr	r3, [pc, #44]	; (1b4dc <vQueueWaitForMessageRestricted+0x6c>)
   1b4ae:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1b4b0:	697b      	ldr	r3, [r7, #20]
   1b4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b4b4:	2b00      	cmp	r3, #0
   1b4b6:	d106      	bne.n	1b4c6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1b4b8:	697b      	ldr	r3, [r7, #20]
   1b4ba:	3324      	adds	r3, #36	; 0x24
   1b4bc:	687a      	ldr	r2, [r7, #4]
   1b4be:	68b9      	ldr	r1, [r7, #8]
   1b4c0:	0018      	movs	r0, r3
   1b4c2:	4b07      	ldr	r3, [pc, #28]	; (1b4e0 <vQueueWaitForMessageRestricted+0x70>)
   1b4c4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b4c6:	697b      	ldr	r3, [r7, #20]
   1b4c8:	0018      	movs	r0, r3
   1b4ca:	4b06      	ldr	r3, [pc, #24]	; (1b4e4 <vQueueWaitForMessageRestricted+0x74>)
   1b4cc:	4798      	blx	r3
	}
   1b4ce:	46c0      	nop			; (mov r8, r8)
   1b4d0:	46bd      	mov	sp, r7
   1b4d2:	b006      	add	sp, #24
   1b4d4:	bd80      	pop	{r7, pc}
   1b4d6:	46c0      	nop			; (mov r8, r8)
   1b4d8:	00019a19 	.word	0x00019a19
   1b4dc:	00019a3d 	.word	0x00019a3d
   1b4e0:	0001c1c9 	.word	0x0001c1c9
   1b4e4:	0001b315 	.word	0x0001b315

0001b4e8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1b4e8:	b5b0      	push	{r4, r5, r7, lr}
   1b4ea:	b086      	sub	sp, #24
   1b4ec:	af00      	add	r7, sp, #0
   1b4ee:	6078      	str	r0, [r7, #4]
   1b4f0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1b4f2:	687b      	ldr	r3, [r7, #4]
   1b4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b4f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1b4f8:	2300      	movs	r3, #0
   1b4fa:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1b4fc:	693b      	ldr	r3, [r7, #16]
   1b4fe:	2b00      	cmp	r3, #0
   1b500:	d101      	bne.n	1b506 <prvNotifyQueueSetContainer+0x1e>
   1b502:	b672      	cpsid	i
   1b504:	e7fe      	b.n	1b504 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1b506:	693b      	ldr	r3, [r7, #16]
   1b508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b50a:	693b      	ldr	r3, [r7, #16]
   1b50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b50e:	429a      	cmp	r2, r3
   1b510:	d301      	bcc.n	1b516 <prvNotifyQueueSetContainer+0x2e>
   1b512:	b672      	cpsid	i
   1b514:	e7fe      	b.n	1b514 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1b516:	693b      	ldr	r3, [r7, #16]
   1b518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b51a:	693b      	ldr	r3, [r7, #16]
   1b51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b51e:	429a      	cmp	r2, r3
   1b520:	d300      	bcc.n	1b524 <prvNotifyQueueSetContainer+0x3c>
   1b522:	e08b      	b.n	1b63c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1b524:	230f      	movs	r3, #15
   1b526:	18fb      	adds	r3, r7, r3
   1b528:	693a      	ldr	r2, [r7, #16]
   1b52a:	2145      	movs	r1, #69	; 0x45
   1b52c:	5c52      	ldrb	r2, [r2, r1]
   1b52e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1b530:	4b45      	ldr	r3, [pc, #276]	; (1b648 <prvNotifyQueueSetContainer+0x160>)
   1b532:	4798      	blx	r3
   1b534:	0003      	movs	r3, r0
   1b536:	0018      	movs	r0, r3
   1b538:	4b44      	ldr	r3, [pc, #272]	; (1b64c <prvNotifyQueueSetContainer+0x164>)
   1b53a:	4798      	blx	r3
   1b53c:	0003      	movs	r3, r0
   1b53e:	001a      	movs	r2, r3
   1b540:	4b43      	ldr	r3, [pc, #268]	; (1b650 <prvNotifyQueueSetContainer+0x168>)
   1b542:	881b      	ldrh	r3, [r3, #0]
   1b544:	4013      	ands	r3, r2
   1b546:	b29b      	uxth	r3, r3
   1b548:	2b00      	cmp	r3, #0
   1b54a:	d02e      	beq.n	1b5aa <prvNotifyQueueSetContainer+0xc2>
   1b54c:	693b      	ldr	r3, [r7, #16]
   1b54e:	0018      	movs	r0, r3
   1b550:	4b40      	ldr	r3, [pc, #256]	; (1b654 <prvNotifyQueueSetContainer+0x16c>)
   1b552:	4798      	blx	r3
   1b554:	0003      	movs	r3, r0
   1b556:	001a      	movs	r2, r3
   1b558:	4b3d      	ldr	r3, [pc, #244]	; (1b650 <prvNotifyQueueSetContainer+0x168>)
   1b55a:	881b      	ldrh	r3, [r3, #0]
   1b55c:	4013      	ands	r3, r2
   1b55e:	b29b      	uxth	r3, r3
   1b560:	2b00      	cmp	r3, #0
   1b562:	d022      	beq.n	1b5aa <prvNotifyQueueSetContainer+0xc2>
   1b564:	683b      	ldr	r3, [r7, #0]
   1b566:	2b00      	cmp	r3, #0
   1b568:	d10b      	bne.n	1b582 <prvNotifyQueueSetContainer+0x9a>
   1b56a:	693b      	ldr	r3, [r7, #16]
   1b56c:	0018      	movs	r0, r3
   1b56e:	4b3a      	ldr	r3, [pc, #232]	; (1b658 <prvNotifyQueueSetContainer+0x170>)
   1b570:	4798      	blx	r3
   1b572:	0003      	movs	r3, r0
   1b574:	001a      	movs	r2, r3
   1b576:	4b39      	ldr	r3, [pc, #228]	; (1b65c <prvNotifyQueueSetContainer+0x174>)
   1b578:	5c9b      	ldrb	r3, [r3, r2]
   1b57a:	3320      	adds	r3, #32
   1b57c:	b2db      	uxtb	r3, r3
   1b57e:	001d      	movs	r5, r3
   1b580:	e000      	b.n	1b584 <prvNotifyQueueSetContainer+0x9c>
   1b582:	2525      	movs	r5, #37	; 0x25
   1b584:	693b      	ldr	r3, [r7, #16]
   1b586:	0018      	movs	r0, r3
   1b588:	4b33      	ldr	r3, [pc, #204]	; (1b658 <prvNotifyQueueSetContainer+0x170>)
   1b58a:	4798      	blx	r3
   1b58c:	0003      	movs	r3, r0
   1b58e:	001a      	movs	r2, r3
   1b590:	4b32      	ldr	r3, [pc, #200]	; (1b65c <prvNotifyQueueSetContainer+0x174>)
   1b592:	5c9c      	ldrb	r4, [r3, r2]
   1b594:	693b      	ldr	r3, [r7, #16]
   1b596:	0018      	movs	r0, r3
   1b598:	4b31      	ldr	r3, [pc, #196]	; (1b660 <prvNotifyQueueSetContainer+0x178>)
   1b59a:	4798      	blx	r3
   1b59c:	0003      	movs	r3, r0
   1b59e:	b2db      	uxtb	r3, r3
   1b5a0:	001a      	movs	r2, r3
   1b5a2:	0021      	movs	r1, r4
   1b5a4:	0028      	movs	r0, r5
   1b5a6:	4b2f      	ldr	r3, [pc, #188]	; (1b664 <prvNotifyQueueSetContainer+0x17c>)
   1b5a8:	4798      	blx	r3
   1b5aa:	693b      	ldr	r3, [r7, #16]
   1b5ac:	0018      	movs	r0, r3
   1b5ae:	4b2a      	ldr	r3, [pc, #168]	; (1b658 <prvNotifyQueueSetContainer+0x170>)
   1b5b0:	4798      	blx	r3
   1b5b2:	0003      	movs	r3, r0
   1b5b4:	001a      	movs	r2, r3
   1b5b6:	4b29      	ldr	r3, [pc, #164]	; (1b65c <prvNotifyQueueSetContainer+0x174>)
   1b5b8:	5c9c      	ldrb	r4, [r3, r2]
   1b5ba:	693b      	ldr	r3, [r7, #16]
   1b5bc:	0018      	movs	r0, r3
   1b5be:	4b28      	ldr	r3, [pc, #160]	; (1b660 <prvNotifyQueueSetContainer+0x178>)
   1b5c0:	4798      	blx	r3
   1b5c2:	0003      	movs	r3, r0
   1b5c4:	b2dd      	uxtb	r5, r3
   1b5c6:	693b      	ldr	r3, [r7, #16]
   1b5c8:	0018      	movs	r0, r3
   1b5ca:	4b23      	ldr	r3, [pc, #140]	; (1b658 <prvNotifyQueueSetContainer+0x170>)
   1b5cc:	4798      	blx	r3
   1b5ce:	0003      	movs	r3, r0
   1b5d0:	001a      	movs	r2, r3
   1b5d2:	4b22      	ldr	r3, [pc, #136]	; (1b65c <prvNotifyQueueSetContainer+0x174>)
   1b5d4:	5c9b      	ldrb	r3, [r3, r2]
   1b5d6:	2b02      	cmp	r3, #2
   1b5d8:	d005      	beq.n	1b5e6 <prvNotifyQueueSetContainer+0xfe>
   1b5da:	693b      	ldr	r3, [r7, #16]
   1b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b5de:	b2db      	uxtb	r3, r3
   1b5e0:	3301      	adds	r3, #1
   1b5e2:	b2db      	uxtb	r3, r3
   1b5e4:	e000      	b.n	1b5e8 <prvNotifyQueueSetContainer+0x100>
   1b5e6:	2300      	movs	r3, #0
   1b5e8:	001a      	movs	r2, r3
   1b5ea:	0029      	movs	r1, r5
   1b5ec:	0020      	movs	r0, r4
   1b5ee:	4b1e      	ldr	r3, [pc, #120]	; (1b668 <prvNotifyQueueSetContainer+0x180>)
   1b5f0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1b5f2:	683a      	ldr	r2, [r7, #0]
   1b5f4:	1d39      	adds	r1, r7, #4
   1b5f6:	693b      	ldr	r3, [r7, #16]
   1b5f8:	0018      	movs	r0, r3
   1b5fa:	4b1c      	ldr	r3, [pc, #112]	; (1b66c <prvNotifyQueueSetContainer+0x184>)
   1b5fc:	4798      	blx	r3
   1b5fe:	0003      	movs	r3, r0
   1b600:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1b602:	230f      	movs	r3, #15
   1b604:	18fb      	adds	r3, r7, r3
   1b606:	781b      	ldrb	r3, [r3, #0]
   1b608:	b25b      	sxtb	r3, r3
   1b60a:	3301      	adds	r3, #1
   1b60c:	d10d      	bne.n	1b62a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1b60e:	693b      	ldr	r3, [r7, #16]
   1b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b612:	2b00      	cmp	r3, #0
   1b614:	d012      	beq.n	1b63c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1b616:	693b      	ldr	r3, [r7, #16]
   1b618:	3324      	adds	r3, #36	; 0x24
   1b61a:	0018      	movs	r0, r3
   1b61c:	4b14      	ldr	r3, [pc, #80]	; (1b670 <prvNotifyQueueSetContainer+0x188>)
   1b61e:	4798      	blx	r3
   1b620:	1e03      	subs	r3, r0, #0
   1b622:	d00b      	beq.n	1b63c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1b624:	2301      	movs	r3, #1
   1b626:	617b      	str	r3, [r7, #20]
   1b628:	e008      	b.n	1b63c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b62a:	230f      	movs	r3, #15
   1b62c:	18fb      	adds	r3, r7, r3
   1b62e:	781b      	ldrb	r3, [r3, #0]
   1b630:	3301      	adds	r3, #1
   1b632:	b2db      	uxtb	r3, r3
   1b634:	b259      	sxtb	r1, r3
   1b636:	693b      	ldr	r3, [r7, #16]
   1b638:	2245      	movs	r2, #69	; 0x45
   1b63a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b63c:	697b      	ldr	r3, [r7, #20]
	}
   1b63e:	0018      	movs	r0, r3
   1b640:	46bd      	mov	sp, r7
   1b642:	b006      	add	sp, #24
   1b644:	bdb0      	pop	{r4, r5, r7, pc}
   1b646:	46c0      	nop			; (mov r8, r8)
   1b648:	00017cb1 	.word	0x00017cb1
   1b64c:	00017a15 	.word	0x00017a15
   1b650:	20000108 	.word	0x20000108
   1b654:	00017ad5 	.word	0x00017ad5
   1b658:	000179d5 	.word	0x000179d5
   1b65c:	200000fc 	.word	0x200000fc
   1b660:	00017ab5 	.word	0x00017ab5
   1b664:	0001840d 	.word	0x0001840d
   1b668:	00018a69 	.word	0x00018a69
   1b66c:	0001b1e5 	.word	0x0001b1e5
   1b670:	0001c2a9 	.word	0x0001c2a9

0001b674 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1b674:	b590      	push	{r4, r7, lr}
   1b676:	b08d      	sub	sp, #52	; 0x34
   1b678:	af04      	add	r7, sp, #16
   1b67a:	60f8      	str	r0, [r7, #12]
   1b67c:	60b9      	str	r1, [r7, #8]
   1b67e:	603b      	str	r3, [r7, #0]
   1b680:	1dbb      	adds	r3, r7, #6
   1b682:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b684:	1dbb      	adds	r3, r7, #6
   1b686:	881b      	ldrh	r3, [r3, #0]
   1b688:	009b      	lsls	r3, r3, #2
   1b68a:	0018      	movs	r0, r3
   1b68c:	4b1d      	ldr	r3, [pc, #116]	; (1b704 <xTaskCreate+0x90>)
   1b68e:	4798      	blx	r3
   1b690:	0003      	movs	r3, r0
   1b692:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1b694:	697b      	ldr	r3, [r7, #20]
   1b696:	2b00      	cmp	r3, #0
   1b698:	d010      	beq.n	1b6bc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1b69a:	2054      	movs	r0, #84	; 0x54
   1b69c:	4b19      	ldr	r3, [pc, #100]	; (1b704 <xTaskCreate+0x90>)
   1b69e:	4798      	blx	r3
   1b6a0:	0003      	movs	r3, r0
   1b6a2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1b6a4:	69fb      	ldr	r3, [r7, #28]
   1b6a6:	2b00      	cmp	r3, #0
   1b6a8:	d003      	beq.n	1b6b2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1b6aa:	69fb      	ldr	r3, [r7, #28]
   1b6ac:	697a      	ldr	r2, [r7, #20]
   1b6ae:	631a      	str	r2, [r3, #48]	; 0x30
   1b6b0:	e006      	b.n	1b6c0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1b6b2:	697b      	ldr	r3, [r7, #20]
   1b6b4:	0018      	movs	r0, r3
   1b6b6:	4b14      	ldr	r3, [pc, #80]	; (1b708 <xTaskCreate+0x94>)
   1b6b8:	4798      	blx	r3
   1b6ba:	e001      	b.n	1b6c0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1b6bc:	2300      	movs	r3, #0
   1b6be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1b6c0:	69fb      	ldr	r3, [r7, #28]
   1b6c2:	2b00      	cmp	r3, #0
   1b6c4:	d016      	beq.n	1b6f4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1b6c6:	1dbb      	adds	r3, r7, #6
   1b6c8:	881a      	ldrh	r2, [r3, #0]
   1b6ca:	683c      	ldr	r4, [r7, #0]
   1b6cc:	68b9      	ldr	r1, [r7, #8]
   1b6ce:	68f8      	ldr	r0, [r7, #12]
   1b6d0:	2300      	movs	r3, #0
   1b6d2:	9303      	str	r3, [sp, #12]
   1b6d4:	69fb      	ldr	r3, [r7, #28]
   1b6d6:	9302      	str	r3, [sp, #8]
   1b6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b6da:	9301      	str	r3, [sp, #4]
   1b6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b6de:	9300      	str	r3, [sp, #0]
   1b6e0:	0023      	movs	r3, r4
   1b6e2:	4c0a      	ldr	r4, [pc, #40]	; (1b70c <xTaskCreate+0x98>)
   1b6e4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1b6e6:	69fb      	ldr	r3, [r7, #28]
   1b6e8:	0018      	movs	r0, r3
   1b6ea:	4b09      	ldr	r3, [pc, #36]	; (1b710 <xTaskCreate+0x9c>)
   1b6ec:	4798      	blx	r3
			xReturn = pdPASS;
   1b6ee:	2301      	movs	r3, #1
   1b6f0:	61bb      	str	r3, [r7, #24]
   1b6f2:	e002      	b.n	1b6fa <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1b6f4:	2301      	movs	r3, #1
   1b6f6:	425b      	negs	r3, r3
   1b6f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1b6fa:	69bb      	ldr	r3, [r7, #24]
	}
   1b6fc:	0018      	movs	r0, r3
   1b6fe:	46bd      	mov	sp, r7
   1b700:	b009      	add	sp, #36	; 0x24
   1b702:	bd90      	pop	{r4, r7, pc}
   1b704:	00019b51 	.word	0x00019b51
   1b708:	00019c15 	.word	0x00019c15
   1b70c:	0001b715 	.word	0x0001b715
   1b710:	0001b825 	.word	0x0001b825

0001b714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1b714:	b580      	push	{r7, lr}
   1b716:	b086      	sub	sp, #24
   1b718:	af00      	add	r7, sp, #0
   1b71a:	60f8      	str	r0, [r7, #12]
   1b71c:	60b9      	str	r1, [r7, #8]
   1b71e:	607a      	str	r2, [r7, #4]
   1b720:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b724:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b726:	687b      	ldr	r3, [r7, #4]
   1b728:	009b      	lsls	r3, r3, #2
   1b72a:	001a      	movs	r2, r3
   1b72c:	21a5      	movs	r1, #165	; 0xa5
   1b72e:	4b39      	ldr	r3, [pc, #228]	; (1b814 <prvInitialiseNewTask+0x100>)
   1b730:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b736:	687b      	ldr	r3, [r7, #4]
   1b738:	4937      	ldr	r1, [pc, #220]	; (1b818 <prvInitialiseNewTask+0x104>)
   1b73a:	468c      	mov	ip, r1
   1b73c:	4463      	add	r3, ip
   1b73e:	009b      	lsls	r3, r3, #2
   1b740:	18d3      	adds	r3, r2, r3
   1b742:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1b744:	693b      	ldr	r3, [r7, #16]
   1b746:	2207      	movs	r2, #7
   1b748:	4393      	bics	r3, r2
   1b74a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1b74c:	693b      	ldr	r3, [r7, #16]
   1b74e:	2207      	movs	r2, #7
   1b750:	4013      	ands	r3, r2
   1b752:	d001      	beq.n	1b758 <prvInitialiseNewTask+0x44>
   1b754:	b672      	cpsid	i
   1b756:	e7fe      	b.n	1b756 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b758:	2300      	movs	r3, #0
   1b75a:	617b      	str	r3, [r7, #20]
   1b75c:	e013      	b.n	1b786 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1b75e:	68ba      	ldr	r2, [r7, #8]
   1b760:	697b      	ldr	r3, [r7, #20]
   1b762:	18d3      	adds	r3, r2, r3
   1b764:	7818      	ldrb	r0, [r3, #0]
   1b766:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b768:	2134      	movs	r1, #52	; 0x34
   1b76a:	697b      	ldr	r3, [r7, #20]
   1b76c:	18d3      	adds	r3, r2, r3
   1b76e:	185b      	adds	r3, r3, r1
   1b770:	1c02      	adds	r2, r0, #0
   1b772:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1b774:	68ba      	ldr	r2, [r7, #8]
   1b776:	697b      	ldr	r3, [r7, #20]
   1b778:	18d3      	adds	r3, r2, r3
   1b77a:	781b      	ldrb	r3, [r3, #0]
   1b77c:	2b00      	cmp	r3, #0
   1b77e:	d006      	beq.n	1b78e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b780:	697b      	ldr	r3, [r7, #20]
   1b782:	3301      	adds	r3, #1
   1b784:	617b      	str	r3, [r7, #20]
   1b786:	697b      	ldr	r3, [r7, #20]
   1b788:	2b07      	cmp	r3, #7
   1b78a:	d9e8      	bls.n	1b75e <prvInitialiseNewTask+0x4a>
   1b78c:	e000      	b.n	1b790 <prvInitialiseNewTask+0x7c>
		{
			break;
   1b78e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b792:	223b      	movs	r2, #59	; 0x3b
   1b794:	2100      	movs	r1, #0
   1b796:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1b798:	6a3b      	ldr	r3, [r7, #32]
   1b79a:	2b04      	cmp	r3, #4
   1b79c:	d901      	bls.n	1b7a2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1b79e:	2304      	movs	r3, #4
   1b7a0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7a4:	6a3a      	ldr	r2, [r7, #32]
   1b7a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7aa:	6a3a      	ldr	r2, [r7, #32]
   1b7ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7b0:	2200      	movs	r2, #0
   1b7b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7b6:	3304      	adds	r3, #4
   1b7b8:	0018      	movs	r0, r3
   1b7ba:	4b18      	ldr	r3, [pc, #96]	; (1b81c <prvInitialiseNewTask+0x108>)
   1b7bc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7c0:	3318      	adds	r3, #24
   1b7c2:	0018      	movs	r0, r3
   1b7c4:	4b15      	ldr	r3, [pc, #84]	; (1b81c <prvInitialiseNewTask+0x108>)
   1b7c6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b7cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b7ce:	6a3b      	ldr	r3, [r7, #32]
   1b7d0:	2205      	movs	r2, #5
   1b7d2:	1ad2      	subs	r2, r2, r3
   1b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b7dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7e0:	2200      	movs	r2, #0
   1b7e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7e6:	2250      	movs	r2, #80	; 0x50
   1b7e8:	2100      	movs	r1, #0
   1b7ea:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1b7ec:	683a      	ldr	r2, [r7, #0]
   1b7ee:	68f9      	ldr	r1, [r7, #12]
   1b7f0:	693b      	ldr	r3, [r7, #16]
   1b7f2:	0018      	movs	r0, r3
   1b7f4:	4b0a      	ldr	r3, [pc, #40]	; (1b820 <prvInitialiseNewTask+0x10c>)
   1b7f6:	4798      	blx	r3
   1b7f8:	0002      	movs	r2, r0
   1b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b7fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b800:	2b00      	cmp	r3, #0
   1b802:	d002      	beq.n	1b80a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b806:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b80a:	46c0      	nop			; (mov r8, r8)
   1b80c:	46bd      	mov	sp, r7
   1b80e:	b006      	add	sp, #24
   1b810:	bd80      	pop	{r7, pc}
   1b812:	46c0      	nop			; (mov r8, r8)
   1b814:	00034317 	.word	0x00034317
   1b818:	3fffffff 	.word	0x3fffffff
   1b81c:	000197c9 	.word	0x000197c9
   1b820:	000198e1 	.word	0x000198e1

0001b824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1b824:	b580      	push	{r7, lr}
   1b826:	b082      	sub	sp, #8
   1b828:	af00      	add	r7, sp, #0
   1b82a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1b82c:	4b60      	ldr	r3, [pc, #384]	; (1b9b0 <prvAddNewTaskToReadyList+0x18c>)
   1b82e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1b830:	4b60      	ldr	r3, [pc, #384]	; (1b9b4 <prvAddNewTaskToReadyList+0x190>)
   1b832:	681b      	ldr	r3, [r3, #0]
   1b834:	1c5a      	adds	r2, r3, #1
   1b836:	4b5f      	ldr	r3, [pc, #380]	; (1b9b4 <prvAddNewTaskToReadyList+0x190>)
   1b838:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1b83a:	4b5f      	ldr	r3, [pc, #380]	; (1b9b8 <prvAddNewTaskToReadyList+0x194>)
   1b83c:	681b      	ldr	r3, [r3, #0]
   1b83e:	2b00      	cmp	r3, #0
   1b840:	d109      	bne.n	1b856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1b842:	4b5d      	ldr	r3, [pc, #372]	; (1b9b8 <prvAddNewTaskToReadyList+0x194>)
   1b844:	687a      	ldr	r2, [r7, #4]
   1b846:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1b848:	4b5a      	ldr	r3, [pc, #360]	; (1b9b4 <prvAddNewTaskToReadyList+0x190>)
   1b84a:	681b      	ldr	r3, [r3, #0]
   1b84c:	2b01      	cmp	r3, #1
   1b84e:	d110      	bne.n	1b872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1b850:	4b5a      	ldr	r3, [pc, #360]	; (1b9bc <prvAddNewTaskToReadyList+0x198>)
   1b852:	4798      	blx	r3
   1b854:	e00d      	b.n	1b872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1b856:	4b5a      	ldr	r3, [pc, #360]	; (1b9c0 <prvAddNewTaskToReadyList+0x19c>)
   1b858:	681b      	ldr	r3, [r3, #0]
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	d109      	bne.n	1b872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1b85e:	4b56      	ldr	r3, [pc, #344]	; (1b9b8 <prvAddNewTaskToReadyList+0x194>)
   1b860:	681b      	ldr	r3, [r3, #0]
   1b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b864:	687b      	ldr	r3, [r7, #4]
   1b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b868:	429a      	cmp	r2, r3
   1b86a:	d802      	bhi.n	1b872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1b86c:	4b52      	ldr	r3, [pc, #328]	; (1b9b8 <prvAddNewTaskToReadyList+0x194>)
   1b86e:	687a      	ldr	r2, [r7, #4]
   1b870:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1b872:	4b54      	ldr	r3, [pc, #336]	; (1b9c4 <prvAddNewTaskToReadyList+0x1a0>)
   1b874:	681b      	ldr	r3, [r3, #0]
   1b876:	1c5a      	adds	r2, r3, #1
   1b878:	4b52      	ldr	r3, [pc, #328]	; (1b9c4 <prvAddNewTaskToReadyList+0x1a0>)
   1b87a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1b87c:	4b51      	ldr	r3, [pc, #324]	; (1b9c4 <prvAddNewTaskToReadyList+0x1a0>)
   1b87e:	681a      	ldr	r2, [r3, #0]
   1b880:	687b      	ldr	r3, [r7, #4]
   1b882:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1b884:	687b      	ldr	r3, [r7, #4]
   1b886:	2b00      	cmp	r3, #0
   1b888:	d052      	beq.n	1b930 <prvAddNewTaskToReadyList+0x10c>
   1b88a:	2003      	movs	r0, #3
   1b88c:	4b4e      	ldr	r3, [pc, #312]	; (1b9c8 <prvAddNewTaskToReadyList+0x1a4>)
   1b88e:	4798      	blx	r3
   1b890:	0003      	movs	r3, r0
   1b892:	b29a      	uxth	r2, r3
   1b894:	687b      	ldr	r3, [r7, #4]
   1b896:	0011      	movs	r1, r2
   1b898:	0018      	movs	r0, r3
   1b89a:	4b4c      	ldr	r3, [pc, #304]	; (1b9cc <prvAddNewTaskToReadyList+0x1a8>)
   1b89c:	4798      	blx	r3
   1b89e:	4b4c      	ldr	r3, [pc, #304]	; (1b9d0 <prvAddNewTaskToReadyList+0x1ac>)
   1b8a0:	881a      	ldrh	r2, [r3, #0]
   1b8a2:	687b      	ldr	r3, [r7, #4]
   1b8a4:	0011      	movs	r1, r2
   1b8a6:	0018      	movs	r0, r3
   1b8a8:	4b4a      	ldr	r3, [pc, #296]	; (1b9d4 <prvAddNewTaskToReadyList+0x1b0>)
   1b8aa:	4798      	blx	r3
   1b8ac:	687b      	ldr	r3, [r7, #4]
   1b8ae:	0018      	movs	r0, r3
   1b8b0:	4b49      	ldr	r3, [pc, #292]	; (1b9d8 <prvAddNewTaskToReadyList+0x1b4>)
   1b8b2:	4798      	blx	r3
   1b8b4:	0003      	movs	r3, r0
   1b8b6:	b2d9      	uxtb	r1, r3
   1b8b8:	687b      	ldr	r3, [r7, #4]
   1b8ba:	3334      	adds	r3, #52	; 0x34
   1b8bc:	001a      	movs	r2, r3
   1b8be:	2003      	movs	r0, #3
   1b8c0:	4b46      	ldr	r3, [pc, #280]	; (1b9dc <prvAddNewTaskToReadyList+0x1b8>)
   1b8c2:	4798      	blx	r3
   1b8c4:	687b      	ldr	r3, [r7, #4]
   1b8c6:	0018      	movs	r0, r3
   1b8c8:	4b43      	ldr	r3, [pc, #268]	; (1b9d8 <prvAddNewTaskToReadyList+0x1b4>)
   1b8ca:	4798      	blx	r3
   1b8cc:	0003      	movs	r3, r0
   1b8ce:	b2d9      	uxtb	r1, r3
   1b8d0:	687b      	ldr	r3, [r7, #4]
   1b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b8d4:	b2db      	uxtb	r3, r3
   1b8d6:	001a      	movs	r2, r3
   1b8d8:	2003      	movs	r0, #3
   1b8da:	4b41      	ldr	r3, [pc, #260]	; (1b9e0 <prvAddNewTaskToReadyList+0x1bc>)
   1b8dc:	4798      	blx	r3
   1b8de:	4b41      	ldr	r3, [pc, #260]	; (1b9e4 <prvAddNewTaskToReadyList+0x1c0>)
   1b8e0:	4798      	blx	r3
   1b8e2:	0003      	movs	r3, r0
   1b8e4:	0018      	movs	r0, r3
   1b8e6:	4b40      	ldr	r3, [pc, #256]	; (1b9e8 <prvAddNewTaskToReadyList+0x1c4>)
   1b8e8:	4798      	blx	r3
   1b8ea:	0003      	movs	r3, r0
   1b8ec:	001a      	movs	r2, r3
   1b8ee:	4b3f      	ldr	r3, [pc, #252]	; (1b9ec <prvAddNewTaskToReadyList+0x1c8>)
   1b8f0:	881b      	ldrh	r3, [r3, #0]
   1b8f2:	4013      	ands	r3, r2
   1b8f4:	b29b      	uxth	r3, r3
   1b8f6:	2b00      	cmp	r3, #0
   1b8f8:	d016      	beq.n	1b928 <prvAddNewTaskToReadyList+0x104>
   1b8fa:	687b      	ldr	r3, [r7, #4]
   1b8fc:	0018      	movs	r0, r3
   1b8fe:	4b3a      	ldr	r3, [pc, #232]	; (1b9e8 <prvAddNewTaskToReadyList+0x1c4>)
   1b900:	4798      	blx	r3
   1b902:	0003      	movs	r3, r0
   1b904:	001a      	movs	r2, r3
   1b906:	4b39      	ldr	r3, [pc, #228]	; (1b9ec <prvAddNewTaskToReadyList+0x1c8>)
   1b908:	881b      	ldrh	r3, [r3, #0]
   1b90a:	4013      	ands	r3, r2
   1b90c:	b29b      	uxth	r3, r3
   1b90e:	2b00      	cmp	r3, #0
   1b910:	d00a      	beq.n	1b928 <prvAddNewTaskToReadyList+0x104>
   1b912:	687b      	ldr	r3, [r7, #4]
   1b914:	0018      	movs	r0, r3
   1b916:	4b30      	ldr	r3, [pc, #192]	; (1b9d8 <prvAddNewTaskToReadyList+0x1b4>)
   1b918:	4798      	blx	r3
   1b91a:	0003      	movs	r3, r0
   1b91c:	b2db      	uxtb	r3, r3
   1b91e:	001a      	movs	r2, r3
   1b920:	2103      	movs	r1, #3
   1b922:	201b      	movs	r0, #27
   1b924:	4b32      	ldr	r3, [pc, #200]	; (1b9f0 <prvAddNewTaskToReadyList+0x1cc>)
   1b926:	4798      	blx	r3
   1b928:	687b      	ldr	r3, [r7, #4]
   1b92a:	0018      	movs	r0, r3
   1b92c:	4b31      	ldr	r3, [pc, #196]	; (1b9f4 <prvAddNewTaskToReadyList+0x1d0>)
   1b92e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1b930:	687b      	ldr	r3, [r7, #4]
   1b932:	0018      	movs	r0, r3
   1b934:	4b2c      	ldr	r3, [pc, #176]	; (1b9e8 <prvAddNewTaskToReadyList+0x1c4>)
   1b936:	4798      	blx	r3
   1b938:	0003      	movs	r3, r0
   1b93a:	001a      	movs	r2, r3
   1b93c:	4b2b      	ldr	r3, [pc, #172]	; (1b9ec <prvAddNewTaskToReadyList+0x1c8>)
   1b93e:	881b      	ldrh	r3, [r3, #0]
   1b940:	4013      	ands	r3, r2
   1b942:	b29b      	uxth	r3, r3
   1b944:	2b00      	cmp	r3, #0
   1b946:	d008      	beq.n	1b95a <prvAddNewTaskToReadyList+0x136>
   1b948:	687b      	ldr	r3, [r7, #4]
   1b94a:	0018      	movs	r0, r3
   1b94c:	4b22      	ldr	r3, [pc, #136]	; (1b9d8 <prvAddNewTaskToReadyList+0x1b4>)
   1b94e:	4798      	blx	r3
   1b950:	0003      	movs	r3, r0
   1b952:	b2db      	uxtb	r3, r3
   1b954:	0018      	movs	r0, r3
   1b956:	4b28      	ldr	r3, [pc, #160]	; (1b9f8 <prvAddNewTaskToReadyList+0x1d4>)
   1b958:	4798      	blx	r3
   1b95a:	687b      	ldr	r3, [r7, #4]
   1b95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b95e:	4b27      	ldr	r3, [pc, #156]	; (1b9fc <prvAddNewTaskToReadyList+0x1d8>)
   1b960:	681b      	ldr	r3, [r3, #0]
   1b962:	429a      	cmp	r2, r3
   1b964:	d903      	bls.n	1b96e <prvAddNewTaskToReadyList+0x14a>
   1b966:	687b      	ldr	r3, [r7, #4]
   1b968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b96a:	4b24      	ldr	r3, [pc, #144]	; (1b9fc <prvAddNewTaskToReadyList+0x1d8>)
   1b96c:	601a      	str	r2, [r3, #0]
   1b96e:	687b      	ldr	r3, [r7, #4]
   1b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b972:	0013      	movs	r3, r2
   1b974:	009b      	lsls	r3, r3, #2
   1b976:	189b      	adds	r3, r3, r2
   1b978:	009b      	lsls	r3, r3, #2
   1b97a:	4a21      	ldr	r2, [pc, #132]	; (1ba00 <prvAddNewTaskToReadyList+0x1dc>)
   1b97c:	189a      	adds	r2, r3, r2
   1b97e:	687b      	ldr	r3, [r7, #4]
   1b980:	3304      	adds	r3, #4
   1b982:	0019      	movs	r1, r3
   1b984:	0010      	movs	r0, r2
   1b986:	4b1f      	ldr	r3, [pc, #124]	; (1ba04 <prvAddNewTaskToReadyList+0x1e0>)
   1b988:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1b98a:	4b1f      	ldr	r3, [pc, #124]	; (1ba08 <prvAddNewTaskToReadyList+0x1e4>)
   1b98c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1b98e:	4b0c      	ldr	r3, [pc, #48]	; (1b9c0 <prvAddNewTaskToReadyList+0x19c>)
   1b990:	681b      	ldr	r3, [r3, #0]
   1b992:	2b00      	cmp	r3, #0
   1b994:	d008      	beq.n	1b9a8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1b996:	4b08      	ldr	r3, [pc, #32]	; (1b9b8 <prvAddNewTaskToReadyList+0x194>)
   1b998:	681b      	ldr	r3, [r3, #0]
   1b99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b99c:	687b      	ldr	r3, [r7, #4]
   1b99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b9a0:	429a      	cmp	r2, r3
   1b9a2:	d201      	bcs.n	1b9a8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1b9a4:	4b19      	ldr	r3, [pc, #100]	; (1ba0c <prvAddNewTaskToReadyList+0x1e8>)
   1b9a6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b9a8:	46c0      	nop			; (mov r8, r8)
   1b9aa:	46bd      	mov	sp, r7
   1b9ac:	b002      	add	sp, #8
   1b9ae:	bd80      	pop	{r7, pc}
   1b9b0:	00019a19 	.word	0x00019a19
   1b9b4:	20004030 	.word	0x20004030
   1b9b8:	20003f58 	.word	0x20003f58
   1b9bc:	0001c545 	.word	0x0001c545
   1b9c0:	2000403c 	.word	0x2000403c
   1b9c4:	2000404c 	.word	0x2000404c
   1b9c8:	00018f95 	.word	0x00018f95
   1b9cc:	00017a39 	.word	0x00017a39
   1b9d0:	2000010a 	.word	0x2000010a
   1b9d4:	00017a75 	.word	0x00017a75
   1b9d8:	000179f5 	.word	0x000179f5
   1b9dc:	000191c5 	.word	0x000191c5
   1b9e0:	00018929 	.word	0x00018929
   1b9e4:	00017cb1 	.word	0x00017cb1
   1b9e8:	00017a15 	.word	0x00017a15
   1b9ec:	20000108 	.word	0x20000108
   1b9f0:	0001840d 	.word	0x0001840d
   1b9f4:	00017b75 	.word	0x00017b75
   1b9f8:	000181c5 	.word	0x000181c5
   1b9fc:	20004038 	.word	0x20004038
   1ba00:	20003f5c 	.word	0x20003f5c
   1ba04:	000197df 	.word	0x000197df
   1ba08:	00019a3d 	.word	0x00019a3d
   1ba0c:	00019a01 	.word	0x00019a01

0001ba10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1ba10:	b580      	push	{r7, lr}
   1ba12:	b084      	sub	sp, #16
   1ba14:	af00      	add	r7, sp, #0
   1ba16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1ba18:	2300      	movs	r3, #0
   1ba1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1ba1c:	687b      	ldr	r3, [r7, #4]
   1ba1e:	2b00      	cmp	r3, #0
   1ba20:	d045      	beq.n	1baae <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1ba22:	4b27      	ldr	r3, [pc, #156]	; (1bac0 <vTaskDelay+0xb0>)
   1ba24:	681b      	ldr	r3, [r3, #0]
   1ba26:	2b00      	cmp	r3, #0
   1ba28:	d001      	beq.n	1ba2e <vTaskDelay+0x1e>
   1ba2a:	b672      	cpsid	i
   1ba2c:	e7fe      	b.n	1ba2c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1ba2e:	4b25      	ldr	r3, [pc, #148]	; (1bac4 <vTaskDelay+0xb4>)
   1ba30:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1ba32:	4b25      	ldr	r3, [pc, #148]	; (1bac8 <vTaskDelay+0xb8>)
   1ba34:	681b      	ldr	r3, [r3, #0]
   1ba36:	0018      	movs	r0, r3
   1ba38:	4b24      	ldr	r3, [pc, #144]	; (1bacc <vTaskDelay+0xbc>)
   1ba3a:	4798      	blx	r3
   1ba3c:	0003      	movs	r3, r0
   1ba3e:	001a      	movs	r2, r3
   1ba40:	4b23      	ldr	r3, [pc, #140]	; (1bad0 <vTaskDelay+0xc0>)
   1ba42:	881b      	ldrh	r3, [r3, #0]
   1ba44:	4013      	ands	r3, r2
   1ba46:	b29b      	uxth	r3, r3
   1ba48:	2b00      	cmp	r3, #0
   1ba4a:	d00e      	beq.n	1ba6a <vTaskDelay+0x5a>
   1ba4c:	687b      	ldr	r3, [r7, #4]
   1ba4e:	0019      	movs	r1, r3
   1ba50:	2089      	movs	r0, #137	; 0x89
   1ba52:	4b20      	ldr	r3, [pc, #128]	; (1bad4 <vTaskDelay+0xc4>)
   1ba54:	4798      	blx	r3
   1ba56:	4b1c      	ldr	r3, [pc, #112]	; (1bac8 <vTaskDelay+0xb8>)
   1ba58:	681b      	ldr	r3, [r3, #0]
   1ba5a:	0018      	movs	r0, r3
   1ba5c:	4b1e      	ldr	r3, [pc, #120]	; (1bad8 <vTaskDelay+0xc8>)
   1ba5e:	4798      	blx	r3
   1ba60:	0003      	movs	r3, r0
   1ba62:	b2db      	uxtb	r3, r3
   1ba64:	0018      	movs	r0, r3
   1ba66:	4b1d      	ldr	r3, [pc, #116]	; (1badc <vTaskDelay+0xcc>)
   1ba68:	4798      	blx	r3
   1ba6a:	4b1d      	ldr	r3, [pc, #116]	; (1bae0 <vTaskDelay+0xd0>)
   1ba6c:	4798      	blx	r3
   1ba6e:	0003      	movs	r3, r0
   1ba70:	0018      	movs	r0, r3
   1ba72:	4b16      	ldr	r3, [pc, #88]	; (1bacc <vTaskDelay+0xbc>)
   1ba74:	4798      	blx	r3
   1ba76:	0003      	movs	r3, r0
   1ba78:	001a      	movs	r2, r3
   1ba7a:	4b15      	ldr	r3, [pc, #84]	; (1bad0 <vTaskDelay+0xc0>)
   1ba7c:	881b      	ldrh	r3, [r3, #0]
   1ba7e:	4013      	ands	r3, r2
   1ba80:	b29b      	uxth	r3, r3
   1ba82:	2b00      	cmp	r3, #0
   1ba84:	d00a      	beq.n	1ba9c <vTaskDelay+0x8c>
   1ba86:	4b16      	ldr	r3, [pc, #88]	; (1bae0 <vTaskDelay+0xd0>)
   1ba88:	4798      	blx	r3
   1ba8a:	0003      	movs	r3, r0
   1ba8c:	0018      	movs	r0, r3
   1ba8e:	4b12      	ldr	r3, [pc, #72]	; (1bad8 <vTaskDelay+0xc8>)
   1ba90:	4798      	blx	r3
   1ba92:	0003      	movs	r3, r0
   1ba94:	b2db      	uxtb	r3, r3
   1ba96:	0018      	movs	r0, r3
   1ba98:	4b10      	ldr	r3, [pc, #64]	; (1badc <vTaskDelay+0xcc>)
   1ba9a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1ba9c:	687b      	ldr	r3, [r7, #4]
   1ba9e:	2100      	movs	r1, #0
   1baa0:	0018      	movs	r0, r3
   1baa2:	4b10      	ldr	r3, [pc, #64]	; (1bae4 <vTaskDelay+0xd4>)
   1baa4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1baa6:	4b10      	ldr	r3, [pc, #64]	; (1bae8 <vTaskDelay+0xd8>)
   1baa8:	4798      	blx	r3
   1baaa:	0003      	movs	r3, r0
   1baac:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1baae:	68fb      	ldr	r3, [r7, #12]
   1bab0:	2b00      	cmp	r3, #0
   1bab2:	d101      	bne.n	1bab8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1bab4:	4b0d      	ldr	r3, [pc, #52]	; (1baec <vTaskDelay+0xdc>)
   1bab6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bab8:	46c0      	nop			; (mov r8, r8)
   1baba:	46bd      	mov	sp, r7
   1babc:	b004      	add	sp, #16
   1babe:	bd80      	pop	{r7, pc}
   1bac0:	20004058 	.word	0x20004058
   1bac4:	0001bcd1 	.word	0x0001bcd1
   1bac8:	20003f58 	.word	0x20003f58
   1bacc:	00017a15 	.word	0x00017a15
   1bad0:	20000108 	.word	0x20000108
   1bad4:	00018715 	.word	0x00018715
   1bad8:	000179f5 	.word	0x000179f5
   1badc:	00018ba5 	.word	0x00018ba5
   1bae0:	00017cb1 	.word	0x00017cb1
   1bae4:	0001cc29 	.word	0x0001cc29
   1bae8:	0001bce9 	.word	0x0001bce9
   1baec:	00019a01 	.word	0x00019a01

0001baf0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1baf0:	b580      	push	{r7, lr}
   1baf2:	b084      	sub	sp, #16
   1baf4:	af00      	add	r7, sp, #0
   1baf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1baf8:	4b42      	ldr	r3, [pc, #264]	; (1bc04 <vTaskSuspend+0x114>)
   1bafa:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1bafc:	687b      	ldr	r3, [r7, #4]
   1bafe:	2b00      	cmp	r3, #0
   1bb00:	d102      	bne.n	1bb08 <vTaskSuspend+0x18>
   1bb02:	4b41      	ldr	r3, [pc, #260]	; (1bc08 <vTaskSuspend+0x118>)
   1bb04:	681b      	ldr	r3, [r3, #0]
   1bb06:	e000      	b.n	1bb0a <vTaskSuspend+0x1a>
   1bb08:	687b      	ldr	r3, [r7, #4]
   1bb0a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1bb0c:	4b3f      	ldr	r3, [pc, #252]	; (1bc0c <vTaskSuspend+0x11c>)
   1bb0e:	4798      	blx	r3
   1bb10:	0003      	movs	r3, r0
   1bb12:	0018      	movs	r0, r3
   1bb14:	4b3e      	ldr	r3, [pc, #248]	; (1bc10 <vTaskSuspend+0x120>)
   1bb16:	4798      	blx	r3
   1bb18:	0003      	movs	r3, r0
   1bb1a:	001a      	movs	r2, r3
   1bb1c:	4b3d      	ldr	r3, [pc, #244]	; (1bc14 <vTaskSuspend+0x124>)
   1bb1e:	881b      	ldrh	r3, [r3, #0]
   1bb20:	4013      	ands	r3, r2
   1bb22:	b29b      	uxth	r3, r3
   1bb24:	2b00      	cmp	r3, #0
   1bb26:	d016      	beq.n	1bb56 <vTaskSuspend+0x66>
   1bb28:	68fb      	ldr	r3, [r7, #12]
   1bb2a:	0018      	movs	r0, r3
   1bb2c:	4b38      	ldr	r3, [pc, #224]	; (1bc10 <vTaskSuspend+0x120>)
   1bb2e:	4798      	blx	r3
   1bb30:	0003      	movs	r3, r0
   1bb32:	001a      	movs	r2, r3
   1bb34:	4b37      	ldr	r3, [pc, #220]	; (1bc14 <vTaskSuspend+0x124>)
   1bb36:	881b      	ldrh	r3, [r3, #0]
   1bb38:	4013      	ands	r3, r2
   1bb3a:	b29b      	uxth	r3, r3
   1bb3c:	2b00      	cmp	r3, #0
   1bb3e:	d00a      	beq.n	1bb56 <vTaskSuspend+0x66>
   1bb40:	68fb      	ldr	r3, [r7, #12]
   1bb42:	0018      	movs	r0, r3
   1bb44:	4b34      	ldr	r3, [pc, #208]	; (1bc18 <vTaskSuspend+0x128>)
   1bb46:	4798      	blx	r3
   1bb48:	0003      	movs	r3, r0
   1bb4a:	b2db      	uxtb	r3, r3
   1bb4c:	001a      	movs	r2, r3
   1bb4e:	2103      	movs	r1, #3
   1bb50:	208a      	movs	r0, #138	; 0x8a
   1bb52:	4b32      	ldr	r3, [pc, #200]	; (1bc1c <vTaskSuspend+0x12c>)
   1bb54:	4798      	blx	r3
   1bb56:	68fb      	ldr	r3, [r7, #12]
   1bb58:	0018      	movs	r0, r3
   1bb5a:	4b2f      	ldr	r3, [pc, #188]	; (1bc18 <vTaskSuspend+0x128>)
   1bb5c:	4798      	blx	r3
   1bb5e:	0003      	movs	r3, r0
   1bb60:	b2db      	uxtb	r3, r3
   1bb62:	0018      	movs	r0, r3
   1bb64:	4b2e      	ldr	r3, [pc, #184]	; (1bc20 <vTaskSuspend+0x130>)
   1bb66:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bb68:	68fb      	ldr	r3, [r7, #12]
   1bb6a:	3304      	adds	r3, #4
   1bb6c:	0018      	movs	r0, r3
   1bb6e:	4b2d      	ldr	r3, [pc, #180]	; (1bc24 <vTaskSuspend+0x134>)
   1bb70:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1bb72:	68fb      	ldr	r3, [r7, #12]
   1bb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb76:	2b00      	cmp	r3, #0
   1bb78:	d004      	beq.n	1bb84 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1bb7a:	68fb      	ldr	r3, [r7, #12]
   1bb7c:	3318      	adds	r3, #24
   1bb7e:	0018      	movs	r0, r3
   1bb80:	4b28      	ldr	r3, [pc, #160]	; (1bc24 <vTaskSuspend+0x134>)
   1bb82:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1bb84:	68fb      	ldr	r3, [r7, #12]
   1bb86:	1d1a      	adds	r2, r3, #4
   1bb88:	4b27      	ldr	r3, [pc, #156]	; (1bc28 <vTaskSuspend+0x138>)
   1bb8a:	0011      	movs	r1, r2
   1bb8c:	0018      	movs	r0, r3
   1bb8e:	4b27      	ldr	r3, [pc, #156]	; (1bc2c <vTaskSuspend+0x13c>)
   1bb90:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1bb92:	68fb      	ldr	r3, [r7, #12]
   1bb94:	2250      	movs	r2, #80	; 0x50
   1bb96:	5c9b      	ldrb	r3, [r3, r2]
   1bb98:	b2db      	uxtb	r3, r3
   1bb9a:	2b01      	cmp	r3, #1
   1bb9c:	d103      	bne.n	1bba6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bb9e:	68fb      	ldr	r3, [r7, #12]
   1bba0:	2250      	movs	r2, #80	; 0x50
   1bba2:	2100      	movs	r1, #0
   1bba4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1bba6:	4b22      	ldr	r3, [pc, #136]	; (1bc30 <vTaskSuspend+0x140>)
   1bba8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1bbaa:	4b22      	ldr	r3, [pc, #136]	; (1bc34 <vTaskSuspend+0x144>)
   1bbac:	681b      	ldr	r3, [r3, #0]
   1bbae:	2b00      	cmp	r3, #0
   1bbb0:	d005      	beq.n	1bbbe <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1bbb2:	4b14      	ldr	r3, [pc, #80]	; (1bc04 <vTaskSuspend+0x114>)
   1bbb4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1bbb6:	4b20      	ldr	r3, [pc, #128]	; (1bc38 <vTaskSuspend+0x148>)
   1bbb8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1bbba:	4b1d      	ldr	r3, [pc, #116]	; (1bc30 <vTaskSuspend+0x140>)
   1bbbc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1bbbe:	4b12      	ldr	r3, [pc, #72]	; (1bc08 <vTaskSuspend+0x118>)
   1bbc0:	681b      	ldr	r3, [r3, #0]
   1bbc2:	68fa      	ldr	r2, [r7, #12]
   1bbc4:	429a      	cmp	r2, r3
   1bbc6:	d118      	bne.n	1bbfa <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1bbc8:	4b1a      	ldr	r3, [pc, #104]	; (1bc34 <vTaskSuspend+0x144>)
   1bbca:	681b      	ldr	r3, [r3, #0]
   1bbcc:	2b00      	cmp	r3, #0
   1bbce:	d008      	beq.n	1bbe2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1bbd0:	4b1a      	ldr	r3, [pc, #104]	; (1bc3c <vTaskSuspend+0x14c>)
   1bbd2:	681b      	ldr	r3, [r3, #0]
   1bbd4:	2b00      	cmp	r3, #0
   1bbd6:	d001      	beq.n	1bbdc <vTaskSuspend+0xec>
   1bbd8:	b672      	cpsid	i
   1bbda:	e7fe      	b.n	1bbda <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1bbdc:	4b18      	ldr	r3, [pc, #96]	; (1bc40 <vTaskSuspend+0x150>)
   1bbde:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bbe0:	e00b      	b.n	1bbfa <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1bbe2:	4b11      	ldr	r3, [pc, #68]	; (1bc28 <vTaskSuspend+0x138>)
   1bbe4:	681a      	ldr	r2, [r3, #0]
   1bbe6:	4b17      	ldr	r3, [pc, #92]	; (1bc44 <vTaskSuspend+0x154>)
   1bbe8:	681b      	ldr	r3, [r3, #0]
   1bbea:	429a      	cmp	r2, r3
   1bbec:	d103      	bne.n	1bbf6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1bbee:	4b06      	ldr	r3, [pc, #24]	; (1bc08 <vTaskSuspend+0x118>)
   1bbf0:	2200      	movs	r2, #0
   1bbf2:	601a      	str	r2, [r3, #0]
	}
   1bbf4:	e001      	b.n	1bbfa <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1bbf6:	4b14      	ldr	r3, [pc, #80]	; (1bc48 <vTaskSuspend+0x158>)
   1bbf8:	4798      	blx	r3
	}
   1bbfa:	46c0      	nop			; (mov r8, r8)
   1bbfc:	46bd      	mov	sp, r7
   1bbfe:	b004      	add	sp, #16
   1bc00:	bd80      	pop	{r7, pc}
   1bc02:	46c0      	nop			; (mov r8, r8)
   1bc04:	00019a19 	.word	0x00019a19
   1bc08:	20003f58 	.word	0x20003f58
   1bc0c:	00017cb1 	.word	0x00017cb1
   1bc10:	00017a15 	.word	0x00017a15
   1bc14:	20000108 	.word	0x20000108
   1bc18:	000179f5 	.word	0x000179f5
   1bc1c:	0001840d 	.word	0x0001840d
   1bc20:	00018ba5 	.word	0x00018ba5
   1bc24:	0001988f 	.word	0x0001988f
   1bc28:	2000401c 	.word	0x2000401c
   1bc2c:	000197df 	.word	0x000197df
   1bc30:	00019a3d 	.word	0x00019a3d
   1bc34:	2000403c 	.word	0x2000403c
   1bc38:	0001c6d5 	.word	0x0001c6d5
   1bc3c:	20004058 	.word	0x20004058
   1bc40:	00019a01 	.word	0x00019a01
   1bc44:	20004030 	.word	0x20004030
   1bc48:	0001c065 	.word	0x0001c065

0001bc4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1bc4c:	b590      	push	{r4, r7, lr}
   1bc4e:	b085      	sub	sp, #20
   1bc50:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1bc52:	4916      	ldr	r1, [pc, #88]	; (1bcac <vTaskStartScheduler+0x60>)
   1bc54:	4816      	ldr	r0, [pc, #88]	; (1bcb0 <vTaskStartScheduler+0x64>)
   1bc56:	4b17      	ldr	r3, [pc, #92]	; (1bcb4 <vTaskStartScheduler+0x68>)
   1bc58:	9301      	str	r3, [sp, #4]
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	9300      	str	r3, [sp, #0]
   1bc5e:	2300      	movs	r3, #0
   1bc60:	2296      	movs	r2, #150	; 0x96
   1bc62:	4c15      	ldr	r4, [pc, #84]	; (1bcb8 <vTaskStartScheduler+0x6c>)
   1bc64:	47a0      	blx	r4
   1bc66:	0003      	movs	r3, r0
   1bc68:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1bc6a:	687b      	ldr	r3, [r7, #4]
   1bc6c:	2b01      	cmp	r3, #1
   1bc6e:	d103      	bne.n	1bc78 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1bc70:	4b12      	ldr	r3, [pc, #72]	; (1bcbc <vTaskStartScheduler+0x70>)
   1bc72:	4798      	blx	r3
   1bc74:	0003      	movs	r3, r0
   1bc76:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1bc78:	687b      	ldr	r3, [r7, #4]
   1bc7a:	2b01      	cmp	r3, #1
   1bc7c:	d10d      	bne.n	1bc9a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1bc7e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1bc80:	4b0f      	ldr	r3, [pc, #60]	; (1bcc0 <vTaskStartScheduler+0x74>)
   1bc82:	2201      	movs	r2, #1
   1bc84:	4252      	negs	r2, r2
   1bc86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1bc88:	4b0e      	ldr	r3, [pc, #56]	; (1bcc4 <vTaskStartScheduler+0x78>)
   1bc8a:	2201      	movs	r2, #1
   1bc8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1bc8e:	4b0e      	ldr	r3, [pc, #56]	; (1bcc8 <vTaskStartScheduler+0x7c>)
   1bc90:	2200      	movs	r2, #0
   1bc92:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1bc94:	4b0d      	ldr	r3, [pc, #52]	; (1bccc <vTaskStartScheduler+0x80>)
   1bc96:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1bc98:	e004      	b.n	1bca4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1bc9a:	687b      	ldr	r3, [r7, #4]
   1bc9c:	3301      	adds	r3, #1
   1bc9e:	d101      	bne.n	1bca4 <vTaskStartScheduler+0x58>
   1bca0:	b672      	cpsid	i
   1bca2:	e7fe      	b.n	1bca2 <vTaskStartScheduler+0x56>
}
   1bca4:	46c0      	nop			; (mov r8, r8)
   1bca6:	46bd      	mov	sp, r7
   1bca8:	b003      	add	sp, #12
   1bcaa:	bd90      	pop	{r4, r7, pc}
   1bcac:	00037b3c 	.word	0x00037b3c
   1bcb0:	0001c51d 	.word	0x0001c51d
   1bcb4:	20004054 	.word	0x20004054
   1bcb8:	0001b675 	.word	0x0001b675
   1bcbc:	0001ccdd 	.word	0x0001ccdd
   1bcc0:	20004050 	.word	0x20004050
   1bcc4:	2000403c 	.word	0x2000403c
   1bcc8:	20004034 	.word	0x20004034
   1bccc:	000199a9 	.word	0x000199a9

0001bcd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1bcd0:	b580      	push	{r7, lr}
   1bcd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1bcd4:	4b03      	ldr	r3, [pc, #12]	; (1bce4 <vTaskSuspendAll+0x14>)
   1bcd6:	681b      	ldr	r3, [r3, #0]
   1bcd8:	1c5a      	adds	r2, r3, #1
   1bcda:	4b02      	ldr	r3, [pc, #8]	; (1bce4 <vTaskSuspendAll+0x14>)
   1bcdc:	601a      	str	r2, [r3, #0]
}
   1bcde:	46c0      	nop			; (mov r8, r8)
   1bce0:	46bd      	mov	sp, r7
   1bce2:	bd80      	pop	{r7, pc}
   1bce4:	20004058 	.word	0x20004058

0001bce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1bce8:	b580      	push	{r7, lr}
   1bcea:	b084      	sub	sp, #16
   1bcec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1bcee:	2300      	movs	r3, #0
   1bcf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1bcf2:	2300      	movs	r3, #0
   1bcf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1bcf6:	4b45      	ldr	r3, [pc, #276]	; (1be0c <xTaskResumeAll+0x124>)
   1bcf8:	681b      	ldr	r3, [r3, #0]
   1bcfa:	2b00      	cmp	r3, #0
   1bcfc:	d101      	bne.n	1bd02 <xTaskResumeAll+0x1a>
   1bcfe:	b672      	cpsid	i
   1bd00:	e7fe      	b.n	1bd00 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1bd02:	4b43      	ldr	r3, [pc, #268]	; (1be10 <xTaskResumeAll+0x128>)
   1bd04:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1bd06:	4b41      	ldr	r3, [pc, #260]	; (1be0c <xTaskResumeAll+0x124>)
   1bd08:	681b      	ldr	r3, [r3, #0]
   1bd0a:	1e5a      	subs	r2, r3, #1
   1bd0c:	4b3f      	ldr	r3, [pc, #252]	; (1be0c <xTaskResumeAll+0x124>)
   1bd0e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1bd10:	4b3e      	ldr	r3, [pc, #248]	; (1be0c <xTaskResumeAll+0x124>)
   1bd12:	681b      	ldr	r3, [r3, #0]
   1bd14:	2b00      	cmp	r3, #0
   1bd16:	d000      	beq.n	1bd1a <xTaskResumeAll+0x32>
   1bd18:	e071      	b.n	1bdfe <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1bd1a:	4b3e      	ldr	r3, [pc, #248]	; (1be14 <xTaskResumeAll+0x12c>)
   1bd1c:	681b      	ldr	r3, [r3, #0]
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	d100      	bne.n	1bd24 <xTaskResumeAll+0x3c>
   1bd22:	e06c      	b.n	1bdfe <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1bd24:	e044      	b.n	1bdb0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1bd26:	4b3c      	ldr	r3, [pc, #240]	; (1be18 <xTaskResumeAll+0x130>)
   1bd28:	68db      	ldr	r3, [r3, #12]
   1bd2a:	68db      	ldr	r3, [r3, #12]
   1bd2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1bd2e:	68fb      	ldr	r3, [r7, #12]
   1bd30:	3318      	adds	r3, #24
   1bd32:	0018      	movs	r0, r3
   1bd34:	4b39      	ldr	r3, [pc, #228]	; (1be1c <xTaskResumeAll+0x134>)
   1bd36:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1bd38:	68fb      	ldr	r3, [r7, #12]
   1bd3a:	3304      	adds	r3, #4
   1bd3c:	0018      	movs	r0, r3
   1bd3e:	4b37      	ldr	r3, [pc, #220]	; (1be1c <xTaskResumeAll+0x134>)
   1bd40:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1bd42:	68fb      	ldr	r3, [r7, #12]
   1bd44:	0018      	movs	r0, r3
   1bd46:	4b36      	ldr	r3, [pc, #216]	; (1be20 <xTaskResumeAll+0x138>)
   1bd48:	4798      	blx	r3
   1bd4a:	0003      	movs	r3, r0
   1bd4c:	001a      	movs	r2, r3
   1bd4e:	4b35      	ldr	r3, [pc, #212]	; (1be24 <xTaskResumeAll+0x13c>)
   1bd50:	881b      	ldrh	r3, [r3, #0]
   1bd52:	4013      	ands	r3, r2
   1bd54:	b29b      	uxth	r3, r3
   1bd56:	2b00      	cmp	r3, #0
   1bd58:	d008      	beq.n	1bd6c <xTaskResumeAll+0x84>
   1bd5a:	68fb      	ldr	r3, [r7, #12]
   1bd5c:	0018      	movs	r0, r3
   1bd5e:	4b32      	ldr	r3, [pc, #200]	; (1be28 <xTaskResumeAll+0x140>)
   1bd60:	4798      	blx	r3
   1bd62:	0003      	movs	r3, r0
   1bd64:	b2db      	uxtb	r3, r3
   1bd66:	0018      	movs	r0, r3
   1bd68:	4b30      	ldr	r3, [pc, #192]	; (1be2c <xTaskResumeAll+0x144>)
   1bd6a:	4798      	blx	r3
   1bd6c:	68fb      	ldr	r3, [r7, #12]
   1bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd70:	4b2f      	ldr	r3, [pc, #188]	; (1be30 <xTaskResumeAll+0x148>)
   1bd72:	681b      	ldr	r3, [r3, #0]
   1bd74:	429a      	cmp	r2, r3
   1bd76:	d903      	bls.n	1bd80 <xTaskResumeAll+0x98>
   1bd78:	68fb      	ldr	r3, [r7, #12]
   1bd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd7c:	4b2c      	ldr	r3, [pc, #176]	; (1be30 <xTaskResumeAll+0x148>)
   1bd7e:	601a      	str	r2, [r3, #0]
   1bd80:	68fb      	ldr	r3, [r7, #12]
   1bd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd84:	0013      	movs	r3, r2
   1bd86:	009b      	lsls	r3, r3, #2
   1bd88:	189b      	adds	r3, r3, r2
   1bd8a:	009b      	lsls	r3, r3, #2
   1bd8c:	4a29      	ldr	r2, [pc, #164]	; (1be34 <xTaskResumeAll+0x14c>)
   1bd8e:	189a      	adds	r2, r3, r2
   1bd90:	68fb      	ldr	r3, [r7, #12]
   1bd92:	3304      	adds	r3, #4
   1bd94:	0019      	movs	r1, r3
   1bd96:	0010      	movs	r0, r2
   1bd98:	4b27      	ldr	r3, [pc, #156]	; (1be38 <xTaskResumeAll+0x150>)
   1bd9a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1bd9c:	68fb      	ldr	r3, [r7, #12]
   1bd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bda0:	4b26      	ldr	r3, [pc, #152]	; (1be3c <xTaskResumeAll+0x154>)
   1bda2:	681b      	ldr	r3, [r3, #0]
   1bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bda6:	429a      	cmp	r2, r3
   1bda8:	d302      	bcc.n	1bdb0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1bdaa:	4b25      	ldr	r3, [pc, #148]	; (1be40 <xTaskResumeAll+0x158>)
   1bdac:	2201      	movs	r2, #1
   1bdae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1bdb0:	4b19      	ldr	r3, [pc, #100]	; (1be18 <xTaskResumeAll+0x130>)
   1bdb2:	681b      	ldr	r3, [r3, #0]
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	d1b6      	bne.n	1bd26 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1bdb8:	68fb      	ldr	r3, [r7, #12]
   1bdba:	2b00      	cmp	r3, #0
   1bdbc:	d001      	beq.n	1bdc2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1bdbe:	4b21      	ldr	r3, [pc, #132]	; (1be44 <xTaskResumeAll+0x15c>)
   1bdc0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1bdc2:	4b21      	ldr	r3, [pc, #132]	; (1be48 <xTaskResumeAll+0x160>)
   1bdc4:	681b      	ldr	r3, [r3, #0]
   1bdc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1bdc8:	687b      	ldr	r3, [r7, #4]
   1bdca:	2b00      	cmp	r3, #0
   1bdcc:	d00f      	beq.n	1bdee <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1bdce:	4b1f      	ldr	r3, [pc, #124]	; (1be4c <xTaskResumeAll+0x164>)
   1bdd0:	4798      	blx	r3
   1bdd2:	1e03      	subs	r3, r0, #0
   1bdd4:	d002      	beq.n	1bddc <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1bdd6:	4b1a      	ldr	r3, [pc, #104]	; (1be40 <xTaskResumeAll+0x158>)
   1bdd8:	2201      	movs	r2, #1
   1bdda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1bddc:	687b      	ldr	r3, [r7, #4]
   1bdde:	3b01      	subs	r3, #1
   1bde0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1bde2:	687b      	ldr	r3, [r7, #4]
   1bde4:	2b00      	cmp	r3, #0
   1bde6:	d1f2      	bne.n	1bdce <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1bde8:	4b17      	ldr	r3, [pc, #92]	; (1be48 <xTaskResumeAll+0x160>)
   1bdea:	2200      	movs	r2, #0
   1bdec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1bdee:	4b14      	ldr	r3, [pc, #80]	; (1be40 <xTaskResumeAll+0x158>)
   1bdf0:	681b      	ldr	r3, [r3, #0]
   1bdf2:	2b00      	cmp	r3, #0
   1bdf4:	d003      	beq.n	1bdfe <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1bdf6:	2301      	movs	r3, #1
   1bdf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1bdfa:	4b15      	ldr	r3, [pc, #84]	; (1be50 <xTaskResumeAll+0x168>)
   1bdfc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1bdfe:	4b15      	ldr	r3, [pc, #84]	; (1be54 <xTaskResumeAll+0x16c>)
   1be00:	4798      	blx	r3

	return xAlreadyYielded;
   1be02:	68bb      	ldr	r3, [r7, #8]
}
   1be04:	0018      	movs	r0, r3
   1be06:	46bd      	mov	sp, r7
   1be08:	b004      	add	sp, #16
   1be0a:	bd80      	pop	{r7, pc}
   1be0c:	20004058 	.word	0x20004058
   1be10:	00019a19 	.word	0x00019a19
   1be14:	20004030 	.word	0x20004030
   1be18:	20003ff0 	.word	0x20003ff0
   1be1c:	0001988f 	.word	0x0001988f
   1be20:	00017a15 	.word	0x00017a15
   1be24:	20000108 	.word	0x20000108
   1be28:	000179f5 	.word	0x000179f5
   1be2c:	000181c5 	.word	0x000181c5
   1be30:	20004038 	.word	0x20004038
   1be34:	20003f5c 	.word	0x20003f5c
   1be38:	000197df 	.word	0x000197df
   1be3c:	20003f58 	.word	0x20003f58
   1be40:	20004044 	.word	0x20004044
   1be44:	0001c6d5 	.word	0x0001c6d5
   1be48:	20004040 	.word	0x20004040
   1be4c:	0001be75 	.word	0x0001be75
   1be50:	00019a01 	.word	0x00019a01
   1be54:	00019a3d 	.word	0x00019a3d

0001be58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1be58:	b580      	push	{r7, lr}
   1be5a:	b082      	sub	sp, #8
   1be5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1be5e:	4b04      	ldr	r3, [pc, #16]	; (1be70 <xTaskGetTickCount+0x18>)
   1be60:	681b      	ldr	r3, [r3, #0]
   1be62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1be64:	687b      	ldr	r3, [r7, #4]
}
   1be66:	0018      	movs	r0, r3
   1be68:	46bd      	mov	sp, r7
   1be6a:	b002      	add	sp, #8
   1be6c:	bd80      	pop	{r7, pc}
   1be6e:	46c0      	nop			; (mov r8, r8)
   1be70:	20004034 	.word	0x20004034

0001be74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1be74:	b580      	push	{r7, lr}
   1be76:	b086      	sub	sp, #24
   1be78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1be7a:	2300      	movs	r3, #0
   1be7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1be7e:	4b64      	ldr	r3, [pc, #400]	; (1c010 <xTaskIncrementTick+0x19c>)
   1be80:	681b      	ldr	r3, [r3, #0]
   1be82:	2b01      	cmp	r3, #1
   1be84:	d003      	beq.n	1be8e <xTaskIncrementTick+0x1a>
   1be86:	4b63      	ldr	r3, [pc, #396]	; (1c014 <xTaskIncrementTick+0x1a0>)
   1be88:	681b      	ldr	r3, [r3, #0]
   1be8a:	2b00      	cmp	r3, #0
   1be8c:	d107      	bne.n	1be9e <xTaskIncrementTick+0x2a>
   1be8e:	4b62      	ldr	r3, [pc, #392]	; (1c018 <xTaskIncrementTick+0x1a4>)
   1be90:	681b      	ldr	r3, [r3, #0]
   1be92:	1c5a      	adds	r2, r3, #1
   1be94:	4b60      	ldr	r3, [pc, #384]	; (1c018 <xTaskIncrementTick+0x1a4>)
   1be96:	601a      	str	r2, [r3, #0]
   1be98:	2000      	movs	r0, #0
   1be9a:	4b60      	ldr	r3, [pc, #384]	; (1c01c <xTaskIncrementTick+0x1a8>)
   1be9c:	4798      	blx	r3
   1be9e:	4b5c      	ldr	r3, [pc, #368]	; (1c010 <xTaskIncrementTick+0x19c>)
   1bea0:	681b      	ldr	r3, [r3, #0]
   1bea2:	2b00      	cmp	r3, #0
   1bea4:	d106      	bne.n	1beb4 <xTaskIncrementTick+0x40>
   1bea6:	4b5e      	ldr	r3, [pc, #376]	; (1c020 <xTaskIncrementTick+0x1ac>)
   1bea8:	681b      	ldr	r3, [r3, #0]
   1beaa:	3301      	adds	r3, #1
   1beac:	0019      	movs	r1, r3
   1beae:	2003      	movs	r0, #3
   1beb0:	4b5c      	ldr	r3, [pc, #368]	; (1c024 <xTaskIncrementTick+0x1b0>)
   1beb2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1beb4:	4b56      	ldr	r3, [pc, #344]	; (1c010 <xTaskIncrementTick+0x19c>)
   1beb6:	681b      	ldr	r3, [r3, #0]
   1beb8:	2b00      	cmp	r3, #0
   1beba:	d000      	beq.n	1bebe <xTaskIncrementTick+0x4a>
   1bebc:	e098      	b.n	1bff0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1bebe:	4b58      	ldr	r3, [pc, #352]	; (1c020 <xTaskIncrementTick+0x1ac>)
   1bec0:	681b      	ldr	r3, [r3, #0]
   1bec2:	3301      	adds	r3, #1
   1bec4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1bec6:	4b56      	ldr	r3, [pc, #344]	; (1c020 <xTaskIncrementTick+0x1ac>)
   1bec8:	693a      	ldr	r2, [r7, #16]
   1beca:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1becc:	693b      	ldr	r3, [r7, #16]
   1bece:	2b00      	cmp	r3, #0
   1bed0:	d117      	bne.n	1bf02 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1bed2:	4b55      	ldr	r3, [pc, #340]	; (1c028 <xTaskIncrementTick+0x1b4>)
   1bed4:	681b      	ldr	r3, [r3, #0]
   1bed6:	681b      	ldr	r3, [r3, #0]
   1bed8:	2b00      	cmp	r3, #0
   1beda:	d001      	beq.n	1bee0 <xTaskIncrementTick+0x6c>
   1bedc:	b672      	cpsid	i
   1bede:	e7fe      	b.n	1bede <xTaskIncrementTick+0x6a>
   1bee0:	4b51      	ldr	r3, [pc, #324]	; (1c028 <xTaskIncrementTick+0x1b4>)
   1bee2:	681b      	ldr	r3, [r3, #0]
   1bee4:	60fb      	str	r3, [r7, #12]
   1bee6:	4b51      	ldr	r3, [pc, #324]	; (1c02c <xTaskIncrementTick+0x1b8>)
   1bee8:	681a      	ldr	r2, [r3, #0]
   1beea:	4b4f      	ldr	r3, [pc, #316]	; (1c028 <xTaskIncrementTick+0x1b4>)
   1beec:	601a      	str	r2, [r3, #0]
   1beee:	4b4f      	ldr	r3, [pc, #316]	; (1c02c <xTaskIncrementTick+0x1b8>)
   1bef0:	68fa      	ldr	r2, [r7, #12]
   1bef2:	601a      	str	r2, [r3, #0]
   1bef4:	4b4e      	ldr	r3, [pc, #312]	; (1c030 <xTaskIncrementTick+0x1bc>)
   1bef6:	681b      	ldr	r3, [r3, #0]
   1bef8:	1c5a      	adds	r2, r3, #1
   1befa:	4b4d      	ldr	r3, [pc, #308]	; (1c030 <xTaskIncrementTick+0x1bc>)
   1befc:	601a      	str	r2, [r3, #0]
   1befe:	4b4d      	ldr	r3, [pc, #308]	; (1c034 <xTaskIncrementTick+0x1c0>)
   1bf00:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1bf02:	4b4d      	ldr	r3, [pc, #308]	; (1c038 <xTaskIncrementTick+0x1c4>)
   1bf04:	681b      	ldr	r3, [r3, #0]
   1bf06:	693a      	ldr	r2, [r7, #16]
   1bf08:	429a      	cmp	r2, r3
   1bf0a:	d363      	bcc.n	1bfd4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1bf0c:	4b46      	ldr	r3, [pc, #280]	; (1c028 <xTaskIncrementTick+0x1b4>)
   1bf0e:	681b      	ldr	r3, [r3, #0]
   1bf10:	681b      	ldr	r3, [r3, #0]
   1bf12:	2b00      	cmp	r3, #0
   1bf14:	d101      	bne.n	1bf1a <xTaskIncrementTick+0xa6>
   1bf16:	2301      	movs	r3, #1
   1bf18:	e000      	b.n	1bf1c <xTaskIncrementTick+0xa8>
   1bf1a:	2300      	movs	r3, #0
   1bf1c:	2b00      	cmp	r3, #0
   1bf1e:	d004      	beq.n	1bf2a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bf20:	4b45      	ldr	r3, [pc, #276]	; (1c038 <xTaskIncrementTick+0x1c4>)
   1bf22:	2201      	movs	r2, #1
   1bf24:	4252      	negs	r2, r2
   1bf26:	601a      	str	r2, [r3, #0]
					break;
   1bf28:	e054      	b.n	1bfd4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1bf2a:	4b3f      	ldr	r3, [pc, #252]	; (1c028 <xTaskIncrementTick+0x1b4>)
   1bf2c:	681b      	ldr	r3, [r3, #0]
   1bf2e:	68db      	ldr	r3, [r3, #12]
   1bf30:	68db      	ldr	r3, [r3, #12]
   1bf32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1bf34:	68bb      	ldr	r3, [r7, #8]
   1bf36:	685b      	ldr	r3, [r3, #4]
   1bf38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1bf3a:	693a      	ldr	r2, [r7, #16]
   1bf3c:	687b      	ldr	r3, [r7, #4]
   1bf3e:	429a      	cmp	r2, r3
   1bf40:	d203      	bcs.n	1bf4a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1bf42:	4b3d      	ldr	r3, [pc, #244]	; (1c038 <xTaskIncrementTick+0x1c4>)
   1bf44:	687a      	ldr	r2, [r7, #4]
   1bf46:	601a      	str	r2, [r3, #0]
						break;
   1bf48:	e044      	b.n	1bfd4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1bf4a:	68bb      	ldr	r3, [r7, #8]
   1bf4c:	3304      	adds	r3, #4
   1bf4e:	0018      	movs	r0, r3
   1bf50:	4b3a      	ldr	r3, [pc, #232]	; (1c03c <xTaskIncrementTick+0x1c8>)
   1bf52:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1bf54:	68bb      	ldr	r3, [r7, #8]
   1bf56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bf58:	2b00      	cmp	r3, #0
   1bf5a:	d004      	beq.n	1bf66 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1bf5c:	68bb      	ldr	r3, [r7, #8]
   1bf5e:	3318      	adds	r3, #24
   1bf60:	0018      	movs	r0, r3
   1bf62:	4b36      	ldr	r3, [pc, #216]	; (1c03c <xTaskIncrementTick+0x1c8>)
   1bf64:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1bf66:	68bb      	ldr	r3, [r7, #8]
   1bf68:	0018      	movs	r0, r3
   1bf6a:	4b35      	ldr	r3, [pc, #212]	; (1c040 <xTaskIncrementTick+0x1cc>)
   1bf6c:	4798      	blx	r3
   1bf6e:	0003      	movs	r3, r0
   1bf70:	001a      	movs	r2, r3
   1bf72:	4b34      	ldr	r3, [pc, #208]	; (1c044 <xTaskIncrementTick+0x1d0>)
   1bf74:	881b      	ldrh	r3, [r3, #0]
   1bf76:	4013      	ands	r3, r2
   1bf78:	b29b      	uxth	r3, r3
   1bf7a:	2b00      	cmp	r3, #0
   1bf7c:	d008      	beq.n	1bf90 <xTaskIncrementTick+0x11c>
   1bf7e:	68bb      	ldr	r3, [r7, #8]
   1bf80:	0018      	movs	r0, r3
   1bf82:	4b31      	ldr	r3, [pc, #196]	; (1c048 <xTaskIncrementTick+0x1d4>)
   1bf84:	4798      	blx	r3
   1bf86:	0003      	movs	r3, r0
   1bf88:	b2db      	uxtb	r3, r3
   1bf8a:	0018      	movs	r0, r3
   1bf8c:	4b2f      	ldr	r3, [pc, #188]	; (1c04c <xTaskIncrementTick+0x1d8>)
   1bf8e:	4798      	blx	r3
   1bf90:	68bb      	ldr	r3, [r7, #8]
   1bf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf94:	4b2e      	ldr	r3, [pc, #184]	; (1c050 <xTaskIncrementTick+0x1dc>)
   1bf96:	681b      	ldr	r3, [r3, #0]
   1bf98:	429a      	cmp	r2, r3
   1bf9a:	d903      	bls.n	1bfa4 <xTaskIncrementTick+0x130>
   1bf9c:	68bb      	ldr	r3, [r7, #8]
   1bf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfa0:	4b2b      	ldr	r3, [pc, #172]	; (1c050 <xTaskIncrementTick+0x1dc>)
   1bfa2:	601a      	str	r2, [r3, #0]
   1bfa4:	68bb      	ldr	r3, [r7, #8]
   1bfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfa8:	0013      	movs	r3, r2
   1bfaa:	009b      	lsls	r3, r3, #2
   1bfac:	189b      	adds	r3, r3, r2
   1bfae:	009b      	lsls	r3, r3, #2
   1bfb0:	4a28      	ldr	r2, [pc, #160]	; (1c054 <xTaskIncrementTick+0x1e0>)
   1bfb2:	189a      	adds	r2, r3, r2
   1bfb4:	68bb      	ldr	r3, [r7, #8]
   1bfb6:	3304      	adds	r3, #4
   1bfb8:	0019      	movs	r1, r3
   1bfba:	0010      	movs	r0, r2
   1bfbc:	4b26      	ldr	r3, [pc, #152]	; (1c058 <xTaskIncrementTick+0x1e4>)
   1bfbe:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1bfc0:	68bb      	ldr	r3, [r7, #8]
   1bfc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfc4:	4b25      	ldr	r3, [pc, #148]	; (1c05c <xTaskIncrementTick+0x1e8>)
   1bfc6:	681b      	ldr	r3, [r3, #0]
   1bfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bfca:	429a      	cmp	r2, r3
   1bfcc:	d39e      	bcc.n	1bf0c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1bfce:	2301      	movs	r3, #1
   1bfd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1bfd2:	e79b      	b.n	1bf0c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1bfd4:	4b21      	ldr	r3, [pc, #132]	; (1c05c <xTaskIncrementTick+0x1e8>)
   1bfd6:	681b      	ldr	r3, [r3, #0]
   1bfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfda:	491e      	ldr	r1, [pc, #120]	; (1c054 <xTaskIncrementTick+0x1e0>)
   1bfdc:	0013      	movs	r3, r2
   1bfde:	009b      	lsls	r3, r3, #2
   1bfe0:	189b      	adds	r3, r3, r2
   1bfe2:	009b      	lsls	r3, r3, #2
   1bfe4:	585b      	ldr	r3, [r3, r1]
   1bfe6:	2b01      	cmp	r3, #1
   1bfe8:	d907      	bls.n	1bffa <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1bfea:	2301      	movs	r3, #1
   1bfec:	617b      	str	r3, [r7, #20]
   1bfee:	e004      	b.n	1bffa <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1bff0:	4b08      	ldr	r3, [pc, #32]	; (1c014 <xTaskIncrementTick+0x1a0>)
   1bff2:	681b      	ldr	r3, [r3, #0]
   1bff4:	1c5a      	adds	r2, r3, #1
   1bff6:	4b07      	ldr	r3, [pc, #28]	; (1c014 <xTaskIncrementTick+0x1a0>)
   1bff8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1bffa:	4b19      	ldr	r3, [pc, #100]	; (1c060 <xTaskIncrementTick+0x1ec>)
   1bffc:	681b      	ldr	r3, [r3, #0]
   1bffe:	2b00      	cmp	r3, #0
   1c000:	d001      	beq.n	1c006 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c002:	2301      	movs	r3, #1
   1c004:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c006:	697b      	ldr	r3, [r7, #20]
}
   1c008:	0018      	movs	r0, r3
   1c00a:	46bd      	mov	sp, r7
   1c00c:	b006      	add	sp, #24
   1c00e:	bd80      	pop	{r7, pc}
   1c010:	20004058 	.word	0x20004058
   1c014:	20004040 	.word	0x20004040
   1c018:	20000bb8 	.word	0x20000bb8
   1c01c:	000196a9 	.word	0x000196a9
   1c020:	20004034 	.word	0x20004034
   1c024:	00018715 	.word	0x00018715
   1c028:	20003fe8 	.word	0x20003fe8
   1c02c:	20003fec 	.word	0x20003fec
   1c030:	20004048 	.word	0x20004048
   1c034:	0001c6d5 	.word	0x0001c6d5
   1c038:	20004050 	.word	0x20004050
   1c03c:	0001988f 	.word	0x0001988f
   1c040:	00017a15 	.word	0x00017a15
   1c044:	20000108 	.word	0x20000108
   1c048:	000179f5 	.word	0x000179f5
   1c04c:	000181c5 	.word	0x000181c5
   1c050:	20004038 	.word	0x20004038
   1c054:	20003f5c 	.word	0x20003f5c
   1c058:	000197df 	.word	0x000197df
   1c05c:	20003f58 	.word	0x20003f58
   1c060:	20004044 	.word	0x20004044

0001c064 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c064:	b580      	push	{r7, lr}
   1c066:	b082      	sub	sp, #8
   1c068:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c06a:	4b3a      	ldr	r3, [pc, #232]	; (1c154 <vTaskSwitchContext+0xf0>)
   1c06c:	681b      	ldr	r3, [r3, #0]
   1c06e:	2b00      	cmp	r3, #0
   1c070:	d003      	beq.n	1c07a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c072:	4b39      	ldr	r3, [pc, #228]	; (1c158 <vTaskSwitchContext+0xf4>)
   1c074:	2201      	movs	r2, #1
   1c076:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c078:	e067      	b.n	1c14a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c07a:	4b37      	ldr	r3, [pc, #220]	; (1c158 <vTaskSwitchContext+0xf4>)
   1c07c:	2200      	movs	r2, #0
   1c07e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c080:	4b36      	ldr	r3, [pc, #216]	; (1c15c <vTaskSwitchContext+0xf8>)
   1c082:	681b      	ldr	r3, [r3, #0]
   1c084:	681a      	ldr	r2, [r3, #0]
   1c086:	4b35      	ldr	r3, [pc, #212]	; (1c15c <vTaskSwitchContext+0xf8>)
   1c088:	681b      	ldr	r3, [r3, #0]
   1c08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c08c:	429a      	cmp	r2, r3
   1c08e:	d808      	bhi.n	1c0a2 <vTaskSwitchContext+0x3e>
   1c090:	4b32      	ldr	r3, [pc, #200]	; (1c15c <vTaskSwitchContext+0xf8>)
   1c092:	681a      	ldr	r2, [r3, #0]
   1c094:	4b31      	ldr	r3, [pc, #196]	; (1c15c <vTaskSwitchContext+0xf8>)
   1c096:	681b      	ldr	r3, [r3, #0]
   1c098:	3334      	adds	r3, #52	; 0x34
   1c09a:	0019      	movs	r1, r3
   1c09c:	0010      	movs	r0, r2
   1c09e:	4b30      	ldr	r3, [pc, #192]	; (1c160 <vTaskSwitchContext+0xfc>)
   1c0a0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c0a2:	4b30      	ldr	r3, [pc, #192]	; (1c164 <vTaskSwitchContext+0x100>)
   1c0a4:	681b      	ldr	r3, [r3, #0]
   1c0a6:	607b      	str	r3, [r7, #4]
   1c0a8:	e007      	b.n	1c0ba <vTaskSwitchContext+0x56>
   1c0aa:	687b      	ldr	r3, [r7, #4]
   1c0ac:	2b00      	cmp	r3, #0
   1c0ae:	d101      	bne.n	1c0b4 <vTaskSwitchContext+0x50>
   1c0b0:	b672      	cpsid	i
   1c0b2:	e7fe      	b.n	1c0b2 <vTaskSwitchContext+0x4e>
   1c0b4:	687b      	ldr	r3, [r7, #4]
   1c0b6:	3b01      	subs	r3, #1
   1c0b8:	607b      	str	r3, [r7, #4]
   1c0ba:	492b      	ldr	r1, [pc, #172]	; (1c168 <vTaskSwitchContext+0x104>)
   1c0bc:	687a      	ldr	r2, [r7, #4]
   1c0be:	0013      	movs	r3, r2
   1c0c0:	009b      	lsls	r3, r3, #2
   1c0c2:	189b      	adds	r3, r3, r2
   1c0c4:	009b      	lsls	r3, r3, #2
   1c0c6:	585b      	ldr	r3, [r3, r1]
   1c0c8:	2b00      	cmp	r3, #0
   1c0ca:	d0ee      	beq.n	1c0aa <vTaskSwitchContext+0x46>
   1c0cc:	687a      	ldr	r2, [r7, #4]
   1c0ce:	0013      	movs	r3, r2
   1c0d0:	009b      	lsls	r3, r3, #2
   1c0d2:	189b      	adds	r3, r3, r2
   1c0d4:	009b      	lsls	r3, r3, #2
   1c0d6:	4a24      	ldr	r2, [pc, #144]	; (1c168 <vTaskSwitchContext+0x104>)
   1c0d8:	189b      	adds	r3, r3, r2
   1c0da:	603b      	str	r3, [r7, #0]
   1c0dc:	683b      	ldr	r3, [r7, #0]
   1c0de:	685b      	ldr	r3, [r3, #4]
   1c0e0:	685a      	ldr	r2, [r3, #4]
   1c0e2:	683b      	ldr	r3, [r7, #0]
   1c0e4:	605a      	str	r2, [r3, #4]
   1c0e6:	683b      	ldr	r3, [r7, #0]
   1c0e8:	685a      	ldr	r2, [r3, #4]
   1c0ea:	683b      	ldr	r3, [r7, #0]
   1c0ec:	3308      	adds	r3, #8
   1c0ee:	429a      	cmp	r2, r3
   1c0f0:	d104      	bne.n	1c0fc <vTaskSwitchContext+0x98>
   1c0f2:	683b      	ldr	r3, [r7, #0]
   1c0f4:	685b      	ldr	r3, [r3, #4]
   1c0f6:	685a      	ldr	r2, [r3, #4]
   1c0f8:	683b      	ldr	r3, [r7, #0]
   1c0fa:	605a      	str	r2, [r3, #4]
   1c0fc:	683b      	ldr	r3, [r7, #0]
   1c0fe:	685b      	ldr	r3, [r3, #4]
   1c100:	68da      	ldr	r2, [r3, #12]
   1c102:	4b16      	ldr	r3, [pc, #88]	; (1c15c <vTaskSwitchContext+0xf8>)
   1c104:	601a      	str	r2, [r3, #0]
   1c106:	4b17      	ldr	r3, [pc, #92]	; (1c164 <vTaskSwitchContext+0x100>)
   1c108:	687a      	ldr	r2, [r7, #4]
   1c10a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c10c:	4b17      	ldr	r3, [pc, #92]	; (1c16c <vTaskSwitchContext+0x108>)
   1c10e:	2201      	movs	r2, #1
   1c110:	601a      	str	r2, [r3, #0]
   1c112:	4b17      	ldr	r3, [pc, #92]	; (1c170 <vTaskSwitchContext+0x10c>)
   1c114:	4798      	blx	r3
   1c116:	0003      	movs	r3, r0
   1c118:	0018      	movs	r0, r3
   1c11a:	4b16      	ldr	r3, [pc, #88]	; (1c174 <vTaskSwitchContext+0x110>)
   1c11c:	4798      	blx	r3
   1c11e:	0003      	movs	r3, r0
   1c120:	001a      	movs	r2, r3
   1c122:	4b15      	ldr	r3, [pc, #84]	; (1c178 <vTaskSwitchContext+0x114>)
   1c124:	881b      	ldrh	r3, [r3, #0]
   1c126:	4013      	ands	r3, r2
   1c128:	b29b      	uxth	r3, r3
   1c12a:	2b00      	cmp	r3, #0
   1c12c:	d00a      	beq.n	1c144 <vTaskSwitchContext+0xe0>
   1c12e:	4b10      	ldr	r3, [pc, #64]	; (1c170 <vTaskSwitchContext+0x10c>)
   1c130:	4798      	blx	r3
   1c132:	0003      	movs	r3, r0
   1c134:	0018      	movs	r0, r3
   1c136:	4b11      	ldr	r3, [pc, #68]	; (1c17c <vTaskSwitchContext+0x118>)
   1c138:	4798      	blx	r3
   1c13a:	0003      	movs	r3, r0
   1c13c:	b2db      	uxtb	r3, r3
   1c13e:	0018      	movs	r0, r3
   1c140:	4b0f      	ldr	r3, [pc, #60]	; (1c180 <vTaskSwitchContext+0x11c>)
   1c142:	4798      	blx	r3
   1c144:	4b09      	ldr	r3, [pc, #36]	; (1c16c <vTaskSwitchContext+0x108>)
   1c146:	2202      	movs	r2, #2
   1c148:	601a      	str	r2, [r3, #0]
}
   1c14a:	46c0      	nop			; (mov r8, r8)
   1c14c:	46bd      	mov	sp, r7
   1c14e:	b002      	add	sp, #8
   1c150:	bd80      	pop	{r7, pc}
   1c152:	46c0      	nop			; (mov r8, r8)
   1c154:	20004058 	.word	0x20004058
   1c158:	20004044 	.word	0x20004044
   1c15c:	20003f58 	.word	0x20003f58
   1c160:	0003222d 	.word	0x0003222d
   1c164:	20004038 	.word	0x20004038
   1c168:	20003f5c 	.word	0x20003f5c
   1c16c:	20000bc4 	.word	0x20000bc4
   1c170:	00017cb1 	.word	0x00017cb1
   1c174:	00017a15 	.word	0x00017a15
   1c178:	20000108 	.word	0x20000108
   1c17c:	000179f5 	.word	0x000179f5
   1c180:	00018811 	.word	0x00018811

0001c184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c184:	b580      	push	{r7, lr}
   1c186:	b082      	sub	sp, #8
   1c188:	af00      	add	r7, sp, #0
   1c18a:	6078      	str	r0, [r7, #4]
   1c18c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c18e:	687b      	ldr	r3, [r7, #4]
   1c190:	2b00      	cmp	r3, #0
   1c192:	d101      	bne.n	1c198 <vTaskPlaceOnEventList+0x14>
   1c194:	b672      	cpsid	i
   1c196:	e7fe      	b.n	1c196 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c198:	4b08      	ldr	r3, [pc, #32]	; (1c1bc <vTaskPlaceOnEventList+0x38>)
   1c19a:	681b      	ldr	r3, [r3, #0]
   1c19c:	3318      	adds	r3, #24
   1c19e:	001a      	movs	r2, r3
   1c1a0:	687b      	ldr	r3, [r7, #4]
   1c1a2:	0011      	movs	r1, r2
   1c1a4:	0018      	movs	r0, r3
   1c1a6:	4b06      	ldr	r3, [pc, #24]	; (1c1c0 <vTaskPlaceOnEventList+0x3c>)
   1c1a8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c1aa:	683b      	ldr	r3, [r7, #0]
   1c1ac:	2101      	movs	r1, #1
   1c1ae:	0018      	movs	r0, r3
   1c1b0:	4b04      	ldr	r3, [pc, #16]	; (1c1c4 <vTaskPlaceOnEventList+0x40>)
   1c1b2:	4798      	blx	r3
}
   1c1b4:	46c0      	nop			; (mov r8, r8)
   1c1b6:	46bd      	mov	sp, r7
   1c1b8:	b002      	add	sp, #8
   1c1ba:	bd80      	pop	{r7, pc}
   1c1bc:	20003f58 	.word	0x20003f58
   1c1c0:	00019823 	.word	0x00019823
   1c1c4:	0001cc29 	.word	0x0001cc29

0001c1c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c1c8:	b580      	push	{r7, lr}
   1c1ca:	b084      	sub	sp, #16
   1c1cc:	af00      	add	r7, sp, #0
   1c1ce:	60f8      	str	r0, [r7, #12]
   1c1d0:	60b9      	str	r1, [r7, #8]
   1c1d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c1d4:	68fb      	ldr	r3, [r7, #12]
   1c1d6:	2b00      	cmp	r3, #0
   1c1d8:	d101      	bne.n	1c1de <vTaskPlaceOnEventListRestricted+0x16>
   1c1da:	b672      	cpsid	i
   1c1dc:	e7fe      	b.n	1c1dc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c1de:	4b28      	ldr	r3, [pc, #160]	; (1c280 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c1e0:	681b      	ldr	r3, [r3, #0]
   1c1e2:	3318      	adds	r3, #24
   1c1e4:	001a      	movs	r2, r3
   1c1e6:	68fb      	ldr	r3, [r7, #12]
   1c1e8:	0011      	movs	r1, r2
   1c1ea:	0018      	movs	r0, r3
   1c1ec:	4b25      	ldr	r3, [pc, #148]	; (1c284 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c1ee:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c1f0:	687b      	ldr	r3, [r7, #4]
   1c1f2:	2b00      	cmp	r3, #0
   1c1f4:	d002      	beq.n	1c1fc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c1f6:	2301      	movs	r3, #1
   1c1f8:	425b      	negs	r3, r3
   1c1fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c1fc:	4b20      	ldr	r3, [pc, #128]	; (1c280 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c1fe:	681b      	ldr	r3, [r3, #0]
   1c200:	0018      	movs	r0, r3
   1c202:	4b21      	ldr	r3, [pc, #132]	; (1c288 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c204:	4798      	blx	r3
   1c206:	0003      	movs	r3, r0
   1c208:	001a      	movs	r2, r3
   1c20a:	4b20      	ldr	r3, [pc, #128]	; (1c28c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c20c:	881b      	ldrh	r3, [r3, #0]
   1c20e:	4013      	ands	r3, r2
   1c210:	b29b      	uxth	r3, r3
   1c212:	2b00      	cmp	r3, #0
   1c214:	d011      	beq.n	1c23a <vTaskPlaceOnEventListRestricted+0x72>
   1c216:	4b1e      	ldr	r3, [pc, #120]	; (1c290 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c218:	681a      	ldr	r2, [r3, #0]
   1c21a:	68bb      	ldr	r3, [r7, #8]
   1c21c:	18d3      	adds	r3, r2, r3
   1c21e:	0019      	movs	r1, r3
   1c220:	2088      	movs	r0, #136	; 0x88
   1c222:	4b1c      	ldr	r3, [pc, #112]	; (1c294 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c224:	4798      	blx	r3
   1c226:	4b16      	ldr	r3, [pc, #88]	; (1c280 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c228:	681b      	ldr	r3, [r3, #0]
   1c22a:	0018      	movs	r0, r3
   1c22c:	4b1a      	ldr	r3, [pc, #104]	; (1c298 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c22e:	4798      	blx	r3
   1c230:	0003      	movs	r3, r0
   1c232:	b2db      	uxtb	r3, r3
   1c234:	0018      	movs	r0, r3
   1c236:	4b19      	ldr	r3, [pc, #100]	; (1c29c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c238:	4798      	blx	r3
   1c23a:	4b19      	ldr	r3, [pc, #100]	; (1c2a0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c23c:	4798      	blx	r3
   1c23e:	0003      	movs	r3, r0
   1c240:	0018      	movs	r0, r3
   1c242:	4b11      	ldr	r3, [pc, #68]	; (1c288 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c244:	4798      	blx	r3
   1c246:	0003      	movs	r3, r0
   1c248:	001a      	movs	r2, r3
   1c24a:	4b10      	ldr	r3, [pc, #64]	; (1c28c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c24c:	881b      	ldrh	r3, [r3, #0]
   1c24e:	4013      	ands	r3, r2
   1c250:	b29b      	uxth	r3, r3
   1c252:	2b00      	cmp	r3, #0
   1c254:	d00a      	beq.n	1c26c <vTaskPlaceOnEventListRestricted+0xa4>
   1c256:	4b12      	ldr	r3, [pc, #72]	; (1c2a0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c258:	4798      	blx	r3
   1c25a:	0003      	movs	r3, r0
   1c25c:	0018      	movs	r0, r3
   1c25e:	4b0e      	ldr	r3, [pc, #56]	; (1c298 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c260:	4798      	blx	r3
   1c262:	0003      	movs	r3, r0
   1c264:	b2db      	uxtb	r3, r3
   1c266:	0018      	movs	r0, r3
   1c268:	4b0c      	ldr	r3, [pc, #48]	; (1c29c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c26a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1c26c:	687a      	ldr	r2, [r7, #4]
   1c26e:	68bb      	ldr	r3, [r7, #8]
   1c270:	0011      	movs	r1, r2
   1c272:	0018      	movs	r0, r3
   1c274:	4b0b      	ldr	r3, [pc, #44]	; (1c2a4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1c276:	4798      	blx	r3
	}
   1c278:	46c0      	nop			; (mov r8, r8)
   1c27a:	46bd      	mov	sp, r7
   1c27c:	b004      	add	sp, #16
   1c27e:	bd80      	pop	{r7, pc}
   1c280:	20003f58 	.word	0x20003f58
   1c284:	000197df 	.word	0x000197df
   1c288:	00017a15 	.word	0x00017a15
   1c28c:	20000108 	.word	0x20000108
   1c290:	20004034 	.word	0x20004034
   1c294:	00018715 	.word	0x00018715
   1c298:	000179f5 	.word	0x000179f5
   1c29c:	00018ba5 	.word	0x00018ba5
   1c2a0:	00017cb1 	.word	0x00017cb1
   1c2a4:	0001cc29 	.word	0x0001cc29

0001c2a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1c2a8:	b580      	push	{r7, lr}
   1c2aa:	b084      	sub	sp, #16
   1c2ac:	af00      	add	r7, sp, #0
   1c2ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1c2b0:	687b      	ldr	r3, [r7, #4]
   1c2b2:	68db      	ldr	r3, [r3, #12]
   1c2b4:	68db      	ldr	r3, [r3, #12]
   1c2b6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1c2b8:	68bb      	ldr	r3, [r7, #8]
   1c2ba:	2b00      	cmp	r3, #0
   1c2bc:	d101      	bne.n	1c2c2 <xTaskRemoveFromEventList+0x1a>
   1c2be:	b672      	cpsid	i
   1c2c0:	e7fe      	b.n	1c2c0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1c2c2:	68bb      	ldr	r3, [r7, #8]
   1c2c4:	3318      	adds	r3, #24
   1c2c6:	0018      	movs	r0, r3
   1c2c8:	4b2a      	ldr	r3, [pc, #168]	; (1c374 <xTaskRemoveFromEventList+0xcc>)
   1c2ca:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c2cc:	4b2a      	ldr	r3, [pc, #168]	; (1c378 <xTaskRemoveFromEventList+0xd0>)
   1c2ce:	681b      	ldr	r3, [r3, #0]
   1c2d0:	2b00      	cmp	r3, #0
   1c2d2:	d132      	bne.n	1c33a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1c2d4:	68bb      	ldr	r3, [r7, #8]
   1c2d6:	3304      	adds	r3, #4
   1c2d8:	0018      	movs	r0, r3
   1c2da:	4b26      	ldr	r3, [pc, #152]	; (1c374 <xTaskRemoveFromEventList+0xcc>)
   1c2dc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1c2de:	68bb      	ldr	r3, [r7, #8]
   1c2e0:	0018      	movs	r0, r3
   1c2e2:	4b26      	ldr	r3, [pc, #152]	; (1c37c <xTaskRemoveFromEventList+0xd4>)
   1c2e4:	4798      	blx	r3
   1c2e6:	0003      	movs	r3, r0
   1c2e8:	001a      	movs	r2, r3
   1c2ea:	4b25      	ldr	r3, [pc, #148]	; (1c380 <xTaskRemoveFromEventList+0xd8>)
   1c2ec:	881b      	ldrh	r3, [r3, #0]
   1c2ee:	4013      	ands	r3, r2
   1c2f0:	b29b      	uxth	r3, r3
   1c2f2:	2b00      	cmp	r3, #0
   1c2f4:	d008      	beq.n	1c308 <xTaskRemoveFromEventList+0x60>
   1c2f6:	68bb      	ldr	r3, [r7, #8]
   1c2f8:	0018      	movs	r0, r3
   1c2fa:	4b22      	ldr	r3, [pc, #136]	; (1c384 <xTaskRemoveFromEventList+0xdc>)
   1c2fc:	4798      	blx	r3
   1c2fe:	0003      	movs	r3, r0
   1c300:	b2db      	uxtb	r3, r3
   1c302:	0018      	movs	r0, r3
   1c304:	4b20      	ldr	r3, [pc, #128]	; (1c388 <xTaskRemoveFromEventList+0xe0>)
   1c306:	4798      	blx	r3
   1c308:	68bb      	ldr	r3, [r7, #8]
   1c30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c30c:	4b1f      	ldr	r3, [pc, #124]	; (1c38c <xTaskRemoveFromEventList+0xe4>)
   1c30e:	681b      	ldr	r3, [r3, #0]
   1c310:	429a      	cmp	r2, r3
   1c312:	d903      	bls.n	1c31c <xTaskRemoveFromEventList+0x74>
   1c314:	68bb      	ldr	r3, [r7, #8]
   1c316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c318:	4b1c      	ldr	r3, [pc, #112]	; (1c38c <xTaskRemoveFromEventList+0xe4>)
   1c31a:	601a      	str	r2, [r3, #0]
   1c31c:	68bb      	ldr	r3, [r7, #8]
   1c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c320:	0013      	movs	r3, r2
   1c322:	009b      	lsls	r3, r3, #2
   1c324:	189b      	adds	r3, r3, r2
   1c326:	009b      	lsls	r3, r3, #2
   1c328:	4a19      	ldr	r2, [pc, #100]	; (1c390 <xTaskRemoveFromEventList+0xe8>)
   1c32a:	189a      	adds	r2, r3, r2
   1c32c:	68bb      	ldr	r3, [r7, #8]
   1c32e:	3304      	adds	r3, #4
   1c330:	0019      	movs	r1, r3
   1c332:	0010      	movs	r0, r2
   1c334:	4b17      	ldr	r3, [pc, #92]	; (1c394 <xTaskRemoveFromEventList+0xec>)
   1c336:	4798      	blx	r3
   1c338:	e007      	b.n	1c34a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1c33a:	68bb      	ldr	r3, [r7, #8]
   1c33c:	3318      	adds	r3, #24
   1c33e:	001a      	movs	r2, r3
   1c340:	4b15      	ldr	r3, [pc, #84]	; (1c398 <xTaskRemoveFromEventList+0xf0>)
   1c342:	0011      	movs	r1, r2
   1c344:	0018      	movs	r0, r3
   1c346:	4b13      	ldr	r3, [pc, #76]	; (1c394 <xTaskRemoveFromEventList+0xec>)
   1c348:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1c34a:	68bb      	ldr	r3, [r7, #8]
   1c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c34e:	4b13      	ldr	r3, [pc, #76]	; (1c39c <xTaskRemoveFromEventList+0xf4>)
   1c350:	681b      	ldr	r3, [r3, #0]
   1c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c354:	429a      	cmp	r2, r3
   1c356:	d905      	bls.n	1c364 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1c358:	2301      	movs	r3, #1
   1c35a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1c35c:	4b10      	ldr	r3, [pc, #64]	; (1c3a0 <xTaskRemoveFromEventList+0xf8>)
   1c35e:	2201      	movs	r2, #1
   1c360:	601a      	str	r2, [r3, #0]
   1c362:	e001      	b.n	1c368 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1c364:	2300      	movs	r3, #0
   1c366:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1c368:	68fb      	ldr	r3, [r7, #12]
}
   1c36a:	0018      	movs	r0, r3
   1c36c:	46bd      	mov	sp, r7
   1c36e:	b004      	add	sp, #16
   1c370:	bd80      	pop	{r7, pc}
   1c372:	46c0      	nop			; (mov r8, r8)
   1c374:	0001988f 	.word	0x0001988f
   1c378:	20004058 	.word	0x20004058
   1c37c:	00017a15 	.word	0x00017a15
   1c380:	20000108 	.word	0x20000108
   1c384:	000179f5 	.word	0x000179f5
   1c388:	000181c5 	.word	0x000181c5
   1c38c:	20004038 	.word	0x20004038
   1c390:	20003f5c 	.word	0x20003f5c
   1c394:	000197df 	.word	0x000197df
   1c398:	20003ff0 	.word	0x20003ff0
   1c39c:	20003f58 	.word	0x20003f58
   1c3a0:	20004044 	.word	0x20004044

0001c3a4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c3a4:	b580      	push	{r7, lr}
   1c3a6:	b082      	sub	sp, #8
   1c3a8:	af00      	add	r7, sp, #0
   1c3aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1c3ac:	687b      	ldr	r3, [r7, #4]
   1c3ae:	2b00      	cmp	r3, #0
   1c3b0:	d101      	bne.n	1c3b6 <vTaskSetTimeOutState+0x12>
   1c3b2:	b672      	cpsid	i
   1c3b4:	e7fe      	b.n	1c3b4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1c3b6:	4b08      	ldr	r3, [pc, #32]	; (1c3d8 <vTaskSetTimeOutState+0x34>)
   1c3b8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c3ba:	4b08      	ldr	r3, [pc, #32]	; (1c3dc <vTaskSetTimeOutState+0x38>)
   1c3bc:	681a      	ldr	r2, [r3, #0]
   1c3be:	687b      	ldr	r3, [r7, #4]
   1c3c0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1c3c2:	4b07      	ldr	r3, [pc, #28]	; (1c3e0 <vTaskSetTimeOutState+0x3c>)
   1c3c4:	681a      	ldr	r2, [r3, #0]
   1c3c6:	687b      	ldr	r3, [r7, #4]
   1c3c8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1c3ca:	4b06      	ldr	r3, [pc, #24]	; (1c3e4 <vTaskSetTimeOutState+0x40>)
   1c3cc:	4798      	blx	r3
}
   1c3ce:	46c0      	nop			; (mov r8, r8)
   1c3d0:	46bd      	mov	sp, r7
   1c3d2:	b002      	add	sp, #8
   1c3d4:	bd80      	pop	{r7, pc}
   1c3d6:	46c0      	nop			; (mov r8, r8)
   1c3d8:	00019a19 	.word	0x00019a19
   1c3dc:	20004048 	.word	0x20004048
   1c3e0:	20004034 	.word	0x20004034
   1c3e4:	00019a3d 	.word	0x00019a3d

0001c3e8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c3e8:	b580      	push	{r7, lr}
   1c3ea:	b082      	sub	sp, #8
   1c3ec:	af00      	add	r7, sp, #0
   1c3ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c3f0:	4b05      	ldr	r3, [pc, #20]	; (1c408 <vTaskInternalSetTimeOutState+0x20>)
   1c3f2:	681a      	ldr	r2, [r3, #0]
   1c3f4:	687b      	ldr	r3, [r7, #4]
   1c3f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1c3f8:	4b04      	ldr	r3, [pc, #16]	; (1c40c <vTaskInternalSetTimeOutState+0x24>)
   1c3fa:	681a      	ldr	r2, [r3, #0]
   1c3fc:	687b      	ldr	r3, [r7, #4]
   1c3fe:	605a      	str	r2, [r3, #4]
}
   1c400:	46c0      	nop			; (mov r8, r8)
   1c402:	46bd      	mov	sp, r7
   1c404:	b002      	add	sp, #8
   1c406:	bd80      	pop	{r7, pc}
   1c408:	20004048 	.word	0x20004048
   1c40c:	20004034 	.word	0x20004034

0001c410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1c410:	b580      	push	{r7, lr}
   1c412:	b086      	sub	sp, #24
   1c414:	af00      	add	r7, sp, #0
   1c416:	6078      	str	r0, [r7, #4]
   1c418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1c41a:	687b      	ldr	r3, [r7, #4]
   1c41c:	2b00      	cmp	r3, #0
   1c41e:	d101      	bne.n	1c424 <xTaskCheckForTimeOut+0x14>
   1c420:	b672      	cpsid	i
   1c422:	e7fe      	b.n	1c422 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1c424:	683b      	ldr	r3, [r7, #0]
   1c426:	2b00      	cmp	r3, #0
   1c428:	d101      	bne.n	1c42e <xTaskCheckForTimeOut+0x1e>
   1c42a:	b672      	cpsid	i
   1c42c:	e7fe      	b.n	1c42c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1c42e:	4b1e      	ldr	r3, [pc, #120]	; (1c4a8 <xTaskCheckForTimeOut+0x98>)
   1c430:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1c432:	4b1e      	ldr	r3, [pc, #120]	; (1c4ac <xTaskCheckForTimeOut+0x9c>)
   1c434:	681b      	ldr	r3, [r3, #0]
   1c436:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1c438:	687b      	ldr	r3, [r7, #4]
   1c43a:	685b      	ldr	r3, [r3, #4]
   1c43c:	693a      	ldr	r2, [r7, #16]
   1c43e:	1ad3      	subs	r3, r2, r3
   1c440:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1c442:	683b      	ldr	r3, [r7, #0]
   1c444:	681b      	ldr	r3, [r3, #0]
   1c446:	3301      	adds	r3, #1
   1c448:	d102      	bne.n	1c450 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1c44a:	2300      	movs	r3, #0
   1c44c:	617b      	str	r3, [r7, #20]
   1c44e:	e024      	b.n	1c49a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1c450:	687b      	ldr	r3, [r7, #4]
   1c452:	681a      	ldr	r2, [r3, #0]
   1c454:	4b16      	ldr	r3, [pc, #88]	; (1c4b0 <xTaskCheckForTimeOut+0xa0>)
   1c456:	681b      	ldr	r3, [r3, #0]
   1c458:	429a      	cmp	r2, r3
   1c45a:	d007      	beq.n	1c46c <xTaskCheckForTimeOut+0x5c>
   1c45c:	687b      	ldr	r3, [r7, #4]
   1c45e:	685a      	ldr	r2, [r3, #4]
   1c460:	693b      	ldr	r3, [r7, #16]
   1c462:	429a      	cmp	r2, r3
   1c464:	d802      	bhi.n	1c46c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1c466:	2301      	movs	r3, #1
   1c468:	617b      	str	r3, [r7, #20]
   1c46a:	e016      	b.n	1c49a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1c46c:	683b      	ldr	r3, [r7, #0]
   1c46e:	681a      	ldr	r2, [r3, #0]
   1c470:	68fb      	ldr	r3, [r7, #12]
   1c472:	429a      	cmp	r2, r3
   1c474:	d90c      	bls.n	1c490 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1c476:	683b      	ldr	r3, [r7, #0]
   1c478:	681a      	ldr	r2, [r3, #0]
   1c47a:	68fb      	ldr	r3, [r7, #12]
   1c47c:	1ad2      	subs	r2, r2, r3
   1c47e:	683b      	ldr	r3, [r7, #0]
   1c480:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1c482:	687b      	ldr	r3, [r7, #4]
   1c484:	0018      	movs	r0, r3
   1c486:	4b0b      	ldr	r3, [pc, #44]	; (1c4b4 <xTaskCheckForTimeOut+0xa4>)
   1c488:	4798      	blx	r3
			xReturn = pdFALSE;
   1c48a:	2300      	movs	r3, #0
   1c48c:	617b      	str	r3, [r7, #20]
   1c48e:	e004      	b.n	1c49a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1c490:	683b      	ldr	r3, [r7, #0]
   1c492:	2200      	movs	r2, #0
   1c494:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1c496:	2301      	movs	r3, #1
   1c498:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1c49a:	4b07      	ldr	r3, [pc, #28]	; (1c4b8 <xTaskCheckForTimeOut+0xa8>)
   1c49c:	4798      	blx	r3

	return xReturn;
   1c49e:	697b      	ldr	r3, [r7, #20]
}
   1c4a0:	0018      	movs	r0, r3
   1c4a2:	46bd      	mov	sp, r7
   1c4a4:	b006      	add	sp, #24
   1c4a6:	bd80      	pop	{r7, pc}
   1c4a8:	00019a19 	.word	0x00019a19
   1c4ac:	20004034 	.word	0x20004034
   1c4b0:	20004048 	.word	0x20004048
   1c4b4:	0001c3e9 	.word	0x0001c3e9
   1c4b8:	00019a3d 	.word	0x00019a3d

0001c4bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1c4bc:	b580      	push	{r7, lr}
   1c4be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c4c0:	4b02      	ldr	r3, [pc, #8]	; (1c4cc <vTaskMissedYield+0x10>)
   1c4c2:	2201      	movs	r2, #1
   1c4c4:	601a      	str	r2, [r3, #0]
}
   1c4c6:	46c0      	nop			; (mov r8, r8)
   1c4c8:	46bd      	mov	sp, r7
   1c4ca:	bd80      	pop	{r7, pc}
   1c4cc:	20004044 	.word	0x20004044

0001c4d0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1c4d0:	b580      	push	{r7, lr}
   1c4d2:	b084      	sub	sp, #16
   1c4d4:	af00      	add	r7, sp, #0
   1c4d6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c4d8:	687b      	ldr	r3, [r7, #4]
   1c4da:	2b00      	cmp	r3, #0
   1c4dc:	d005      	beq.n	1c4ea <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c4de:	687b      	ldr	r3, [r7, #4]
   1c4e0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1c4e2:	68bb      	ldr	r3, [r7, #8]
   1c4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4e6:	60fb      	str	r3, [r7, #12]
   1c4e8:	e001      	b.n	1c4ee <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1c4ea:	2300      	movs	r3, #0
   1c4ec:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1c4ee:	68fb      	ldr	r3, [r7, #12]
	}
   1c4f0:	0018      	movs	r0, r3
   1c4f2:	46bd      	mov	sp, r7
   1c4f4:	b004      	add	sp, #16
   1c4f6:	bd80      	pop	{r7, pc}

0001c4f8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1c4f8:	b580      	push	{r7, lr}
   1c4fa:	b084      	sub	sp, #16
   1c4fc:	af00      	add	r7, sp, #0
   1c4fe:	6078      	str	r0, [r7, #4]
   1c500:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c502:	687b      	ldr	r3, [r7, #4]
   1c504:	2b00      	cmp	r3, #0
   1c506:	d004      	beq.n	1c512 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c508:	687b      	ldr	r3, [r7, #4]
   1c50a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1c50c:	68fb      	ldr	r3, [r7, #12]
   1c50e:	683a      	ldr	r2, [r7, #0]
   1c510:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1c512:	46c0      	nop			; (mov r8, r8)
   1c514:	46bd      	mov	sp, r7
   1c516:	b004      	add	sp, #16
   1c518:	bd80      	pop	{r7, pc}
	...

0001c51c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c51c:	b580      	push	{r7, lr}
   1c51e:	b082      	sub	sp, #8
   1c520:	af00      	add	r7, sp, #0
   1c522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c524:	4b04      	ldr	r3, [pc, #16]	; (1c538 <prvIdleTask+0x1c>)
   1c526:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c528:	4b04      	ldr	r3, [pc, #16]	; (1c53c <prvIdleTask+0x20>)
   1c52a:	681b      	ldr	r3, [r3, #0]
   1c52c:	2b01      	cmp	r3, #1
   1c52e:	d9f9      	bls.n	1c524 <prvIdleTask+0x8>
			{
				taskYIELD();
   1c530:	4b03      	ldr	r3, [pc, #12]	; (1c540 <prvIdleTask+0x24>)
   1c532:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1c534:	e7f6      	b.n	1c524 <prvIdleTask+0x8>
   1c536:	46c0      	nop			; (mov r8, r8)
   1c538:	0001c5d1 	.word	0x0001c5d1
   1c53c:	20003f5c 	.word	0x20003f5c
   1c540:	00019a01 	.word	0x00019a01

0001c544 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c544:	b580      	push	{r7, lr}
   1c546:	b082      	sub	sp, #8
   1c548:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c54a:	2300      	movs	r3, #0
   1c54c:	607b      	str	r3, [r7, #4]
   1c54e:	e00c      	b.n	1c56a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c550:	687a      	ldr	r2, [r7, #4]
   1c552:	0013      	movs	r3, r2
   1c554:	009b      	lsls	r3, r3, #2
   1c556:	189b      	adds	r3, r3, r2
   1c558:	009b      	lsls	r3, r3, #2
   1c55a:	4a14      	ldr	r2, [pc, #80]	; (1c5ac <prvInitialiseTaskLists+0x68>)
   1c55c:	189b      	adds	r3, r3, r2
   1c55e:	0018      	movs	r0, r3
   1c560:	4b13      	ldr	r3, [pc, #76]	; (1c5b0 <prvInitialiseTaskLists+0x6c>)
   1c562:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c564:	687b      	ldr	r3, [r7, #4]
   1c566:	3301      	adds	r3, #1
   1c568:	607b      	str	r3, [r7, #4]
   1c56a:	687b      	ldr	r3, [r7, #4]
   1c56c:	2b04      	cmp	r3, #4
   1c56e:	d9ef      	bls.n	1c550 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1c570:	4b10      	ldr	r3, [pc, #64]	; (1c5b4 <prvInitialiseTaskLists+0x70>)
   1c572:	0018      	movs	r0, r3
   1c574:	4b0e      	ldr	r3, [pc, #56]	; (1c5b0 <prvInitialiseTaskLists+0x6c>)
   1c576:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1c578:	4b0f      	ldr	r3, [pc, #60]	; (1c5b8 <prvInitialiseTaskLists+0x74>)
   1c57a:	0018      	movs	r0, r3
   1c57c:	4b0c      	ldr	r3, [pc, #48]	; (1c5b0 <prvInitialiseTaskLists+0x6c>)
   1c57e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1c580:	4b0e      	ldr	r3, [pc, #56]	; (1c5bc <prvInitialiseTaskLists+0x78>)
   1c582:	0018      	movs	r0, r3
   1c584:	4b0a      	ldr	r3, [pc, #40]	; (1c5b0 <prvInitialiseTaskLists+0x6c>)
   1c586:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1c588:	4b0d      	ldr	r3, [pc, #52]	; (1c5c0 <prvInitialiseTaskLists+0x7c>)
   1c58a:	0018      	movs	r0, r3
   1c58c:	4b08      	ldr	r3, [pc, #32]	; (1c5b0 <prvInitialiseTaskLists+0x6c>)
   1c58e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1c590:	4b0c      	ldr	r3, [pc, #48]	; (1c5c4 <prvInitialiseTaskLists+0x80>)
   1c592:	0018      	movs	r0, r3
   1c594:	4b06      	ldr	r3, [pc, #24]	; (1c5b0 <prvInitialiseTaskLists+0x6c>)
   1c596:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1c598:	4b0b      	ldr	r3, [pc, #44]	; (1c5c8 <prvInitialiseTaskLists+0x84>)
   1c59a:	4a06      	ldr	r2, [pc, #24]	; (1c5b4 <prvInitialiseTaskLists+0x70>)
   1c59c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1c59e:	4b0b      	ldr	r3, [pc, #44]	; (1c5cc <prvInitialiseTaskLists+0x88>)
   1c5a0:	4a05      	ldr	r2, [pc, #20]	; (1c5b8 <prvInitialiseTaskLists+0x74>)
   1c5a2:	601a      	str	r2, [r3, #0]
}
   1c5a4:	46c0      	nop			; (mov r8, r8)
   1c5a6:	46bd      	mov	sp, r7
   1c5a8:	b002      	add	sp, #8
   1c5aa:	bd80      	pop	{r7, pc}
   1c5ac:	20003f5c 	.word	0x20003f5c
   1c5b0:	0001978d 	.word	0x0001978d
   1c5b4:	20003fc0 	.word	0x20003fc0
   1c5b8:	20003fd4 	.word	0x20003fd4
   1c5bc:	20003ff0 	.word	0x20003ff0
   1c5c0:	20004004 	.word	0x20004004
   1c5c4:	2000401c 	.word	0x2000401c
   1c5c8:	20003fe8 	.word	0x20003fe8
   1c5cc:	20003fec 	.word	0x20003fec

0001c5d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1c5d0:	b580      	push	{r7, lr}
   1c5d2:	b082      	sub	sp, #8
   1c5d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c5d6:	e01a      	b.n	1c60e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1c5d8:	4b11      	ldr	r3, [pc, #68]	; (1c620 <prvCheckTasksWaitingTermination+0x50>)
   1c5da:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1c5dc:	4b11      	ldr	r3, [pc, #68]	; (1c624 <prvCheckTasksWaitingTermination+0x54>)
   1c5de:	68db      	ldr	r3, [r3, #12]
   1c5e0:	68db      	ldr	r3, [r3, #12]
   1c5e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c5e4:	687b      	ldr	r3, [r7, #4]
   1c5e6:	3304      	adds	r3, #4
   1c5e8:	0018      	movs	r0, r3
   1c5ea:	4b0f      	ldr	r3, [pc, #60]	; (1c628 <prvCheckTasksWaitingTermination+0x58>)
   1c5ec:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1c5ee:	4b0f      	ldr	r3, [pc, #60]	; (1c62c <prvCheckTasksWaitingTermination+0x5c>)
   1c5f0:	681b      	ldr	r3, [r3, #0]
   1c5f2:	1e5a      	subs	r2, r3, #1
   1c5f4:	4b0d      	ldr	r3, [pc, #52]	; (1c62c <prvCheckTasksWaitingTermination+0x5c>)
   1c5f6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1c5f8:	4b0d      	ldr	r3, [pc, #52]	; (1c630 <prvCheckTasksWaitingTermination+0x60>)
   1c5fa:	681b      	ldr	r3, [r3, #0]
   1c5fc:	1e5a      	subs	r2, r3, #1
   1c5fe:	4b0c      	ldr	r3, [pc, #48]	; (1c630 <prvCheckTasksWaitingTermination+0x60>)
   1c600:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1c602:	4b0c      	ldr	r3, [pc, #48]	; (1c634 <prvCheckTasksWaitingTermination+0x64>)
   1c604:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1c606:	687b      	ldr	r3, [r7, #4]
   1c608:	0018      	movs	r0, r3
   1c60a:	4b0b      	ldr	r3, [pc, #44]	; (1c638 <prvCheckTasksWaitingTermination+0x68>)
   1c60c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c60e:	4b08      	ldr	r3, [pc, #32]	; (1c630 <prvCheckTasksWaitingTermination+0x60>)
   1c610:	681b      	ldr	r3, [r3, #0]
   1c612:	2b00      	cmp	r3, #0
   1c614:	d1e0      	bne.n	1c5d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1c616:	46c0      	nop			; (mov r8, r8)
   1c618:	46bd      	mov	sp, r7
   1c61a:	b002      	add	sp, #8
   1c61c:	bd80      	pop	{r7, pc}
   1c61e:	46c0      	nop			; (mov r8, r8)
   1c620:	00019a19 	.word	0x00019a19
   1c624:	20004004 	.word	0x20004004
   1c628:	0001988f 	.word	0x0001988f
   1c62c:	20004030 	.word	0x20004030
   1c630:	20004018 	.word	0x20004018
   1c634:	00019a3d 	.word	0x00019a3d
   1c638:	0001c6ad 	.word	0x0001c6ad

0001c63c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1c63c:	b580      	push	{r7, lr}
   1c63e:	b084      	sub	sp, #16
   1c640:	af00      	add	r7, sp, #0
   1c642:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1c644:	2300      	movs	r3, #0
   1c646:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c648:	e005      	b.n	1c656 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1c64a:	687b      	ldr	r3, [r7, #4]
   1c64c:	3301      	adds	r3, #1
   1c64e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1c650:	68fb      	ldr	r3, [r7, #12]
   1c652:	3301      	adds	r3, #1
   1c654:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c656:	687b      	ldr	r3, [r7, #4]
   1c658:	781b      	ldrb	r3, [r3, #0]
   1c65a:	2ba5      	cmp	r3, #165	; 0xa5
   1c65c:	d0f5      	beq.n	1c64a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1c65e:	68fb      	ldr	r3, [r7, #12]
   1c660:	089b      	lsrs	r3, r3, #2
   1c662:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1c664:	68fb      	ldr	r3, [r7, #12]
   1c666:	b29b      	uxth	r3, r3
	}
   1c668:	0018      	movs	r0, r3
   1c66a:	46bd      	mov	sp, r7
   1c66c:	b004      	add	sp, #16
   1c66e:	bd80      	pop	{r7, pc}

0001c670 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1c670:	b580      	push	{r7, lr}
   1c672:	b086      	sub	sp, #24
   1c674:	af00      	add	r7, sp, #0
   1c676:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1c678:	687b      	ldr	r3, [r7, #4]
   1c67a:	2b00      	cmp	r3, #0
   1c67c:	d102      	bne.n	1c684 <uxTaskGetStackHighWaterMark+0x14>
   1c67e:	4b09      	ldr	r3, [pc, #36]	; (1c6a4 <uxTaskGetStackHighWaterMark+0x34>)
   1c680:	681b      	ldr	r3, [r3, #0]
   1c682:	e000      	b.n	1c686 <uxTaskGetStackHighWaterMark+0x16>
   1c684:	687b      	ldr	r3, [r7, #4]
   1c686:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1c688:	697b      	ldr	r3, [r7, #20]
   1c68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c68c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1c68e:	693b      	ldr	r3, [r7, #16]
   1c690:	0018      	movs	r0, r3
   1c692:	4b05      	ldr	r3, [pc, #20]	; (1c6a8 <uxTaskGetStackHighWaterMark+0x38>)
   1c694:	4798      	blx	r3
   1c696:	0003      	movs	r3, r0
   1c698:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1c69a:	68fb      	ldr	r3, [r7, #12]
	}
   1c69c:	0018      	movs	r0, r3
   1c69e:	46bd      	mov	sp, r7
   1c6a0:	b006      	add	sp, #24
   1c6a2:	bd80      	pop	{r7, pc}
   1c6a4:	20003f58 	.word	0x20003f58
   1c6a8:	0001c63d 	.word	0x0001c63d

0001c6ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1c6ac:	b580      	push	{r7, lr}
   1c6ae:	b082      	sub	sp, #8
   1c6b0:	af00      	add	r7, sp, #0
   1c6b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1c6b4:	687b      	ldr	r3, [r7, #4]
   1c6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c6b8:	0018      	movs	r0, r3
   1c6ba:	4b05      	ldr	r3, [pc, #20]	; (1c6d0 <prvDeleteTCB+0x24>)
   1c6bc:	4798      	blx	r3
			vPortFree( pxTCB );
   1c6be:	687b      	ldr	r3, [r7, #4]
   1c6c0:	0018      	movs	r0, r3
   1c6c2:	4b03      	ldr	r3, [pc, #12]	; (1c6d0 <prvDeleteTCB+0x24>)
   1c6c4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1c6c6:	46c0      	nop			; (mov r8, r8)
   1c6c8:	46bd      	mov	sp, r7
   1c6ca:	b002      	add	sp, #8
   1c6cc:	bd80      	pop	{r7, pc}
   1c6ce:	46c0      	nop			; (mov r8, r8)
   1c6d0:	00019c15 	.word	0x00019c15

0001c6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1c6d4:	b580      	push	{r7, lr}
   1c6d6:	b082      	sub	sp, #8
   1c6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c6da:	4b0e      	ldr	r3, [pc, #56]	; (1c714 <prvResetNextTaskUnblockTime+0x40>)
   1c6dc:	681b      	ldr	r3, [r3, #0]
   1c6de:	681b      	ldr	r3, [r3, #0]
   1c6e0:	2b00      	cmp	r3, #0
   1c6e2:	d101      	bne.n	1c6e8 <prvResetNextTaskUnblockTime+0x14>
   1c6e4:	2301      	movs	r3, #1
   1c6e6:	e000      	b.n	1c6ea <prvResetNextTaskUnblockTime+0x16>
   1c6e8:	2300      	movs	r3, #0
   1c6ea:	2b00      	cmp	r3, #0
   1c6ec:	d004      	beq.n	1c6f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1c6ee:	4b0a      	ldr	r3, [pc, #40]	; (1c718 <prvResetNextTaskUnblockTime+0x44>)
   1c6f0:	2201      	movs	r2, #1
   1c6f2:	4252      	negs	r2, r2
   1c6f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1c6f6:	e008      	b.n	1c70a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c6f8:	4b06      	ldr	r3, [pc, #24]	; (1c714 <prvResetNextTaskUnblockTime+0x40>)
   1c6fa:	681b      	ldr	r3, [r3, #0]
   1c6fc:	68db      	ldr	r3, [r3, #12]
   1c6fe:	68db      	ldr	r3, [r3, #12]
   1c700:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1c702:	687b      	ldr	r3, [r7, #4]
   1c704:	685a      	ldr	r2, [r3, #4]
   1c706:	4b04      	ldr	r3, [pc, #16]	; (1c718 <prvResetNextTaskUnblockTime+0x44>)
   1c708:	601a      	str	r2, [r3, #0]
}
   1c70a:	46c0      	nop			; (mov r8, r8)
   1c70c:	46bd      	mov	sp, r7
   1c70e:	b002      	add	sp, #8
   1c710:	bd80      	pop	{r7, pc}
   1c712:	46c0      	nop			; (mov r8, r8)
   1c714:	20003fe8 	.word	0x20003fe8
   1c718:	20004050 	.word	0x20004050

0001c71c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1c71c:	b580      	push	{r7, lr}
   1c71e:	b082      	sub	sp, #8
   1c720:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1c722:	4b04      	ldr	r3, [pc, #16]	; (1c734 <xTaskGetCurrentTaskHandle+0x18>)
   1c724:	681b      	ldr	r3, [r3, #0]
   1c726:	607b      	str	r3, [r7, #4]

		return xReturn;
   1c728:	687b      	ldr	r3, [r7, #4]
	}
   1c72a:	0018      	movs	r0, r3
   1c72c:	46bd      	mov	sp, r7
   1c72e:	b002      	add	sp, #8
   1c730:	bd80      	pop	{r7, pc}
   1c732:	46c0      	nop			; (mov r8, r8)
   1c734:	20003f58 	.word	0x20003f58

0001c738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1c738:	b580      	push	{r7, lr}
   1c73a:	b082      	sub	sp, #8
   1c73c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1c73e:	4b0a      	ldr	r3, [pc, #40]	; (1c768 <xTaskGetSchedulerState+0x30>)
   1c740:	681b      	ldr	r3, [r3, #0]
   1c742:	2b00      	cmp	r3, #0
   1c744:	d102      	bne.n	1c74c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1c746:	2301      	movs	r3, #1
   1c748:	607b      	str	r3, [r7, #4]
   1c74a:	e008      	b.n	1c75e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c74c:	4b07      	ldr	r3, [pc, #28]	; (1c76c <xTaskGetSchedulerState+0x34>)
   1c74e:	681b      	ldr	r3, [r3, #0]
   1c750:	2b00      	cmp	r3, #0
   1c752:	d102      	bne.n	1c75a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1c754:	2302      	movs	r3, #2
   1c756:	607b      	str	r3, [r7, #4]
   1c758:	e001      	b.n	1c75e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1c75a:	2300      	movs	r3, #0
   1c75c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1c75e:	687b      	ldr	r3, [r7, #4]
	}
   1c760:	0018      	movs	r0, r3
   1c762:	46bd      	mov	sp, r7
   1c764:	b002      	add	sp, #8
   1c766:	bd80      	pop	{r7, pc}
   1c768:	2000403c 	.word	0x2000403c
   1c76c:	20004058 	.word	0x20004058

0001c770 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1c770:	b590      	push	{r4, r7, lr}
   1c772:	b085      	sub	sp, #20
   1c774:	af00      	add	r7, sp, #0
   1c776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1c778:	687b      	ldr	r3, [r7, #4]
   1c77a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c77c:	2300      	movs	r3, #0
   1c77e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1c780:	687b      	ldr	r3, [r7, #4]
   1c782:	2b00      	cmp	r3, #0
   1c784:	d100      	bne.n	1c788 <xTaskPriorityInherit+0x18>
   1c786:	e09d      	b.n	1c8c4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1c788:	68bb      	ldr	r3, [r7, #8]
   1c78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c78c:	4b50      	ldr	r3, [pc, #320]	; (1c8d0 <xTaskPriorityInherit+0x160>)
   1c78e:	681b      	ldr	r3, [r3, #0]
   1c790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c792:	429a      	cmp	r2, r3
   1c794:	d300      	bcc.n	1c798 <xTaskPriorityInherit+0x28>
   1c796:	e08c      	b.n	1c8b2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c798:	68bb      	ldr	r3, [r7, #8]
   1c79a:	699b      	ldr	r3, [r3, #24]
   1c79c:	2b00      	cmp	r3, #0
   1c79e:	db06      	blt.n	1c7ae <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c7a0:	4b4b      	ldr	r3, [pc, #300]	; (1c8d0 <xTaskPriorityInherit+0x160>)
   1c7a2:	681b      	ldr	r3, [r3, #0]
   1c7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c7a6:	2205      	movs	r2, #5
   1c7a8:	1ad2      	subs	r2, r2, r3
   1c7aa:	68bb      	ldr	r3, [r7, #8]
   1c7ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1c7ae:	68bb      	ldr	r3, [r7, #8]
   1c7b0:	6959      	ldr	r1, [r3, #20]
   1c7b2:	68bb      	ldr	r3, [r7, #8]
   1c7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7b6:	0013      	movs	r3, r2
   1c7b8:	009b      	lsls	r3, r3, #2
   1c7ba:	189b      	adds	r3, r3, r2
   1c7bc:	009b      	lsls	r3, r3, #2
   1c7be:	4a45      	ldr	r2, [pc, #276]	; (1c8d4 <xTaskPriorityInherit+0x164>)
   1c7c0:	189b      	adds	r3, r3, r2
   1c7c2:	4299      	cmp	r1, r3
   1c7c4:	d101      	bne.n	1c7ca <xTaskPriorityInherit+0x5a>
   1c7c6:	2301      	movs	r3, #1
   1c7c8:	e000      	b.n	1c7cc <xTaskPriorityInherit+0x5c>
   1c7ca:	2300      	movs	r3, #0
   1c7cc:	2b00      	cmp	r3, #0
   1c7ce:	d037      	beq.n	1c840 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c7d0:	68bb      	ldr	r3, [r7, #8]
   1c7d2:	3304      	adds	r3, #4
   1c7d4:	0018      	movs	r0, r3
   1c7d6:	4b40      	ldr	r3, [pc, #256]	; (1c8d8 <xTaskPriorityInherit+0x168>)
   1c7d8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c7da:	4b3d      	ldr	r3, [pc, #244]	; (1c8d0 <xTaskPriorityInherit+0x160>)
   1c7dc:	681b      	ldr	r3, [r3, #0]
   1c7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7e0:	68bb      	ldr	r3, [r7, #8]
   1c7e2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1c7e4:	68bb      	ldr	r3, [r7, #8]
   1c7e6:	0018      	movs	r0, r3
   1c7e8:	4b3c      	ldr	r3, [pc, #240]	; (1c8dc <xTaskPriorityInherit+0x16c>)
   1c7ea:	4798      	blx	r3
   1c7ec:	0003      	movs	r3, r0
   1c7ee:	001a      	movs	r2, r3
   1c7f0:	4b3b      	ldr	r3, [pc, #236]	; (1c8e0 <xTaskPriorityInherit+0x170>)
   1c7f2:	881b      	ldrh	r3, [r3, #0]
   1c7f4:	4013      	ands	r3, r2
   1c7f6:	b29b      	uxth	r3, r3
   1c7f8:	2b00      	cmp	r3, #0
   1c7fa:	d008      	beq.n	1c80e <xTaskPriorityInherit+0x9e>
   1c7fc:	68bb      	ldr	r3, [r7, #8]
   1c7fe:	0018      	movs	r0, r3
   1c800:	4b38      	ldr	r3, [pc, #224]	; (1c8e4 <xTaskPriorityInherit+0x174>)
   1c802:	4798      	blx	r3
   1c804:	0003      	movs	r3, r0
   1c806:	b2db      	uxtb	r3, r3
   1c808:	0018      	movs	r0, r3
   1c80a:	4b37      	ldr	r3, [pc, #220]	; (1c8e8 <xTaskPriorityInherit+0x178>)
   1c80c:	4798      	blx	r3
   1c80e:	68bb      	ldr	r3, [r7, #8]
   1c810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c812:	4b36      	ldr	r3, [pc, #216]	; (1c8ec <xTaskPriorityInherit+0x17c>)
   1c814:	681b      	ldr	r3, [r3, #0]
   1c816:	429a      	cmp	r2, r3
   1c818:	d903      	bls.n	1c822 <xTaskPriorityInherit+0xb2>
   1c81a:	68bb      	ldr	r3, [r7, #8]
   1c81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c81e:	4b33      	ldr	r3, [pc, #204]	; (1c8ec <xTaskPriorityInherit+0x17c>)
   1c820:	601a      	str	r2, [r3, #0]
   1c822:	68bb      	ldr	r3, [r7, #8]
   1c824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c826:	0013      	movs	r3, r2
   1c828:	009b      	lsls	r3, r3, #2
   1c82a:	189b      	adds	r3, r3, r2
   1c82c:	009b      	lsls	r3, r3, #2
   1c82e:	4a29      	ldr	r2, [pc, #164]	; (1c8d4 <xTaskPriorityInherit+0x164>)
   1c830:	189a      	adds	r2, r3, r2
   1c832:	68bb      	ldr	r3, [r7, #8]
   1c834:	3304      	adds	r3, #4
   1c836:	0019      	movs	r1, r3
   1c838:	0010      	movs	r0, r2
   1c83a:	4b2d      	ldr	r3, [pc, #180]	; (1c8f0 <xTaskPriorityInherit+0x180>)
   1c83c:	4798      	blx	r3
   1c83e:	e004      	b.n	1c84a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c840:	4b23      	ldr	r3, [pc, #140]	; (1c8d0 <xTaskPriorityInherit+0x160>)
   1c842:	681b      	ldr	r3, [r3, #0]
   1c844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c846:	68bb      	ldr	r3, [r7, #8]
   1c848:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1c84a:	68bb      	ldr	r3, [r7, #8]
   1c84c:	0018      	movs	r0, r3
   1c84e:	4b23      	ldr	r3, [pc, #140]	; (1c8dc <xTaskPriorityInherit+0x16c>)
   1c850:	4798      	blx	r3
   1c852:	0003      	movs	r3, r0
   1c854:	001a      	movs	r2, r3
   1c856:	4b22      	ldr	r3, [pc, #136]	; (1c8e0 <xTaskPriorityInherit+0x170>)
   1c858:	881b      	ldrh	r3, [r3, #0]
   1c85a:	4013      	ands	r3, r2
   1c85c:	b29b      	uxth	r3, r3
   1c85e:	2b00      	cmp	r3, #0
   1c860:	d024      	beq.n	1c8ac <xTaskPriorityInherit+0x13c>
   1c862:	68bb      	ldr	r3, [r7, #8]
   1c864:	0018      	movs	r0, r3
   1c866:	4b1f      	ldr	r3, [pc, #124]	; (1c8e4 <xTaskPriorityInherit+0x174>)
   1c868:	4798      	blx	r3
   1c86a:	0003      	movs	r3, r0
   1c86c:	b2db      	uxtb	r3, r3
   1c86e:	001c      	movs	r4, r3
   1c870:	68bb      	ldr	r3, [r7, #8]
   1c872:	0018      	movs	r0, r3
   1c874:	4b1b      	ldr	r3, [pc, #108]	; (1c8e4 <xTaskPriorityInherit+0x174>)
   1c876:	4798      	blx	r3
   1c878:	0003      	movs	r3, r0
   1c87a:	b2db      	uxtb	r3, r3
   1c87c:	0019      	movs	r1, r3
   1c87e:	2003      	movs	r0, #3
   1c880:	4b1c      	ldr	r3, [pc, #112]	; (1c8f4 <xTaskPriorityInherit+0x184>)
   1c882:	4798      	blx	r3
   1c884:	0003      	movs	r3, r0
   1c886:	0022      	movs	r2, r4
   1c888:	2103      	movs	r1, #3
   1c88a:	208e      	movs	r0, #142	; 0x8e
   1c88c:	4c1a      	ldr	r4, [pc, #104]	; (1c8f8 <xTaskPriorityInherit+0x188>)
   1c88e:	47a0      	blx	r4
   1c890:	68bb      	ldr	r3, [r7, #8]
   1c892:	0018      	movs	r0, r3
   1c894:	4b13      	ldr	r3, [pc, #76]	; (1c8e4 <xTaskPriorityInherit+0x174>)
   1c896:	4798      	blx	r3
   1c898:	0003      	movs	r3, r0
   1c89a:	b2d9      	uxtb	r1, r3
   1c89c:	4b0c      	ldr	r3, [pc, #48]	; (1c8d0 <xTaskPriorityInherit+0x160>)
   1c89e:	681b      	ldr	r3, [r3, #0]
   1c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c8a2:	b2db      	uxtb	r3, r3
   1c8a4:	001a      	movs	r2, r3
   1c8a6:	2003      	movs	r0, #3
   1c8a8:	4b14      	ldr	r3, [pc, #80]	; (1c8fc <xTaskPriorityInherit+0x18c>)
   1c8aa:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1c8ac:	2301      	movs	r3, #1
   1c8ae:	60fb      	str	r3, [r7, #12]
   1c8b0:	e008      	b.n	1c8c4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1c8b2:	68bb      	ldr	r3, [r7, #8]
   1c8b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c8b6:	4b06      	ldr	r3, [pc, #24]	; (1c8d0 <xTaskPriorityInherit+0x160>)
   1c8b8:	681b      	ldr	r3, [r3, #0]
   1c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c8bc:	429a      	cmp	r2, r3
   1c8be:	d201      	bcs.n	1c8c4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1c8c0:	2301      	movs	r3, #1
   1c8c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c8c4:	68fb      	ldr	r3, [r7, #12]
	}
   1c8c6:	0018      	movs	r0, r3
   1c8c8:	46bd      	mov	sp, r7
   1c8ca:	b005      	add	sp, #20
   1c8cc:	bd90      	pop	{r4, r7, pc}
   1c8ce:	46c0      	nop			; (mov r8, r8)
   1c8d0:	20003f58 	.word	0x20003f58
   1c8d4:	20003f5c 	.word	0x20003f5c
   1c8d8:	0001988f 	.word	0x0001988f
   1c8dc:	00017a15 	.word	0x00017a15
   1c8e0:	20000108 	.word	0x20000108
   1c8e4:	000179f5 	.word	0x000179f5
   1c8e8:	000181c5 	.word	0x000181c5
   1c8ec:	20004038 	.word	0x20004038
   1c8f0:	000197df 	.word	0x000197df
   1c8f4:	000189cd 	.word	0x000189cd
   1c8f8:	0001853d 	.word	0x0001853d
   1c8fc:	00018929 	.word	0x00018929

0001c900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1c900:	b590      	push	{r4, r7, lr}
   1c902:	b085      	sub	sp, #20
   1c904:	af00      	add	r7, sp, #0
   1c906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c908:	687b      	ldr	r3, [r7, #4]
   1c90a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c90c:	2300      	movs	r3, #0
   1c90e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c910:	687b      	ldr	r3, [r7, #4]
   1c912:	2b00      	cmp	r3, #0
   1c914:	d100      	bne.n	1c918 <xTaskPriorityDisinherit+0x18>
   1c916:	e089      	b.n	1ca2c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1c918:	4b47      	ldr	r3, [pc, #284]	; (1ca38 <xTaskPriorityDisinherit+0x138>)
   1c91a:	681b      	ldr	r3, [r3, #0]
   1c91c:	68ba      	ldr	r2, [r7, #8]
   1c91e:	429a      	cmp	r2, r3
   1c920:	d001      	beq.n	1c926 <xTaskPriorityDisinherit+0x26>
   1c922:	b672      	cpsid	i
   1c924:	e7fe      	b.n	1c924 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1c926:	68bb      	ldr	r3, [r7, #8]
   1c928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c92a:	2b00      	cmp	r3, #0
   1c92c:	d101      	bne.n	1c932 <xTaskPriorityDisinherit+0x32>
   1c92e:	b672      	cpsid	i
   1c930:	e7fe      	b.n	1c930 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1c932:	68bb      	ldr	r3, [r7, #8]
   1c934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c936:	1e5a      	subs	r2, r3, #1
   1c938:	68bb      	ldr	r3, [r7, #8]
   1c93a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1c93c:	68bb      	ldr	r3, [r7, #8]
   1c93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c940:	68bb      	ldr	r3, [r7, #8]
   1c942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c944:	429a      	cmp	r2, r3
   1c946:	d071      	beq.n	1ca2c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1c948:	68bb      	ldr	r3, [r7, #8]
   1c94a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c94c:	2b00      	cmp	r3, #0
   1c94e:	d16d      	bne.n	1ca2c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c950:	68bb      	ldr	r3, [r7, #8]
   1c952:	3304      	adds	r3, #4
   1c954:	0018      	movs	r0, r3
   1c956:	4b39      	ldr	r3, [pc, #228]	; (1ca3c <xTaskPriorityDisinherit+0x13c>)
   1c958:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c95a:	68bb      	ldr	r3, [r7, #8]
   1c95c:	0018      	movs	r0, r3
   1c95e:	4b38      	ldr	r3, [pc, #224]	; (1ca40 <xTaskPriorityDisinherit+0x140>)
   1c960:	4798      	blx	r3
   1c962:	0003      	movs	r3, r0
   1c964:	001a      	movs	r2, r3
   1c966:	4b37      	ldr	r3, [pc, #220]	; (1ca44 <xTaskPriorityDisinherit+0x144>)
   1c968:	881b      	ldrh	r3, [r3, #0]
   1c96a:	4013      	ands	r3, r2
   1c96c:	b29b      	uxth	r3, r3
   1c96e:	2b00      	cmp	r3, #0
   1c970:	d023      	beq.n	1c9ba <xTaskPriorityDisinherit+0xba>
   1c972:	68bb      	ldr	r3, [r7, #8]
   1c974:	0018      	movs	r0, r3
   1c976:	4b34      	ldr	r3, [pc, #208]	; (1ca48 <xTaskPriorityDisinherit+0x148>)
   1c978:	4798      	blx	r3
   1c97a:	0003      	movs	r3, r0
   1c97c:	b2db      	uxtb	r3, r3
   1c97e:	001c      	movs	r4, r3
   1c980:	68bb      	ldr	r3, [r7, #8]
   1c982:	0018      	movs	r0, r3
   1c984:	4b30      	ldr	r3, [pc, #192]	; (1ca48 <xTaskPriorityDisinherit+0x148>)
   1c986:	4798      	blx	r3
   1c988:	0003      	movs	r3, r0
   1c98a:	b2db      	uxtb	r3, r3
   1c98c:	0019      	movs	r1, r3
   1c98e:	2003      	movs	r0, #3
   1c990:	4b2e      	ldr	r3, [pc, #184]	; (1ca4c <xTaskPriorityDisinherit+0x14c>)
   1c992:	4798      	blx	r3
   1c994:	0003      	movs	r3, r0
   1c996:	0022      	movs	r2, r4
   1c998:	2103      	movs	r1, #3
   1c99a:	208f      	movs	r0, #143	; 0x8f
   1c99c:	4c2c      	ldr	r4, [pc, #176]	; (1ca50 <xTaskPriorityDisinherit+0x150>)
   1c99e:	47a0      	blx	r4
   1c9a0:	68bb      	ldr	r3, [r7, #8]
   1c9a2:	0018      	movs	r0, r3
   1c9a4:	4b28      	ldr	r3, [pc, #160]	; (1ca48 <xTaskPriorityDisinherit+0x148>)
   1c9a6:	4798      	blx	r3
   1c9a8:	0003      	movs	r3, r0
   1c9aa:	b2d9      	uxtb	r1, r3
   1c9ac:	68bb      	ldr	r3, [r7, #8]
   1c9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c9b0:	b2db      	uxtb	r3, r3
   1c9b2:	001a      	movs	r2, r3
   1c9b4:	2003      	movs	r0, #3
   1c9b6:	4b27      	ldr	r3, [pc, #156]	; (1ca54 <xTaskPriorityDisinherit+0x154>)
   1c9b8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1c9ba:	68bb      	ldr	r3, [r7, #8]
   1c9bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c9be:	68bb      	ldr	r3, [r7, #8]
   1c9c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c9c2:	68bb      	ldr	r3, [r7, #8]
   1c9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9c6:	2205      	movs	r2, #5
   1c9c8:	1ad2      	subs	r2, r2, r3
   1c9ca:	68bb      	ldr	r3, [r7, #8]
   1c9cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1c9ce:	68bb      	ldr	r3, [r7, #8]
   1c9d0:	0018      	movs	r0, r3
   1c9d2:	4b1b      	ldr	r3, [pc, #108]	; (1ca40 <xTaskPriorityDisinherit+0x140>)
   1c9d4:	4798      	blx	r3
   1c9d6:	0003      	movs	r3, r0
   1c9d8:	001a      	movs	r2, r3
   1c9da:	4b1a      	ldr	r3, [pc, #104]	; (1ca44 <xTaskPriorityDisinherit+0x144>)
   1c9dc:	881b      	ldrh	r3, [r3, #0]
   1c9de:	4013      	ands	r3, r2
   1c9e0:	b29b      	uxth	r3, r3
   1c9e2:	2b00      	cmp	r3, #0
   1c9e4:	d008      	beq.n	1c9f8 <xTaskPriorityDisinherit+0xf8>
   1c9e6:	68bb      	ldr	r3, [r7, #8]
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	4b17      	ldr	r3, [pc, #92]	; (1ca48 <xTaskPriorityDisinherit+0x148>)
   1c9ec:	4798      	blx	r3
   1c9ee:	0003      	movs	r3, r0
   1c9f0:	b2db      	uxtb	r3, r3
   1c9f2:	0018      	movs	r0, r3
   1c9f4:	4b18      	ldr	r3, [pc, #96]	; (1ca58 <xTaskPriorityDisinherit+0x158>)
   1c9f6:	4798      	blx	r3
   1c9f8:	68bb      	ldr	r3, [r7, #8]
   1c9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9fc:	4b17      	ldr	r3, [pc, #92]	; (1ca5c <xTaskPriorityDisinherit+0x15c>)
   1c9fe:	681b      	ldr	r3, [r3, #0]
   1ca00:	429a      	cmp	r2, r3
   1ca02:	d903      	bls.n	1ca0c <xTaskPriorityDisinherit+0x10c>
   1ca04:	68bb      	ldr	r3, [r7, #8]
   1ca06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca08:	4b14      	ldr	r3, [pc, #80]	; (1ca5c <xTaskPriorityDisinherit+0x15c>)
   1ca0a:	601a      	str	r2, [r3, #0]
   1ca0c:	68bb      	ldr	r3, [r7, #8]
   1ca0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca10:	0013      	movs	r3, r2
   1ca12:	009b      	lsls	r3, r3, #2
   1ca14:	189b      	adds	r3, r3, r2
   1ca16:	009b      	lsls	r3, r3, #2
   1ca18:	4a11      	ldr	r2, [pc, #68]	; (1ca60 <xTaskPriorityDisinherit+0x160>)
   1ca1a:	189a      	adds	r2, r3, r2
   1ca1c:	68bb      	ldr	r3, [r7, #8]
   1ca1e:	3304      	adds	r3, #4
   1ca20:	0019      	movs	r1, r3
   1ca22:	0010      	movs	r0, r2
   1ca24:	4b0f      	ldr	r3, [pc, #60]	; (1ca64 <xTaskPriorityDisinherit+0x164>)
   1ca26:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1ca28:	2301      	movs	r3, #1
   1ca2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ca2c:	68fb      	ldr	r3, [r7, #12]
	}
   1ca2e:	0018      	movs	r0, r3
   1ca30:	46bd      	mov	sp, r7
   1ca32:	b005      	add	sp, #20
   1ca34:	bd90      	pop	{r4, r7, pc}
   1ca36:	46c0      	nop			; (mov r8, r8)
   1ca38:	20003f58 	.word	0x20003f58
   1ca3c:	0001988f 	.word	0x0001988f
   1ca40:	00017a15 	.word	0x00017a15
   1ca44:	20000108 	.word	0x20000108
   1ca48:	000179f5 	.word	0x000179f5
   1ca4c:	000189cd 	.word	0x000189cd
   1ca50:	0001853d 	.word	0x0001853d
   1ca54:	00018929 	.word	0x00018929
   1ca58:	000181c5 	.word	0x000181c5
   1ca5c:	20004038 	.word	0x20004038
   1ca60:	20003f5c 	.word	0x20003f5c
   1ca64:	000197df 	.word	0x000197df

0001ca68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1ca68:	b590      	push	{r4, r7, lr}
   1ca6a:	b087      	sub	sp, #28
   1ca6c:	af00      	add	r7, sp, #0
   1ca6e:	6078      	str	r0, [r7, #4]
   1ca70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1ca72:	687b      	ldr	r3, [r7, #4]
   1ca74:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1ca76:	2301      	movs	r3, #1
   1ca78:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1ca7a:	687b      	ldr	r3, [r7, #4]
   1ca7c:	2b00      	cmp	r3, #0
   1ca7e:	d100      	bne.n	1ca82 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1ca80:	e0a4      	b.n	1cbcc <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1ca82:	693b      	ldr	r3, [r7, #16]
   1ca84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca86:	2b00      	cmp	r3, #0
   1ca88:	d101      	bne.n	1ca8e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1ca8a:	b672      	cpsid	i
   1ca8c:	e7fe      	b.n	1ca8c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1ca8e:	693b      	ldr	r3, [r7, #16]
   1ca90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ca92:	683b      	ldr	r3, [r7, #0]
   1ca94:	429a      	cmp	r2, r3
   1ca96:	d202      	bcs.n	1ca9e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1ca98:	683b      	ldr	r3, [r7, #0]
   1ca9a:	617b      	str	r3, [r7, #20]
   1ca9c:	e002      	b.n	1caa4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1ca9e:	693b      	ldr	r3, [r7, #16]
   1caa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1caa2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1caa4:	693b      	ldr	r3, [r7, #16]
   1caa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1caa8:	697b      	ldr	r3, [r7, #20]
   1caaa:	429a      	cmp	r2, r3
   1caac:	d100      	bne.n	1cab0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1caae:	e08d      	b.n	1cbcc <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1cab0:	693b      	ldr	r3, [r7, #16]
   1cab2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cab4:	68fb      	ldr	r3, [r7, #12]
   1cab6:	429a      	cmp	r2, r3
   1cab8:	d000      	beq.n	1cabc <vTaskPriorityDisinheritAfterTimeout+0x54>
   1caba:	e087      	b.n	1cbcc <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1cabc:	4b45      	ldr	r3, [pc, #276]	; (1cbd4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1cabe:	681b      	ldr	r3, [r3, #0]
   1cac0:	693a      	ldr	r2, [r7, #16]
   1cac2:	429a      	cmp	r2, r3
   1cac4:	d101      	bne.n	1caca <vTaskPriorityDisinheritAfterTimeout+0x62>
   1cac6:	b672      	cpsid	i
   1cac8:	e7fe      	b.n	1cac8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1caca:	693b      	ldr	r3, [r7, #16]
   1cacc:	0018      	movs	r0, r3
   1cace:	4b42      	ldr	r3, [pc, #264]	; (1cbd8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cad0:	4798      	blx	r3
   1cad2:	0003      	movs	r3, r0
   1cad4:	001a      	movs	r2, r3
   1cad6:	4b41      	ldr	r3, [pc, #260]	; (1cbdc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cad8:	881b      	ldrh	r3, [r3, #0]
   1cada:	4013      	ands	r3, r2
   1cadc:	b29b      	uxth	r3, r3
   1cade:	2b00      	cmp	r3, #0
   1cae0:	d023      	beq.n	1cb2a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1cae2:	693b      	ldr	r3, [r7, #16]
   1cae4:	0018      	movs	r0, r3
   1cae6:	4b3e      	ldr	r3, [pc, #248]	; (1cbe0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cae8:	4798      	blx	r3
   1caea:	0003      	movs	r3, r0
   1caec:	b2db      	uxtb	r3, r3
   1caee:	001c      	movs	r4, r3
   1caf0:	693b      	ldr	r3, [r7, #16]
   1caf2:	0018      	movs	r0, r3
   1caf4:	4b3a      	ldr	r3, [pc, #232]	; (1cbe0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1caf6:	4798      	blx	r3
   1caf8:	0003      	movs	r3, r0
   1cafa:	b2db      	uxtb	r3, r3
   1cafc:	0019      	movs	r1, r3
   1cafe:	2003      	movs	r0, #3
   1cb00:	4b38      	ldr	r3, [pc, #224]	; (1cbe4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1cb02:	4798      	blx	r3
   1cb04:	0003      	movs	r3, r0
   1cb06:	0022      	movs	r2, r4
   1cb08:	2103      	movs	r1, #3
   1cb0a:	208f      	movs	r0, #143	; 0x8f
   1cb0c:	4c36      	ldr	r4, [pc, #216]	; (1cbe8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1cb0e:	47a0      	blx	r4
   1cb10:	693b      	ldr	r3, [r7, #16]
   1cb12:	0018      	movs	r0, r3
   1cb14:	4b32      	ldr	r3, [pc, #200]	; (1cbe0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cb16:	4798      	blx	r3
   1cb18:	0003      	movs	r3, r0
   1cb1a:	b2d9      	uxtb	r1, r3
   1cb1c:	693b      	ldr	r3, [r7, #16]
   1cb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cb20:	b2db      	uxtb	r3, r3
   1cb22:	001a      	movs	r2, r3
   1cb24:	2003      	movs	r0, #3
   1cb26:	4b31      	ldr	r3, [pc, #196]	; (1cbec <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1cb28:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1cb2a:	693b      	ldr	r3, [r7, #16]
   1cb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb2e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1cb30:	693b      	ldr	r3, [r7, #16]
   1cb32:	697a      	ldr	r2, [r7, #20]
   1cb34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cb36:	693b      	ldr	r3, [r7, #16]
   1cb38:	699b      	ldr	r3, [r3, #24]
   1cb3a:	2b00      	cmp	r3, #0
   1cb3c:	db04      	blt.n	1cb48 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cb3e:	697b      	ldr	r3, [r7, #20]
   1cb40:	2205      	movs	r2, #5
   1cb42:	1ad2      	subs	r2, r2, r3
   1cb44:	693b      	ldr	r3, [r7, #16]
   1cb46:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1cb48:	693b      	ldr	r3, [r7, #16]
   1cb4a:	6959      	ldr	r1, [r3, #20]
   1cb4c:	68ba      	ldr	r2, [r7, #8]
   1cb4e:	0013      	movs	r3, r2
   1cb50:	009b      	lsls	r3, r3, #2
   1cb52:	189b      	adds	r3, r3, r2
   1cb54:	009b      	lsls	r3, r3, #2
   1cb56:	4a26      	ldr	r2, [pc, #152]	; (1cbf0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1cb58:	189b      	adds	r3, r3, r2
   1cb5a:	4299      	cmp	r1, r3
   1cb5c:	d101      	bne.n	1cb62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1cb5e:	2301      	movs	r3, #1
   1cb60:	e000      	b.n	1cb64 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1cb62:	2300      	movs	r3, #0
   1cb64:	2b00      	cmp	r3, #0
   1cb66:	d031      	beq.n	1cbcc <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cb68:	693b      	ldr	r3, [r7, #16]
   1cb6a:	3304      	adds	r3, #4
   1cb6c:	0018      	movs	r0, r3
   1cb6e:	4b21      	ldr	r3, [pc, #132]	; (1cbf4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1cb70:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1cb72:	693b      	ldr	r3, [r7, #16]
   1cb74:	0018      	movs	r0, r3
   1cb76:	4b18      	ldr	r3, [pc, #96]	; (1cbd8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cb78:	4798      	blx	r3
   1cb7a:	0003      	movs	r3, r0
   1cb7c:	001a      	movs	r2, r3
   1cb7e:	4b17      	ldr	r3, [pc, #92]	; (1cbdc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cb80:	881b      	ldrh	r3, [r3, #0]
   1cb82:	4013      	ands	r3, r2
   1cb84:	b29b      	uxth	r3, r3
   1cb86:	2b00      	cmp	r3, #0
   1cb88:	d008      	beq.n	1cb9c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1cb8a:	693b      	ldr	r3, [r7, #16]
   1cb8c:	0018      	movs	r0, r3
   1cb8e:	4b14      	ldr	r3, [pc, #80]	; (1cbe0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cb90:	4798      	blx	r3
   1cb92:	0003      	movs	r3, r0
   1cb94:	b2db      	uxtb	r3, r3
   1cb96:	0018      	movs	r0, r3
   1cb98:	4b17      	ldr	r3, [pc, #92]	; (1cbf8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1cb9a:	4798      	blx	r3
   1cb9c:	693b      	ldr	r3, [r7, #16]
   1cb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cba0:	4b16      	ldr	r3, [pc, #88]	; (1cbfc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1cba2:	681b      	ldr	r3, [r3, #0]
   1cba4:	429a      	cmp	r2, r3
   1cba6:	d903      	bls.n	1cbb0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1cba8:	693b      	ldr	r3, [r7, #16]
   1cbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbac:	4b13      	ldr	r3, [pc, #76]	; (1cbfc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1cbae:	601a      	str	r2, [r3, #0]
   1cbb0:	693b      	ldr	r3, [r7, #16]
   1cbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbb4:	0013      	movs	r3, r2
   1cbb6:	009b      	lsls	r3, r3, #2
   1cbb8:	189b      	adds	r3, r3, r2
   1cbba:	009b      	lsls	r3, r3, #2
   1cbbc:	4a0c      	ldr	r2, [pc, #48]	; (1cbf0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1cbbe:	189a      	adds	r2, r3, r2
   1cbc0:	693b      	ldr	r3, [r7, #16]
   1cbc2:	3304      	adds	r3, #4
   1cbc4:	0019      	movs	r1, r3
   1cbc6:	0010      	movs	r0, r2
   1cbc8:	4b0d      	ldr	r3, [pc, #52]	; (1cc00 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1cbca:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cbcc:	46c0      	nop			; (mov r8, r8)
   1cbce:	46bd      	mov	sp, r7
   1cbd0:	b007      	add	sp, #28
   1cbd2:	bd90      	pop	{r4, r7, pc}
   1cbd4:	20003f58 	.word	0x20003f58
   1cbd8:	00017a15 	.word	0x00017a15
   1cbdc:	20000108 	.word	0x20000108
   1cbe0:	000179f5 	.word	0x000179f5
   1cbe4:	000189cd 	.word	0x000189cd
   1cbe8:	0001853d 	.word	0x0001853d
   1cbec:	00018929 	.word	0x00018929
   1cbf0:	20003f5c 	.word	0x20003f5c
   1cbf4:	0001988f 	.word	0x0001988f
   1cbf8:	000181c5 	.word	0x000181c5
   1cbfc:	20004038 	.word	0x20004038
   1cc00:	000197df 	.word	0x000197df

0001cc04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1cc04:	b580      	push	{r7, lr}
   1cc06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1cc08:	4b06      	ldr	r3, [pc, #24]	; (1cc24 <pvTaskIncrementMutexHeldCount+0x20>)
   1cc0a:	681b      	ldr	r3, [r3, #0]
   1cc0c:	2b00      	cmp	r3, #0
   1cc0e:	d004      	beq.n	1cc1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1cc10:	4b04      	ldr	r3, [pc, #16]	; (1cc24 <pvTaskIncrementMutexHeldCount+0x20>)
   1cc12:	681b      	ldr	r3, [r3, #0]
   1cc14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cc16:	3201      	adds	r2, #1
   1cc18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1cc1a:	4b02      	ldr	r3, [pc, #8]	; (1cc24 <pvTaskIncrementMutexHeldCount+0x20>)
   1cc1c:	681b      	ldr	r3, [r3, #0]
	}
   1cc1e:	0018      	movs	r0, r3
   1cc20:	46bd      	mov	sp, r7
   1cc22:	bd80      	pop	{r7, pc}
   1cc24:	20003f58 	.word	0x20003f58

0001cc28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1cc28:	b580      	push	{r7, lr}
   1cc2a:	b084      	sub	sp, #16
   1cc2c:	af00      	add	r7, sp, #0
   1cc2e:	6078      	str	r0, [r7, #4]
   1cc30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1cc32:	4b21      	ldr	r3, [pc, #132]	; (1ccb8 <prvAddCurrentTaskToDelayedList+0x90>)
   1cc34:	681b      	ldr	r3, [r3, #0]
   1cc36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cc38:	4b20      	ldr	r3, [pc, #128]	; (1ccbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cc3a:	681b      	ldr	r3, [r3, #0]
   1cc3c:	3304      	adds	r3, #4
   1cc3e:	0018      	movs	r0, r3
   1cc40:	4b1f      	ldr	r3, [pc, #124]	; (1ccc0 <prvAddCurrentTaskToDelayedList+0x98>)
   1cc42:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1cc44:	687b      	ldr	r3, [r7, #4]
   1cc46:	3301      	adds	r3, #1
   1cc48:	d10b      	bne.n	1cc62 <prvAddCurrentTaskToDelayedList+0x3a>
   1cc4a:	683b      	ldr	r3, [r7, #0]
   1cc4c:	2b00      	cmp	r3, #0
   1cc4e:	d008      	beq.n	1cc62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cc50:	4b1a      	ldr	r3, [pc, #104]	; (1ccbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cc52:	681b      	ldr	r3, [r3, #0]
   1cc54:	1d1a      	adds	r2, r3, #4
   1cc56:	4b1b      	ldr	r3, [pc, #108]	; (1ccc4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1cc58:	0011      	movs	r1, r2
   1cc5a:	0018      	movs	r0, r3
   1cc5c:	4b1a      	ldr	r3, [pc, #104]	; (1ccc8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1cc5e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1cc60:	e026      	b.n	1ccb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1cc62:	68fa      	ldr	r2, [r7, #12]
   1cc64:	687b      	ldr	r3, [r7, #4]
   1cc66:	18d3      	adds	r3, r2, r3
   1cc68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1cc6a:	4b14      	ldr	r3, [pc, #80]	; (1ccbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cc6c:	681b      	ldr	r3, [r3, #0]
   1cc6e:	68ba      	ldr	r2, [r7, #8]
   1cc70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1cc72:	68ba      	ldr	r2, [r7, #8]
   1cc74:	68fb      	ldr	r3, [r7, #12]
   1cc76:	429a      	cmp	r2, r3
   1cc78:	d209      	bcs.n	1cc8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cc7a:	4b14      	ldr	r3, [pc, #80]	; (1cccc <prvAddCurrentTaskToDelayedList+0xa4>)
   1cc7c:	681a      	ldr	r2, [r3, #0]
   1cc7e:	4b0f      	ldr	r3, [pc, #60]	; (1ccbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cc80:	681b      	ldr	r3, [r3, #0]
   1cc82:	3304      	adds	r3, #4
   1cc84:	0019      	movs	r1, r3
   1cc86:	0010      	movs	r0, r2
   1cc88:	4b11      	ldr	r3, [pc, #68]	; (1ccd0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1cc8a:	4798      	blx	r3
}
   1cc8c:	e010      	b.n	1ccb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1cc8e:	4b11      	ldr	r3, [pc, #68]	; (1ccd4 <prvAddCurrentTaskToDelayedList+0xac>)
   1cc90:	681a      	ldr	r2, [r3, #0]
   1cc92:	4b0a      	ldr	r3, [pc, #40]	; (1ccbc <prvAddCurrentTaskToDelayedList+0x94>)
   1cc94:	681b      	ldr	r3, [r3, #0]
   1cc96:	3304      	adds	r3, #4
   1cc98:	0019      	movs	r1, r3
   1cc9a:	0010      	movs	r0, r2
   1cc9c:	4b0c      	ldr	r3, [pc, #48]	; (1ccd0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1cc9e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1cca0:	4b0d      	ldr	r3, [pc, #52]	; (1ccd8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1cca2:	681b      	ldr	r3, [r3, #0]
   1cca4:	68ba      	ldr	r2, [r7, #8]
   1cca6:	429a      	cmp	r2, r3
   1cca8:	d202      	bcs.n	1ccb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1ccaa:	4b0b      	ldr	r3, [pc, #44]	; (1ccd8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1ccac:	68ba      	ldr	r2, [r7, #8]
   1ccae:	601a      	str	r2, [r3, #0]
}
   1ccb0:	46c0      	nop			; (mov r8, r8)
   1ccb2:	46bd      	mov	sp, r7
   1ccb4:	b004      	add	sp, #16
   1ccb6:	bd80      	pop	{r7, pc}
   1ccb8:	20004034 	.word	0x20004034
   1ccbc:	20003f58 	.word	0x20003f58
   1ccc0:	0001988f 	.word	0x0001988f
   1ccc4:	2000401c 	.word	0x2000401c
   1ccc8:	000197df 	.word	0x000197df
   1cccc:	20003fec 	.word	0x20003fec
   1ccd0:	00019823 	.word	0x00019823
   1ccd4:	20003fe8 	.word	0x20003fe8
   1ccd8:	20004050 	.word	0x20004050

0001ccdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1ccdc:	b590      	push	{r4, r7, lr}
   1ccde:	b085      	sub	sp, #20
   1cce0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1cce2:	2300      	movs	r3, #0
   1cce4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1cce6:	4b0e      	ldr	r3, [pc, #56]	; (1cd20 <xTimerCreateTimerTask+0x44>)
   1cce8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1ccea:	4b0e      	ldr	r3, [pc, #56]	; (1cd24 <xTimerCreateTimerTask+0x48>)
   1ccec:	681b      	ldr	r3, [r3, #0]
   1ccee:	2b00      	cmp	r3, #0
   1ccf0:	d00b      	beq.n	1cd0a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1ccf2:	490d      	ldr	r1, [pc, #52]	; (1cd28 <xTimerCreateTimerTask+0x4c>)
   1ccf4:	480d      	ldr	r0, [pc, #52]	; (1cd2c <xTimerCreateTimerTask+0x50>)
   1ccf6:	4b0e      	ldr	r3, [pc, #56]	; (1cd30 <xTimerCreateTimerTask+0x54>)
   1ccf8:	9301      	str	r3, [sp, #4]
   1ccfa:	2302      	movs	r3, #2
   1ccfc:	9300      	str	r3, [sp, #0]
   1ccfe:	2300      	movs	r3, #0
   1cd00:	2280      	movs	r2, #128	; 0x80
   1cd02:	4c0c      	ldr	r4, [pc, #48]	; (1cd34 <xTimerCreateTimerTask+0x58>)
   1cd04:	47a0      	blx	r4
   1cd06:	0003      	movs	r3, r0
   1cd08:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1cd0a:	687b      	ldr	r3, [r7, #4]
   1cd0c:	2b00      	cmp	r3, #0
   1cd0e:	d101      	bne.n	1cd14 <xTimerCreateTimerTask+0x38>
   1cd10:	b672      	cpsid	i
   1cd12:	e7fe      	b.n	1cd12 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1cd14:	687b      	ldr	r3, [r7, #4]
}
   1cd16:	0018      	movs	r0, r3
   1cd18:	46bd      	mov	sp, r7
   1cd1a:	b003      	add	sp, #12
   1cd1c:	bd90      	pop	{r4, r7, pc}
   1cd1e:	46c0      	nop			; (mov r8, r8)
   1cd20:	0001d225 	.word	0x0001d225
   1cd24:	2000408c 	.word	0x2000408c
   1cd28:	00037b44 	.word	0x00037b44
   1cd2c:	0001ce5d 	.word	0x0001ce5d
   1cd30:	20004090 	.word	0x20004090
   1cd34:	0001b675 	.word	0x0001b675

0001cd38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1cd38:	b590      	push	{r4, r7, lr}
   1cd3a:	b089      	sub	sp, #36	; 0x24
   1cd3c:	af00      	add	r7, sp, #0
   1cd3e:	60f8      	str	r0, [r7, #12]
   1cd40:	60b9      	str	r1, [r7, #8]
   1cd42:	607a      	str	r2, [r7, #4]
   1cd44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1cd46:	2300      	movs	r3, #0
   1cd48:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1cd4a:	68fb      	ldr	r3, [r7, #12]
   1cd4c:	2b00      	cmp	r3, #0
   1cd4e:	d101      	bne.n	1cd54 <xTimerGenericCommand+0x1c>
   1cd50:	b672      	cpsid	i
   1cd52:	e7fe      	b.n	1cd52 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1cd54:	4b1e      	ldr	r3, [pc, #120]	; (1cdd0 <xTimerGenericCommand+0x98>)
   1cd56:	681b      	ldr	r3, [r3, #0]
   1cd58:	2b00      	cmp	r3, #0
   1cd5a:	d033      	beq.n	1cdc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1cd5c:	2310      	movs	r3, #16
   1cd5e:	18fb      	adds	r3, r7, r3
   1cd60:	68ba      	ldr	r2, [r7, #8]
   1cd62:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1cd64:	2310      	movs	r3, #16
   1cd66:	18fb      	adds	r3, r7, r3
   1cd68:	687a      	ldr	r2, [r7, #4]
   1cd6a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1cd6c:	2310      	movs	r3, #16
   1cd6e:	18fb      	adds	r3, r7, r3
   1cd70:	68fa      	ldr	r2, [r7, #12]
   1cd72:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1cd74:	68bb      	ldr	r3, [r7, #8]
   1cd76:	2b05      	cmp	r3, #5
   1cd78:	dc1a      	bgt.n	1cdb0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1cd7a:	4b16      	ldr	r3, [pc, #88]	; (1cdd4 <xTimerGenericCommand+0x9c>)
   1cd7c:	4798      	blx	r3
   1cd7e:	0003      	movs	r3, r0
   1cd80:	2b02      	cmp	r3, #2
   1cd82:	d10a      	bne.n	1cd9a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1cd84:	4b12      	ldr	r3, [pc, #72]	; (1cdd0 <xTimerGenericCommand+0x98>)
   1cd86:	6818      	ldr	r0, [r3, #0]
   1cd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1cd8a:	2310      	movs	r3, #16
   1cd8c:	18f9      	adds	r1, r7, r3
   1cd8e:	2300      	movs	r3, #0
   1cd90:	4c11      	ldr	r4, [pc, #68]	; (1cdd8 <xTimerGenericCommand+0xa0>)
   1cd92:	47a0      	blx	r4
   1cd94:	0003      	movs	r3, r0
   1cd96:	61fb      	str	r3, [r7, #28]
   1cd98:	e014      	b.n	1cdc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1cd9a:	4b0d      	ldr	r3, [pc, #52]	; (1cdd0 <xTimerGenericCommand+0x98>)
   1cd9c:	6818      	ldr	r0, [r3, #0]
   1cd9e:	2310      	movs	r3, #16
   1cda0:	18f9      	adds	r1, r7, r3
   1cda2:	2300      	movs	r3, #0
   1cda4:	2200      	movs	r2, #0
   1cda6:	4c0c      	ldr	r4, [pc, #48]	; (1cdd8 <xTimerGenericCommand+0xa0>)
   1cda8:	47a0      	blx	r4
   1cdaa:	0003      	movs	r3, r0
   1cdac:	61fb      	str	r3, [r7, #28]
   1cdae:	e009      	b.n	1cdc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1cdb0:	4b07      	ldr	r3, [pc, #28]	; (1cdd0 <xTimerGenericCommand+0x98>)
   1cdb2:	6818      	ldr	r0, [r3, #0]
   1cdb4:	683a      	ldr	r2, [r7, #0]
   1cdb6:	2310      	movs	r3, #16
   1cdb8:	18f9      	adds	r1, r7, r3
   1cdba:	2300      	movs	r3, #0
   1cdbc:	4c07      	ldr	r4, [pc, #28]	; (1cddc <xTimerGenericCommand+0xa4>)
   1cdbe:	47a0      	blx	r4
   1cdc0:	0003      	movs	r3, r0
   1cdc2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1cdc4:	69fb      	ldr	r3, [r7, #28]
}
   1cdc6:	0018      	movs	r0, r3
   1cdc8:	46bd      	mov	sp, r7
   1cdca:	b009      	add	sp, #36	; 0x24
   1cdcc:	bd90      	pop	{r4, r7, pc}
   1cdce:	46c0      	nop			; (mov r8, r8)
   1cdd0:	2000408c 	.word	0x2000408c
   1cdd4:	0001c739 	.word	0x0001c739
   1cdd8:	00019fad 	.word	0x00019fad
   1cddc:	0001a40d 	.word	0x0001a40d

0001cde0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1cde0:	b590      	push	{r4, r7, lr}
   1cde2:	b087      	sub	sp, #28
   1cde4:	af02      	add	r7, sp, #8
   1cde6:	6078      	str	r0, [r7, #4]
   1cde8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1cdea:	4b18      	ldr	r3, [pc, #96]	; (1ce4c <prvProcessExpiredTimer+0x6c>)
   1cdec:	681b      	ldr	r3, [r3, #0]
   1cdee:	68db      	ldr	r3, [r3, #12]
   1cdf0:	68db      	ldr	r3, [r3, #12]
   1cdf2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1cdf4:	68fb      	ldr	r3, [r7, #12]
   1cdf6:	3304      	adds	r3, #4
   1cdf8:	0018      	movs	r0, r3
   1cdfa:	4b15      	ldr	r3, [pc, #84]	; (1ce50 <prvProcessExpiredTimer+0x70>)
   1cdfc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1cdfe:	68fb      	ldr	r3, [r7, #12]
   1ce00:	69db      	ldr	r3, [r3, #28]
   1ce02:	2b01      	cmp	r3, #1
   1ce04:	d119      	bne.n	1ce3a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1ce06:	68fb      	ldr	r3, [r7, #12]
   1ce08:	699a      	ldr	r2, [r3, #24]
   1ce0a:	687b      	ldr	r3, [r7, #4]
   1ce0c:	18d1      	adds	r1, r2, r3
   1ce0e:	687b      	ldr	r3, [r7, #4]
   1ce10:	683a      	ldr	r2, [r7, #0]
   1ce12:	68f8      	ldr	r0, [r7, #12]
   1ce14:	4c0f      	ldr	r4, [pc, #60]	; (1ce54 <prvProcessExpiredTimer+0x74>)
   1ce16:	47a0      	blx	r4
   1ce18:	1e03      	subs	r3, r0, #0
   1ce1a:	d00e      	beq.n	1ce3a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1ce1c:	687a      	ldr	r2, [r7, #4]
   1ce1e:	68f8      	ldr	r0, [r7, #12]
   1ce20:	2300      	movs	r3, #0
   1ce22:	9300      	str	r3, [sp, #0]
   1ce24:	2300      	movs	r3, #0
   1ce26:	2100      	movs	r1, #0
   1ce28:	4c0b      	ldr	r4, [pc, #44]	; (1ce58 <prvProcessExpiredTimer+0x78>)
   1ce2a:	47a0      	blx	r4
   1ce2c:	0003      	movs	r3, r0
   1ce2e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1ce30:	68bb      	ldr	r3, [r7, #8]
   1ce32:	2b00      	cmp	r3, #0
   1ce34:	d101      	bne.n	1ce3a <prvProcessExpiredTimer+0x5a>
   1ce36:	b672      	cpsid	i
   1ce38:	e7fe      	b.n	1ce38 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1ce3a:	68fb      	ldr	r3, [r7, #12]
   1ce3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ce3e:	68fa      	ldr	r2, [r7, #12]
   1ce40:	0010      	movs	r0, r2
   1ce42:	4798      	blx	r3
}
   1ce44:	46c0      	nop			; (mov r8, r8)
   1ce46:	46bd      	mov	sp, r7
   1ce48:	b005      	add	sp, #20
   1ce4a:	bd90      	pop	{r4, r7, pc}
   1ce4c:	20004084 	.word	0x20004084
   1ce50:	0001988f 	.word	0x0001988f
   1ce54:	0001cfc5 	.word	0x0001cfc5
   1ce58:	0001cd39 	.word	0x0001cd39

0001ce5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1ce5c:	b580      	push	{r7, lr}
   1ce5e:	b084      	sub	sp, #16
   1ce60:	af00      	add	r7, sp, #0
   1ce62:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1ce64:	4b08      	ldr	r3, [pc, #32]	; (1ce88 <prvTimerTask+0x2c>)
   1ce66:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1ce68:	2308      	movs	r3, #8
   1ce6a:	18fb      	adds	r3, r7, r3
   1ce6c:	0018      	movs	r0, r3
   1ce6e:	4b07      	ldr	r3, [pc, #28]	; (1ce8c <prvTimerTask+0x30>)
   1ce70:	4798      	blx	r3
   1ce72:	0003      	movs	r3, r0
   1ce74:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1ce76:	68ba      	ldr	r2, [r7, #8]
   1ce78:	68fb      	ldr	r3, [r7, #12]
   1ce7a:	0011      	movs	r1, r2
   1ce7c:	0018      	movs	r0, r3
   1ce7e:	4b04      	ldr	r3, [pc, #16]	; (1ce90 <prvTimerTask+0x34>)
   1ce80:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1ce82:	4b04      	ldr	r3, [pc, #16]	; (1ce94 <prvTimerTask+0x38>)
   1ce84:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1ce86:	e7ef      	b.n	1ce68 <prvTimerTask+0xc>
   1ce88:	0003202d 	.word	0x0003202d
   1ce8c:	0001cf3d 	.word	0x0001cf3d
   1ce90:	0001ce99 	.word	0x0001ce99
   1ce94:	0001d04d 	.word	0x0001d04d

0001ce98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1ce98:	b580      	push	{r7, lr}
   1ce9a:	b084      	sub	sp, #16
   1ce9c:	af00      	add	r7, sp, #0
   1ce9e:	6078      	str	r0, [r7, #4]
   1cea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1cea2:	4b1e      	ldr	r3, [pc, #120]	; (1cf1c <prvProcessTimerOrBlockTask+0x84>)
   1cea4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1cea6:	2308      	movs	r3, #8
   1cea8:	18fb      	adds	r3, r7, r3
   1ceaa:	0018      	movs	r0, r3
   1ceac:	4b1c      	ldr	r3, [pc, #112]	; (1cf20 <prvProcessTimerOrBlockTask+0x88>)
   1ceae:	4798      	blx	r3
   1ceb0:	0003      	movs	r3, r0
   1ceb2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1ceb4:	68bb      	ldr	r3, [r7, #8]
   1ceb6:	2b00      	cmp	r3, #0
   1ceb8:	d129      	bne.n	1cf0e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1ceba:	683b      	ldr	r3, [r7, #0]
   1cebc:	2b00      	cmp	r3, #0
   1cebe:	d10c      	bne.n	1ceda <prvProcessTimerOrBlockTask+0x42>
   1cec0:	687a      	ldr	r2, [r7, #4]
   1cec2:	68fb      	ldr	r3, [r7, #12]
   1cec4:	429a      	cmp	r2, r3
   1cec6:	d808      	bhi.n	1ceda <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1cec8:	4b16      	ldr	r3, [pc, #88]	; (1cf24 <prvProcessTimerOrBlockTask+0x8c>)
   1ceca:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1cecc:	68fa      	ldr	r2, [r7, #12]
   1cece:	687b      	ldr	r3, [r7, #4]
   1ced0:	0011      	movs	r1, r2
   1ced2:	0018      	movs	r0, r3
   1ced4:	4b14      	ldr	r3, [pc, #80]	; (1cf28 <prvProcessTimerOrBlockTask+0x90>)
   1ced6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1ced8:	e01b      	b.n	1cf12 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1ceda:	683b      	ldr	r3, [r7, #0]
   1cedc:	2b00      	cmp	r3, #0
   1cede:	d006      	beq.n	1ceee <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1cee0:	4b12      	ldr	r3, [pc, #72]	; (1cf2c <prvProcessTimerOrBlockTask+0x94>)
   1cee2:	681b      	ldr	r3, [r3, #0]
   1cee4:	681b      	ldr	r3, [r3, #0]
   1cee6:	425a      	negs	r2, r3
   1cee8:	4153      	adcs	r3, r2
   1ceea:	b2db      	uxtb	r3, r3
   1ceec:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1ceee:	4b10      	ldr	r3, [pc, #64]	; (1cf30 <prvProcessTimerOrBlockTask+0x98>)
   1cef0:	6818      	ldr	r0, [r3, #0]
   1cef2:	687a      	ldr	r2, [r7, #4]
   1cef4:	68fb      	ldr	r3, [r7, #12]
   1cef6:	1ad3      	subs	r3, r2, r3
   1cef8:	683a      	ldr	r2, [r7, #0]
   1cefa:	0019      	movs	r1, r3
   1cefc:	4b0d      	ldr	r3, [pc, #52]	; (1cf34 <prvProcessTimerOrBlockTask+0x9c>)
   1cefe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1cf00:	4b08      	ldr	r3, [pc, #32]	; (1cf24 <prvProcessTimerOrBlockTask+0x8c>)
   1cf02:	4798      	blx	r3
   1cf04:	1e03      	subs	r3, r0, #0
   1cf06:	d104      	bne.n	1cf12 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1cf08:	4b0b      	ldr	r3, [pc, #44]	; (1cf38 <prvProcessTimerOrBlockTask+0xa0>)
   1cf0a:	4798      	blx	r3
}
   1cf0c:	e001      	b.n	1cf12 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1cf0e:	4b05      	ldr	r3, [pc, #20]	; (1cf24 <prvProcessTimerOrBlockTask+0x8c>)
   1cf10:	4798      	blx	r3
}
   1cf12:	46c0      	nop			; (mov r8, r8)
   1cf14:	46bd      	mov	sp, r7
   1cf16:	b004      	add	sp, #16
   1cf18:	bd80      	pop	{r7, pc}
   1cf1a:	46c0      	nop			; (mov r8, r8)
   1cf1c:	0001bcd1 	.word	0x0001bcd1
   1cf20:	0001cf7d 	.word	0x0001cf7d
   1cf24:	0001bce9 	.word	0x0001bce9
   1cf28:	0001cde1 	.word	0x0001cde1
   1cf2c:	20004088 	.word	0x20004088
   1cf30:	2000408c 	.word	0x2000408c
   1cf34:	0001b471 	.word	0x0001b471
   1cf38:	00019a01 	.word	0x00019a01

0001cf3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1cf3c:	b580      	push	{r7, lr}
   1cf3e:	b084      	sub	sp, #16
   1cf40:	af00      	add	r7, sp, #0
   1cf42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1cf44:	4b0c      	ldr	r3, [pc, #48]	; (1cf78 <prvGetNextExpireTime+0x3c>)
   1cf46:	681b      	ldr	r3, [r3, #0]
   1cf48:	681b      	ldr	r3, [r3, #0]
   1cf4a:	425a      	negs	r2, r3
   1cf4c:	4153      	adcs	r3, r2
   1cf4e:	b2db      	uxtb	r3, r3
   1cf50:	001a      	movs	r2, r3
   1cf52:	687b      	ldr	r3, [r7, #4]
   1cf54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1cf56:	687b      	ldr	r3, [r7, #4]
   1cf58:	681b      	ldr	r3, [r3, #0]
   1cf5a:	2b00      	cmp	r3, #0
   1cf5c:	d105      	bne.n	1cf6a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1cf5e:	4b06      	ldr	r3, [pc, #24]	; (1cf78 <prvGetNextExpireTime+0x3c>)
   1cf60:	681b      	ldr	r3, [r3, #0]
   1cf62:	68db      	ldr	r3, [r3, #12]
   1cf64:	681b      	ldr	r3, [r3, #0]
   1cf66:	60fb      	str	r3, [r7, #12]
   1cf68:	e001      	b.n	1cf6e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1cf6a:	2300      	movs	r3, #0
   1cf6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1cf6e:	68fb      	ldr	r3, [r7, #12]
}
   1cf70:	0018      	movs	r0, r3
   1cf72:	46bd      	mov	sp, r7
   1cf74:	b004      	add	sp, #16
   1cf76:	bd80      	pop	{r7, pc}
   1cf78:	20004084 	.word	0x20004084

0001cf7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1cf7c:	b580      	push	{r7, lr}
   1cf7e:	b084      	sub	sp, #16
   1cf80:	af00      	add	r7, sp, #0
   1cf82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1cf84:	4b0c      	ldr	r3, [pc, #48]	; (1cfb8 <prvSampleTimeNow+0x3c>)
   1cf86:	4798      	blx	r3
   1cf88:	0003      	movs	r3, r0
   1cf8a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1cf8c:	4b0b      	ldr	r3, [pc, #44]	; (1cfbc <prvSampleTimeNow+0x40>)
   1cf8e:	681b      	ldr	r3, [r3, #0]
   1cf90:	68fa      	ldr	r2, [r7, #12]
   1cf92:	429a      	cmp	r2, r3
   1cf94:	d205      	bcs.n	1cfa2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1cf96:	4b0a      	ldr	r3, [pc, #40]	; (1cfc0 <prvSampleTimeNow+0x44>)
   1cf98:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1cf9a:	687b      	ldr	r3, [r7, #4]
   1cf9c:	2201      	movs	r2, #1
   1cf9e:	601a      	str	r2, [r3, #0]
   1cfa0:	e002      	b.n	1cfa8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1cfa2:	687b      	ldr	r3, [r7, #4]
   1cfa4:	2200      	movs	r2, #0
   1cfa6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1cfa8:	4b04      	ldr	r3, [pc, #16]	; (1cfbc <prvSampleTimeNow+0x40>)
   1cfaa:	68fa      	ldr	r2, [r7, #12]
   1cfac:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1cfae:	68fb      	ldr	r3, [r7, #12]
}
   1cfb0:	0018      	movs	r0, r3
   1cfb2:	46bd      	mov	sp, r7
   1cfb4:	b004      	add	sp, #16
   1cfb6:	bd80      	pop	{r7, pc}
   1cfb8:	0001be59 	.word	0x0001be59
   1cfbc:	20004094 	.word	0x20004094
   1cfc0:	0001d165 	.word	0x0001d165

0001cfc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1cfc4:	b580      	push	{r7, lr}
   1cfc6:	b086      	sub	sp, #24
   1cfc8:	af00      	add	r7, sp, #0
   1cfca:	60f8      	str	r0, [r7, #12]
   1cfcc:	60b9      	str	r1, [r7, #8]
   1cfce:	607a      	str	r2, [r7, #4]
   1cfd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1cfd2:	2300      	movs	r3, #0
   1cfd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1cfd6:	68fb      	ldr	r3, [r7, #12]
   1cfd8:	68ba      	ldr	r2, [r7, #8]
   1cfda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1cfdc:	68fb      	ldr	r3, [r7, #12]
   1cfde:	68fa      	ldr	r2, [r7, #12]
   1cfe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1cfe2:	68ba      	ldr	r2, [r7, #8]
   1cfe4:	687b      	ldr	r3, [r7, #4]
   1cfe6:	429a      	cmp	r2, r3
   1cfe8:	d812      	bhi.n	1d010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cfea:	687a      	ldr	r2, [r7, #4]
   1cfec:	683b      	ldr	r3, [r7, #0]
   1cfee:	1ad2      	subs	r2, r2, r3
   1cff0:	68fb      	ldr	r3, [r7, #12]
   1cff2:	699b      	ldr	r3, [r3, #24]
   1cff4:	429a      	cmp	r2, r3
   1cff6:	d302      	bcc.n	1cffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1cff8:	2301      	movs	r3, #1
   1cffa:	617b      	str	r3, [r7, #20]
   1cffc:	e01b      	b.n	1d036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1cffe:	4b10      	ldr	r3, [pc, #64]	; (1d040 <prvInsertTimerInActiveList+0x7c>)
   1d000:	681a      	ldr	r2, [r3, #0]
   1d002:	68fb      	ldr	r3, [r7, #12]
   1d004:	3304      	adds	r3, #4
   1d006:	0019      	movs	r1, r3
   1d008:	0010      	movs	r0, r2
   1d00a:	4b0e      	ldr	r3, [pc, #56]	; (1d044 <prvInsertTimerInActiveList+0x80>)
   1d00c:	4798      	blx	r3
   1d00e:	e012      	b.n	1d036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d010:	687a      	ldr	r2, [r7, #4]
   1d012:	683b      	ldr	r3, [r7, #0]
   1d014:	429a      	cmp	r2, r3
   1d016:	d206      	bcs.n	1d026 <prvInsertTimerInActiveList+0x62>
   1d018:	68ba      	ldr	r2, [r7, #8]
   1d01a:	683b      	ldr	r3, [r7, #0]
   1d01c:	429a      	cmp	r2, r3
   1d01e:	d302      	bcc.n	1d026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d020:	2301      	movs	r3, #1
   1d022:	617b      	str	r3, [r7, #20]
   1d024:	e007      	b.n	1d036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d026:	4b08      	ldr	r3, [pc, #32]	; (1d048 <prvInsertTimerInActiveList+0x84>)
   1d028:	681a      	ldr	r2, [r3, #0]
   1d02a:	68fb      	ldr	r3, [r7, #12]
   1d02c:	3304      	adds	r3, #4
   1d02e:	0019      	movs	r1, r3
   1d030:	0010      	movs	r0, r2
   1d032:	4b04      	ldr	r3, [pc, #16]	; (1d044 <prvInsertTimerInActiveList+0x80>)
   1d034:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d036:	697b      	ldr	r3, [r7, #20]
}
   1d038:	0018      	movs	r0, r3
   1d03a:	46bd      	mov	sp, r7
   1d03c:	b006      	add	sp, #24
   1d03e:	bd80      	pop	{r7, pc}
   1d040:	20004088 	.word	0x20004088
   1d044:	00019823 	.word	0x00019823
   1d048:	20004084 	.word	0x20004084

0001d04c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d04c:	b590      	push	{r4, r7, lr}
   1d04e:	b08b      	sub	sp, #44	; 0x2c
   1d050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d052:	e068      	b.n	1d126 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d054:	2308      	movs	r3, #8
   1d056:	18fb      	adds	r3, r7, r3
   1d058:	681b      	ldr	r3, [r3, #0]
   1d05a:	2b00      	cmp	r3, #0
   1d05c:	db63      	blt.n	1d126 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d05e:	2308      	movs	r3, #8
   1d060:	18fb      	adds	r3, r7, r3
   1d062:	689b      	ldr	r3, [r3, #8]
   1d064:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d066:	69fb      	ldr	r3, [r7, #28]
   1d068:	695b      	ldr	r3, [r3, #20]
   1d06a:	2b00      	cmp	r3, #0
   1d06c:	d004      	beq.n	1d078 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d06e:	69fb      	ldr	r3, [r7, #28]
   1d070:	3304      	adds	r3, #4
   1d072:	0018      	movs	r0, r3
   1d074:	4b33      	ldr	r3, [pc, #204]	; (1d144 <prvProcessReceivedCommands+0xf8>)
   1d076:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d078:	1d3b      	adds	r3, r7, #4
   1d07a:	0018      	movs	r0, r3
   1d07c:	4b32      	ldr	r3, [pc, #200]	; (1d148 <prvProcessReceivedCommands+0xfc>)
   1d07e:	4798      	blx	r3
   1d080:	0003      	movs	r3, r0
   1d082:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d084:	2308      	movs	r3, #8
   1d086:	18fb      	adds	r3, r7, r3
   1d088:	681b      	ldr	r3, [r3, #0]
   1d08a:	2b09      	cmp	r3, #9
   1d08c:	d84a      	bhi.n	1d124 <prvProcessReceivedCommands+0xd8>
   1d08e:	009a      	lsls	r2, r3, #2
   1d090:	4b2e      	ldr	r3, [pc, #184]	; (1d14c <prvProcessReceivedCommands+0x100>)
   1d092:	18d3      	adds	r3, r2, r3
   1d094:	681b      	ldr	r3, [r3, #0]
   1d096:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d098:	2308      	movs	r3, #8
   1d09a:	18fb      	adds	r3, r7, r3
   1d09c:	685a      	ldr	r2, [r3, #4]
   1d09e:	69fb      	ldr	r3, [r7, #28]
   1d0a0:	699b      	ldr	r3, [r3, #24]
   1d0a2:	18d1      	adds	r1, r2, r3
   1d0a4:	2308      	movs	r3, #8
   1d0a6:	18fb      	adds	r3, r7, r3
   1d0a8:	685b      	ldr	r3, [r3, #4]
   1d0aa:	69ba      	ldr	r2, [r7, #24]
   1d0ac:	69f8      	ldr	r0, [r7, #28]
   1d0ae:	4c28      	ldr	r4, [pc, #160]	; (1d150 <prvProcessReceivedCommands+0x104>)
   1d0b0:	47a0      	blx	r4
   1d0b2:	1e03      	subs	r3, r0, #0
   1d0b4:	d037      	beq.n	1d126 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d0b6:	69fb      	ldr	r3, [r7, #28]
   1d0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d0ba:	69fa      	ldr	r2, [r7, #28]
   1d0bc:	0010      	movs	r0, r2
   1d0be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d0c0:	69fb      	ldr	r3, [r7, #28]
   1d0c2:	69db      	ldr	r3, [r3, #28]
   1d0c4:	2b01      	cmp	r3, #1
   1d0c6:	d12e      	bne.n	1d126 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d0c8:	2308      	movs	r3, #8
   1d0ca:	18fb      	adds	r3, r7, r3
   1d0cc:	685a      	ldr	r2, [r3, #4]
   1d0ce:	69fb      	ldr	r3, [r7, #28]
   1d0d0:	699b      	ldr	r3, [r3, #24]
   1d0d2:	18d2      	adds	r2, r2, r3
   1d0d4:	69f8      	ldr	r0, [r7, #28]
   1d0d6:	2300      	movs	r3, #0
   1d0d8:	9300      	str	r3, [sp, #0]
   1d0da:	2300      	movs	r3, #0
   1d0dc:	2100      	movs	r1, #0
   1d0de:	4c1d      	ldr	r4, [pc, #116]	; (1d154 <prvProcessReceivedCommands+0x108>)
   1d0e0:	47a0      	blx	r4
   1d0e2:	0003      	movs	r3, r0
   1d0e4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d0e6:	697b      	ldr	r3, [r7, #20]
   1d0e8:	2b00      	cmp	r3, #0
   1d0ea:	d11c      	bne.n	1d126 <prvProcessReceivedCommands+0xda>
   1d0ec:	b672      	cpsid	i
   1d0ee:	e7fe      	b.n	1d0ee <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d0f0:	2308      	movs	r3, #8
   1d0f2:	18fb      	adds	r3, r7, r3
   1d0f4:	685a      	ldr	r2, [r3, #4]
   1d0f6:	69fb      	ldr	r3, [r7, #28]
   1d0f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d0fa:	69fb      	ldr	r3, [r7, #28]
   1d0fc:	699b      	ldr	r3, [r3, #24]
   1d0fe:	2b00      	cmp	r3, #0
   1d100:	d101      	bne.n	1d106 <prvProcessReceivedCommands+0xba>
   1d102:	b672      	cpsid	i
   1d104:	e7fe      	b.n	1d104 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d106:	69fb      	ldr	r3, [r7, #28]
   1d108:	699a      	ldr	r2, [r3, #24]
   1d10a:	69bb      	ldr	r3, [r7, #24]
   1d10c:	18d1      	adds	r1, r2, r3
   1d10e:	69bb      	ldr	r3, [r7, #24]
   1d110:	69ba      	ldr	r2, [r7, #24]
   1d112:	69f8      	ldr	r0, [r7, #28]
   1d114:	4c0e      	ldr	r4, [pc, #56]	; (1d150 <prvProcessReceivedCommands+0x104>)
   1d116:	47a0      	blx	r4
					break;
   1d118:	e005      	b.n	1d126 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d11a:	69fb      	ldr	r3, [r7, #28]
   1d11c:	0018      	movs	r0, r3
   1d11e:	4b0e      	ldr	r3, [pc, #56]	; (1d158 <prvProcessReceivedCommands+0x10c>)
   1d120:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d122:	e000      	b.n	1d126 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d124:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d126:	4b0d      	ldr	r3, [pc, #52]	; (1d15c <prvProcessReceivedCommands+0x110>)
   1d128:	681b      	ldr	r3, [r3, #0]
   1d12a:	2208      	movs	r2, #8
   1d12c:	18b9      	adds	r1, r7, r2
   1d12e:	2200      	movs	r2, #0
   1d130:	0018      	movs	r0, r3
   1d132:	4b0b      	ldr	r3, [pc, #44]	; (1d160 <prvProcessReceivedCommands+0x114>)
   1d134:	4798      	blx	r3
   1d136:	1e03      	subs	r3, r0, #0
   1d138:	d18c      	bne.n	1d054 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d13a:	46c0      	nop			; (mov r8, r8)
   1d13c:	46bd      	mov	sp, r7
   1d13e:	b009      	add	sp, #36	; 0x24
   1d140:	bd90      	pop	{r4, r7, pc}
   1d142:	46c0      	nop			; (mov r8, r8)
   1d144:	0001988f 	.word	0x0001988f
   1d148:	0001cf7d 	.word	0x0001cf7d
   1d14c:	00037b4c 	.word	0x00037b4c
   1d150:	0001cfc5 	.word	0x0001cfc5
   1d154:	0001cd39 	.word	0x0001cd39
   1d158:	00019c15 	.word	0x00019c15
   1d15c:	2000408c 	.word	0x2000408c
   1d160:	0001a865 	.word	0x0001a865

0001d164 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d164:	b590      	push	{r4, r7, lr}
   1d166:	b089      	sub	sp, #36	; 0x24
   1d168:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d16a:	e03e      	b.n	1d1ea <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d16c:	4b28      	ldr	r3, [pc, #160]	; (1d210 <prvSwitchTimerLists+0xac>)
   1d16e:	681b      	ldr	r3, [r3, #0]
   1d170:	68db      	ldr	r3, [r3, #12]
   1d172:	681b      	ldr	r3, [r3, #0]
   1d174:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d176:	4b26      	ldr	r3, [pc, #152]	; (1d210 <prvSwitchTimerLists+0xac>)
   1d178:	681b      	ldr	r3, [r3, #0]
   1d17a:	68db      	ldr	r3, [r3, #12]
   1d17c:	68db      	ldr	r3, [r3, #12]
   1d17e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d180:	693b      	ldr	r3, [r7, #16]
   1d182:	3304      	adds	r3, #4
   1d184:	0018      	movs	r0, r3
   1d186:	4b23      	ldr	r3, [pc, #140]	; (1d214 <prvSwitchTimerLists+0xb0>)
   1d188:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d18a:	693b      	ldr	r3, [r7, #16]
   1d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d18e:	693a      	ldr	r2, [r7, #16]
   1d190:	0010      	movs	r0, r2
   1d192:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d194:	693b      	ldr	r3, [r7, #16]
   1d196:	69db      	ldr	r3, [r3, #28]
   1d198:	2b01      	cmp	r3, #1
   1d19a:	d126      	bne.n	1d1ea <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d19c:	693b      	ldr	r3, [r7, #16]
   1d19e:	699a      	ldr	r2, [r3, #24]
   1d1a0:	697b      	ldr	r3, [r7, #20]
   1d1a2:	18d3      	adds	r3, r2, r3
   1d1a4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d1a6:	68fa      	ldr	r2, [r7, #12]
   1d1a8:	697b      	ldr	r3, [r7, #20]
   1d1aa:	429a      	cmp	r2, r3
   1d1ac:	d90e      	bls.n	1d1cc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d1ae:	693b      	ldr	r3, [r7, #16]
   1d1b0:	68fa      	ldr	r2, [r7, #12]
   1d1b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d1b4:	693b      	ldr	r3, [r7, #16]
   1d1b6:	693a      	ldr	r2, [r7, #16]
   1d1b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d1ba:	4b15      	ldr	r3, [pc, #84]	; (1d210 <prvSwitchTimerLists+0xac>)
   1d1bc:	681a      	ldr	r2, [r3, #0]
   1d1be:	693b      	ldr	r3, [r7, #16]
   1d1c0:	3304      	adds	r3, #4
   1d1c2:	0019      	movs	r1, r3
   1d1c4:	0010      	movs	r0, r2
   1d1c6:	4b14      	ldr	r3, [pc, #80]	; (1d218 <prvSwitchTimerLists+0xb4>)
   1d1c8:	4798      	blx	r3
   1d1ca:	e00e      	b.n	1d1ea <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d1cc:	697a      	ldr	r2, [r7, #20]
   1d1ce:	6938      	ldr	r0, [r7, #16]
   1d1d0:	2300      	movs	r3, #0
   1d1d2:	9300      	str	r3, [sp, #0]
   1d1d4:	2300      	movs	r3, #0
   1d1d6:	2100      	movs	r1, #0
   1d1d8:	4c10      	ldr	r4, [pc, #64]	; (1d21c <prvSwitchTimerLists+0xb8>)
   1d1da:	47a0      	blx	r4
   1d1dc:	0003      	movs	r3, r0
   1d1de:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d1e0:	68bb      	ldr	r3, [r7, #8]
   1d1e2:	2b00      	cmp	r3, #0
   1d1e4:	d101      	bne.n	1d1ea <prvSwitchTimerLists+0x86>
   1d1e6:	b672      	cpsid	i
   1d1e8:	e7fe      	b.n	1d1e8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d1ea:	4b09      	ldr	r3, [pc, #36]	; (1d210 <prvSwitchTimerLists+0xac>)
   1d1ec:	681b      	ldr	r3, [r3, #0]
   1d1ee:	681b      	ldr	r3, [r3, #0]
   1d1f0:	2b00      	cmp	r3, #0
   1d1f2:	d1bb      	bne.n	1d16c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d1f4:	4b06      	ldr	r3, [pc, #24]	; (1d210 <prvSwitchTimerLists+0xac>)
   1d1f6:	681b      	ldr	r3, [r3, #0]
   1d1f8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d1fa:	4b09      	ldr	r3, [pc, #36]	; (1d220 <prvSwitchTimerLists+0xbc>)
   1d1fc:	681a      	ldr	r2, [r3, #0]
   1d1fe:	4b04      	ldr	r3, [pc, #16]	; (1d210 <prvSwitchTimerLists+0xac>)
   1d200:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d202:	4b07      	ldr	r3, [pc, #28]	; (1d220 <prvSwitchTimerLists+0xbc>)
   1d204:	687a      	ldr	r2, [r7, #4]
   1d206:	601a      	str	r2, [r3, #0]
}
   1d208:	46c0      	nop			; (mov r8, r8)
   1d20a:	46bd      	mov	sp, r7
   1d20c:	b007      	add	sp, #28
   1d20e:	bd90      	pop	{r4, r7, pc}
   1d210:	20004084 	.word	0x20004084
   1d214:	0001988f 	.word	0x0001988f
   1d218:	00019823 	.word	0x00019823
   1d21c:	0001cd39 	.word	0x0001cd39
   1d220:	20004088 	.word	0x20004088

0001d224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d224:	b580      	push	{r7, lr}
   1d226:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d228:	4b10      	ldr	r3, [pc, #64]	; (1d26c <prvCheckForValidListAndQueue+0x48>)
   1d22a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d22c:	4b10      	ldr	r3, [pc, #64]	; (1d270 <prvCheckForValidListAndQueue+0x4c>)
   1d22e:	681b      	ldr	r3, [r3, #0]
   1d230:	2b00      	cmp	r3, #0
   1d232:	d115      	bne.n	1d260 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d234:	4b0f      	ldr	r3, [pc, #60]	; (1d274 <prvCheckForValidListAndQueue+0x50>)
   1d236:	0018      	movs	r0, r3
   1d238:	4b0f      	ldr	r3, [pc, #60]	; (1d278 <prvCheckForValidListAndQueue+0x54>)
   1d23a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d23c:	4b0f      	ldr	r3, [pc, #60]	; (1d27c <prvCheckForValidListAndQueue+0x58>)
   1d23e:	0018      	movs	r0, r3
   1d240:	4b0d      	ldr	r3, [pc, #52]	; (1d278 <prvCheckForValidListAndQueue+0x54>)
   1d242:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d244:	4b0e      	ldr	r3, [pc, #56]	; (1d280 <prvCheckForValidListAndQueue+0x5c>)
   1d246:	4a0b      	ldr	r2, [pc, #44]	; (1d274 <prvCheckForValidListAndQueue+0x50>)
   1d248:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d24a:	4b0e      	ldr	r3, [pc, #56]	; (1d284 <prvCheckForValidListAndQueue+0x60>)
   1d24c:	4a0b      	ldr	r2, [pc, #44]	; (1d27c <prvCheckForValidListAndQueue+0x58>)
   1d24e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d250:	2200      	movs	r2, #0
   1d252:	210c      	movs	r1, #12
   1d254:	2005      	movs	r0, #5
   1d256:	4b0c      	ldr	r3, [pc, #48]	; (1d288 <prvCheckForValidListAndQueue+0x64>)
   1d258:	4798      	blx	r3
   1d25a:	0002      	movs	r2, r0
   1d25c:	4b04      	ldr	r3, [pc, #16]	; (1d270 <prvCheckForValidListAndQueue+0x4c>)
   1d25e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d260:	4b0a      	ldr	r3, [pc, #40]	; (1d28c <prvCheckForValidListAndQueue+0x68>)
   1d262:	4798      	blx	r3
}
   1d264:	46c0      	nop			; (mov r8, r8)
   1d266:	46bd      	mov	sp, r7
   1d268:	bd80      	pop	{r7, pc}
   1d26a:	46c0      	nop			; (mov r8, r8)
   1d26c:	00019a19 	.word	0x00019a19
   1d270:	2000408c 	.word	0x2000408c
   1d274:	2000405c 	.word	0x2000405c
   1d278:	0001978d 	.word	0x0001978d
   1d27c:	20004070 	.word	0x20004070
   1d280:	20004084 	.word	0x20004084
   1d284:	20004088 	.word	0x20004088
   1d288:	00019d05 	.word	0x00019d05
   1d28c:	00019a3d 	.word	0x00019a3d

0001d290 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1d290:	b580      	push	{r7, lr}
   1d292:	b082      	sub	sp, #8
   1d294:	af00      	add	r7, sp, #0
   1d296:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1d298:	687b      	ldr	r3, [r7, #4]
   1d29a:	7c1b      	ldrb	r3, [r3, #16]
   1d29c:	2b00      	cmp	r3, #0
   1d29e:	d00b      	beq.n	1d2b8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d2a0:	687b      	ldr	r3, [r7, #4]
   1d2a2:	689b      	ldr	r3, [r3, #8]
   1d2a4:	1c5a      	adds	r2, r3, #1
   1d2a6:	687b      	ldr	r3, [r7, #4]
   1d2a8:	68d9      	ldr	r1, [r3, #12]
   1d2aa:	4b10      	ldr	r3, [pc, #64]	; (1d2ec <advance_pointer+0x5c>)
   1d2ac:	0010      	movs	r0, r2
   1d2ae:	4798      	blx	r3
   1d2b0:	000b      	movs	r3, r1
   1d2b2:	001a      	movs	r2, r3
   1d2b4:	687b      	ldr	r3, [r7, #4]
   1d2b6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1d2b8:	687b      	ldr	r3, [r7, #4]
   1d2ba:	685b      	ldr	r3, [r3, #4]
   1d2bc:	1c5a      	adds	r2, r3, #1
   1d2be:	687b      	ldr	r3, [r7, #4]
   1d2c0:	68d9      	ldr	r1, [r3, #12]
   1d2c2:	4b0a      	ldr	r3, [pc, #40]	; (1d2ec <advance_pointer+0x5c>)
   1d2c4:	0010      	movs	r0, r2
   1d2c6:	4798      	blx	r3
   1d2c8:	000b      	movs	r3, r1
   1d2ca:	001a      	movs	r2, r3
   1d2cc:	687b      	ldr	r3, [r7, #4]
   1d2ce:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1d2d0:	687b      	ldr	r3, [r7, #4]
   1d2d2:	685a      	ldr	r2, [r3, #4]
   1d2d4:	687b      	ldr	r3, [r7, #4]
   1d2d6:	689b      	ldr	r3, [r3, #8]
   1d2d8:	1ad3      	subs	r3, r2, r3
   1d2da:	425a      	negs	r2, r3
   1d2dc:	4153      	adcs	r3, r2
   1d2de:	b2da      	uxtb	r2, r3
   1d2e0:	687b      	ldr	r3, [r7, #4]
   1d2e2:	741a      	strb	r2, [r3, #16]
 }
   1d2e4:	46c0      	nop			; (mov r8, r8)
   1d2e6:	46bd      	mov	sp, r7
   1d2e8:	b002      	add	sp, #8
   1d2ea:	bd80      	pop	{r7, pc}
   1d2ec:	00032351 	.word	0x00032351

0001d2f0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1d2f0:	b580      	push	{r7, lr}
   1d2f2:	b082      	sub	sp, #8
   1d2f4:	af00      	add	r7, sp, #0
   1d2f6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1d2f8:	687b      	ldr	r3, [r7, #4]
   1d2fa:	2200      	movs	r2, #0
   1d2fc:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d2fe:	687b      	ldr	r3, [r7, #4]
   1d300:	689b      	ldr	r3, [r3, #8]
   1d302:	1c5a      	adds	r2, r3, #1
   1d304:	687b      	ldr	r3, [r7, #4]
   1d306:	68d9      	ldr	r1, [r3, #12]
   1d308:	4b05      	ldr	r3, [pc, #20]	; (1d320 <retreat_pointer+0x30>)
   1d30a:	0010      	movs	r0, r2
   1d30c:	4798      	blx	r3
   1d30e:	000b      	movs	r3, r1
   1d310:	001a      	movs	r2, r3
   1d312:	687b      	ldr	r3, [r7, #4]
   1d314:	609a      	str	r2, [r3, #8]
 }
   1d316:	46c0      	nop			; (mov r8, r8)
   1d318:	46bd      	mov	sp, r7
   1d31a:	b002      	add	sp, #8
   1d31c:	bd80      	pop	{r7, pc}
   1d31e:	46c0      	nop			; (mov r8, r8)
   1d320:	00032351 	.word	0x00032351

0001d324 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1d324:	b580      	push	{r7, lr}
   1d326:	b084      	sub	sp, #16
   1d328:	af00      	add	r7, sp, #0
   1d32a:	6078      	str	r0, [r7, #4]
   1d32c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1d32e:	2014      	movs	r0, #20
   1d330:	4b09      	ldr	r3, [pc, #36]	; (1d358 <circular_buf_init+0x34>)
   1d332:	4798      	blx	r3
   1d334:	0003      	movs	r3, r0
   1d336:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1d338:	68fb      	ldr	r3, [r7, #12]
   1d33a:	687a      	ldr	r2, [r7, #4]
   1d33c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1d33e:	68fb      	ldr	r3, [r7, #12]
   1d340:	683a      	ldr	r2, [r7, #0]
   1d342:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1d344:	68fb      	ldr	r3, [r7, #12]
   1d346:	0018      	movs	r0, r3
   1d348:	4b04      	ldr	r3, [pc, #16]	; (1d35c <circular_buf_init+0x38>)
   1d34a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1d34c:	68fb      	ldr	r3, [r7, #12]
 }
   1d34e:	0018      	movs	r0, r3
   1d350:	46bd      	mov	sp, r7
   1d352:	b004      	add	sp, #16
   1d354:	bd80      	pop	{r7, pc}
   1d356:	46c0      	nop			; (mov r8, r8)
   1d358:	000342b9 	.word	0x000342b9
   1d35c:	0001d361 	.word	0x0001d361

0001d360 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1d360:	b580      	push	{r7, lr}
   1d362:	b082      	sub	sp, #8
   1d364:	af00      	add	r7, sp, #0
   1d366:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1d368:	687b      	ldr	r3, [r7, #4]
   1d36a:	2200      	movs	r2, #0
   1d36c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1d36e:	687b      	ldr	r3, [r7, #4]
   1d370:	2200      	movs	r2, #0
   1d372:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1d374:	687b      	ldr	r3, [r7, #4]
   1d376:	2200      	movs	r2, #0
   1d378:	741a      	strb	r2, [r3, #16]
 }
   1d37a:	46c0      	nop			; (mov r8, r8)
   1d37c:	46bd      	mov	sp, r7
   1d37e:	b002      	add	sp, #8
   1d380:	bd80      	pop	{r7, pc}
	...

0001d384 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1d384:	b580      	push	{r7, lr}
   1d386:	b082      	sub	sp, #8
   1d388:	af00      	add	r7, sp, #0
   1d38a:	6078      	str	r0, [r7, #4]
   1d38c:	000a      	movs	r2, r1
   1d38e:	1cfb      	adds	r3, r7, #3
   1d390:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1d392:	687b      	ldr	r3, [r7, #4]
   1d394:	681a      	ldr	r2, [r3, #0]
   1d396:	687b      	ldr	r3, [r7, #4]
   1d398:	685b      	ldr	r3, [r3, #4]
   1d39a:	18d3      	adds	r3, r2, r3
   1d39c:	1cfa      	adds	r2, r7, #3
   1d39e:	7812      	ldrb	r2, [r2, #0]
   1d3a0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1d3a2:	687b      	ldr	r3, [r7, #4]
   1d3a4:	0018      	movs	r0, r3
   1d3a6:	4b03      	ldr	r3, [pc, #12]	; (1d3b4 <circular_buf_put+0x30>)
   1d3a8:	4798      	blx	r3
 }
   1d3aa:	46c0      	nop			; (mov r8, r8)
   1d3ac:	46bd      	mov	sp, r7
   1d3ae:	b002      	add	sp, #8
   1d3b0:	bd80      	pop	{r7, pc}
   1d3b2:	46c0      	nop			; (mov r8, r8)
   1d3b4:	0001d291 	.word	0x0001d291

0001d3b8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1d3b8:	b580      	push	{r7, lr}
   1d3ba:	b084      	sub	sp, #16
   1d3bc:	af00      	add	r7, sp, #0
   1d3be:	6078      	str	r0, [r7, #4]
   1d3c0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1d3c2:	2301      	movs	r3, #1
   1d3c4:	425b      	negs	r3, r3
   1d3c6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1d3c8:	687b      	ldr	r3, [r7, #4]
   1d3ca:	0018      	movs	r0, r3
   1d3cc:	4b0d      	ldr	r3, [pc, #52]	; (1d404 <circular_buf_get+0x4c>)
   1d3ce:	4798      	blx	r3
   1d3d0:	0003      	movs	r3, r0
   1d3d2:	001a      	movs	r2, r3
   1d3d4:	2301      	movs	r3, #1
   1d3d6:	4053      	eors	r3, r2
   1d3d8:	b2db      	uxtb	r3, r3
   1d3da:	2b00      	cmp	r3, #0
   1d3dc:	d00d      	beq.n	1d3fa <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1d3de:	687b      	ldr	r3, [r7, #4]
   1d3e0:	681a      	ldr	r2, [r3, #0]
   1d3e2:	687b      	ldr	r3, [r7, #4]
   1d3e4:	689b      	ldr	r3, [r3, #8]
   1d3e6:	18d3      	adds	r3, r2, r3
   1d3e8:	781a      	ldrb	r2, [r3, #0]
   1d3ea:	683b      	ldr	r3, [r7, #0]
   1d3ec:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1d3ee:	687b      	ldr	r3, [r7, #4]
   1d3f0:	0018      	movs	r0, r3
   1d3f2:	4b05      	ldr	r3, [pc, #20]	; (1d408 <circular_buf_get+0x50>)
   1d3f4:	4798      	blx	r3

		 r = 0;
   1d3f6:	2300      	movs	r3, #0
   1d3f8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1d3fa:	68fb      	ldr	r3, [r7, #12]
 }
   1d3fc:	0018      	movs	r0, r3
   1d3fe:	46bd      	mov	sp, r7
   1d400:	b004      	add	sp, #16
   1d402:	bd80      	pop	{r7, pc}
   1d404:	0001d40d 	.word	0x0001d40d
   1d408:	0001d2f1 	.word	0x0001d2f1

0001d40c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1d40c:	b580      	push	{r7, lr}
   1d40e:	b082      	sub	sp, #8
   1d410:	af00      	add	r7, sp, #0
   1d412:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1d414:	687b      	ldr	r3, [r7, #4]
   1d416:	7c1b      	ldrb	r3, [r3, #16]
   1d418:	2201      	movs	r2, #1
   1d41a:	4053      	eors	r3, r2
   1d41c:	b2db      	uxtb	r3, r3
   1d41e:	2b00      	cmp	r3, #0
   1d420:	d007      	beq.n	1d432 <circular_buf_empty+0x26>
   1d422:	687b      	ldr	r3, [r7, #4]
   1d424:	685a      	ldr	r2, [r3, #4]
   1d426:	687b      	ldr	r3, [r7, #4]
   1d428:	689b      	ldr	r3, [r3, #8]
   1d42a:	429a      	cmp	r2, r3
   1d42c:	d101      	bne.n	1d432 <circular_buf_empty+0x26>
   1d42e:	2301      	movs	r3, #1
   1d430:	e000      	b.n	1d434 <circular_buf_empty+0x28>
   1d432:	2300      	movs	r3, #0
   1d434:	1c1a      	adds	r2, r3, #0
   1d436:	2301      	movs	r3, #1
   1d438:	4013      	ands	r3, r2
   1d43a:	b2db      	uxtb	r3, r3
 }
   1d43c:	0018      	movs	r0, r3
   1d43e:	46bd      	mov	sp, r7
   1d440:	b002      	add	sp, #8
   1d442:	bd80      	pop	{r7, pc}

0001d444 <system_interrupt_enable>:
{
   1d444:	b580      	push	{r7, lr}
   1d446:	b082      	sub	sp, #8
   1d448:	af00      	add	r7, sp, #0
   1d44a:	0002      	movs	r2, r0
   1d44c:	1dfb      	adds	r3, r7, #7
   1d44e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d450:	4b06      	ldr	r3, [pc, #24]	; (1d46c <system_interrupt_enable+0x28>)
   1d452:	1dfa      	adds	r2, r7, #7
   1d454:	7812      	ldrb	r2, [r2, #0]
   1d456:	0011      	movs	r1, r2
   1d458:	221f      	movs	r2, #31
   1d45a:	400a      	ands	r2, r1
   1d45c:	2101      	movs	r1, #1
   1d45e:	4091      	lsls	r1, r2
   1d460:	000a      	movs	r2, r1
   1d462:	601a      	str	r2, [r3, #0]
}
   1d464:	46c0      	nop			; (mov r8, r8)
   1d466:	46bd      	mov	sp, r7
   1d468:	b002      	add	sp, #8
   1d46a:	bd80      	pop	{r7, pc}
   1d46c:	e000e100 	.word	0xe000e100

0001d470 <usart_is_syncing>:
{
   1d470:	b580      	push	{r7, lr}
   1d472:	b084      	sub	sp, #16
   1d474:	af00      	add	r7, sp, #0
   1d476:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1d478:	687b      	ldr	r3, [r7, #4]
   1d47a:	681b      	ldr	r3, [r3, #0]
   1d47c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1d47e:	68fb      	ldr	r3, [r7, #12]
   1d480:	69db      	ldr	r3, [r3, #28]
   1d482:	1e5a      	subs	r2, r3, #1
   1d484:	4193      	sbcs	r3, r2
   1d486:	b2db      	uxtb	r3, r3
}
   1d488:	0018      	movs	r0, r3
   1d48a:	46bd      	mov	sp, r7
   1d48c:	b004      	add	sp, #16
   1d48e:	bd80      	pop	{r7, pc}

0001d490 <_usart_wait_for_sync>:
{
   1d490:	b580      	push	{r7, lr}
   1d492:	b082      	sub	sp, #8
   1d494:	af00      	add	r7, sp, #0
   1d496:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1d498:	46c0      	nop			; (mov r8, r8)
   1d49a:	687b      	ldr	r3, [r7, #4]
   1d49c:	0018      	movs	r0, r3
   1d49e:	4b04      	ldr	r3, [pc, #16]	; (1d4b0 <_usart_wait_for_sync+0x20>)
   1d4a0:	4798      	blx	r3
   1d4a2:	1e03      	subs	r3, r0, #0
   1d4a4:	d1f9      	bne.n	1d49a <_usart_wait_for_sync+0xa>
}
   1d4a6:	46c0      	nop			; (mov r8, r8)
   1d4a8:	46bd      	mov	sp, r7
   1d4aa:	b002      	add	sp, #8
   1d4ac:	bd80      	pop	{r7, pc}
   1d4ae:	46c0      	nop			; (mov r8, r8)
   1d4b0:	0001d471 	.word	0x0001d471

0001d4b4 <usart_get_config_defaults>:
{
   1d4b4:	b580      	push	{r7, lr}
   1d4b6:	b082      	sub	sp, #8
   1d4b8:	af00      	add	r7, sp, #0
   1d4ba:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
   1d4bc:	687b      	ldr	r3, [r7, #4]
   1d4be:	2280      	movs	r2, #128	; 0x80
   1d4c0:	05d2      	lsls	r2, r2, #23
   1d4c2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1d4c4:	687b      	ldr	r3, [r7, #4]
   1d4c6:	2200      	movs	r2, #0
   1d4c8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1d4ca:	687b      	ldr	r3, [r7, #4]
   1d4cc:	22ff      	movs	r2, #255	; 0xff
   1d4ce:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1d4d0:	687b      	ldr	r3, [r7, #4]
   1d4d2:	2200      	movs	r2, #0
   1d4d4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1d4d6:	687b      	ldr	r3, [r7, #4]
   1d4d8:	2200      	movs	r2, #0
   1d4da:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1d4dc:	687b      	ldr	r3, [r7, #4]
   1d4de:	2296      	movs	r2, #150	; 0x96
   1d4e0:	0192      	lsls	r2, r2, #6
   1d4e2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1d4e4:	687b      	ldr	r3, [r7, #4]
   1d4e6:	2224      	movs	r2, #36	; 0x24
   1d4e8:	2101      	movs	r1, #1
   1d4ea:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1d4ec:	687b      	ldr	r3, [r7, #4]
   1d4ee:	2225      	movs	r2, #37	; 0x25
   1d4f0:	2101      	movs	r1, #1
   1d4f2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1d4f4:	687b      	ldr	r3, [r7, #4]
   1d4f6:	2226      	movs	r2, #38	; 0x26
   1d4f8:	2100      	movs	r1, #0
   1d4fa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1d4fc:	687b      	ldr	r3, [r7, #4]
   1d4fe:	2227      	movs	r2, #39	; 0x27
   1d500:	2100      	movs	r1, #0
   1d502:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1d504:	687b      	ldr	r3, [r7, #4]
   1d506:	2200      	movs	r2, #0
   1d508:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1d50a:	687b      	ldr	r3, [r7, #4]
   1d50c:	2288      	movs	r2, #136	; 0x88
   1d50e:	0352      	lsls	r2, r2, #13
   1d510:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1d512:	687b      	ldr	r3, [r7, #4]
   1d514:	222c      	movs	r2, #44	; 0x2c
   1d516:	2100      	movs	r1, #0
   1d518:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1d51a:	687b      	ldr	r3, [r7, #4]
   1d51c:	222d      	movs	r2, #45	; 0x2d
   1d51e:	2100      	movs	r1, #0
   1d520:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1d522:	687b      	ldr	r3, [r7, #4]
   1d524:	2200      	movs	r2, #0
   1d526:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1d528:	687b      	ldr	r3, [r7, #4]
   1d52a:	2200      	movs	r2, #0
   1d52c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1d52e:	687b      	ldr	r3, [r7, #4]
   1d530:	2200      	movs	r2, #0
   1d532:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1d534:	687b      	ldr	r3, [r7, #4]
   1d536:	2200      	movs	r2, #0
   1d538:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1d53a:	687b      	ldr	r3, [r7, #4]
   1d53c:	2200      	movs	r2, #0
   1d53e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1d540:	687b      	ldr	r3, [r7, #4]
   1d542:	2200      	movs	r2, #0
   1d544:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
   1d546:	687b      	ldr	r3, [r7, #4]
   1d548:	2200      	movs	r2, #0
   1d54a:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
   1d54c:	687b      	ldr	r3, [r7, #4]
   1d54e:	2200      	movs	r2, #0
   1d550:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
   1d552:	687b      	ldr	r3, [r7, #4]
   1d554:	2200      	movs	r2, #0
   1d556:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
   1d558:	687b      	ldr	r3, [r7, #4]
   1d55a:	2200      	movs	r2, #0
   1d55c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1d55e:	687b      	ldr	r3, [r7, #4]
   1d560:	2213      	movs	r2, #19
   1d562:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
   1d564:	687b      	ldr	r3, [r7, #4]
   1d566:	2200      	movs	r2, #0
   1d568:	775a      	strb	r2, [r3, #29]
}
   1d56a:	46c0      	nop			; (mov r8, r8)
   1d56c:	46bd      	mov	sp, r7
   1d56e:	b002      	add	sp, #8
   1d570:	bd80      	pop	{r7, pc}
	...

0001d574 <usart_enable>:
{
   1d574:	b580      	push	{r7, lr}
   1d576:	b084      	sub	sp, #16
   1d578:	af00      	add	r7, sp, #0
   1d57a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1d57c:	687b      	ldr	r3, [r7, #4]
   1d57e:	681b      	ldr	r3, [r3, #0]
   1d580:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d582:	687b      	ldr	r3, [r7, #4]
   1d584:	681b      	ldr	r3, [r3, #0]
   1d586:	0018      	movs	r0, r3
   1d588:	4b09      	ldr	r3, [pc, #36]	; (1d5b0 <usart_enable+0x3c>)
   1d58a:	4798      	blx	r3
   1d58c:	0003      	movs	r3, r0
   1d58e:	0018      	movs	r0, r3
   1d590:	4b08      	ldr	r3, [pc, #32]	; (1d5b4 <usart_enable+0x40>)
   1d592:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1d594:	687b      	ldr	r3, [r7, #4]
   1d596:	0018      	movs	r0, r3
   1d598:	4b07      	ldr	r3, [pc, #28]	; (1d5b8 <usart_enable+0x44>)
   1d59a:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1d59c:	68fb      	ldr	r3, [r7, #12]
   1d59e:	681b      	ldr	r3, [r3, #0]
   1d5a0:	2202      	movs	r2, #2
   1d5a2:	431a      	orrs	r2, r3
   1d5a4:	68fb      	ldr	r3, [r7, #12]
   1d5a6:	601a      	str	r2, [r3, #0]
}
   1d5a8:	46c0      	nop			; (mov r8, r8)
   1d5aa:	46bd      	mov	sp, r7
   1d5ac:	b004      	add	sp, #16
   1d5ae:	bd80      	pop	{r7, pc}
   1d5b0:	00026f79 	.word	0x00026f79
   1d5b4:	0001d445 	.word	0x0001d445
   1d5b8:	0001d491 	.word	0x0001d491

0001d5bc <usart_enable_callback>:
{
   1d5bc:	b580      	push	{r7, lr}
   1d5be:	b082      	sub	sp, #8
   1d5c0:	af00      	add	r7, sp, #0
   1d5c2:	6078      	str	r0, [r7, #4]
   1d5c4:	000a      	movs	r2, r1
   1d5c6:	1cfb      	adds	r3, r7, #3
   1d5c8:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
   1d5ca:	687b      	ldr	r3, [r7, #4]
   1d5cc:	2231      	movs	r2, #49	; 0x31
   1d5ce:	5c9b      	ldrb	r3, [r3, r2]
   1d5d0:	b25a      	sxtb	r2, r3
   1d5d2:	1cfb      	adds	r3, r7, #3
   1d5d4:	781b      	ldrb	r3, [r3, #0]
   1d5d6:	2101      	movs	r1, #1
   1d5d8:	4099      	lsls	r1, r3
   1d5da:	000b      	movs	r3, r1
   1d5dc:	b25b      	sxtb	r3, r3
   1d5de:	4313      	orrs	r3, r2
   1d5e0:	b25b      	sxtb	r3, r3
   1d5e2:	b2d9      	uxtb	r1, r3
   1d5e4:	687b      	ldr	r3, [r7, #4]
   1d5e6:	2231      	movs	r2, #49	; 0x31
   1d5e8:	5499      	strb	r1, [r3, r2]
}
   1d5ea:	46c0      	nop			; (mov r8, r8)
   1d5ec:	46bd      	mov	sp, r7
   1d5ee:	b002      	add	sp, #8
   1d5f0:	bd80      	pop	{r7, pc}
	...

0001d5f4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1d5f4:	b580      	push	{r7, lr}
   1d5f6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1d5f8:	2380      	movs	r3, #128	; 0x80
   1d5fa:	009a      	lsls	r2, r3, #2
   1d5fc:	4b0f      	ldr	r3, [pc, #60]	; (1d63c <InitializeSerialConsole+0x48>)
   1d5fe:	0011      	movs	r1, r2
   1d600:	0018      	movs	r0, r3
   1d602:	4b0f      	ldr	r3, [pc, #60]	; (1d640 <InitializeSerialConsole+0x4c>)
   1d604:	4798      	blx	r3
   1d606:	0002      	movs	r2, r0
   1d608:	4b0e      	ldr	r3, [pc, #56]	; (1d644 <InitializeSerialConsole+0x50>)
   1d60a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1d60c:	2380      	movs	r3, #128	; 0x80
   1d60e:	009a      	lsls	r2, r3, #2
   1d610:	4b0d      	ldr	r3, [pc, #52]	; (1d648 <InitializeSerialConsole+0x54>)
   1d612:	0011      	movs	r1, r2
   1d614:	0018      	movs	r0, r3
   1d616:	4b0a      	ldr	r3, [pc, #40]	; (1d640 <InitializeSerialConsole+0x4c>)
   1d618:	4798      	blx	r3
   1d61a:	0002      	movs	r2, r0
   1d61c:	4b0b      	ldr	r3, [pc, #44]	; (1d64c <InitializeSerialConsole+0x58>)
   1d61e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1d620:	4b0b      	ldr	r3, [pc, #44]	; (1d650 <InitializeSerialConsole+0x5c>)
   1d622:	4798      	blx	r3
    configure_usart_callbacks();
   1d624:	4b0b      	ldr	r3, [pc, #44]	; (1d654 <InitializeSerialConsole+0x60>)
   1d626:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1d628:	490b      	ldr	r1, [pc, #44]	; (1d658 <InitializeSerialConsole+0x64>)
   1d62a:	4b0c      	ldr	r3, [pc, #48]	; (1d65c <InitializeSerialConsole+0x68>)
   1d62c:	2201      	movs	r2, #1
   1d62e:	0018      	movs	r0, r3
   1d630:	4b0b      	ldr	r3, [pc, #44]	; (1d660 <InitializeSerialConsole+0x6c>)
   1d632:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1d634:	46c0      	nop			; (mov r8, r8)
   1d636:	46bd      	mov	sp, r7
   1d638:	bd80      	pop	{r7, pc}
   1d63a:	46c0      	nop			; (mov r8, r8)
   1d63c:	20005690 	.word	0x20005690
   1d640:	0001d325 	.word	0x0001d325
   1d644:	20005488 	.word	0x20005488
   1d648:	20005490 	.word	0x20005490
   1d64c:	20005894 	.word	0x20005894
   1d650:	0001d7c9 	.word	0x0001d7c9
   1d654:	0001d841 	.word	0x0001d841
   1d658:	2000548c 	.word	0x2000548c
   1d65c:	20005454 	.word	0x20005454
   1d660:	00028821 	.word	0x00028821

0001d664 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1d664:	b580      	push	{r7, lr}
   1d666:	b084      	sub	sp, #16
   1d668:	af00      	add	r7, sp, #0
   1d66a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1d66c:	4b1a      	ldr	r3, [pc, #104]	; (1d6d8 <SerialConsoleWriteString+0x74>)
   1d66e:	4798      	blx	r3
    if (string != NULL) {
   1d670:	687b      	ldr	r3, [r7, #4]
   1d672:	2b00      	cmp	r3, #0
   1d674:	d02a      	beq.n	1d6cc <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1d676:	2300      	movs	r3, #0
   1d678:	60fb      	str	r3, [r7, #12]
   1d67a:	e00b      	b.n	1d694 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1d67c:	4b17      	ldr	r3, [pc, #92]	; (1d6dc <SerialConsoleWriteString+0x78>)
   1d67e:	6818      	ldr	r0, [r3, #0]
   1d680:	687a      	ldr	r2, [r7, #4]
   1d682:	68fb      	ldr	r3, [r7, #12]
   1d684:	18d3      	adds	r3, r2, r3
   1d686:	781b      	ldrb	r3, [r3, #0]
   1d688:	0019      	movs	r1, r3
   1d68a:	4b15      	ldr	r3, [pc, #84]	; (1d6e0 <SerialConsoleWriteString+0x7c>)
   1d68c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1d68e:	68fb      	ldr	r3, [r7, #12]
   1d690:	3301      	adds	r3, #1
   1d692:	60fb      	str	r3, [r7, #12]
   1d694:	687b      	ldr	r3, [r7, #4]
   1d696:	0018      	movs	r0, r3
   1d698:	4b12      	ldr	r3, [pc, #72]	; (1d6e4 <SerialConsoleWriteString+0x80>)
   1d69a:	4798      	blx	r3
   1d69c:	0002      	movs	r2, r0
   1d69e:	68fb      	ldr	r3, [r7, #12]
   1d6a0:	429a      	cmp	r2, r3
   1d6a2:	d8eb      	bhi.n	1d67c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1d6a4:	4b10      	ldr	r3, [pc, #64]	; (1d6e8 <SerialConsoleWriteString+0x84>)
   1d6a6:	2101      	movs	r1, #1
   1d6a8:	0018      	movs	r0, r3
   1d6aa:	4b10      	ldr	r3, [pc, #64]	; (1d6ec <SerialConsoleWriteString+0x88>)
   1d6ac:	4798      	blx	r3
   1d6ae:	1e03      	subs	r3, r0, #0
   1d6b0:	d10c      	bne.n	1d6cc <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1d6b2:	4b0a      	ldr	r3, [pc, #40]	; (1d6dc <SerialConsoleWriteString+0x78>)
   1d6b4:	681b      	ldr	r3, [r3, #0]
   1d6b6:	4a0e      	ldr	r2, [pc, #56]	; (1d6f0 <SerialConsoleWriteString+0x8c>)
   1d6b8:	0011      	movs	r1, r2
   1d6ba:	0018      	movs	r0, r3
   1d6bc:	4b0d      	ldr	r3, [pc, #52]	; (1d6f4 <SerialConsoleWriteString+0x90>)
   1d6be:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d6c0:	490b      	ldr	r1, [pc, #44]	; (1d6f0 <SerialConsoleWriteString+0x8c>)
   1d6c2:	4b09      	ldr	r3, [pc, #36]	; (1d6e8 <SerialConsoleWriteString+0x84>)
   1d6c4:	2201      	movs	r2, #1
   1d6c6:	0018      	movs	r0, r3
   1d6c8:	4b0b      	ldr	r3, [pc, #44]	; (1d6f8 <SerialConsoleWriteString+0x94>)
   1d6ca:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1d6cc:	4b0b      	ldr	r3, [pc, #44]	; (1d6fc <SerialConsoleWriteString+0x98>)
   1d6ce:	4798      	blx	r3
}
   1d6d0:	46c0      	nop			; (mov r8, r8)
   1d6d2:	46bd      	mov	sp, r7
   1d6d4:	b004      	add	sp, #16
   1d6d6:	bd80      	pop	{r7, pc}
   1d6d8:	0001bcd1 	.word	0x0001bcd1
   1d6dc:	20005894 	.word	0x20005894
   1d6e0:	0001d385 	.word	0x0001d385
   1d6e4:	000346cf 	.word	0x000346cf
   1d6e8:	20005454 	.word	0x20005454
   1d6ec:	00028869 	.word	0x00028869
   1d6f0:	20005890 	.word	0x20005890
   1d6f4:	0001d3b9 	.word	0x0001d3b9
   1d6f8:	000287d9 	.word	0x000287d9
   1d6fc:	0001bce9 	.word	0x0001bce9

0001d700 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1d700:	b580      	push	{r7, lr}
   1d702:	b084      	sub	sp, #16
   1d704:	af00      	add	r7, sp, #0
   1d706:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1d708:	4b08      	ldr	r3, [pc, #32]	; (1d72c <SerialConsoleReadCharacter+0x2c>)
   1d70a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1d70c:	4b08      	ldr	r3, [pc, #32]	; (1d730 <SerialConsoleReadCharacter+0x30>)
   1d70e:	681b      	ldr	r3, [r3, #0]
   1d710:	687a      	ldr	r2, [r7, #4]
   1d712:	0011      	movs	r1, r2
   1d714:	0018      	movs	r0, r3
   1d716:	4b07      	ldr	r3, [pc, #28]	; (1d734 <SerialConsoleReadCharacter+0x34>)
   1d718:	4798      	blx	r3
   1d71a:	0003      	movs	r3, r0
   1d71c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1d71e:	4b06      	ldr	r3, [pc, #24]	; (1d738 <SerialConsoleReadCharacter+0x38>)
   1d720:	4798      	blx	r3
    return a;
   1d722:	68fb      	ldr	r3, [r7, #12]
}
   1d724:	0018      	movs	r0, r3
   1d726:	46bd      	mov	sp, r7
   1d728:	b004      	add	sp, #16
   1d72a:	bd80      	pop	{r7, pc}
   1d72c:	0001bcd1 	.word	0x0001bcd1
   1d730:	20005488 	.word	0x20005488
   1d734:	0001d3b9 	.word	0x0001d3b9
   1d738:	0001bce9 	.word	0x0001bce9

0001d73c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1d73c:	b580      	push	{r7, lr}
   1d73e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1d740:	4b02      	ldr	r3, [pc, #8]	; (1d74c <getLogLevel+0x10>)
   1d742:	781b      	ldrb	r3, [r3, #0]
}
   1d744:	0018      	movs	r0, r3
   1d746:	46bd      	mov	sp, r7
   1d748:	bd80      	pop	{r7, pc}
   1d74a:	46c0      	nop			; (mov r8, r8)
   1d74c:	20004098 	.word	0x20004098

0001d750 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1d750:	b40e      	push	{r1, r2, r3}
   1d752:	b590      	push	{r4, r7, lr}
   1d754:	b084      	sub	sp, #16
   1d756:	af00      	add	r7, sp, #0
   1d758:	0002      	movs	r2, r0
   1d75a:	1dfb      	adds	r3, r7, #7
   1d75c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1d75e:	4b0e      	ldr	r3, [pc, #56]	; (1d798 <LogMessage+0x48>)
   1d760:	4798      	blx	r3
   1d762:	0003      	movs	r3, r0
   1d764:	001a      	movs	r2, r3
   1d766:	1dfb      	adds	r3, r7, #7
   1d768:	781b      	ldrb	r3, [r3, #0]
   1d76a:	4293      	cmp	r3, r2
   1d76c:	d30c      	bcc.n	1d788 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1d76e:	2320      	movs	r3, #32
   1d770:	18fb      	adds	r3, r7, r3
   1d772:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1d774:	68fb      	ldr	r3, [r7, #12]
   1d776:	69fa      	ldr	r2, [r7, #28]
   1d778:	4808      	ldr	r0, [pc, #32]	; (1d79c <LogMessage+0x4c>)
   1d77a:	217f      	movs	r1, #127	; 0x7f
   1d77c:	4c08      	ldr	r4, [pc, #32]	; (1d7a0 <LogMessage+0x50>)
   1d77e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1d780:	4b06      	ldr	r3, [pc, #24]	; (1d79c <LogMessage+0x4c>)
   1d782:	0018      	movs	r0, r3
   1d784:	4b07      	ldr	r3, [pc, #28]	; (1d7a4 <LogMessage+0x54>)
   1d786:	4798      	blx	r3
        va_end(ap);
    }
};
   1d788:	46c0      	nop			; (mov r8, r8)
   1d78a:	46bd      	mov	sp, r7
   1d78c:	b004      	add	sp, #16
   1d78e:	bc90      	pop	{r4, r7}
   1d790:	bc08      	pop	{r3}
   1d792:	b003      	add	sp, #12
   1d794:	4718      	bx	r3
   1d796:	46c0      	nop			; (mov r8, r8)
   1d798:	0001d73d 	.word	0x0001d73d
   1d79c:	200053d4 	.word	0x200053d4
   1d7a0:	00034909 	.word	0x00034909
   1d7a4:	0001d665 	.word	0x0001d665

0001d7a8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1d7a8:	b40f      	push	{r0, r1, r2, r3}
   1d7aa:	b580      	push	{r7, lr}
   1d7ac:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1d7ae:	68bb      	ldr	r3, [r7, #8]
   1d7b0:	0019      	movs	r1, r3
   1d7b2:	2001      	movs	r0, #1
   1d7b4:	4b03      	ldr	r3, [pc, #12]	; (1d7c4 <LogMessageDebug+0x1c>)
   1d7b6:	4798      	blx	r3
};
   1d7b8:	46c0      	nop			; (mov r8, r8)
   1d7ba:	46bd      	mov	sp, r7
   1d7bc:	bc80      	pop	{r7}
   1d7be:	bc08      	pop	{r3}
   1d7c0:	b004      	add	sp, #16
   1d7c2:	4718      	bx	r3
   1d7c4:	0001d751 	.word	0x0001d751

0001d7c8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1d7c8:	b580      	push	{r7, lr}
   1d7ca:	b090      	sub	sp, #64	; 0x40
   1d7cc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1d7ce:	003b      	movs	r3, r7
   1d7d0:	0018      	movs	r0, r3
   1d7d2:	4b14      	ldr	r3, [pc, #80]	; (1d824 <configure_usart+0x5c>)
   1d7d4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1d7d6:	003b      	movs	r3, r7
   1d7d8:	22e1      	movs	r2, #225	; 0xe1
   1d7da:	0252      	lsls	r2, r2, #9
   1d7dc:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1d7de:	003b      	movs	r3, r7
   1d7e0:	22c4      	movs	r2, #196	; 0xc4
   1d7e2:	0392      	lsls	r2, r2, #14
   1d7e4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1d7e6:	003b      	movs	r3, r7
   1d7e8:	2201      	movs	r2, #1
   1d7ea:	4252      	negs	r2, r2
   1d7ec:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1d7ee:	003b      	movs	r3, r7
   1d7f0:	2201      	movs	r2, #1
   1d7f2:	4252      	negs	r2, r2
   1d7f4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1d7f6:	003b      	movs	r3, r7
   1d7f8:	4a0b      	ldr	r2, [pc, #44]	; (1d828 <configure_usart+0x60>)
   1d7fa:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1d7fc:	003b      	movs	r3, r7
   1d7fe:	4a0b      	ldr	r2, [pc, #44]	; (1d82c <configure_usart+0x64>)
   1d800:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1d802:	46c0      	nop			; (mov r8, r8)
   1d804:	003a      	movs	r2, r7
   1d806:	490a      	ldr	r1, [pc, #40]	; (1d830 <configure_usart+0x68>)
   1d808:	4b0a      	ldr	r3, [pc, #40]	; (1d834 <configure_usart+0x6c>)
   1d80a:	0018      	movs	r0, r3
   1d80c:	4b0a      	ldr	r3, [pc, #40]	; (1d838 <configure_usart+0x70>)
   1d80e:	4798      	blx	r3
   1d810:	1e03      	subs	r3, r0, #0
   1d812:	d1f7      	bne.n	1d804 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1d814:	4b07      	ldr	r3, [pc, #28]	; (1d834 <configure_usart+0x6c>)
   1d816:	0018      	movs	r0, r3
   1d818:	4b08      	ldr	r3, [pc, #32]	; (1d83c <configure_usart+0x74>)
   1d81a:	4798      	blx	r3
}
   1d81c:	46c0      	nop			; (mov r8, r8)
   1d81e:	46bd      	mov	sp, r7
   1d820:	b010      	add	sp, #64	; 0x40
   1d822:	bd80      	pop	{r7, pc}
   1d824:	0001d4b5 	.word	0x0001d4b5
   1d828:	002a0003 	.word	0x002a0003
   1d82c:	002b0003 	.word	0x002b0003
   1d830:	42001800 	.word	0x42001800
   1d834:	20005454 	.word	0x20005454
   1d838:	000283dd 	.word	0x000283dd
   1d83c:	0001d575 	.word	0x0001d575

0001d840 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1d840:	b580      	push	{r7, lr}
   1d842:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d844:	490c      	ldr	r1, [pc, #48]	; (1d878 <configure_usart_callbacks+0x38>)
   1d846:	4b0d      	ldr	r3, [pc, #52]	; (1d87c <configure_usart_callbacks+0x3c>)
   1d848:	2200      	movs	r2, #0
   1d84a:	0018      	movs	r0, r3
   1d84c:	4b0c      	ldr	r3, [pc, #48]	; (1d880 <configure_usart_callbacks+0x40>)
   1d84e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1d850:	490c      	ldr	r1, [pc, #48]	; (1d884 <configure_usart_callbacks+0x44>)
   1d852:	4b0a      	ldr	r3, [pc, #40]	; (1d87c <configure_usart_callbacks+0x3c>)
   1d854:	2201      	movs	r2, #1
   1d856:	0018      	movs	r0, r3
   1d858:	4b09      	ldr	r3, [pc, #36]	; (1d880 <configure_usart_callbacks+0x40>)
   1d85a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d85c:	4b07      	ldr	r3, [pc, #28]	; (1d87c <configure_usart_callbacks+0x3c>)
   1d85e:	2100      	movs	r1, #0
   1d860:	0018      	movs	r0, r3
   1d862:	4b09      	ldr	r3, [pc, #36]	; (1d888 <configure_usart_callbacks+0x48>)
   1d864:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1d866:	4b05      	ldr	r3, [pc, #20]	; (1d87c <configure_usart_callbacks+0x3c>)
   1d868:	2101      	movs	r1, #1
   1d86a:	0018      	movs	r0, r3
   1d86c:	4b06      	ldr	r3, [pc, #24]	; (1d888 <configure_usart_callbacks+0x48>)
   1d86e:	4798      	blx	r3
}
   1d870:	46c0      	nop			; (mov r8, r8)
   1d872:	46bd      	mov	sp, r7
   1d874:	bd80      	pop	{r7, pc}
   1d876:	46c0      	nop			; (mov r8, r8)
   1d878:	0001d8d5 	.word	0x0001d8d5
   1d87c:	20005454 	.word	0x20005454
   1d880:	00028791 	.word	0x00028791
   1d884:	0001d88d 	.word	0x0001d88d
   1d888:	0001d5bd 	.word	0x0001d5bd

0001d88c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1d88c:	b580      	push	{r7, lr}
   1d88e:	b082      	sub	sp, #8
   1d890:	af00      	add	r7, sp, #0
   1d892:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1d894:	4b09      	ldr	r3, [pc, #36]	; (1d8bc <usart_read_callback+0x30>)
   1d896:	681a      	ldr	r2, [r3, #0]
   1d898:	4b09      	ldr	r3, [pc, #36]	; (1d8c0 <usart_read_callback+0x34>)
   1d89a:	781b      	ldrb	r3, [r3, #0]
   1d89c:	0019      	movs	r1, r3
   1d89e:	0010      	movs	r0, r2
   1d8a0:	4b08      	ldr	r3, [pc, #32]	; (1d8c4 <usart_read_callback+0x38>)
   1d8a2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1d8a4:	4906      	ldr	r1, [pc, #24]	; (1d8c0 <usart_read_callback+0x34>)
   1d8a6:	4b08      	ldr	r3, [pc, #32]	; (1d8c8 <usart_read_callback+0x3c>)
   1d8a8:	2201      	movs	r2, #1
   1d8aa:	0018      	movs	r0, r3
   1d8ac:	4b07      	ldr	r3, [pc, #28]	; (1d8cc <usart_read_callback+0x40>)
   1d8ae:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1d8b0:	4b07      	ldr	r3, [pc, #28]	; (1d8d0 <usart_read_callback+0x44>)
   1d8b2:	4798      	blx	r3
}
   1d8b4:	46c0      	nop			; (mov r8, r8)
   1d8b6:	46bd      	mov	sp, r7
   1d8b8:	b002      	add	sp, #8
   1d8ba:	bd80      	pop	{r7, pc}
   1d8bc:	20005488 	.word	0x20005488
   1d8c0:	2000548c 	.word	0x2000548c
   1d8c4:	0001d385 	.word	0x0001d385
   1d8c8:	20005454 	.word	0x20005454
   1d8cc:	00028821 	.word	0x00028821
   1d8d0:	000139f9 	.word	0x000139f9

0001d8d4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1d8d4:	b580      	push	{r7, lr}
   1d8d6:	b082      	sub	sp, #8
   1d8d8:	af00      	add	r7, sp, #0
   1d8da:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1d8dc:	4b09      	ldr	r3, [pc, #36]	; (1d904 <usart_write_callback+0x30>)
   1d8de:	681b      	ldr	r3, [r3, #0]
   1d8e0:	4a09      	ldr	r2, [pc, #36]	; (1d908 <usart_write_callback+0x34>)
   1d8e2:	0011      	movs	r1, r2
   1d8e4:	0018      	movs	r0, r3
   1d8e6:	4b09      	ldr	r3, [pc, #36]	; (1d90c <usart_write_callback+0x38>)
   1d8e8:	4798      	blx	r3
   1d8ea:	0003      	movs	r3, r0
   1d8ec:	3301      	adds	r3, #1
   1d8ee:	d005      	beq.n	1d8fc <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d8f0:	4905      	ldr	r1, [pc, #20]	; (1d908 <usart_write_callback+0x34>)
   1d8f2:	4b07      	ldr	r3, [pc, #28]	; (1d910 <usart_write_callback+0x3c>)
   1d8f4:	2201      	movs	r2, #1
   1d8f6:	0018      	movs	r0, r3
   1d8f8:	4b06      	ldr	r3, [pc, #24]	; (1d914 <usart_write_callback+0x40>)
   1d8fa:	4798      	blx	r3
    }
}
   1d8fc:	46c0      	nop			; (mov r8, r8)
   1d8fe:	46bd      	mov	sp, r7
   1d900:	b002      	add	sp, #8
   1d902:	bd80      	pop	{r7, pc}
   1d904:	20005894 	.word	0x20005894
   1d908:	20005890 	.word	0x20005890
   1d90c:	0001d3b9 	.word	0x0001d3b9
   1d910:	20005454 	.word	0x20005454
   1d914:	000287d9 	.word	0x000287d9

0001d918 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1d918:	b590      	push	{r4, r7, lr}
   1d91a:	b087      	sub	sp, #28
   1d91c:	af00      	add	r7, sp, #0
   1d91e:	60f8      	str	r0, [r7, #12]
   1d920:	000c      	movs	r4, r1
   1d922:	0010      	movs	r0, r2
   1d924:	0019      	movs	r1, r3
   1d926:	230a      	movs	r3, #10
   1d928:	18fb      	adds	r3, r7, r3
   1d92a:	1c22      	adds	r2, r4, #0
   1d92c:	801a      	strh	r2, [r3, #0]
   1d92e:	2308      	movs	r3, #8
   1d930:	18fb      	adds	r3, r7, r3
   1d932:	1c02      	adds	r2, r0, #0
   1d934:	801a      	strh	r2, [r3, #0]
   1d936:	1dfb      	adds	r3, r7, #7
   1d938:	1c0a      	adds	r2, r1, #0
   1d93a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1d93c:	230a      	movs	r3, #10
   1d93e:	18fb      	adds	r3, r7, r3
   1d940:	881a      	ldrh	r2, [r3, #0]
   1d942:	2308      	movs	r3, #8
   1d944:	18fb      	adds	r3, r7, r3
   1d946:	881b      	ldrh	r3, [r3, #0]
   1d948:	1ad3      	subs	r3, r2, r3
   1d94a:	3307      	adds	r3, #7
   1d94c:	2b00      	cmp	r3, #0
   1d94e:	da00      	bge.n	1d952 <SDMMC_UNSTUFF_BITS+0x3a>
   1d950:	3307      	adds	r3, #7
   1d952:	10db      	asrs	r3, r3, #3
   1d954:	3b01      	subs	r3, #1
   1d956:	68fa      	ldr	r2, [r7, #12]
   1d958:	18d3      	adds	r3, r2, r3
   1d95a:	781b      	ldrb	r3, [r3, #0]
   1d95c:	0019      	movs	r1, r3
   1d95e:	2308      	movs	r3, #8
   1d960:	18fb      	adds	r3, r7, r3
   1d962:	881b      	ldrh	r3, [r3, #0]
   1d964:	2207      	movs	r2, #7
   1d966:	4013      	ands	r3, r2
   1d968:	4119      	asrs	r1, r3
   1d96a:	000b      	movs	r3, r1
   1d96c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1d96e:	2308      	movs	r3, #8
   1d970:	18fb      	adds	r3, r7, r3
   1d972:	881b      	ldrh	r3, [r3, #0]
   1d974:	2207      	movs	r2, #7
   1d976:	401a      	ands	r2, r3
   1d978:	1dfb      	adds	r3, r7, #7
   1d97a:	781b      	ldrb	r3, [r3, #0]
   1d97c:	18d3      	adds	r3, r2, r3
   1d97e:	2b08      	cmp	r3, #8
   1d980:	dd1c      	ble.n	1d9bc <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1d982:	230a      	movs	r3, #10
   1d984:	18fb      	adds	r3, r7, r3
   1d986:	881a      	ldrh	r2, [r3, #0]
   1d988:	2308      	movs	r3, #8
   1d98a:	18fb      	adds	r3, r7, r3
   1d98c:	881b      	ldrh	r3, [r3, #0]
   1d98e:	1ad3      	subs	r3, r2, r3
   1d990:	3307      	adds	r3, #7
   1d992:	2b00      	cmp	r3, #0
   1d994:	da00      	bge.n	1d998 <SDMMC_UNSTUFF_BITS+0x80>
   1d996:	3307      	adds	r3, #7
   1d998:	10db      	asrs	r3, r3, #3
   1d99a:	3b02      	subs	r3, #2
   1d99c:	68fa      	ldr	r2, [r7, #12]
   1d99e:	18d3      	adds	r3, r2, r3
   1d9a0:	781b      	ldrb	r3, [r3, #0]
   1d9a2:	0019      	movs	r1, r3
   1d9a4:	2308      	movs	r3, #8
   1d9a6:	18fb      	adds	r3, r7, r3
   1d9a8:	881b      	ldrh	r3, [r3, #0]
   1d9aa:	2207      	movs	r2, #7
   1d9ac:	4013      	ands	r3, r2
   1d9ae:	2208      	movs	r2, #8
   1d9b0:	1ad3      	subs	r3, r2, r3
   1d9b2:	4099      	lsls	r1, r3
   1d9b4:	000b      	movs	r3, r1
   1d9b6:	697a      	ldr	r2, [r7, #20]
   1d9b8:	4313      	orrs	r3, r2
   1d9ba:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d9bc:	2308      	movs	r3, #8
   1d9be:	18fb      	adds	r3, r7, r3
   1d9c0:	881b      	ldrh	r3, [r3, #0]
   1d9c2:	2207      	movs	r2, #7
   1d9c4:	401a      	ands	r2, r3
   1d9c6:	1dfb      	adds	r3, r7, #7
   1d9c8:	781b      	ldrb	r3, [r3, #0]
   1d9ca:	18d3      	adds	r3, r2, r3
   1d9cc:	2b10      	cmp	r3, #16
   1d9ce:	dd1c      	ble.n	1da0a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d9d0:	230a      	movs	r3, #10
   1d9d2:	18fb      	adds	r3, r7, r3
   1d9d4:	881a      	ldrh	r2, [r3, #0]
   1d9d6:	2308      	movs	r3, #8
   1d9d8:	18fb      	adds	r3, r7, r3
   1d9da:	881b      	ldrh	r3, [r3, #0]
   1d9dc:	1ad3      	subs	r3, r2, r3
   1d9de:	3307      	adds	r3, #7
   1d9e0:	2b00      	cmp	r3, #0
   1d9e2:	da00      	bge.n	1d9e6 <SDMMC_UNSTUFF_BITS+0xce>
   1d9e4:	3307      	adds	r3, #7
   1d9e6:	10db      	asrs	r3, r3, #3
   1d9e8:	3b03      	subs	r3, #3
   1d9ea:	68fa      	ldr	r2, [r7, #12]
   1d9ec:	18d3      	adds	r3, r2, r3
   1d9ee:	781b      	ldrb	r3, [r3, #0]
   1d9f0:	0019      	movs	r1, r3
   1d9f2:	2308      	movs	r3, #8
   1d9f4:	18fb      	adds	r3, r7, r3
   1d9f6:	881b      	ldrh	r3, [r3, #0]
   1d9f8:	2207      	movs	r2, #7
   1d9fa:	4013      	ands	r3, r2
   1d9fc:	2210      	movs	r2, #16
   1d9fe:	1ad3      	subs	r3, r2, r3
   1da00:	4099      	lsls	r1, r3
   1da02:	000b      	movs	r3, r1
   1da04:	697a      	ldr	r2, [r7, #20]
   1da06:	4313      	orrs	r3, r2
   1da08:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1da0a:	2308      	movs	r3, #8
   1da0c:	18fb      	adds	r3, r7, r3
   1da0e:	881b      	ldrh	r3, [r3, #0]
   1da10:	2207      	movs	r2, #7
   1da12:	401a      	ands	r2, r3
   1da14:	1dfb      	adds	r3, r7, #7
   1da16:	781b      	ldrb	r3, [r3, #0]
   1da18:	18d3      	adds	r3, r2, r3
   1da1a:	2b10      	cmp	r3, #16
   1da1c:	dd1c      	ble.n	1da58 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1da1e:	230a      	movs	r3, #10
   1da20:	18fb      	adds	r3, r7, r3
   1da22:	881a      	ldrh	r2, [r3, #0]
   1da24:	2308      	movs	r3, #8
   1da26:	18fb      	adds	r3, r7, r3
   1da28:	881b      	ldrh	r3, [r3, #0]
   1da2a:	1ad3      	subs	r3, r2, r3
   1da2c:	3307      	adds	r3, #7
   1da2e:	2b00      	cmp	r3, #0
   1da30:	da00      	bge.n	1da34 <SDMMC_UNSTUFF_BITS+0x11c>
   1da32:	3307      	adds	r3, #7
   1da34:	10db      	asrs	r3, r3, #3
   1da36:	3b03      	subs	r3, #3
   1da38:	68fa      	ldr	r2, [r7, #12]
   1da3a:	18d3      	adds	r3, r2, r3
   1da3c:	781b      	ldrb	r3, [r3, #0]
   1da3e:	0019      	movs	r1, r3
   1da40:	2308      	movs	r3, #8
   1da42:	18fb      	adds	r3, r7, r3
   1da44:	881b      	ldrh	r3, [r3, #0]
   1da46:	2207      	movs	r2, #7
   1da48:	4013      	ands	r3, r2
   1da4a:	2210      	movs	r2, #16
   1da4c:	1ad3      	subs	r3, r2, r3
   1da4e:	4099      	lsls	r1, r3
   1da50:	000b      	movs	r3, r1
   1da52:	697a      	ldr	r2, [r7, #20]
   1da54:	4313      	orrs	r3, r2
   1da56:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1da58:	1dfb      	adds	r3, r7, #7
   1da5a:	781b      	ldrb	r3, [r3, #0]
   1da5c:	2201      	movs	r2, #1
   1da5e:	409a      	lsls	r2, r3
   1da60:	0013      	movs	r3, r2
   1da62:	1e5a      	subs	r2, r3, #1
   1da64:	697b      	ldr	r3, [r7, #20]
   1da66:	4013      	ands	r3, r2
   1da68:	617b      	str	r3, [r7, #20]
	return value;
   1da6a:	697b      	ldr	r3, [r7, #20]
}
   1da6c:	0018      	movs	r0, r3
   1da6e:	46bd      	mov	sp, r7
   1da70:	b007      	add	sp, #28
   1da72:	bd90      	pop	{r4, r7, pc}

0001da74 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1da74:	b580      	push	{r7, lr}
   1da76:	b082      	sub	sp, #8
   1da78:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1da7a:	4b23      	ldr	r3, [pc, #140]	; (1db08 <mmc_spi_op_cond+0x94>)
   1da7c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1da7e:	4b23      	ldr	r3, [pc, #140]	; (1db0c <mmc_spi_op_cond+0x98>)
   1da80:	2100      	movs	r1, #0
   1da82:	0018      	movs	r0, r3
   1da84:	4b22      	ldr	r3, [pc, #136]	; (1db10 <mmc_spi_op_cond+0x9c>)
   1da86:	4798      	blx	r3
   1da88:	0003      	movs	r3, r0
   1da8a:	001a      	movs	r2, r3
   1da8c:	2301      	movs	r3, #1
   1da8e:	4053      	eors	r3, r2
   1da90:	b2db      	uxtb	r3, r3
   1da92:	2b00      	cmp	r3, #0
   1da94:	d001      	beq.n	1da9a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1da96:	2300      	movs	r3, #0
   1da98:	e031      	b.n	1dafe <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1da9a:	4b1e      	ldr	r3, [pc, #120]	; (1db14 <mmc_spi_op_cond+0xa0>)
   1da9c:	4798      	blx	r3
   1da9e:	0003      	movs	r3, r0
   1daa0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1daa2:	683b      	ldr	r3, [r7, #0]
   1daa4:	2201      	movs	r2, #1
   1daa6:	4013      	ands	r3, r2
   1daa8:	d006      	beq.n	1dab8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1daaa:	687b      	ldr	r3, [r7, #4]
   1daac:	1e5a      	subs	r2, r3, #1
   1daae:	607a      	str	r2, [r7, #4]
   1dab0:	2b00      	cmp	r3, #0
   1dab2:	d1e4      	bne.n	1da7e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1dab4:	2300      	movs	r3, #0
   1dab6:	e022      	b.n	1dafe <mmc_spi_op_cond+0x8a>
			break;
   1dab8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1daba:	4b17      	ldr	r3, [pc, #92]	; (1db18 <mmc_spi_op_cond+0xa4>)
   1dabc:	2100      	movs	r1, #0
   1dabe:	0018      	movs	r0, r3
   1dac0:	4b13      	ldr	r3, [pc, #76]	; (1db10 <mmc_spi_op_cond+0x9c>)
   1dac2:	4798      	blx	r3
   1dac4:	0003      	movs	r3, r0
   1dac6:	001a      	movs	r2, r3
   1dac8:	2301      	movs	r3, #1
   1daca:	4053      	eors	r3, r2
   1dacc:	b2db      	uxtb	r3, r3
   1dace:	2b00      	cmp	r3, #0
   1dad0:	d001      	beq.n	1dad6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1dad2:	2300      	movs	r3, #0
   1dad4:	e013      	b.n	1dafe <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1dad6:	4b0f      	ldr	r3, [pc, #60]	; (1db14 <mmc_spi_op_cond+0xa0>)
   1dad8:	4798      	blx	r3
   1dada:	0002      	movs	r2, r0
   1dadc:	23c0      	movs	r3, #192	; 0xc0
   1dade:	05db      	lsls	r3, r3, #23
   1dae0:	401a      	ands	r2, r3
   1dae2:	2380      	movs	r3, #128	; 0x80
   1dae4:	05db      	lsls	r3, r3, #23
   1dae6:	429a      	cmp	r2, r3
   1dae8:	d108      	bne.n	1dafc <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1daea:	4b0c      	ldr	r3, [pc, #48]	; (1db1c <mmc_spi_op_cond+0xa8>)
   1daec:	681a      	ldr	r2, [r3, #0]
   1daee:	4b0b      	ldr	r3, [pc, #44]	; (1db1c <mmc_spi_op_cond+0xa8>)
   1daf0:	681b      	ldr	r3, [r3, #0]
   1daf2:	7adb      	ldrb	r3, [r3, #11]
   1daf4:	2108      	movs	r1, #8
   1daf6:	430b      	orrs	r3, r1
   1daf8:	b2db      	uxtb	r3, r3
   1dafa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1dafc:	2301      	movs	r3, #1
}
   1dafe:	0018      	movs	r0, r3
   1db00:	46bd      	mov	sp, r7
   1db02:	b002      	add	sp, #8
   1db04:	bd80      	pop	{r7, pc}
   1db06:	46c0      	nop			; (mov r8, r8)
   1db08:	00001bee 	.word	0x00001bee
   1db0c:	00001101 	.word	0x00001101
   1db10:	0001f4f1 	.word	0x0001f4f1
   1db14:	0001f731 	.word	0x0001f731
   1db18:	0000053a 	.word	0x0000053a
   1db1c:	200040c0 	.word	0x200040c0

0001db20 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1db20:	b580      	push	{r7, lr}
   1db22:	b086      	sub	sp, #24
   1db24:	af00      	add	r7, sp, #0
   1db26:	0002      	movs	r2, r0
   1db28:	1dfb      	adds	r3, r7, #7
   1db2a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1db2c:	4b2e      	ldr	r3, [pc, #184]	; (1dbe8 <sd_spi_op_cond+0xc8>)
   1db2e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1db30:	4b2e      	ldr	r3, [pc, #184]	; (1dbec <sd_spi_op_cond+0xcc>)
   1db32:	2100      	movs	r1, #0
   1db34:	0018      	movs	r0, r3
   1db36:	4b2e      	ldr	r3, [pc, #184]	; (1dbf0 <sd_spi_op_cond+0xd0>)
   1db38:	4798      	blx	r3
   1db3a:	0003      	movs	r3, r0
   1db3c:	001a      	movs	r2, r3
   1db3e:	2301      	movs	r3, #1
   1db40:	4053      	eors	r3, r2
   1db42:	b2db      	uxtb	r3, r3
   1db44:	2b00      	cmp	r3, #0
   1db46:	d001      	beq.n	1db4c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1db48:	2300      	movs	r3, #0
   1db4a:	e048      	b.n	1dbde <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1db4c:	2300      	movs	r3, #0
   1db4e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1db50:	1dfb      	adds	r3, r7, #7
   1db52:	781b      	ldrb	r3, [r3, #0]
   1db54:	2b00      	cmp	r3, #0
   1db56:	d004      	beq.n	1db62 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1db58:	697b      	ldr	r3, [r7, #20]
   1db5a:	2280      	movs	r2, #128	; 0x80
   1db5c:	05d2      	lsls	r2, r2, #23
   1db5e:	4313      	orrs	r3, r2
   1db60:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1db62:	697b      	ldr	r3, [r7, #20]
   1db64:	4a23      	ldr	r2, [pc, #140]	; (1dbf4 <sd_spi_op_cond+0xd4>)
   1db66:	0019      	movs	r1, r3
   1db68:	0010      	movs	r0, r2
   1db6a:	4b21      	ldr	r3, [pc, #132]	; (1dbf0 <sd_spi_op_cond+0xd0>)
   1db6c:	4798      	blx	r3
   1db6e:	0003      	movs	r3, r0
   1db70:	001a      	movs	r2, r3
   1db72:	2301      	movs	r3, #1
   1db74:	4053      	eors	r3, r2
   1db76:	b2db      	uxtb	r3, r3
   1db78:	2b00      	cmp	r3, #0
   1db7a:	d001      	beq.n	1db80 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1db7c:	2300      	movs	r3, #0
   1db7e:	e02e      	b.n	1dbde <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1db80:	4b1d      	ldr	r3, [pc, #116]	; (1dbf8 <sd_spi_op_cond+0xd8>)
   1db82:	4798      	blx	r3
   1db84:	0003      	movs	r3, r0
   1db86:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1db88:	68fb      	ldr	r3, [r7, #12]
   1db8a:	2201      	movs	r2, #1
   1db8c:	4013      	ands	r3, r2
   1db8e:	d006      	beq.n	1db9e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1db90:	693b      	ldr	r3, [r7, #16]
   1db92:	1e5a      	subs	r2, r3, #1
   1db94:	613a      	str	r2, [r7, #16]
   1db96:	2b00      	cmp	r3, #0
   1db98:	d1ca      	bne.n	1db30 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1db9a:	2300      	movs	r3, #0
   1db9c:	e01f      	b.n	1dbde <sd_spi_op_cond+0xbe>
			break;
   1db9e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1dba0:	4b16      	ldr	r3, [pc, #88]	; (1dbfc <sd_spi_op_cond+0xdc>)
   1dba2:	2100      	movs	r1, #0
   1dba4:	0018      	movs	r0, r3
   1dba6:	4b12      	ldr	r3, [pc, #72]	; (1dbf0 <sd_spi_op_cond+0xd0>)
   1dba8:	4798      	blx	r3
   1dbaa:	0003      	movs	r3, r0
   1dbac:	001a      	movs	r2, r3
   1dbae:	2301      	movs	r3, #1
   1dbb0:	4053      	eors	r3, r2
   1dbb2:	b2db      	uxtb	r3, r3
   1dbb4:	2b00      	cmp	r3, #0
   1dbb6:	d001      	beq.n	1dbbc <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1dbb8:	2300      	movs	r3, #0
   1dbba:	e010      	b.n	1dbde <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1dbbc:	4b0e      	ldr	r3, [pc, #56]	; (1dbf8 <sd_spi_op_cond+0xd8>)
   1dbbe:	4798      	blx	r3
   1dbc0:	0002      	movs	r2, r0
   1dbc2:	2380      	movs	r3, #128	; 0x80
   1dbc4:	05db      	lsls	r3, r3, #23
   1dbc6:	4013      	ands	r3, r2
   1dbc8:	d008      	beq.n	1dbdc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1dbca:	4b0d      	ldr	r3, [pc, #52]	; (1dc00 <sd_spi_op_cond+0xe0>)
   1dbcc:	681a      	ldr	r2, [r3, #0]
   1dbce:	4b0c      	ldr	r3, [pc, #48]	; (1dc00 <sd_spi_op_cond+0xe0>)
   1dbd0:	681b      	ldr	r3, [r3, #0]
   1dbd2:	7adb      	ldrb	r3, [r3, #11]
   1dbd4:	2108      	movs	r1, #8
   1dbd6:	430b      	orrs	r3, r1
   1dbd8:	b2db      	uxtb	r3, r3
   1dbda:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1dbdc:	2301      	movs	r3, #1
}
   1dbde:	0018      	movs	r0, r3
   1dbe0:	46bd      	mov	sp, r7
   1dbe2:	b006      	add	sp, #24
   1dbe4:	bd80      	pop	{r7, pc}
   1dbe6:	46c0      	nop			; (mov r8, r8)
   1dbe8:	00001bee 	.word	0x00001bee
   1dbec:	00001137 	.word	0x00001137
   1dbf0:	0001f4f1 	.word	0x0001f4f1
   1dbf4:	00001129 	.word	0x00001129
   1dbf8:	0001f731 	.word	0x0001f731
   1dbfc:	0000053a 	.word	0x0000053a
   1dc00:	200040c0 	.word	0x200040c0

0001dc04 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1dc04:	b580      	push	{r7, lr}
   1dc06:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1dc08:	2301      	movs	r3, #1
}
   1dc0a:	0018      	movs	r0, r3
   1dc0c:	46bd      	mov	sp, r7
   1dc0e:	bd80      	pop	{r7, pc}

0001dc10 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1dc10:	b580      	push	{r7, lr}
   1dc12:	b084      	sub	sp, #16
   1dc14:	af00      	add	r7, sp, #0
   1dc16:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1dc18:	687b      	ldr	r3, [r7, #4]
   1dc1a:	2200      	movs	r2, #0
   1dc1c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1dc1e:	23d5      	movs	r3, #213	; 0xd5
   1dc20:	005b      	lsls	r3, r3, #1
   1dc22:	4a14      	ldr	r2, [pc, #80]	; (1dc74 <sd_cmd8+0x64>)
   1dc24:	0019      	movs	r1, r3
   1dc26:	0010      	movs	r0, r2
   1dc28:	4b13      	ldr	r3, [pc, #76]	; (1dc78 <sd_cmd8+0x68>)
   1dc2a:	4798      	blx	r3
   1dc2c:	0003      	movs	r3, r0
   1dc2e:	001a      	movs	r2, r3
   1dc30:	2301      	movs	r3, #1
   1dc32:	4053      	eors	r3, r2
   1dc34:	b2db      	uxtb	r3, r3
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	d001      	beq.n	1dc3e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1dc3a:	2301      	movs	r3, #1
   1dc3c:	e015      	b.n	1dc6a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1dc3e:	4b0f      	ldr	r3, [pc, #60]	; (1dc7c <sd_cmd8+0x6c>)
   1dc40:	4798      	blx	r3
   1dc42:	0003      	movs	r3, r0
   1dc44:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1dc46:	68fb      	ldr	r3, [r7, #12]
   1dc48:	3301      	adds	r3, #1
   1dc4a:	d101      	bne.n	1dc50 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1dc4c:	2301      	movs	r3, #1
   1dc4e:	e00c      	b.n	1dc6a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1dc50:	68fb      	ldr	r3, [r7, #12]
   1dc52:	051b      	lsls	r3, r3, #20
   1dc54:	0d1a      	lsrs	r2, r3, #20
   1dc56:	23d5      	movs	r3, #213	; 0xd5
   1dc58:	005b      	lsls	r3, r3, #1
   1dc5a:	429a      	cmp	r2, r3
   1dc5c:	d001      	beq.n	1dc62 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1dc5e:	2300      	movs	r3, #0
   1dc60:	e003      	b.n	1dc6a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1dc62:	687b      	ldr	r3, [r7, #4]
   1dc64:	2201      	movs	r2, #1
   1dc66:	701a      	strb	r2, [r3, #0]
	return true;
   1dc68:	2301      	movs	r3, #1
}
   1dc6a:	0018      	movs	r0, r3
   1dc6c:	46bd      	mov	sp, r7
   1dc6e:	b004      	add	sp, #16
   1dc70:	bd80      	pop	{r7, pc}
   1dc72:	46c0      	nop			; (mov r8, r8)
   1dc74:	00005508 	.word	0x00005508
   1dc78:	0001f4f1 	.word	0x0001f4f1
   1dc7c:	0001f731 	.word	0x0001f731

0001dc80 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1dc80:	b590      	push	{r4, r7, lr}
   1dc82:	b089      	sub	sp, #36	; 0x24
   1dc84:	af02      	add	r7, sp, #8
   1dc86:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1dc88:	2380      	movs	r3, #128	; 0x80
   1dc8a:	009a      	lsls	r2, r3, #2
   1dc8c:	4841      	ldr	r0, [pc, #260]	; (1dd94 <mmc_cmd8+0x114>)
   1dc8e:	2300      	movs	r3, #0
   1dc90:	9300      	str	r3, [sp, #0]
   1dc92:	2301      	movs	r3, #1
   1dc94:	2100      	movs	r1, #0
   1dc96:	4c40      	ldr	r4, [pc, #256]	; (1dd98 <mmc_cmd8+0x118>)
   1dc98:	47a0      	blx	r4
   1dc9a:	0003      	movs	r3, r0
   1dc9c:	001a      	movs	r2, r3
   1dc9e:	2301      	movs	r3, #1
   1dca0:	4053      	eors	r3, r2
   1dca2:	b2db      	uxtb	r3, r3
   1dca4:	2b00      	cmp	r3, #0
   1dca6:	d001      	beq.n	1dcac <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1dca8:	2300      	movs	r3, #0
   1dcaa:	e06e      	b.n	1dd8a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1dcac:	2316      	movs	r3, #22
   1dcae:	18fb      	adds	r3, r7, r3
   1dcb0:	2200      	movs	r2, #0
   1dcb2:	801a      	strh	r2, [r3, #0]
   1dcb4:	e014      	b.n	1dce0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1dcb6:	2310      	movs	r3, #16
   1dcb8:	18fb      	adds	r3, r7, r3
   1dcba:	0018      	movs	r0, r3
   1dcbc:	4b37      	ldr	r3, [pc, #220]	; (1dd9c <mmc_cmd8+0x11c>)
   1dcbe:	4798      	blx	r3
   1dcc0:	0003      	movs	r3, r0
   1dcc2:	001a      	movs	r2, r3
   1dcc4:	2301      	movs	r3, #1
   1dcc6:	4053      	eors	r3, r2
   1dcc8:	b2db      	uxtb	r3, r3
   1dcca:	2b00      	cmp	r3, #0
   1dccc:	d001      	beq.n	1dcd2 <mmc_cmd8+0x52>
			return false;
   1dcce:	2300      	movs	r3, #0
   1dcd0:	e05b      	b.n	1dd8a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1dcd2:	2316      	movs	r3, #22
   1dcd4:	18fb      	adds	r3, r7, r3
   1dcd6:	881a      	ldrh	r2, [r3, #0]
   1dcd8:	2316      	movs	r3, #22
   1dcda:	18fb      	adds	r3, r7, r3
   1dcdc:	3201      	adds	r2, #1
   1dcde:	801a      	strh	r2, [r3, #0]
   1dce0:	2316      	movs	r3, #22
   1dce2:	18fb      	adds	r3, r7, r3
   1dce4:	881b      	ldrh	r3, [r3, #0]
   1dce6:	2b31      	cmp	r3, #49	; 0x31
   1dce8:	d9e5      	bls.n	1dcb6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1dcea:	693b      	ldr	r3, [r7, #16]
   1dcec:	b2db      	uxtb	r3, r3
   1dcee:	2202      	movs	r2, #2
   1dcf0:	4013      	ands	r3, r2
   1dcf2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1dcf4:	687b      	ldr	r3, [r7, #4]
   1dcf6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1dcf8:	4b29      	ldr	r3, [pc, #164]	; (1dda0 <mmc_cmd8+0x120>)
   1dcfa:	681b      	ldr	r3, [r3, #0]
   1dcfc:	330e      	adds	r3, #14
   1dcfe:	0018      	movs	r0, r3
   1dd00:	230c      	movs	r3, #12
   1dd02:	223e      	movs	r2, #62	; 0x3e
   1dd04:	2180      	movs	r1, #128	; 0x80
   1dd06:	4c27      	ldr	r4, [pc, #156]	; (1dda4 <mmc_cmd8+0x124>)
   1dd08:	47a0      	blx	r4
   1dd0a:	0002      	movs	r2, r0
   1dd0c:	4b26      	ldr	r3, [pc, #152]	; (1dda8 <mmc_cmd8+0x128>)
   1dd0e:	429a      	cmp	r2, r3
   1dd10:	d135      	bne.n	1dd7e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1dd12:	e014      	b.n	1dd3e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1dd14:	230c      	movs	r3, #12
   1dd16:	18fb      	adds	r3, r7, r3
   1dd18:	0018      	movs	r0, r3
   1dd1a:	4b20      	ldr	r3, [pc, #128]	; (1dd9c <mmc_cmd8+0x11c>)
   1dd1c:	4798      	blx	r3
   1dd1e:	0003      	movs	r3, r0
   1dd20:	001a      	movs	r2, r3
   1dd22:	2301      	movs	r3, #1
   1dd24:	4053      	eors	r3, r2
   1dd26:	b2db      	uxtb	r3, r3
   1dd28:	2b00      	cmp	r3, #0
   1dd2a:	d001      	beq.n	1dd30 <mmc_cmd8+0xb0>
				return false;
   1dd2c:	2300      	movs	r3, #0
   1dd2e:	e02c      	b.n	1dd8a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1dd30:	2316      	movs	r3, #22
   1dd32:	18fb      	adds	r3, r7, r3
   1dd34:	881a      	ldrh	r2, [r3, #0]
   1dd36:	2316      	movs	r3, #22
   1dd38:	18fb      	adds	r3, r7, r3
   1dd3a:	3201      	adds	r2, #1
   1dd3c:	801a      	strh	r2, [r3, #0]
   1dd3e:	2316      	movs	r3, #22
   1dd40:	18fb      	adds	r3, r7, r3
   1dd42:	881b      	ldrh	r3, [r3, #0]
   1dd44:	2b35      	cmp	r3, #53	; 0x35
   1dd46:	d9e5      	bls.n	1dd14 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1dd48:	4b15      	ldr	r3, [pc, #84]	; (1dda0 <mmc_cmd8+0x120>)
   1dd4a:	681b      	ldr	r3, [r3, #0]
   1dd4c:	68fa      	ldr	r2, [r7, #12]
   1dd4e:	0852      	lsrs	r2, r2, #1
   1dd50:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1dd52:	e014      	b.n	1dd7e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1dd54:	230c      	movs	r3, #12
   1dd56:	18fb      	adds	r3, r7, r3
   1dd58:	0018      	movs	r0, r3
   1dd5a:	4b10      	ldr	r3, [pc, #64]	; (1dd9c <mmc_cmd8+0x11c>)
   1dd5c:	4798      	blx	r3
   1dd5e:	0003      	movs	r3, r0
   1dd60:	001a      	movs	r2, r3
   1dd62:	2301      	movs	r3, #1
   1dd64:	4053      	eors	r3, r2
   1dd66:	b2db      	uxtb	r3, r3
   1dd68:	2b00      	cmp	r3, #0
   1dd6a:	d001      	beq.n	1dd70 <mmc_cmd8+0xf0>
			return false;
   1dd6c:	2300      	movs	r3, #0
   1dd6e:	e00c      	b.n	1dd8a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1dd70:	2316      	movs	r3, #22
   1dd72:	18fb      	adds	r3, r7, r3
   1dd74:	881a      	ldrh	r2, [r3, #0]
   1dd76:	2316      	movs	r3, #22
   1dd78:	18fb      	adds	r3, r7, r3
   1dd7a:	3201      	adds	r2, #1
   1dd7c:	801a      	strh	r2, [r3, #0]
   1dd7e:	2316      	movs	r3, #22
   1dd80:	18fb      	adds	r3, r7, r3
   1dd82:	881b      	ldrh	r3, [r3, #0]
   1dd84:	2b7f      	cmp	r3, #127	; 0x7f
   1dd86:	d9e5      	bls.n	1dd54 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1dd88:	2301      	movs	r3, #1
}
   1dd8a:	0018      	movs	r0, r3
   1dd8c:	46bd      	mov	sp, r7
   1dd8e:	b007      	add	sp, #28
   1dd90:	bd90      	pop	{r4, r7, pc}
   1dd92:	46c0      	nop			; (mov r8, r8)
   1dd94:	00081108 	.word	0x00081108
   1dd98:	0001f519 	.word	0x0001f519
   1dd9c:	0001f745 	.word	0x0001f745
   1dda0:	200040c0 	.word	0x200040c0
   1dda4:	0001d919 	.word	0x0001d919
   1dda8:	00000fff 	.word	0x00000fff

0001ddac <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1ddac:	b590      	push	{r4, r7, lr}
   1ddae:	b083      	sub	sp, #12
   1ddb0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1ddb2:	4b15      	ldr	r3, [pc, #84]	; (1de08 <sd_mmc_cmd9_spi+0x5c>)
   1ddb4:	681b      	ldr	r3, [r3, #0]
   1ddb6:	891b      	ldrh	r3, [r3, #8]
   1ddb8:	0419      	lsls	r1, r3, #16
   1ddba:	4814      	ldr	r0, [pc, #80]	; (1de0c <sd_mmc_cmd9_spi+0x60>)
   1ddbc:	2301      	movs	r3, #1
   1ddbe:	9300      	str	r3, [sp, #0]
   1ddc0:	2301      	movs	r3, #1
   1ddc2:	2210      	movs	r2, #16
   1ddc4:	4c12      	ldr	r4, [pc, #72]	; (1de10 <sd_mmc_cmd9_spi+0x64>)
   1ddc6:	47a0      	blx	r4
   1ddc8:	0003      	movs	r3, r0
   1ddca:	001a      	movs	r2, r3
   1ddcc:	2301      	movs	r3, #1
   1ddce:	4053      	eors	r3, r2
   1ddd0:	b2db      	uxtb	r3, r3
   1ddd2:	2b00      	cmp	r3, #0
   1ddd4:	d001      	beq.n	1ddda <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1ddd6:	2300      	movs	r3, #0
   1ddd8:	e012      	b.n	1de00 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1ddda:	4b0b      	ldr	r3, [pc, #44]	; (1de08 <sd_mmc_cmd9_spi+0x5c>)
   1dddc:	681b      	ldr	r3, [r3, #0]
   1ddde:	330e      	adds	r3, #14
   1dde0:	2101      	movs	r1, #1
   1dde2:	0018      	movs	r0, r3
   1dde4:	4b0b      	ldr	r3, [pc, #44]	; (1de14 <sd_mmc_cmd9_spi+0x68>)
   1dde6:	4798      	blx	r3
   1dde8:	0003      	movs	r3, r0
   1ddea:	001a      	movs	r2, r3
   1ddec:	2301      	movs	r3, #1
   1ddee:	4053      	eors	r3, r2
   1ddf0:	b2db      	uxtb	r3, r3
   1ddf2:	2b00      	cmp	r3, #0
   1ddf4:	d001      	beq.n	1ddfa <sd_mmc_cmd9_spi+0x4e>
		return false;
   1ddf6:	2300      	movs	r3, #0
   1ddf8:	e002      	b.n	1de00 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1ddfa:	4b07      	ldr	r3, [pc, #28]	; (1de18 <sd_mmc_cmd9_spi+0x6c>)
   1ddfc:	4798      	blx	r3
   1ddfe:	0003      	movs	r3, r0
}
   1de00:	0018      	movs	r0, r3
   1de02:	46bd      	mov	sp, r7
   1de04:	b001      	add	sp, #4
   1de06:	bd90      	pop	{r4, r7, pc}
   1de08:	200040c0 	.word	0x200040c0
   1de0c:	00081109 	.word	0x00081109
   1de10:	0001f519 	.word	0x0001f519
   1de14:	0001f7e9 	.word	0x0001f7e9
   1de18:	0001f88d 	.word	0x0001f88d

0001de1c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1de1c:	b5b0      	push	{r4, r5, r7, lr}
   1de1e:	b084      	sub	sp, #16
   1de20:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1de22:	4b45      	ldr	r3, [pc, #276]	; (1df38 <mmc_decode_csd+0x11c>)
   1de24:	681b      	ldr	r3, [r3, #0]
   1de26:	330e      	adds	r3, #14
   1de28:	0018      	movs	r0, r3
   1de2a:	2304      	movs	r3, #4
   1de2c:	227a      	movs	r2, #122	; 0x7a
   1de2e:	2180      	movs	r1, #128	; 0x80
   1de30:	4c42      	ldr	r4, [pc, #264]	; (1df3c <mmc_decode_csd+0x120>)
   1de32:	47a0      	blx	r4
   1de34:	0003      	movs	r3, r0
   1de36:	2b02      	cmp	r3, #2
   1de38:	d011      	beq.n	1de5e <mmc_decode_csd+0x42>
   1de3a:	d802      	bhi.n	1de42 <mmc_decode_csd+0x26>
   1de3c:	2b01      	cmp	r3, #1
   1de3e:	d009      	beq.n	1de54 <mmc_decode_csd+0x38>
   1de40:	e003      	b.n	1de4a <mmc_decode_csd+0x2e>
   1de42:	2b03      	cmp	r3, #3
   1de44:	d010      	beq.n	1de68 <mmc_decode_csd+0x4c>
   1de46:	2b04      	cmp	r3, #4
   1de48:	d013      	beq.n	1de72 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1de4a:	4b3b      	ldr	r3, [pc, #236]	; (1df38 <mmc_decode_csd+0x11c>)
   1de4c:	681b      	ldr	r3, [r3, #0]
   1de4e:	2212      	movs	r2, #18
   1de50:	731a      	strb	r2, [r3, #12]
		break;
   1de52:	e013      	b.n	1de7c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1de54:	4b38      	ldr	r3, [pc, #224]	; (1df38 <mmc_decode_csd+0x11c>)
   1de56:	681b      	ldr	r3, [r3, #0]
   1de58:	2214      	movs	r2, #20
   1de5a:	731a      	strb	r2, [r3, #12]
		break;
   1de5c:	e00e      	b.n	1de7c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1de5e:	4b36      	ldr	r3, [pc, #216]	; (1df38 <mmc_decode_csd+0x11c>)
   1de60:	681b      	ldr	r3, [r3, #0]
   1de62:	2222      	movs	r2, #34	; 0x22
   1de64:	731a      	strb	r2, [r3, #12]
		break;
   1de66:	e009      	b.n	1de7c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1de68:	4b33      	ldr	r3, [pc, #204]	; (1df38 <mmc_decode_csd+0x11c>)
   1de6a:	681b      	ldr	r3, [r3, #0]
   1de6c:	2230      	movs	r2, #48	; 0x30
   1de6e:	731a      	strb	r2, [r3, #12]
		break;
   1de70:	e004      	b.n	1de7c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1de72:	4b31      	ldr	r3, [pc, #196]	; (1df38 <mmc_decode_csd+0x11c>)
   1de74:	681b      	ldr	r3, [r3, #0]
   1de76:	2240      	movs	r2, #64	; 0x40
   1de78:	731a      	strb	r2, [r3, #12]
		break;
   1de7a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1de7c:	4b2e      	ldr	r3, [pc, #184]	; (1df38 <mmc_decode_csd+0x11c>)
   1de7e:	681b      	ldr	r3, [r3, #0]
   1de80:	330e      	adds	r3, #14
   1de82:	0018      	movs	r0, r3
   1de84:	2308      	movs	r3, #8
   1de86:	2260      	movs	r2, #96	; 0x60
   1de88:	2180      	movs	r1, #128	; 0x80
   1de8a:	4c2c      	ldr	r4, [pc, #176]	; (1df3c <mmc_decode_csd+0x120>)
   1de8c:	47a0      	blx	r4
   1de8e:	0003      	movs	r3, r0
   1de90:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1de92:	68fb      	ldr	r3, [r7, #12]
   1de94:	2207      	movs	r2, #7
   1de96:	401a      	ands	r2, r3
   1de98:	4b29      	ldr	r3, [pc, #164]	; (1df40 <mmc_decode_csd+0x124>)
   1de9a:	0092      	lsls	r2, r2, #2
   1de9c:	58d3      	ldr	r3, [r2, r3]
   1de9e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1dea0:	68fb      	ldr	r3, [r7, #12]
   1dea2:	08db      	lsrs	r3, r3, #3
   1dea4:	220f      	movs	r2, #15
   1dea6:	401a      	ands	r2, r3
   1dea8:	4b26      	ldr	r3, [pc, #152]	; (1df44 <mmc_decode_csd+0x128>)
   1deaa:	0092      	lsls	r2, r2, #2
   1deac:	58d3      	ldr	r3, [r2, r3]
   1deae:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1deb0:	4b21      	ldr	r3, [pc, #132]	; (1df38 <mmc_decode_csd+0x11c>)
   1deb2:	681b      	ldr	r3, [r3, #0]
   1deb4:	68ba      	ldr	r2, [r7, #8]
   1deb6:	6879      	ldr	r1, [r7, #4]
   1deb8:	434a      	muls	r2, r1
   1deba:	21fa      	movs	r1, #250	; 0xfa
   1debc:	0089      	lsls	r1, r1, #2
   1debe:	434a      	muls	r2, r1
   1dec0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1dec2:	4b1d      	ldr	r3, [pc, #116]	; (1df38 <mmc_decode_csd+0x11c>)
   1dec4:	681b      	ldr	r3, [r3, #0]
   1dec6:	330e      	adds	r3, #14
   1dec8:	0018      	movs	r0, r3
   1deca:	230c      	movs	r3, #12
   1decc:	223e      	movs	r2, #62	; 0x3e
   1dece:	2180      	movs	r1, #128	; 0x80
   1ded0:	4c1a      	ldr	r4, [pc, #104]	; (1df3c <mmc_decode_csd+0x120>)
   1ded2:	47a0      	blx	r4
   1ded4:	0002      	movs	r2, r0
   1ded6:	4b1c      	ldr	r3, [pc, #112]	; (1df48 <mmc_decode_csd+0x12c>)
   1ded8:	429a      	cmp	r2, r3
   1deda:	d028      	beq.n	1df2e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1dedc:	4b16      	ldr	r3, [pc, #88]	; (1df38 <mmc_decode_csd+0x11c>)
   1dede:	681b      	ldr	r3, [r3, #0]
   1dee0:	330e      	adds	r3, #14
   1dee2:	0018      	movs	r0, r3
   1dee4:	230c      	movs	r3, #12
   1dee6:	223e      	movs	r2, #62	; 0x3e
   1dee8:	2180      	movs	r1, #128	; 0x80
   1deea:	4c14      	ldr	r4, [pc, #80]	; (1df3c <mmc_decode_csd+0x120>)
   1deec:	47a0      	blx	r4
   1deee:	0003      	movs	r3, r0
   1def0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1def2:	4b11      	ldr	r3, [pc, #68]	; (1df38 <mmc_decode_csd+0x11c>)
   1def4:	681b      	ldr	r3, [r3, #0]
   1def6:	330e      	adds	r3, #14
   1def8:	0018      	movs	r0, r3
   1defa:	2303      	movs	r3, #3
   1defc:	222f      	movs	r2, #47	; 0x2f
   1defe:	2180      	movs	r1, #128	; 0x80
   1df00:	4d0e      	ldr	r5, [pc, #56]	; (1df3c <mmc_decode_csd+0x120>)
   1df02:	47a8      	blx	r5
   1df04:	0003      	movs	r3, r0
   1df06:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1df08:	409c      	lsls	r4, r3
   1df0a:	0023      	movs	r3, r4
   1df0c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1df0e:	4b0a      	ldr	r3, [pc, #40]	; (1df38 <mmc_decode_csd+0x11c>)
   1df10:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1df12:	4b09      	ldr	r3, [pc, #36]	; (1df38 <mmc_decode_csd+0x11c>)
   1df14:	681b      	ldr	r3, [r3, #0]
   1df16:	330e      	adds	r3, #14
   1df18:	0018      	movs	r0, r3
   1df1a:	2304      	movs	r3, #4
   1df1c:	2250      	movs	r2, #80	; 0x50
   1df1e:	2180      	movs	r1, #128	; 0x80
   1df20:	4d06      	ldr	r5, [pc, #24]	; (1df3c <mmc_decode_csd+0x120>)
   1df22:	47a8      	blx	r5
   1df24:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1df26:	683b      	ldr	r3, [r7, #0]
   1df28:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1df2a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1df2c:	6063      	str	r3, [r4, #4]
	}
}
   1df2e:	46c0      	nop			; (mov r8, r8)
   1df30:	46bd      	mov	sp, r7
   1df32:	b004      	add	sp, #16
   1df34:	bdb0      	pop	{r4, r5, r7, pc}
   1df36:	46c0      	nop			; (mov r8, r8)
   1df38:	200040c0 	.word	0x200040c0
   1df3c:	0001d919 	.word	0x0001d919
   1df40:	00037b74 	.word	0x00037b74
   1df44:	00037bd0 	.word	0x00037bd0
   1df48:	00000fff 	.word	0x00000fff

0001df4c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1df4c:	b5b0      	push	{r4, r5, r7, lr}
   1df4e:	b084      	sub	sp, #16
   1df50:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1df52:	4b35      	ldr	r3, [pc, #212]	; (1e028 <sd_decode_csd+0xdc>)
   1df54:	681b      	ldr	r3, [r3, #0]
   1df56:	330e      	adds	r3, #14
   1df58:	0018      	movs	r0, r3
   1df5a:	2308      	movs	r3, #8
   1df5c:	2260      	movs	r2, #96	; 0x60
   1df5e:	2180      	movs	r1, #128	; 0x80
   1df60:	4c32      	ldr	r4, [pc, #200]	; (1e02c <sd_decode_csd+0xe0>)
   1df62:	47a0      	blx	r4
   1df64:	0003      	movs	r3, r0
   1df66:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1df68:	68fb      	ldr	r3, [r7, #12]
   1df6a:	2207      	movs	r2, #7
   1df6c:	401a      	ands	r2, r3
   1df6e:	4b30      	ldr	r3, [pc, #192]	; (1e030 <sd_decode_csd+0xe4>)
   1df70:	0092      	lsls	r2, r2, #2
   1df72:	58d3      	ldr	r3, [r2, r3]
   1df74:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1df76:	68fb      	ldr	r3, [r7, #12]
   1df78:	08db      	lsrs	r3, r3, #3
   1df7a:	220f      	movs	r2, #15
   1df7c:	401a      	ands	r2, r3
   1df7e:	4b2d      	ldr	r3, [pc, #180]	; (1e034 <sd_decode_csd+0xe8>)
   1df80:	0092      	lsls	r2, r2, #2
   1df82:	58d3      	ldr	r3, [r2, r3]
   1df84:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1df86:	4b28      	ldr	r3, [pc, #160]	; (1e028 <sd_decode_csd+0xdc>)
   1df88:	681b      	ldr	r3, [r3, #0]
   1df8a:	68ba      	ldr	r2, [r7, #8]
   1df8c:	6879      	ldr	r1, [r7, #4]
   1df8e:	434a      	muls	r2, r1
   1df90:	21fa      	movs	r1, #250	; 0xfa
   1df92:	0089      	lsls	r1, r1, #2
   1df94:	434a      	muls	r2, r1
   1df96:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1df98:	4b23      	ldr	r3, [pc, #140]	; (1e028 <sd_decode_csd+0xdc>)
   1df9a:	681b      	ldr	r3, [r3, #0]
   1df9c:	330e      	adds	r3, #14
   1df9e:	0018      	movs	r0, r3
   1dfa0:	2302      	movs	r3, #2
   1dfa2:	227e      	movs	r2, #126	; 0x7e
   1dfa4:	2180      	movs	r1, #128	; 0x80
   1dfa6:	4c21      	ldr	r4, [pc, #132]	; (1e02c <sd_decode_csd+0xe0>)
   1dfa8:	47a0      	blx	r4
   1dfaa:	1e03      	subs	r3, r0, #0
   1dfac:	d00f      	beq.n	1dfce <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1dfae:	4b1e      	ldr	r3, [pc, #120]	; (1e028 <sd_decode_csd+0xdc>)
   1dfb0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1dfb2:	4b1d      	ldr	r3, [pc, #116]	; (1e028 <sd_decode_csd+0xdc>)
   1dfb4:	681b      	ldr	r3, [r3, #0]
   1dfb6:	330e      	adds	r3, #14
   1dfb8:	0018      	movs	r0, r3
   1dfba:	2316      	movs	r3, #22
   1dfbc:	2230      	movs	r2, #48	; 0x30
   1dfbe:	2180      	movs	r1, #128	; 0x80
   1dfc0:	4d1a      	ldr	r5, [pc, #104]	; (1e02c <sd_decode_csd+0xe0>)
   1dfc2:	47a8      	blx	r5
   1dfc4:	0003      	movs	r3, r0
				* 512;
   1dfc6:	3301      	adds	r3, #1
   1dfc8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1dfca:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1dfcc:	e028      	b.n	1e020 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1dfce:	4b16      	ldr	r3, [pc, #88]	; (1e028 <sd_decode_csd+0xdc>)
   1dfd0:	681b      	ldr	r3, [r3, #0]
   1dfd2:	330e      	adds	r3, #14
   1dfd4:	0018      	movs	r0, r3
   1dfd6:	230c      	movs	r3, #12
   1dfd8:	223e      	movs	r2, #62	; 0x3e
   1dfda:	2180      	movs	r1, #128	; 0x80
   1dfdc:	4c13      	ldr	r4, [pc, #76]	; (1e02c <sd_decode_csd+0xe0>)
   1dfde:	47a0      	blx	r4
   1dfe0:	0003      	movs	r3, r0
   1dfe2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1dfe4:	4b10      	ldr	r3, [pc, #64]	; (1e028 <sd_decode_csd+0xdc>)
   1dfe6:	681b      	ldr	r3, [r3, #0]
   1dfe8:	330e      	adds	r3, #14
   1dfea:	0018      	movs	r0, r3
   1dfec:	2303      	movs	r3, #3
   1dfee:	222f      	movs	r2, #47	; 0x2f
   1dff0:	2180      	movs	r1, #128	; 0x80
   1dff2:	4d0e      	ldr	r5, [pc, #56]	; (1e02c <sd_decode_csd+0xe0>)
   1dff4:	47a8      	blx	r5
   1dff6:	0003      	movs	r3, r0
   1dff8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1dffa:	409c      	lsls	r4, r3
   1dffc:	0023      	movs	r3, r4
   1dffe:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e000:	4b09      	ldr	r3, [pc, #36]	; (1e028 <sd_decode_csd+0xdc>)
   1e002:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e004:	4b08      	ldr	r3, [pc, #32]	; (1e028 <sd_decode_csd+0xdc>)
   1e006:	681b      	ldr	r3, [r3, #0]
   1e008:	330e      	adds	r3, #14
   1e00a:	0018      	movs	r0, r3
   1e00c:	2304      	movs	r3, #4
   1e00e:	2250      	movs	r2, #80	; 0x50
   1e010:	2180      	movs	r1, #128	; 0x80
   1e012:	4d06      	ldr	r5, [pc, #24]	; (1e02c <sd_decode_csd+0xe0>)
   1e014:	47a8      	blx	r5
   1e016:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e018:	683b      	ldr	r3, [r7, #0]
   1e01a:	4093      	lsls	r3, r2
				/ 1024;
   1e01c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e01e:	6063      	str	r3, [r4, #4]
}
   1e020:	46c0      	nop			; (mov r8, r8)
   1e022:	46bd      	mov	sp, r7
   1e024:	b004      	add	sp, #16
   1e026:	bdb0      	pop	{r4, r5, r7, pc}
   1e028:	200040c0 	.word	0x200040c0
   1e02c:	0001d919 	.word	0x0001d919
   1e030:	00037b74 	.word	0x00037b74
   1e034:	00037b90 	.word	0x00037b90

0001e038 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e038:	b580      	push	{r7, lr}
   1e03a:	b082      	sub	sp, #8
   1e03c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e03e:	4b11      	ldr	r3, [pc, #68]	; (1e084 <sd_mmc_cmd13+0x4c>)
   1e040:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e042:	4b11      	ldr	r3, [pc, #68]	; (1e088 <sd_mmc_cmd13+0x50>)
   1e044:	2100      	movs	r1, #0
   1e046:	0018      	movs	r0, r3
   1e048:	4b10      	ldr	r3, [pc, #64]	; (1e08c <sd_mmc_cmd13+0x54>)
   1e04a:	4798      	blx	r3
   1e04c:	0003      	movs	r3, r0
   1e04e:	001a      	movs	r2, r3
   1e050:	2301      	movs	r3, #1
   1e052:	4053      	eors	r3, r2
   1e054:	b2db      	uxtb	r3, r3
   1e056:	2b00      	cmp	r3, #0
   1e058:	d001      	beq.n	1e05e <sd_mmc_cmd13+0x26>
				return false;
   1e05a:	2300      	movs	r3, #0
   1e05c:	e00e      	b.n	1e07c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e05e:	4b0c      	ldr	r3, [pc, #48]	; (1e090 <sd_mmc_cmd13+0x58>)
   1e060:	4798      	blx	r3
   1e062:	0002      	movs	r2, r0
   1e064:	23ff      	movs	r3, #255	; 0xff
   1e066:	4013      	ands	r3, r2
   1e068:	d006      	beq.n	1e078 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e06a:	687b      	ldr	r3, [r7, #4]
   1e06c:	1e5a      	subs	r2, r3, #1
   1e06e:	607a      	str	r2, [r7, #4]
   1e070:	2b00      	cmp	r3, #0
   1e072:	d1e6      	bne.n	1e042 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e074:	2300      	movs	r3, #0
   1e076:	e001      	b.n	1e07c <sd_mmc_cmd13+0x44>
				break;
   1e078:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e07a:	2301      	movs	r3, #1
}
   1e07c:	0018      	movs	r0, r3
   1e07e:	46bd      	mov	sp, r7
   1e080:	b002      	add	sp, #8
   1e082:	bd80      	pop	{r7, pc}
   1e084:	00030d40 	.word	0x00030d40
   1e088:	00001b0d 	.word	0x00001b0d
   1e08c:	0001f4f1 	.word	0x0001f4f1
   1e090:	0001f731 	.word	0x0001f731

0001e094 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e094:	b590      	push	{r4, r7, lr}
   1e096:	b085      	sub	sp, #20
   1e098:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e09a:	4b38      	ldr	r3, [pc, #224]	; (1e17c <sd_acmd51+0xe8>)
   1e09c:	681b      	ldr	r3, [r3, #0]
   1e09e:	891b      	ldrh	r3, [r3, #8]
   1e0a0:	041b      	lsls	r3, r3, #16
   1e0a2:	4a37      	ldr	r2, [pc, #220]	; (1e180 <sd_acmd51+0xec>)
   1e0a4:	0019      	movs	r1, r3
   1e0a6:	0010      	movs	r0, r2
   1e0a8:	4b36      	ldr	r3, [pc, #216]	; (1e184 <sd_acmd51+0xf0>)
   1e0aa:	4798      	blx	r3
   1e0ac:	0003      	movs	r3, r0
   1e0ae:	001a      	movs	r2, r3
   1e0b0:	2301      	movs	r3, #1
   1e0b2:	4053      	eors	r3, r2
   1e0b4:	b2db      	uxtb	r3, r3
   1e0b6:	2b00      	cmp	r3, #0
   1e0b8:	d001      	beq.n	1e0be <sd_acmd51+0x2a>
		return false;
   1e0ba:	2300      	movs	r3, #0
   1e0bc:	e059      	b.n	1e172 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e0be:	4832      	ldr	r0, [pc, #200]	; (1e188 <sd_acmd51+0xf4>)
   1e0c0:	2301      	movs	r3, #1
   1e0c2:	9300      	str	r3, [sp, #0]
   1e0c4:	2301      	movs	r3, #1
   1e0c6:	2208      	movs	r2, #8
   1e0c8:	2100      	movs	r1, #0
   1e0ca:	4c30      	ldr	r4, [pc, #192]	; (1e18c <sd_acmd51+0xf8>)
   1e0cc:	47a0      	blx	r4
   1e0ce:	0003      	movs	r3, r0
   1e0d0:	001a      	movs	r2, r3
   1e0d2:	2301      	movs	r3, #1
   1e0d4:	4053      	eors	r3, r2
   1e0d6:	b2db      	uxtb	r3, r3
   1e0d8:	2b00      	cmp	r3, #0
   1e0da:	d001      	beq.n	1e0e0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e0dc:	2300      	movs	r3, #0
   1e0de:	e048      	b.n	1e172 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e0e0:	003b      	movs	r3, r7
   1e0e2:	2101      	movs	r1, #1
   1e0e4:	0018      	movs	r0, r3
   1e0e6:	4b2a      	ldr	r3, [pc, #168]	; (1e190 <sd_acmd51+0xfc>)
   1e0e8:	4798      	blx	r3
   1e0ea:	0003      	movs	r3, r0
   1e0ec:	001a      	movs	r2, r3
   1e0ee:	2301      	movs	r3, #1
   1e0f0:	4053      	eors	r3, r2
   1e0f2:	b2db      	uxtb	r3, r3
   1e0f4:	2b00      	cmp	r3, #0
   1e0f6:	d001      	beq.n	1e0fc <sd_acmd51+0x68>
		return false;
   1e0f8:	2300      	movs	r3, #0
   1e0fa:	e03a      	b.n	1e172 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e0fc:	4b25      	ldr	r3, [pc, #148]	; (1e194 <sd_acmd51+0x100>)
   1e0fe:	4798      	blx	r3
   1e100:	0003      	movs	r3, r0
   1e102:	001a      	movs	r2, r3
   1e104:	2301      	movs	r3, #1
   1e106:	4053      	eors	r3, r2
   1e108:	b2db      	uxtb	r3, r3
   1e10a:	2b00      	cmp	r3, #0
   1e10c:	d001      	beq.n	1e112 <sd_acmd51+0x7e>
		return false;
   1e10e:	2300      	movs	r3, #0
   1e110:	e02f      	b.n	1e172 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e112:	0038      	movs	r0, r7
   1e114:	2304      	movs	r3, #4
   1e116:	2238      	movs	r2, #56	; 0x38
   1e118:	2140      	movs	r1, #64	; 0x40
   1e11a:	4c1f      	ldr	r4, [pc, #124]	; (1e198 <sd_acmd51+0x104>)
   1e11c:	47a0      	blx	r4
   1e11e:	0003      	movs	r3, r0
   1e120:	2b01      	cmp	r3, #1
   1e122:	d008      	beq.n	1e136 <sd_acmd51+0xa2>
   1e124:	d302      	bcc.n	1e12c <sd_acmd51+0x98>
   1e126:	2b02      	cmp	r3, #2
   1e128:	d00a      	beq.n	1e140 <sd_acmd51+0xac>
   1e12a:	e01c      	b.n	1e166 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e12c:	4b13      	ldr	r3, [pc, #76]	; (1e17c <sd_acmd51+0xe8>)
   1e12e:	681b      	ldr	r3, [r3, #0]
   1e130:	2210      	movs	r2, #16
   1e132:	731a      	strb	r2, [r3, #12]
		break;
   1e134:	e01c      	b.n	1e170 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e136:	4b11      	ldr	r3, [pc, #68]	; (1e17c <sd_acmd51+0xe8>)
   1e138:	681b      	ldr	r3, [r3, #0]
   1e13a:	221a      	movs	r2, #26
   1e13c:	731a      	strb	r2, [r3, #12]
		break;
   1e13e:	e017      	b.n	1e170 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e140:	0038      	movs	r0, r7
   1e142:	2301      	movs	r3, #1
   1e144:	222f      	movs	r2, #47	; 0x2f
   1e146:	2140      	movs	r1, #64	; 0x40
   1e148:	4c13      	ldr	r4, [pc, #76]	; (1e198 <sd_acmd51+0x104>)
   1e14a:	47a0      	blx	r4
   1e14c:	0003      	movs	r3, r0
   1e14e:	2b01      	cmp	r3, #1
   1e150:	d104      	bne.n	1e15c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e152:	4b0a      	ldr	r3, [pc, #40]	; (1e17c <sd_acmd51+0xe8>)
   1e154:	681b      	ldr	r3, [r3, #0]
   1e156:	2230      	movs	r2, #48	; 0x30
   1e158:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e15a:	e009      	b.n	1e170 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e15c:	4b07      	ldr	r3, [pc, #28]	; (1e17c <sd_acmd51+0xe8>)
   1e15e:	681b      	ldr	r3, [r3, #0]
   1e160:	2220      	movs	r2, #32
   1e162:	731a      	strb	r2, [r3, #12]
		break;
   1e164:	e004      	b.n	1e170 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e166:	4b05      	ldr	r3, [pc, #20]	; (1e17c <sd_acmd51+0xe8>)
   1e168:	681b      	ldr	r3, [r3, #0]
   1e16a:	2210      	movs	r2, #16
   1e16c:	731a      	strb	r2, [r3, #12]
		break;
   1e16e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e170:	2301      	movs	r3, #1
}
   1e172:	0018      	movs	r0, r3
   1e174:	46bd      	mov	sp, r7
   1e176:	b003      	add	sp, #12
   1e178:	bd90      	pop	{r4, r7, pc}
   1e17a:	46c0      	nop			; (mov r8, r8)
   1e17c:	200040c0 	.word	0x200040c0
   1e180:	00001137 	.word	0x00001137
   1e184:	0001f4f1 	.word	0x0001f4f1
   1e188:	00081133 	.word	0x00081133
   1e18c:	0001f519 	.word	0x0001f519
   1e190:	0001f7e9 	.word	0x0001f7e9
   1e194:	0001f88d 	.word	0x0001f88d
   1e198:	0001d919 	.word	0x0001d919

0001e19c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e19c:	b580      	push	{r7, lr}
   1e19e:	b082      	sub	sp, #8
   1e1a0:	af00      	add	r7, sp, #0
   1e1a2:	0002      	movs	r2, r0
   1e1a4:	1dfb      	adds	r3, r7, #7
   1e1a6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e1a8:	1dfb      	adds	r3, r7, #7
   1e1aa:	781b      	ldrb	r3, [r3, #0]
   1e1ac:	2b00      	cmp	r3, #0
   1e1ae:	d001      	beq.n	1e1b4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e1b0:	2304      	movs	r3, #4
   1e1b2:	e047      	b.n	1e244 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e1b4:	1dfb      	adds	r3, r7, #7
   1e1b6:	781b      	ldrb	r3, [r3, #0]
   1e1b8:	4a24      	ldr	r2, [pc, #144]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e1ba:	015b      	lsls	r3, r3, #5
   1e1bc:	18d3      	adds	r3, r2, r3
   1e1be:	330a      	adds	r3, #10
   1e1c0:	781b      	ldrb	r3, [r3, #0]
   1e1c2:	2b04      	cmp	r3, #4
   1e1c4:	d008      	beq.n	1e1d8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e1c6:	1dfb      	adds	r3, r7, #7
   1e1c8:	781b      	ldrb	r3, [r3, #0]
   1e1ca:	4a20      	ldr	r2, [pc, #128]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e1cc:	015b      	lsls	r3, r3, #5
   1e1ce:	18d3      	adds	r3, r2, r3
   1e1d0:	330a      	adds	r3, #10
   1e1d2:	781b      	ldrb	r3, [r3, #0]
   1e1d4:	2b03      	cmp	r3, #3
   1e1d6:	d11d      	bne.n	1e214 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e1d8:	1dfb      	adds	r3, r7, #7
   1e1da:	781b      	ldrb	r3, [r3, #0]
   1e1dc:	4a1b      	ldr	r2, [pc, #108]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e1de:	015b      	lsls	r3, r3, #5
   1e1e0:	18d3      	adds	r3, r2, r3
   1e1e2:	330a      	adds	r3, #10
   1e1e4:	2202      	movs	r2, #2
   1e1e6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e1e8:	1dfb      	adds	r3, r7, #7
   1e1ea:	781a      	ldrb	r2, [r3, #0]
   1e1ec:	4b17      	ldr	r3, [pc, #92]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e1ee:	0152      	lsls	r2, r2, #5
   1e1f0:	4917      	ldr	r1, [pc, #92]	; (1e250 <sd_mmc_select_slot+0xb4>)
   1e1f2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e1f4:	1dfb      	adds	r3, r7, #7
   1e1f6:	781b      	ldrb	r3, [r3, #0]
   1e1f8:	4a14      	ldr	r2, [pc, #80]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e1fa:	015b      	lsls	r3, r3, #5
   1e1fc:	18d3      	adds	r3, r2, r3
   1e1fe:	330d      	adds	r3, #13
   1e200:	2201      	movs	r2, #1
   1e202:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e204:	1dfb      	adds	r3, r7, #7
   1e206:	781b      	ldrb	r3, [r3, #0]
   1e208:	4a10      	ldr	r2, [pc, #64]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e20a:	015b      	lsls	r3, r3, #5
   1e20c:	18d3      	adds	r3, r2, r3
   1e20e:	331e      	adds	r3, #30
   1e210:	2200      	movs	r2, #0
   1e212:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e214:	4b0f      	ldr	r3, [pc, #60]	; (1e254 <sd_mmc_select_slot+0xb8>)
   1e216:	1dfa      	adds	r2, r7, #7
   1e218:	7812      	ldrb	r2, [r2, #0]
   1e21a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e21c:	1dfb      	adds	r3, r7, #7
   1e21e:	781b      	ldrb	r3, [r3, #0]
   1e220:	015a      	lsls	r2, r3, #5
   1e222:	4b0a      	ldr	r3, [pc, #40]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e224:	18d2      	adds	r2, r2, r3
   1e226:	4b0c      	ldr	r3, [pc, #48]	; (1e258 <sd_mmc_select_slot+0xbc>)
   1e228:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e22a:	4b0c      	ldr	r3, [pc, #48]	; (1e25c <sd_mmc_select_slot+0xc0>)
   1e22c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e22e:	1dfb      	adds	r3, r7, #7
   1e230:	781b      	ldrb	r3, [r3, #0]
   1e232:	4a06      	ldr	r2, [pc, #24]	; (1e24c <sd_mmc_select_slot+0xb0>)
   1e234:	015b      	lsls	r3, r3, #5
   1e236:	18d3      	adds	r3, r2, r3
   1e238:	330a      	adds	r3, #10
   1e23a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e23c:	3b02      	subs	r3, #2
   1e23e:	425a      	negs	r2, r3
   1e240:	4153      	adcs	r3, r2
   1e242:	b2db      	uxtb	r3, r3
}
   1e244:	0018      	movs	r0, r3
   1e246:	46bd      	mov	sp, r7
   1e248:	b002      	add	sp, #8
   1e24a:	bd80      	pop	{r7, pc}
   1e24c:	2000409c 	.word	0x2000409c
   1e250:	00061a80 	.word	0x00061a80
   1e254:	200040bc 	.word	0x200040bc
   1e258:	200040c0 	.word	0x200040c0
   1e25c:	0001e261 	.word	0x0001e261

0001e260 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1e260:	b5b0      	push	{r4, r5, r7, lr}
   1e262:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e264:	4b09      	ldr	r3, [pc, #36]	; (1e28c <sd_mmc_configure_slot+0x2c>)
   1e266:	7818      	ldrb	r0, [r3, #0]
   1e268:	4b09      	ldr	r3, [pc, #36]	; (1e290 <sd_mmc_configure_slot+0x30>)
   1e26a:	681b      	ldr	r3, [r3, #0]
   1e26c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e26e:	4b08      	ldr	r3, [pc, #32]	; (1e290 <sd_mmc_configure_slot+0x30>)
   1e270:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e272:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e274:	4b06      	ldr	r3, [pc, #24]	; (1e290 <sd_mmc_configure_slot+0x30>)
   1e276:	681b      	ldr	r3, [r3, #0]
   1e278:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e27a:	1e5c      	subs	r4, r3, #1
   1e27c:	41a3      	sbcs	r3, r4
   1e27e:	b2db      	uxtb	r3, r3
   1e280:	4c04      	ldr	r4, [pc, #16]	; (1e294 <sd_mmc_configure_slot+0x34>)
   1e282:	47a0      	blx	r4
}
   1e284:	46c0      	nop			; (mov r8, r8)
   1e286:	46bd      	mov	sp, r7
   1e288:	bdb0      	pop	{r4, r5, r7, pc}
   1e28a:	46c0      	nop			; (mov r8, r8)
   1e28c:	200040bc 	.word	0x200040bc
   1e290:	200040c0 	.word	0x200040c0
   1e294:	0001f3d9 	.word	0x0001f3d9

0001e298 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1e298:	b580      	push	{r7, lr}
   1e29a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1e29c:	4b05      	ldr	r3, [pc, #20]	; (1e2b4 <sd_mmc_deselect_slot+0x1c>)
   1e29e:	781b      	ldrb	r3, [r3, #0]
   1e2a0:	2b00      	cmp	r3, #0
   1e2a2:	d104      	bne.n	1e2ae <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1e2a4:	4b03      	ldr	r3, [pc, #12]	; (1e2b4 <sd_mmc_deselect_slot+0x1c>)
   1e2a6:	781b      	ldrb	r3, [r3, #0]
   1e2a8:	0018      	movs	r0, r3
   1e2aa:	4b03      	ldr	r3, [pc, #12]	; (1e2b8 <sd_mmc_deselect_slot+0x20>)
   1e2ac:	4798      	blx	r3
	}
}
   1e2ae:	46c0      	nop			; (mov r8, r8)
   1e2b0:	46bd      	mov	sp, r7
   1e2b2:	bd80      	pop	{r7, pc}
   1e2b4:	200040bc 	.word	0x200040bc
   1e2b8:	0001f461 	.word	0x0001f461

0001e2bc <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1e2bc:	b580      	push	{r7, lr}
   1e2be:	b082      	sub	sp, #8
   1e2c0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1e2c2:	1dfb      	adds	r3, r7, #7
   1e2c4:	2200      	movs	r2, #0
   1e2c6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1e2c8:	4b59      	ldr	r3, [pc, #356]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e2ca:	681b      	ldr	r3, [r3, #0]
   1e2cc:	2201      	movs	r2, #1
   1e2ce:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1e2d0:	4b57      	ldr	r3, [pc, #348]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e2d2:	681b      	ldr	r3, [r3, #0]
   1e2d4:	2200      	movs	r2, #0
   1e2d6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1e2d8:	4b55      	ldr	r3, [pc, #340]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e2da:	681b      	ldr	r3, [r3, #0]
   1e2dc:	2200      	movs	r2, #0
   1e2de:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1e2e0:	4b54      	ldr	r3, [pc, #336]	; (1e434 <sd_mmc_spi_card_init+0x178>)
   1e2e2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e2e4:	2388      	movs	r3, #136	; 0x88
   1e2e6:	015b      	lsls	r3, r3, #5
   1e2e8:	2100      	movs	r1, #0
   1e2ea:	0018      	movs	r0, r3
   1e2ec:	4b52      	ldr	r3, [pc, #328]	; (1e438 <sd_mmc_spi_card_init+0x17c>)
   1e2ee:	4798      	blx	r3
   1e2f0:	0003      	movs	r3, r0
   1e2f2:	001a      	movs	r2, r3
   1e2f4:	2301      	movs	r3, #1
   1e2f6:	4053      	eors	r3, r2
   1e2f8:	b2db      	uxtb	r3, r3
   1e2fa:	2b00      	cmp	r3, #0
   1e2fc:	d001      	beq.n	1e302 <sd_mmc_spi_card_init+0x46>
		return false;
   1e2fe:	2300      	movs	r3, #0
   1e300:	e092      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1e302:	1dfb      	adds	r3, r7, #7
   1e304:	0018      	movs	r0, r3
   1e306:	4b4d      	ldr	r3, [pc, #308]	; (1e43c <sd_mmc_spi_card_init+0x180>)
   1e308:	4798      	blx	r3
   1e30a:	0003      	movs	r3, r0
   1e30c:	001a      	movs	r2, r3
   1e30e:	2301      	movs	r3, #1
   1e310:	4053      	eors	r3, r2
   1e312:	b2db      	uxtb	r3, r3
   1e314:	2b00      	cmp	r3, #0
   1e316:	d001      	beq.n	1e31c <sd_mmc_spi_card_init+0x60>
		return false;
   1e318:	2300      	movs	r3, #0
   1e31a:	e085      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1e31c:	4b48      	ldr	r3, [pc, #288]	; (1e440 <sd_mmc_spi_card_init+0x184>)
   1e31e:	4798      	blx	r3
   1e320:	0003      	movs	r3, r0
   1e322:	001a      	movs	r2, r3
   1e324:	2301      	movs	r3, #1
   1e326:	4053      	eors	r3, r2
   1e328:	b2db      	uxtb	r3, r3
   1e32a:	2b00      	cmp	r3, #0
   1e32c:	d001      	beq.n	1e332 <sd_mmc_spi_card_init+0x76>
		return false;
   1e32e:	2300      	movs	r3, #0
   1e330:	e07a      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e332:	4b3f      	ldr	r3, [pc, #252]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e334:	681b      	ldr	r3, [r3, #0]
   1e336:	7adb      	ldrb	r3, [r3, #11]
   1e338:	001a      	movs	r2, r3
   1e33a:	2301      	movs	r3, #1
   1e33c:	4013      	ands	r3, r2
   1e33e:	d021      	beq.n	1e384 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1e340:	1dfb      	adds	r3, r7, #7
   1e342:	781b      	ldrb	r3, [r3, #0]
   1e344:	0018      	movs	r0, r3
   1e346:	4b3f      	ldr	r3, [pc, #252]	; (1e444 <sd_mmc_spi_card_init+0x188>)
   1e348:	4798      	blx	r3
   1e34a:	0003      	movs	r3, r0
   1e34c:	001a      	movs	r2, r3
   1e34e:	2301      	movs	r3, #1
   1e350:	4053      	eors	r3, r2
   1e352:	b2db      	uxtb	r3, r3
   1e354:	2b00      	cmp	r3, #0
   1e356:	d007      	beq.n	1e368 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1e358:	4b35      	ldr	r3, [pc, #212]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e35a:	681b      	ldr	r3, [r3, #0]
   1e35c:	2202      	movs	r2, #2
   1e35e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1e360:	4b39      	ldr	r3, [pc, #228]	; (1e448 <sd_mmc_spi_card_init+0x18c>)
   1e362:	4798      	blx	r3
   1e364:	0003      	movs	r3, r0
   1e366:	e05f      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e368:	4b38      	ldr	r3, [pc, #224]	; (1e44c <sd_mmc_spi_card_init+0x190>)
   1e36a:	2100      	movs	r1, #0
   1e36c:	0018      	movs	r0, r3
   1e36e:	4b32      	ldr	r3, [pc, #200]	; (1e438 <sd_mmc_spi_card_init+0x17c>)
   1e370:	4798      	blx	r3
   1e372:	0003      	movs	r3, r0
   1e374:	001a      	movs	r2, r3
   1e376:	2301      	movs	r3, #1
   1e378:	4053      	eors	r3, r2
   1e37a:	b2db      	uxtb	r3, r3
   1e37c:	2b00      	cmp	r3, #0
   1e37e:	d001      	beq.n	1e384 <sd_mmc_spi_card_init+0xc8>
			return false;
   1e380:	2300      	movs	r3, #0
   1e382:	e051      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e384:	4b2a      	ldr	r3, [pc, #168]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e386:	681b      	ldr	r3, [r3, #0]
   1e388:	7adb      	ldrb	r3, [r3, #11]
   1e38a:	001a      	movs	r2, r3
   1e38c:	2301      	movs	r3, #1
   1e38e:	4013      	ands	r3, r2
   1e390:	d017      	beq.n	1e3c2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1e392:	4b2f      	ldr	r3, [pc, #188]	; (1e450 <sd_mmc_spi_card_init+0x194>)
   1e394:	4798      	blx	r3
   1e396:	0003      	movs	r3, r0
   1e398:	001a      	movs	r2, r3
   1e39a:	2301      	movs	r3, #1
   1e39c:	4053      	eors	r3, r2
   1e39e:	b2db      	uxtb	r3, r3
   1e3a0:	2b00      	cmp	r3, #0
   1e3a2:	d001      	beq.n	1e3a8 <sd_mmc_spi_card_init+0xec>
			return false;
   1e3a4:	2300      	movs	r3, #0
   1e3a6:	e03f      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1e3a8:	4b2a      	ldr	r3, [pc, #168]	; (1e454 <sd_mmc_spi_card_init+0x198>)
   1e3aa:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1e3ac:	4b2a      	ldr	r3, [pc, #168]	; (1e458 <sd_mmc_spi_card_init+0x19c>)
   1e3ae:	4798      	blx	r3
   1e3b0:	0003      	movs	r3, r0
   1e3b2:	001a      	movs	r2, r3
   1e3b4:	2301      	movs	r3, #1
   1e3b6:	4053      	eors	r3, r2
   1e3b8:	b2db      	uxtb	r3, r3
   1e3ba:	2b00      	cmp	r3, #0
   1e3bc:	d001      	beq.n	1e3c2 <sd_mmc_spi_card_init+0x106>
			return false;
   1e3be:	2300      	movs	r3, #0
   1e3c0:	e032      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e3c2:	4b1b      	ldr	r3, [pc, #108]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e3c4:	681b      	ldr	r3, [r3, #0]
   1e3c6:	7adb      	ldrb	r3, [r3, #11]
   1e3c8:	001a      	movs	r2, r3
   1e3ca:	2301      	movs	r3, #1
   1e3cc:	4013      	ands	r3, r2
   1e3ce:	d016      	beq.n	1e3fe <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1e3d0:	4b17      	ldr	r3, [pc, #92]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e3d2:	681b      	ldr	r3, [r3, #0]
   1e3d4:	7adb      	ldrb	r3, [r3, #11]
   1e3d6:	001a      	movs	r2, r3
   1e3d8:	2308      	movs	r3, #8
   1e3da:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e3dc:	d10f      	bne.n	1e3fe <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e3de:	2380      	movs	r3, #128	; 0x80
   1e3e0:	009b      	lsls	r3, r3, #2
   1e3e2:	4a1e      	ldr	r2, [pc, #120]	; (1e45c <sd_mmc_spi_card_init+0x1a0>)
   1e3e4:	0019      	movs	r1, r3
   1e3e6:	0010      	movs	r0, r2
   1e3e8:	4b13      	ldr	r3, [pc, #76]	; (1e438 <sd_mmc_spi_card_init+0x17c>)
   1e3ea:	4798      	blx	r3
   1e3ec:	0003      	movs	r3, r0
   1e3ee:	001a      	movs	r2, r3
   1e3f0:	2301      	movs	r3, #1
   1e3f2:	4053      	eors	r3, r2
   1e3f4:	b2db      	uxtb	r3, r3
   1e3f6:	2b00      	cmp	r3, #0
   1e3f8:	d001      	beq.n	1e3fe <sd_mmc_spi_card_init+0x142>
			return false;
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	e014      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e3fe:	4b0c      	ldr	r3, [pc, #48]	; (1e430 <sd_mmc_spi_card_init+0x174>)
   1e400:	681b      	ldr	r3, [r3, #0]
   1e402:	7adb      	ldrb	r3, [r3, #11]
   1e404:	001a      	movs	r2, r3
   1e406:	2301      	movs	r3, #1
   1e408:	4013      	ands	r3, r2
   1e40a:	d00a      	beq.n	1e422 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1e40c:	4b14      	ldr	r3, [pc, #80]	; (1e460 <sd_mmc_spi_card_init+0x1a4>)
   1e40e:	4798      	blx	r3
   1e410:	0003      	movs	r3, r0
   1e412:	001a      	movs	r2, r3
   1e414:	2301      	movs	r3, #1
   1e416:	4053      	eors	r3, r2
   1e418:	b2db      	uxtb	r3, r3
   1e41a:	2b00      	cmp	r3, #0
   1e41c:	d001      	beq.n	1e422 <sd_mmc_spi_card_init+0x166>
			return false;
   1e41e:	2300      	movs	r3, #0
   1e420:	e002      	b.n	1e428 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e422:	4b10      	ldr	r3, [pc, #64]	; (1e464 <sd_mmc_spi_card_init+0x1a8>)
   1e424:	4798      	blx	r3
	return true;
   1e426:	2301      	movs	r3, #1
}
   1e428:	0018      	movs	r0, r3
   1e42a:	46bd      	mov	sp, r7
   1e42c:	b002      	add	sp, #8
   1e42e:	bd80      	pop	{r7, pc}
   1e430:	200040c0 	.word	0x200040c0
   1e434:	0001f4a5 	.word	0x0001f4a5
   1e438:	0001f4f1 	.word	0x0001f4f1
   1e43c:	0001dc11 	.word	0x0001dc11
   1e440:	0001dc05 	.word	0x0001dc05
   1e444:	0001db21 	.word	0x0001db21
   1e448:	0001e469 	.word	0x0001e469
   1e44c:	0000113b 	.word	0x0000113b
   1e450:	0001ddad 	.word	0x0001ddad
   1e454:	0001df4d 	.word	0x0001df4d
   1e458:	0001e095 	.word	0x0001e095
   1e45c:	00001110 	.word	0x00001110
   1e460:	0001e039 	.word	0x0001e039
   1e464:	0001e261 	.word	0x0001e261

0001e468 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1e468:	b580      	push	{r7, lr}
   1e46a:	b082      	sub	sp, #8
   1e46c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e46e:	2388      	movs	r3, #136	; 0x88
   1e470:	015b      	lsls	r3, r3, #5
   1e472:	2100      	movs	r1, #0
   1e474:	0018      	movs	r0, r3
   1e476:	4b32      	ldr	r3, [pc, #200]	; (1e540 <sd_mmc_spi_install_mmc+0xd8>)
   1e478:	4798      	blx	r3
   1e47a:	0003      	movs	r3, r0
   1e47c:	001a      	movs	r2, r3
   1e47e:	2301      	movs	r3, #1
   1e480:	4053      	eors	r3, r2
   1e482:	b2db      	uxtb	r3, r3
   1e484:	2b00      	cmp	r3, #0
   1e486:	d001      	beq.n	1e48c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1e488:	2300      	movs	r3, #0
   1e48a:	e055      	b.n	1e538 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1e48c:	4b2d      	ldr	r3, [pc, #180]	; (1e544 <sd_mmc_spi_install_mmc+0xdc>)
   1e48e:	4798      	blx	r3
   1e490:	0003      	movs	r3, r0
   1e492:	001a      	movs	r2, r3
   1e494:	2301      	movs	r3, #1
   1e496:	4053      	eors	r3, r2
   1e498:	b2db      	uxtb	r3, r3
   1e49a:	2b00      	cmp	r3, #0
   1e49c:	d001      	beq.n	1e4a2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1e49e:	2300      	movs	r3, #0
   1e4a0:	e04a      	b.n	1e538 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e4a2:	4b29      	ldr	r3, [pc, #164]	; (1e548 <sd_mmc_spi_install_mmc+0xe0>)
   1e4a4:	2100      	movs	r1, #0
   1e4a6:	0018      	movs	r0, r3
   1e4a8:	4b25      	ldr	r3, [pc, #148]	; (1e540 <sd_mmc_spi_install_mmc+0xd8>)
   1e4aa:	4798      	blx	r3
   1e4ac:	0003      	movs	r3, r0
   1e4ae:	001a      	movs	r2, r3
   1e4b0:	2301      	movs	r3, #1
   1e4b2:	4053      	eors	r3, r2
   1e4b4:	b2db      	uxtb	r3, r3
   1e4b6:	2b00      	cmp	r3, #0
   1e4b8:	d001      	beq.n	1e4be <sd_mmc_spi_install_mmc+0x56>
		return false;
   1e4ba:	2300      	movs	r3, #0
   1e4bc:	e03c      	b.n	1e538 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1e4be:	4b23      	ldr	r3, [pc, #140]	; (1e54c <sd_mmc_spi_install_mmc+0xe4>)
   1e4c0:	4798      	blx	r3
   1e4c2:	0003      	movs	r3, r0
   1e4c4:	001a      	movs	r2, r3
   1e4c6:	2301      	movs	r3, #1
   1e4c8:	4053      	eors	r3, r2
   1e4ca:	b2db      	uxtb	r3, r3
   1e4cc:	2b00      	cmp	r3, #0
   1e4ce:	d001      	beq.n	1e4d4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1e4d0:	2300      	movs	r3, #0
   1e4d2:	e031      	b.n	1e538 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1e4d4:	4b1e      	ldr	r3, [pc, #120]	; (1e550 <sd_mmc_spi_install_mmc+0xe8>)
   1e4d6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1e4d8:	4b1e      	ldr	r3, [pc, #120]	; (1e554 <sd_mmc_spi_install_mmc+0xec>)
   1e4da:	681b      	ldr	r3, [r3, #0]
   1e4dc:	7b1b      	ldrb	r3, [r3, #12]
   1e4de:	2b3f      	cmp	r3, #63	; 0x3f
   1e4e0:	d90c      	bls.n	1e4fc <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1e4e2:	1dfb      	adds	r3, r7, #7
   1e4e4:	0018      	movs	r0, r3
   1e4e6:	4b1c      	ldr	r3, [pc, #112]	; (1e558 <sd_mmc_spi_install_mmc+0xf0>)
   1e4e8:	4798      	blx	r3
   1e4ea:	0003      	movs	r3, r0
   1e4ec:	001a      	movs	r2, r3
   1e4ee:	2301      	movs	r3, #1
   1e4f0:	4053      	eors	r3, r2
   1e4f2:	b2db      	uxtb	r3, r3
   1e4f4:	2b00      	cmp	r3, #0
   1e4f6:	d001      	beq.n	1e4fc <sd_mmc_spi_install_mmc+0x94>
			return false;
   1e4f8:	2300      	movs	r3, #0
   1e4fa:	e01d      	b.n	1e538 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e4fc:	2380      	movs	r3, #128	; 0x80
   1e4fe:	009b      	lsls	r3, r3, #2
   1e500:	4a16      	ldr	r2, [pc, #88]	; (1e55c <sd_mmc_spi_install_mmc+0xf4>)
   1e502:	0019      	movs	r1, r3
   1e504:	0010      	movs	r0, r2
   1e506:	4b0e      	ldr	r3, [pc, #56]	; (1e540 <sd_mmc_spi_install_mmc+0xd8>)
   1e508:	4798      	blx	r3
   1e50a:	0003      	movs	r3, r0
   1e50c:	001a      	movs	r2, r3
   1e50e:	2301      	movs	r3, #1
   1e510:	4053      	eors	r3, r2
   1e512:	b2db      	uxtb	r3, r3
   1e514:	2b00      	cmp	r3, #0
   1e516:	d001      	beq.n	1e51c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1e518:	2300      	movs	r3, #0
   1e51a:	e00d      	b.n	1e538 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1e51c:	4b10      	ldr	r3, [pc, #64]	; (1e560 <sd_mmc_spi_install_mmc+0xf8>)
   1e51e:	4798      	blx	r3
   1e520:	0003      	movs	r3, r0
   1e522:	001a      	movs	r2, r3
   1e524:	2301      	movs	r3, #1
   1e526:	4053      	eors	r3, r2
   1e528:	b2db      	uxtb	r3, r3
   1e52a:	2b00      	cmp	r3, #0
   1e52c:	d001      	beq.n	1e532 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1e52e:	2300      	movs	r3, #0
   1e530:	e002      	b.n	1e538 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e532:	4b0c      	ldr	r3, [pc, #48]	; (1e564 <sd_mmc_spi_install_mmc+0xfc>)
   1e534:	4798      	blx	r3
	return true;
   1e536:	2301      	movs	r3, #1
}
   1e538:	0018      	movs	r0, r3
   1e53a:	46bd      	mov	sp, r7
   1e53c:	b002      	add	sp, #8
   1e53e:	bd80      	pop	{r7, pc}
   1e540:	0001f4f1 	.word	0x0001f4f1
   1e544:	0001da75 	.word	0x0001da75
   1e548:	0000113b 	.word	0x0000113b
   1e54c:	0001ddad 	.word	0x0001ddad
   1e550:	0001de1d 	.word	0x0001de1d
   1e554:	200040c0 	.word	0x200040c0
   1e558:	0001dc81 	.word	0x0001dc81
   1e55c:	00001110 	.word	0x00001110
   1e560:	0001e039 	.word	0x0001e039
   1e564:	0001e261 	.word	0x0001e261

0001e568 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1e568:	b580      	push	{r7, lr}
   1e56a:	b082      	sub	sp, #8
   1e56c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e56e:	1dfb      	adds	r3, r7, #7
   1e570:	2200      	movs	r2, #0
   1e572:	701a      	strb	r2, [r3, #0]
   1e574:	e00c      	b.n	1e590 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1e576:	1dfb      	adds	r3, r7, #7
   1e578:	781b      	ldrb	r3, [r3, #0]
   1e57a:	4a0c      	ldr	r2, [pc, #48]	; (1e5ac <sd_mmc_init+0x44>)
   1e57c:	015b      	lsls	r3, r3, #5
   1e57e:	18d3      	adds	r3, r2, r3
   1e580:	330a      	adds	r3, #10
   1e582:	2204      	movs	r2, #4
   1e584:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e586:	1dfb      	adds	r3, r7, #7
   1e588:	781a      	ldrb	r2, [r3, #0]
   1e58a:	1dfb      	adds	r3, r7, #7
   1e58c:	3201      	adds	r2, #1
   1e58e:	701a      	strb	r2, [r3, #0]
   1e590:	1dfb      	adds	r3, r7, #7
   1e592:	781b      	ldrb	r3, [r3, #0]
   1e594:	2b00      	cmp	r3, #0
   1e596:	d0ee      	beq.n	1e576 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1e598:	4b05      	ldr	r3, [pc, #20]	; (1e5b0 <sd_mmc_init+0x48>)
   1e59a:	22ff      	movs	r2, #255	; 0xff
   1e59c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1e59e:	4b05      	ldr	r3, [pc, #20]	; (1e5b4 <sd_mmc_init+0x4c>)
   1e5a0:	4798      	blx	r3
}
   1e5a2:	46c0      	nop			; (mov r8, r8)
   1e5a4:	46bd      	mov	sp, r7
   1e5a6:	b002      	add	sp, #8
   1e5a8:	bd80      	pop	{r7, pc}
   1e5aa:	46c0      	nop			; (mov r8, r8)
   1e5ac:	2000409c 	.word	0x2000409c
   1e5b0:	200040bc 	.word	0x200040bc
   1e5b4:	0001f311 	.word	0x0001f311

0001e5b8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1e5b8:	b590      	push	{r4, r7, lr}
   1e5ba:	b085      	sub	sp, #20
   1e5bc:	af00      	add	r7, sp, #0
   1e5be:	0002      	movs	r2, r0
   1e5c0:	1dfb      	adds	r3, r7, #7
   1e5c2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e5c4:	230f      	movs	r3, #15
   1e5c6:	18fc      	adds	r4, r7, r3
   1e5c8:	1dfb      	adds	r3, r7, #7
   1e5ca:	781b      	ldrb	r3, [r3, #0]
   1e5cc:	0018      	movs	r0, r3
   1e5ce:	4b13      	ldr	r3, [pc, #76]	; (1e61c <sd_mmc_check+0x64>)
   1e5d0:	4798      	blx	r3
   1e5d2:	0003      	movs	r3, r0
   1e5d4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1e5d6:	230f      	movs	r3, #15
   1e5d8:	18fb      	adds	r3, r7, r3
   1e5da:	781b      	ldrb	r3, [r3, #0]
   1e5dc:	2b01      	cmp	r3, #1
   1e5de:	d005      	beq.n	1e5ec <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1e5e0:	4b0f      	ldr	r3, [pc, #60]	; (1e620 <sd_mmc_check+0x68>)
   1e5e2:	4798      	blx	r3
		return sd_mmc_err;
   1e5e4:	230f      	movs	r3, #15
   1e5e6:	18fb      	adds	r3, r7, r3
   1e5e8:	781b      	ldrb	r3, [r3, #0]
   1e5ea:	e012      	b.n	1e612 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1e5ec:	4b0d      	ldr	r3, [pc, #52]	; (1e624 <sd_mmc_check+0x6c>)
   1e5ee:	4798      	blx	r3
   1e5f0:	1e03      	subs	r3, r0, #0
   1e5f2:	d007      	beq.n	1e604 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1e5f4:	4b0c      	ldr	r3, [pc, #48]	; (1e628 <sd_mmc_check+0x70>)
   1e5f6:	681b      	ldr	r3, [r3, #0]
   1e5f8:	2200      	movs	r2, #0
   1e5fa:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1e5fc:	4b08      	ldr	r3, [pc, #32]	; (1e620 <sd_mmc_check+0x68>)
   1e5fe:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1e600:	2301      	movs	r3, #1
   1e602:	e006      	b.n	1e612 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1e604:	4b08      	ldr	r3, [pc, #32]	; (1e628 <sd_mmc_check+0x70>)
   1e606:	681b      	ldr	r3, [r3, #0]
   1e608:	2203      	movs	r2, #3
   1e60a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1e60c:	4b04      	ldr	r3, [pc, #16]	; (1e620 <sd_mmc_check+0x68>)
   1e60e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1e610:	2303      	movs	r3, #3
}
   1e612:	0018      	movs	r0, r3
   1e614:	46bd      	mov	sp, r7
   1e616:	b005      	add	sp, #20
   1e618:	bd90      	pop	{r4, r7, pc}
   1e61a:	46c0      	nop			; (mov r8, r8)
   1e61c:	0001e19d 	.word	0x0001e19d
   1e620:	0001e299 	.word	0x0001e299
   1e624:	0001e2bd 	.word	0x0001e2bd
   1e628:	200040c0 	.word	0x200040c0

0001e62c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1e62c:	b580      	push	{r7, lr}
   1e62e:	b082      	sub	sp, #8
   1e630:	af00      	add	r7, sp, #0
   1e632:	0002      	movs	r2, r0
   1e634:	1dfb      	adds	r3, r7, #7
   1e636:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e638:	1dfb      	adds	r3, r7, #7
   1e63a:	781b      	ldrb	r3, [r3, #0]
   1e63c:	0018      	movs	r0, r3
   1e63e:	4b07      	ldr	r3, [pc, #28]	; (1e65c <sd_mmc_get_type+0x30>)
   1e640:	4798      	blx	r3
   1e642:	1e03      	subs	r3, r0, #0
   1e644:	d001      	beq.n	1e64a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1e646:	2300      	movs	r3, #0
   1e648:	e004      	b.n	1e654 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1e64a:	4b05      	ldr	r3, [pc, #20]	; (1e660 <sd_mmc_get_type+0x34>)
   1e64c:	4798      	blx	r3
	return sd_mmc_card->type;
   1e64e:	4b05      	ldr	r3, [pc, #20]	; (1e664 <sd_mmc_get_type+0x38>)
   1e650:	681b      	ldr	r3, [r3, #0]
   1e652:	7adb      	ldrb	r3, [r3, #11]
}
   1e654:	0018      	movs	r0, r3
   1e656:	46bd      	mov	sp, r7
   1e658:	b002      	add	sp, #8
   1e65a:	bd80      	pop	{r7, pc}
   1e65c:	0001e19d 	.word	0x0001e19d
   1e660:	0001e299 	.word	0x0001e299
   1e664:	200040c0 	.word	0x200040c0

0001e668 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1e668:	b580      	push	{r7, lr}
   1e66a:	b082      	sub	sp, #8
   1e66c:	af00      	add	r7, sp, #0
   1e66e:	0002      	movs	r2, r0
   1e670:	1dfb      	adds	r3, r7, #7
   1e672:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e674:	1dfb      	adds	r3, r7, #7
   1e676:	781b      	ldrb	r3, [r3, #0]
   1e678:	0018      	movs	r0, r3
   1e67a:	4b07      	ldr	r3, [pc, #28]	; (1e698 <sd_mmc_get_capacity+0x30>)
   1e67c:	4798      	blx	r3
   1e67e:	1e03      	subs	r3, r0, #0
   1e680:	d001      	beq.n	1e686 <sd_mmc_get_capacity+0x1e>
		return 0;
   1e682:	2300      	movs	r3, #0
   1e684:	e004      	b.n	1e690 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1e686:	4b05      	ldr	r3, [pc, #20]	; (1e69c <sd_mmc_get_capacity+0x34>)
   1e688:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1e68a:	4b05      	ldr	r3, [pc, #20]	; (1e6a0 <sd_mmc_get_capacity+0x38>)
   1e68c:	681b      	ldr	r3, [r3, #0]
   1e68e:	685b      	ldr	r3, [r3, #4]
}
   1e690:	0018      	movs	r0, r3
   1e692:	46bd      	mov	sp, r7
   1e694:	b002      	add	sp, #8
   1e696:	bd80      	pop	{r7, pc}
   1e698:	0001e19d 	.word	0x0001e19d
   1e69c:	0001e299 	.word	0x0001e299
   1e6a0:	200040c0 	.word	0x200040c0

0001e6a4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1e6a4:	b580      	push	{r7, lr}
   1e6a6:	b082      	sub	sp, #8
   1e6a8:	af00      	add	r7, sp, #0
   1e6aa:	0002      	movs	r2, r0
   1e6ac:	1dfb      	adds	r3, r7, #7
   1e6ae:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1e6b0:	2300      	movs	r3, #0
}
   1e6b2:	0018      	movs	r0, r3
   1e6b4:	46bd      	mov	sp, r7
   1e6b6:	b002      	add	sp, #8
   1e6b8:	bd80      	pop	{r7, pc}
	...

0001e6bc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e6bc:	b590      	push	{r4, r7, lr}
   1e6be:	b089      	sub	sp, #36	; 0x24
   1e6c0:	af02      	add	r7, sp, #8
   1e6c2:	6039      	str	r1, [r7, #0]
   1e6c4:	0011      	movs	r1, r2
   1e6c6:	1dfb      	adds	r3, r7, #7
   1e6c8:	1c02      	adds	r2, r0, #0
   1e6ca:	701a      	strb	r2, [r3, #0]
   1e6cc:	1d3b      	adds	r3, r7, #4
   1e6ce:	1c0a      	adds	r2, r1, #0
   1e6d0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e6d2:	230f      	movs	r3, #15
   1e6d4:	18fc      	adds	r4, r7, r3
   1e6d6:	1dfb      	adds	r3, r7, #7
   1e6d8:	781b      	ldrb	r3, [r3, #0]
   1e6da:	0018      	movs	r0, r3
   1e6dc:	4b29      	ldr	r3, [pc, #164]	; (1e784 <sd_mmc_init_read_blocks+0xc8>)
   1e6de:	4798      	blx	r3
   1e6e0:	0003      	movs	r3, r0
   1e6e2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e6e4:	230f      	movs	r3, #15
   1e6e6:	18fb      	adds	r3, r7, r3
   1e6e8:	781b      	ldrb	r3, [r3, #0]
   1e6ea:	2b00      	cmp	r3, #0
   1e6ec:	d003      	beq.n	1e6f6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1e6ee:	230f      	movs	r3, #15
   1e6f0:	18fb      	adds	r3, r7, r3
   1e6f2:	781b      	ldrb	r3, [r3, #0]
   1e6f4:	e041      	b.n	1e77a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1e6f6:	4b24      	ldr	r3, [pc, #144]	; (1e788 <sd_mmc_init_read_blocks+0xcc>)
   1e6f8:	4798      	blx	r3
   1e6fa:	0003      	movs	r3, r0
   1e6fc:	001a      	movs	r2, r3
   1e6fe:	2301      	movs	r3, #1
   1e700:	4053      	eors	r3, r2
   1e702:	b2db      	uxtb	r3, r3
   1e704:	2b00      	cmp	r3, #0
   1e706:	d003      	beq.n	1e710 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1e708:	4b20      	ldr	r3, [pc, #128]	; (1e78c <sd_mmc_init_read_blocks+0xd0>)
   1e70a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e70c:	2305      	movs	r3, #5
   1e70e:	e034      	b.n	1e77a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1e710:	1d3b      	adds	r3, r7, #4
   1e712:	881b      	ldrh	r3, [r3, #0]
   1e714:	2b01      	cmp	r3, #1
   1e716:	d902      	bls.n	1e71e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1e718:	4b1d      	ldr	r3, [pc, #116]	; (1e790 <sd_mmc_init_read_blocks+0xd4>)
   1e71a:	617b      	str	r3, [r7, #20]
   1e71c:	e001      	b.n	1e722 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1e71e:	4b1d      	ldr	r3, [pc, #116]	; (1e794 <sd_mmc_init_read_blocks+0xd8>)
   1e720:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e722:	4b1d      	ldr	r3, [pc, #116]	; (1e798 <sd_mmc_init_read_blocks+0xdc>)
   1e724:	681b      	ldr	r3, [r3, #0]
   1e726:	7adb      	ldrb	r3, [r3, #11]
   1e728:	001a      	movs	r2, r3
   1e72a:	2308      	movs	r3, #8
   1e72c:	4013      	ands	r3, r2
   1e72e:	d002      	beq.n	1e736 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1e730:	683b      	ldr	r3, [r7, #0]
   1e732:	613b      	str	r3, [r7, #16]
   1e734:	e002      	b.n	1e73c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e736:	683b      	ldr	r3, [r7, #0]
   1e738:	025b      	lsls	r3, r3, #9
   1e73a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e73c:	1d3b      	adds	r3, r7, #4
   1e73e:	881c      	ldrh	r4, [r3, #0]
   1e740:	2380      	movs	r3, #128	; 0x80
   1e742:	009a      	lsls	r2, r3, #2
   1e744:	6939      	ldr	r1, [r7, #16]
   1e746:	6978      	ldr	r0, [r7, #20]
   1e748:	2301      	movs	r3, #1
   1e74a:	9300      	str	r3, [sp, #0]
   1e74c:	0023      	movs	r3, r4
   1e74e:	4c13      	ldr	r4, [pc, #76]	; (1e79c <sd_mmc_init_read_blocks+0xe0>)
   1e750:	47a0      	blx	r4
   1e752:	0003      	movs	r3, r0
   1e754:	001a      	movs	r2, r3
   1e756:	2301      	movs	r3, #1
   1e758:	4053      	eors	r3, r2
   1e75a:	b2db      	uxtb	r3, r3
   1e75c:	2b00      	cmp	r3, #0
   1e75e:	d003      	beq.n	1e768 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1e760:	4b0a      	ldr	r3, [pc, #40]	; (1e78c <sd_mmc_init_read_blocks+0xd0>)
   1e762:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e764:	2305      	movs	r3, #5
   1e766:	e008      	b.n	1e77a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e768:	4b0d      	ldr	r3, [pc, #52]	; (1e7a0 <sd_mmc_init_read_blocks+0xe4>)
   1e76a:	1d3a      	adds	r2, r7, #4
   1e76c:	8812      	ldrh	r2, [r2, #0]
   1e76e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e770:	4b0c      	ldr	r3, [pc, #48]	; (1e7a4 <sd_mmc_init_read_blocks+0xe8>)
   1e772:	1d3a      	adds	r2, r7, #4
   1e774:	8812      	ldrh	r2, [r2, #0]
   1e776:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e778:	2300      	movs	r3, #0
}
   1e77a:	0018      	movs	r0, r3
   1e77c:	46bd      	mov	sp, r7
   1e77e:	b007      	add	sp, #28
   1e780:	bd90      	pop	{r4, r7, pc}
   1e782:	46c0      	nop			; (mov r8, r8)
   1e784:	0001e19d 	.word	0x0001e19d
   1e788:	0001e039 	.word	0x0001e039
   1e78c:	0001e299 	.word	0x0001e299
   1e790:	00101112 	.word	0x00101112
   1e794:	00081111 	.word	0x00081111
   1e798:	200040c0 	.word	0x200040c0
   1e79c:	0001f519 	.word	0x0001f519
   1e7a0:	200040c6 	.word	0x200040c6
   1e7a4:	200040c4 	.word	0x200040c4

0001e7a8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1e7a8:	b580      	push	{r7, lr}
   1e7aa:	b082      	sub	sp, #8
   1e7ac:	af00      	add	r7, sp, #0
   1e7ae:	6078      	str	r0, [r7, #4]
   1e7b0:	000a      	movs	r2, r1
   1e7b2:	1cbb      	adds	r3, r7, #2
   1e7b4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1e7b6:	1cbb      	adds	r3, r7, #2
   1e7b8:	881a      	ldrh	r2, [r3, #0]
   1e7ba:	687b      	ldr	r3, [r7, #4]
   1e7bc:	0011      	movs	r1, r2
   1e7be:	0018      	movs	r0, r3
   1e7c0:	4b0d      	ldr	r3, [pc, #52]	; (1e7f8 <sd_mmc_start_read_blocks+0x50>)
   1e7c2:	4798      	blx	r3
   1e7c4:	0003      	movs	r3, r0
   1e7c6:	001a      	movs	r2, r3
   1e7c8:	2301      	movs	r3, #1
   1e7ca:	4053      	eors	r3, r2
   1e7cc:	b2db      	uxtb	r3, r3
   1e7ce:	2b00      	cmp	r3, #0
   1e7d0:	d004      	beq.n	1e7dc <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e7d2:	4b0a      	ldr	r3, [pc, #40]	; (1e7fc <sd_mmc_start_read_blocks+0x54>)
   1e7d4:	2200      	movs	r2, #0
   1e7d6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e7d8:	2305      	movs	r3, #5
   1e7da:	e008      	b.n	1e7ee <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e7dc:	4b07      	ldr	r3, [pc, #28]	; (1e7fc <sd_mmc_start_read_blocks+0x54>)
   1e7de:	881a      	ldrh	r2, [r3, #0]
   1e7e0:	1cbb      	adds	r3, r7, #2
   1e7e2:	881b      	ldrh	r3, [r3, #0]
   1e7e4:	1ad3      	subs	r3, r2, r3
   1e7e6:	b29a      	uxth	r2, r3
   1e7e8:	4b04      	ldr	r3, [pc, #16]	; (1e7fc <sd_mmc_start_read_blocks+0x54>)
   1e7ea:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e7ec:	2300      	movs	r3, #0
}
   1e7ee:	0018      	movs	r0, r3
   1e7f0:	46bd      	mov	sp, r7
   1e7f2:	b002      	add	sp, #8
   1e7f4:	bd80      	pop	{r7, pc}
   1e7f6:	46c0      	nop			; (mov r8, r8)
   1e7f8:	0001f7e9 	.word	0x0001f7e9
   1e7fc:	200040c6 	.word	0x200040c6

0001e800 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1e800:	b580      	push	{r7, lr}
   1e802:	b082      	sub	sp, #8
   1e804:	af00      	add	r7, sp, #0
   1e806:	0002      	movs	r2, r0
   1e808:	1dfb      	adds	r3, r7, #7
   1e80a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1e80c:	4b1c      	ldr	r3, [pc, #112]	; (1e880 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1e80e:	4798      	blx	r3
   1e810:	0003      	movs	r3, r0
   1e812:	001a      	movs	r2, r3
   1e814:	2301      	movs	r3, #1
   1e816:	4053      	eors	r3, r2
   1e818:	b2db      	uxtb	r3, r3
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	d001      	beq.n	1e822 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e81e:	2305      	movs	r3, #5
   1e820:	e029      	b.n	1e876 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1e822:	1dfb      	adds	r3, r7, #7
   1e824:	781b      	ldrb	r3, [r3, #0]
   1e826:	2b00      	cmp	r3, #0
   1e828:	d003      	beq.n	1e832 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e82a:	4b16      	ldr	r3, [pc, #88]	; (1e884 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e82c:	2200      	movs	r2, #0
   1e82e:	801a      	strh	r2, [r3, #0]
   1e830:	e005      	b.n	1e83e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e832:	4b14      	ldr	r3, [pc, #80]	; (1e884 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e834:	881b      	ldrh	r3, [r3, #0]
   1e836:	2b00      	cmp	r3, #0
   1e838:	d001      	beq.n	1e83e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1e83a:	2300      	movs	r3, #0
   1e83c:	e01b      	b.n	1e876 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e83e:	4b12      	ldr	r3, [pc, #72]	; (1e888 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1e840:	881b      	ldrh	r3, [r3, #0]
   1e842:	2b01      	cmp	r3, #1
   1e844:	d103      	bne.n	1e84e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e846:	4b11      	ldr	r3, [pc, #68]	; (1e88c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e848:	4798      	blx	r3
		return SD_MMC_OK;
   1e84a:	2300      	movs	r3, #0
   1e84c:	e013      	b.n	1e876 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1e84e:	4b10      	ldr	r3, [pc, #64]	; (1e890 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e850:	2100      	movs	r1, #0
   1e852:	0018      	movs	r0, r3
   1e854:	4b0f      	ldr	r3, [pc, #60]	; (1e894 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e856:	4798      	blx	r3
   1e858:	0003      	movs	r3, r0
   1e85a:	001a      	movs	r2, r3
   1e85c:	2301      	movs	r3, #1
   1e85e:	4053      	eors	r3, r2
   1e860:	b2db      	uxtb	r3, r3
   1e862:	2b00      	cmp	r3, #0
   1e864:	d004      	beq.n	1e870 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1e866:	4b0a      	ldr	r3, [pc, #40]	; (1e890 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e868:	2100      	movs	r1, #0
   1e86a:	0018      	movs	r0, r3
   1e86c:	4b09      	ldr	r3, [pc, #36]	; (1e894 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e86e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1e870:	4b06      	ldr	r3, [pc, #24]	; (1e88c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e872:	4798      	blx	r3
	return SD_MMC_OK;
   1e874:	2300      	movs	r3, #0
}
   1e876:	0018      	movs	r0, r3
   1e878:	46bd      	mov	sp, r7
   1e87a:	b002      	add	sp, #8
   1e87c:	bd80      	pop	{r7, pc}
   1e87e:	46c0      	nop			; (mov r8, r8)
   1e880:	0001f88d 	.word	0x0001f88d
   1e884:	200040c6 	.word	0x200040c6
   1e888:	200040c4 	.word	0x200040c4
   1e88c:	0001e299 	.word	0x0001e299
   1e890:	0000310c 	.word	0x0000310c
   1e894:	0001f4f1 	.word	0x0001f4f1

0001e898 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e898:	b590      	push	{r4, r7, lr}
   1e89a:	b089      	sub	sp, #36	; 0x24
   1e89c:	af02      	add	r7, sp, #8
   1e89e:	6039      	str	r1, [r7, #0]
   1e8a0:	0011      	movs	r1, r2
   1e8a2:	1dfb      	adds	r3, r7, #7
   1e8a4:	1c02      	adds	r2, r0, #0
   1e8a6:	701a      	strb	r2, [r3, #0]
   1e8a8:	1d3b      	adds	r3, r7, #4
   1e8aa:	1c0a      	adds	r2, r1, #0
   1e8ac:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e8ae:	230f      	movs	r3, #15
   1e8b0:	18fc      	adds	r4, r7, r3
   1e8b2:	1dfb      	adds	r3, r7, #7
   1e8b4:	781b      	ldrb	r3, [r3, #0]
   1e8b6:	0018      	movs	r0, r3
   1e8b8:	4b28      	ldr	r3, [pc, #160]	; (1e95c <sd_mmc_init_write_blocks+0xc4>)
   1e8ba:	4798      	blx	r3
   1e8bc:	0003      	movs	r3, r0
   1e8be:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e8c0:	230f      	movs	r3, #15
   1e8c2:	18fb      	adds	r3, r7, r3
   1e8c4:	781b      	ldrb	r3, [r3, #0]
   1e8c6:	2b00      	cmp	r3, #0
   1e8c8:	d003      	beq.n	1e8d2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1e8ca:	230f      	movs	r3, #15
   1e8cc:	18fb      	adds	r3, r7, r3
   1e8ce:	781b      	ldrb	r3, [r3, #0]
   1e8d0:	e03f      	b.n	1e952 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1e8d2:	1dfb      	adds	r3, r7, #7
   1e8d4:	781b      	ldrb	r3, [r3, #0]
   1e8d6:	0018      	movs	r0, r3
   1e8d8:	4b21      	ldr	r3, [pc, #132]	; (1e960 <sd_mmc_init_write_blocks+0xc8>)
   1e8da:	4798      	blx	r3
   1e8dc:	1e03      	subs	r3, r0, #0
   1e8de:	d003      	beq.n	1e8e8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1e8e0:	4b20      	ldr	r3, [pc, #128]	; (1e964 <sd_mmc_init_write_blocks+0xcc>)
   1e8e2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1e8e4:	2307      	movs	r3, #7
   1e8e6:	e034      	b.n	1e952 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1e8e8:	1d3b      	adds	r3, r7, #4
   1e8ea:	881b      	ldrh	r3, [r3, #0]
   1e8ec:	2b01      	cmp	r3, #1
   1e8ee:	d902      	bls.n	1e8f6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1e8f0:	4b1d      	ldr	r3, [pc, #116]	; (1e968 <sd_mmc_init_write_blocks+0xd0>)
   1e8f2:	617b      	str	r3, [r7, #20]
   1e8f4:	e001      	b.n	1e8fa <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1e8f6:	4b1d      	ldr	r3, [pc, #116]	; (1e96c <sd_mmc_init_write_blocks+0xd4>)
   1e8f8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e8fa:	4b1d      	ldr	r3, [pc, #116]	; (1e970 <sd_mmc_init_write_blocks+0xd8>)
   1e8fc:	681b      	ldr	r3, [r3, #0]
   1e8fe:	7adb      	ldrb	r3, [r3, #11]
   1e900:	001a      	movs	r2, r3
   1e902:	2308      	movs	r3, #8
   1e904:	4013      	ands	r3, r2
   1e906:	d002      	beq.n	1e90e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1e908:	683b      	ldr	r3, [r7, #0]
   1e90a:	613b      	str	r3, [r7, #16]
   1e90c:	e002      	b.n	1e914 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e90e:	683b      	ldr	r3, [r7, #0]
   1e910:	025b      	lsls	r3, r3, #9
   1e912:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e914:	1d3b      	adds	r3, r7, #4
   1e916:	881c      	ldrh	r4, [r3, #0]
   1e918:	2380      	movs	r3, #128	; 0x80
   1e91a:	009a      	lsls	r2, r3, #2
   1e91c:	6939      	ldr	r1, [r7, #16]
   1e91e:	6978      	ldr	r0, [r7, #20]
   1e920:	2301      	movs	r3, #1
   1e922:	9300      	str	r3, [sp, #0]
   1e924:	0023      	movs	r3, r4
   1e926:	4c13      	ldr	r4, [pc, #76]	; (1e974 <sd_mmc_init_write_blocks+0xdc>)
   1e928:	47a0      	blx	r4
   1e92a:	0003      	movs	r3, r0
   1e92c:	001a      	movs	r2, r3
   1e92e:	2301      	movs	r3, #1
   1e930:	4053      	eors	r3, r2
   1e932:	b2db      	uxtb	r3, r3
   1e934:	2b00      	cmp	r3, #0
   1e936:	d003      	beq.n	1e940 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1e938:	4b0a      	ldr	r3, [pc, #40]	; (1e964 <sd_mmc_init_write_blocks+0xcc>)
   1e93a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e93c:	2305      	movs	r3, #5
   1e93e:	e008      	b.n	1e952 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e940:	4b0d      	ldr	r3, [pc, #52]	; (1e978 <sd_mmc_init_write_blocks+0xe0>)
   1e942:	1d3a      	adds	r2, r7, #4
   1e944:	8812      	ldrh	r2, [r2, #0]
   1e946:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e948:	4b0c      	ldr	r3, [pc, #48]	; (1e97c <sd_mmc_init_write_blocks+0xe4>)
   1e94a:	1d3a      	adds	r2, r7, #4
   1e94c:	8812      	ldrh	r2, [r2, #0]
   1e94e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e950:	2300      	movs	r3, #0
}
   1e952:	0018      	movs	r0, r3
   1e954:	46bd      	mov	sp, r7
   1e956:	b007      	add	sp, #28
   1e958:	bd90      	pop	{r4, r7, pc}
   1e95a:	46c0      	nop			; (mov r8, r8)
   1e95c:	0001e19d 	.word	0x0001e19d
   1e960:	0001e6a5 	.word	0x0001e6a5
   1e964:	0001e299 	.word	0x0001e299
   1e968:	00109119 	.word	0x00109119
   1e96c:	00089118 	.word	0x00089118
   1e970:	200040c0 	.word	0x200040c0
   1e974:	0001f519 	.word	0x0001f519
   1e978:	200040c6 	.word	0x200040c6
   1e97c:	200040c4 	.word	0x200040c4

0001e980 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e980:	b580      	push	{r7, lr}
   1e982:	b082      	sub	sp, #8
   1e984:	af00      	add	r7, sp, #0
   1e986:	6078      	str	r0, [r7, #4]
   1e988:	000a      	movs	r2, r1
   1e98a:	1cbb      	adds	r3, r7, #2
   1e98c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1e98e:	1cbb      	adds	r3, r7, #2
   1e990:	881a      	ldrh	r2, [r3, #0]
   1e992:	687b      	ldr	r3, [r7, #4]
   1e994:	0011      	movs	r1, r2
   1e996:	0018      	movs	r0, r3
   1e998:	4b0d      	ldr	r3, [pc, #52]	; (1e9d0 <sd_mmc_start_write_blocks+0x50>)
   1e99a:	4798      	blx	r3
   1e99c:	0003      	movs	r3, r0
   1e99e:	001a      	movs	r2, r3
   1e9a0:	2301      	movs	r3, #1
   1e9a2:	4053      	eors	r3, r2
   1e9a4:	b2db      	uxtb	r3, r3
   1e9a6:	2b00      	cmp	r3, #0
   1e9a8:	d004      	beq.n	1e9b4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e9aa:	4b0a      	ldr	r3, [pc, #40]	; (1e9d4 <sd_mmc_start_write_blocks+0x54>)
   1e9ac:	2200      	movs	r2, #0
   1e9ae:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e9b0:	2305      	movs	r3, #5
   1e9b2:	e008      	b.n	1e9c6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e9b4:	4b07      	ldr	r3, [pc, #28]	; (1e9d4 <sd_mmc_start_write_blocks+0x54>)
   1e9b6:	881a      	ldrh	r2, [r3, #0]
   1e9b8:	1cbb      	adds	r3, r7, #2
   1e9ba:	881b      	ldrh	r3, [r3, #0]
   1e9bc:	1ad3      	subs	r3, r2, r3
   1e9be:	b29a      	uxth	r2, r3
   1e9c0:	4b04      	ldr	r3, [pc, #16]	; (1e9d4 <sd_mmc_start_write_blocks+0x54>)
   1e9c2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e9c4:	2300      	movs	r3, #0
}
   1e9c6:	0018      	movs	r0, r3
   1e9c8:	46bd      	mov	sp, r7
   1e9ca:	b002      	add	sp, #8
   1e9cc:	bd80      	pop	{r7, pc}
   1e9ce:	46c0      	nop			; (mov r8, r8)
   1e9d0:	0001f899 	.word	0x0001f899
   1e9d4:	200040c6 	.word	0x200040c6

0001e9d8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1e9d8:	b580      	push	{r7, lr}
   1e9da:	b082      	sub	sp, #8
   1e9dc:	af00      	add	r7, sp, #0
   1e9de:	0002      	movs	r2, r0
   1e9e0:	1dfb      	adds	r3, r7, #7
   1e9e2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1e9e4:	4b13      	ldr	r3, [pc, #76]	; (1ea34 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1e9e6:	4798      	blx	r3
   1e9e8:	0003      	movs	r3, r0
   1e9ea:	001a      	movs	r2, r3
   1e9ec:	2301      	movs	r3, #1
   1e9ee:	4053      	eors	r3, r2
   1e9f0:	b2db      	uxtb	r3, r3
   1e9f2:	2b00      	cmp	r3, #0
   1e9f4:	d001      	beq.n	1e9fa <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e9f6:	2305      	movs	r3, #5
   1e9f8:	e018      	b.n	1ea2c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1e9fa:	1dfb      	adds	r3, r7, #7
   1e9fc:	781b      	ldrb	r3, [r3, #0]
   1e9fe:	2b00      	cmp	r3, #0
   1ea00:	d003      	beq.n	1ea0a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ea02:	4b0d      	ldr	r3, [pc, #52]	; (1ea38 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ea04:	2200      	movs	r2, #0
   1ea06:	801a      	strh	r2, [r3, #0]
   1ea08:	e005      	b.n	1ea16 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ea0a:	4b0b      	ldr	r3, [pc, #44]	; (1ea38 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ea0c:	881b      	ldrh	r3, [r3, #0]
   1ea0e:	2b00      	cmp	r3, #0
   1ea10:	d001      	beq.n	1ea16 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1ea12:	2300      	movs	r3, #0
   1ea14:	e00a      	b.n	1ea2c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ea16:	4b09      	ldr	r3, [pc, #36]	; (1ea3c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1ea18:	881b      	ldrh	r3, [r3, #0]
   1ea1a:	2b01      	cmp	r3, #1
   1ea1c:	d103      	bne.n	1ea26 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ea1e:	4b08      	ldr	r3, [pc, #32]	; (1ea40 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ea20:	4798      	blx	r3
		return SD_MMC_OK;
   1ea22:	2300      	movs	r3, #0
   1ea24:	e002      	b.n	1ea2c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1ea26:	4b06      	ldr	r3, [pc, #24]	; (1ea40 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ea28:	4798      	blx	r3
	return SD_MMC_OK;
   1ea2a:	2300      	movs	r3, #0
}
   1ea2c:	0018      	movs	r0, r3
   1ea2e:	46bd      	mov	sp, r7
   1ea30:	b002      	add	sp, #8
   1ea32:	bd80      	pop	{r7, pc}
   1ea34:	0001f959 	.word	0x0001f959
   1ea38:	200040c6 	.word	0x200040c6
   1ea3c:	200040c4 	.word	0x200040c4
   1ea40:	0001e299 	.word	0x0001e299

0001ea44 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1ea44:	b580      	push	{r7, lr}
   1ea46:	b082      	sub	sp, #8
   1ea48:	af00      	add	r7, sp, #0
   1ea4a:	0002      	movs	r2, r0
   1ea4c:	1dfb      	adds	r3, r7, #7
   1ea4e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1ea50:	1dfb      	adds	r3, r7, #7
   1ea52:	781b      	ldrb	r3, [r3, #0]
   1ea54:	0018      	movs	r0, r3
   1ea56:	4b16      	ldr	r3, [pc, #88]	; (1eab0 <sd_mmc_test_unit_ready+0x6c>)
   1ea58:	4798      	blx	r3
   1ea5a:	0003      	movs	r3, r0
   1ea5c:	2b01      	cmp	r3, #1
   1ea5e:	d019      	beq.n	1ea94 <sd_mmc_test_unit_ready+0x50>
   1ea60:	2b02      	cmp	r3, #2
   1ea62:	d019      	beq.n	1ea98 <sd_mmc_test_unit_ready+0x54>
   1ea64:	2b00      	cmp	r3, #0
   1ea66:	d11e      	bne.n	1eaa6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1ea68:	1dfb      	adds	r3, r7, #7
   1ea6a:	781b      	ldrb	r3, [r3, #0]
   1ea6c:	4a11      	ldr	r2, [pc, #68]	; (1eab4 <sd_mmc_test_unit_ready+0x70>)
   1ea6e:	5cd3      	ldrb	r3, [r2, r3]
   1ea70:	2b00      	cmp	r3, #0
   1ea72:	d001      	beq.n	1ea78 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1ea74:	2302      	movs	r3, #2
   1ea76:	e017      	b.n	1eaa8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1ea78:	1dfb      	adds	r3, r7, #7
   1ea7a:	781b      	ldrb	r3, [r3, #0]
   1ea7c:	0018      	movs	r0, r3
   1ea7e:	4b0e      	ldr	r3, [pc, #56]	; (1eab8 <sd_mmc_test_unit_ready+0x74>)
   1ea80:	4798      	blx	r3
   1ea82:	0003      	movs	r3, r0
   1ea84:	001a      	movs	r2, r3
   1ea86:	2303      	movs	r3, #3
   1ea88:	4013      	ands	r3, r2
   1ea8a:	d001      	beq.n	1ea90 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1ea8c:	2300      	movs	r3, #0
   1ea8e:	e00b      	b.n	1eaa8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1ea90:	2302      	movs	r3, #2
   1ea92:	e009      	b.n	1eaa8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1ea94:	2303      	movs	r3, #3
   1ea96:	e007      	b.n	1eaa8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1ea98:	1dfb      	adds	r3, r7, #7
   1ea9a:	781b      	ldrb	r3, [r3, #0]
   1ea9c:	4a05      	ldr	r2, [pc, #20]	; (1eab4 <sd_mmc_test_unit_ready+0x70>)
   1ea9e:	2100      	movs	r1, #0
   1eaa0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1eaa2:	2302      	movs	r3, #2
   1eaa4:	e000      	b.n	1eaa8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1eaa6:	2301      	movs	r3, #1
	}
}
   1eaa8:	0018      	movs	r0, r3
   1eaaa:	46bd      	mov	sp, r7
   1eaac:	b002      	add	sp, #8
   1eaae:	bd80      	pop	{r7, pc}
   1eab0:	0001e5b9 	.word	0x0001e5b9
   1eab4:	200040c8 	.word	0x200040c8
   1eab8:	0001e62d 	.word	0x0001e62d

0001eabc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1eabc:	b580      	push	{r7, lr}
   1eabe:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1eac0:	2000      	movs	r0, #0
   1eac2:	4b03      	ldr	r3, [pc, #12]	; (1ead0 <sd_mmc_test_unit_ready_0+0x14>)
   1eac4:	4798      	blx	r3
   1eac6:	0003      	movs	r3, r0
}
   1eac8:	0018      	movs	r0, r3
   1eaca:	46bd      	mov	sp, r7
   1eacc:	bd80      	pop	{r7, pc}
   1eace:	46c0      	nop			; (mov r8, r8)
   1ead0:	0001ea45 	.word	0x0001ea45

0001ead4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ead4:	b580      	push	{r7, lr}
   1ead6:	b082      	sub	sp, #8
   1ead8:	af00      	add	r7, sp, #0
   1eada:	0002      	movs	r2, r0
   1eadc:	6039      	str	r1, [r7, #0]
   1eade:	1dfb      	adds	r3, r7, #7
   1eae0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1eae2:	1dfb      	adds	r3, r7, #7
   1eae4:	781b      	ldrb	r3, [r3, #0]
   1eae6:	0018      	movs	r0, r3
   1eae8:	4b08      	ldr	r3, [pc, #32]	; (1eb0c <sd_mmc_read_capacity+0x38>)
   1eaea:	4798      	blx	r3
   1eaec:	0003      	movs	r3, r0
   1eaee:	005b      	lsls	r3, r3, #1
   1eaf0:	1e5a      	subs	r2, r3, #1
   1eaf2:	683b      	ldr	r3, [r7, #0]
   1eaf4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1eaf6:	1dfb      	adds	r3, r7, #7
   1eaf8:	781b      	ldrb	r3, [r3, #0]
   1eafa:	0018      	movs	r0, r3
   1eafc:	4b04      	ldr	r3, [pc, #16]	; (1eb10 <sd_mmc_read_capacity+0x3c>)
   1eafe:	4798      	blx	r3
   1eb00:	0003      	movs	r3, r0
}
   1eb02:	0018      	movs	r0, r3
   1eb04:	46bd      	mov	sp, r7
   1eb06:	b002      	add	sp, #8
   1eb08:	bd80      	pop	{r7, pc}
   1eb0a:	46c0      	nop			; (mov r8, r8)
   1eb0c:	0001e669 	.word	0x0001e669
   1eb10:	0001ea45 	.word	0x0001ea45

0001eb14 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1eb14:	b580      	push	{r7, lr}
   1eb16:	b082      	sub	sp, #8
   1eb18:	af00      	add	r7, sp, #0
   1eb1a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1eb1c:	687b      	ldr	r3, [r7, #4]
   1eb1e:	0019      	movs	r1, r3
   1eb20:	2000      	movs	r0, #0
   1eb22:	4b03      	ldr	r3, [pc, #12]	; (1eb30 <sd_mmc_read_capacity_0+0x1c>)
   1eb24:	4798      	blx	r3
   1eb26:	0003      	movs	r3, r0
}
   1eb28:	0018      	movs	r0, r3
   1eb2a:	46bd      	mov	sp, r7
   1eb2c:	b002      	add	sp, #8
   1eb2e:	bd80      	pop	{r7, pc}
   1eb30:	0001ead5 	.word	0x0001ead5

0001eb34 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1eb34:	b580      	push	{r7, lr}
   1eb36:	b082      	sub	sp, #8
   1eb38:	af00      	add	r7, sp, #0
   1eb3a:	0002      	movs	r2, r0
   1eb3c:	1dfb      	adds	r3, r7, #7
   1eb3e:	701a      	strb	r2, [r3, #0]
   1eb40:	1dbb      	adds	r3, r7, #6
   1eb42:	1c0a      	adds	r2, r1, #0
   1eb44:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1eb46:	1dfb      	adds	r3, r7, #7
   1eb48:	781b      	ldrb	r3, [r3, #0]
   1eb4a:	4a04      	ldr	r2, [pc, #16]	; (1eb5c <sd_mmc_unload+0x28>)
   1eb4c:	1db9      	adds	r1, r7, #6
   1eb4e:	7809      	ldrb	r1, [r1, #0]
   1eb50:	54d1      	strb	r1, [r2, r3]
	return true;
   1eb52:	2301      	movs	r3, #1
}
   1eb54:	0018      	movs	r0, r3
   1eb56:	46bd      	mov	sp, r7
   1eb58:	b002      	add	sp, #8
   1eb5a:	bd80      	pop	{r7, pc}
   1eb5c:	200040c8 	.word	0x200040c8

0001eb60 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1eb60:	b580      	push	{r7, lr}
   1eb62:	b082      	sub	sp, #8
   1eb64:	af00      	add	r7, sp, #0
   1eb66:	0002      	movs	r2, r0
   1eb68:	1dfb      	adds	r3, r7, #7
   1eb6a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1eb6c:	1dfb      	adds	r3, r7, #7
   1eb6e:	781b      	ldrb	r3, [r3, #0]
   1eb70:	0019      	movs	r1, r3
   1eb72:	2000      	movs	r0, #0
   1eb74:	4b03      	ldr	r3, [pc, #12]	; (1eb84 <sd_mmc_unload_0+0x24>)
   1eb76:	4798      	blx	r3
   1eb78:	0003      	movs	r3, r0
}
   1eb7a:	0018      	movs	r0, r3
   1eb7c:	46bd      	mov	sp, r7
   1eb7e:	b002      	add	sp, #8
   1eb80:	bd80      	pop	{r7, pc}
   1eb82:	46c0      	nop			; (mov r8, r8)
   1eb84:	0001eb35 	.word	0x0001eb35

0001eb88 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1eb88:	b580      	push	{r7, lr}
   1eb8a:	b082      	sub	sp, #8
   1eb8c:	af00      	add	r7, sp, #0
   1eb8e:	0002      	movs	r2, r0
   1eb90:	1dfb      	adds	r3, r7, #7
   1eb92:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1eb94:	1dfb      	adds	r3, r7, #7
   1eb96:	781b      	ldrb	r3, [r3, #0]
   1eb98:	0018      	movs	r0, r3
   1eb9a:	4b03      	ldr	r3, [pc, #12]	; (1eba8 <sd_mmc_wr_protect+0x20>)
   1eb9c:	4798      	blx	r3
   1eb9e:	0003      	movs	r3, r0
}
   1eba0:	0018      	movs	r0, r3
   1eba2:	46bd      	mov	sp, r7
   1eba4:	b002      	add	sp, #8
   1eba6:	bd80      	pop	{r7, pc}
   1eba8:	0001e6a5 	.word	0x0001e6a5

0001ebac <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1ebac:	b580      	push	{r7, lr}
   1ebae:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1ebb0:	2000      	movs	r0, #0
   1ebb2:	4b03      	ldr	r3, [pc, #12]	; (1ebc0 <sd_mmc_wr_protect_0+0x14>)
   1ebb4:	4798      	blx	r3
   1ebb6:	0003      	movs	r3, r0
}
   1ebb8:	0018      	movs	r0, r3
   1ebba:	46bd      	mov	sp, r7
   1ebbc:	bd80      	pop	{r7, pc}
   1ebbe:	46c0      	nop			; (mov r8, r8)
   1ebc0:	0001eb89 	.word	0x0001eb89

0001ebc4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1ebc4:	b580      	push	{r7, lr}
   1ebc6:	b082      	sub	sp, #8
   1ebc8:	af00      	add	r7, sp, #0
   1ebca:	0002      	movs	r2, r0
   1ebcc:	1dfb      	adds	r3, r7, #7
   1ebce:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1ebd0:	2301      	movs	r3, #1
}
   1ebd2:	0018      	movs	r0, r3
   1ebd4:	46bd      	mov	sp, r7
   1ebd6:	b002      	add	sp, #8
   1ebd8:	bd80      	pop	{r7, pc}
	...

0001ebdc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1ebdc:	b580      	push	{r7, lr}
   1ebde:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1ebe0:	2000      	movs	r0, #0
   1ebe2:	4b03      	ldr	r3, [pc, #12]	; (1ebf0 <sd_mmc_removal_0+0x14>)
   1ebe4:	4798      	blx	r3
   1ebe6:	0003      	movs	r3, r0
}
   1ebe8:	0018      	movs	r0, r3
   1ebea:	46bd      	mov	sp, r7
   1ebec:	bd80      	pop	{r7, pc}
   1ebee:	46c0      	nop			; (mov r8, r8)
   1ebf0:	0001ebc5 	.word	0x0001ebc5

0001ebf4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1ebf4:	b580      	push	{r7, lr}
   1ebf6:	b084      	sub	sp, #16
   1ebf8:	af00      	add	r7, sp, #0
   1ebfa:	60b9      	str	r1, [r7, #8]
   1ebfc:	607a      	str	r2, [r7, #4]
   1ebfe:	230f      	movs	r3, #15
   1ec00:	18fb      	adds	r3, r7, r3
   1ec02:	1c02      	adds	r2, r0, #0
   1ec04:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1ec06:	68b9      	ldr	r1, [r7, #8]
   1ec08:	230f      	movs	r3, #15
   1ec0a:	18fb      	adds	r3, r7, r3
   1ec0c:	781b      	ldrb	r3, [r3, #0]
   1ec0e:	2201      	movs	r2, #1
   1ec10:	0018      	movs	r0, r3
   1ec12:	4b10      	ldr	r3, [pc, #64]	; (1ec54 <sd_mmc_mem_2_ram+0x60>)
   1ec14:	4798      	blx	r3
   1ec16:	1e03      	subs	r3, r0, #0
   1ec18:	d005      	beq.n	1ec26 <sd_mmc_mem_2_ram+0x32>
   1ec1a:	2b02      	cmp	r3, #2
   1ec1c:	d101      	bne.n	1ec22 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1ec1e:	2302      	movs	r3, #2
   1ec20:	e013      	b.n	1ec4a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1ec22:	2301      	movs	r3, #1
   1ec24:	e011      	b.n	1ec4a <sd_mmc_mem_2_ram+0x56>
		break;
   1ec26:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1ec28:	687b      	ldr	r3, [r7, #4]
   1ec2a:	2101      	movs	r1, #1
   1ec2c:	0018      	movs	r0, r3
   1ec2e:	4b0a      	ldr	r3, [pc, #40]	; (1ec58 <sd_mmc_mem_2_ram+0x64>)
   1ec30:	4798      	blx	r3
   1ec32:	1e03      	subs	r3, r0, #0
   1ec34:	d001      	beq.n	1ec3a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1ec36:	2301      	movs	r3, #1
   1ec38:	e007      	b.n	1ec4a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1ec3a:	2000      	movs	r0, #0
   1ec3c:	4b07      	ldr	r3, [pc, #28]	; (1ec5c <sd_mmc_mem_2_ram+0x68>)
   1ec3e:	4798      	blx	r3
   1ec40:	1e03      	subs	r3, r0, #0
   1ec42:	d001      	beq.n	1ec48 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1ec44:	2301      	movs	r3, #1
   1ec46:	e000      	b.n	1ec4a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1ec48:	2300      	movs	r3, #0
}
   1ec4a:	0018      	movs	r0, r3
   1ec4c:	46bd      	mov	sp, r7
   1ec4e:	b004      	add	sp, #16
   1ec50:	bd80      	pop	{r7, pc}
   1ec52:	46c0      	nop			; (mov r8, r8)
   1ec54:	0001e6bd 	.word	0x0001e6bd
   1ec58:	0001e7a9 	.word	0x0001e7a9
   1ec5c:	0001e801 	.word	0x0001e801

0001ec60 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1ec60:	b580      	push	{r7, lr}
   1ec62:	b082      	sub	sp, #8
   1ec64:	af00      	add	r7, sp, #0
   1ec66:	6078      	str	r0, [r7, #4]
   1ec68:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1ec6a:	683a      	ldr	r2, [r7, #0]
   1ec6c:	687b      	ldr	r3, [r7, #4]
   1ec6e:	0019      	movs	r1, r3
   1ec70:	2000      	movs	r0, #0
   1ec72:	4b03      	ldr	r3, [pc, #12]	; (1ec80 <sd_mmc_mem_2_ram_0+0x20>)
   1ec74:	4798      	blx	r3
   1ec76:	0003      	movs	r3, r0
}
   1ec78:	0018      	movs	r0, r3
   1ec7a:	46bd      	mov	sp, r7
   1ec7c:	b002      	add	sp, #8
   1ec7e:	bd80      	pop	{r7, pc}
   1ec80:	0001ebf5 	.word	0x0001ebf5

0001ec84 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1ec84:	b580      	push	{r7, lr}
   1ec86:	b084      	sub	sp, #16
   1ec88:	af00      	add	r7, sp, #0
   1ec8a:	60b9      	str	r1, [r7, #8]
   1ec8c:	607a      	str	r2, [r7, #4]
   1ec8e:	230f      	movs	r3, #15
   1ec90:	18fb      	adds	r3, r7, r3
   1ec92:	1c02      	adds	r2, r0, #0
   1ec94:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1ec96:	68b9      	ldr	r1, [r7, #8]
   1ec98:	230f      	movs	r3, #15
   1ec9a:	18fb      	adds	r3, r7, r3
   1ec9c:	781b      	ldrb	r3, [r3, #0]
   1ec9e:	2201      	movs	r2, #1
   1eca0:	0018      	movs	r0, r3
   1eca2:	4b10      	ldr	r3, [pc, #64]	; (1ece4 <sd_mmc_ram_2_mem+0x60>)
   1eca4:	4798      	blx	r3
   1eca6:	1e03      	subs	r3, r0, #0
   1eca8:	d005      	beq.n	1ecb6 <sd_mmc_ram_2_mem+0x32>
   1ecaa:	2b02      	cmp	r3, #2
   1ecac:	d101      	bne.n	1ecb2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1ecae:	2302      	movs	r3, #2
   1ecb0:	e013      	b.n	1ecda <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1ecb2:	2301      	movs	r3, #1
   1ecb4:	e011      	b.n	1ecda <sd_mmc_ram_2_mem+0x56>
		break;
   1ecb6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1ecb8:	687b      	ldr	r3, [r7, #4]
   1ecba:	2101      	movs	r1, #1
   1ecbc:	0018      	movs	r0, r3
   1ecbe:	4b0a      	ldr	r3, [pc, #40]	; (1ece8 <sd_mmc_ram_2_mem+0x64>)
   1ecc0:	4798      	blx	r3
   1ecc2:	1e03      	subs	r3, r0, #0
   1ecc4:	d001      	beq.n	1ecca <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1ecc6:	2301      	movs	r3, #1
   1ecc8:	e007      	b.n	1ecda <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1ecca:	2000      	movs	r0, #0
   1eccc:	4b07      	ldr	r3, [pc, #28]	; (1ecec <sd_mmc_ram_2_mem+0x68>)
   1ecce:	4798      	blx	r3
   1ecd0:	1e03      	subs	r3, r0, #0
   1ecd2:	d001      	beq.n	1ecd8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1ecd4:	2301      	movs	r3, #1
   1ecd6:	e000      	b.n	1ecda <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1ecd8:	2300      	movs	r3, #0
}
   1ecda:	0018      	movs	r0, r3
   1ecdc:	46bd      	mov	sp, r7
   1ecde:	b004      	add	sp, #16
   1ece0:	bd80      	pop	{r7, pc}
   1ece2:	46c0      	nop			; (mov r8, r8)
   1ece4:	0001e899 	.word	0x0001e899
   1ece8:	0001e981 	.word	0x0001e981
   1ecec:	0001e9d9 	.word	0x0001e9d9

0001ecf0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1ecf0:	b580      	push	{r7, lr}
   1ecf2:	b082      	sub	sp, #8
   1ecf4:	af00      	add	r7, sp, #0
   1ecf6:	6078      	str	r0, [r7, #4]
   1ecf8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1ecfa:	683a      	ldr	r2, [r7, #0]
   1ecfc:	687b      	ldr	r3, [r7, #4]
   1ecfe:	0019      	movs	r1, r3
   1ed00:	2000      	movs	r0, #0
   1ed02:	4b03      	ldr	r3, [pc, #12]	; (1ed10 <sd_mmc_ram_2_mem_0+0x20>)
   1ed04:	4798      	blx	r3
   1ed06:	0003      	movs	r3, r0
}
   1ed08:	0018      	movs	r0, r3
   1ed0a:	46bd      	mov	sp, r7
   1ed0c:	b002      	add	sp, #8
   1ed0e:	bd80      	pop	{r7, pc}
   1ed10:	0001ec85 	.word	0x0001ec85

0001ed14 <system_pinmux_get_group_from_gpio_pin>:
{
   1ed14:	b580      	push	{r7, lr}
   1ed16:	b084      	sub	sp, #16
   1ed18:	af00      	add	r7, sp, #0
   1ed1a:	0002      	movs	r2, r0
   1ed1c:	1dfb      	adds	r3, r7, #7
   1ed1e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ed20:	230f      	movs	r3, #15
   1ed22:	18fb      	adds	r3, r7, r3
   1ed24:	1dfa      	adds	r2, r7, #7
   1ed26:	7812      	ldrb	r2, [r2, #0]
   1ed28:	09d2      	lsrs	r2, r2, #7
   1ed2a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ed2c:	230e      	movs	r3, #14
   1ed2e:	18fb      	adds	r3, r7, r3
   1ed30:	1dfa      	adds	r2, r7, #7
   1ed32:	7812      	ldrb	r2, [r2, #0]
   1ed34:	0952      	lsrs	r2, r2, #5
   1ed36:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ed38:	4b0d      	ldr	r3, [pc, #52]	; (1ed70 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ed3a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1ed3c:	230f      	movs	r3, #15
   1ed3e:	18fb      	adds	r3, r7, r3
   1ed40:	781b      	ldrb	r3, [r3, #0]
   1ed42:	2b00      	cmp	r3, #0
   1ed44:	d10f      	bne.n	1ed66 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ed46:	230f      	movs	r3, #15
   1ed48:	18fb      	adds	r3, r7, r3
   1ed4a:	781b      	ldrb	r3, [r3, #0]
   1ed4c:	009b      	lsls	r3, r3, #2
   1ed4e:	2210      	movs	r2, #16
   1ed50:	4694      	mov	ip, r2
   1ed52:	44bc      	add	ip, r7
   1ed54:	4463      	add	r3, ip
   1ed56:	3b08      	subs	r3, #8
   1ed58:	681a      	ldr	r2, [r3, #0]
   1ed5a:	230e      	movs	r3, #14
   1ed5c:	18fb      	adds	r3, r7, r3
   1ed5e:	781b      	ldrb	r3, [r3, #0]
   1ed60:	01db      	lsls	r3, r3, #7
   1ed62:	18d3      	adds	r3, r2, r3
   1ed64:	e000      	b.n	1ed68 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1ed66:	2300      	movs	r3, #0
}
   1ed68:	0018      	movs	r0, r3
   1ed6a:	46bd      	mov	sp, r7
   1ed6c:	b004      	add	sp, #16
   1ed6e:	bd80      	pop	{r7, pc}
   1ed70:	41004400 	.word	0x41004400

0001ed74 <system_interrupt_enable>:
{
   1ed74:	b580      	push	{r7, lr}
   1ed76:	b082      	sub	sp, #8
   1ed78:	af00      	add	r7, sp, #0
   1ed7a:	0002      	movs	r2, r0
   1ed7c:	1dfb      	adds	r3, r7, #7
   1ed7e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ed80:	4b06      	ldr	r3, [pc, #24]	; (1ed9c <system_interrupt_enable+0x28>)
   1ed82:	1dfa      	adds	r2, r7, #7
   1ed84:	7812      	ldrb	r2, [r2, #0]
   1ed86:	0011      	movs	r1, r2
   1ed88:	221f      	movs	r2, #31
   1ed8a:	400a      	ands	r2, r1
   1ed8c:	2101      	movs	r1, #1
   1ed8e:	4091      	lsls	r1, r2
   1ed90:	000a      	movs	r2, r1
   1ed92:	601a      	str	r2, [r3, #0]
}
   1ed94:	46c0      	nop			; (mov r8, r8)
   1ed96:	46bd      	mov	sp, r7
   1ed98:	b002      	add	sp, #8
   1ed9a:	bd80      	pop	{r7, pc}
   1ed9c:	e000e100 	.word	0xe000e100

0001eda0 <port_get_group_from_gpio_pin>:
{
   1eda0:	b580      	push	{r7, lr}
   1eda2:	b082      	sub	sp, #8
   1eda4:	af00      	add	r7, sp, #0
   1eda6:	0002      	movs	r2, r0
   1eda8:	1dfb      	adds	r3, r7, #7
   1edaa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1edac:	1dfb      	adds	r3, r7, #7
   1edae:	781b      	ldrb	r3, [r3, #0]
   1edb0:	0018      	movs	r0, r3
   1edb2:	4b03      	ldr	r3, [pc, #12]	; (1edc0 <port_get_group_from_gpio_pin+0x20>)
   1edb4:	4798      	blx	r3
   1edb6:	0003      	movs	r3, r0
}
   1edb8:	0018      	movs	r0, r3
   1edba:	46bd      	mov	sp, r7
   1edbc:	b002      	add	sp, #8
   1edbe:	bd80      	pop	{r7, pc}
   1edc0:	0001ed15 	.word	0x0001ed15

0001edc4 <port_get_config_defaults>:
{
   1edc4:	b580      	push	{r7, lr}
   1edc6:	b082      	sub	sp, #8
   1edc8:	af00      	add	r7, sp, #0
   1edca:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1edcc:	687b      	ldr	r3, [r7, #4]
   1edce:	2200      	movs	r2, #0
   1edd0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1edd2:	687b      	ldr	r3, [r7, #4]
   1edd4:	2201      	movs	r2, #1
   1edd6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1edd8:	687b      	ldr	r3, [r7, #4]
   1edda:	2200      	movs	r2, #0
   1eddc:	709a      	strb	r2, [r3, #2]
}
   1edde:	46c0      	nop			; (mov r8, r8)
   1ede0:	46bd      	mov	sp, r7
   1ede2:	b002      	add	sp, #8
   1ede4:	bd80      	pop	{r7, pc}
	...

0001ede8 <port_pin_set_output_level>:
{
   1ede8:	b580      	push	{r7, lr}
   1edea:	b084      	sub	sp, #16
   1edec:	af00      	add	r7, sp, #0
   1edee:	0002      	movs	r2, r0
   1edf0:	1dfb      	adds	r3, r7, #7
   1edf2:	701a      	strb	r2, [r3, #0]
   1edf4:	1dbb      	adds	r3, r7, #6
   1edf6:	1c0a      	adds	r2, r1, #0
   1edf8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1edfa:	1dfb      	adds	r3, r7, #7
   1edfc:	781b      	ldrb	r3, [r3, #0]
   1edfe:	0018      	movs	r0, r3
   1ee00:	4b0d      	ldr	r3, [pc, #52]	; (1ee38 <port_pin_set_output_level+0x50>)
   1ee02:	4798      	blx	r3
   1ee04:	0003      	movs	r3, r0
   1ee06:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ee08:	1dfb      	adds	r3, r7, #7
   1ee0a:	781b      	ldrb	r3, [r3, #0]
   1ee0c:	221f      	movs	r2, #31
   1ee0e:	4013      	ands	r3, r2
   1ee10:	2201      	movs	r2, #1
   1ee12:	409a      	lsls	r2, r3
   1ee14:	0013      	movs	r3, r2
   1ee16:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ee18:	1dbb      	adds	r3, r7, #6
   1ee1a:	781b      	ldrb	r3, [r3, #0]
   1ee1c:	2b00      	cmp	r3, #0
   1ee1e:	d003      	beq.n	1ee28 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ee20:	68fb      	ldr	r3, [r7, #12]
   1ee22:	68ba      	ldr	r2, [r7, #8]
   1ee24:	619a      	str	r2, [r3, #24]
}
   1ee26:	e002      	b.n	1ee2e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ee28:	68fb      	ldr	r3, [r7, #12]
   1ee2a:	68ba      	ldr	r2, [r7, #8]
   1ee2c:	615a      	str	r2, [r3, #20]
}
   1ee2e:	46c0      	nop			; (mov r8, r8)
   1ee30:	46bd      	mov	sp, r7
   1ee32:	b004      	add	sp, #16
   1ee34:	bd80      	pop	{r7, pc}
   1ee36:	46c0      	nop			; (mov r8, r8)
   1ee38:	0001eda1 	.word	0x0001eda1

0001ee3c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1ee3c:	b580      	push	{r7, lr}
   1ee3e:	b084      	sub	sp, #16
   1ee40:	af00      	add	r7, sp, #0
   1ee42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ee44:	687b      	ldr	r3, [r7, #4]
   1ee46:	681b      	ldr	r3, [r3, #0]
   1ee48:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1ee4a:	68fb      	ldr	r3, [r7, #12]
   1ee4c:	69db      	ldr	r3, [r3, #28]
   1ee4e:	1e5a      	subs	r2, r3, #1
   1ee50:	4193      	sbcs	r3, r2
   1ee52:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1ee54:	0018      	movs	r0, r3
   1ee56:	46bd      	mov	sp, r7
   1ee58:	b004      	add	sp, #16
   1ee5a:	bd80      	pop	{r7, pc}

0001ee5c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1ee5c:	b580      	push	{r7, lr}
   1ee5e:	b082      	sub	sp, #8
   1ee60:	af00      	add	r7, sp, #0
   1ee62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1ee64:	687b      	ldr	r3, [r7, #4]
   1ee66:	2201      	movs	r2, #1
   1ee68:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1ee6a:	687b      	ldr	r3, [r7, #4]
   1ee6c:	2200      	movs	r2, #0
   1ee6e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1ee70:	687b      	ldr	r3, [r7, #4]
   1ee72:	2200      	movs	r2, #0
   1ee74:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1ee76:	687b      	ldr	r3, [r7, #4]
   1ee78:	22c0      	movs	r2, #192	; 0xc0
   1ee7a:	0392      	lsls	r2, r2, #14
   1ee7c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1ee7e:	687b      	ldr	r3, [r7, #4]
   1ee80:	2200      	movs	r2, #0
   1ee82:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1ee84:	687b      	ldr	r3, [r7, #4]
   1ee86:	2200      	movs	r2, #0
   1ee88:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1ee8a:	687b      	ldr	r3, [r7, #4]
   1ee8c:	2201      	movs	r2, #1
   1ee8e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1ee90:	687b      	ldr	r3, [r7, #4]
   1ee92:	2201      	movs	r2, #1
   1ee94:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1ee96:	687b      	ldr	r3, [r7, #4]
   1ee98:	2200      	movs	r2, #0
   1ee9a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1ee9c:	687b      	ldr	r3, [r7, #4]
   1ee9e:	2224      	movs	r2, #36	; 0x24
   1eea0:	2100      	movs	r1, #0
   1eea2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1eea4:	687b      	ldr	r3, [r7, #4]
   1eea6:	3318      	adds	r3, #24
   1eea8:	220c      	movs	r2, #12
   1eeaa:	2100      	movs	r1, #0
   1eeac:	0018      	movs	r0, r3
   1eeae:	4b0a      	ldr	r3, [pc, #40]	; (1eed8 <spi_get_config_defaults+0x7c>)
   1eeb0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1eeb2:	687b      	ldr	r3, [r7, #4]
   1eeb4:	4a09      	ldr	r2, [pc, #36]	; (1eedc <spi_get_config_defaults+0x80>)
   1eeb6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1eeb8:	687b      	ldr	r3, [r7, #4]
   1eeba:	2200      	movs	r2, #0
   1eebc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1eebe:	687b      	ldr	r3, [r7, #4]
   1eec0:	2200      	movs	r2, #0
   1eec2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1eec4:	687b      	ldr	r3, [r7, #4]
   1eec6:	2200      	movs	r2, #0
   1eec8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1eeca:	687b      	ldr	r3, [r7, #4]
   1eecc:	2200      	movs	r2, #0
   1eece:	635a      	str	r2, [r3, #52]	; 0x34

};
   1eed0:	46c0      	nop			; (mov r8, r8)
   1eed2:	46bd      	mov	sp, r7
   1eed4:	b002      	add	sp, #8
   1eed6:	bd80      	pop	{r7, pc}
   1eed8:	00034317 	.word	0x00034317
   1eedc:	000186a0 	.word	0x000186a0

0001eee0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1eee0:	b580      	push	{r7, lr}
   1eee2:	b082      	sub	sp, #8
   1eee4:	af00      	add	r7, sp, #0
   1eee6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1eee8:	687b      	ldr	r3, [r7, #4]
   1eeea:	220a      	movs	r2, #10
   1eeec:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1eeee:	687b      	ldr	r3, [r7, #4]
   1eef0:	2200      	movs	r2, #0
   1eef2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1eef4:	687b      	ldr	r3, [r7, #4]
   1eef6:	2200      	movs	r2, #0
   1eef8:	709a      	strb	r2, [r3, #2]
}
   1eefa:	46c0      	nop			; (mov r8, r8)
   1eefc:	46bd      	mov	sp, r7
   1eefe:	b002      	add	sp, #8
   1ef00:	bd80      	pop	{r7, pc}
	...

0001ef04 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1ef04:	b580      	push	{r7, lr}
   1ef06:	b084      	sub	sp, #16
   1ef08:	af00      	add	r7, sp, #0
   1ef0a:	6078      	str	r0, [r7, #4]
   1ef0c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1ef0e:	683b      	ldr	r3, [r7, #0]
   1ef10:	781a      	ldrb	r2, [r3, #0]
   1ef12:	687b      	ldr	r3, [r7, #4]
   1ef14:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1ef16:	683b      	ldr	r3, [r7, #0]
   1ef18:	785a      	ldrb	r2, [r3, #1]
   1ef1a:	687b      	ldr	r3, [r7, #4]
   1ef1c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1ef1e:	683b      	ldr	r3, [r7, #0]
   1ef20:	789a      	ldrb	r2, [r3, #2]
   1ef22:	687b      	ldr	r3, [r7, #4]
   1ef24:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ef26:	230c      	movs	r3, #12
   1ef28:	18fb      	adds	r3, r7, r3
   1ef2a:	0018      	movs	r0, r3
   1ef2c:	4b0b      	ldr	r3, [pc, #44]	; (1ef5c <spi_attach_slave+0x58>)
   1ef2e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1ef30:	230c      	movs	r3, #12
   1ef32:	18fb      	adds	r3, r7, r3
   1ef34:	2201      	movs	r2, #1
   1ef36:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1ef38:	687b      	ldr	r3, [r7, #4]
   1ef3a:	781b      	ldrb	r3, [r3, #0]
   1ef3c:	220c      	movs	r2, #12
   1ef3e:	18ba      	adds	r2, r7, r2
   1ef40:	0011      	movs	r1, r2
   1ef42:	0018      	movs	r0, r3
   1ef44:	4b06      	ldr	r3, [pc, #24]	; (1ef60 <spi_attach_slave+0x5c>)
   1ef46:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1ef48:	687b      	ldr	r3, [r7, #4]
   1ef4a:	781b      	ldrb	r3, [r3, #0]
   1ef4c:	2101      	movs	r1, #1
   1ef4e:	0018      	movs	r0, r3
   1ef50:	4b04      	ldr	r3, [pc, #16]	; (1ef64 <spi_attach_slave+0x60>)
   1ef52:	4798      	blx	r3
}
   1ef54:	46c0      	nop			; (mov r8, r8)
   1ef56:	46bd      	mov	sp, r7
   1ef58:	b004      	add	sp, #16
   1ef5a:	bd80      	pop	{r7, pc}
   1ef5c:	0001edc5 	.word	0x0001edc5
   1ef60:	000262a9 	.word	0x000262a9
   1ef64:	0001ede9 	.word	0x0001ede9

0001ef68 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1ef68:	b580      	push	{r7, lr}
   1ef6a:	b084      	sub	sp, #16
   1ef6c:	af00      	add	r7, sp, #0
   1ef6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ef70:	687b      	ldr	r3, [r7, #4]
   1ef72:	681b      	ldr	r3, [r3, #0]
   1ef74:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1ef76:	687b      	ldr	r3, [r7, #4]
   1ef78:	681b      	ldr	r3, [r3, #0]
   1ef7a:	0018      	movs	r0, r3
   1ef7c:	4b0b      	ldr	r3, [pc, #44]	; (1efac <spi_enable+0x44>)
   1ef7e:	4798      	blx	r3
   1ef80:	0003      	movs	r3, r0
   1ef82:	0018      	movs	r0, r3
   1ef84:	4b0a      	ldr	r3, [pc, #40]	; (1efb0 <spi_enable+0x48>)
   1ef86:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1ef88:	46c0      	nop			; (mov r8, r8)
   1ef8a:	687b      	ldr	r3, [r7, #4]
   1ef8c:	0018      	movs	r0, r3
   1ef8e:	4b09      	ldr	r3, [pc, #36]	; (1efb4 <spi_enable+0x4c>)
   1ef90:	4798      	blx	r3
   1ef92:	1e03      	subs	r3, r0, #0
   1ef94:	d1f9      	bne.n	1ef8a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1ef96:	68fb      	ldr	r3, [r7, #12]
   1ef98:	681b      	ldr	r3, [r3, #0]
   1ef9a:	2202      	movs	r2, #2
   1ef9c:	431a      	orrs	r2, r3
   1ef9e:	68fb      	ldr	r3, [r7, #12]
   1efa0:	601a      	str	r2, [r3, #0]
}
   1efa2:	46c0      	nop			; (mov r8, r8)
   1efa4:	46bd      	mov	sp, r7
   1efa6:	b004      	add	sp, #16
   1efa8:	bd80      	pop	{r7, pc}
   1efaa:	46c0      	nop			; (mov r8, r8)
   1efac:	00026f79 	.word	0x00026f79
   1efb0:	0001ed75 	.word	0x0001ed75
   1efb4:	0001ee3d 	.word	0x0001ee3d

0001efb8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1efb8:	b580      	push	{r7, lr}
   1efba:	b084      	sub	sp, #16
   1efbc:	af00      	add	r7, sp, #0
   1efbe:	6078      	str	r0, [r7, #4]
   1efc0:	000a      	movs	r2, r1
   1efc2:	1cfb      	adds	r3, r7, #3
   1efc4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1efc6:	230f      	movs	r3, #15
   1efc8:	18fb      	adds	r3, r7, r3
   1efca:	2200      	movs	r2, #0
   1efcc:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1efce:	e038      	b.n	1f042 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1efd0:	687b      	ldr	r3, [r7, #4]
   1efd2:	1c5a      	adds	r2, r3, #1
   1efd4:	607a      	str	r2, [r7, #4]
   1efd6:	220e      	movs	r2, #14
   1efd8:	18ba      	adds	r2, r7, r2
   1efda:	781b      	ldrb	r3, [r3, #0]
   1efdc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1efde:	230d      	movs	r3, #13
   1efe0:	18fb      	adds	r3, r7, r3
   1efe2:	2200      	movs	r2, #0
   1efe4:	701a      	strb	r2, [r3, #0]
   1efe6:	e027      	b.n	1f038 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1efe8:	230f      	movs	r3, #15
   1efea:	18fa      	adds	r2, r7, r3
   1efec:	230f      	movs	r3, #15
   1efee:	18fb      	adds	r3, r7, r3
   1eff0:	781b      	ldrb	r3, [r3, #0]
   1eff2:	18db      	adds	r3, r3, r3
   1eff4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1eff6:	230e      	movs	r3, #14
   1eff8:	18fa      	adds	r2, r7, r3
   1effa:	230f      	movs	r3, #15
   1effc:	18fb      	adds	r3, r7, r3
   1effe:	7812      	ldrb	r2, [r2, #0]
   1f000:	781b      	ldrb	r3, [r3, #0]
   1f002:	4053      	eors	r3, r2
   1f004:	b2db      	uxtb	r3, r3
   1f006:	b25b      	sxtb	r3, r3
   1f008:	2b00      	cmp	r3, #0
   1f00a:	da07      	bge.n	1f01c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f00c:	230f      	movs	r3, #15
   1f00e:	18fb      	adds	r3, r7, r3
   1f010:	220f      	movs	r2, #15
   1f012:	18ba      	adds	r2, r7, r2
   1f014:	7812      	ldrb	r2, [r2, #0]
   1f016:	2109      	movs	r1, #9
   1f018:	404a      	eors	r2, r1
   1f01a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f01c:	230e      	movs	r3, #14
   1f01e:	18fa      	adds	r2, r7, r3
   1f020:	230e      	movs	r3, #14
   1f022:	18fb      	adds	r3, r7, r3
   1f024:	781b      	ldrb	r3, [r3, #0]
   1f026:	18db      	adds	r3, r3, r3
   1f028:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f02a:	230d      	movs	r3, #13
   1f02c:	18fb      	adds	r3, r7, r3
   1f02e:	781a      	ldrb	r2, [r3, #0]
   1f030:	230d      	movs	r3, #13
   1f032:	18fb      	adds	r3, r7, r3
   1f034:	3201      	adds	r2, #1
   1f036:	701a      	strb	r2, [r3, #0]
   1f038:	230d      	movs	r3, #13
   1f03a:	18fb      	adds	r3, r7, r3
   1f03c:	781b      	ldrb	r3, [r3, #0]
   1f03e:	2b07      	cmp	r3, #7
   1f040:	d9d2      	bls.n	1efe8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f042:	1cfb      	adds	r3, r7, #3
   1f044:	781b      	ldrb	r3, [r3, #0]
   1f046:	1cfa      	adds	r2, r7, #3
   1f048:	1e59      	subs	r1, r3, #1
   1f04a:	7011      	strb	r1, [r2, #0]
   1f04c:	2b00      	cmp	r3, #0
   1f04e:	d1bf      	bne.n	1efd0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f050:	230f      	movs	r3, #15
   1f052:	18fb      	adds	r3, r7, r3
   1f054:	781b      	ldrb	r3, [r3, #0]
   1f056:	005b      	lsls	r3, r3, #1
   1f058:	b25b      	sxtb	r3, r3
   1f05a:	2201      	movs	r2, #1
   1f05c:	4313      	orrs	r3, r2
   1f05e:	b25a      	sxtb	r2, r3
   1f060:	230f      	movs	r3, #15
   1f062:	18fb      	adds	r3, r7, r3
   1f064:	701a      	strb	r2, [r3, #0]
	return crc;
   1f066:	230f      	movs	r3, #15
   1f068:	18fb      	adds	r3, r7, r3
   1f06a:	781b      	ldrb	r3, [r3, #0]
}
   1f06c:	0018      	movs	r0, r3
   1f06e:	46bd      	mov	sp, r7
   1f070:	b004      	add	sp, #16
   1f072:	bd80      	pop	{r7, pc}

0001f074 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f074:	b590      	push	{r4, r7, lr}
   1f076:	b083      	sub	sp, #12
   1f078:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f07a:	1c7b      	adds	r3, r7, #1
   1f07c:	22ff      	movs	r2, #255	; 0xff
   1f07e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f080:	1cbb      	adds	r3, r7, #2
   1f082:	22ff      	movs	r2, #255	; 0xff
   1f084:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f086:	1cbb      	adds	r3, r7, #2
   1f088:	881b      	ldrh	r3, [r3, #0]
   1f08a:	1c79      	adds	r1, r7, #1
   1f08c:	4811      	ldr	r0, [pc, #68]	; (1f0d4 <sd_mmc_spi_wait_busy+0x60>)
   1f08e:	2201      	movs	r2, #1
   1f090:	4c11      	ldr	r4, [pc, #68]	; (1f0d8 <sd_mmc_spi_wait_busy+0x64>)
   1f092:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f094:	4b11      	ldr	r3, [pc, #68]	; (1f0dc <sd_mmc_spi_wait_busy+0x68>)
   1f096:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f098:	1cbb      	adds	r3, r7, #2
   1f09a:	881b      	ldrh	r3, [r3, #0]
   1f09c:	1c79      	adds	r1, r7, #1
   1f09e:	480d      	ldr	r0, [pc, #52]	; (1f0d4 <sd_mmc_spi_wait_busy+0x60>)
   1f0a0:	2201      	movs	r2, #1
   1f0a2:	4c0d      	ldr	r4, [pc, #52]	; (1f0d8 <sd_mmc_spi_wait_busy+0x64>)
   1f0a4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f0a6:	1cbb      	adds	r3, r7, #2
   1f0a8:	881b      	ldrh	r3, [r3, #0]
   1f0aa:	1c79      	adds	r1, r7, #1
   1f0ac:	4809      	ldr	r0, [pc, #36]	; (1f0d4 <sd_mmc_spi_wait_busy+0x60>)
   1f0ae:	2201      	movs	r2, #1
   1f0b0:	4c09      	ldr	r4, [pc, #36]	; (1f0d8 <sd_mmc_spi_wait_busy+0x64>)
   1f0b2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f0b4:	687b      	ldr	r3, [r7, #4]
   1f0b6:	1e5a      	subs	r2, r3, #1
   1f0b8:	607a      	str	r2, [r7, #4]
   1f0ba:	2b00      	cmp	r3, #0
   1f0bc:	d101      	bne.n	1f0c2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f0be:	2300      	movs	r3, #0
   1f0c0:	e004      	b.n	1f0cc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f0c2:	1c7b      	adds	r3, r7, #1
   1f0c4:	781b      	ldrb	r3, [r3, #0]
   1f0c6:	2bff      	cmp	r3, #255	; 0xff
   1f0c8:	d1ed      	bne.n	1f0a6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f0ca:	2301      	movs	r3, #1
}
   1f0cc:	0018      	movs	r0, r3
   1f0ce:	46bd      	mov	sp, r7
   1f0d0:	b003      	add	sp, #12
   1f0d2:	bd90      	pop	{r4, r7, pc}
   1f0d4:	200040cc 	.word	0x200040cc
   1f0d8:	000278b9 	.word	0x000278b9
   1f0dc:	00030d40 	.word	0x00030d40

0001f0e0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f0e0:	b590      	push	{r4, r7, lr}
   1f0e2:	b083      	sub	sp, #12
   1f0e4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f0e6:	1cbb      	adds	r3, r7, #2
   1f0e8:	22ff      	movs	r2, #255	; 0xff
   1f0ea:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f0ec:	1c7b      	adds	r3, r7, #1
   1f0ee:	2200      	movs	r2, #0
   1f0f0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f0f2:	4b18      	ldr	r3, [pc, #96]	; (1f154 <sd_mmc_spi_start_read_block+0x74>)
   1f0f4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f0f6:	687b      	ldr	r3, [r7, #4]
   1f0f8:	1e5a      	subs	r2, r3, #1
   1f0fa:	607a      	str	r2, [r7, #4]
   1f0fc:	2b00      	cmp	r3, #0
   1f0fe:	d104      	bne.n	1f10a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f100:	4b15      	ldr	r3, [pc, #84]	; (1f158 <sd_mmc_spi_start_read_block+0x78>)
   1f102:	2204      	movs	r2, #4
   1f104:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f106:	2300      	movs	r3, #0
   1f108:	e020      	b.n	1f14c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f10a:	1cbb      	adds	r3, r7, #2
   1f10c:	881b      	ldrh	r3, [r3, #0]
   1f10e:	1c79      	adds	r1, r7, #1
   1f110:	4812      	ldr	r0, [pc, #72]	; (1f15c <sd_mmc_spi_start_read_block+0x7c>)
   1f112:	2201      	movs	r2, #1
   1f114:	4c12      	ldr	r4, [pc, #72]	; (1f160 <sd_mmc_spi_start_read_block+0x80>)
   1f116:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f118:	1c7b      	adds	r3, r7, #1
   1f11a:	781b      	ldrb	r3, [r3, #0]
   1f11c:	001a      	movs	r2, r3
   1f11e:	23f0      	movs	r3, #240	; 0xf0
   1f120:	4013      	ands	r3, r2
   1f122:	d10e      	bne.n	1f142 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f124:	1c7b      	adds	r3, r7, #1
   1f126:	781b      	ldrb	r3, [r3, #0]
   1f128:	001a      	movs	r2, r3
   1f12a:	2307      	movs	r3, #7
   1f12c:	4013      	ands	r3, r2
   1f12e:	d003      	beq.n	1f138 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f130:	4b09      	ldr	r3, [pc, #36]	; (1f158 <sd_mmc_spi_start_read_block+0x78>)
   1f132:	2207      	movs	r2, #7
   1f134:	701a      	strb	r2, [r3, #0]
   1f136:	e002      	b.n	1f13e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f138:	4b07      	ldr	r3, [pc, #28]	; (1f158 <sd_mmc_spi_start_read_block+0x78>)
   1f13a:	220b      	movs	r2, #11
   1f13c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f13e:	2300      	movs	r3, #0
   1f140:	e004      	b.n	1f14c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f142:	1c7b      	adds	r3, r7, #1
   1f144:	781b      	ldrb	r3, [r3, #0]
   1f146:	2bfe      	cmp	r3, #254	; 0xfe
   1f148:	d1d5      	bne.n	1f0f6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f14a:	2301      	movs	r3, #1
}
   1f14c:	0018      	movs	r0, r3
   1f14e:	46bd      	mov	sp, r7
   1f150:	b003      	add	sp, #12
   1f152:	bd90      	pop	{r4, r7, pc}
   1f154:	0007a120 	.word	0x0007a120
   1f158:	2000410f 	.word	0x2000410f
   1f15c:	200040cc 	.word	0x200040cc
   1f160:	000278b9 	.word	0x000278b9

0001f164 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f164:	b590      	push	{r4, r7, lr}
   1f166:	b083      	sub	sp, #12
   1f168:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f16a:	1dbb      	adds	r3, r7, #6
   1f16c:	22ff      	movs	r2, #255	; 0xff
   1f16e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f170:	1dbb      	adds	r3, r7, #6
   1f172:	881b      	ldrh	r3, [r3, #0]
   1f174:	1d39      	adds	r1, r7, #4
   1f176:	4804      	ldr	r0, [pc, #16]	; (1f188 <sd_mmc_spi_stop_read_block+0x24>)
   1f178:	2202      	movs	r2, #2
   1f17a:	4c04      	ldr	r4, [pc, #16]	; (1f18c <sd_mmc_spi_stop_read_block+0x28>)
   1f17c:	47a0      	blx	r4
			dummy);
}
   1f17e:	46c0      	nop			; (mov r8, r8)
   1f180:	46bd      	mov	sp, r7
   1f182:	b003      	add	sp, #12
   1f184:	bd90      	pop	{r4, r7, pc}
   1f186:	46c0      	nop			; (mov r8, r8)
   1f188:	200040cc 	.word	0x200040cc
   1f18c:	000278b9 	.word	0x000278b9

0001f190 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f190:	b580      	push	{r7, lr}
   1f192:	b082      	sub	sp, #8
   1f194:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f196:	1dfb      	adds	r3, r7, #7
   1f198:	22ff      	movs	r2, #255	; 0xff
   1f19a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f19c:	1df9      	adds	r1, r7, #7
   1f19e:	4b0d      	ldr	r3, [pc, #52]	; (1f1d4 <sd_mmc_spi_start_write_block+0x44>)
   1f1a0:	2201      	movs	r2, #1
   1f1a2:	0018      	movs	r0, r3
   1f1a4:	4b0c      	ldr	r3, [pc, #48]	; (1f1d8 <sd_mmc_spi_start_write_block+0x48>)
   1f1a6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f1a8:	4b0c      	ldr	r3, [pc, #48]	; (1f1dc <sd_mmc_spi_start_write_block+0x4c>)
   1f1aa:	881b      	ldrh	r3, [r3, #0]
   1f1ac:	2b01      	cmp	r3, #1
   1f1ae:	d103      	bne.n	1f1b8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f1b0:	1dbb      	adds	r3, r7, #6
   1f1b2:	22fe      	movs	r2, #254	; 0xfe
   1f1b4:	701a      	strb	r2, [r3, #0]
   1f1b6:	e002      	b.n	1f1be <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f1b8:	1dbb      	adds	r3, r7, #6
   1f1ba:	22fc      	movs	r2, #252	; 0xfc
   1f1bc:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f1be:	1db9      	adds	r1, r7, #6
   1f1c0:	4b04      	ldr	r3, [pc, #16]	; (1f1d4 <sd_mmc_spi_start_write_block+0x44>)
   1f1c2:	2201      	movs	r2, #1
   1f1c4:	0018      	movs	r0, r3
   1f1c6:	4b04      	ldr	r3, [pc, #16]	; (1f1d8 <sd_mmc_spi_start_write_block+0x48>)
   1f1c8:	4798      	blx	r3
}
   1f1ca:	46c0      	nop			; (mov r8, r8)
   1f1cc:	46bd      	mov	sp, r7
   1f1ce:	b002      	add	sp, #8
   1f1d0:	bd80      	pop	{r7, pc}
   1f1d2:	46c0      	nop			; (mov r8, r8)
   1f1d4:	200040cc 	.word	0x200040cc
   1f1d8:	00027add 	.word	0x00027add
   1f1dc:	2000411a 	.word	0x2000411a

0001f1e0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f1e0:	b590      	push	{r4, r7, lr}
   1f1e2:	b083      	sub	sp, #12
   1f1e4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f1e6:	1dbb      	adds	r3, r7, #6
   1f1e8:	22ff      	movs	r2, #255	; 0xff
   1f1ea:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f1ec:	1cbb      	adds	r3, r7, #2
   1f1ee:	2201      	movs	r2, #1
   1f1f0:	4252      	negs	r2, r2
   1f1f2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f1f4:	1cb9      	adds	r1, r7, #2
   1f1f6:	4b1b      	ldr	r3, [pc, #108]	; (1f264 <sd_mmc_spi_stop_write_block+0x84>)
   1f1f8:	2202      	movs	r2, #2
   1f1fa:	0018      	movs	r0, r3
   1f1fc:	4b1a      	ldr	r3, [pc, #104]	; (1f268 <sd_mmc_spi_stop_write_block+0x88>)
   1f1fe:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f200:	1dbb      	adds	r3, r7, #6
   1f202:	881b      	ldrh	r3, [r3, #0]
   1f204:	1d79      	adds	r1, r7, #5
   1f206:	4817      	ldr	r0, [pc, #92]	; (1f264 <sd_mmc_spi_stop_write_block+0x84>)
   1f208:	2201      	movs	r2, #1
   1f20a:	4c18      	ldr	r4, [pc, #96]	; (1f26c <sd_mmc_spi_stop_write_block+0x8c>)
   1f20c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f20e:	1d7b      	adds	r3, r7, #5
   1f210:	781b      	ldrb	r3, [r3, #0]
   1f212:	001a      	movs	r2, r3
   1f214:	2310      	movs	r3, #16
   1f216:	4013      	ands	r3, r2
   1f218:	d105      	bne.n	1f226 <sd_mmc_spi_stop_write_block+0x46>
   1f21a:	1d7b      	adds	r3, r7, #5
   1f21c:	781b      	ldrb	r3, [r3, #0]
   1f21e:	001a      	movs	r2, r3
   1f220:	2301      	movs	r3, #1
   1f222:	4013      	ands	r3, r2
   1f224:	d104      	bne.n	1f230 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f226:	4b12      	ldr	r3, [pc, #72]	; (1f270 <sd_mmc_spi_stop_write_block+0x90>)
   1f228:	2201      	movs	r2, #1
   1f22a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f22c:	2300      	movs	r3, #0
   1f22e:	e014      	b.n	1f25a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f230:	1d7b      	adds	r3, r7, #5
   1f232:	781b      	ldrb	r3, [r3, #0]
   1f234:	001a      	movs	r2, r3
   1f236:	231e      	movs	r3, #30
   1f238:	4013      	ands	r3, r2
   1f23a:	2b04      	cmp	r3, #4
   1f23c:	d00b      	beq.n	1f256 <sd_mmc_spi_stop_write_block+0x76>
   1f23e:	2b0a      	cmp	r3, #10
   1f240:	d104      	bne.n	1f24c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f242:	4b0b      	ldr	r3, [pc, #44]	; (1f270 <sd_mmc_spi_stop_write_block+0x90>)
   1f244:	2208      	movs	r2, #8
   1f246:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f248:	2300      	movs	r3, #0
   1f24a:	e006      	b.n	1f25a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f24c:	4b08      	ldr	r3, [pc, #32]	; (1f270 <sd_mmc_spi_stop_write_block+0x90>)
   1f24e:	220a      	movs	r2, #10
   1f250:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f252:	2300      	movs	r3, #0
   1f254:	e001      	b.n	1f25a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f256:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f258:	2301      	movs	r3, #1
}
   1f25a:	0018      	movs	r0, r3
   1f25c:	46bd      	mov	sp, r7
   1f25e:	b003      	add	sp, #12
   1f260:	bd90      	pop	{r4, r7, pc}
   1f262:	46c0      	nop			; (mov r8, r8)
   1f264:	200040cc 	.word	0x200040cc
   1f268:	00027add 	.word	0x00027add
   1f26c:	000278b9 	.word	0x000278b9
   1f270:	2000410f 	.word	0x2000410f

0001f274 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f274:	b590      	push	{r4, r7, lr}
   1f276:	b083      	sub	sp, #12
   1f278:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f27a:	4b1d      	ldr	r3, [pc, #116]	; (1f2f0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f27c:	881b      	ldrh	r3, [r3, #0]
   1f27e:	2b01      	cmp	r3, #1
   1f280:	d101      	bne.n	1f286 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f282:	2301      	movs	r3, #1
   1f284:	e030      	b.n	1f2e8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f286:	4b1a      	ldr	r3, [pc, #104]	; (1f2f0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f288:	881b      	ldrh	r3, [r3, #0]
   1f28a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f28c:	4b19      	ldr	r3, [pc, #100]	; (1f2f4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f28e:	681a      	ldr	r2, [r3, #0]
   1f290:	4b19      	ldr	r3, [pc, #100]	; (1f2f8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f292:	881b      	ldrh	r3, [r3, #0]
   1f294:	0019      	movs	r1, r3
   1f296:	4b19      	ldr	r3, [pc, #100]	; (1f2fc <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f298:	0010      	movs	r0, r2
   1f29a:	4798      	blx	r3
   1f29c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f29e:	429c      	cmp	r4, r3
   1f2a0:	d901      	bls.n	1f2a6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f2a2:	2301      	movs	r3, #1
   1f2a4:	e020      	b.n	1f2e8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f2a6:	1dfb      	adds	r3, r7, #7
   1f2a8:	22ff      	movs	r2, #255	; 0xff
   1f2aa:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f2ac:	1df9      	adds	r1, r7, #7
   1f2ae:	4b14      	ldr	r3, [pc, #80]	; (1f300 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f2b0:	2201      	movs	r2, #1
   1f2b2:	0018      	movs	r0, r3
   1f2b4:	4b13      	ldr	r3, [pc, #76]	; (1f304 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f2b6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f2b8:	1dfb      	adds	r3, r7, #7
   1f2ba:	22fd      	movs	r2, #253	; 0xfd
   1f2bc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f2be:	1df9      	adds	r1, r7, #7
   1f2c0:	4b0f      	ldr	r3, [pc, #60]	; (1f300 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f2c2:	2201      	movs	r2, #1
   1f2c4:	0018      	movs	r0, r3
   1f2c6:	4b0f      	ldr	r3, [pc, #60]	; (1f304 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f2c8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f2ca:	4b0f      	ldr	r3, [pc, #60]	; (1f308 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f2cc:	4798      	blx	r3
   1f2ce:	0003      	movs	r3, r0
   1f2d0:	001a      	movs	r2, r3
   1f2d2:	2301      	movs	r3, #1
   1f2d4:	4053      	eors	r3, r2
   1f2d6:	b2db      	uxtb	r3, r3
   1f2d8:	2b00      	cmp	r3, #0
   1f2da:	d004      	beq.n	1f2e6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f2dc:	4b0b      	ldr	r3, [pc, #44]	; (1f30c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f2de:	2205      	movs	r2, #5
   1f2e0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f2e2:	2300      	movs	r3, #0
   1f2e4:	e000      	b.n	1f2e8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f2e6:	2301      	movs	r3, #1
}
   1f2e8:	0018      	movs	r0, r3
   1f2ea:	46bd      	mov	sp, r7
   1f2ec:	b003      	add	sp, #12
   1f2ee:	bd90      	pop	{r4, r7, pc}
   1f2f0:	2000411a 	.word	0x2000411a
   1f2f4:	20004114 	.word	0x20004114
   1f2f8:	20004118 	.word	0x20004118
   1f2fc:	00032245 	.word	0x00032245
   1f300:	200040cc 	.word	0x200040cc
   1f304:	00027add 	.word	0x00027add
   1f308:	0001f075 	.word	0x0001f075
   1f30c:	2000410f 	.word	0x2000410f

0001f310 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1f310:	b580      	push	{r7, lr}
   1f312:	b090      	sub	sp, #64	; 0x40
   1f314:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f316:	4b1f      	ldr	r3, [pc, #124]	; (1f394 <sd_mmc_spi_init+0x84>)
   1f318:	2200      	movs	r2, #0
   1f31a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1f31c:	233c      	movs	r3, #60	; 0x3c
   1f31e:	18fb      	adds	r3, r7, r3
   1f320:	0018      	movs	r0, r3
   1f322:	4b1d      	ldr	r3, [pc, #116]	; (1f398 <sd_mmc_spi_init+0x88>)
   1f324:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1f326:	1d3b      	adds	r3, r7, #4
   1f328:	0018      	movs	r0, r3
   1f32a:	4b1c      	ldr	r3, [pc, #112]	; (1f39c <sd_mmc_spi_init+0x8c>)
   1f32c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1f32e:	1d3b      	adds	r3, r7, #4
   1f330:	2280      	movs	r2, #128	; 0x80
   1f332:	0252      	lsls	r2, r2, #9
   1f334:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1f336:	1d3b      	adds	r3, r7, #4
   1f338:	4a19      	ldr	r2, [pc, #100]	; (1f3a0 <sd_mmc_spi_init+0x90>)
   1f33a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1f33c:	1d3b      	adds	r3, r7, #4
   1f33e:	4a19      	ldr	r2, [pc, #100]	; (1f3a4 <sd_mmc_spi_init+0x94>)
   1f340:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1f342:	1d3b      	adds	r3, r7, #4
   1f344:	4a18      	ldr	r2, [pc, #96]	; (1f3a8 <sd_mmc_spi_init+0x98>)
   1f346:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1f348:	1d3b      	adds	r3, r7, #4
   1f34a:	4a18      	ldr	r2, [pc, #96]	; (1f3ac <sd_mmc_spi_init+0x9c>)
   1f34c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1f34e:	1d3b      	adds	r3, r7, #4
   1f350:	2224      	movs	r2, #36	; 0x24
   1f352:	2100      	movs	r1, #0
   1f354:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1f356:	1d3b      	adds	r3, r7, #4
   1f358:	4a15      	ldr	r2, [pc, #84]	; (1f3b0 <sd_mmc_spi_init+0xa0>)
   1f35a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1f35c:	1d3a      	adds	r2, r7, #4
   1f35e:	4915      	ldr	r1, [pc, #84]	; (1f3b4 <sd_mmc_spi_init+0xa4>)
   1f360:	4b15      	ldr	r3, [pc, #84]	; (1f3b8 <sd_mmc_spi_init+0xa8>)
   1f362:	0018      	movs	r0, r3
   1f364:	4b15      	ldr	r3, [pc, #84]	; (1f3bc <sd_mmc_spi_init+0xac>)
   1f366:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1f368:	4b13      	ldr	r3, [pc, #76]	; (1f3b8 <sd_mmc_spi_init+0xa8>)
   1f36a:	0018      	movs	r0, r3
   1f36c:	4b14      	ldr	r3, [pc, #80]	; (1f3c0 <sd_mmc_spi_init+0xb0>)
   1f36e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1f370:	4b14      	ldr	r3, [pc, #80]	; (1f3c4 <sd_mmc_spi_init+0xb4>)
   1f372:	0018      	movs	r0, r3
   1f374:	4b14      	ldr	r3, [pc, #80]	; (1f3c8 <sd_mmc_spi_init+0xb8>)
   1f376:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1f378:	4b14      	ldr	r3, [pc, #80]	; (1f3cc <sd_mmc_spi_init+0xbc>)
   1f37a:	781a      	ldrb	r2, [r3, #0]
   1f37c:	4b11      	ldr	r3, [pc, #68]	; (1f3c4 <sd_mmc_spi_init+0xb4>)
   1f37e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1f380:	4a10      	ldr	r2, [pc, #64]	; (1f3c4 <sd_mmc_spi_init+0xb4>)
   1f382:	4b13      	ldr	r3, [pc, #76]	; (1f3d0 <sd_mmc_spi_init+0xc0>)
   1f384:	0011      	movs	r1, r2
   1f386:	0018      	movs	r0, r3
   1f388:	4b12      	ldr	r3, [pc, #72]	; (1f3d4 <sd_mmc_spi_init+0xc4>)
   1f38a:	4798      	blx	r3
}
   1f38c:	46c0      	nop			; (mov r8, r8)
   1f38e:	46bd      	mov	sp, r7
   1f390:	b010      	add	sp, #64	; 0x40
   1f392:	bd80      	pop	{r7, pc}
   1f394:	2000410f 	.word	0x2000410f
   1f398:	0001edc5 	.word	0x0001edc5
   1f39c:	0001ee5d 	.word	0x0001ee5d
   1f3a0:	00100002 	.word	0x00100002
   1f3a4:	00110002 	.word	0x00110002
   1f3a8:	00120002 	.word	0x00120002
   1f3ac:	00130002 	.word	0x00130002
   1f3b0:	00061a80 	.word	0x00061a80
   1f3b4:	42000c00 	.word	0x42000c00
   1f3b8:	200040cc 	.word	0x200040cc
   1f3bc:	00027729 	.word	0x00027729
   1f3c0:	0001ef69 	.word	0x0001ef69
   1f3c4:	2000410c 	.word	0x2000410c
   1f3c8:	0001eee1 	.word	0x0001eee1
   1f3cc:	20000110 	.word	0x20000110
   1f3d0:	20004108 	.word	0x20004108
   1f3d4:	0001ef05 	.word	0x0001ef05

0001f3d8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1f3d8:	b590      	push	{r4, r7, lr}
   1f3da:	b083      	sub	sp, #12
   1f3dc:	af00      	add	r7, sp, #0
   1f3de:	0004      	movs	r4, r0
   1f3e0:	6039      	str	r1, [r7, #0]
   1f3e2:	0010      	movs	r0, r2
   1f3e4:	0019      	movs	r1, r3
   1f3e6:	1dfb      	adds	r3, r7, #7
   1f3e8:	1c22      	adds	r2, r4, #0
   1f3ea:	701a      	strb	r2, [r3, #0]
   1f3ec:	1dbb      	adds	r3, r7, #6
   1f3ee:	1c02      	adds	r2, r0, #0
   1f3f0:	701a      	strb	r2, [r3, #0]
   1f3f2:	1d7b      	adds	r3, r7, #5
   1f3f4:	1c0a      	adds	r2, r1, #0
   1f3f6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f3f8:	4b13      	ldr	r3, [pc, #76]	; (1f448 <sd_mmc_spi_select_device+0x70>)
   1f3fa:	2200      	movs	r2, #0
   1f3fc:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1f3fe:	683b      	ldr	r3, [r7, #0]
   1f400:	4a12      	ldr	r2, [pc, #72]	; (1f44c <sd_mmc_spi_select_device+0x74>)
   1f402:	4293      	cmp	r3, r2
   1f404:	d907      	bls.n	1f416 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1f406:	4b11      	ldr	r3, [pc, #68]	; (1f44c <sd_mmc_spi_select_device+0x74>)
   1f408:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f40a:	e004      	b.n	1f416 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1f40c:	683b      	ldr	r3, [r7, #0]
   1f40e:	08db      	lsrs	r3, r3, #3
   1f410:	683a      	ldr	r2, [r7, #0]
   1f412:	1ad3      	subs	r3, r2, r3
   1f414:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f416:	683a      	ldr	r2, [r7, #0]
   1f418:	4b0d      	ldr	r3, [pc, #52]	; (1f450 <sd_mmc_spi_select_device+0x78>)
   1f41a:	0011      	movs	r1, r2
   1f41c:	0018      	movs	r0, r3
   1f41e:	4b0d      	ldr	r3, [pc, #52]	; (1f454 <sd_mmc_spi_select_device+0x7c>)
   1f420:	4798      	blx	r3
   1f422:	0003      	movs	r3, r0
   1f424:	2b17      	cmp	r3, #23
   1f426:	d0f1      	beq.n	1f40c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1f428:	1dfb      	adds	r3, r7, #7
   1f42a:	781a      	ldrb	r2, [r3, #0]
   1f42c:	0013      	movs	r3, r2
   1f42e:	005b      	lsls	r3, r3, #1
   1f430:	189b      	adds	r3, r3, r2
   1f432:	4a09      	ldr	r2, [pc, #36]	; (1f458 <sd_mmc_spi_select_device+0x80>)
   1f434:	1899      	adds	r1, r3, r2
   1f436:	4b06      	ldr	r3, [pc, #24]	; (1f450 <sd_mmc_spi_select_device+0x78>)
   1f438:	2201      	movs	r2, #1
   1f43a:	0018      	movs	r0, r3
   1f43c:	4b07      	ldr	r3, [pc, #28]	; (1f45c <sd_mmc_spi_select_device+0x84>)
   1f43e:	4798      	blx	r3
}
   1f440:	46c0      	nop			; (mov r8, r8)
   1f442:	46bd      	mov	sp, r7
   1f444:	b003      	add	sp, #12
   1f446:	bd90      	pop	{r4, r7, pc}
   1f448:	2000410f 	.word	0x2000410f
   1f44c:	00989680 	.word	0x00989680
   1f450:	200040cc 	.word	0x200040cc
   1f454:	00027451 	.word	0x00027451
   1f458:	20004108 	.word	0x20004108
   1f45c:	000279ed 	.word	0x000279ed

0001f460 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1f460:	b580      	push	{r7, lr}
   1f462:	b082      	sub	sp, #8
   1f464:	af00      	add	r7, sp, #0
   1f466:	0002      	movs	r2, r0
   1f468:	1dfb      	adds	r3, r7, #7
   1f46a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f46c:	4b09      	ldr	r3, [pc, #36]	; (1f494 <sd_mmc_spi_deselect_device+0x34>)
   1f46e:	2200      	movs	r2, #0
   1f470:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1f472:	1dfb      	adds	r3, r7, #7
   1f474:	781a      	ldrb	r2, [r3, #0]
   1f476:	0013      	movs	r3, r2
   1f478:	005b      	lsls	r3, r3, #1
   1f47a:	189b      	adds	r3, r3, r2
   1f47c:	4a06      	ldr	r2, [pc, #24]	; (1f498 <sd_mmc_spi_deselect_device+0x38>)
   1f47e:	1899      	adds	r1, r3, r2
   1f480:	4b06      	ldr	r3, [pc, #24]	; (1f49c <sd_mmc_spi_deselect_device+0x3c>)
   1f482:	2200      	movs	r2, #0
   1f484:	0018      	movs	r0, r3
   1f486:	4b06      	ldr	r3, [pc, #24]	; (1f4a0 <sd_mmc_spi_deselect_device+0x40>)
   1f488:	4798      	blx	r3
}
   1f48a:	46c0      	nop			; (mov r8, r8)
   1f48c:	46bd      	mov	sp, r7
   1f48e:	b002      	add	sp, #8
   1f490:	bd80      	pop	{r7, pc}
   1f492:	46c0      	nop			; (mov r8, r8)
   1f494:	2000410f 	.word	0x2000410f
   1f498:	20004108 	.word	0x20004108
   1f49c:	200040cc 	.word	0x200040cc
   1f4a0:	000279ed 	.word	0x000279ed

0001f4a4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1f4a4:	b580      	push	{r7, lr}
   1f4a6:	b082      	sub	sp, #8
   1f4a8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1f4aa:	1dbb      	adds	r3, r7, #6
   1f4ac:	22ff      	movs	r2, #255	; 0xff
   1f4ae:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f4b0:	4b0c      	ldr	r3, [pc, #48]	; (1f4e4 <sd_mmc_spi_send_clock+0x40>)
   1f4b2:	2200      	movs	r2, #0
   1f4b4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1f4b6:	1dfb      	adds	r3, r7, #7
   1f4b8:	2200      	movs	r2, #0
   1f4ba:	701a      	strb	r2, [r3, #0]
   1f4bc:	e00a      	b.n	1f4d4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1f4be:	1db9      	adds	r1, r7, #6
   1f4c0:	4b09      	ldr	r3, [pc, #36]	; (1f4e8 <sd_mmc_spi_send_clock+0x44>)
   1f4c2:	2201      	movs	r2, #1
   1f4c4:	0018      	movs	r0, r3
   1f4c6:	4b09      	ldr	r3, [pc, #36]	; (1f4ec <sd_mmc_spi_send_clock+0x48>)
   1f4c8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1f4ca:	1dfb      	adds	r3, r7, #7
   1f4cc:	781a      	ldrb	r2, [r3, #0]
   1f4ce:	1dfb      	adds	r3, r7, #7
   1f4d0:	3201      	adds	r2, #1
   1f4d2:	701a      	strb	r2, [r3, #0]
   1f4d4:	1dfb      	adds	r3, r7, #7
   1f4d6:	781b      	ldrb	r3, [r3, #0]
   1f4d8:	2b09      	cmp	r3, #9
   1f4da:	d9f0      	bls.n	1f4be <sd_mmc_spi_send_clock+0x1a>
	}
}
   1f4dc:	46c0      	nop			; (mov r8, r8)
   1f4de:	46bd      	mov	sp, r7
   1f4e0:	b002      	add	sp, #8
   1f4e2:	bd80      	pop	{r7, pc}
   1f4e4:	2000410f 	.word	0x2000410f
   1f4e8:	200040cc 	.word	0x200040cc
   1f4ec:	00027add 	.word	0x00027add

0001f4f0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1f4f0:	b590      	push	{r4, r7, lr}
   1f4f2:	b085      	sub	sp, #20
   1f4f4:	af02      	add	r7, sp, #8
   1f4f6:	6078      	str	r0, [r7, #4]
   1f4f8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1f4fa:	6839      	ldr	r1, [r7, #0]
   1f4fc:	6878      	ldr	r0, [r7, #4]
   1f4fe:	2300      	movs	r3, #0
   1f500:	9300      	str	r3, [sp, #0]
   1f502:	2300      	movs	r3, #0
   1f504:	2200      	movs	r2, #0
   1f506:	4c03      	ldr	r4, [pc, #12]	; (1f514 <sd_mmc_spi_send_cmd+0x24>)
   1f508:	47a0      	blx	r4
   1f50a:	0003      	movs	r3, r0
}
   1f50c:	0018      	movs	r0, r3
   1f50e:	46bd      	mov	sp, r7
   1f510:	b003      	add	sp, #12
   1f512:	bd90      	pop	{r4, r7, pc}
   1f514:	0001f519 	.word	0x0001f519

0001f518 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1f518:	b590      	push	{r4, r7, lr}
   1f51a:	b089      	sub	sp, #36	; 0x24
   1f51c:	af00      	add	r7, sp, #0
   1f51e:	60f8      	str	r0, [r7, #12]
   1f520:	60b9      	str	r1, [r7, #8]
   1f522:	0019      	movs	r1, r3
   1f524:	1dbb      	adds	r3, r7, #6
   1f526:	801a      	strh	r2, [r3, #0]
   1f528:	1d3b      	adds	r3, r7, #4
   1f52a:	1c0a      	adds	r2, r1, #0
   1f52c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f52e:	231b      	movs	r3, #27
   1f530:	18fb      	adds	r3, r7, r3
   1f532:	22ff      	movs	r2, #255	; 0xff
   1f534:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f536:	231c      	movs	r3, #28
   1f538:	18fb      	adds	r3, r7, r3
   1f53a:	22ff      	movs	r2, #255	; 0xff
   1f53c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f53e:	4b72      	ldr	r3, [pc, #456]	; (1f708 <sd_mmc_spi_adtc_start+0x1f0>)
   1f540:	2200      	movs	r2, #0
   1f542:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f544:	68fb      	ldr	r3, [r7, #12]
   1f546:	b2db      	uxtb	r3, r3
   1f548:	223f      	movs	r2, #63	; 0x3f
   1f54a:	4013      	ands	r3, r2
   1f54c:	b2db      	uxtb	r3, r3
   1f54e:	2240      	movs	r2, #64	; 0x40
   1f550:	4313      	orrs	r3, r2
   1f552:	b2da      	uxtb	r2, r3
   1f554:	2314      	movs	r3, #20
   1f556:	18fb      	adds	r3, r7, r3
   1f558:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f55a:	68bb      	ldr	r3, [r7, #8]
   1f55c:	0e1b      	lsrs	r3, r3, #24
   1f55e:	b2da      	uxtb	r2, r3
   1f560:	2314      	movs	r3, #20
   1f562:	18fb      	adds	r3, r7, r3
   1f564:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f566:	68bb      	ldr	r3, [r7, #8]
   1f568:	0c1b      	lsrs	r3, r3, #16
   1f56a:	b2da      	uxtb	r2, r3
   1f56c:	2314      	movs	r3, #20
   1f56e:	18fb      	adds	r3, r7, r3
   1f570:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f572:	68bb      	ldr	r3, [r7, #8]
   1f574:	0a1b      	lsrs	r3, r3, #8
   1f576:	b2da      	uxtb	r2, r3
   1f578:	2314      	movs	r3, #20
   1f57a:	18fb      	adds	r3, r7, r3
   1f57c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f57e:	68bb      	ldr	r3, [r7, #8]
   1f580:	b2da      	uxtb	r2, r3
   1f582:	2314      	movs	r3, #20
   1f584:	18fb      	adds	r3, r7, r3
   1f586:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f588:	2314      	movs	r3, #20
   1f58a:	18fb      	adds	r3, r7, r3
   1f58c:	2105      	movs	r1, #5
   1f58e:	0018      	movs	r0, r3
   1f590:	4b5e      	ldr	r3, [pc, #376]	; (1f70c <sd_mmc_spi_adtc_start+0x1f4>)
   1f592:	4798      	blx	r3
   1f594:	0003      	movs	r3, r0
   1f596:	001a      	movs	r2, r3
   1f598:	2314      	movs	r3, #20
   1f59a:	18fb      	adds	r3, r7, r3
   1f59c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f59e:	231b      	movs	r3, #27
   1f5a0:	18f9      	adds	r1, r7, r3
   1f5a2:	4b5b      	ldr	r3, [pc, #364]	; (1f710 <sd_mmc_spi_adtc_start+0x1f8>)
   1f5a4:	2201      	movs	r2, #1
   1f5a6:	0018      	movs	r0, r3
   1f5a8:	4b5a      	ldr	r3, [pc, #360]	; (1f714 <sd_mmc_spi_adtc_start+0x1fc>)
   1f5aa:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f5ac:	2314      	movs	r3, #20
   1f5ae:	18f9      	adds	r1, r7, r3
   1f5b0:	4b57      	ldr	r3, [pc, #348]	; (1f710 <sd_mmc_spi_adtc_start+0x1f8>)
   1f5b2:	2206      	movs	r2, #6
   1f5b4:	0018      	movs	r0, r3
   1f5b6:	4b57      	ldr	r3, [pc, #348]	; (1f714 <sd_mmc_spi_adtc_start+0x1fc>)
   1f5b8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f5ba:	2313      	movs	r3, #19
   1f5bc:	18fb      	adds	r3, r7, r3
   1f5be:	22ff      	movs	r2, #255	; 0xff
   1f5c0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f5c2:	231c      	movs	r3, #28
   1f5c4:	18fb      	adds	r3, r7, r3
   1f5c6:	881b      	ldrh	r3, [r3, #0]
   1f5c8:	2213      	movs	r2, #19
   1f5ca:	18b9      	adds	r1, r7, r2
   1f5cc:	4850      	ldr	r0, [pc, #320]	; (1f710 <sd_mmc_spi_adtc_start+0x1f8>)
   1f5ce:	2201      	movs	r2, #1
   1f5d0:	4c51      	ldr	r4, [pc, #324]	; (1f718 <sd_mmc_spi_adtc_start+0x200>)
   1f5d2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1f5d4:	231f      	movs	r3, #31
   1f5d6:	18fb      	adds	r3, r7, r3
   1f5d8:	2207      	movs	r2, #7
   1f5da:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f5dc:	231c      	movs	r3, #28
   1f5de:	18fb      	adds	r3, r7, r3
   1f5e0:	881b      	ldrh	r3, [r3, #0]
   1f5e2:	2213      	movs	r2, #19
   1f5e4:	18b9      	adds	r1, r7, r2
   1f5e6:	484a      	ldr	r0, [pc, #296]	; (1f710 <sd_mmc_spi_adtc_start+0x1f8>)
   1f5e8:	2201      	movs	r2, #1
   1f5ea:	4c4b      	ldr	r4, [pc, #300]	; (1f718 <sd_mmc_spi_adtc_start+0x200>)
   1f5ec:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1f5ee:	2313      	movs	r3, #19
   1f5f0:	18fb      	adds	r3, r7, r3
   1f5f2:	781b      	ldrb	r3, [r3, #0]
   1f5f4:	b25b      	sxtb	r3, r3
   1f5f6:	2b00      	cmp	r3, #0
   1f5f8:	da10      	bge.n	1f61c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1f5fa:	231f      	movs	r3, #31
   1f5fc:	18fb      	adds	r3, r7, r3
   1f5fe:	221f      	movs	r2, #31
   1f600:	18ba      	adds	r2, r7, r2
   1f602:	7812      	ldrb	r2, [r2, #0]
   1f604:	3a01      	subs	r2, #1
   1f606:	701a      	strb	r2, [r3, #0]
   1f608:	231f      	movs	r3, #31
   1f60a:	18fb      	adds	r3, r7, r3
   1f60c:	781b      	ldrb	r3, [r3, #0]
   1f60e:	2b00      	cmp	r3, #0
   1f610:	d1e4      	bne.n	1f5dc <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1f612:	4b3d      	ldr	r3, [pc, #244]	; (1f708 <sd_mmc_spi_adtc_start+0x1f0>)
   1f614:	2202      	movs	r2, #2
   1f616:	701a      	strb	r2, [r3, #0]
			return false;
   1f618:	2300      	movs	r3, #0
   1f61a:	e070      	b.n	1f6fe <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1f61c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1f61e:	2313      	movs	r3, #19
   1f620:	18fb      	adds	r3, r7, r3
   1f622:	781b      	ldrb	r3, [r3, #0]
   1f624:	001a      	movs	r2, r3
   1f626:	4b3d      	ldr	r3, [pc, #244]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f628:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1f62a:	2313      	movs	r3, #19
   1f62c:	18fb      	adds	r3, r7, r3
   1f62e:	781b      	ldrb	r3, [r3, #0]
   1f630:	001a      	movs	r2, r3
   1f632:	2308      	movs	r3, #8
   1f634:	4013      	ands	r3, r2
   1f636:	d004      	beq.n	1f642 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1f638:	4b33      	ldr	r3, [pc, #204]	; (1f708 <sd_mmc_spi_adtc_start+0x1f0>)
   1f63a:	2206      	movs	r2, #6
   1f63c:	701a      	strb	r2, [r3, #0]
		return false;
   1f63e:	2300      	movs	r3, #0
   1f640:	e05d      	b.n	1f6fe <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1f642:	2313      	movs	r3, #19
   1f644:	18fb      	adds	r3, r7, r3
   1f646:	781b      	ldrb	r3, [r3, #0]
   1f648:	001a      	movs	r2, r3
   1f64a:	2304      	movs	r3, #4
   1f64c:	4013      	ands	r3, r2
   1f64e:	d004      	beq.n	1f65a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1f650:	4b2d      	ldr	r3, [pc, #180]	; (1f708 <sd_mmc_spi_adtc_start+0x1f0>)
   1f652:	2209      	movs	r2, #9
   1f654:	701a      	strb	r2, [r3, #0]
		return false;
   1f656:	2300      	movs	r3, #0
   1f658:	e051      	b.n	1f6fe <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1f65a:	2313      	movs	r3, #19
   1f65c:	18fb      	adds	r3, r7, r3
   1f65e:	781b      	ldrb	r3, [r3, #0]
   1f660:	001a      	movs	r2, r3
   1f662:	2301      	movs	r3, #1
   1f664:	439a      	bics	r2, r3
   1f666:	1e13      	subs	r3, r2, #0
   1f668:	d004      	beq.n	1f674 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f66a:	4b27      	ldr	r3, [pc, #156]	; (1f708 <sd_mmc_spi_adtc_start+0x1f0>)
   1f66c:	2201      	movs	r2, #1
   1f66e:	701a      	strb	r2, [r3, #0]
		return false;
   1f670:	2300      	movs	r3, #0
   1f672:	e044      	b.n	1f6fe <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1f674:	68fa      	ldr	r2, [r7, #12]
   1f676:	2380      	movs	r3, #128	; 0x80
   1f678:	019b      	lsls	r3, r3, #6
   1f67a:	4013      	ands	r3, r2
   1f67c:	d00d      	beq.n	1f69a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1f67e:	4b28      	ldr	r3, [pc, #160]	; (1f720 <sd_mmc_spi_adtc_start+0x208>)
   1f680:	4798      	blx	r3
   1f682:	0003      	movs	r3, r0
   1f684:	001a      	movs	r2, r3
   1f686:	2301      	movs	r3, #1
   1f688:	4053      	eors	r3, r2
   1f68a:	b2db      	uxtb	r3, r3
   1f68c:	2b00      	cmp	r3, #0
   1f68e:	d004      	beq.n	1f69a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1f690:	4b1d      	ldr	r3, [pc, #116]	; (1f708 <sd_mmc_spi_adtc_start+0x1f0>)
   1f692:	2203      	movs	r2, #3
   1f694:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1f696:	2300      	movs	r3, #0
   1f698:	e031      	b.n	1f6fe <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1f69a:	68fa      	ldr	r2, [r7, #12]
   1f69c:	2380      	movs	r3, #128	; 0x80
   1f69e:	009b      	lsls	r3, r3, #2
   1f6a0:	4013      	ands	r3, r2
   1f6a2:	d00e      	beq.n	1f6c2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1f6a4:	4b1d      	ldr	r3, [pc, #116]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f6a6:	2200      	movs	r2, #0
   1f6a8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1f6aa:	231c      	movs	r3, #28
   1f6ac:	18fb      	adds	r3, r7, r3
   1f6ae:	881b      	ldrh	r3, [r3, #0]
   1f6b0:	491a      	ldr	r1, [pc, #104]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f6b2:	4817      	ldr	r0, [pc, #92]	; (1f710 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6b4:	2201      	movs	r2, #1
   1f6b6:	4c18      	ldr	r4, [pc, #96]	; (1f718 <sd_mmc_spi_adtc_start+0x200>)
   1f6b8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1f6ba:	4b18      	ldr	r3, [pc, #96]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f6bc:	681a      	ldr	r2, [r3, #0]
   1f6be:	4b17      	ldr	r3, [pc, #92]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f6c0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1f6c2:	68fa      	ldr	r2, [r7, #12]
   1f6c4:	2380      	movs	r3, #128	; 0x80
   1f6c6:	00db      	lsls	r3, r3, #3
   1f6c8:	4013      	ands	r3, r2
   1f6ca:	d00c      	beq.n	1f6e6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1f6cc:	231c      	movs	r3, #28
   1f6ce:	18fb      	adds	r3, r7, r3
   1f6d0:	881b      	ldrh	r3, [r3, #0]
   1f6d2:	4912      	ldr	r1, [pc, #72]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f6d4:	480e      	ldr	r0, [pc, #56]	; (1f710 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6d6:	2204      	movs	r2, #4
   1f6d8:	4c0f      	ldr	r4, [pc, #60]	; (1f718 <sd_mmc_spi_adtc_start+0x200>)
   1f6da:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1f6dc:	4b0f      	ldr	r3, [pc, #60]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f6de:	681b      	ldr	r3, [r3, #0]
   1f6e0:	ba1a      	rev	r2, r3
   1f6e2:	4b0e      	ldr	r3, [pc, #56]	; (1f71c <sd_mmc_spi_adtc_start+0x204>)
   1f6e4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1f6e6:	4b0f      	ldr	r3, [pc, #60]	; (1f724 <sd_mmc_spi_adtc_start+0x20c>)
   1f6e8:	1dba      	adds	r2, r7, #6
   1f6ea:	8812      	ldrh	r2, [r2, #0]
   1f6ec:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1f6ee:	4b0e      	ldr	r3, [pc, #56]	; (1f728 <sd_mmc_spi_adtc_start+0x210>)
   1f6f0:	1d3a      	adds	r2, r7, #4
   1f6f2:	8812      	ldrh	r2, [r2, #0]
   1f6f4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1f6f6:	4b0d      	ldr	r3, [pc, #52]	; (1f72c <sd_mmc_spi_adtc_start+0x214>)
   1f6f8:	2200      	movs	r2, #0
   1f6fa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1f6fc:	2301      	movs	r3, #1
}
   1f6fe:	0018      	movs	r0, r3
   1f700:	46bd      	mov	sp, r7
   1f702:	b009      	add	sp, #36	; 0x24
   1f704:	bd90      	pop	{r4, r7, pc}
   1f706:	46c0      	nop			; (mov r8, r8)
   1f708:	2000410f 	.word	0x2000410f
   1f70c:	0001efb9 	.word	0x0001efb9
   1f710:	200040cc 	.word	0x200040cc
   1f714:	00027add 	.word	0x00027add
   1f718:	000278b9 	.word	0x000278b9
   1f71c:	20004110 	.word	0x20004110
   1f720:	0001f075 	.word	0x0001f075
   1f724:	20004118 	.word	0x20004118
   1f728:	2000411a 	.word	0x2000411a
   1f72c:	20004114 	.word	0x20004114

0001f730 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1f730:	b580      	push	{r7, lr}
   1f732:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1f734:	4b02      	ldr	r3, [pc, #8]	; (1f740 <sd_mmc_spi_get_response+0x10>)
   1f736:	681b      	ldr	r3, [r3, #0]
}
   1f738:	0018      	movs	r0, r3
   1f73a:	46bd      	mov	sp, r7
   1f73c:	bd80      	pop	{r7, pc}
   1f73e:	46c0      	nop			; (mov r8, r8)
   1f740:	20004110 	.word	0x20004110

0001f744 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1f744:	b590      	push	{r4, r7, lr}
   1f746:	b085      	sub	sp, #20
   1f748:	af00      	add	r7, sp, #0
   1f74a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1f74c:	230e      	movs	r3, #14
   1f74e:	18fb      	adds	r3, r7, r3
   1f750:	22ff      	movs	r2, #255	; 0xff
   1f752:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f754:	4b1c      	ldr	r3, [pc, #112]	; (1f7c8 <sd_mmc_spi_read_word+0x84>)
   1f756:	2200      	movs	r2, #0
   1f758:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f75a:	4b1c      	ldr	r3, [pc, #112]	; (1f7cc <sd_mmc_spi_read_word+0x88>)
   1f75c:	681a      	ldr	r2, [r3, #0]
   1f75e:	4b1c      	ldr	r3, [pc, #112]	; (1f7d0 <sd_mmc_spi_read_word+0x8c>)
   1f760:	881b      	ldrh	r3, [r3, #0]
   1f762:	0019      	movs	r1, r3
   1f764:	4b1b      	ldr	r3, [pc, #108]	; (1f7d4 <sd_mmc_spi_read_word+0x90>)
   1f766:	0010      	movs	r0, r2
   1f768:	4798      	blx	r3
   1f76a:	1e0b      	subs	r3, r1, #0
   1f76c:	d10a      	bne.n	1f784 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1f76e:	4b1a      	ldr	r3, [pc, #104]	; (1f7d8 <sd_mmc_spi_read_word+0x94>)
   1f770:	4798      	blx	r3
   1f772:	0003      	movs	r3, r0
   1f774:	001a      	movs	r2, r3
   1f776:	2301      	movs	r3, #1
   1f778:	4053      	eors	r3, r2
   1f77a:	b2db      	uxtb	r3, r3
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	d001      	beq.n	1f784 <sd_mmc_spi_read_word+0x40>
			return false;
   1f780:	2300      	movs	r3, #0
   1f782:	e01d      	b.n	1f7c0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1f784:	230e      	movs	r3, #14
   1f786:	18fb      	adds	r3, r7, r3
   1f788:	881b      	ldrh	r3, [r3, #0]
   1f78a:	1d39      	adds	r1, r7, #4
   1f78c:	4813      	ldr	r0, [pc, #76]	; (1f7dc <sd_mmc_spi_read_word+0x98>)
   1f78e:	2204      	movs	r2, #4
   1f790:	4c13      	ldr	r4, [pc, #76]	; (1f7e0 <sd_mmc_spi_read_word+0x9c>)
   1f792:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1f794:	687b      	ldr	r3, [r7, #4]
   1f796:	687a      	ldr	r2, [r7, #4]
   1f798:	6812      	ldr	r2, [r2, #0]
   1f79a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1f79c:	4b0b      	ldr	r3, [pc, #44]	; (1f7cc <sd_mmc_spi_read_word+0x88>)
   1f79e:	681b      	ldr	r3, [r3, #0]
   1f7a0:	1d1a      	adds	r2, r3, #4
   1f7a2:	4b0a      	ldr	r3, [pc, #40]	; (1f7cc <sd_mmc_spi_read_word+0x88>)
   1f7a4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f7a6:	4b09      	ldr	r3, [pc, #36]	; (1f7cc <sd_mmc_spi_read_word+0x88>)
   1f7a8:	681a      	ldr	r2, [r3, #0]
   1f7aa:	4b09      	ldr	r3, [pc, #36]	; (1f7d0 <sd_mmc_spi_read_word+0x8c>)
   1f7ac:	881b      	ldrh	r3, [r3, #0]
   1f7ae:	0019      	movs	r1, r3
   1f7b0:	4b08      	ldr	r3, [pc, #32]	; (1f7d4 <sd_mmc_spi_read_word+0x90>)
   1f7b2:	0010      	movs	r0, r2
   1f7b4:	4798      	blx	r3
   1f7b6:	1e0b      	subs	r3, r1, #0
   1f7b8:	d101      	bne.n	1f7be <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1f7ba:	4b0a      	ldr	r3, [pc, #40]	; (1f7e4 <sd_mmc_spi_read_word+0xa0>)
   1f7bc:	4798      	blx	r3
	}
	return true;
   1f7be:	2301      	movs	r3, #1
}
   1f7c0:	0018      	movs	r0, r3
   1f7c2:	46bd      	mov	sp, r7
   1f7c4:	b005      	add	sp, #20
   1f7c6:	bd90      	pop	{r4, r7, pc}
   1f7c8:	2000410f 	.word	0x2000410f
   1f7cc:	20004114 	.word	0x20004114
   1f7d0:	20004118 	.word	0x20004118
   1f7d4:	00032351 	.word	0x00032351
   1f7d8:	0001f0e1 	.word	0x0001f0e1
   1f7dc:	200040cc 	.word	0x200040cc
   1f7e0:	000278b9 	.word	0x000278b9
   1f7e4:	0001f165 	.word	0x0001f165

0001f7e8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f7e8:	b590      	push	{r4, r7, lr}
   1f7ea:	b085      	sub	sp, #20
   1f7ec:	af00      	add	r7, sp, #0
   1f7ee:	6078      	str	r0, [r7, #4]
   1f7f0:	000a      	movs	r2, r1
   1f7f2:	1cbb      	adds	r3, r7, #2
   1f7f4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1f7f6:	230a      	movs	r3, #10
   1f7f8:	18fb      	adds	r3, r7, r3
   1f7fa:	22ff      	movs	r2, #255	; 0xff
   1f7fc:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f7fe:	4b1c      	ldr	r3, [pc, #112]	; (1f870 <sd_mmc_spi_start_read_blocks+0x88>)
   1f800:	2200      	movs	r2, #0
   1f802:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f804:	2300      	movs	r3, #0
   1f806:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f808:	e025      	b.n	1f856 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1f80a:	4b1a      	ldr	r3, [pc, #104]	; (1f874 <sd_mmc_spi_start_read_blocks+0x8c>)
   1f80c:	4798      	blx	r3
   1f80e:	0003      	movs	r3, r0
   1f810:	001a      	movs	r2, r3
   1f812:	2301      	movs	r3, #1
   1f814:	4053      	eors	r3, r2
   1f816:	b2db      	uxtb	r3, r3
   1f818:	2b00      	cmp	r3, #0
   1f81a:	d001      	beq.n	1f820 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1f81c:	2300      	movs	r3, #0
   1f81e:	e022      	b.n	1f866 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1f820:	687a      	ldr	r2, [r7, #4]
   1f822:	68fb      	ldr	r3, [r7, #12]
   1f824:	18d1      	adds	r1, r2, r3
   1f826:	4b14      	ldr	r3, [pc, #80]	; (1f878 <sd_mmc_spi_start_read_blocks+0x90>)
   1f828:	881a      	ldrh	r2, [r3, #0]
   1f82a:	230a      	movs	r3, #10
   1f82c:	18fb      	adds	r3, r7, r3
   1f82e:	881b      	ldrh	r3, [r3, #0]
   1f830:	4812      	ldr	r0, [pc, #72]	; (1f87c <sd_mmc_spi_start_read_blocks+0x94>)
   1f832:	4c13      	ldr	r4, [pc, #76]	; (1f880 <sd_mmc_spi_start_read_blocks+0x98>)
   1f834:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1f836:	4b10      	ldr	r3, [pc, #64]	; (1f878 <sd_mmc_spi_start_read_blocks+0x90>)
   1f838:	881b      	ldrh	r3, [r3, #0]
   1f83a:	001a      	movs	r2, r3
   1f83c:	68fb      	ldr	r3, [r7, #12]
   1f83e:	189b      	adds	r3, r3, r2
   1f840:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f842:	4b0d      	ldr	r3, [pc, #52]	; (1f878 <sd_mmc_spi_start_read_blocks+0x90>)
   1f844:	881b      	ldrh	r3, [r3, #0]
   1f846:	001a      	movs	r2, r3
   1f848:	4b0e      	ldr	r3, [pc, #56]	; (1f884 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f84a:	681b      	ldr	r3, [r3, #0]
   1f84c:	18d2      	adds	r2, r2, r3
   1f84e:	4b0d      	ldr	r3, [pc, #52]	; (1f884 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f850:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1f852:	4b0d      	ldr	r3, [pc, #52]	; (1f888 <sd_mmc_spi_start_read_blocks+0xa0>)
   1f854:	4798      	blx	r3
	while (nb_block--) {
   1f856:	1cbb      	adds	r3, r7, #2
   1f858:	881b      	ldrh	r3, [r3, #0]
   1f85a:	1cba      	adds	r2, r7, #2
   1f85c:	1e59      	subs	r1, r3, #1
   1f85e:	8011      	strh	r1, [r2, #0]
   1f860:	2b00      	cmp	r3, #0
   1f862:	d1d2      	bne.n	1f80a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f864:	2301      	movs	r3, #1
}
   1f866:	0018      	movs	r0, r3
   1f868:	46bd      	mov	sp, r7
   1f86a:	b005      	add	sp, #20
   1f86c:	bd90      	pop	{r4, r7, pc}
   1f86e:	46c0      	nop			; (mov r8, r8)
   1f870:	2000410f 	.word	0x2000410f
   1f874:	0001f0e1 	.word	0x0001f0e1
   1f878:	20004118 	.word	0x20004118
   1f87c:	200040cc 	.word	0x200040cc
   1f880:	000278b9 	.word	0x000278b9
   1f884:	20004114 	.word	0x20004114
   1f888:	0001f165 	.word	0x0001f165

0001f88c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f88c:	b580      	push	{r7, lr}
   1f88e:	af00      	add	r7, sp, #0
	return true;
   1f890:	2301      	movs	r3, #1
}
   1f892:	0018      	movs	r0, r3
   1f894:	46bd      	mov	sp, r7
   1f896:	bd80      	pop	{r7, pc}

0001f898 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f898:	b580      	push	{r7, lr}
   1f89a:	b084      	sub	sp, #16
   1f89c:	af00      	add	r7, sp, #0
   1f89e:	6078      	str	r0, [r7, #4]
   1f8a0:	000a      	movs	r2, r1
   1f8a2:	1cbb      	adds	r3, r7, #2
   1f8a4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f8a6:	4b24      	ldr	r3, [pc, #144]	; (1f938 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f8a8:	2200      	movs	r2, #0
   1f8aa:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f8ac:	2300      	movs	r3, #0
   1f8ae:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f8b0:	e035      	b.n	1f91e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f8b2:	4b22      	ldr	r3, [pc, #136]	; (1f93c <sd_mmc_spi_start_write_blocks+0xa4>)
   1f8b4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f8b6:	687a      	ldr	r2, [r7, #4]
   1f8b8:	68fb      	ldr	r3, [r7, #12]
   1f8ba:	18d1      	adds	r1, r2, r3
   1f8bc:	4b20      	ldr	r3, [pc, #128]	; (1f940 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f8be:	881a      	ldrh	r2, [r3, #0]
   1f8c0:	4b20      	ldr	r3, [pc, #128]	; (1f944 <sd_mmc_spi_start_write_blocks+0xac>)
   1f8c2:	0018      	movs	r0, r3
   1f8c4:	4b20      	ldr	r3, [pc, #128]	; (1f948 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f8c6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f8c8:	4b1d      	ldr	r3, [pc, #116]	; (1f940 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f8ca:	881b      	ldrh	r3, [r3, #0]
   1f8cc:	001a      	movs	r2, r3
   1f8ce:	68fb      	ldr	r3, [r7, #12]
   1f8d0:	189b      	adds	r3, r3, r2
   1f8d2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f8d4:	4b1a      	ldr	r3, [pc, #104]	; (1f940 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f8d6:	881b      	ldrh	r3, [r3, #0]
   1f8d8:	001a      	movs	r2, r3
   1f8da:	4b1c      	ldr	r3, [pc, #112]	; (1f94c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f8dc:	681b      	ldr	r3, [r3, #0]
   1f8de:	18d2      	adds	r2, r2, r3
   1f8e0:	4b1a      	ldr	r3, [pc, #104]	; (1f94c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f8e2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f8e4:	4b1a      	ldr	r3, [pc, #104]	; (1f950 <sd_mmc_spi_start_write_blocks+0xb8>)
   1f8e6:	4798      	blx	r3
   1f8e8:	0003      	movs	r3, r0
   1f8ea:	001a      	movs	r2, r3
   1f8ec:	2301      	movs	r3, #1
   1f8ee:	4053      	eors	r3, r2
   1f8f0:	b2db      	uxtb	r3, r3
   1f8f2:	2b00      	cmp	r3, #0
   1f8f4:	d001      	beq.n	1f8fa <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f8f6:	2300      	movs	r3, #0
   1f8f8:	e019      	b.n	1f92e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f8fa:	1cbb      	adds	r3, r7, #2
   1f8fc:	881b      	ldrh	r3, [r3, #0]
   1f8fe:	2b00      	cmp	r3, #0
   1f900:	d00d      	beq.n	1f91e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1f902:	4b14      	ldr	r3, [pc, #80]	; (1f954 <sd_mmc_spi_start_write_blocks+0xbc>)
   1f904:	4798      	blx	r3
   1f906:	0003      	movs	r3, r0
   1f908:	001a      	movs	r2, r3
   1f90a:	2301      	movs	r3, #1
   1f90c:	4053      	eors	r3, r2
   1f90e:	b2db      	uxtb	r3, r3
   1f910:	2b00      	cmp	r3, #0
   1f912:	d004      	beq.n	1f91e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f914:	4b08      	ldr	r3, [pc, #32]	; (1f938 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f916:	2205      	movs	r2, #5
   1f918:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1f91a:	2300      	movs	r3, #0
   1f91c:	e007      	b.n	1f92e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1f91e:	1cbb      	adds	r3, r7, #2
   1f920:	881b      	ldrh	r3, [r3, #0]
   1f922:	1cba      	adds	r2, r7, #2
   1f924:	1e59      	subs	r1, r3, #1
   1f926:	8011      	strh	r1, [r2, #0]
   1f928:	2b00      	cmp	r3, #0
   1f92a:	d1c2      	bne.n	1f8b2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1f92c:	2301      	movs	r3, #1
}
   1f92e:	0018      	movs	r0, r3
   1f930:	46bd      	mov	sp, r7
   1f932:	b004      	add	sp, #16
   1f934:	bd80      	pop	{r7, pc}
   1f936:	46c0      	nop			; (mov r8, r8)
   1f938:	2000410f 	.word	0x2000410f
   1f93c:	0001f191 	.word	0x0001f191
   1f940:	20004118 	.word	0x20004118
   1f944:	200040cc 	.word	0x200040cc
   1f948:	00027add 	.word	0x00027add
   1f94c:	20004114 	.word	0x20004114
   1f950:	0001f1e1 	.word	0x0001f1e1
   1f954:	0001f075 	.word	0x0001f075

0001f958 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1f958:	b580      	push	{r7, lr}
   1f95a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1f95c:	4b09      	ldr	r3, [pc, #36]	; (1f984 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1f95e:	4798      	blx	r3
   1f960:	0003      	movs	r3, r0
   1f962:	001a      	movs	r2, r3
   1f964:	2301      	movs	r3, #1
   1f966:	4053      	eors	r3, r2
   1f968:	b2db      	uxtb	r3, r3
   1f96a:	2b00      	cmp	r3, #0
   1f96c:	d004      	beq.n	1f978 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f96e:	4b06      	ldr	r3, [pc, #24]	; (1f988 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1f970:	2205      	movs	r2, #5
   1f972:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1f974:	2300      	movs	r3, #0
   1f976:	e002      	b.n	1f97e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1f978:	4b04      	ldr	r3, [pc, #16]	; (1f98c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1f97a:	4798      	blx	r3
   1f97c:	0003      	movs	r3, r0
}
   1f97e:	0018      	movs	r0, r3
   1f980:	46bd      	mov	sp, r7
   1f982:	bd80      	pop	{r7, pc}
   1f984:	0001f075 	.word	0x0001f075
   1f988:	2000410f 	.word	0x2000410f
   1f98c:	0001f275 	.word	0x0001f275

0001f990 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1f990:	b580      	push	{r7, lr}
   1f992:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f994:	2000      	movs	r0, #0
   1f996:	4b0f      	ldr	r3, [pc, #60]	; (1f9d4 <delay_init+0x44>)
   1f998:	4798      	blx	r3
   1f99a:	0002      	movs	r2, r0
   1f99c:	4b0e      	ldr	r3, [pc, #56]	; (1f9d8 <delay_init+0x48>)
   1f99e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1f9a0:	4b0d      	ldr	r3, [pc, #52]	; (1f9d8 <delay_init+0x48>)
   1f9a2:	6818      	ldr	r0, [r3, #0]
   1f9a4:	4b0d      	ldr	r3, [pc, #52]	; (1f9dc <delay_init+0x4c>)
   1f9a6:	22fa      	movs	r2, #250	; 0xfa
   1f9a8:	0091      	lsls	r1, r2, #2
   1f9aa:	4798      	blx	r3
   1f9ac:	0003      	movs	r3, r0
   1f9ae:	001a      	movs	r2, r3
   1f9b0:	4b09      	ldr	r3, [pc, #36]	; (1f9d8 <delay_init+0x48>)
   1f9b2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1f9b4:	4b08      	ldr	r3, [pc, #32]	; (1f9d8 <delay_init+0x48>)
   1f9b6:	6818      	ldr	r0, [r3, #0]
   1f9b8:	4b08      	ldr	r3, [pc, #32]	; (1f9dc <delay_init+0x4c>)
   1f9ba:	22fa      	movs	r2, #250	; 0xfa
   1f9bc:	0091      	lsls	r1, r2, #2
   1f9be:	4798      	blx	r3
   1f9c0:	0003      	movs	r3, r0
   1f9c2:	001a      	movs	r2, r3
   1f9c4:	4b06      	ldr	r3, [pc, #24]	; (1f9e0 <delay_init+0x50>)
   1f9c6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f9c8:	4b06      	ldr	r3, [pc, #24]	; (1f9e4 <delay_init+0x54>)
   1f9ca:	2205      	movs	r2, #5
   1f9cc:	601a      	str	r2, [r3, #0]
}
   1f9ce:	46c0      	nop			; (mov r8, r8)
   1f9d0:	46bd      	mov	sp, r7
   1f9d2:	bd80      	pop	{r7, pc}
   1f9d4:	00029661 	.word	0x00029661
   1f9d8:	20000114 	.word	0x20000114
   1f9dc:	00032245 	.word	0x00032245
   1f9e0:	20000118 	.word	0x20000118
   1f9e4:	e000e010 	.word	0xe000e010

0001f9e8 <system_pinmux_get_group_from_gpio_pin>:
{
   1f9e8:	b580      	push	{r7, lr}
   1f9ea:	b084      	sub	sp, #16
   1f9ec:	af00      	add	r7, sp, #0
   1f9ee:	0002      	movs	r2, r0
   1f9f0:	1dfb      	adds	r3, r7, #7
   1f9f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f9f4:	230f      	movs	r3, #15
   1f9f6:	18fb      	adds	r3, r7, r3
   1f9f8:	1dfa      	adds	r2, r7, #7
   1f9fa:	7812      	ldrb	r2, [r2, #0]
   1f9fc:	09d2      	lsrs	r2, r2, #7
   1f9fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fa00:	230e      	movs	r3, #14
   1fa02:	18fb      	adds	r3, r7, r3
   1fa04:	1dfa      	adds	r2, r7, #7
   1fa06:	7812      	ldrb	r2, [r2, #0]
   1fa08:	0952      	lsrs	r2, r2, #5
   1fa0a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fa0c:	4b0d      	ldr	r3, [pc, #52]	; (1fa44 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fa0e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fa10:	230f      	movs	r3, #15
   1fa12:	18fb      	adds	r3, r7, r3
   1fa14:	781b      	ldrb	r3, [r3, #0]
   1fa16:	2b00      	cmp	r3, #0
   1fa18:	d10f      	bne.n	1fa3a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fa1a:	230f      	movs	r3, #15
   1fa1c:	18fb      	adds	r3, r7, r3
   1fa1e:	781b      	ldrb	r3, [r3, #0]
   1fa20:	009b      	lsls	r3, r3, #2
   1fa22:	2210      	movs	r2, #16
   1fa24:	4694      	mov	ip, r2
   1fa26:	44bc      	add	ip, r7
   1fa28:	4463      	add	r3, ip
   1fa2a:	3b08      	subs	r3, #8
   1fa2c:	681a      	ldr	r2, [r3, #0]
   1fa2e:	230e      	movs	r3, #14
   1fa30:	18fb      	adds	r3, r7, r3
   1fa32:	781b      	ldrb	r3, [r3, #0]
   1fa34:	01db      	lsls	r3, r3, #7
   1fa36:	18d3      	adds	r3, r2, r3
   1fa38:	e000      	b.n	1fa3c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fa3a:	2300      	movs	r3, #0
}
   1fa3c:	0018      	movs	r0, r3
   1fa3e:	46bd      	mov	sp, r7
   1fa40:	b004      	add	sp, #16
   1fa42:	bd80      	pop	{r7, pc}
   1fa44:	41004400 	.word	0x41004400

0001fa48 <system_interrupt_enable_global>:
{
   1fa48:	b580      	push	{r7, lr}
   1fa4a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1fa4c:	4b04      	ldr	r3, [pc, #16]	; (1fa60 <system_interrupt_enable_global+0x18>)
   1fa4e:	2201      	movs	r2, #1
   1fa50:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1fa52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1fa56:	b662      	cpsie	i
}
   1fa58:	46c0      	nop			; (mov r8, r8)
   1fa5a:	46bd      	mov	sp, r7
   1fa5c:	bd80      	pop	{r7, pc}
   1fa5e:	46c0      	nop			; (mov r8, r8)
   1fa60:	2000011e 	.word	0x2000011e

0001fa64 <port_get_group_from_gpio_pin>:
{
   1fa64:	b580      	push	{r7, lr}
   1fa66:	b082      	sub	sp, #8
   1fa68:	af00      	add	r7, sp, #0
   1fa6a:	0002      	movs	r2, r0
   1fa6c:	1dfb      	adds	r3, r7, #7
   1fa6e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fa70:	1dfb      	adds	r3, r7, #7
   1fa72:	781b      	ldrb	r3, [r3, #0]
   1fa74:	0018      	movs	r0, r3
   1fa76:	4b03      	ldr	r3, [pc, #12]	; (1fa84 <port_get_group_from_gpio_pin+0x20>)
   1fa78:	4798      	blx	r3
   1fa7a:	0003      	movs	r3, r0
}
   1fa7c:	0018      	movs	r0, r3
   1fa7e:	46bd      	mov	sp, r7
   1fa80:	b002      	add	sp, #8
   1fa82:	bd80      	pop	{r7, pc}
   1fa84:	0001f9e9 	.word	0x0001f9e9

0001fa88 <port_get_config_defaults>:
{
   1fa88:	b580      	push	{r7, lr}
   1fa8a:	b082      	sub	sp, #8
   1fa8c:	af00      	add	r7, sp, #0
   1fa8e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fa90:	687b      	ldr	r3, [r7, #4]
   1fa92:	2200      	movs	r2, #0
   1fa94:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fa96:	687b      	ldr	r3, [r7, #4]
   1fa98:	2201      	movs	r2, #1
   1fa9a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fa9c:	687b      	ldr	r3, [r7, #4]
   1fa9e:	2200      	movs	r2, #0
   1faa0:	709a      	strb	r2, [r3, #2]
}
   1faa2:	46c0      	nop			; (mov r8, r8)
   1faa4:	46bd      	mov	sp, r7
   1faa6:	b002      	add	sp, #8
   1faa8:	bd80      	pop	{r7, pc}
	...

0001faac <port_pin_set_output_level>:
{
   1faac:	b580      	push	{r7, lr}
   1faae:	b084      	sub	sp, #16
   1fab0:	af00      	add	r7, sp, #0
   1fab2:	0002      	movs	r2, r0
   1fab4:	1dfb      	adds	r3, r7, #7
   1fab6:	701a      	strb	r2, [r3, #0]
   1fab8:	1dbb      	adds	r3, r7, #6
   1faba:	1c0a      	adds	r2, r1, #0
   1fabc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fabe:	1dfb      	adds	r3, r7, #7
   1fac0:	781b      	ldrb	r3, [r3, #0]
   1fac2:	0018      	movs	r0, r3
   1fac4:	4b0d      	ldr	r3, [pc, #52]	; (1fafc <port_pin_set_output_level+0x50>)
   1fac6:	4798      	blx	r3
   1fac8:	0003      	movs	r3, r0
   1faca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1facc:	1dfb      	adds	r3, r7, #7
   1face:	781b      	ldrb	r3, [r3, #0]
   1fad0:	221f      	movs	r2, #31
   1fad2:	4013      	ands	r3, r2
   1fad4:	2201      	movs	r2, #1
   1fad6:	409a      	lsls	r2, r3
   1fad8:	0013      	movs	r3, r2
   1fada:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fadc:	1dbb      	adds	r3, r7, #6
   1fade:	781b      	ldrb	r3, [r3, #0]
   1fae0:	2b00      	cmp	r3, #0
   1fae2:	d003      	beq.n	1faec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fae4:	68fb      	ldr	r3, [r7, #12]
   1fae6:	68ba      	ldr	r2, [r7, #8]
   1fae8:	619a      	str	r2, [r3, #24]
}
   1faea:	e002      	b.n	1faf2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1faec:	68fb      	ldr	r3, [r7, #12]
   1faee:	68ba      	ldr	r2, [r7, #8]
   1faf0:	615a      	str	r2, [r3, #20]
}
   1faf2:	46c0      	nop			; (mov r8, r8)
   1faf4:	46bd      	mov	sp, r7
   1faf6:	b004      	add	sp, #16
   1faf8:	bd80      	pop	{r7, pc}
   1fafa:	46c0      	nop			; (mov r8, r8)
   1fafc:	0001fa65 	.word	0x0001fa65

0001fb00 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1fb00:	b580      	push	{r7, lr}
   1fb02:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1fb04:	4b04      	ldr	r3, [pc, #16]	; (1fb18 <chip_isr+0x18>)
   1fb06:	681b      	ldr	r3, [r3, #0]
   1fb08:	2b00      	cmp	r3, #0
   1fb0a:	d002      	beq.n	1fb12 <chip_isr+0x12>
		gpfIsr();
   1fb0c:	4b02      	ldr	r3, [pc, #8]	; (1fb18 <chip_isr+0x18>)
   1fb0e:	681b      	ldr	r3, [r3, #0]
   1fb10:	4798      	blx	r3
	}
}
   1fb12:	46c0      	nop			; (mov r8, r8)
   1fb14:	46bd      	mov	sp, r7
   1fb16:	bd80      	pop	{r7, pc}
   1fb18:	2000411c 	.word	0x2000411c

0001fb1c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1fb1c:	b580      	push	{r7, lr}
   1fb1e:	b082      	sub	sp, #8
   1fb20:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1fb22:	1d3b      	adds	r3, r7, #4
   1fb24:	0018      	movs	r0, r3
   1fb26:	4b10      	ldr	r3, [pc, #64]	; (1fb68 <init_chip_pins+0x4c>)
   1fb28:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1fb2a:	1d3b      	adds	r3, r7, #4
   1fb2c:	2201      	movs	r2, #1
   1fb2e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1fb30:	1d3b      	adds	r3, r7, #4
   1fb32:	0019      	movs	r1, r3
   1fb34:	201b      	movs	r0, #27
   1fb36:	4b0d      	ldr	r3, [pc, #52]	; (1fb6c <init_chip_pins+0x50>)
   1fb38:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1fb3a:	1d3b      	adds	r3, r7, #4
   1fb3c:	0019      	movs	r1, r3
   1fb3e:	201c      	movs	r0, #28
   1fb40:	4b0a      	ldr	r3, [pc, #40]	; (1fb6c <init_chip_pins+0x50>)
   1fb42:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1fb44:	1d3b      	adds	r3, r7, #4
   1fb46:	0019      	movs	r1, r3
   1fb48:	2028      	movs	r0, #40	; 0x28
   1fb4a:	4b08      	ldr	r3, [pc, #32]	; (1fb6c <init_chip_pins+0x50>)
   1fb4c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fb4e:	2100      	movs	r1, #0
   1fb50:	201c      	movs	r0, #28
   1fb52:	4b07      	ldr	r3, [pc, #28]	; (1fb70 <init_chip_pins+0x54>)
   1fb54:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fb56:	2100      	movs	r1, #0
   1fb58:	201b      	movs	r0, #27
   1fb5a:	4b05      	ldr	r3, [pc, #20]	; (1fb70 <init_chip_pins+0x54>)
   1fb5c:	4798      	blx	r3
}
   1fb5e:	46c0      	nop			; (mov r8, r8)
   1fb60:	46bd      	mov	sp, r7
   1fb62:	b002      	add	sp, #8
   1fb64:	bd80      	pop	{r7, pc}
   1fb66:	46c0      	nop			; (mov r8, r8)
   1fb68:	0001fa89 	.word	0x0001fa89
   1fb6c:	000262a9 	.word	0x000262a9
   1fb70:	0001faad 	.word	0x0001faad

0001fb74 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1fb74:	b580      	push	{r7, lr}
   1fb76:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1fb78:	4b0b      	ldr	r3, [pc, #44]	; (1fba8 <nm_bsp_init+0x34>)
   1fb7a:	2200      	movs	r2, #0
   1fb7c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1fb7e:	4b0b      	ldr	r3, [pc, #44]	; (1fbac <nm_bsp_init+0x38>)
   1fb80:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1fb82:	4b0b      	ldr	r3, [pc, #44]	; (1fbb0 <nm_bsp_init+0x3c>)
   1fb84:	681b      	ldr	r3, [r3, #0]
   1fb86:	2201      	movs	r2, #1
   1fb88:	4013      	ands	r3, r2
   1fb8a:	d004      	beq.n	1fb96 <nm_bsp_init+0x22>
   1fb8c:	4b08      	ldr	r3, [pc, #32]	; (1fbb0 <nm_bsp_init+0x3c>)
   1fb8e:	681b      	ldr	r3, [r3, #0]
   1fb90:	2202      	movs	r2, #2
   1fb92:	4013      	ands	r3, r2
   1fb94:	d101      	bne.n	1fb9a <nm_bsp_init+0x26>
	    delay_init();
   1fb96:	4b07      	ldr	r3, [pc, #28]	; (1fbb4 <nm_bsp_init+0x40>)
   1fb98:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1fb9a:	4b07      	ldr	r3, [pc, #28]	; (1fbb8 <nm_bsp_init+0x44>)
   1fb9c:	4798      	blx	r3

	return M2M_SUCCESS;
   1fb9e:	2300      	movs	r3, #0
}
   1fba0:	0018      	movs	r0, r3
   1fba2:	46bd      	mov	sp, r7
   1fba4:	bd80      	pop	{r7, pc}
   1fba6:	46c0      	nop			; (mov r8, r8)
   1fba8:	2000411c 	.word	0x2000411c
   1fbac:	0001fb1d 	.word	0x0001fb1d
   1fbb0:	e000e010 	.word	0xe000e010
   1fbb4:	0001f991 	.word	0x0001f991
   1fbb8:	0001fa49 	.word	0x0001fa49

0001fbbc <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1fbbc:	b580      	push	{r7, lr}
   1fbbe:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fbc0:	2100      	movs	r1, #0
   1fbc2:	201c      	movs	r0, #28
   1fbc4:	4b0b      	ldr	r3, [pc, #44]	; (1fbf4 <nm_bsp_reset+0x38>)
   1fbc6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fbc8:	2100      	movs	r1, #0
   1fbca:	201b      	movs	r0, #27
   1fbcc:	4b09      	ldr	r3, [pc, #36]	; (1fbf4 <nm_bsp_reset+0x38>)
   1fbce:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fbd0:	2001      	movs	r0, #1
   1fbd2:	4b09      	ldr	r3, [pc, #36]	; (1fbf8 <nm_bsp_reset+0x3c>)
   1fbd4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1fbd6:	2101      	movs	r1, #1
   1fbd8:	201c      	movs	r0, #28
   1fbda:	4b06      	ldr	r3, [pc, #24]	; (1fbf4 <nm_bsp_reset+0x38>)
   1fbdc:	4798      	blx	r3
	nm_bsp_sleep(10);
   1fbde:	200a      	movs	r0, #10
   1fbe0:	4b05      	ldr	r3, [pc, #20]	; (1fbf8 <nm_bsp_reset+0x3c>)
   1fbe2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1fbe4:	2101      	movs	r1, #1
   1fbe6:	201b      	movs	r0, #27
   1fbe8:	4b02      	ldr	r3, [pc, #8]	; (1fbf4 <nm_bsp_reset+0x38>)
   1fbea:	4798      	blx	r3
}
   1fbec:	46c0      	nop			; (mov r8, r8)
   1fbee:	46bd      	mov	sp, r7
   1fbf0:	bd80      	pop	{r7, pc}
   1fbf2:	46c0      	nop			; (mov r8, r8)
   1fbf4:	0001faad 	.word	0x0001faad
   1fbf8:	0001fbfd 	.word	0x0001fbfd

0001fbfc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1fbfc:	b580      	push	{r7, lr}
   1fbfe:	b082      	sub	sp, #8
   1fc00:	af00      	add	r7, sp, #0
   1fc02:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1fc04:	687b      	ldr	r3, [r7, #4]
   1fc06:	0018      	movs	r0, r3
   1fc08:	4b02      	ldr	r3, [pc, #8]	; (1fc14 <nm_bsp_sleep+0x18>)
   1fc0a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1fc0c:	46c0      	nop			; (mov r8, r8)
   1fc0e:	46bd      	mov	sp, r7
   1fc10:	b002      	add	sp, #8
   1fc12:	bd80      	pop	{r7, pc}
   1fc14:	0001ba11 	.word	0x0001ba11

0001fc18 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1fc18:	b580      	push	{r7, lr}
   1fc1a:	b086      	sub	sp, #24
   1fc1c:	af00      	add	r7, sp, #0
   1fc1e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1fc20:	4b15      	ldr	r3, [pc, #84]	; (1fc78 <nm_bsp_register_isr+0x60>)
   1fc22:	687a      	ldr	r2, [r7, #4]
   1fc24:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1fc26:	230c      	movs	r3, #12
   1fc28:	18fb      	adds	r3, r7, r3
   1fc2a:	0018      	movs	r0, r3
   1fc2c:	4b13      	ldr	r3, [pc, #76]	; (1fc7c <nm_bsp_register_isr+0x64>)
   1fc2e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1fc30:	230c      	movs	r3, #12
   1fc32:	18fb      	adds	r3, r7, r3
   1fc34:	2229      	movs	r2, #41	; 0x29
   1fc36:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1fc38:	230c      	movs	r3, #12
   1fc3a:	18fb      	adds	r3, r7, r3
   1fc3c:	2200      	movs	r2, #0
   1fc3e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1fc40:	230c      	movs	r3, #12
   1fc42:	18fb      	adds	r3, r7, r3
   1fc44:	2201      	movs	r2, #1
   1fc46:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1fc48:	230c      	movs	r3, #12
   1fc4a:	18fb      	adds	r3, r7, r3
   1fc4c:	2202      	movs	r2, #2
   1fc4e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1fc50:	230c      	movs	r3, #12
   1fc52:	18fb      	adds	r3, r7, r3
   1fc54:	0019      	movs	r1, r3
   1fc56:	2009      	movs	r0, #9
   1fc58:	4b09      	ldr	r3, [pc, #36]	; (1fc80 <nm_bsp_register_isr+0x68>)
   1fc5a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1fc5c:	4b09      	ldr	r3, [pc, #36]	; (1fc84 <nm_bsp_register_isr+0x6c>)
   1fc5e:	2200      	movs	r2, #0
   1fc60:	2109      	movs	r1, #9
   1fc62:	0018      	movs	r0, r3
   1fc64:	4b08      	ldr	r3, [pc, #32]	; (1fc88 <nm_bsp_register_isr+0x70>)
   1fc66:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fc68:	2100      	movs	r1, #0
   1fc6a:	2009      	movs	r0, #9
   1fc6c:	4b07      	ldr	r3, [pc, #28]	; (1fc8c <nm_bsp_register_isr+0x74>)
   1fc6e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1fc70:	46c0      	nop			; (mov r8, r8)
   1fc72:	46bd      	mov	sp, r7
   1fc74:	b006      	add	sp, #24
   1fc76:	bd80      	pop	{r7, pc}
   1fc78:	2000411c 	.word	0x2000411c
   1fc7c:	00026151 	.word	0x00026151
   1fc80:	00026185 	.word	0x00026185
   1fc84:	0001fb01 	.word	0x0001fb01
   1fc88:	00025d51 	.word	0x00025d51
   1fc8c:	00025db5 	.word	0x00025db5

0001fc90 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1fc90:	b580      	push	{r7, lr}
   1fc92:	b082      	sub	sp, #8
   1fc94:	af00      	add	r7, sp, #0
   1fc96:	0002      	movs	r2, r0
   1fc98:	1dfb      	adds	r3, r7, #7
   1fc9a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1fc9c:	1dfb      	adds	r3, r7, #7
   1fc9e:	781b      	ldrb	r3, [r3, #0]
   1fca0:	2b00      	cmp	r3, #0
   1fca2:	d004      	beq.n	1fcae <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fca4:	2100      	movs	r1, #0
   1fca6:	2009      	movs	r0, #9
   1fca8:	4b05      	ldr	r3, [pc, #20]	; (1fcc0 <nm_bsp_interrupt_ctrl+0x30>)
   1fcaa:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1fcac:	e003      	b.n	1fcb6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1fcae:	2100      	movs	r1, #0
   1fcb0:	2009      	movs	r0, #9
   1fcb2:	4b04      	ldr	r3, [pc, #16]	; (1fcc4 <nm_bsp_interrupt_ctrl+0x34>)
   1fcb4:	4798      	blx	r3
}
   1fcb6:	46c0      	nop			; (mov r8, r8)
   1fcb8:	46bd      	mov	sp, r7
   1fcba:	b002      	add	sp, #8
   1fcbc:	bd80      	pop	{r7, pc}
   1fcbe:	46c0      	nop			; (mov r8, r8)
   1fcc0:	00025db5 	.word	0x00025db5
   1fcc4:	00025dfd 	.word	0x00025dfd

0001fcc8 <system_pinmux_get_group_from_gpio_pin>:
{
   1fcc8:	b580      	push	{r7, lr}
   1fcca:	b084      	sub	sp, #16
   1fccc:	af00      	add	r7, sp, #0
   1fcce:	0002      	movs	r2, r0
   1fcd0:	1dfb      	adds	r3, r7, #7
   1fcd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fcd4:	230f      	movs	r3, #15
   1fcd6:	18fb      	adds	r3, r7, r3
   1fcd8:	1dfa      	adds	r2, r7, #7
   1fcda:	7812      	ldrb	r2, [r2, #0]
   1fcdc:	09d2      	lsrs	r2, r2, #7
   1fcde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fce0:	230e      	movs	r3, #14
   1fce2:	18fb      	adds	r3, r7, r3
   1fce4:	1dfa      	adds	r2, r7, #7
   1fce6:	7812      	ldrb	r2, [r2, #0]
   1fce8:	0952      	lsrs	r2, r2, #5
   1fcea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fcec:	4b0d      	ldr	r3, [pc, #52]	; (1fd24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fcee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fcf0:	230f      	movs	r3, #15
   1fcf2:	18fb      	adds	r3, r7, r3
   1fcf4:	781b      	ldrb	r3, [r3, #0]
   1fcf6:	2b00      	cmp	r3, #0
   1fcf8:	d10f      	bne.n	1fd1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fcfa:	230f      	movs	r3, #15
   1fcfc:	18fb      	adds	r3, r7, r3
   1fcfe:	781b      	ldrb	r3, [r3, #0]
   1fd00:	009b      	lsls	r3, r3, #2
   1fd02:	2210      	movs	r2, #16
   1fd04:	4694      	mov	ip, r2
   1fd06:	44bc      	add	ip, r7
   1fd08:	4463      	add	r3, ip
   1fd0a:	3b08      	subs	r3, #8
   1fd0c:	681a      	ldr	r2, [r3, #0]
   1fd0e:	230e      	movs	r3, #14
   1fd10:	18fb      	adds	r3, r7, r3
   1fd12:	781b      	ldrb	r3, [r3, #0]
   1fd14:	01db      	lsls	r3, r3, #7
   1fd16:	18d3      	adds	r3, r2, r3
   1fd18:	e000      	b.n	1fd1c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fd1a:	2300      	movs	r3, #0
}
   1fd1c:	0018      	movs	r0, r3
   1fd1e:	46bd      	mov	sp, r7
   1fd20:	b004      	add	sp, #16
   1fd22:	bd80      	pop	{r7, pc}
   1fd24:	41004400 	.word	0x41004400

0001fd28 <system_interrupt_enable>:
{
   1fd28:	b580      	push	{r7, lr}
   1fd2a:	b082      	sub	sp, #8
   1fd2c:	af00      	add	r7, sp, #0
   1fd2e:	0002      	movs	r2, r0
   1fd30:	1dfb      	adds	r3, r7, #7
   1fd32:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fd34:	4b06      	ldr	r3, [pc, #24]	; (1fd50 <system_interrupt_enable+0x28>)
   1fd36:	1dfa      	adds	r2, r7, #7
   1fd38:	7812      	ldrb	r2, [r2, #0]
   1fd3a:	0011      	movs	r1, r2
   1fd3c:	221f      	movs	r2, #31
   1fd3e:	400a      	ands	r2, r1
   1fd40:	2101      	movs	r1, #1
   1fd42:	4091      	lsls	r1, r2
   1fd44:	000a      	movs	r2, r1
   1fd46:	601a      	str	r2, [r3, #0]
}
   1fd48:	46c0      	nop			; (mov r8, r8)
   1fd4a:	46bd      	mov	sp, r7
   1fd4c:	b002      	add	sp, #8
   1fd4e:	bd80      	pop	{r7, pc}
   1fd50:	e000e100 	.word	0xe000e100

0001fd54 <system_interrupt_disable>:
{
   1fd54:	b580      	push	{r7, lr}
   1fd56:	b082      	sub	sp, #8
   1fd58:	af00      	add	r7, sp, #0
   1fd5a:	0002      	movs	r2, r0
   1fd5c:	1dfb      	adds	r3, r7, #7
   1fd5e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fd60:	4a07      	ldr	r2, [pc, #28]	; (1fd80 <system_interrupt_disable+0x2c>)
   1fd62:	1dfb      	adds	r3, r7, #7
   1fd64:	781b      	ldrb	r3, [r3, #0]
   1fd66:	0019      	movs	r1, r3
   1fd68:	231f      	movs	r3, #31
   1fd6a:	400b      	ands	r3, r1
   1fd6c:	2101      	movs	r1, #1
   1fd6e:	4099      	lsls	r1, r3
   1fd70:	000b      	movs	r3, r1
   1fd72:	0019      	movs	r1, r3
   1fd74:	2380      	movs	r3, #128	; 0x80
   1fd76:	50d1      	str	r1, [r2, r3]
}
   1fd78:	46c0      	nop			; (mov r8, r8)
   1fd7a:	46bd      	mov	sp, r7
   1fd7c:	b002      	add	sp, #8
   1fd7e:	bd80      	pop	{r7, pc}
   1fd80:	e000e100 	.word	0xe000e100

0001fd84 <port_get_group_from_gpio_pin>:
{
   1fd84:	b580      	push	{r7, lr}
   1fd86:	b082      	sub	sp, #8
   1fd88:	af00      	add	r7, sp, #0
   1fd8a:	0002      	movs	r2, r0
   1fd8c:	1dfb      	adds	r3, r7, #7
   1fd8e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fd90:	1dfb      	adds	r3, r7, #7
   1fd92:	781b      	ldrb	r3, [r3, #0]
   1fd94:	0018      	movs	r0, r3
   1fd96:	4b03      	ldr	r3, [pc, #12]	; (1fda4 <port_get_group_from_gpio_pin+0x20>)
   1fd98:	4798      	blx	r3
   1fd9a:	0003      	movs	r3, r0
}
   1fd9c:	0018      	movs	r0, r3
   1fd9e:	46bd      	mov	sp, r7
   1fda0:	b002      	add	sp, #8
   1fda2:	bd80      	pop	{r7, pc}
   1fda4:	0001fcc9 	.word	0x0001fcc9

0001fda8 <port_get_config_defaults>:
{
   1fda8:	b580      	push	{r7, lr}
   1fdaa:	b082      	sub	sp, #8
   1fdac:	af00      	add	r7, sp, #0
   1fdae:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fdb0:	687b      	ldr	r3, [r7, #4]
   1fdb2:	2200      	movs	r2, #0
   1fdb4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fdb6:	687b      	ldr	r3, [r7, #4]
   1fdb8:	2201      	movs	r2, #1
   1fdba:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fdbc:	687b      	ldr	r3, [r7, #4]
   1fdbe:	2200      	movs	r2, #0
   1fdc0:	709a      	strb	r2, [r3, #2]
}
   1fdc2:	46c0      	nop			; (mov r8, r8)
   1fdc4:	46bd      	mov	sp, r7
   1fdc6:	b002      	add	sp, #8
   1fdc8:	bd80      	pop	{r7, pc}
	...

0001fdcc <port_pin_set_output_level>:
{
   1fdcc:	b580      	push	{r7, lr}
   1fdce:	b084      	sub	sp, #16
   1fdd0:	af00      	add	r7, sp, #0
   1fdd2:	0002      	movs	r2, r0
   1fdd4:	1dfb      	adds	r3, r7, #7
   1fdd6:	701a      	strb	r2, [r3, #0]
   1fdd8:	1dbb      	adds	r3, r7, #6
   1fdda:	1c0a      	adds	r2, r1, #0
   1fddc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fdde:	1dfb      	adds	r3, r7, #7
   1fde0:	781b      	ldrb	r3, [r3, #0]
   1fde2:	0018      	movs	r0, r3
   1fde4:	4b0d      	ldr	r3, [pc, #52]	; (1fe1c <port_pin_set_output_level+0x50>)
   1fde6:	4798      	blx	r3
   1fde8:	0003      	movs	r3, r0
   1fdea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fdec:	1dfb      	adds	r3, r7, #7
   1fdee:	781b      	ldrb	r3, [r3, #0]
   1fdf0:	221f      	movs	r2, #31
   1fdf2:	4013      	ands	r3, r2
   1fdf4:	2201      	movs	r2, #1
   1fdf6:	409a      	lsls	r2, r3
   1fdf8:	0013      	movs	r3, r2
   1fdfa:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fdfc:	1dbb      	adds	r3, r7, #6
   1fdfe:	781b      	ldrb	r3, [r3, #0]
   1fe00:	2b00      	cmp	r3, #0
   1fe02:	d003      	beq.n	1fe0c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fe04:	68fb      	ldr	r3, [r7, #12]
   1fe06:	68ba      	ldr	r2, [r7, #8]
   1fe08:	619a      	str	r2, [r3, #24]
}
   1fe0a:	e002      	b.n	1fe12 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fe0c:	68fb      	ldr	r3, [r7, #12]
   1fe0e:	68ba      	ldr	r2, [r7, #8]
   1fe10:	615a      	str	r2, [r3, #20]
}
   1fe12:	46c0      	nop			; (mov r8, r8)
   1fe14:	46bd      	mov	sp, r7
   1fe16:	b004      	add	sp, #16
   1fe18:	bd80      	pop	{r7, pc}
   1fe1a:	46c0      	nop			; (mov r8, r8)
   1fe1c:	0001fd85 	.word	0x0001fd85

0001fe20 <spi_is_syncing>:
{
   1fe20:	b580      	push	{r7, lr}
   1fe22:	b084      	sub	sp, #16
   1fe24:	af00      	add	r7, sp, #0
   1fe26:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1fe28:	687b      	ldr	r3, [r7, #4]
   1fe2a:	681b      	ldr	r3, [r3, #0]
   1fe2c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1fe2e:	68fb      	ldr	r3, [r7, #12]
   1fe30:	69db      	ldr	r3, [r3, #28]
   1fe32:	1e5a      	subs	r2, r3, #1
   1fe34:	4193      	sbcs	r3, r2
   1fe36:	b2db      	uxtb	r3, r3
}
   1fe38:	0018      	movs	r0, r3
   1fe3a:	46bd      	mov	sp, r7
   1fe3c:	b004      	add	sp, #16
   1fe3e:	bd80      	pop	{r7, pc}

0001fe40 <spi_get_config_defaults>:
{
   1fe40:	b580      	push	{r7, lr}
   1fe42:	b082      	sub	sp, #8
   1fe44:	af00      	add	r7, sp, #0
   1fe46:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1fe48:	687b      	ldr	r3, [r7, #4]
   1fe4a:	2201      	movs	r2, #1
   1fe4c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1fe4e:	687b      	ldr	r3, [r7, #4]
   1fe50:	2200      	movs	r2, #0
   1fe52:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1fe54:	687b      	ldr	r3, [r7, #4]
   1fe56:	2200      	movs	r2, #0
   1fe58:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1fe5a:	687b      	ldr	r3, [r7, #4]
   1fe5c:	22c0      	movs	r2, #192	; 0xc0
   1fe5e:	0392      	lsls	r2, r2, #14
   1fe60:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1fe62:	687b      	ldr	r3, [r7, #4]
   1fe64:	2200      	movs	r2, #0
   1fe66:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1fe68:	687b      	ldr	r3, [r7, #4]
   1fe6a:	2200      	movs	r2, #0
   1fe6c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1fe6e:	687b      	ldr	r3, [r7, #4]
   1fe70:	2201      	movs	r2, #1
   1fe72:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1fe74:	687b      	ldr	r3, [r7, #4]
   1fe76:	2201      	movs	r2, #1
   1fe78:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1fe7a:	687b      	ldr	r3, [r7, #4]
   1fe7c:	2200      	movs	r2, #0
   1fe7e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1fe80:	687b      	ldr	r3, [r7, #4]
   1fe82:	2224      	movs	r2, #36	; 0x24
   1fe84:	2100      	movs	r1, #0
   1fe86:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1fe88:	687b      	ldr	r3, [r7, #4]
   1fe8a:	3318      	adds	r3, #24
   1fe8c:	220c      	movs	r2, #12
   1fe8e:	2100      	movs	r1, #0
   1fe90:	0018      	movs	r0, r3
   1fe92:	4b0a      	ldr	r3, [pc, #40]	; (1febc <spi_get_config_defaults+0x7c>)
   1fe94:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1fe96:	687b      	ldr	r3, [r7, #4]
   1fe98:	4a09      	ldr	r2, [pc, #36]	; (1fec0 <spi_get_config_defaults+0x80>)
   1fe9a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1fe9c:	687b      	ldr	r3, [r7, #4]
   1fe9e:	2200      	movs	r2, #0
   1fea0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1fea2:	687b      	ldr	r3, [r7, #4]
   1fea4:	2200      	movs	r2, #0
   1fea6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1fea8:	687b      	ldr	r3, [r7, #4]
   1feaa:	2200      	movs	r2, #0
   1feac:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1feae:	687b      	ldr	r3, [r7, #4]
   1feb0:	2200      	movs	r2, #0
   1feb2:	635a      	str	r2, [r3, #52]	; 0x34
};
   1feb4:	46c0      	nop			; (mov r8, r8)
   1feb6:	46bd      	mov	sp, r7
   1feb8:	b002      	add	sp, #8
   1feba:	bd80      	pop	{r7, pc}
   1febc:	00034317 	.word	0x00034317
   1fec0:	000186a0 	.word	0x000186a0

0001fec4 <spi_slave_inst_get_config_defaults>:
{
   1fec4:	b580      	push	{r7, lr}
   1fec6:	b082      	sub	sp, #8
   1fec8:	af00      	add	r7, sp, #0
   1feca:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1fecc:	687b      	ldr	r3, [r7, #4]
   1fece:	220a      	movs	r2, #10
   1fed0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1fed2:	687b      	ldr	r3, [r7, #4]
   1fed4:	2200      	movs	r2, #0
   1fed6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1fed8:	687b      	ldr	r3, [r7, #4]
   1feda:	2200      	movs	r2, #0
   1fedc:	709a      	strb	r2, [r3, #2]
}
   1fede:	46c0      	nop			; (mov r8, r8)
   1fee0:	46bd      	mov	sp, r7
   1fee2:	b002      	add	sp, #8
   1fee4:	bd80      	pop	{r7, pc}
	...

0001fee8 <spi_attach_slave>:
{
   1fee8:	b580      	push	{r7, lr}
   1feea:	b084      	sub	sp, #16
   1feec:	af00      	add	r7, sp, #0
   1feee:	6078      	str	r0, [r7, #4]
   1fef0:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1fef2:	683b      	ldr	r3, [r7, #0]
   1fef4:	781a      	ldrb	r2, [r3, #0]
   1fef6:	687b      	ldr	r3, [r7, #4]
   1fef8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1fefa:	683b      	ldr	r3, [r7, #0]
   1fefc:	785a      	ldrb	r2, [r3, #1]
   1fefe:	687b      	ldr	r3, [r7, #4]
   1ff00:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1ff02:	683b      	ldr	r3, [r7, #0]
   1ff04:	789a      	ldrb	r2, [r3, #2]
   1ff06:	687b      	ldr	r3, [r7, #4]
   1ff08:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1ff0a:	230c      	movs	r3, #12
   1ff0c:	18fb      	adds	r3, r7, r3
   1ff0e:	0018      	movs	r0, r3
   1ff10:	4b0b      	ldr	r3, [pc, #44]	; (1ff40 <spi_attach_slave+0x58>)
   1ff12:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1ff14:	230c      	movs	r3, #12
   1ff16:	18fb      	adds	r3, r7, r3
   1ff18:	2201      	movs	r2, #1
   1ff1a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1ff1c:	687b      	ldr	r3, [r7, #4]
   1ff1e:	781b      	ldrb	r3, [r3, #0]
   1ff20:	220c      	movs	r2, #12
   1ff22:	18ba      	adds	r2, r7, r2
   1ff24:	0011      	movs	r1, r2
   1ff26:	0018      	movs	r0, r3
   1ff28:	4b06      	ldr	r3, [pc, #24]	; (1ff44 <spi_attach_slave+0x5c>)
   1ff2a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1ff2c:	687b      	ldr	r3, [r7, #4]
   1ff2e:	781b      	ldrb	r3, [r3, #0]
   1ff30:	2101      	movs	r1, #1
   1ff32:	0018      	movs	r0, r3
   1ff34:	4b04      	ldr	r3, [pc, #16]	; (1ff48 <spi_attach_slave+0x60>)
   1ff36:	4798      	blx	r3
}
   1ff38:	46c0      	nop			; (mov r8, r8)
   1ff3a:	46bd      	mov	sp, r7
   1ff3c:	b004      	add	sp, #16
   1ff3e:	bd80      	pop	{r7, pc}
   1ff40:	0001fda9 	.word	0x0001fda9
   1ff44:	000262a9 	.word	0x000262a9
   1ff48:	0001fdcd 	.word	0x0001fdcd

0001ff4c <spi_enable>:
{
   1ff4c:	b580      	push	{r7, lr}
   1ff4e:	b084      	sub	sp, #16
   1ff50:	af00      	add	r7, sp, #0
   1ff52:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1ff54:	687b      	ldr	r3, [r7, #4]
   1ff56:	681b      	ldr	r3, [r3, #0]
   1ff58:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1ff5a:	687b      	ldr	r3, [r7, #4]
   1ff5c:	681b      	ldr	r3, [r3, #0]
   1ff5e:	0018      	movs	r0, r3
   1ff60:	4b0b      	ldr	r3, [pc, #44]	; (1ff90 <spi_enable+0x44>)
   1ff62:	4798      	blx	r3
   1ff64:	0003      	movs	r3, r0
   1ff66:	0018      	movs	r0, r3
   1ff68:	4b0a      	ldr	r3, [pc, #40]	; (1ff94 <spi_enable+0x48>)
   1ff6a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1ff6c:	46c0      	nop			; (mov r8, r8)
   1ff6e:	687b      	ldr	r3, [r7, #4]
   1ff70:	0018      	movs	r0, r3
   1ff72:	4b09      	ldr	r3, [pc, #36]	; (1ff98 <spi_enable+0x4c>)
   1ff74:	4798      	blx	r3
   1ff76:	1e03      	subs	r3, r0, #0
   1ff78:	d1f9      	bne.n	1ff6e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1ff7a:	68fb      	ldr	r3, [r7, #12]
   1ff7c:	681b      	ldr	r3, [r3, #0]
   1ff7e:	2202      	movs	r2, #2
   1ff80:	431a      	orrs	r2, r3
   1ff82:	68fb      	ldr	r3, [r7, #12]
   1ff84:	601a      	str	r2, [r3, #0]
}
   1ff86:	46c0      	nop			; (mov r8, r8)
   1ff88:	46bd      	mov	sp, r7
   1ff8a:	b004      	add	sp, #16
   1ff8c:	bd80      	pop	{r7, pc}
   1ff8e:	46c0      	nop			; (mov r8, r8)
   1ff90:	00026f79 	.word	0x00026f79
   1ff94:	0001fd29 	.word	0x0001fd29
   1ff98:	0001fe21 	.word	0x0001fe21

0001ff9c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1ff9c:	b580      	push	{r7, lr}
   1ff9e:	b084      	sub	sp, #16
   1ffa0:	af00      	add	r7, sp, #0
   1ffa2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ffa4:	687b      	ldr	r3, [r7, #4]
   1ffa6:	681b      	ldr	r3, [r3, #0]
   1ffa8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1ffaa:	687b      	ldr	r3, [r7, #4]
   1ffac:	681b      	ldr	r3, [r3, #0]
   1ffae:	0018      	movs	r0, r3
   1ffb0:	4b0e      	ldr	r3, [pc, #56]	; (1ffec <spi_disable+0x50>)
   1ffb2:	4798      	blx	r3
   1ffb4:	0003      	movs	r3, r0
   1ffb6:	0018      	movs	r0, r3
   1ffb8:	4b0d      	ldr	r3, [pc, #52]	; (1fff0 <spi_disable+0x54>)
   1ffba:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1ffbc:	46c0      	nop			; (mov r8, r8)
   1ffbe:	687b      	ldr	r3, [r7, #4]
   1ffc0:	0018      	movs	r0, r3
   1ffc2:	4b0c      	ldr	r3, [pc, #48]	; (1fff4 <spi_disable+0x58>)
   1ffc4:	4798      	blx	r3
   1ffc6:	1e03      	subs	r3, r0, #0
   1ffc8:	d1f9      	bne.n	1ffbe <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1ffca:	68fb      	ldr	r3, [r7, #12]
   1ffcc:	228f      	movs	r2, #143	; 0x8f
   1ffce:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1ffd0:	68fb      	ldr	r3, [r7, #12]
   1ffd2:	228f      	movs	r2, #143	; 0x8f
   1ffd4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1ffd6:	68fb      	ldr	r3, [r7, #12]
   1ffd8:	681b      	ldr	r3, [r3, #0]
   1ffda:	2202      	movs	r2, #2
   1ffdc:	4393      	bics	r3, r2
   1ffde:	001a      	movs	r2, r3
   1ffe0:	68fb      	ldr	r3, [r7, #12]
   1ffe2:	601a      	str	r2, [r3, #0]
}
   1ffe4:	46c0      	nop			; (mov r8, r8)
   1ffe6:	46bd      	mov	sp, r7
   1ffe8:	b004      	add	sp, #16
   1ffea:	bd80      	pop	{r7, pc}
   1ffec:	00026f79 	.word	0x00026f79
   1fff0:	0001fd55 	.word	0x0001fd55
   1fff4:	0001fe21 	.word	0x0001fe21

0001fff8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1fff8:	b580      	push	{r7, lr}
   1fffa:	b084      	sub	sp, #16
   1fffc:	af00      	add	r7, sp, #0
   1fffe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20000:	687b      	ldr	r3, [r7, #4]
   20002:	681b      	ldr	r3, [r3, #0]
   20004:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   20006:	68fb      	ldr	r3, [r7, #12]
   20008:	7e1b      	ldrb	r3, [r3, #24]
   2000a:	b2db      	uxtb	r3, r3
   2000c:	001a      	movs	r2, r3
   2000e:	2302      	movs	r3, #2
   20010:	4013      	ands	r3, r2
   20012:	1e5a      	subs	r2, r3, #1
   20014:	4193      	sbcs	r3, r2
   20016:	b2db      	uxtb	r3, r3
}
   20018:	0018      	movs	r0, r3
   2001a:	46bd      	mov	sp, r7
   2001c:	b004      	add	sp, #16
   2001e:	bd80      	pop	{r7, pc}

00020020 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20020:	b580      	push	{r7, lr}
   20022:	b084      	sub	sp, #16
   20024:	af00      	add	r7, sp, #0
   20026:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20028:	687b      	ldr	r3, [r7, #4]
   2002a:	681b      	ldr	r3, [r3, #0]
   2002c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2002e:	68fb      	ldr	r3, [r7, #12]
   20030:	7e1b      	ldrb	r3, [r3, #24]
   20032:	b2db      	uxtb	r3, r3
   20034:	001a      	movs	r2, r3
   20036:	2301      	movs	r3, #1
   20038:	4013      	ands	r3, r2
   2003a:	1e5a      	subs	r2, r3, #1
   2003c:	4193      	sbcs	r3, r2
   2003e:	b2db      	uxtb	r3, r3
}
   20040:	0018      	movs	r0, r3
   20042:	46bd      	mov	sp, r7
   20044:	b004      	add	sp, #16
   20046:	bd80      	pop	{r7, pc}

00020048 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   20048:	b580      	push	{r7, lr}
   2004a:	b084      	sub	sp, #16
   2004c:	af00      	add	r7, sp, #0
   2004e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20050:	687b      	ldr	r3, [r7, #4]
   20052:	681b      	ldr	r3, [r3, #0]
   20054:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20056:	68fb      	ldr	r3, [r7, #12]
   20058:	7e1b      	ldrb	r3, [r3, #24]
   2005a:	b2db      	uxtb	r3, r3
   2005c:	001a      	movs	r2, r3
   2005e:	2304      	movs	r3, #4
   20060:	4013      	ands	r3, r2
   20062:	1e5a      	subs	r2, r3, #1
   20064:	4193      	sbcs	r3, r2
   20066:	b2db      	uxtb	r3, r3
}
   20068:	0018      	movs	r0, r3
   2006a:	46bd      	mov	sp, r7
   2006c:	b004      	add	sp, #16
   2006e:	bd80      	pop	{r7, pc}

00020070 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20070:	b580      	push	{r7, lr}
   20072:	b084      	sub	sp, #16
   20074:	af00      	add	r7, sp, #0
   20076:	6078      	str	r0, [r7, #4]
   20078:	000a      	movs	r2, r1
   2007a:	1cbb      	adds	r3, r7, #2
   2007c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2007e:	687b      	ldr	r3, [r7, #4]
   20080:	681b      	ldr	r3, [r3, #0]
   20082:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20084:	687b      	ldr	r3, [r7, #4]
   20086:	0018      	movs	r0, r3
   20088:	4b0a      	ldr	r3, [pc, #40]	; (200b4 <spi_write+0x44>)
   2008a:	4798      	blx	r3
   2008c:	0003      	movs	r3, r0
   2008e:	001a      	movs	r2, r3
   20090:	2301      	movs	r3, #1
   20092:	4053      	eors	r3, r2
   20094:	b2db      	uxtb	r3, r3
   20096:	2b00      	cmp	r3, #0
   20098:	d001      	beq.n	2009e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2009a:	2305      	movs	r3, #5
   2009c:	e006      	b.n	200ac <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2009e:	1cbb      	adds	r3, r7, #2
   200a0:	881b      	ldrh	r3, [r3, #0]
   200a2:	05db      	lsls	r3, r3, #23
   200a4:	0dda      	lsrs	r2, r3, #23
   200a6:	68fb      	ldr	r3, [r7, #12]
   200a8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   200aa:	2300      	movs	r3, #0
}
   200ac:	0018      	movs	r0, r3
   200ae:	46bd      	mov	sp, r7
   200b0:	b004      	add	sp, #16
   200b2:	bd80      	pop	{r7, pc}
   200b4:	00020021 	.word	0x00020021

000200b8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   200b8:	b580      	push	{r7, lr}
   200ba:	b084      	sub	sp, #16
   200bc:	af00      	add	r7, sp, #0
   200be:	6078      	str	r0, [r7, #4]
   200c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   200c2:	687b      	ldr	r3, [r7, #4]
   200c4:	681b      	ldr	r3, [r3, #0]
   200c6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   200c8:	687b      	ldr	r3, [r7, #4]
   200ca:	0018      	movs	r0, r3
   200cc:	4b1b      	ldr	r3, [pc, #108]	; (2013c <spi_read+0x84>)
   200ce:	4798      	blx	r3
   200d0:	0003      	movs	r3, r0
   200d2:	001a      	movs	r2, r3
   200d4:	2301      	movs	r3, #1
   200d6:	4053      	eors	r3, r2
   200d8:	b2db      	uxtb	r3, r3
   200da:	2b00      	cmp	r3, #0
   200dc:	d001      	beq.n	200e2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   200de:	2310      	movs	r3, #16
   200e0:	e027      	b.n	20132 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   200e2:	230f      	movs	r3, #15
   200e4:	18fb      	adds	r3, r7, r3
   200e6:	2200      	movs	r2, #0
   200e8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   200ea:	68bb      	ldr	r3, [r7, #8]
   200ec:	8b5b      	ldrh	r3, [r3, #26]
   200ee:	b29b      	uxth	r3, r3
   200f0:	001a      	movs	r2, r3
   200f2:	2304      	movs	r3, #4
   200f4:	4013      	ands	r3, r2
   200f6:	d006      	beq.n	20106 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   200f8:	230f      	movs	r3, #15
   200fa:	18fb      	adds	r3, r7, r3
   200fc:	221e      	movs	r2, #30
   200fe:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20100:	68bb      	ldr	r3, [r7, #8]
   20102:	2204      	movs	r2, #4
   20104:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20106:	687b      	ldr	r3, [r7, #4]
   20108:	799b      	ldrb	r3, [r3, #6]
   2010a:	2b01      	cmp	r3, #1
   2010c:	d108      	bne.n	20120 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2010e:	68bb      	ldr	r3, [r7, #8]
   20110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20112:	b29b      	uxth	r3, r3
   20114:	05db      	lsls	r3, r3, #23
   20116:	0ddb      	lsrs	r3, r3, #23
   20118:	b29a      	uxth	r2, r3
   2011a:	683b      	ldr	r3, [r7, #0]
   2011c:	801a      	strh	r2, [r3, #0]
   2011e:	e005      	b.n	2012c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20120:	68bb      	ldr	r3, [r7, #8]
   20122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20124:	b2db      	uxtb	r3, r3
   20126:	b29a      	uxth	r2, r3
   20128:	683b      	ldr	r3, [r7, #0]
   2012a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   2012c:	230f      	movs	r3, #15
   2012e:	18fb      	adds	r3, r7, r3
   20130:	781b      	ldrb	r3, [r3, #0]
}
   20132:	0018      	movs	r0, r3
   20134:	46bd      	mov	sp, r7
   20136:	b004      	add	sp, #16
   20138:	bd80      	pop	{r7, pc}
   2013a:	46c0      	nop			; (mov r8, r8)
   2013c:	00020049 	.word	0x00020049

00020140 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20140:	b580      	push	{r7, lr}
   20142:	b086      	sub	sp, #24
   20144:	af00      	add	r7, sp, #0
   20146:	60f8      	str	r0, [r7, #12]
   20148:	60b9      	str	r1, [r7, #8]
   2014a:	1dbb      	adds	r3, r7, #6
   2014c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   2014e:	2313      	movs	r3, #19
   20150:	18fb      	adds	r3, r7, r3
   20152:	22ff      	movs	r2, #255	; 0xff
   20154:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20156:	2317      	movs	r3, #23
   20158:	18fb      	adds	r3, r7, r3
   2015a:	2200      	movs	r2, #0
   2015c:	701a      	strb	r2, [r3, #0]
   2015e:	2316      	movs	r3, #22
   20160:	18fb      	adds	r3, r7, r3
   20162:	2200      	movs	r2, #0
   20164:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20166:	2314      	movs	r3, #20
   20168:	18fb      	adds	r3, r7, r3
   2016a:	2200      	movs	r2, #0
   2016c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   2016e:	2310      	movs	r3, #16
   20170:	18fb      	adds	r3, r7, r3
   20172:	2200      	movs	r2, #0
   20174:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   20176:	68bb      	ldr	r3, [r7, #8]
   20178:	2b00      	cmp	r3, #0
   2017a:	d102      	bne.n	20182 <spi_rw+0x42>
   2017c:	68fb      	ldr	r3, [r7, #12]
   2017e:	2b00      	cmp	r3, #0
   20180:	d003      	beq.n	2018a <spi_rw+0x4a>
   20182:	1dbb      	adds	r3, r7, #6
   20184:	881b      	ldrh	r3, [r3, #0]
   20186:	2b00      	cmp	r3, #0
   20188:	d102      	bne.n	20190 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2018a:	230f      	movs	r3, #15
   2018c:	425b      	negs	r3, r3
   2018e:	e07e      	b.n	2028e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20190:	68fb      	ldr	r3, [r7, #12]
   20192:	2b00      	cmp	r3, #0
   20194:	d106      	bne.n	201a4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20196:	2313      	movs	r3, #19
   20198:	18fb      	adds	r3, r7, r3
   2019a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2019c:	2317      	movs	r3, #23
   2019e:	18fb      	adds	r3, r7, r3
   201a0:	2201      	movs	r2, #1
   201a2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   201a4:	68bb      	ldr	r3, [r7, #8]
   201a6:	2b00      	cmp	r3, #0
   201a8:	d106      	bne.n	201b8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   201aa:	2313      	movs	r3, #19
   201ac:	18fb      	adds	r3, r7, r3
   201ae:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   201b0:	2316      	movs	r3, #22
   201b2:	18fb      	adds	r3, r7, r3
   201b4:	2201      	movs	r2, #1
   201b6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   201b8:	4937      	ldr	r1, [pc, #220]	; (20298 <spi_rw+0x158>)
   201ba:	4b38      	ldr	r3, [pc, #224]	; (2029c <spi_rw+0x15c>)
   201bc:	2201      	movs	r2, #1
   201be:	0018      	movs	r0, r3
   201c0:	4b37      	ldr	r3, [pc, #220]	; (202a0 <spi_rw+0x160>)
   201c2:	4798      	blx	r3

	while (u16Sz) {
   201c4:	e04c      	b.n	20260 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   201c6:	68fb      	ldr	r3, [r7, #12]
   201c8:	781a      	ldrb	r2, [r3, #0]
   201ca:	2314      	movs	r3, #20
   201cc:	18fb      	adds	r3, r7, r3
   201ce:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   201d0:	46c0      	nop			; (mov r8, r8)
   201d2:	4b32      	ldr	r3, [pc, #200]	; (2029c <spi_rw+0x15c>)
   201d4:	0018      	movs	r0, r3
   201d6:	4b33      	ldr	r3, [pc, #204]	; (202a4 <spi_rw+0x164>)
   201d8:	4798      	blx	r3
   201da:	0003      	movs	r3, r0
   201dc:	001a      	movs	r2, r3
   201de:	2301      	movs	r3, #1
   201e0:	4053      	eors	r3, r2
   201e2:	b2db      	uxtb	r3, r3
   201e4:	2b00      	cmp	r3, #0
   201e6:	d1f4      	bne.n	201d2 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   201e8:	46c0      	nop			; (mov r8, r8)
   201ea:	2314      	movs	r3, #20
   201ec:	18fb      	adds	r3, r7, r3
   201ee:	881a      	ldrh	r2, [r3, #0]
   201f0:	4b2a      	ldr	r3, [pc, #168]	; (2029c <spi_rw+0x15c>)
   201f2:	0011      	movs	r1, r2
   201f4:	0018      	movs	r0, r3
   201f6:	4b2c      	ldr	r3, [pc, #176]	; (202a8 <spi_rw+0x168>)
   201f8:	4798      	blx	r3
   201fa:	1e03      	subs	r3, r0, #0
   201fc:	d1f5      	bne.n	201ea <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   201fe:	46c0      	nop			; (mov r8, r8)
   20200:	4b26      	ldr	r3, [pc, #152]	; (2029c <spi_rw+0x15c>)
   20202:	0018      	movs	r0, r3
   20204:	4b29      	ldr	r3, [pc, #164]	; (202ac <spi_rw+0x16c>)
   20206:	4798      	blx	r3
   20208:	0003      	movs	r3, r0
   2020a:	001a      	movs	r2, r3
   2020c:	2301      	movs	r3, #1
   2020e:	4053      	eors	r3, r2
   20210:	b2db      	uxtb	r3, r3
   20212:	2b00      	cmp	r3, #0
   20214:	d1f4      	bne.n	20200 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20216:	46c0      	nop			; (mov r8, r8)
   20218:	2310      	movs	r3, #16
   2021a:	18fa      	adds	r2, r7, r3
   2021c:	4b1f      	ldr	r3, [pc, #124]	; (2029c <spi_rw+0x15c>)
   2021e:	0011      	movs	r1, r2
   20220:	0018      	movs	r0, r3
   20222:	4b23      	ldr	r3, [pc, #140]	; (202b0 <spi_rw+0x170>)
   20224:	4798      	blx	r3
   20226:	1e03      	subs	r3, r0, #0
   20228:	d1f6      	bne.n	20218 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2022a:	2310      	movs	r3, #16
   2022c:	18fb      	adds	r3, r7, r3
   2022e:	881b      	ldrh	r3, [r3, #0]
   20230:	b2da      	uxtb	r2, r3
   20232:	68bb      	ldr	r3, [r7, #8]
   20234:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   20236:	1dbb      	adds	r3, r7, #6
   20238:	881a      	ldrh	r2, [r3, #0]
   2023a:	1dbb      	adds	r3, r7, #6
   2023c:	3a01      	subs	r2, #1
   2023e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20240:	2316      	movs	r3, #22
   20242:	18fb      	adds	r3, r7, r3
   20244:	781b      	ldrb	r3, [r3, #0]
   20246:	2b00      	cmp	r3, #0
   20248:	d102      	bne.n	20250 <spi_rw+0x110>
			pu8Miso++;
   2024a:	68bb      	ldr	r3, [r7, #8]
   2024c:	3301      	adds	r3, #1
   2024e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20250:	2317      	movs	r3, #23
   20252:	18fb      	adds	r3, r7, r3
   20254:	781b      	ldrb	r3, [r3, #0]
   20256:	2b00      	cmp	r3, #0
   20258:	d102      	bne.n	20260 <spi_rw+0x120>
			pu8Mosi++;
   2025a:	68fb      	ldr	r3, [r7, #12]
   2025c:	3301      	adds	r3, #1
   2025e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20260:	1dbb      	adds	r3, r7, #6
   20262:	881b      	ldrh	r3, [r3, #0]
   20264:	2b00      	cmp	r3, #0
   20266:	d1ae      	bne.n	201c6 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   20268:	46c0      	nop			; (mov r8, r8)
   2026a:	4b0c      	ldr	r3, [pc, #48]	; (2029c <spi_rw+0x15c>)
   2026c:	0018      	movs	r0, r3
   2026e:	4b11      	ldr	r3, [pc, #68]	; (202b4 <spi_rw+0x174>)
   20270:	4798      	blx	r3
   20272:	0003      	movs	r3, r0
   20274:	001a      	movs	r2, r3
   20276:	2301      	movs	r3, #1
   20278:	4053      	eors	r3, r2
   2027a:	b2db      	uxtb	r3, r3
   2027c:	2b00      	cmp	r3, #0
   2027e:	d1f4      	bne.n	2026a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20280:	4905      	ldr	r1, [pc, #20]	; (20298 <spi_rw+0x158>)
   20282:	4b06      	ldr	r3, [pc, #24]	; (2029c <spi_rw+0x15c>)
   20284:	2200      	movs	r2, #0
   20286:	0018      	movs	r0, r3
   20288:	4b05      	ldr	r3, [pc, #20]	; (202a0 <spi_rw+0x160>)
   2028a:	4798      	blx	r3

	return M2M_SUCCESS;
   2028c:	2300      	movs	r3, #0
}
   2028e:	0018      	movs	r0, r3
   20290:	46bd      	mov	sp, r7
   20292:	b006      	add	sp, #24
   20294:	bd80      	pop	{r7, pc}
   20296:	46c0      	nop			; (mov r8, r8)
   20298:	20005898 	.word	0x20005898
   2029c:	2000589c 	.word	0x2000589c
   202a0:	000279ed 	.word	0x000279ed
   202a4:	00020021 	.word	0x00020021
   202a8:	00020071 	.word	0x00020071
   202ac:	00020049 	.word	0x00020049
   202b0:	000200b9 	.word	0x000200b9
   202b4:	0001fff9 	.word	0x0001fff9

000202b8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   202b8:	b580      	push	{r7, lr}
   202ba:	b092      	sub	sp, #72	; 0x48
   202bc:	af00      	add	r7, sp, #0
   202be:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   202c0:	2347      	movs	r3, #71	; 0x47
   202c2:	18fb      	adds	r3, r7, r3
   202c4:	2200      	movs	r2, #0
   202c6:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   202c8:	2308      	movs	r3, #8
   202ca:	18fb      	adds	r3, r7, r3
   202cc:	0018      	movs	r0, r3
   202ce:	4b26      	ldr	r3, [pc, #152]	; (20368 <nm_bus_init+0xb0>)
   202d0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   202d2:	2308      	movs	r3, #8
   202d4:	18fb      	adds	r3, r7, r3
   202d6:	220e      	movs	r2, #14
   202d8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   202da:	2308      	movs	r3, #8
   202dc:	18fa      	adds	r2, r7, r3
   202de:	4b23      	ldr	r3, [pc, #140]	; (2036c <nm_bus_init+0xb4>)
   202e0:	0011      	movs	r1, r2
   202e2:	0018      	movs	r0, r3
   202e4:	4b22      	ldr	r3, [pc, #136]	; (20370 <nm_bus_init+0xb8>)
   202e6:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   202e8:	230c      	movs	r3, #12
   202ea:	18fb      	adds	r3, r7, r3
   202ec:	0018      	movs	r0, r3
   202ee:	4b21      	ldr	r3, [pc, #132]	; (20374 <nm_bus_init+0xbc>)
   202f0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   202f2:	230c      	movs	r3, #12
   202f4:	18fb      	adds	r3, r7, r3
   202f6:	22c0      	movs	r2, #192	; 0xc0
   202f8:	0392      	lsls	r2, r2, #14
   202fa:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   202fc:	230c      	movs	r3, #12
   202fe:	18fb      	adds	r3, r7, r3
   20300:	4a1d      	ldr	r2, [pc, #116]	; (20378 <nm_bus_init+0xc0>)
   20302:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20304:	230c      	movs	r3, #12
   20306:	18fb      	adds	r3, r7, r3
   20308:	4a1c      	ldr	r2, [pc, #112]	; (2037c <nm_bus_init+0xc4>)
   2030a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2030c:	230c      	movs	r3, #12
   2030e:	18fb      	adds	r3, r7, r3
   20310:	2201      	movs	r2, #1
   20312:	4252      	negs	r2, r2
   20314:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20316:	230c      	movs	r3, #12
   20318:	18fb      	adds	r3, r7, r3
   2031a:	4a19      	ldr	r2, [pc, #100]	; (20380 <nm_bus_init+0xc8>)
   2031c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   2031e:	230c      	movs	r3, #12
   20320:	18fb      	adds	r3, r7, r3
   20322:	2200      	movs	r2, #0
   20324:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   20326:	230c      	movs	r3, #12
   20328:	18fb      	adds	r3, r7, r3
   2032a:	4a16      	ldr	r2, [pc, #88]	; (20384 <nm_bus_init+0xcc>)
   2032c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   2032e:	230c      	movs	r3, #12
   20330:	18fa      	adds	r2, r7, r3
   20332:	4915      	ldr	r1, [pc, #84]	; (20388 <nm_bus_init+0xd0>)
   20334:	4b15      	ldr	r3, [pc, #84]	; (2038c <nm_bus_init+0xd4>)
   20336:	0018      	movs	r0, r3
   20338:	4b15      	ldr	r3, [pc, #84]	; (20390 <nm_bus_init+0xd8>)
   2033a:	4798      	blx	r3
   2033c:	1e03      	subs	r3, r0, #0
   2033e:	d002      	beq.n	20346 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20340:	2306      	movs	r3, #6
   20342:	425b      	negs	r3, r3
   20344:	e00c      	b.n	20360 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   20346:	4b11      	ldr	r3, [pc, #68]	; (2038c <nm_bus_init+0xd4>)
   20348:	0018      	movs	r0, r3
   2034a:	4b12      	ldr	r3, [pc, #72]	; (20394 <nm_bus_init+0xdc>)
   2034c:	4798      	blx	r3

	nm_bsp_reset();
   2034e:	4b12      	ldr	r3, [pc, #72]	; (20398 <nm_bus_init+0xe0>)
   20350:	4798      	blx	r3
	nm_bsp_sleep(1);
   20352:	2001      	movs	r0, #1
   20354:	4b11      	ldr	r3, [pc, #68]	; (2039c <nm_bus_init+0xe4>)
   20356:	4798      	blx	r3
#endif
	return result;
   20358:	2347      	movs	r3, #71	; 0x47
   2035a:	18fb      	adds	r3, r7, r3
   2035c:	781b      	ldrb	r3, [r3, #0]
   2035e:	b25b      	sxtb	r3, r3
}
   20360:	0018      	movs	r0, r3
   20362:	46bd      	mov	sp, r7
   20364:	b012      	add	sp, #72	; 0x48
   20366:	bd80      	pop	{r7, pc}
   20368:	0001fec5 	.word	0x0001fec5
   2036c:	20005898 	.word	0x20005898
   20370:	0001fee9 	.word	0x0001fee9
   20374:	0001fe41 	.word	0x0001fe41
   20378:	000c0002 	.word	0x000c0002
   2037c:	000d0002 	.word	0x000d0002
   20380:	000f0002 	.word	0x000f0002
   20384:	00124f80 	.word	0x00124f80
   20388:	42001000 	.word	0x42001000
   2038c:	2000589c 	.word	0x2000589c
   20390:	00027729 	.word	0x00027729
   20394:	0001ff4d 	.word	0x0001ff4d
   20398:	0001fbbd 	.word	0x0001fbbd
   2039c:	0001fbfd 	.word	0x0001fbfd

000203a0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   203a0:	b590      	push	{r4, r7, lr}
   203a2:	b085      	sub	sp, #20
   203a4:	af00      	add	r7, sp, #0
   203a6:	0002      	movs	r2, r0
   203a8:	6039      	str	r1, [r7, #0]
   203aa:	1dfb      	adds	r3, r7, #7
   203ac:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   203ae:	230f      	movs	r3, #15
   203b0:	18fb      	adds	r3, r7, r3
   203b2:	2200      	movs	r2, #0
   203b4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   203b6:	1dfb      	adds	r3, r7, #7
   203b8:	781b      	ldrb	r3, [r3, #0]
   203ba:	2b03      	cmp	r3, #3
   203bc:	d10f      	bne.n	203de <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   203be:	683b      	ldr	r3, [r7, #0]
   203c0:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   203c2:	68bb      	ldr	r3, [r7, #8]
   203c4:	6818      	ldr	r0, [r3, #0]
   203c6:	68bb      	ldr	r3, [r7, #8]
   203c8:	6859      	ldr	r1, [r3, #4]
   203ca:	68bb      	ldr	r3, [r7, #8]
   203cc:	891b      	ldrh	r3, [r3, #8]
   203ce:	220f      	movs	r2, #15
   203d0:	18bc      	adds	r4, r7, r2
   203d2:	001a      	movs	r2, r3
   203d4:	4b10      	ldr	r3, [pc, #64]	; (20418 <nm_bus_ioctl+0x78>)
   203d6:	4798      	blx	r3
   203d8:	0003      	movs	r3, r0
   203da:	7023      	strb	r3, [r4, #0]
		}
		break;
   203dc:	e013      	b.n	20406 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   203de:	230f      	movs	r3, #15
   203e0:	18fb      	adds	r3, r7, r3
   203e2:	22ff      	movs	r2, #255	; 0xff
   203e4:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   203e6:	2383      	movs	r3, #131	; 0x83
   203e8:	005a      	lsls	r2, r3, #1
   203ea:	490c      	ldr	r1, [pc, #48]	; (2041c <nm_bus_ioctl+0x7c>)
   203ec:	4b0c      	ldr	r3, [pc, #48]	; (20420 <nm_bus_ioctl+0x80>)
   203ee:	0018      	movs	r0, r3
   203f0:	4b0c      	ldr	r3, [pc, #48]	; (20424 <nm_bus_ioctl+0x84>)
   203f2:	4798      	blx	r3
   203f4:	4b0c      	ldr	r3, [pc, #48]	; (20428 <nm_bus_ioctl+0x88>)
   203f6:	0018      	movs	r0, r3
   203f8:	4b0a      	ldr	r3, [pc, #40]	; (20424 <nm_bus_ioctl+0x84>)
   203fa:	4798      	blx	r3
   203fc:	4b0b      	ldr	r3, [pc, #44]	; (2042c <nm_bus_ioctl+0x8c>)
   203fe:	0018      	movs	r0, r3
   20400:	4b08      	ldr	r3, [pc, #32]	; (20424 <nm_bus_ioctl+0x84>)
   20402:	4798      	blx	r3
			break;
   20404:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20406:	230f      	movs	r3, #15
   20408:	18fb      	adds	r3, r7, r3
   2040a:	781b      	ldrb	r3, [r3, #0]
   2040c:	b25b      	sxtb	r3, r3
}
   2040e:	0018      	movs	r0, r3
   20410:	46bd      	mov	sp, r7
   20412:	b005      	add	sp, #20
   20414:	bd90      	pop	{r4, r7, pc}
   20416:	46c0      	nop			; (mov r8, r8)
   20418:	00020141 	.word	0x00020141
   2041c:	00037c3c 	.word	0x00037c3c
   20420:	00037c10 	.word	0x00037c10
   20424:	0001d7a9 	.word	0x0001d7a9
   20428:	00037c24 	.word	0x00037c24
   2042c:	00037c38 	.word	0x00037c38

00020430 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20430:	b580      	push	{r7, lr}
   20432:	b082      	sub	sp, #8
   20434:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   20436:	1dfb      	adds	r3, r7, #7
   20438:	2200      	movs	r2, #0
   2043a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   2043c:	1d3b      	adds	r3, r7, #4
   2043e:	0018      	movs	r0, r3
   20440:	4b13      	ldr	r3, [pc, #76]	; (20490 <nm_bus_deinit+0x60>)
   20442:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20444:	1d3b      	adds	r3, r7, #4
   20446:	2200      	movs	r2, #0
   20448:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2044a:	1d3b      	adds	r3, r7, #4
   2044c:	2200      	movs	r2, #0
   2044e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20450:	4b10      	ldr	r3, [pc, #64]	; (20494 <nm_bus_deinit+0x64>)
   20452:	0018      	movs	r0, r3
   20454:	4b10      	ldr	r3, [pc, #64]	; (20498 <nm_bus_deinit+0x68>)
   20456:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   20458:	1d3b      	adds	r3, r7, #4
   2045a:	0019      	movs	r1, r3
   2045c:	200c      	movs	r0, #12
   2045e:	4b0f      	ldr	r3, [pc, #60]	; (2049c <nm_bus_deinit+0x6c>)
   20460:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20462:	1d3b      	adds	r3, r7, #4
   20464:	0019      	movs	r1, r3
   20466:	200f      	movs	r0, #15
   20468:	4b0c      	ldr	r3, [pc, #48]	; (2049c <nm_bus_deinit+0x6c>)
   2046a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   2046c:	1d3b      	adds	r3, r7, #4
   2046e:	0019      	movs	r1, r3
   20470:	200d      	movs	r0, #13
   20472:	4b0a      	ldr	r3, [pc, #40]	; (2049c <nm_bus_deinit+0x6c>)
   20474:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   20476:	1d3b      	adds	r3, r7, #4
   20478:	0019      	movs	r1, r3
   2047a:	200e      	movs	r0, #14
   2047c:	4b07      	ldr	r3, [pc, #28]	; (2049c <nm_bus_deinit+0x6c>)
   2047e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   20480:	1dfb      	adds	r3, r7, #7
   20482:	781b      	ldrb	r3, [r3, #0]
   20484:	b25b      	sxtb	r3, r3
}
   20486:	0018      	movs	r0, r3
   20488:	46bd      	mov	sp, r7
   2048a:	b002      	add	sp, #8
   2048c:	bd80      	pop	{r7, pc}
   2048e:	46c0      	nop			; (mov r8, r8)
   20490:	0001fda9 	.word	0x0001fda9
   20494:	2000589c 	.word	0x2000589c
   20498:	0001ff9d 	.word	0x0001ff9d
   2049c:	000262a9 	.word	0x000262a9

000204a0 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   204a0:	b580      	push	{r7, lr}
   204a2:	b084      	sub	sp, #16
   204a4:	af00      	add	r7, sp, #0
   204a6:	60f8      	str	r0, [r7, #12]
   204a8:	60b9      	str	r1, [r7, #8]
   204aa:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   204ac:	687b      	ldr	r3, [r7, #4]
   204ae:	2b00      	cmp	r3, #0
   204b0:	d010      	beq.n	204d4 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   204b2:	68bb      	ldr	r3, [r7, #8]
   204b4:	781a      	ldrb	r2, [r3, #0]
   204b6:	68fb      	ldr	r3, [r7, #12]
   204b8:	701a      	strb	r2, [r3, #0]
		pDst++;
   204ba:	68fb      	ldr	r3, [r7, #12]
   204bc:	3301      	adds	r3, #1
   204be:	60fb      	str	r3, [r7, #12]
		pSrc++;
   204c0:	68bb      	ldr	r3, [r7, #8]
   204c2:	3301      	adds	r3, #1
   204c4:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   204c6:	687b      	ldr	r3, [r7, #4]
   204c8:	3b01      	subs	r3, #1
   204ca:	607b      	str	r3, [r7, #4]
   204cc:	687b      	ldr	r3, [r7, #4]
   204ce:	2b00      	cmp	r3, #0
   204d0:	d1ef      	bne.n	204b2 <m2m_memcpy+0x12>
   204d2:	e000      	b.n	204d6 <m2m_memcpy+0x36>
	if(sz == 0) return;
   204d4:	46c0      	nop			; (mov r8, r8)
}
   204d6:	46bd      	mov	sp, r7
   204d8:	b004      	add	sp, #16
   204da:	bd80      	pop	{r7, pc}

000204dc <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   204dc:	b580      	push	{r7, lr}
   204de:	b084      	sub	sp, #16
   204e0:	af00      	add	r7, sp, #0
   204e2:	60f8      	str	r0, [r7, #12]
   204e4:	607a      	str	r2, [r7, #4]
   204e6:	230b      	movs	r3, #11
   204e8:	18fb      	adds	r3, r7, r3
   204ea:	1c0a      	adds	r2, r1, #0
   204ec:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   204ee:	687b      	ldr	r3, [r7, #4]
   204f0:	2b00      	cmp	r3, #0
   204f2:	d00e      	beq.n	20512 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   204f4:	68fb      	ldr	r3, [r7, #12]
   204f6:	220b      	movs	r2, #11
   204f8:	18ba      	adds	r2, r7, r2
   204fa:	7812      	ldrb	r2, [r2, #0]
   204fc:	701a      	strb	r2, [r3, #0]
		pBuf++;
   204fe:	68fb      	ldr	r3, [r7, #12]
   20500:	3301      	adds	r3, #1
   20502:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20504:	687b      	ldr	r3, [r7, #4]
   20506:	3b01      	subs	r3, #1
   20508:	607b      	str	r3, [r7, #4]
   2050a:	687b      	ldr	r3, [r7, #4]
   2050c:	2b00      	cmp	r3, #0
   2050e:	d1f1      	bne.n	204f4 <m2m_memset+0x18>
   20510:	e000      	b.n	20514 <m2m_memset+0x38>
	if(sz == 0) return;
   20512:	46c0      	nop			; (mov r8, r8)
}
   20514:	46bd      	mov	sp, r7
   20516:	b004      	add	sp, #16
   20518:	bd80      	pop	{r7, pc}

0002051a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2051a:	b580      	push	{r7, lr}
   2051c:	b084      	sub	sp, #16
   2051e:	af00      	add	r7, sp, #0
   20520:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20522:	230e      	movs	r3, #14
   20524:	18fb      	adds	r3, r7, r3
   20526:	2200      	movs	r2, #0
   20528:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2052a:	e009      	b.n	20540 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   2052c:	230e      	movs	r3, #14
   2052e:	18fb      	adds	r3, r7, r3
   20530:	881a      	ldrh	r2, [r3, #0]
   20532:	230e      	movs	r3, #14
   20534:	18fb      	adds	r3, r7, r3
   20536:	3201      	adds	r2, #1
   20538:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2053a:	687b      	ldr	r3, [r7, #4]
   2053c:	3301      	adds	r3, #1
   2053e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20540:	687b      	ldr	r3, [r7, #4]
   20542:	781b      	ldrb	r3, [r3, #0]
   20544:	2b00      	cmp	r3, #0
   20546:	d1f1      	bne.n	2052c <m2m_strlen+0x12>
	}
	return u16StrLen;
   20548:	230e      	movs	r3, #14
   2054a:	18fb      	adds	r3, r7, r3
   2054c:	881b      	ldrh	r3, [r3, #0]
}
   2054e:	0018      	movs	r0, r3
   20550:	46bd      	mov	sp, r7
   20552:	b004      	add	sp, #16
   20554:	bd80      	pop	{r7, pc}
	...

00020558 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20558:	b580      	push	{r7, lr}
   2055a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   2055c:	4b04      	ldr	r3, [pc, #16]	; (20570 <isr+0x18>)
   2055e:	78db      	ldrb	r3, [r3, #3]
   20560:	b2db      	uxtb	r3, r3
   20562:	3301      	adds	r3, #1
   20564:	b2da      	uxtb	r2, r3
   20566:	4b02      	ldr	r3, [pc, #8]	; (20570 <isr+0x18>)
   20568:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2056a:	46c0      	nop			; (mov r8, r8)
   2056c:	46bd      	mov	sp, r7
   2056e:	bd80      	pop	{r7, pc}
   20570:	200058d8 	.word	0x200058d8

00020574 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   20574:	b590      	push	{r4, r7, lr}
   20576:	b083      	sub	sp, #12
   20578:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2057a:	1dfb      	adds	r3, r7, #7
   2057c:	2200      	movs	r2, #0
   2057e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   20580:	4b14      	ldr	r3, [pc, #80]	; (205d4 <hif_set_rx_done+0x60>)
   20582:	2200      	movs	r2, #0
   20584:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20586:	2001      	movs	r0, #1
   20588:	4b13      	ldr	r3, [pc, #76]	; (205d8 <hif_set_rx_done+0x64>)
   2058a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   2058c:	1dfc      	adds	r4, r7, #7
   2058e:	003b      	movs	r3, r7
   20590:	4a12      	ldr	r2, [pc, #72]	; (205dc <hif_set_rx_done+0x68>)
   20592:	0019      	movs	r1, r3
   20594:	0010      	movs	r0, r2
   20596:	4b12      	ldr	r3, [pc, #72]	; (205e0 <hif_set_rx_done+0x6c>)
   20598:	4798      	blx	r3
   2059a:	0003      	movs	r3, r0
   2059c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2059e:	1dfb      	adds	r3, r7, #7
   205a0:	781b      	ldrb	r3, [r3, #0]
   205a2:	b25b      	sxtb	r3, r3
   205a4:	2b00      	cmp	r3, #0
   205a6:	d10d      	bne.n	205c4 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   205a8:	683b      	ldr	r3, [r7, #0]
   205aa:	2202      	movs	r2, #2
   205ac:	4313      	orrs	r3, r2
   205ae:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   205b0:	683b      	ldr	r3, [r7, #0]
   205b2:	1dfc      	adds	r4, r7, #7
   205b4:	4a09      	ldr	r2, [pc, #36]	; (205dc <hif_set_rx_done+0x68>)
   205b6:	0019      	movs	r1, r3
   205b8:	0010      	movs	r0, r2
   205ba:	4b0a      	ldr	r3, [pc, #40]	; (205e4 <hif_set_rx_done+0x70>)
   205bc:	4798      	blx	r3
   205be:	0003      	movs	r3, r0
   205c0:	7023      	strb	r3, [r4, #0]
   205c2:	e000      	b.n	205c6 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   205c4:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   205c6:	1dfb      	adds	r3, r7, #7
   205c8:	781b      	ldrb	r3, [r3, #0]
   205ca:	b25b      	sxtb	r3, r3

}
   205cc:	0018      	movs	r0, r3
   205ce:	46bd      	mov	sp, r7
   205d0:	b003      	add	sp, #12
   205d2:	bd90      	pop	{r4, r7, pc}
   205d4:	200058d8 	.word	0x200058d8
   205d8:	0001fc91 	.word	0x0001fc91
   205dc:	00001070 	.word	0x00001070
   205e0:	0002256d 	.word	0x0002256d
   205e4:	00022591 	.word	0x00022591

000205e8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   205e8:	b580      	push	{r7, lr}
   205ea:	b082      	sub	sp, #8
   205ec:	af00      	add	r7, sp, #0
   205ee:	603a      	str	r2, [r7, #0]
   205f0:	1dfb      	adds	r3, r7, #7
   205f2:	1c02      	adds	r2, r0, #0
   205f4:	701a      	strb	r2, [r3, #0]
   205f6:	1d3b      	adds	r3, r7, #4
   205f8:	1c0a      	adds	r2, r1, #0
   205fa:	801a      	strh	r2, [r3, #0]


}
   205fc:	46c0      	nop			; (mov r8, r8)
   205fe:	46bd      	mov	sp, r7
   20600:	b002      	add	sp, #8
   20602:	bd80      	pop	{r7, pc}

00020604 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20604:	b590      	push	{r4, r7, lr}
   20606:	b083      	sub	sp, #12
   20608:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2060a:	1dfb      	adds	r3, r7, #7
   2060c:	2200      	movs	r2, #0
   2060e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20610:	4b16      	ldr	r3, [pc, #88]	; (2066c <hif_chip_wake+0x68>)
   20612:	789b      	ldrb	r3, [r3, #2]
   20614:	b2db      	uxtb	r3, r3
   20616:	2b00      	cmp	r3, #0
   20618:	d003      	beq.n	20622 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2061a:	1dfb      	adds	r3, r7, #7
   2061c:	781b      	ldrb	r3, [r3, #0]
   2061e:	b25b      	sxtb	r3, r3
   20620:	e01f      	b.n	20662 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20622:	4b12      	ldr	r3, [pc, #72]	; (2066c <hif_chip_wake+0x68>)
   20624:	785b      	ldrb	r3, [r3, #1]
   20626:	b2db      	uxtb	r3, r3
   20628:	2b00      	cmp	r3, #0
   2062a:	d10e      	bne.n	2064a <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2062c:	4b0f      	ldr	r3, [pc, #60]	; (2066c <hif_chip_wake+0x68>)
   2062e:	781b      	ldrb	r3, [r3, #0]
   20630:	b2db      	uxtb	r3, r3
   20632:	2b00      	cmp	r3, #0
   20634:	d009      	beq.n	2064a <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20636:	1dfc      	adds	r4, r7, #7
   20638:	4b0d      	ldr	r3, [pc, #52]	; (20670 <hif_chip_wake+0x6c>)
   2063a:	4798      	blx	r3
   2063c:	0003      	movs	r3, r0
   2063e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20640:	1dfb      	adds	r3, r7, #7
   20642:	781b      	ldrb	r3, [r3, #0]
   20644:	b25b      	sxtb	r3, r3
   20646:	2b00      	cmp	r3, #0
   20648:	d107      	bne.n	2065a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2064a:	4b08      	ldr	r3, [pc, #32]	; (2066c <hif_chip_wake+0x68>)
   2064c:	785b      	ldrb	r3, [r3, #1]
   2064e:	b2db      	uxtb	r3, r3
   20650:	3301      	adds	r3, #1
   20652:	b2da      	uxtb	r2, r3
   20654:	4b05      	ldr	r3, [pc, #20]	; (2066c <hif_chip_wake+0x68>)
   20656:	705a      	strb	r2, [r3, #1]
   20658:	e000      	b.n	2065c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2065a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   2065c:	1dfb      	adds	r3, r7, #7
   2065e:	781b      	ldrb	r3, [r3, #0]
   20660:	b25b      	sxtb	r3, r3
}
   20662:	0018      	movs	r0, r3
   20664:	46bd      	mov	sp, r7
   20666:	b003      	add	sp, #12
   20668:	bd90      	pop	{r4, r7, pc}
   2066a:	46c0      	nop			; (mov r8, r8)
   2066c:	200058d8 	.word	0x200058d8
   20670:	0002203d 	.word	0x0002203d

00020674 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   20674:	b580      	push	{r7, lr}
   20676:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   20678:	4b07      	ldr	r3, [pc, #28]	; (20698 <hif_chip_sleep_sc+0x24>)
   2067a:	785b      	ldrb	r3, [r3, #1]
   2067c:	b2db      	uxtb	r3, r3
   2067e:	2b00      	cmp	r3, #0
   20680:	d006      	beq.n	20690 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   20682:	4b05      	ldr	r3, [pc, #20]	; (20698 <hif_chip_sleep_sc+0x24>)
   20684:	785b      	ldrb	r3, [r3, #1]
   20686:	b2db      	uxtb	r3, r3
   20688:	3b01      	subs	r3, #1
   2068a:	b2da      	uxtb	r2, r3
   2068c:	4b02      	ldr	r3, [pc, #8]	; (20698 <hif_chip_sleep_sc+0x24>)
   2068e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   20690:	2300      	movs	r3, #0
}
   20692:	0018      	movs	r0, r3
   20694:	46bd      	mov	sp, r7
   20696:	bd80      	pop	{r7, pc}
   20698:	200058d8 	.word	0x200058d8

0002069c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   2069c:	b590      	push	{r4, r7, lr}
   2069e:	b083      	sub	sp, #12
   206a0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   206a2:	1dfb      	adds	r3, r7, #7
   206a4:	2200      	movs	r2, #0
   206a6:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   206a8:	4b10      	ldr	r3, [pc, #64]	; (206ec <hif_chip_sleep+0x50>)
   206aa:	785b      	ldrb	r3, [r3, #1]
   206ac:	b2db      	uxtb	r3, r3
   206ae:	2b00      	cmp	r3, #0
   206b0:	d006      	beq.n	206c0 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   206b2:	4b0e      	ldr	r3, [pc, #56]	; (206ec <hif_chip_sleep+0x50>)
   206b4:	785b      	ldrb	r3, [r3, #1]
   206b6:	b2db      	uxtb	r3, r3
   206b8:	3b01      	subs	r3, #1
   206ba:	b2da      	uxtb	r2, r3
   206bc:	4b0b      	ldr	r3, [pc, #44]	; (206ec <hif_chip_sleep+0x50>)
   206be:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   206c0:	4b0a      	ldr	r3, [pc, #40]	; (206ec <hif_chip_sleep+0x50>)
   206c2:	785b      	ldrb	r3, [r3, #1]
   206c4:	b2db      	uxtb	r3, r3
   206c6:	2b00      	cmp	r3, #0
   206c8:	d109      	bne.n	206de <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   206ca:	4b08      	ldr	r3, [pc, #32]	; (206ec <hif_chip_sleep+0x50>)
   206cc:	781b      	ldrb	r3, [r3, #0]
   206ce:	b2db      	uxtb	r3, r3
   206d0:	2b00      	cmp	r3, #0
   206d2:	d004      	beq.n	206de <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   206d4:	1dfc      	adds	r4, r7, #7
   206d6:	4b06      	ldr	r3, [pc, #24]	; (206f0 <hif_chip_sleep+0x54>)
   206d8:	4798      	blx	r3
   206da:	0003      	movs	r3, r0
   206dc:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   206de:	1dfb      	adds	r3, r7, #7
   206e0:	781b      	ldrb	r3, [r3, #0]
   206e2:	b25b      	sxtb	r3, r3
}
   206e4:	0018      	movs	r0, r3
   206e6:	46bd      	mov	sp, r7
   206e8:	b003      	add	sp, #12
   206ea:	bd90      	pop	{r4, r7, pc}
   206ec:	200058d8 	.word	0x200058d8
   206f0:	00021f65 	.word	0x00021f65

000206f4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   206f4:	b580      	push	{r7, lr}
   206f6:	b082      	sub	sp, #8
   206f8:	af00      	add	r7, sp, #0
   206fa:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   206fc:	4b09      	ldr	r3, [pc, #36]	; (20724 <hif_init+0x30>)
   206fe:	222c      	movs	r2, #44	; 0x2c
   20700:	2100      	movs	r1, #0
   20702:	0018      	movs	r0, r3
   20704:	4b08      	ldr	r3, [pc, #32]	; (20728 <hif_init+0x34>)
   20706:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20708:	4b08      	ldr	r3, [pc, #32]	; (2072c <hif_init+0x38>)
   2070a:	0018      	movs	r0, r3
   2070c:	4b08      	ldr	r3, [pc, #32]	; (20730 <hif_init+0x3c>)
   2070e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20710:	4b08      	ldr	r3, [pc, #32]	; (20734 <hif_init+0x40>)
   20712:	0019      	movs	r1, r3
   20714:	2003      	movs	r0, #3
   20716:	4b08      	ldr	r3, [pc, #32]	; (20738 <hif_init+0x44>)
   20718:	4798      	blx	r3
	return M2M_SUCCESS;
   2071a:	2300      	movs	r3, #0
}
   2071c:	0018      	movs	r0, r3
   2071e:	46bd      	mov	sp, r7
   20720:	b002      	add	sp, #8
   20722:	bd80      	pop	{r7, pc}
   20724:	200058d8 	.word	0x200058d8
   20728:	000204dd 	.word	0x000204dd
   2072c:	00020559 	.word	0x00020559
   20730:	0001fc19 	.word	0x0001fc19
   20734:	000205e9 	.word	0x000205e9
   20738:	000211d9 	.word	0x000211d9

0002073c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   2073c:	b590      	push	{r4, r7, lr}
   2073e:	b089      	sub	sp, #36	; 0x24
   20740:	af00      	add	r7, sp, #0
   20742:	0004      	movs	r4, r0
   20744:	0008      	movs	r0, r1
   20746:	603a      	str	r2, [r7, #0]
   20748:	0019      	movs	r1, r3
   2074a:	1dfb      	adds	r3, r7, #7
   2074c:	1c22      	adds	r2, r4, #0
   2074e:	701a      	strb	r2, [r3, #0]
   20750:	1dbb      	adds	r3, r7, #6
   20752:	1c02      	adds	r2, r0, #0
   20754:	701a      	strb	r2, [r3, #0]
   20756:	1d3b      	adds	r3, r7, #4
   20758:	1c0a      	adds	r2, r1, #0
   2075a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   2075c:	231f      	movs	r3, #31
   2075e:	18fb      	adds	r3, r7, r3
   20760:	22ff      	movs	r2, #255	; 0xff
   20762:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20764:	1dbb      	adds	r3, r7, #6
   20766:	781b      	ldrb	r3, [r3, #0]
   20768:	227f      	movs	r2, #127	; 0x7f
   2076a:	4013      	ands	r3, r2
   2076c:	b2da      	uxtb	r2, r3
   2076e:	2318      	movs	r3, #24
   20770:	18fb      	adds	r3, r7, r3
   20772:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20774:	2318      	movs	r3, #24
   20776:	18fb      	adds	r3, r7, r3
   20778:	1dfa      	adds	r2, r7, #7
   2077a:	7812      	ldrb	r2, [r2, #0]
   2077c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   2077e:	2318      	movs	r3, #24
   20780:	18fb      	adds	r3, r7, r3
   20782:	2208      	movs	r2, #8
   20784:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20788:	2b00      	cmp	r3, #0
   2078a:	d011      	beq.n	207b0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   2078c:	2318      	movs	r3, #24
   2078e:	18fb      	adds	r3, r7, r3
   20790:	885b      	ldrh	r3, [r3, #2]
   20792:	b29a      	uxth	r2, r3
   20794:	2338      	movs	r3, #56	; 0x38
   20796:	18f9      	adds	r1, r7, r3
   20798:	2334      	movs	r3, #52	; 0x34
   2079a:	18fb      	adds	r3, r7, r3
   2079c:	8809      	ldrh	r1, [r1, #0]
   2079e:	881b      	ldrh	r3, [r3, #0]
   207a0:	18cb      	adds	r3, r1, r3
   207a2:	b29b      	uxth	r3, r3
   207a4:	18d3      	adds	r3, r2, r3
   207a6:	b29a      	uxth	r2, r3
   207a8:	2318      	movs	r3, #24
   207aa:	18fb      	adds	r3, r7, r3
   207ac:	805a      	strh	r2, [r3, #2]
   207ae:	e00a      	b.n	207c6 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   207b0:	2318      	movs	r3, #24
   207b2:	18fb      	adds	r3, r7, r3
   207b4:	885b      	ldrh	r3, [r3, #2]
   207b6:	b29a      	uxth	r2, r3
   207b8:	1d3b      	adds	r3, r7, #4
   207ba:	881b      	ldrh	r3, [r3, #0]
   207bc:	18d3      	adds	r3, r2, r3
   207be:	b29a      	uxth	r2, r3
   207c0:	2318      	movs	r3, #24
   207c2:	18fb      	adds	r3, r7, r3
   207c4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   207c6:	231f      	movs	r3, #31
   207c8:	18fc      	adds	r4, r7, r3
   207ca:	4bb2      	ldr	r3, [pc, #712]	; (20a94 <hif_send+0x358>)
   207cc:	4798      	blx	r3
   207ce:	0003      	movs	r3, r0
   207d0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   207d2:	231f      	movs	r3, #31
   207d4:	18fb      	adds	r3, r7, r3
   207d6:	781b      	ldrb	r3, [r3, #0]
   207d8:	b25b      	sxtb	r3, r3
   207da:	2b00      	cmp	r3, #0
   207dc:	d000      	beq.n	207e0 <hif_send+0xa4>
   207de:	e129      	b.n	20a34 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   207e0:	2300      	movs	r3, #0
   207e2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   207e4:	230e      	movs	r3, #14
   207e6:	18fb      	adds	r3, r7, r3
   207e8:	2200      	movs	r2, #0
   207ea:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   207ec:	2300      	movs	r3, #0
   207ee:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   207f0:	1dfb      	adds	r3, r7, #7
   207f2:	781a      	ldrb	r2, [r3, #0]
   207f4:	697b      	ldr	r3, [r7, #20]
   207f6:	4313      	orrs	r3, r2
   207f8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   207fa:	1dbb      	adds	r3, r7, #6
   207fc:	781b      	ldrb	r3, [r3, #0]
   207fe:	021a      	lsls	r2, r3, #8
   20800:	697b      	ldr	r3, [r7, #20]
   20802:	4313      	orrs	r3, r2
   20804:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20806:	2318      	movs	r3, #24
   20808:	18fb      	adds	r3, r7, r3
   2080a:	885b      	ldrh	r3, [r3, #2]
   2080c:	b29b      	uxth	r3, r3
   2080e:	041a      	lsls	r2, r3, #16
   20810:	697b      	ldr	r3, [r7, #20]
   20812:	4313      	orrs	r3, r2
   20814:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20816:	697b      	ldr	r3, [r7, #20]
   20818:	221f      	movs	r2, #31
   2081a:	18bc      	adds	r4, r7, r2
   2081c:	4a9e      	ldr	r2, [pc, #632]	; (20a98 <hif_send+0x35c>)
   2081e:	0019      	movs	r1, r3
   20820:	0010      	movs	r0, r2
   20822:	4b9e      	ldr	r3, [pc, #632]	; (20a9c <hif_send+0x360>)
   20824:	4798      	blx	r3
   20826:	0003      	movs	r3, r0
   20828:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2082a:	231f      	movs	r3, #31
   2082c:	18fb      	adds	r3, r7, r3
   2082e:	781b      	ldrb	r3, [r3, #0]
   20830:	b25b      	sxtb	r3, r3
   20832:	2b00      	cmp	r3, #0
   20834:	d000      	beq.n	20838 <hif_send+0xfc>
   20836:	e119      	b.n	20a6c <hif_send+0x330>

		reg = 0UL;
   20838:	2300      	movs	r3, #0
   2083a:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   2083c:	697b      	ldr	r3, [r7, #20]
   2083e:	2202      	movs	r2, #2
   20840:	4313      	orrs	r3, r2
   20842:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20844:	697b      	ldr	r3, [r7, #20]
   20846:	221f      	movs	r2, #31
   20848:	18bc      	adds	r4, r7, r2
   2084a:	4a95      	ldr	r2, [pc, #596]	; (20aa0 <hif_send+0x364>)
   2084c:	0019      	movs	r1, r3
   2084e:	0010      	movs	r0, r2
   20850:	4b92      	ldr	r3, [pc, #584]	; (20a9c <hif_send+0x360>)
   20852:	4798      	blx	r3
   20854:	0003      	movs	r3, r0
   20856:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20858:	231f      	movs	r3, #31
   2085a:	18fb      	adds	r3, r7, r3
   2085c:	781b      	ldrb	r3, [r3, #0]
   2085e:	b25b      	sxtb	r3, r3
   20860:	2b00      	cmp	r3, #0
   20862:	d000      	beq.n	20866 <hif_send+0x12a>
   20864:	e104      	b.n	20a70 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   20866:	2300      	movs	r3, #0
   20868:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2086a:	230e      	movs	r3, #14
   2086c:	18fb      	adds	r3, r7, r3
   2086e:	2200      	movs	r2, #0
   20870:	801a      	strh	r2, [r3, #0]
   20872:	e050      	b.n	20916 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20874:	231f      	movs	r3, #31
   20876:	18fc      	adds	r4, r7, r3
   20878:	2314      	movs	r3, #20
   2087a:	18fb      	adds	r3, r7, r3
   2087c:	4a88      	ldr	r2, [pc, #544]	; (20aa0 <hif_send+0x364>)
   2087e:	0019      	movs	r1, r3
   20880:	0010      	movs	r0, r2
   20882:	4b88      	ldr	r3, [pc, #544]	; (20aa4 <hif_send+0x368>)
   20884:	4798      	blx	r3
   20886:	0003      	movs	r3, r0
   20888:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2088a:	231f      	movs	r3, #31
   2088c:	18fb      	adds	r3, r7, r3
   2088e:	781b      	ldrb	r3, [r3, #0]
   20890:	b25b      	sxtb	r3, r3
   20892:	2b00      	cmp	r3, #0
   20894:	d147      	bne.n	20926 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   20896:	230e      	movs	r3, #14
   20898:	18fb      	adds	r3, r7, r3
   2089a:	881b      	ldrh	r3, [r3, #0]
   2089c:	b29a      	uxth	r2, r3
   2089e:	23f4      	movs	r3, #244	; 0xf4
   208a0:	33ff      	adds	r3, #255	; 0xff
   208a2:	429a      	cmp	r2, r3
   208a4:	d916      	bls.n	208d4 <hif_send+0x198>
				if(cnt < 501) {
   208a6:	230e      	movs	r3, #14
   208a8:	18fb      	adds	r3, r7, r3
   208aa:	881b      	ldrh	r3, [r3, #0]
   208ac:	b29a      	uxth	r2, r3
   208ae:	23fa      	movs	r3, #250	; 0xfa
   208b0:	005b      	lsls	r3, r3, #1
   208b2:	429a      	cmp	r2, r3
   208b4:	d80b      	bhi.n	208ce <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   208b6:	4b7c      	ldr	r3, [pc, #496]	; (20aa8 <hif_send+0x36c>)
   208b8:	0018      	movs	r0, r3
   208ba:	4b7c      	ldr	r3, [pc, #496]	; (20aac <hif_send+0x370>)
   208bc:	4798      	blx	r3
   208be:	4b7c      	ldr	r3, [pc, #496]	; (20ab0 <hif_send+0x374>)
   208c0:	0018      	movs	r0, r3
   208c2:	4b7a      	ldr	r3, [pc, #488]	; (20aac <hif_send+0x370>)
   208c4:	4798      	blx	r3
   208c6:	4b7b      	ldr	r3, [pc, #492]	; (20ab4 <hif_send+0x378>)
   208c8:	0018      	movs	r0, r3
   208ca:	4b78      	ldr	r3, [pc, #480]	; (20aac <hif_send+0x370>)
   208cc:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   208ce:	2001      	movs	r0, #1
   208d0:	4b79      	ldr	r3, [pc, #484]	; (20ab8 <hif_send+0x37c>)
   208d2:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   208d4:	697b      	ldr	r3, [r7, #20]
   208d6:	2202      	movs	r2, #2
   208d8:	4013      	ands	r3, r2
   208da:	d113      	bne.n	20904 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   208dc:	231f      	movs	r3, #31
   208de:	18fc      	adds	r4, r7, r3
   208e0:	2310      	movs	r3, #16
   208e2:	18fb      	adds	r3, r7, r3
   208e4:	4a75      	ldr	r2, [pc, #468]	; (20abc <hif_send+0x380>)
   208e6:	0019      	movs	r1, r3
   208e8:	0010      	movs	r0, r2
   208ea:	4b6e      	ldr	r3, [pc, #440]	; (20aa4 <hif_send+0x368>)
   208ec:	4798      	blx	r3
   208ee:	0003      	movs	r3, r0
   208f0:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   208f2:	231f      	movs	r3, #31
   208f4:	18fb      	adds	r3, r7, r3
   208f6:	781b      	ldrb	r3, [r3, #0]
   208f8:	b25b      	sxtb	r3, r3
   208fa:	2b00      	cmp	r3, #0
   208fc:	d015      	beq.n	2092a <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   208fe:	2300      	movs	r3, #0
   20900:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20902:	e0bc      	b.n	20a7e <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20904:	230e      	movs	r3, #14
   20906:	18fb      	adds	r3, r7, r3
   20908:	881b      	ldrh	r3, [r3, #0]
   2090a:	b29b      	uxth	r3, r3
   2090c:	3301      	adds	r3, #1
   2090e:	b29a      	uxth	r2, r3
   20910:	230e      	movs	r3, #14
   20912:	18fb      	adds	r3, r7, r3
   20914:	801a      	strh	r2, [r3, #0]
   20916:	230e      	movs	r3, #14
   20918:	18fb      	adds	r3, r7, r3
   2091a:	881b      	ldrh	r3, [r3, #0]
   2091c:	b29b      	uxth	r3, r3
   2091e:	4a68      	ldr	r2, [pc, #416]	; (20ac0 <hif_send+0x384>)
   20920:	4293      	cmp	r3, r2
   20922:	d9a7      	bls.n	20874 <hif_send+0x138>
   20924:	e002      	b.n	2092c <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20926:	46c0      	nop			; (mov r8, r8)
   20928:	e000      	b.n	2092c <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   2092a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   2092c:	693b      	ldr	r3, [r7, #16]
   2092e:	2b00      	cmp	r3, #0
   20930:	d100      	bne.n	20934 <hif_send+0x1f8>
   20932:	e074      	b.n	20a1e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20934:	693b      	ldr	r3, [r7, #16]
   20936:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20938:	2318      	movs	r3, #24
   2093a:	18fb      	adds	r3, r7, r3
   2093c:	885b      	ldrh	r3, [r3, #2]
   2093e:	b29a      	uxth	r2, r3
   20940:	2318      	movs	r3, #24
   20942:	18fb      	adds	r3, r7, r3
   20944:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20946:	68bb      	ldr	r3, [r7, #8]
   20948:	221f      	movs	r2, #31
   2094a:	18bc      	adds	r4, r7, r2
   2094c:	2218      	movs	r2, #24
   2094e:	18b9      	adds	r1, r7, r2
   20950:	2208      	movs	r2, #8
   20952:	0018      	movs	r0, r3
   20954:	4b5b      	ldr	r3, [pc, #364]	; (20ac4 <hif_send+0x388>)
   20956:	4798      	blx	r3
   20958:	0003      	movs	r3, r0
   2095a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   2095c:	231f      	movs	r3, #31
   2095e:	18fb      	adds	r3, r7, r3
   20960:	781b      	ldrb	r3, [r3, #0]
   20962:	b25b      	sxtb	r3, r3
   20964:	2b00      	cmp	r3, #0
   20966:	d000      	beq.n	2096a <hif_send+0x22e>
   20968:	e084      	b.n	20a74 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2096a:	68bb      	ldr	r3, [r7, #8]
   2096c:	3308      	adds	r3, #8
   2096e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20970:	683b      	ldr	r3, [r7, #0]
   20972:	2b00      	cmp	r3, #0
   20974:	d016      	beq.n	209a4 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20976:	68b8      	ldr	r0, [r7, #8]
   20978:	1d3b      	adds	r3, r7, #4
   2097a:	881a      	ldrh	r2, [r3, #0]
   2097c:	231f      	movs	r3, #31
   2097e:	18fc      	adds	r4, r7, r3
   20980:	683b      	ldr	r3, [r7, #0]
   20982:	0019      	movs	r1, r3
   20984:	4b4f      	ldr	r3, [pc, #316]	; (20ac4 <hif_send+0x388>)
   20986:	4798      	blx	r3
   20988:	0003      	movs	r3, r0
   2098a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2098c:	231f      	movs	r3, #31
   2098e:	18fb      	adds	r3, r7, r3
   20990:	781b      	ldrb	r3, [r3, #0]
   20992:	b25b      	sxtb	r3, r3
   20994:	2b00      	cmp	r3, #0
   20996:	d000      	beq.n	2099a <hif_send+0x25e>
   20998:	e06e      	b.n	20a78 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2099a:	1d3b      	adds	r3, r7, #4
   2099c:	881a      	ldrh	r2, [r3, #0]
   2099e:	68bb      	ldr	r3, [r7, #8]
   209a0:	18d3      	adds	r3, r2, r3
   209a2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   209a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   209a6:	2b00      	cmp	r3, #0
   209a8:	d021      	beq.n	209ee <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   209aa:	2338      	movs	r3, #56	; 0x38
   209ac:	18fb      	adds	r3, r7, r3
   209ae:	881a      	ldrh	r2, [r3, #0]
   209b0:	1d3b      	adds	r3, r7, #4
   209b2:	881b      	ldrh	r3, [r3, #0]
   209b4:	1ad3      	subs	r3, r2, r3
   209b6:	001a      	movs	r2, r3
   209b8:	68bb      	ldr	r3, [r7, #8]
   209ba:	18d3      	adds	r3, r2, r3
   209bc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   209be:	68b8      	ldr	r0, [r7, #8]
   209c0:	2334      	movs	r3, #52	; 0x34
   209c2:	18fb      	adds	r3, r7, r3
   209c4:	881a      	ldrh	r2, [r3, #0]
   209c6:	231f      	movs	r3, #31
   209c8:	18fc      	adds	r4, r7, r3
   209ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   209cc:	0019      	movs	r1, r3
   209ce:	4b3d      	ldr	r3, [pc, #244]	; (20ac4 <hif_send+0x388>)
   209d0:	4798      	blx	r3
   209d2:	0003      	movs	r3, r0
   209d4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   209d6:	231f      	movs	r3, #31
   209d8:	18fb      	adds	r3, r7, r3
   209da:	781b      	ldrb	r3, [r3, #0]
   209dc:	b25b      	sxtb	r3, r3
   209de:	2b00      	cmp	r3, #0
   209e0:	d14c      	bne.n	20a7c <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   209e2:	2334      	movs	r3, #52	; 0x34
   209e4:	18fb      	adds	r3, r7, r3
   209e6:	881a      	ldrh	r2, [r3, #0]
   209e8:	68bb      	ldr	r3, [r7, #8]
   209ea:	18d3      	adds	r3, r2, r3
   209ec:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   209ee:	693b      	ldr	r3, [r7, #16]
   209f0:	009b      	lsls	r3, r3, #2
   209f2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   209f4:	697b      	ldr	r3, [r7, #20]
   209f6:	2202      	movs	r2, #2
   209f8:	4313      	orrs	r3, r2
   209fa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   209fc:	697b      	ldr	r3, [r7, #20]
   209fe:	221f      	movs	r2, #31
   20a00:	18bc      	adds	r4, r7, r2
   20a02:	4a31      	ldr	r2, [pc, #196]	; (20ac8 <hif_send+0x38c>)
   20a04:	0019      	movs	r1, r3
   20a06:	0010      	movs	r0, r2
   20a08:	4b24      	ldr	r3, [pc, #144]	; (20a9c <hif_send+0x360>)
   20a0a:	4798      	blx	r3
   20a0c:	0003      	movs	r3, r0
   20a0e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20a10:	231f      	movs	r3, #31
   20a12:	18fb      	adds	r3, r7, r3
   20a14:	781b      	ldrb	r3, [r3, #0]
   20a16:	b25b      	sxtb	r3, r3
   20a18:	2b00      	cmp	r3, #0
   20a1a:	d01c      	beq.n	20a56 <hif_send+0x31a>
   20a1c:	e02f      	b.n	20a7e <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20a1e:	231f      	movs	r3, #31
   20a20:	18fc      	adds	r4, r7, r3
   20a22:	4b2a      	ldr	r3, [pc, #168]	; (20acc <hif_send+0x390>)
   20a24:	4798      	blx	r3
   20a26:	0003      	movs	r3, r0
   20a28:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   20a2a:	231f      	movs	r3, #31
   20a2c:	18fb      	adds	r3, r7, r3
   20a2e:	22fd      	movs	r2, #253	; 0xfd
   20a30:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20a32:	e026      	b.n	20a82 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20a34:	2398      	movs	r3, #152	; 0x98
   20a36:	33ff      	adds	r3, #255	; 0xff
   20a38:	001a      	movs	r2, r3
   20a3a:	4925      	ldr	r1, [pc, #148]	; (20ad0 <hif_send+0x394>)
   20a3c:	4b25      	ldr	r3, [pc, #148]	; (20ad4 <hif_send+0x398>)
   20a3e:	0018      	movs	r0, r3
   20a40:	4b1a      	ldr	r3, [pc, #104]	; (20aac <hif_send+0x370>)
   20a42:	4798      	blx	r3
   20a44:	4b24      	ldr	r3, [pc, #144]	; (20ad8 <hif_send+0x39c>)
   20a46:	0018      	movs	r0, r3
   20a48:	4b18      	ldr	r3, [pc, #96]	; (20aac <hif_send+0x370>)
   20a4a:	4798      	blx	r3
   20a4c:	4b19      	ldr	r3, [pc, #100]	; (20ab4 <hif_send+0x378>)
   20a4e:	0018      	movs	r0, r3
   20a50:	4b16      	ldr	r3, [pc, #88]	; (20aac <hif_send+0x370>)
   20a52:	4798      	blx	r3
		goto ERR2;
   20a54:	e015      	b.n	20a82 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20a56:	231f      	movs	r3, #31
   20a58:	18fc      	adds	r4, r7, r3
   20a5a:	4b1c      	ldr	r3, [pc, #112]	; (20acc <hif_send+0x390>)
   20a5c:	4798      	blx	r3
   20a5e:	0003      	movs	r3, r0
   20a60:	7023      	strb	r3, [r4, #0]
	return ret;
   20a62:	231f      	movs	r3, #31
   20a64:	18fb      	adds	r3, r7, r3
   20a66:	781b      	ldrb	r3, [r3, #0]
   20a68:	b25b      	sxtb	r3, r3
   20a6a:	e00e      	b.n	20a8a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20a6c:	46c0      	nop			; (mov r8, r8)
   20a6e:	e006      	b.n	20a7e <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20a70:	46c0      	nop			; (mov r8, r8)
   20a72:	e004      	b.n	20a7e <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20a74:	46c0      	nop			; (mov r8, r8)
   20a76:	e002      	b.n	20a7e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20a78:	46c0      	nop			; (mov r8, r8)
   20a7a:	e000      	b.n	20a7e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20a7c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20a7e:	4b17      	ldr	r3, [pc, #92]	; (20adc <hif_send+0x3a0>)
   20a80:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20a82:	231f      	movs	r3, #31
   20a84:	18fb      	adds	r3, r7, r3
   20a86:	781b      	ldrb	r3, [r3, #0]
   20a88:	b25b      	sxtb	r3, r3
}
   20a8a:	0018      	movs	r0, r3
   20a8c:	46bd      	mov	sp, r7
   20a8e:	b009      	add	sp, #36	; 0x24
   20a90:	bd90      	pop	{r4, r7, pc}
   20a92:	46c0      	nop			; (mov r8, r8)
   20a94:	00020605 	.word	0x00020605
   20a98:	0000108c 	.word	0x0000108c
   20a9c:	00022591 	.word	0x00022591
   20aa0:	00001078 	.word	0x00001078
   20aa4:	0002256d 	.word	0x0002256d
   20aa8:	00037c4c 	.word	0x00037c4c
   20aac:	0001d7a9 	.word	0x0001d7a9
   20ab0:	00037c58 	.word	0x00037c58
   20ab4:	00037c6c 	.word	0x00037c6c
   20ab8:	0001fbfd 	.word	0x0001fbfd
   20abc:	00150400 	.word	0x00150400
   20ac0:	000003e7 	.word	0x000003e7
   20ac4:	000226d9 	.word	0x000226d9
   20ac8:	0000106c 	.word	0x0000106c
   20acc:	0002069d 	.word	0x0002069d
   20ad0:	00037f74 	.word	0x00037f74
   20ad4:	00037c70 	.word	0x00037c70
   20ad8:	00037c84 	.word	0x00037c84
   20adc:	00020675 	.word	0x00020675

00020ae0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20ae0:	b590      	push	{r4, r7, lr}
   20ae2:	b087      	sub	sp, #28
   20ae4:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   20ae6:	230f      	movs	r3, #15
   20ae8:	18fb      	adds	r3, r7, r3
   20aea:	2200      	movs	r2, #0
   20aec:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20aee:	230f      	movs	r3, #15
   20af0:	18fc      	adds	r4, r7, r3
   20af2:	2308      	movs	r3, #8
   20af4:	18fb      	adds	r3, r7, r3
   20af6:	4adc      	ldr	r2, [pc, #880]	; (20e68 <hif_isr+0x388>)
   20af8:	0019      	movs	r1, r3
   20afa:	0010      	movs	r0, r2
   20afc:	4bdb      	ldr	r3, [pc, #876]	; (20e6c <hif_isr+0x38c>)
   20afe:	4798      	blx	r3
   20b00:	0003      	movs	r3, r0
   20b02:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20b04:	230f      	movs	r3, #15
   20b06:	18fb      	adds	r3, r7, r3
   20b08:	781b      	ldrb	r3, [r3, #0]
   20b0a:	b25b      	sxtb	r3, r3
   20b0c:	2b00      	cmp	r3, #0
   20b0e:	d000      	beq.n	20b12 <hif_isr+0x32>
   20b10:	e21e      	b.n	20f50 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20b12:	68bb      	ldr	r3, [r7, #8]
   20b14:	2201      	movs	r2, #1
   20b16:	4013      	ands	r3, r2
   20b18:	d100      	bne.n	20b1c <hif_isr+0x3c>
   20b1a:	e204      	b.n	20f26 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20b1c:	2000      	movs	r0, #0
   20b1e:	4bd4      	ldr	r3, [pc, #848]	; (20e70 <hif_isr+0x390>)
   20b20:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20b22:	68bb      	ldr	r3, [r7, #8]
   20b24:	2201      	movs	r2, #1
   20b26:	4393      	bics	r3, r2
   20b28:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20b2a:	68bb      	ldr	r3, [r7, #8]
   20b2c:	220f      	movs	r2, #15
   20b2e:	18bc      	adds	r4, r7, r2
   20b30:	4acd      	ldr	r2, [pc, #820]	; (20e68 <hif_isr+0x388>)
   20b32:	0019      	movs	r1, r3
   20b34:	0010      	movs	r0, r2
   20b36:	4bcf      	ldr	r3, [pc, #828]	; (20e74 <hif_isr+0x394>)
   20b38:	4798      	blx	r3
   20b3a:	0003      	movs	r3, r0
   20b3c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20b3e:	230f      	movs	r3, #15
   20b40:	18fb      	adds	r3, r7, r3
   20b42:	781b      	ldrb	r3, [r3, #0]
   20b44:	b25b      	sxtb	r3, r3
   20b46:	2b00      	cmp	r3, #0
   20b48:	d000      	beq.n	20b4c <hif_isr+0x6c>
   20b4a:	e210      	b.n	20f6e <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20b4c:	4bca      	ldr	r3, [pc, #808]	; (20e78 <hif_isr+0x398>)
   20b4e:	2201      	movs	r2, #1
   20b50:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20b52:	68bb      	ldr	r3, [r7, #8]
   20b54:	089b      	lsrs	r3, r3, #2
   20b56:	b29a      	uxth	r2, r3
   20b58:	230c      	movs	r3, #12
   20b5a:	18fb      	adds	r3, r7, r3
   20b5c:	0512      	lsls	r2, r2, #20
   20b5e:	0d12      	lsrs	r2, r2, #20
   20b60:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20b62:	230c      	movs	r3, #12
   20b64:	18fb      	adds	r3, r7, r3
   20b66:	881b      	ldrh	r3, [r3, #0]
   20b68:	2b00      	cmp	r3, #0
   20b6a:	d100      	bne.n	20b6e <hif_isr+0x8e>
   20b6c:	e1c8      	b.n	20f00 <hif_isr+0x420>
				uint32 address = 0;
   20b6e:	2300      	movs	r3, #0
   20b70:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20b72:	230f      	movs	r3, #15
   20b74:	18fc      	adds	r4, r7, r3
   20b76:	003b      	movs	r3, r7
   20b78:	4ac0      	ldr	r2, [pc, #768]	; (20e7c <hif_isr+0x39c>)
   20b7a:	0019      	movs	r1, r3
   20b7c:	0010      	movs	r0, r2
   20b7e:	4bbb      	ldr	r3, [pc, #748]	; (20e6c <hif_isr+0x38c>)
   20b80:	4798      	blx	r3
   20b82:	0003      	movs	r3, r0
   20b84:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   20b86:	230f      	movs	r3, #15
   20b88:	18fb      	adds	r3, r7, r3
   20b8a:	781b      	ldrb	r3, [r3, #0]
   20b8c:	b25b      	sxtb	r3, r3
   20b8e:	2b00      	cmp	r3, #0
   20b90:	d012      	beq.n	20bb8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20b92:	23e4      	movs	r3, #228	; 0xe4
   20b94:	005a      	lsls	r2, r3, #1
   20b96:	49ba      	ldr	r1, [pc, #744]	; (20e80 <hif_isr+0x3a0>)
   20b98:	4bba      	ldr	r3, [pc, #744]	; (20e84 <hif_isr+0x3a4>)
   20b9a:	0018      	movs	r0, r3
   20b9c:	4bba      	ldr	r3, [pc, #744]	; (20e88 <hif_isr+0x3a8>)
   20b9e:	4798      	blx	r3
   20ba0:	4bba      	ldr	r3, [pc, #744]	; (20e8c <hif_isr+0x3ac>)
   20ba2:	0018      	movs	r0, r3
   20ba4:	4bb8      	ldr	r3, [pc, #736]	; (20e88 <hif_isr+0x3a8>)
   20ba6:	4798      	blx	r3
   20ba8:	4bb9      	ldr	r3, [pc, #740]	; (20e90 <hif_isr+0x3b0>)
   20baa:	0018      	movs	r0, r3
   20bac:	4bb6      	ldr	r3, [pc, #728]	; (20e88 <hif_isr+0x3a8>)
   20bae:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20bb0:	2001      	movs	r0, #1
   20bb2:	4baf      	ldr	r3, [pc, #700]	; (20e70 <hif_isr+0x390>)
   20bb4:	4798      	blx	r3
					goto ERR1;
   20bb6:	e1db      	b.n	20f70 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   20bb8:	683a      	ldr	r2, [r7, #0]
   20bba:	4baf      	ldr	r3, [pc, #700]	; (20e78 <hif_isr+0x398>)
   20bbc:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   20bbe:	230c      	movs	r3, #12
   20bc0:	18fb      	adds	r3, r7, r3
   20bc2:	881a      	ldrh	r2, [r3, #0]
   20bc4:	4bac      	ldr	r3, [pc, #688]	; (20e78 <hif_isr+0x398>)
   20bc6:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   20bc8:	683b      	ldr	r3, [r7, #0]
   20bca:	220f      	movs	r2, #15
   20bcc:	18bc      	adds	r4, r7, r2
   20bce:	1d39      	adds	r1, r7, #4
   20bd0:	2204      	movs	r2, #4
   20bd2:	0018      	movs	r0, r3
   20bd4:	4baf      	ldr	r3, [pc, #700]	; (20e94 <hif_isr+0x3b4>)
   20bd6:	4798      	blx	r3
   20bd8:	0003      	movs	r3, r0
   20bda:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   20bdc:	1d3b      	adds	r3, r7, #4
   20bde:	885b      	ldrh	r3, [r3, #2]
   20be0:	b29a      	uxth	r2, r3
   20be2:	1d3b      	adds	r3, r7, #4
   20be4:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   20be6:	230f      	movs	r3, #15
   20be8:	18fb      	adds	r3, r7, r3
   20bea:	781b      	ldrb	r3, [r3, #0]
   20bec:	b25b      	sxtb	r3, r3
   20bee:	2b00      	cmp	r3, #0
   20bf0:	d012      	beq.n	20c18 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20bf2:	23e9      	movs	r3, #233	; 0xe9
   20bf4:	005a      	lsls	r2, r3, #1
   20bf6:	49a2      	ldr	r1, [pc, #648]	; (20e80 <hif_isr+0x3a0>)
   20bf8:	4ba2      	ldr	r3, [pc, #648]	; (20e84 <hif_isr+0x3a4>)
   20bfa:	0018      	movs	r0, r3
   20bfc:	4ba2      	ldr	r3, [pc, #648]	; (20e88 <hif_isr+0x3a8>)
   20bfe:	4798      	blx	r3
   20c00:	4ba5      	ldr	r3, [pc, #660]	; (20e98 <hif_isr+0x3b8>)
   20c02:	0018      	movs	r0, r3
   20c04:	4ba0      	ldr	r3, [pc, #640]	; (20e88 <hif_isr+0x3a8>)
   20c06:	4798      	blx	r3
   20c08:	4ba1      	ldr	r3, [pc, #644]	; (20e90 <hif_isr+0x3b0>)
   20c0a:	0018      	movs	r0, r3
   20c0c:	4b9e      	ldr	r3, [pc, #632]	; (20e88 <hif_isr+0x3a8>)
   20c0e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20c10:	2001      	movs	r0, #1
   20c12:	4b97      	ldr	r3, [pc, #604]	; (20e70 <hif_isr+0x390>)
   20c14:	4798      	blx	r3
					goto ERR1;
   20c16:	e1ab      	b.n	20f70 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   20c18:	1d3b      	adds	r3, r7, #4
   20c1a:	885b      	ldrh	r3, [r3, #2]
   20c1c:	b29b      	uxth	r3, r3
   20c1e:	220c      	movs	r2, #12
   20c20:	18ba      	adds	r2, r7, r2
   20c22:	8812      	ldrh	r2, [r2, #0]
   20c24:	429a      	cmp	r2, r3
   20c26:	d02f      	beq.n	20c88 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   20c28:	230c      	movs	r3, #12
   20c2a:	18fb      	adds	r3, r7, r3
   20c2c:	881b      	ldrh	r3, [r3, #0]
   20c2e:	1d3a      	adds	r2, r7, #4
   20c30:	8852      	ldrh	r2, [r2, #2]
   20c32:	b292      	uxth	r2, r2
   20c34:	1a9b      	subs	r3, r3, r2
   20c36:	2b04      	cmp	r3, #4
   20c38:	dd26      	ble.n	20c88 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   20c3a:	23dc      	movs	r3, #220	; 0xdc
   20c3c:	33ff      	adds	r3, #255	; 0xff
   20c3e:	001a      	movs	r2, r3
   20c40:	498f      	ldr	r1, [pc, #572]	; (20e80 <hif_isr+0x3a0>)
   20c42:	4b90      	ldr	r3, [pc, #576]	; (20e84 <hif_isr+0x3a4>)
   20c44:	0018      	movs	r0, r3
   20c46:	4b90      	ldr	r3, [pc, #576]	; (20e88 <hif_isr+0x3a8>)
   20c48:	4798      	blx	r3
   20c4a:	230c      	movs	r3, #12
   20c4c:	18fb      	adds	r3, r7, r3
   20c4e:	8819      	ldrh	r1, [r3, #0]
   20c50:	1d3b      	adds	r3, r7, #4
   20c52:	885b      	ldrh	r3, [r3, #2]
   20c54:	b29b      	uxth	r3, r3
   20c56:	001a      	movs	r2, r3
   20c58:	1d3b      	adds	r3, r7, #4
   20c5a:	781b      	ldrb	r3, [r3, #0]
   20c5c:	b2db      	uxtb	r3, r3
   20c5e:	001c      	movs	r4, r3
   20c60:	1d3b      	adds	r3, r7, #4
   20c62:	785b      	ldrb	r3, [r3, #1]
   20c64:	b2db      	uxtb	r3, r3
   20c66:	488d      	ldr	r0, [pc, #564]	; (20e9c <hif_isr+0x3bc>)
   20c68:	9300      	str	r3, [sp, #0]
   20c6a:	0023      	movs	r3, r4
   20c6c:	4c86      	ldr	r4, [pc, #536]	; (20e88 <hif_isr+0x3a8>)
   20c6e:	47a0      	blx	r4
   20c70:	4b87      	ldr	r3, [pc, #540]	; (20e90 <hif_isr+0x3b0>)
   20c72:	0018      	movs	r0, r3
   20c74:	4b84      	ldr	r3, [pc, #528]	; (20e88 <hif_isr+0x3a8>)
   20c76:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   20c78:	2001      	movs	r0, #1
   20c7a:	4b7d      	ldr	r3, [pc, #500]	; (20e70 <hif_isr+0x390>)
   20c7c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   20c7e:	230f      	movs	r3, #15
   20c80:	18fb      	adds	r3, r7, r3
   20c82:	22fa      	movs	r2, #250	; 0xfa
   20c84:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   20c86:	e173      	b.n	20f70 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   20c88:	1d3b      	adds	r3, r7, #4
   20c8a:	781b      	ldrb	r3, [r3, #0]
   20c8c:	b2db      	uxtb	r3, r3
   20c8e:	2b01      	cmp	r3, #1
   20c90:	d122      	bne.n	20cd8 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   20c92:	4b79      	ldr	r3, [pc, #484]	; (20e78 <hif_isr+0x398>)
   20c94:	691b      	ldr	r3, [r3, #16]
   20c96:	2b00      	cmp	r3, #0
   20c98:	d00d      	beq.n	20cb6 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20c9a:	4b77      	ldr	r3, [pc, #476]	; (20e78 <hif_isr+0x398>)
   20c9c:	691b      	ldr	r3, [r3, #16]
   20c9e:	1d3a      	adds	r2, r7, #4
   20ca0:	7852      	ldrb	r2, [r2, #1]
   20ca2:	b2d0      	uxtb	r0, r2
   20ca4:	1d3a      	adds	r2, r7, #4
   20ca6:	8852      	ldrh	r2, [r2, #2]
   20ca8:	b292      	uxth	r2, r2
   20caa:	3a08      	subs	r2, #8
   20cac:	b291      	uxth	r1, r2
   20cae:	683a      	ldr	r2, [r7, #0]
   20cb0:	3208      	adds	r2, #8
   20cb2:	4798      	blx	r3
   20cb4:	e102      	b.n	20ebc <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   20cb6:	23e8      	movs	r3, #232	; 0xe8
   20cb8:	33ff      	adds	r3, #255	; 0xff
   20cba:	001a      	movs	r2, r3
   20cbc:	4970      	ldr	r1, [pc, #448]	; (20e80 <hif_isr+0x3a0>)
   20cbe:	4b71      	ldr	r3, [pc, #452]	; (20e84 <hif_isr+0x3a4>)
   20cc0:	0018      	movs	r0, r3
   20cc2:	4b71      	ldr	r3, [pc, #452]	; (20e88 <hif_isr+0x3a8>)
   20cc4:	4798      	blx	r3
   20cc6:	4b76      	ldr	r3, [pc, #472]	; (20ea0 <hif_isr+0x3c0>)
   20cc8:	0018      	movs	r0, r3
   20cca:	4b6f      	ldr	r3, [pc, #444]	; (20e88 <hif_isr+0x3a8>)
   20ccc:	4798      	blx	r3
   20cce:	4b70      	ldr	r3, [pc, #448]	; (20e90 <hif_isr+0x3b0>)
   20cd0:	0018      	movs	r0, r3
   20cd2:	4b6d      	ldr	r3, [pc, #436]	; (20e88 <hif_isr+0x3a8>)
   20cd4:	4798      	blx	r3
   20cd6:	e0f1      	b.n	20ebc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   20cd8:	1d3b      	adds	r3, r7, #4
   20cda:	781b      	ldrb	r3, [r3, #0]
   20cdc:	b2db      	uxtb	r3, r3
   20cde:	2b02      	cmp	r3, #2
   20ce0:	d122      	bne.n	20d28 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   20ce2:	4b65      	ldr	r3, [pc, #404]	; (20e78 <hif_isr+0x398>)
   20ce4:	695b      	ldr	r3, [r3, #20]
   20ce6:	2b00      	cmp	r3, #0
   20ce8:	d00d      	beq.n	20d06 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20cea:	4b63      	ldr	r3, [pc, #396]	; (20e78 <hif_isr+0x398>)
   20cec:	695b      	ldr	r3, [r3, #20]
   20cee:	1d3a      	adds	r2, r7, #4
   20cf0:	7852      	ldrb	r2, [r2, #1]
   20cf2:	b2d0      	uxtb	r0, r2
   20cf4:	1d3a      	adds	r2, r7, #4
   20cf6:	8852      	ldrh	r2, [r2, #2]
   20cf8:	b292      	uxth	r2, r2
   20cfa:	3a08      	subs	r2, #8
   20cfc:	b291      	uxth	r1, r2
   20cfe:	683a      	ldr	r2, [r7, #0]
   20d00:	3208      	adds	r2, #8
   20d02:	4798      	blx	r3
   20d04:	e0da      	b.n	20ebc <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   20d06:	23f0      	movs	r3, #240	; 0xf0
   20d08:	33ff      	adds	r3, #255	; 0xff
   20d0a:	001a      	movs	r2, r3
   20d0c:	495c      	ldr	r1, [pc, #368]	; (20e80 <hif_isr+0x3a0>)
   20d0e:	4b5d      	ldr	r3, [pc, #372]	; (20e84 <hif_isr+0x3a4>)
   20d10:	0018      	movs	r0, r3
   20d12:	4b5d      	ldr	r3, [pc, #372]	; (20e88 <hif_isr+0x3a8>)
   20d14:	4798      	blx	r3
   20d16:	4b63      	ldr	r3, [pc, #396]	; (20ea4 <hif_isr+0x3c4>)
   20d18:	0018      	movs	r0, r3
   20d1a:	4b5b      	ldr	r3, [pc, #364]	; (20e88 <hif_isr+0x3a8>)
   20d1c:	4798      	blx	r3
   20d1e:	4b5c      	ldr	r3, [pc, #368]	; (20e90 <hif_isr+0x3b0>)
   20d20:	0018      	movs	r0, r3
   20d22:	4b59      	ldr	r3, [pc, #356]	; (20e88 <hif_isr+0x3a8>)
   20d24:	4798      	blx	r3
   20d26:	e0c9      	b.n	20ebc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   20d28:	1d3b      	adds	r3, r7, #4
   20d2a:	781b      	ldrb	r3, [r3, #0]
   20d2c:	b2db      	uxtb	r3, r3
   20d2e:	2b04      	cmp	r3, #4
   20d30:	d122      	bne.n	20d78 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   20d32:	4b51      	ldr	r3, [pc, #324]	; (20e78 <hif_isr+0x398>)
   20d34:	699b      	ldr	r3, [r3, #24]
   20d36:	2b00      	cmp	r3, #0
   20d38:	d00d      	beq.n	20d56 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20d3a:	4b4f      	ldr	r3, [pc, #316]	; (20e78 <hif_isr+0x398>)
   20d3c:	699b      	ldr	r3, [r3, #24]
   20d3e:	1d3a      	adds	r2, r7, #4
   20d40:	7852      	ldrb	r2, [r2, #1]
   20d42:	b2d0      	uxtb	r0, r2
   20d44:	1d3a      	adds	r2, r7, #4
   20d46:	8852      	ldrh	r2, [r2, #2]
   20d48:	b292      	uxth	r2, r2
   20d4a:	3a08      	subs	r2, #8
   20d4c:	b291      	uxth	r1, r2
   20d4e:	683a      	ldr	r2, [r7, #0]
   20d50:	3208      	adds	r2, #8
   20d52:	4798      	blx	r3
   20d54:	e0b2      	b.n	20ebc <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   20d56:	23f8      	movs	r3, #248	; 0xf8
   20d58:	33ff      	adds	r3, #255	; 0xff
   20d5a:	001a      	movs	r2, r3
   20d5c:	4948      	ldr	r1, [pc, #288]	; (20e80 <hif_isr+0x3a0>)
   20d5e:	4b49      	ldr	r3, [pc, #292]	; (20e84 <hif_isr+0x3a4>)
   20d60:	0018      	movs	r0, r3
   20d62:	4b49      	ldr	r3, [pc, #292]	; (20e88 <hif_isr+0x3a8>)
   20d64:	4798      	blx	r3
   20d66:	4b50      	ldr	r3, [pc, #320]	; (20ea8 <hif_isr+0x3c8>)
   20d68:	0018      	movs	r0, r3
   20d6a:	4b47      	ldr	r3, [pc, #284]	; (20e88 <hif_isr+0x3a8>)
   20d6c:	4798      	blx	r3
   20d6e:	4b48      	ldr	r3, [pc, #288]	; (20e90 <hif_isr+0x3b0>)
   20d70:	0018      	movs	r0, r3
   20d72:	4b45      	ldr	r3, [pc, #276]	; (20e88 <hif_isr+0x3a8>)
   20d74:	4798      	blx	r3
   20d76:	e0a1      	b.n	20ebc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   20d78:	1d3b      	adds	r3, r7, #4
   20d7a:	781b      	ldrb	r3, [r3, #0]
   20d7c:	b2db      	uxtb	r3, r3
   20d7e:	2b06      	cmp	r3, #6
   20d80:	d121      	bne.n	20dc6 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   20d82:	4b3d      	ldr	r3, [pc, #244]	; (20e78 <hif_isr+0x398>)
   20d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20d86:	2b00      	cmp	r3, #0
   20d88:	d00d      	beq.n	20da6 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20d8a:	4b3b      	ldr	r3, [pc, #236]	; (20e78 <hif_isr+0x398>)
   20d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20d8e:	1d3a      	adds	r2, r7, #4
   20d90:	7852      	ldrb	r2, [r2, #1]
   20d92:	b2d0      	uxtb	r0, r2
   20d94:	1d3a      	adds	r2, r7, #4
   20d96:	8852      	ldrh	r2, [r2, #2]
   20d98:	b292      	uxth	r2, r2
   20d9a:	3a08      	subs	r2, #8
   20d9c:	b291      	uxth	r1, r2
   20d9e:	683a      	ldr	r2, [r7, #0]
   20da0:	3208      	adds	r2, #8
   20da2:	4798      	blx	r3
   20da4:	e08a      	b.n	20ebc <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   20da6:	2380      	movs	r3, #128	; 0x80
   20da8:	009a      	lsls	r2, r3, #2
   20daa:	4935      	ldr	r1, [pc, #212]	; (20e80 <hif_isr+0x3a0>)
   20dac:	4b35      	ldr	r3, [pc, #212]	; (20e84 <hif_isr+0x3a4>)
   20dae:	0018      	movs	r0, r3
   20db0:	4b35      	ldr	r3, [pc, #212]	; (20e88 <hif_isr+0x3a8>)
   20db2:	4798      	blx	r3
   20db4:	4b3d      	ldr	r3, [pc, #244]	; (20eac <hif_isr+0x3cc>)
   20db6:	0018      	movs	r0, r3
   20db8:	4b33      	ldr	r3, [pc, #204]	; (20e88 <hif_isr+0x3a8>)
   20dba:	4798      	blx	r3
   20dbc:	4b34      	ldr	r3, [pc, #208]	; (20e90 <hif_isr+0x3b0>)
   20dbe:	0018      	movs	r0, r3
   20dc0:	4b31      	ldr	r3, [pc, #196]	; (20e88 <hif_isr+0x3a8>)
   20dc2:	4798      	blx	r3
   20dc4:	e07a      	b.n	20ebc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   20dc6:	1d3b      	adds	r3, r7, #4
   20dc8:	781b      	ldrb	r3, [r3, #0]
   20dca:	b2db      	uxtb	r3, r3
   20dcc:	2b07      	cmp	r3, #7
   20dce:	d120      	bne.n	20e12 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   20dd0:	4b29      	ldr	r3, [pc, #164]	; (20e78 <hif_isr+0x398>)
   20dd2:	69db      	ldr	r3, [r3, #28]
   20dd4:	2b00      	cmp	r3, #0
   20dd6:	d00d      	beq.n	20df4 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20dd8:	4b27      	ldr	r3, [pc, #156]	; (20e78 <hif_isr+0x398>)
   20dda:	69db      	ldr	r3, [r3, #28]
   20ddc:	1d3a      	adds	r2, r7, #4
   20dde:	7852      	ldrb	r2, [r2, #1]
   20de0:	b2d0      	uxtb	r0, r2
   20de2:	1d3a      	adds	r2, r7, #4
   20de4:	8852      	ldrh	r2, [r2, #2]
   20de6:	b292      	uxth	r2, r2
   20de8:	3a08      	subs	r2, #8
   20dea:	b291      	uxth	r1, r2
   20dec:	683a      	ldr	r2, [r7, #0]
   20dee:	3208      	adds	r2, #8
   20df0:	4798      	blx	r3
   20df2:	e063      	b.n	20ebc <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   20df4:	4a2e      	ldr	r2, [pc, #184]	; (20eb0 <hif_isr+0x3d0>)
   20df6:	4922      	ldr	r1, [pc, #136]	; (20e80 <hif_isr+0x3a0>)
   20df8:	4b22      	ldr	r3, [pc, #136]	; (20e84 <hif_isr+0x3a4>)
   20dfa:	0018      	movs	r0, r3
   20dfc:	4b22      	ldr	r3, [pc, #136]	; (20e88 <hif_isr+0x3a8>)
   20dfe:	4798      	blx	r3
   20e00:	4b2c      	ldr	r3, [pc, #176]	; (20eb4 <hif_isr+0x3d4>)
   20e02:	0018      	movs	r0, r3
   20e04:	4b20      	ldr	r3, [pc, #128]	; (20e88 <hif_isr+0x3a8>)
   20e06:	4798      	blx	r3
   20e08:	4b21      	ldr	r3, [pc, #132]	; (20e90 <hif_isr+0x3b0>)
   20e0a:	0018      	movs	r0, r3
   20e0c:	4b1e      	ldr	r3, [pc, #120]	; (20e88 <hif_isr+0x3a8>)
   20e0e:	4798      	blx	r3
   20e10:	e054      	b.n	20ebc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   20e12:	1d3b      	adds	r3, r7, #4
   20e14:	781b      	ldrb	r3, [r3, #0]
   20e16:	b2db      	uxtb	r3, r3
   20e18:	2b05      	cmp	r3, #5
   20e1a:	d111      	bne.n	20e40 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   20e1c:	4b16      	ldr	r3, [pc, #88]	; (20e78 <hif_isr+0x398>)
   20e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20e20:	2b00      	cmp	r3, #0
   20e22:	d04b      	beq.n	20ebc <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20e24:	4b14      	ldr	r3, [pc, #80]	; (20e78 <hif_isr+0x398>)
   20e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20e28:	1d3a      	adds	r2, r7, #4
   20e2a:	7852      	ldrb	r2, [r2, #1]
   20e2c:	b2d0      	uxtb	r0, r2
   20e2e:	1d3a      	adds	r2, r7, #4
   20e30:	8852      	ldrh	r2, [r2, #2]
   20e32:	b292      	uxth	r2, r2
   20e34:	3a08      	subs	r2, #8
   20e36:	b291      	uxth	r1, r2
   20e38:	683a      	ldr	r2, [r7, #0]
   20e3a:	3208      	adds	r2, #8
   20e3c:	4798      	blx	r3
   20e3e:	e03d      	b.n	20ebc <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   20e40:	2384      	movs	r3, #132	; 0x84
   20e42:	009a      	lsls	r2, r3, #2
   20e44:	490e      	ldr	r1, [pc, #56]	; (20e80 <hif_isr+0x3a0>)
   20e46:	4b0f      	ldr	r3, [pc, #60]	; (20e84 <hif_isr+0x3a4>)
   20e48:	0018      	movs	r0, r3
   20e4a:	4b0f      	ldr	r3, [pc, #60]	; (20e88 <hif_isr+0x3a8>)
   20e4c:	4798      	blx	r3
   20e4e:	4b1a      	ldr	r3, [pc, #104]	; (20eb8 <hif_isr+0x3d8>)
   20e50:	0018      	movs	r0, r3
   20e52:	4b0d      	ldr	r3, [pc, #52]	; (20e88 <hif_isr+0x3a8>)
   20e54:	4798      	blx	r3
   20e56:	4b0e      	ldr	r3, [pc, #56]	; (20e90 <hif_isr+0x3b0>)
   20e58:	0018      	movs	r0, r3
   20e5a:	4b0b      	ldr	r3, [pc, #44]	; (20e88 <hif_isr+0x3a8>)
   20e5c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   20e5e:	230f      	movs	r3, #15
   20e60:	18fb      	adds	r3, r7, r3
   20e62:	22fa      	movs	r2, #250	; 0xfa
   20e64:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   20e66:	e083      	b.n	20f70 <hif_isr+0x490>
   20e68:	00001070 	.word	0x00001070
   20e6c:	0002256d 	.word	0x0002256d
   20e70:	0001fc91 	.word	0x0001fc91
   20e74:	00022591 	.word	0x00022591
   20e78:	200058d8 	.word	0x200058d8
   20e7c:	00001084 	.word	0x00001084
   20e80:	00037f80 	.word	0x00037f80
   20e84:	00037c70 	.word	0x00037c70
   20e88:	0001d7a9 	.word	0x0001d7a9
   20e8c:	00037ca4 	.word	0x00037ca4
   20e90:	00037c6c 	.word	0x00037c6c
   20e94:	000225e1 	.word	0x000225e1
   20e98:	00037ccc 	.word	0x00037ccc
   20e9c:	00037ce4 	.word	0x00037ce4
   20ea0:	00037d24 	.word	0x00037d24
   20ea4:	00037d48 	.word	0x00037d48
   20ea8:	00037d6c 	.word	0x00037d6c
   20eac:	00037d8c 	.word	0x00037d8c
   20eb0:	00000207 	.word	0x00000207
   20eb4:	00037db0 	.word	0x00037db0
   20eb8:	00037dd4 	.word	0x00037dd4
				}
				if(gstrHifCxt.u8HifRXDone)
   20ebc:	4b30      	ldr	r3, [pc, #192]	; (20f80 <hif_isr+0x4a0>)
   20ebe:	789b      	ldrb	r3, [r3, #2]
   20ec0:	b2db      	uxtb	r3, r3
   20ec2:	2b00      	cmp	r3, #0
   20ec4:	d054      	beq.n	20f70 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   20ec6:	4a2f      	ldr	r2, [pc, #188]	; (20f84 <hif_isr+0x4a4>)
   20ec8:	492f      	ldr	r1, [pc, #188]	; (20f88 <hif_isr+0x4a8>)
   20eca:	4b30      	ldr	r3, [pc, #192]	; (20f8c <hif_isr+0x4ac>)
   20ecc:	0018      	movs	r0, r3
   20ece:	4b30      	ldr	r3, [pc, #192]	; (20f90 <hif_isr+0x4b0>)
   20ed0:	4798      	blx	r3
   20ed2:	1d3b      	adds	r3, r7, #4
   20ed4:	781b      	ldrb	r3, [r3, #0]
   20ed6:	b2db      	uxtb	r3, r3
   20ed8:	0019      	movs	r1, r3
   20eda:	1d3b      	adds	r3, r7, #4
   20edc:	785b      	ldrb	r3, [r3, #1]
   20ede:	b2db      	uxtb	r3, r3
   20ee0:	001a      	movs	r2, r3
   20ee2:	4b2c      	ldr	r3, [pc, #176]	; (20f94 <hif_isr+0x4b4>)
   20ee4:	0018      	movs	r0, r3
   20ee6:	4b2a      	ldr	r3, [pc, #168]	; (20f90 <hif_isr+0x4b0>)
   20ee8:	4798      	blx	r3
   20eea:	4b2b      	ldr	r3, [pc, #172]	; (20f98 <hif_isr+0x4b8>)
   20eec:	0018      	movs	r0, r3
   20eee:	4b28      	ldr	r3, [pc, #160]	; (20f90 <hif_isr+0x4b0>)
   20ef0:	4798      	blx	r3
					ret = hif_set_rx_done();
   20ef2:	230f      	movs	r3, #15
   20ef4:	18fc      	adds	r4, r7, r3
   20ef6:	4b29      	ldr	r3, [pc, #164]	; (20f9c <hif_isr+0x4bc>)
   20ef8:	4798      	blx	r3
   20efa:	0003      	movs	r3, r0
   20efc:	7023      	strb	r3, [r4, #0]
   20efe:	e037      	b.n	20f70 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   20f00:	4a27      	ldr	r2, [pc, #156]	; (20fa0 <hif_isr+0x4c0>)
   20f02:	4921      	ldr	r1, [pc, #132]	; (20f88 <hif_isr+0x4a8>)
   20f04:	4b21      	ldr	r3, [pc, #132]	; (20f8c <hif_isr+0x4ac>)
   20f06:	0018      	movs	r0, r3
   20f08:	4b21      	ldr	r3, [pc, #132]	; (20f90 <hif_isr+0x4b0>)
   20f0a:	4798      	blx	r3
   20f0c:	4b25      	ldr	r3, [pc, #148]	; (20fa4 <hif_isr+0x4c4>)
   20f0e:	0018      	movs	r0, r3
   20f10:	4b1f      	ldr	r3, [pc, #124]	; (20f90 <hif_isr+0x4b0>)
   20f12:	4798      	blx	r3
   20f14:	4b20      	ldr	r3, [pc, #128]	; (20f98 <hif_isr+0x4b8>)
   20f16:	0018      	movs	r0, r3
   20f18:	4b1d      	ldr	r3, [pc, #116]	; (20f90 <hif_isr+0x4b0>)
   20f1a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   20f1c:	230f      	movs	r3, #15
   20f1e:	18fb      	adds	r3, r7, r3
   20f20:	22fe      	movs	r2, #254	; 0xfe
   20f22:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   20f24:	e024      	b.n	20f70 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   20f26:	4a20      	ldr	r2, [pc, #128]	; (20fa8 <hif_isr+0x4c8>)
   20f28:	4917      	ldr	r1, [pc, #92]	; (20f88 <hif_isr+0x4a8>)
   20f2a:	4b18      	ldr	r3, [pc, #96]	; (20f8c <hif_isr+0x4ac>)
   20f2c:	0018      	movs	r0, r3
   20f2e:	4b18      	ldr	r3, [pc, #96]	; (20f90 <hif_isr+0x4b0>)
   20f30:	4798      	blx	r3
   20f32:	68ba      	ldr	r2, [r7, #8]
   20f34:	4b1d      	ldr	r3, [pc, #116]	; (20fac <hif_isr+0x4cc>)
   20f36:	0011      	movs	r1, r2
   20f38:	0018      	movs	r0, r3
   20f3a:	4b15      	ldr	r3, [pc, #84]	; (20f90 <hif_isr+0x4b0>)
   20f3c:	4798      	blx	r3
   20f3e:	4b16      	ldr	r3, [pc, #88]	; (20f98 <hif_isr+0x4b8>)
   20f40:	0018      	movs	r0, r3
   20f42:	4b13      	ldr	r3, [pc, #76]	; (20f90 <hif_isr+0x4b0>)
   20f44:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20f46:	230f      	movs	r3, #15
   20f48:	18fb      	adds	r3, r7, r3
   20f4a:	22f4      	movs	r2, #244	; 0xf4
   20f4c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20f4e:	e00f      	b.n	20f70 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   20f50:	4a17      	ldr	r2, [pc, #92]	; (20fb0 <hif_isr+0x4d0>)
   20f52:	490d      	ldr	r1, [pc, #52]	; (20f88 <hif_isr+0x4a8>)
   20f54:	4b0d      	ldr	r3, [pc, #52]	; (20f8c <hif_isr+0x4ac>)
   20f56:	0018      	movs	r0, r3
   20f58:	4b0d      	ldr	r3, [pc, #52]	; (20f90 <hif_isr+0x4b0>)
   20f5a:	4798      	blx	r3
   20f5c:	4b15      	ldr	r3, [pc, #84]	; (20fb4 <hif_isr+0x4d4>)
   20f5e:	0018      	movs	r0, r3
   20f60:	4b0b      	ldr	r3, [pc, #44]	; (20f90 <hif_isr+0x4b0>)
   20f62:	4798      	blx	r3
   20f64:	4b0c      	ldr	r3, [pc, #48]	; (20f98 <hif_isr+0x4b8>)
   20f66:	0018      	movs	r0, r3
   20f68:	4b09      	ldr	r3, [pc, #36]	; (20f90 <hif_isr+0x4b0>)
   20f6a:	4798      	blx	r3
		goto ERR1;
   20f6c:	e000      	b.n	20f70 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   20f6e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20f70:	230f      	movs	r3, #15
   20f72:	18fb      	adds	r3, r7, r3
   20f74:	781b      	ldrb	r3, [r3, #0]
   20f76:	b25b      	sxtb	r3, r3
}
   20f78:	0018      	movs	r0, r3
   20f7a:	46bd      	mov	sp, r7
   20f7c:	b005      	add	sp, #20
   20f7e:	bd90      	pop	{r4, r7, pc}
   20f80:	200058d8 	.word	0x200058d8
   20f84:	00000216 	.word	0x00000216
   20f88:	00037f80 	.word	0x00037f80
   20f8c:	00037c70 	.word	0x00037c70
   20f90:	0001d7a9 	.word	0x0001d7a9
   20f94:	00037dec 	.word	0x00037dec
   20f98:	00037c6c 	.word	0x00037c6c
   20f9c:	00020575 	.word	0x00020575
   20fa0:	0000021d 	.word	0x0000021d
   20fa4:	00037e18 	.word	0x00037e18
   20fa8:	00000225 	.word	0x00000225
   20fac:	00037e2c 	.word	0x00037e2c
   20fb0:	0000022e 	.word	0x0000022e
   20fb4:	00037e48 	.word	0x00037e48

00020fb8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   20fb8:	b590      	push	{r4, r7, lr}
   20fba:	b083      	sub	sp, #12
   20fbc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   20fbe:	1dfb      	adds	r3, r7, #7
   20fc0:	2200      	movs	r2, #0
   20fc2:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   20fc4:	4b1c      	ldr	r3, [pc, #112]	; (21038 <hif_handle_isr+0x80>)
   20fc6:	2200      	movs	r2, #0
   20fc8:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   20fca:	e024      	b.n	21016 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   20fcc:	4b1a      	ldr	r3, [pc, #104]	; (21038 <hif_handle_isr+0x80>)
   20fce:	78db      	ldrb	r3, [r3, #3]
   20fd0:	b2db      	uxtb	r3, r3
   20fd2:	3b01      	subs	r3, #1
   20fd4:	b2da      	uxtb	r2, r3
   20fd6:	4b18      	ldr	r3, [pc, #96]	; (21038 <hif_handle_isr+0x80>)
   20fd8:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   20fda:	1dfc      	adds	r4, r7, #7
   20fdc:	4b17      	ldr	r3, [pc, #92]	; (2103c <hif_handle_isr+0x84>)
   20fde:	4798      	blx	r3
   20fe0:	0003      	movs	r3, r0
   20fe2:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20fe4:	1dfb      	adds	r3, r7, #7
   20fe6:	781b      	ldrb	r3, [r3, #0]
   20fe8:	b25b      	sxtb	r3, r3
   20fea:	2b00      	cmp	r3, #0
   20fec:	d100      	bne.n	20ff0 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   20fee:	e012      	b.n	21016 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   20ff0:	4a13      	ldr	r2, [pc, #76]	; (21040 <hif_handle_isr+0x88>)
   20ff2:	4914      	ldr	r1, [pc, #80]	; (21044 <hif_handle_isr+0x8c>)
   20ff4:	4b14      	ldr	r3, [pc, #80]	; (21048 <hif_handle_isr+0x90>)
   20ff6:	0018      	movs	r0, r3
   20ff8:	4b14      	ldr	r3, [pc, #80]	; (2104c <hif_handle_isr+0x94>)
   20ffa:	4798      	blx	r3
   20ffc:	1dfb      	adds	r3, r7, #7
   20ffe:	2200      	movs	r2, #0
   21000:	569a      	ldrsb	r2, [r3, r2]
   21002:	4b13      	ldr	r3, [pc, #76]	; (21050 <hif_handle_isr+0x98>)
   21004:	0011      	movs	r1, r2
   21006:	0018      	movs	r0, r3
   21008:	4b10      	ldr	r3, [pc, #64]	; (2104c <hif_handle_isr+0x94>)
   2100a:	4798      	blx	r3
   2100c:	4b11      	ldr	r3, [pc, #68]	; (21054 <hif_handle_isr+0x9c>)
   2100e:	0018      	movs	r0, r3
   21010:	4b0e      	ldr	r3, [pc, #56]	; (2104c <hif_handle_isr+0x94>)
   21012:	4798      	blx	r3
			ret = hif_isr();
   21014:	e7e1      	b.n	20fda <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   21016:	4b08      	ldr	r3, [pc, #32]	; (21038 <hif_handle_isr+0x80>)
   21018:	78db      	ldrb	r3, [r3, #3]
   2101a:	b2db      	uxtb	r3, r3
   2101c:	2b00      	cmp	r3, #0
   2101e:	d004      	beq.n	2102a <hif_handle_isr+0x72>
   21020:	4b05      	ldr	r3, [pc, #20]	; (21038 <hif_handle_isr+0x80>)
   21022:	791b      	ldrb	r3, [r3, #4]
   21024:	b2db      	uxtb	r3, r3
   21026:	2b00      	cmp	r3, #0
   21028:	d0d0      	beq.n	20fcc <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2102a:	1dfb      	adds	r3, r7, #7
   2102c:	781b      	ldrb	r3, [r3, #0]
   2102e:	b25b      	sxtb	r3, r3
}
   21030:	0018      	movs	r0, r3
   21032:	46bd      	mov	sp, r7
   21034:	b003      	add	sp, #12
   21036:	bd90      	pop	{r4, r7, pc}
   21038:	200058d8 	.word	0x200058d8
   2103c:	00020ae1 	.word	0x00020ae1
   21040:	00000257 	.word	0x00000257
   21044:	00037f88 	.word	0x00037f88
   21048:	00037c70 	.word	0x00037c70
   2104c:	0001d7a9 	.word	0x0001d7a9
   21050:	00037e6c 	.word	0x00037e6c
   21054:	00037c6c 	.word	0x00037c6c

00021058 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21058:	b590      	push	{r4, r7, lr}
   2105a:	b087      	sub	sp, #28
   2105c:	af00      	add	r7, sp, #0
   2105e:	60f8      	str	r0, [r7, #12]
   21060:	60b9      	str	r1, [r7, #8]
   21062:	0019      	movs	r1, r3
   21064:	1dbb      	adds	r3, r7, #6
   21066:	801a      	strh	r2, [r3, #0]
   21068:	1d7b      	adds	r3, r7, #5
   2106a:	1c0a      	adds	r2, r1, #0
   2106c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2106e:	2317      	movs	r3, #23
   21070:	18fb      	adds	r3, r7, r3
   21072:	2200      	movs	r2, #0
   21074:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   21076:	68fb      	ldr	r3, [r7, #12]
   21078:	2b00      	cmp	r3, #0
   2107a:	d006      	beq.n	2108a <hif_receive+0x32>
   2107c:	68bb      	ldr	r3, [r7, #8]
   2107e:	2b00      	cmp	r3, #0
   21080:	d003      	beq.n	2108a <hif_receive+0x32>
   21082:	1dbb      	adds	r3, r7, #6
   21084:	881b      	ldrh	r3, [r3, #0]
   21086:	2b00      	cmp	r3, #0
   21088:	d11e      	bne.n	210c8 <hif_receive+0x70>
	{
		if(isDone)
   2108a:	1d7b      	adds	r3, r7, #5
   2108c:	781b      	ldrb	r3, [r3, #0]
   2108e:	2b00      	cmp	r3, #0
   21090:	d006      	beq.n	210a0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21092:	2317      	movs	r3, #23
   21094:	18fc      	adds	r4, r7, r3
   21096:	4b45      	ldr	r3, [pc, #276]	; (211ac <hif_receive+0x154>)
   21098:	4798      	blx	r3
   2109a:	0003      	movs	r3, r0
   2109c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2109e:	e07c      	b.n	2119a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   210a0:	2317      	movs	r3, #23
   210a2:	18fb      	adds	r3, r7, r3
   210a4:	22f4      	movs	r2, #244	; 0xf4
   210a6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   210a8:	239e      	movs	r3, #158	; 0x9e
   210aa:	009a      	lsls	r2, r3, #2
   210ac:	4940      	ldr	r1, [pc, #256]	; (211b0 <hif_receive+0x158>)
   210ae:	4b41      	ldr	r3, [pc, #260]	; (211b4 <hif_receive+0x15c>)
   210b0:	0018      	movs	r0, r3
   210b2:	4b41      	ldr	r3, [pc, #260]	; (211b8 <hif_receive+0x160>)
   210b4:	4798      	blx	r3
   210b6:	4b41      	ldr	r3, [pc, #260]	; (211bc <hif_receive+0x164>)
   210b8:	0018      	movs	r0, r3
   210ba:	4b3f      	ldr	r3, [pc, #252]	; (211b8 <hif_receive+0x160>)
   210bc:	4798      	blx	r3
   210be:	4b40      	ldr	r3, [pc, #256]	; (211c0 <hif_receive+0x168>)
   210c0:	0018      	movs	r0, r3
   210c2:	4b3d      	ldr	r3, [pc, #244]	; (211b8 <hif_receive+0x160>)
   210c4:	4798      	blx	r3
		goto ERR1;
   210c6:	e068      	b.n	2119a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   210c8:	1dbb      	adds	r3, r7, #6
   210ca:	881a      	ldrh	r2, [r3, #0]
   210cc:	4b3d      	ldr	r3, [pc, #244]	; (211c4 <hif_receive+0x16c>)
   210ce:	68db      	ldr	r3, [r3, #12]
   210d0:	429a      	cmp	r2, r3
   210d2:	d917      	bls.n	21104 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   210d4:	2317      	movs	r3, #23
   210d6:	18fb      	adds	r3, r7, r3
   210d8:	22f4      	movs	r2, #244	; 0xf4
   210da:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   210dc:	23a0      	movs	r3, #160	; 0xa0
   210de:	009a      	lsls	r2, r3, #2
   210e0:	4933      	ldr	r1, [pc, #204]	; (211b0 <hif_receive+0x158>)
   210e2:	4b34      	ldr	r3, [pc, #208]	; (211b4 <hif_receive+0x15c>)
   210e4:	0018      	movs	r0, r3
   210e6:	4b34      	ldr	r3, [pc, #208]	; (211b8 <hif_receive+0x160>)
   210e8:	4798      	blx	r3
   210ea:	1dbb      	adds	r3, r7, #6
   210ec:	8819      	ldrh	r1, [r3, #0]
   210ee:	4b35      	ldr	r3, [pc, #212]	; (211c4 <hif_receive+0x16c>)
   210f0:	68da      	ldr	r2, [r3, #12]
   210f2:	4b35      	ldr	r3, [pc, #212]	; (211c8 <hif_receive+0x170>)
   210f4:	0018      	movs	r0, r3
   210f6:	4b30      	ldr	r3, [pc, #192]	; (211b8 <hif_receive+0x160>)
   210f8:	4798      	blx	r3
   210fa:	4b31      	ldr	r3, [pc, #196]	; (211c0 <hif_receive+0x168>)
   210fc:	0018      	movs	r0, r3
   210fe:	4b2e      	ldr	r3, [pc, #184]	; (211b8 <hif_receive+0x160>)
   21100:	4798      	blx	r3
		goto ERR1;
   21102:	e04a      	b.n	2119a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21104:	4b2f      	ldr	r3, [pc, #188]	; (211c4 <hif_receive+0x16c>)
   21106:	689a      	ldr	r2, [r3, #8]
   21108:	68fb      	ldr	r3, [r7, #12]
   2110a:	429a      	cmp	r2, r3
   2110c:	d80a      	bhi.n	21124 <hif_receive+0xcc>
   2110e:	1dbb      	adds	r3, r7, #6
   21110:	881a      	ldrh	r2, [r3, #0]
   21112:	68fb      	ldr	r3, [r7, #12]
   21114:	18d2      	adds	r2, r2, r3
   21116:	4b2b      	ldr	r3, [pc, #172]	; (211c4 <hif_receive+0x16c>)
   21118:	6899      	ldr	r1, [r3, #8]
   2111a:	4b2a      	ldr	r3, [pc, #168]	; (211c4 <hif_receive+0x16c>)
   2111c:	68db      	ldr	r3, [r3, #12]
   2111e:	18cb      	adds	r3, r1, r3
   21120:	429a      	cmp	r2, r3
   21122:	d912      	bls.n	2114a <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21124:	2317      	movs	r3, #23
   21126:	18fb      	adds	r3, r7, r3
   21128:	22f4      	movs	r2, #244	; 0xf4
   2112a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   2112c:	4a27      	ldr	r2, [pc, #156]	; (211cc <hif_receive+0x174>)
   2112e:	4920      	ldr	r1, [pc, #128]	; (211b0 <hif_receive+0x158>)
   21130:	4b20      	ldr	r3, [pc, #128]	; (211b4 <hif_receive+0x15c>)
   21132:	0018      	movs	r0, r3
   21134:	4b20      	ldr	r3, [pc, #128]	; (211b8 <hif_receive+0x160>)
   21136:	4798      	blx	r3
   21138:	4b25      	ldr	r3, [pc, #148]	; (211d0 <hif_receive+0x178>)
   2113a:	0018      	movs	r0, r3
   2113c:	4b1e      	ldr	r3, [pc, #120]	; (211b8 <hif_receive+0x160>)
   2113e:	4798      	blx	r3
   21140:	4b1f      	ldr	r3, [pc, #124]	; (211c0 <hif_receive+0x168>)
   21142:	0018      	movs	r0, r3
   21144:	4b1c      	ldr	r3, [pc, #112]	; (211b8 <hif_receive+0x160>)
   21146:	4798      	blx	r3
		goto ERR1;
   21148:	e027      	b.n	2119a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2114a:	1dbb      	adds	r3, r7, #6
   2114c:	881a      	ldrh	r2, [r3, #0]
   2114e:	2317      	movs	r3, #23
   21150:	18fc      	adds	r4, r7, r3
   21152:	68b9      	ldr	r1, [r7, #8]
   21154:	68fb      	ldr	r3, [r7, #12]
   21156:	0018      	movs	r0, r3
   21158:	4b1e      	ldr	r3, [pc, #120]	; (211d4 <hif_receive+0x17c>)
   2115a:	4798      	blx	r3
   2115c:	0003      	movs	r3, r0
   2115e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21160:	2317      	movs	r3, #23
   21162:	18fb      	adds	r3, r7, r3
   21164:	781b      	ldrb	r3, [r3, #0]
   21166:	b25b      	sxtb	r3, r3
   21168:	2b00      	cmp	r3, #0
   2116a:	d115      	bne.n	21198 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   2116c:	4b15      	ldr	r3, [pc, #84]	; (211c4 <hif_receive+0x16c>)
   2116e:	689a      	ldr	r2, [r3, #8]
   21170:	4b14      	ldr	r3, [pc, #80]	; (211c4 <hif_receive+0x16c>)
   21172:	68db      	ldr	r3, [r3, #12]
   21174:	18d2      	adds	r2, r2, r3
   21176:	1dbb      	adds	r3, r7, #6
   21178:	8819      	ldrh	r1, [r3, #0]
   2117a:	68fb      	ldr	r3, [r7, #12]
   2117c:	18cb      	adds	r3, r1, r3
   2117e:	429a      	cmp	r2, r3
   21180:	d003      	beq.n	2118a <hif_receive+0x132>
   21182:	1d7b      	adds	r3, r7, #5
   21184:	781b      	ldrb	r3, [r3, #0]
   21186:	2b00      	cmp	r3, #0
   21188:	d007      	beq.n	2119a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2118a:	2317      	movs	r3, #23
   2118c:	18fc      	adds	r4, r7, r3
   2118e:	4b07      	ldr	r3, [pc, #28]	; (211ac <hif_receive+0x154>)
   21190:	4798      	blx	r3
   21192:	0003      	movs	r3, r0
   21194:	7023      	strb	r3, [r4, #0]
   21196:	e000      	b.n	2119a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21198:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2119a:	2317      	movs	r3, #23
   2119c:	18fb      	adds	r3, r7, r3
   2119e:	781b      	ldrb	r3, [r3, #0]
   211a0:	b25b      	sxtb	r3, r3
}
   211a2:	0018      	movs	r0, r3
   211a4:	46bd      	mov	sp, r7
   211a6:	b007      	add	sp, #28
   211a8:	bd90      	pop	{r4, r7, pc}
   211aa:	46c0      	nop			; (mov r8, r8)
   211ac:	00020575 	.word	0x00020575
   211b0:	00037f98 	.word	0x00037f98
   211b4:	00037c70 	.word	0x00037c70
   211b8:	0001d7a9 	.word	0x0001d7a9
   211bc:	00037e9c 	.word	0x00037e9c
   211c0:	00037c6c 	.word	0x00037c6c
   211c4:	200058d8 	.word	0x200058d8
   211c8:	00037ebc 	.word	0x00037ebc
   211cc:	00000286 	.word	0x00000286
   211d0:	00037f04 	.word	0x00037f04
   211d4:	000225e1 	.word	0x000225e1

000211d8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   211d8:	b580      	push	{r7, lr}
   211da:	b084      	sub	sp, #16
   211dc:	af00      	add	r7, sp, #0
   211de:	0002      	movs	r2, r0
   211e0:	6039      	str	r1, [r7, #0]
   211e2:	1dfb      	adds	r3, r7, #7
   211e4:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   211e6:	230f      	movs	r3, #15
   211e8:	18fb      	adds	r3, r7, r3
   211ea:	2200      	movs	r2, #0
   211ec:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   211ee:	1dfb      	adds	r3, r7, #7
   211f0:	781b      	ldrb	r3, [r3, #0]
   211f2:	2b07      	cmp	r3, #7
   211f4:	d820      	bhi.n	21238 <hif_register_cb+0x60>
   211f6:	009a      	lsls	r2, r3, #2
   211f8:	4b1e      	ldr	r3, [pc, #120]	; (21274 <hif_register_cb+0x9c>)
   211fa:	18d3      	adds	r3, r2, r3
   211fc:	681b      	ldr	r3, [r3, #0]
   211fe:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21200:	4b1d      	ldr	r3, [pc, #116]	; (21278 <hif_register_cb+0xa0>)
   21202:	683a      	ldr	r2, [r7, #0]
   21204:	615a      	str	r2, [r3, #20]
			break;
   21206:	e02d      	b.n	21264 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21208:	4b1b      	ldr	r3, [pc, #108]	; (21278 <hif_register_cb+0xa0>)
   2120a:	683a      	ldr	r2, [r7, #0]
   2120c:	611a      	str	r2, [r3, #16]
			break;
   2120e:	e029      	b.n	21264 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21210:	4b19      	ldr	r3, [pc, #100]	; (21278 <hif_register_cb+0xa0>)
   21212:	683a      	ldr	r2, [r7, #0]
   21214:	619a      	str	r2, [r3, #24]
			break;
   21216:	e025      	b.n	21264 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21218:	4b17      	ldr	r3, [pc, #92]	; (21278 <hif_register_cb+0xa0>)
   2121a:	683a      	ldr	r2, [r7, #0]
   2121c:	621a      	str	r2, [r3, #32]
			break;
   2121e:	e021      	b.n	21264 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21220:	4b15      	ldr	r3, [pc, #84]	; (21278 <hif_register_cb+0xa0>)
   21222:	683a      	ldr	r2, [r7, #0]
   21224:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   21226:	e01d      	b.n	21264 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   21228:	4b13      	ldr	r3, [pc, #76]	; (21278 <hif_register_cb+0xa0>)
   2122a:	683a      	ldr	r2, [r7, #0]
   2122c:	61da      	str	r2, [r3, #28]
			break;
   2122e:	e019      	b.n	21264 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21230:	4b11      	ldr	r3, [pc, #68]	; (21278 <hif_register_cb+0xa0>)
   21232:	683a      	ldr	r2, [r7, #0]
   21234:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   21236:	e015      	b.n	21264 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   21238:	4a10      	ldr	r2, [pc, #64]	; (2127c <hif_register_cb+0xa4>)
   2123a:	4911      	ldr	r1, [pc, #68]	; (21280 <hif_register_cb+0xa8>)
   2123c:	4b11      	ldr	r3, [pc, #68]	; (21284 <hif_register_cb+0xac>)
   2123e:	0018      	movs	r0, r3
   21240:	4b11      	ldr	r3, [pc, #68]	; (21288 <hif_register_cb+0xb0>)
   21242:	4798      	blx	r3
   21244:	1dfb      	adds	r3, r7, #7
   21246:	781a      	ldrb	r2, [r3, #0]
   21248:	4b10      	ldr	r3, [pc, #64]	; (2128c <hif_register_cb+0xb4>)
   2124a:	0011      	movs	r1, r2
   2124c:	0018      	movs	r0, r3
   2124e:	4b0e      	ldr	r3, [pc, #56]	; (21288 <hif_register_cb+0xb0>)
   21250:	4798      	blx	r3
   21252:	4b0f      	ldr	r3, [pc, #60]	; (21290 <hif_register_cb+0xb8>)
   21254:	0018      	movs	r0, r3
   21256:	4b0c      	ldr	r3, [pc, #48]	; (21288 <hif_register_cb+0xb0>)
   21258:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2125a:	230f      	movs	r3, #15
   2125c:	18fb      	adds	r3, r7, r3
   2125e:	22f4      	movs	r2, #244	; 0xf4
   21260:	701a      	strb	r2, [r3, #0]
			break;
   21262:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21264:	230f      	movs	r3, #15
   21266:	18fb      	adds	r3, r7, r3
   21268:	781b      	ldrb	r3, [r3, #0]
   2126a:	b25b      	sxtb	r3, r3
}
   2126c:	0018      	movs	r0, r3
   2126e:	46bd      	mov	sp, r7
   21270:	b004      	add	sp, #16
   21272:	bd80      	pop	{r7, pc}
   21274:	00037f54 	.word	0x00037f54
   21278:	200058d8 	.word	0x200058d8
   2127c:	000002be 	.word	0x000002be
   21280:	00037fa4 	.word	0x00037fa4
   21284:	00037c70 	.word	0x00037c70
   21288:	0001d7a9 	.word	0x0001d7a9
   2128c:	00037f48 	.word	0x00037f48
   21290:	00037c6c 	.word	0x00037c6c

00021294 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21294:	b590      	push	{r4, r7, lr}
   21296:	b0af      	sub	sp, #188	; 0xbc
   21298:	af02      	add	r7, sp, #8
   2129a:	603a      	str	r2, [r7, #0]
   2129c:	1dfb      	adds	r3, r7, #7
   2129e:	1c02      	adds	r2, r0, #0
   212a0:	701a      	strb	r2, [r3, #0]
   212a2:	1d3b      	adds	r3, r7, #4
   212a4:	1c0a      	adds	r2, r1, #0
   212a6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   212a8:	1dfb      	adds	r3, r7, #7
   212aa:	781b      	ldrb	r3, [r3, #0]
   212ac:	2b2c      	cmp	r3, #44	; 0x2c
   212ae:	d116      	bne.n	212de <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   212b0:	23a4      	movs	r3, #164	; 0xa4
   212b2:	18f9      	adds	r1, r7, r3
   212b4:	6838      	ldr	r0, [r7, #0]
   212b6:	2300      	movs	r3, #0
   212b8:	2204      	movs	r2, #4
   212ba:	4cca      	ldr	r4, [pc, #808]	; (215e4 <m2m_wifi_cb+0x350>)
   212bc:	47a0      	blx	r4
   212be:	1e03      	subs	r3, r0, #0
   212c0:	d000      	beq.n	212c4 <m2m_wifi_cb+0x30>
   212c2:	e1b4      	b.n	2162e <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   212c4:	4bc8      	ldr	r3, [pc, #800]	; (215e8 <m2m_wifi_cb+0x354>)
   212c6:	681b      	ldr	r3, [r3, #0]
   212c8:	2b00      	cmp	r3, #0
   212ca:	d100      	bne.n	212ce <m2m_wifi_cb+0x3a>
   212cc:	e1af      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   212ce:	4bc6      	ldr	r3, [pc, #792]	; (215e8 <m2m_wifi_cb+0x354>)
   212d0:	681b      	ldr	r3, [r3, #0]
   212d2:	22a4      	movs	r2, #164	; 0xa4
   212d4:	18ba      	adds	r2, r7, r2
   212d6:	0011      	movs	r1, r2
   212d8:	202c      	movs	r0, #44	; 0x2c
   212da:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   212dc:	e1a7      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   212de:	1dfb      	adds	r3, r7, #7
   212e0:	781b      	ldrb	r3, [r3, #0]
   212e2:	2b1b      	cmp	r3, #27
   212e4:	d116      	bne.n	21314 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   212e6:	239c      	movs	r3, #156	; 0x9c
   212e8:	18f9      	adds	r1, r7, r3
   212ea:	6838      	ldr	r0, [r7, #0]
   212ec:	2300      	movs	r3, #0
   212ee:	2208      	movs	r2, #8
   212f0:	4cbc      	ldr	r4, [pc, #752]	; (215e4 <m2m_wifi_cb+0x350>)
   212f2:	47a0      	blx	r4
   212f4:	1e03      	subs	r3, r0, #0
   212f6:	d000      	beq.n	212fa <m2m_wifi_cb+0x66>
   212f8:	e199      	b.n	2162e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   212fa:	4bbb      	ldr	r3, [pc, #748]	; (215e8 <m2m_wifi_cb+0x354>)
   212fc:	681b      	ldr	r3, [r3, #0]
   212fe:	2b00      	cmp	r3, #0
   21300:	d100      	bne.n	21304 <m2m_wifi_cb+0x70>
   21302:	e194      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21304:	4bb8      	ldr	r3, [pc, #736]	; (215e8 <m2m_wifi_cb+0x354>)
   21306:	681b      	ldr	r3, [r3, #0]
   21308:	229c      	movs	r2, #156	; 0x9c
   2130a:	18ba      	adds	r2, r7, r2
   2130c:	0011      	movs	r1, r2
   2130e:	201b      	movs	r0, #27
   21310:	4798      	blx	r3
}
   21312:	e18c      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21314:	1dfb      	adds	r3, r7, #7
   21316:	781b      	ldrb	r3, [r3, #0]
   21318:	2b06      	cmp	r3, #6
   2131a:	d116      	bne.n	2134a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   2131c:	230c      	movs	r3, #12
   2131e:	18f9      	adds	r1, r7, r3
   21320:	6838      	ldr	r0, [r7, #0]
   21322:	2301      	movs	r3, #1
   21324:	2230      	movs	r2, #48	; 0x30
   21326:	4caf      	ldr	r4, [pc, #700]	; (215e4 <m2m_wifi_cb+0x350>)
   21328:	47a0      	blx	r4
   2132a:	1e03      	subs	r3, r0, #0
   2132c:	d000      	beq.n	21330 <m2m_wifi_cb+0x9c>
   2132e:	e17e      	b.n	2162e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21330:	4bad      	ldr	r3, [pc, #692]	; (215e8 <m2m_wifi_cb+0x354>)
   21332:	681b      	ldr	r3, [r3, #0]
   21334:	2b00      	cmp	r3, #0
   21336:	d100      	bne.n	2133a <m2m_wifi_cb+0xa6>
   21338:	e179      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2133a:	4bab      	ldr	r3, [pc, #684]	; (215e8 <m2m_wifi_cb+0x354>)
   2133c:	681b      	ldr	r3, [r3, #0]
   2133e:	220c      	movs	r2, #12
   21340:	18ba      	adds	r2, r7, r2
   21342:	0011      	movs	r1, r2
   21344:	2006      	movs	r0, #6
   21346:	4798      	blx	r3
}
   21348:	e171      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2134a:	1dfb      	adds	r3, r7, #7
   2134c:	781b      	ldrb	r3, [r3, #0]
   2134e:	2b0e      	cmp	r3, #14
   21350:	d100      	bne.n	21354 <m2m_wifi_cb+0xc0>
   21352:	e16c      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21354:	1dfb      	adds	r3, r7, #7
   21356:	781b      	ldrb	r3, [r3, #0]
   21358:	2b32      	cmp	r3, #50	; 0x32
   2135a:	d116      	bne.n	2138a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   2135c:	2384      	movs	r3, #132	; 0x84
   2135e:	18f9      	adds	r1, r7, r3
   21360:	6838      	ldr	r0, [r7, #0]
   21362:	2300      	movs	r3, #0
   21364:	2218      	movs	r2, #24
   21366:	4c9f      	ldr	r4, [pc, #636]	; (215e4 <m2m_wifi_cb+0x350>)
   21368:	47a0      	blx	r4
   2136a:	1e03      	subs	r3, r0, #0
   2136c:	d000      	beq.n	21370 <m2m_wifi_cb+0xdc>
   2136e:	e15e      	b.n	2162e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21370:	4b9d      	ldr	r3, [pc, #628]	; (215e8 <m2m_wifi_cb+0x354>)
   21372:	681b      	ldr	r3, [r3, #0]
   21374:	2b00      	cmp	r3, #0
   21376:	d100      	bne.n	2137a <m2m_wifi_cb+0xe6>
   21378:	e159      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2137a:	4b9b      	ldr	r3, [pc, #620]	; (215e8 <m2m_wifi_cb+0x354>)
   2137c:	681b      	ldr	r3, [r3, #0]
   2137e:	2284      	movs	r2, #132	; 0x84
   21380:	18ba      	adds	r2, r7, r2
   21382:	0011      	movs	r1, r2
   21384:	2032      	movs	r0, #50	; 0x32
   21386:	4798      	blx	r3
}
   21388:	e151      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2138a:	1dfb      	adds	r3, r7, #7
   2138c:	781b      	ldrb	r3, [r3, #0]
   2138e:	2b2f      	cmp	r3, #47	; 0x2f
   21390:	d11d      	bne.n	213ce <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   21392:	230c      	movs	r3, #12
   21394:	18fb      	adds	r3, r7, r3
   21396:	2264      	movs	r2, #100	; 0x64
   21398:	2100      	movs	r1, #0
   2139a:	0018      	movs	r0, r3
   2139c:	4b93      	ldr	r3, [pc, #588]	; (215ec <m2m_wifi_cb+0x358>)
   2139e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   213a0:	230c      	movs	r3, #12
   213a2:	18f9      	adds	r1, r7, r3
   213a4:	6838      	ldr	r0, [r7, #0]
   213a6:	2300      	movs	r3, #0
   213a8:	2264      	movs	r2, #100	; 0x64
   213aa:	4c8e      	ldr	r4, [pc, #568]	; (215e4 <m2m_wifi_cb+0x350>)
   213ac:	47a0      	blx	r4
   213ae:	1e03      	subs	r3, r0, #0
   213b0:	d000      	beq.n	213b4 <m2m_wifi_cb+0x120>
   213b2:	e13c      	b.n	2162e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   213b4:	4b8c      	ldr	r3, [pc, #560]	; (215e8 <m2m_wifi_cb+0x354>)
   213b6:	681b      	ldr	r3, [r3, #0]
   213b8:	2b00      	cmp	r3, #0
   213ba:	d100      	bne.n	213be <m2m_wifi_cb+0x12a>
   213bc:	e137      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   213be:	4b8a      	ldr	r3, [pc, #552]	; (215e8 <m2m_wifi_cb+0x354>)
   213c0:	681b      	ldr	r3, [r3, #0]
   213c2:	220c      	movs	r2, #12
   213c4:	18ba      	adds	r2, r7, r2
   213c6:	0011      	movs	r1, r2
   213c8:	202f      	movs	r0, #47	; 0x2f
   213ca:	4798      	blx	r3
}
   213cc:	e12f      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   213ce:	1dfb      	adds	r3, r7, #7
   213d0:	781b      	ldrb	r3, [r3, #0]
   213d2:	2b34      	cmp	r3, #52	; 0x34
   213d4:	d137      	bne.n	21446 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   213d6:	2380      	movs	r3, #128	; 0x80
   213d8:	18f9      	adds	r1, r7, r3
   213da:	6838      	ldr	r0, [r7, #0]
   213dc:	2300      	movs	r3, #0
   213de:	2204      	movs	r2, #4
   213e0:	4c80      	ldr	r4, [pc, #512]	; (215e4 <m2m_wifi_cb+0x350>)
   213e2:	47a0      	blx	r4
   213e4:	1e03      	subs	r3, r0, #0
   213e6:	d000      	beq.n	213ea <m2m_wifi_cb+0x156>
   213e8:	e121      	b.n	2162e <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   213ea:	4b81      	ldr	r3, [pc, #516]	; (215f0 <m2m_wifi_cb+0x35c>)
   213ec:	0018      	movs	r0, r3
   213ee:	4b81      	ldr	r3, [pc, #516]	; (215f4 <m2m_wifi_cb+0x360>)
   213f0:	4798      	blx	r3
   213f2:	2380      	movs	r3, #128	; 0x80
   213f4:	18fb      	adds	r3, r7, r3
   213f6:	681b      	ldr	r3, [r3, #0]
   213f8:	0e1b      	lsrs	r3, r3, #24
   213fa:	b2db      	uxtb	r3, r3
   213fc:	0019      	movs	r1, r3
   213fe:	2380      	movs	r3, #128	; 0x80
   21400:	18fb      	adds	r3, r7, r3
   21402:	681b      	ldr	r3, [r3, #0]
   21404:	0c1b      	lsrs	r3, r3, #16
   21406:	b2db      	uxtb	r3, r3
   21408:	001a      	movs	r2, r3
   2140a:	2380      	movs	r3, #128	; 0x80
   2140c:	18fb      	adds	r3, r7, r3
   2140e:	681b      	ldr	r3, [r3, #0]
   21410:	0a1b      	lsrs	r3, r3, #8
   21412:	b2db      	uxtb	r3, r3
   21414:	001c      	movs	r4, r3
   21416:	2380      	movs	r3, #128	; 0x80
   21418:	18fb      	adds	r3, r7, r3
   2141a:	681b      	ldr	r3, [r3, #0]
   2141c:	b2db      	uxtb	r3, r3
   2141e:	4876      	ldr	r0, [pc, #472]	; (215f8 <m2m_wifi_cb+0x364>)
   21420:	9300      	str	r3, [sp, #0]
   21422:	0023      	movs	r3, r4
   21424:	4c73      	ldr	r4, [pc, #460]	; (215f4 <m2m_wifi_cb+0x360>)
   21426:	47a0      	blx	r4
   21428:	4b74      	ldr	r3, [pc, #464]	; (215fc <m2m_wifi_cb+0x368>)
   2142a:	0018      	movs	r0, r3
   2142c:	4b71      	ldr	r3, [pc, #452]	; (215f4 <m2m_wifi_cb+0x360>)
   2142e:	4798      	blx	r3
			if (gpfAppWifiCb)
   21430:	4b6d      	ldr	r3, [pc, #436]	; (215e8 <m2m_wifi_cb+0x354>)
   21432:	681b      	ldr	r3, [r3, #0]
   21434:	2b00      	cmp	r3, #0
   21436:	d100      	bne.n	2143a <m2m_wifi_cb+0x1a6>
   21438:	e0f9      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2143a:	4b6b      	ldr	r3, [pc, #428]	; (215e8 <m2m_wifi_cb+0x354>)
   2143c:	681b      	ldr	r3, [r3, #0]
   2143e:	2100      	movs	r1, #0
   21440:	2034      	movs	r0, #52	; 0x34
   21442:	4798      	blx	r3
}
   21444:	e0f3      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   21446:	1dfb      	adds	r3, r7, #7
   21448:	781b      	ldrb	r3, [r3, #0]
   2144a:	2b11      	cmp	r3, #17
   2144c:	d11e      	bne.n	2148c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   2144e:	4b6c      	ldr	r3, [pc, #432]	; (21600 <m2m_wifi_cb+0x36c>)
   21450:	2200      	movs	r2, #0
   21452:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21454:	237c      	movs	r3, #124	; 0x7c
   21456:	18f9      	adds	r1, r7, r3
   21458:	6838      	ldr	r0, [r7, #0]
   2145a:	2300      	movs	r3, #0
   2145c:	2204      	movs	r2, #4
   2145e:	4c61      	ldr	r4, [pc, #388]	; (215e4 <m2m_wifi_cb+0x350>)
   21460:	47a0      	blx	r4
   21462:	1e03      	subs	r3, r0, #0
   21464:	d000      	beq.n	21468 <m2m_wifi_cb+0x1d4>
   21466:	e0e2      	b.n	2162e <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   21468:	237c      	movs	r3, #124	; 0x7c
   2146a:	18fb      	adds	r3, r7, r3
   2146c:	781a      	ldrb	r2, [r3, #0]
   2146e:	4b65      	ldr	r3, [pc, #404]	; (21604 <m2m_wifi_cb+0x370>)
   21470:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   21472:	4b5d      	ldr	r3, [pc, #372]	; (215e8 <m2m_wifi_cb+0x354>)
   21474:	681b      	ldr	r3, [r3, #0]
   21476:	2b00      	cmp	r3, #0
   21478:	d100      	bne.n	2147c <m2m_wifi_cb+0x1e8>
   2147a:	e0d8      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   2147c:	4b5a      	ldr	r3, [pc, #360]	; (215e8 <m2m_wifi_cb+0x354>)
   2147e:	681b      	ldr	r3, [r3, #0]
   21480:	227c      	movs	r2, #124	; 0x7c
   21482:	18ba      	adds	r2, r7, r2
   21484:	0011      	movs	r1, r2
   21486:	2011      	movs	r0, #17
   21488:	4798      	blx	r3
}
   2148a:	e0d0      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   2148c:	1dfb      	adds	r3, r7, #7
   2148e:	781b      	ldrb	r3, [r3, #0]
   21490:	2b13      	cmp	r3, #19
   21492:	d116      	bne.n	214c2 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   21494:	230c      	movs	r3, #12
   21496:	18f9      	adds	r1, r7, r3
   21498:	6838      	ldr	r0, [r7, #0]
   2149a:	2300      	movs	r3, #0
   2149c:	222c      	movs	r2, #44	; 0x2c
   2149e:	4c51      	ldr	r4, [pc, #324]	; (215e4 <m2m_wifi_cb+0x350>)
   214a0:	47a0      	blx	r4
   214a2:	1e03      	subs	r3, r0, #0
   214a4:	d000      	beq.n	214a8 <m2m_wifi_cb+0x214>
   214a6:	e0c2      	b.n	2162e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   214a8:	4b4f      	ldr	r3, [pc, #316]	; (215e8 <m2m_wifi_cb+0x354>)
   214aa:	681b      	ldr	r3, [r3, #0]
   214ac:	2b00      	cmp	r3, #0
   214ae:	d100      	bne.n	214b2 <m2m_wifi_cb+0x21e>
   214b0:	e0bd      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   214b2:	4b4d      	ldr	r3, [pc, #308]	; (215e8 <m2m_wifi_cb+0x354>)
   214b4:	681b      	ldr	r3, [r3, #0]
   214b6:	220c      	movs	r2, #12
   214b8:	18ba      	adds	r2, r7, r2
   214ba:	0011      	movs	r1, r2
   214bc:	2013      	movs	r0, #19
   214be:	4798      	blx	r3
}
   214c0:	e0b5      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   214c2:	1dfb      	adds	r3, r7, #7
   214c4:	781b      	ldrb	r3, [r3, #0]
   214c6:	2b04      	cmp	r3, #4
   214c8:	d116      	bne.n	214f8 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   214ca:	23a8      	movs	r3, #168	; 0xa8
   214cc:	18f9      	adds	r1, r7, r3
   214ce:	6838      	ldr	r0, [r7, #0]
   214d0:	2300      	movs	r3, #0
   214d2:	2204      	movs	r2, #4
   214d4:	4c43      	ldr	r4, [pc, #268]	; (215e4 <m2m_wifi_cb+0x350>)
   214d6:	47a0      	blx	r4
   214d8:	1e03      	subs	r3, r0, #0
   214da:	d000      	beq.n	214de <m2m_wifi_cb+0x24a>
   214dc:	e0a7      	b.n	2162e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   214de:	4b42      	ldr	r3, [pc, #264]	; (215e8 <m2m_wifi_cb+0x354>)
   214e0:	681b      	ldr	r3, [r3, #0]
   214e2:	2b00      	cmp	r3, #0
   214e4:	d100      	bne.n	214e8 <m2m_wifi_cb+0x254>
   214e6:	e0a2      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   214e8:	4b3f      	ldr	r3, [pc, #252]	; (215e8 <m2m_wifi_cb+0x354>)
   214ea:	681b      	ldr	r3, [r3, #0]
   214ec:	22a8      	movs	r2, #168	; 0xa8
   214ee:	18ba      	adds	r2, r7, r2
   214f0:	0011      	movs	r1, r2
   214f2:	2004      	movs	r0, #4
   214f4:	4798      	blx	r3
}
   214f6:	e09a      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   214f8:	1dfb      	adds	r3, r7, #7
   214fa:	781b      	ldrb	r3, [r3, #0]
   214fc:	2b65      	cmp	r3, #101	; 0x65
   214fe:	d116      	bne.n	2152e <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21500:	23a8      	movs	r3, #168	; 0xa8
   21502:	18f9      	adds	r1, r7, r3
   21504:	6838      	ldr	r0, [r7, #0]
   21506:	2300      	movs	r3, #0
   21508:	2204      	movs	r2, #4
   2150a:	4c36      	ldr	r4, [pc, #216]	; (215e4 <m2m_wifi_cb+0x350>)
   2150c:	47a0      	blx	r4
   2150e:	1e03      	subs	r3, r0, #0
   21510:	d000      	beq.n	21514 <m2m_wifi_cb+0x280>
   21512:	e08c      	b.n	2162e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21514:	4b34      	ldr	r3, [pc, #208]	; (215e8 <m2m_wifi_cb+0x354>)
   21516:	681b      	ldr	r3, [r3, #0]
   21518:	2b00      	cmp	r3, #0
   2151a:	d100      	bne.n	2151e <m2m_wifi_cb+0x28a>
   2151c:	e087      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2151e:	4b32      	ldr	r3, [pc, #200]	; (215e8 <m2m_wifi_cb+0x354>)
   21520:	681b      	ldr	r3, [r3, #0]
   21522:	22a8      	movs	r2, #168	; 0xa8
   21524:	18ba      	adds	r2, r7, r2
   21526:	0011      	movs	r1, r2
   21528:	2065      	movs	r0, #101	; 0x65
   2152a:	4798      	blx	r3
}
   2152c:	e07f      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2152e:	1dfb      	adds	r3, r7, #7
   21530:	781b      	ldrb	r3, [r3, #0]
   21532:	2b09      	cmp	r3, #9
   21534:	d116      	bne.n	21564 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21536:	230c      	movs	r3, #12
   21538:	18f9      	adds	r1, r7, r3
   2153a:	6838      	ldr	r0, [r7, #0]
   2153c:	2301      	movs	r3, #1
   2153e:	2264      	movs	r2, #100	; 0x64
   21540:	4c28      	ldr	r4, [pc, #160]	; (215e4 <m2m_wifi_cb+0x350>)
   21542:	47a0      	blx	r4
   21544:	1e03      	subs	r3, r0, #0
   21546:	d000      	beq.n	2154a <m2m_wifi_cb+0x2b6>
   21548:	e071      	b.n	2162e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2154a:	4b27      	ldr	r3, [pc, #156]	; (215e8 <m2m_wifi_cb+0x354>)
   2154c:	681b      	ldr	r3, [r3, #0]
   2154e:	2b00      	cmp	r3, #0
   21550:	d100      	bne.n	21554 <m2m_wifi_cb+0x2c0>
   21552:	e06c      	b.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21554:	4b24      	ldr	r3, [pc, #144]	; (215e8 <m2m_wifi_cb+0x354>)
   21556:	681b      	ldr	r3, [r3, #0]
   21558:	220c      	movs	r2, #12
   2155a:	18ba      	adds	r2, r7, r2
   2155c:	0011      	movs	r1, r2
   2155e:	2009      	movs	r0, #9
   21560:	4798      	blx	r3
}
   21562:	e064      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21564:	1dfb      	adds	r3, r7, #7
   21566:	781b      	ldrb	r3, [r3, #0]
   21568:	2b2a      	cmp	r3, #42	; 0x2a
   2156a:	d114      	bne.n	21596 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   2156c:	2378      	movs	r3, #120	; 0x78
   2156e:	18f9      	adds	r1, r7, r3
   21570:	6838      	ldr	r0, [r7, #0]
   21572:	2301      	movs	r3, #1
   21574:	2204      	movs	r2, #4
   21576:	4c1b      	ldr	r4, [pc, #108]	; (215e4 <m2m_wifi_cb+0x350>)
   21578:	47a0      	blx	r4
   2157a:	1e03      	subs	r3, r0, #0
   2157c:	d157      	bne.n	2162e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2157e:	4b1a      	ldr	r3, [pc, #104]	; (215e8 <m2m_wifi_cb+0x354>)
   21580:	681b      	ldr	r3, [r3, #0]
   21582:	2b00      	cmp	r3, #0
   21584:	d053      	beq.n	2162e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21586:	4b18      	ldr	r3, [pc, #96]	; (215e8 <m2m_wifi_cb+0x354>)
   21588:	681b      	ldr	r3, [r3, #0]
   2158a:	2278      	movs	r2, #120	; 0x78
   2158c:	18ba      	adds	r2, r7, r2
   2158e:	0011      	movs	r1, r2
   21590:	202a      	movs	r0, #42	; 0x2a
   21592:	4798      	blx	r3
}
   21594:	e04b      	b.n	2162e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21596:	1dfb      	adds	r3, r7, #7
   21598:	781b      	ldrb	r3, [r3, #0]
   2159a:	2b20      	cmp	r3, #32
   2159c:	d134      	bne.n	21608 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   2159e:	2370      	movs	r3, #112	; 0x70
   215a0:	18f9      	adds	r1, r7, r3
   215a2:	6838      	ldr	r0, [r7, #0]
   215a4:	2300      	movs	r3, #0
   215a6:	2208      	movs	r2, #8
   215a8:	4c0e      	ldr	r4, [pc, #56]	; (215e4 <m2m_wifi_cb+0x350>)
   215aa:	47a0      	blx	r4
   215ac:	1e03      	subs	r3, r0, #0
   215ae:	d13e      	bne.n	2162e <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   215b0:	683b      	ldr	r3, [r7, #0]
   215b2:	3308      	adds	r3, #8
   215b4:	0018      	movs	r0, r3
   215b6:	2370      	movs	r3, #112	; 0x70
   215b8:	18fb      	adds	r3, r7, r3
   215ba:	6819      	ldr	r1, [r3, #0]
   215bc:	2370      	movs	r3, #112	; 0x70
   215be:	18fb      	adds	r3, r7, r3
   215c0:	889a      	ldrh	r2, [r3, #4]
   215c2:	2301      	movs	r3, #1
   215c4:	4c07      	ldr	r4, [pc, #28]	; (215e4 <m2m_wifi_cb+0x350>)
   215c6:	47a0      	blx	r4
   215c8:	1e03      	subs	r3, r0, #0
   215ca:	d130      	bne.n	2162e <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   215cc:	4b06      	ldr	r3, [pc, #24]	; (215e8 <m2m_wifi_cb+0x354>)
   215ce:	681b      	ldr	r3, [r3, #0]
   215d0:	2b00      	cmp	r3, #0
   215d2:	d02c      	beq.n	2162e <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   215d4:	4b04      	ldr	r3, [pc, #16]	; (215e8 <m2m_wifi_cb+0x354>)
   215d6:	681b      	ldr	r3, [r3, #0]
   215d8:	2270      	movs	r2, #112	; 0x70
   215da:	18ba      	adds	r2, r7, r2
   215dc:	0011      	movs	r1, r2
   215de:	2020      	movs	r0, #32
   215e0:	4798      	blx	r3
}
   215e2:	e024      	b.n	2162e <m2m_wifi_cb+0x39a>
   215e4:	00021059 	.word	0x00021059
   215e8:	20004124 	.word	0x20004124
   215ec:	000204dd 	.word	0x000204dd
   215f0:	00037fb4 	.word	0x00037fb4
   215f4:	0001d7a9 	.word	0x0001d7a9
   215f8:	00037fc0 	.word	0x00037fc0
   215fc:	00037fe0 	.word	0x00037fe0
   21600:	20004121 	.word	0x20004121
   21604:	20004120 	.word	0x20004120
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21608:	2324      	movs	r3, #36	; 0x24
   2160a:	33ff      	adds	r3, #255	; 0xff
   2160c:	001a      	movs	r2, r3
   2160e:	490a      	ldr	r1, [pc, #40]	; (21638 <m2m_wifi_cb+0x3a4>)
   21610:	4b0a      	ldr	r3, [pc, #40]	; (2163c <m2m_wifi_cb+0x3a8>)
   21612:	0018      	movs	r0, r3
   21614:	4b0a      	ldr	r3, [pc, #40]	; (21640 <m2m_wifi_cb+0x3ac>)
   21616:	4798      	blx	r3
   21618:	1dfb      	adds	r3, r7, #7
   2161a:	781a      	ldrb	r2, [r3, #0]
   2161c:	4b09      	ldr	r3, [pc, #36]	; (21644 <m2m_wifi_cb+0x3b0>)
   2161e:	0011      	movs	r1, r2
   21620:	0018      	movs	r0, r3
   21622:	4b07      	ldr	r3, [pc, #28]	; (21640 <m2m_wifi_cb+0x3ac>)
   21624:	4798      	blx	r3
   21626:	4b08      	ldr	r3, [pc, #32]	; (21648 <m2m_wifi_cb+0x3b4>)
   21628:	0018      	movs	r0, r3
   2162a:	4b05      	ldr	r3, [pc, #20]	; (21640 <m2m_wifi_cb+0x3ac>)
   2162c:	4798      	blx	r3
}
   2162e:	46c0      	nop			; (mov r8, r8)
   21630:	46bd      	mov	sp, r7
   21632:	b02d      	add	sp, #180	; 0xb4
   21634:	bd90      	pop	{r4, r7, pc}
   21636:	46c0      	nop			; (mov r8, r8)
   21638:	00038380 	.word	0x00038380
   2163c:	00037fe4 	.word	0x00037fe4
   21640:	0001d7a9 	.word	0x0001d7a9
   21644:	00037ff8 	.word	0x00037ff8
   21648:	00037fe0 	.word	0x00037fe0

0002164c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   2164c:	b590      	push	{r4, r7, lr}
   2164e:	b091      	sub	sp, #68	; 0x44
   21650:	af02      	add	r7, sp, #8
   21652:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21654:	2337      	movs	r3, #55	; 0x37
   21656:	18fb      	adds	r3, r7, r3
   21658:	2200      	movs	r2, #0
   2165a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   2165c:	230b      	movs	r3, #11
   2165e:	18fb      	adds	r3, r7, r3
   21660:	2201      	movs	r2, #1
   21662:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21664:	687b      	ldr	r3, [r7, #4]
   21666:	2b00      	cmp	r3, #0
   21668:	d104      	bne.n	21674 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2166a:	2337      	movs	r3, #55	; 0x37
   2166c:	18fb      	adds	r3, r7, r3
   2166e:	22f4      	movs	r2, #244	; 0xf4
   21670:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   21672:	e0b3      	b.n	217dc <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   21674:	687b      	ldr	r3, [r7, #4]
   21676:	681a      	ldr	r2, [r3, #0]
   21678:	4b5c      	ldr	r3, [pc, #368]	; (217ec <m2m_wifi_init+0x1a0>)
   2167a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   2167c:	4b5c      	ldr	r3, [pc, #368]	; (217f0 <m2m_wifi_init+0x1a4>)
   2167e:	2200      	movs	r2, #0
   21680:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   21682:	2337      	movs	r3, #55	; 0x37
   21684:	18fc      	adds	r4, r7, r3
   21686:	230b      	movs	r3, #11
   21688:	18fb      	adds	r3, r7, r3
   2168a:	0018      	movs	r0, r3
   2168c:	4b59      	ldr	r3, [pc, #356]	; (217f4 <m2m_wifi_init+0x1a8>)
   2168e:	4798      	blx	r3
   21690:	0003      	movs	r3, r0
   21692:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21694:	2337      	movs	r3, #55	; 0x37
   21696:	18fb      	adds	r3, r7, r3
   21698:	781b      	ldrb	r3, [r3, #0]
   2169a:	b25b      	sxtb	r3, r3
   2169c:	2b00      	cmp	r3, #0
   2169e:	d000      	beq.n	216a2 <m2m_wifi_init+0x56>
   216a0:	e099      	b.n	217d6 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   216a2:	2337      	movs	r3, #55	; 0x37
   216a4:	18fc      	adds	r4, r7, r3
   216a6:	2000      	movs	r0, #0
   216a8:	4b53      	ldr	r3, [pc, #332]	; (217f8 <m2m_wifi_init+0x1ac>)
   216aa:	4798      	blx	r3
   216ac:	0003      	movs	r3, r0
   216ae:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   216b0:	2337      	movs	r3, #55	; 0x37
   216b2:	18fb      	adds	r3, r7, r3
   216b4:	781b      	ldrb	r3, [r3, #0]
   216b6:	b25b      	sxtb	r3, r3
   216b8:	2b00      	cmp	r3, #0
   216ba:	d000      	beq.n	216be <m2m_wifi_init+0x72>
   216bc:	e086      	b.n	217cc <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   216be:	4b4f      	ldr	r3, [pc, #316]	; (217fc <m2m_wifi_init+0x1b0>)
   216c0:	0019      	movs	r1, r3
   216c2:	2001      	movs	r0, #1
   216c4:	4b4e      	ldr	r3, [pc, #312]	; (21800 <m2m_wifi_init+0x1b4>)
   216c6:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   216c8:	2337      	movs	r3, #55	; 0x37
   216ca:	18fc      	adds	r4, r7, r3
   216cc:	230c      	movs	r3, #12
   216ce:	18fb      	adds	r3, r7, r3
   216d0:	0018      	movs	r0, r3
   216d2:	4b4c      	ldr	r3, [pc, #304]	; (21804 <m2m_wifi_init+0x1b8>)
   216d4:	4798      	blx	r3
   216d6:	0003      	movs	r3, r0
   216d8:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   216da:	4b4b      	ldr	r3, [pc, #300]	; (21808 <m2m_wifi_init+0x1bc>)
   216dc:	0018      	movs	r0, r3
   216de:	4b4b      	ldr	r3, [pc, #300]	; (2180c <m2m_wifi_init+0x1c0>)
   216e0:	4798      	blx	r3
   216e2:	230c      	movs	r3, #12
   216e4:	18fb      	adds	r3, r7, r3
   216e6:	791b      	ldrb	r3, [r3, #4]
   216e8:	0019      	movs	r1, r3
   216ea:	230c      	movs	r3, #12
   216ec:	18fb      	adds	r3, r7, r3
   216ee:	795b      	ldrb	r3, [r3, #5]
   216f0:	001a      	movs	r2, r3
   216f2:	230c      	movs	r3, #12
   216f4:	18fb      	adds	r3, r7, r3
   216f6:	799b      	ldrb	r3, [r3, #6]
   216f8:	001c      	movs	r4, r3
   216fa:	230c      	movs	r3, #12
   216fc:	18fb      	adds	r3, r7, r3
   216fe:	8c1b      	ldrh	r3, [r3, #32]
   21700:	4843      	ldr	r0, [pc, #268]	; (21810 <m2m_wifi_init+0x1c4>)
   21702:	9300      	str	r3, [sp, #0]
   21704:	0023      	movs	r3, r4
   21706:	4c41      	ldr	r4, [pc, #260]	; (2180c <m2m_wifi_init+0x1c0>)
   21708:	47a0      	blx	r4
   2170a:	4b42      	ldr	r3, [pc, #264]	; (21814 <m2m_wifi_init+0x1c8>)
   2170c:	0018      	movs	r0, r3
   2170e:	4b3f      	ldr	r3, [pc, #252]	; (2180c <m2m_wifi_init+0x1c0>)
   21710:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21712:	4b3d      	ldr	r3, [pc, #244]	; (21808 <m2m_wifi_init+0x1bc>)
   21714:	0018      	movs	r0, r3
   21716:	4b3d      	ldr	r3, [pc, #244]	; (2180c <m2m_wifi_init+0x1c0>)
   21718:	4798      	blx	r3
   2171a:	230c      	movs	r3, #12
   2171c:	18fb      	adds	r3, r7, r3
   2171e:	3316      	adds	r3, #22
   21720:	001a      	movs	r2, r3
   21722:	230c      	movs	r3, #12
   21724:	18fb      	adds	r3, r7, r3
   21726:	330a      	adds	r3, #10
   21728:	0019      	movs	r1, r3
   2172a:	4b3b      	ldr	r3, [pc, #236]	; (21818 <m2m_wifi_init+0x1cc>)
   2172c:	0018      	movs	r0, r3
   2172e:	4b37      	ldr	r3, [pc, #220]	; (2180c <m2m_wifi_init+0x1c0>)
   21730:	4798      	blx	r3
   21732:	4b38      	ldr	r3, [pc, #224]	; (21814 <m2m_wifi_init+0x1c8>)
   21734:	0018      	movs	r0, r3
   21736:	4b35      	ldr	r3, [pc, #212]	; (2180c <m2m_wifi_init+0x1c0>)
   21738:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   2173a:	4b33      	ldr	r3, [pc, #204]	; (21808 <m2m_wifi_init+0x1bc>)
   2173c:	0018      	movs	r0, r3
   2173e:	4b33      	ldr	r3, [pc, #204]	; (2180c <m2m_wifi_init+0x1c0>)
   21740:	4798      	blx	r3
   21742:	230c      	movs	r3, #12
   21744:	18fb      	adds	r3, r7, r3
   21746:	79db      	ldrb	r3, [r3, #7]
   21748:	0019      	movs	r1, r3
   2174a:	230c      	movs	r3, #12
   2174c:	18fb      	adds	r3, r7, r3
   2174e:	7a1b      	ldrb	r3, [r3, #8]
   21750:	001a      	movs	r2, r3
   21752:	230c      	movs	r3, #12
   21754:	18fb      	adds	r3, r7, r3
   21756:	7a5b      	ldrb	r3, [r3, #9]
   21758:	4830      	ldr	r0, [pc, #192]	; (2181c <m2m_wifi_init+0x1d0>)
   2175a:	4c2c      	ldr	r4, [pc, #176]	; (2180c <m2m_wifi_init+0x1c0>)
   2175c:	47a0      	blx	r4
   2175e:	4b2d      	ldr	r3, [pc, #180]	; (21814 <m2m_wifi_init+0x1c8>)
   21760:	0018      	movs	r0, r3
   21762:	4b2a      	ldr	r3, [pc, #168]	; (2180c <m2m_wifi_init+0x1c0>)
   21764:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21766:	4b28      	ldr	r3, [pc, #160]	; (21808 <m2m_wifi_init+0x1bc>)
   21768:	0018      	movs	r0, r3
   2176a:	4b28      	ldr	r3, [pc, #160]	; (2180c <m2m_wifi_init+0x1c0>)
   2176c:	4798      	blx	r3
   2176e:	482c      	ldr	r0, [pc, #176]	; (21820 <m2m_wifi_init+0x1d4>)
   21770:	2304      	movs	r3, #4
   21772:	2205      	movs	r2, #5
   21774:	2113      	movs	r1, #19
   21776:	4c25      	ldr	r4, [pc, #148]	; (2180c <m2m_wifi_init+0x1c0>)
   21778:	47a0      	blx	r4
   2177a:	4b26      	ldr	r3, [pc, #152]	; (21814 <m2m_wifi_init+0x1c8>)
   2177c:	0018      	movs	r0, r3
   2177e:	4b23      	ldr	r3, [pc, #140]	; (2180c <m2m_wifi_init+0x1c0>)
   21780:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   21782:	4b21      	ldr	r3, [pc, #132]	; (21808 <m2m_wifi_init+0x1bc>)
   21784:	0018      	movs	r0, r3
   21786:	4b21      	ldr	r3, [pc, #132]	; (2180c <m2m_wifi_init+0x1c0>)
   21788:	4798      	blx	r3
   2178a:	4a26      	ldr	r2, [pc, #152]	; (21824 <m2m_wifi_init+0x1d8>)
   2178c:	4926      	ldr	r1, [pc, #152]	; (21828 <m2m_wifi_init+0x1dc>)
   2178e:	4b27      	ldr	r3, [pc, #156]	; (2182c <m2m_wifi_init+0x1e0>)
   21790:	0018      	movs	r0, r3
   21792:	4b1e      	ldr	r3, [pc, #120]	; (2180c <m2m_wifi_init+0x1c0>)
   21794:	4798      	blx	r3
   21796:	4b1f      	ldr	r3, [pc, #124]	; (21814 <m2m_wifi_init+0x1c8>)
   21798:	0018      	movs	r0, r3
   2179a:	4b1c      	ldr	r3, [pc, #112]	; (2180c <m2m_wifi_init+0x1c0>)
   2179c:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   2179e:	2337      	movs	r3, #55	; 0x37
   217a0:	18fb      	adds	r3, r7, r3
   217a2:	781b      	ldrb	r3, [r3, #0]
   217a4:	b25b      	sxtb	r3, r3
   217a6:	330d      	adds	r3, #13
   217a8:	d117      	bne.n	217da <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   217aa:	23e8      	movs	r3, #232	; 0xe8
   217ac:	33ff      	adds	r3, #255	; 0xff
   217ae:	001a      	movs	r2, r3
   217b0:	491f      	ldr	r1, [pc, #124]	; (21830 <m2m_wifi_init+0x1e4>)
   217b2:	4b20      	ldr	r3, [pc, #128]	; (21834 <m2m_wifi_init+0x1e8>)
   217b4:	0018      	movs	r0, r3
   217b6:	4b15      	ldr	r3, [pc, #84]	; (2180c <m2m_wifi_init+0x1c0>)
   217b8:	4798      	blx	r3
   217ba:	4b1f      	ldr	r3, [pc, #124]	; (21838 <m2m_wifi_init+0x1ec>)
   217bc:	0018      	movs	r0, r3
   217be:	4b13      	ldr	r3, [pc, #76]	; (2180c <m2m_wifi_init+0x1c0>)
   217c0:	4798      	blx	r3
   217c2:	4b14      	ldr	r3, [pc, #80]	; (21814 <m2m_wifi_init+0x1c8>)
   217c4:	0018      	movs	r0, r3
   217c6:	4b11      	ldr	r3, [pc, #68]	; (2180c <m2m_wifi_init+0x1c0>)
   217c8:	4798      	blx	r3
	}

	goto _EXIT0;
   217ca:	e006      	b.n	217da <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   217cc:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   217ce:	2000      	movs	r0, #0
   217d0:	4b1a      	ldr	r3, [pc, #104]	; (2183c <m2m_wifi_init+0x1f0>)
   217d2:	4798      	blx	r3
   217d4:	e002      	b.n	217dc <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   217d6:	46c0      	nop			; (mov r8, r8)
   217d8:	e000      	b.n	217dc <m2m_wifi_init+0x190>
	goto _EXIT0;
   217da:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   217dc:	2337      	movs	r3, #55	; 0x37
   217de:	18fb      	adds	r3, r7, r3
   217e0:	781b      	ldrb	r3, [r3, #0]
   217e2:	b25b      	sxtb	r3, r3
}
   217e4:	0018      	movs	r0, r3
   217e6:	46bd      	mov	sp, r7
   217e8:	b00f      	add	sp, #60	; 0x3c
   217ea:	bd90      	pop	{r4, r7, pc}
   217ec:	20004124 	.word	0x20004124
   217f0:	20004121 	.word	0x20004121
   217f4:	00022971 	.word	0x00022971
   217f8:	000206f5 	.word	0x000206f5
   217fc:	00021295 	.word	0x00021295
   21800:	000211d9 	.word	0x000211d9
   21804:	000227a5 	.word	0x000227a5
   21808:	00037fb4 	.word	0x00037fb4
   2180c:	0001d7a9 	.word	0x0001d7a9
   21810:	00038158 	.word	0x00038158
   21814:	00037fe0 	.word	0x00037fe0
   21818:	00038180 	.word	0x00038180
   2181c:	0003819c 	.word	0x0003819c
   21820:	000381c0 	.word	0x000381c0
   21824:	000381d8 	.word	0x000381d8
   21828:	000381e4 	.word	0x000381e4
   2182c:	000381f0 	.word	0x000381f0
   21830:	0003838c 	.word	0x0003838c
   21834:	00037fe4 	.word	0x00037fe4
   21838:	00038208 	.word	0x00038208
   2183c:	00022b01 	.word	0x00022b01

00021840 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21840:	b580      	push	{r7, lr}
   21842:	b082      	sub	sp, #8
   21844:	af00      	add	r7, sp, #0
   21846:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21848:	4b03      	ldr	r3, [pc, #12]	; (21858 <m2m_wifi_handle_events+0x18>)
   2184a:	4798      	blx	r3
   2184c:	0003      	movs	r3, r0
}
   2184e:	0018      	movs	r0, r3
   21850:	46bd      	mov	sp, r7
   21852:	b002      	add	sp, #8
   21854:	bd80      	pop	{r7, pc}
   21856:	46c0      	nop			; (mov r8, r8)
   21858:	00020fb9 	.word	0x00020fb9

0002185c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   2185c:	b590      	push	{r4, r7, lr}
   2185e:	b087      	sub	sp, #28
   21860:	af02      	add	r7, sp, #8
   21862:	60f8      	str	r0, [r7, #12]
   21864:	0008      	movs	r0, r1
   21866:	0011      	movs	r1, r2
   21868:	607b      	str	r3, [r7, #4]
   2186a:	230b      	movs	r3, #11
   2186c:	18fb      	adds	r3, r7, r3
   2186e:	1c02      	adds	r2, r0, #0
   21870:	701a      	strb	r2, [r3, #0]
   21872:	230a      	movs	r3, #10
   21874:	18fb      	adds	r3, r7, r3
   21876:	1c0a      	adds	r2, r1, #0
   21878:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2187a:	687c      	ldr	r4, [r7, #4]
   2187c:	230a      	movs	r3, #10
   2187e:	18fb      	adds	r3, r7, r3
   21880:	781a      	ldrb	r2, [r3, #0]
   21882:	230b      	movs	r3, #11
   21884:	18fb      	adds	r3, r7, r3
   21886:	7819      	ldrb	r1, [r3, #0]
   21888:	68f8      	ldr	r0, [r7, #12]
   2188a:	2300      	movs	r3, #0
   2188c:	9301      	str	r3, [sp, #4]
   2188e:	2320      	movs	r3, #32
   21890:	18fb      	adds	r3, r7, r3
   21892:	881b      	ldrh	r3, [r3, #0]
   21894:	9300      	str	r3, [sp, #0]
   21896:	0023      	movs	r3, r4
   21898:	4c03      	ldr	r4, [pc, #12]	; (218a8 <m2m_wifi_connect+0x4c>)
   2189a:	47a0      	blx	r4
   2189c:	0003      	movs	r3, r0
}
   2189e:	0018      	movs	r0, r3
   218a0:	46bd      	mov	sp, r7
   218a2:	b005      	add	sp, #20
   218a4:	bd90      	pop	{r4, r7, pc}
   218a6:	46c0      	nop			; (mov r8, r8)
   218a8:	000218ad 	.word	0x000218ad

000218ac <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   218ac:	b5b0      	push	{r4, r5, r7, lr}
   218ae:	b0aa      	sub	sp, #168	; 0xa8
   218b0:	af04      	add	r7, sp, #16
   218b2:	60f8      	str	r0, [r7, #12]
   218b4:	0008      	movs	r0, r1
   218b6:	0011      	movs	r1, r2
   218b8:	607b      	str	r3, [r7, #4]
   218ba:	230b      	movs	r3, #11
   218bc:	18fb      	adds	r3, r7, r3
   218be:	1c02      	adds	r2, r0, #0
   218c0:	701a      	strb	r2, [r3, #0]
   218c2:	230a      	movs	r3, #10
   218c4:	18fb      	adds	r3, r7, r3
   218c6:	1c0a      	adds	r2, r1, #0
   218c8:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   218ca:	2397      	movs	r3, #151	; 0x97
   218cc:	18fb      	adds	r3, r7, r3
   218ce:	2200      	movs	r2, #0
   218d0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   218d2:	230a      	movs	r3, #10
   218d4:	18fb      	adds	r3, r7, r3
   218d6:	781b      	ldrb	r3, [r3, #0]
   218d8:	2b01      	cmp	r3, #1
   218da:	d100      	bne.n	218de <m2m_wifi_connect_sc+0x32>
   218dc:	e085      	b.n	219ea <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   218de:	687b      	ldr	r3, [r7, #4]
   218e0:	2b00      	cmp	r3, #0
   218e2:	d112      	bne.n	2190a <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   218e4:	4ad8      	ldr	r2, [pc, #864]	; (21c48 <m2m_wifi_connect_sc+0x39c>)
   218e6:	49d9      	ldr	r1, [pc, #868]	; (21c4c <m2m_wifi_connect_sc+0x3a0>)
   218e8:	4bd9      	ldr	r3, [pc, #868]	; (21c50 <m2m_wifi_connect_sc+0x3a4>)
   218ea:	0018      	movs	r0, r3
   218ec:	4bd9      	ldr	r3, [pc, #868]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   218ee:	4798      	blx	r3
   218f0:	4bd9      	ldr	r3, [pc, #868]	; (21c58 <m2m_wifi_connect_sc+0x3ac>)
   218f2:	0018      	movs	r0, r3
   218f4:	4bd7      	ldr	r3, [pc, #860]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   218f6:	4798      	blx	r3
   218f8:	4bd8      	ldr	r3, [pc, #864]	; (21c5c <m2m_wifi_connect_sc+0x3b0>)
   218fa:	0018      	movs	r0, r3
   218fc:	4bd5      	ldr	r3, [pc, #852]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   218fe:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21900:	2397      	movs	r3, #151	; 0x97
   21902:	18fb      	adds	r3, r7, r3
   21904:	22f4      	movs	r2, #244	; 0xf4
   21906:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21908:	e1f9      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   2190a:	230a      	movs	r3, #10
   2190c:	18fb      	adds	r3, r7, r3
   2190e:	781b      	ldrb	r3, [r3, #0]
   21910:	2b02      	cmp	r3, #2
   21912:	d16a      	bne.n	219ea <m2m_wifi_connect_sc+0x13e>
   21914:	687b      	ldr	r3, [r7, #4]
   21916:	0018      	movs	r0, r3
   21918:	4bd1      	ldr	r3, [pc, #836]	; (21c60 <m2m_wifi_connect_sc+0x3b4>)
   2191a:	4798      	blx	r3
   2191c:	0003      	movs	r3, r0
   2191e:	2b40      	cmp	r3, #64	; 0x40
   21920:	d163      	bne.n	219ea <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21922:	2396      	movs	r3, #150	; 0x96
   21924:	18fb      	adds	r3, r7, r3
   21926:	2200      	movs	r2, #0
   21928:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   2192a:	687b      	ldr	r3, [r7, #4]
   2192c:	2290      	movs	r2, #144	; 0x90
   2192e:	18ba      	adds	r2, r7, r2
   21930:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21932:	e055      	b.n	219e0 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21934:	2396      	movs	r3, #150	; 0x96
   21936:	18fb      	adds	r3, r7, r3
   21938:	781b      	ldrb	r3, [r3, #0]
   2193a:	2290      	movs	r2, #144	; 0x90
   2193c:	18ba      	adds	r2, r7, r2
   2193e:	6812      	ldr	r2, [r2, #0]
   21940:	18d3      	adds	r3, r2, r3
   21942:	781b      	ldrb	r3, [r3, #0]
   21944:	2b2f      	cmp	r3, #47	; 0x2f
   21946:	d931      	bls.n	219ac <m2m_wifi_connect_sc+0x100>
   21948:	2396      	movs	r3, #150	; 0x96
   2194a:	18fb      	adds	r3, r7, r3
   2194c:	781b      	ldrb	r3, [r3, #0]
   2194e:	2290      	movs	r2, #144	; 0x90
   21950:	18ba      	adds	r2, r7, r2
   21952:	6812      	ldr	r2, [r2, #0]
   21954:	18d3      	adds	r3, r2, r3
   21956:	781b      	ldrb	r3, [r3, #0]
   21958:	2b39      	cmp	r3, #57	; 0x39
   2195a:	d909      	bls.n	21970 <m2m_wifi_connect_sc+0xc4>
   2195c:	2396      	movs	r3, #150	; 0x96
   2195e:	18fb      	adds	r3, r7, r3
   21960:	781b      	ldrb	r3, [r3, #0]
   21962:	2290      	movs	r2, #144	; 0x90
   21964:	18ba      	adds	r2, r7, r2
   21966:	6812      	ldr	r2, [r2, #0]
   21968:	18d3      	adds	r3, r2, r3
   2196a:	781b      	ldrb	r3, [r3, #0]
   2196c:	2b40      	cmp	r3, #64	; 0x40
   2196e:	d91d      	bls.n	219ac <m2m_wifi_connect_sc+0x100>
   21970:	2396      	movs	r3, #150	; 0x96
   21972:	18fb      	adds	r3, r7, r3
   21974:	781b      	ldrb	r3, [r3, #0]
   21976:	2290      	movs	r2, #144	; 0x90
   21978:	18ba      	adds	r2, r7, r2
   2197a:	6812      	ldr	r2, [r2, #0]
   2197c:	18d3      	adds	r3, r2, r3
   2197e:	781b      	ldrb	r3, [r3, #0]
   21980:	2b46      	cmp	r3, #70	; 0x46
   21982:	d909      	bls.n	21998 <m2m_wifi_connect_sc+0xec>
   21984:	2396      	movs	r3, #150	; 0x96
   21986:	18fb      	adds	r3, r7, r3
   21988:	781b      	ldrb	r3, [r3, #0]
   2198a:	2290      	movs	r2, #144	; 0x90
   2198c:	18ba      	adds	r2, r7, r2
   2198e:	6812      	ldr	r2, [r2, #0]
   21990:	18d3      	adds	r3, r2, r3
   21992:	781b      	ldrb	r3, [r3, #0]
   21994:	2b60      	cmp	r3, #96	; 0x60
   21996:	d909      	bls.n	219ac <m2m_wifi_connect_sc+0x100>
   21998:	2396      	movs	r3, #150	; 0x96
   2199a:	18fb      	adds	r3, r7, r3
   2199c:	781b      	ldrb	r3, [r3, #0]
   2199e:	2290      	movs	r2, #144	; 0x90
   219a0:	18ba      	adds	r2, r7, r2
   219a2:	6812      	ldr	r2, [r2, #0]
   219a4:	18d3      	adds	r3, r2, r3
   219a6:	781b      	ldrb	r3, [r3, #0]
   219a8:	2b66      	cmp	r3, #102	; 0x66
   219aa:	d912      	bls.n	219d2 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   219ac:	4aad      	ldr	r2, [pc, #692]	; (21c64 <m2m_wifi_connect_sc+0x3b8>)
   219ae:	49a7      	ldr	r1, [pc, #668]	; (21c4c <m2m_wifi_connect_sc+0x3a0>)
   219b0:	4ba7      	ldr	r3, [pc, #668]	; (21c50 <m2m_wifi_connect_sc+0x3a4>)
   219b2:	0018      	movs	r0, r3
   219b4:	4ba7      	ldr	r3, [pc, #668]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   219b6:	4798      	blx	r3
   219b8:	4bab      	ldr	r3, [pc, #684]	; (21c68 <m2m_wifi_connect_sc+0x3bc>)
   219ba:	0018      	movs	r0, r3
   219bc:	4ba5      	ldr	r3, [pc, #660]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   219be:	4798      	blx	r3
   219c0:	4ba6      	ldr	r3, [pc, #664]	; (21c5c <m2m_wifi_connect_sc+0x3b0>)
   219c2:	0018      	movs	r0, r3
   219c4:	4ba3      	ldr	r3, [pc, #652]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   219c6:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   219c8:	2397      	movs	r3, #151	; 0x97
   219ca:	18fb      	adds	r3, r7, r3
   219cc:	22f4      	movs	r2, #244	; 0xf4
   219ce:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   219d0:	e195      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
				}
				i++;
   219d2:	2396      	movs	r3, #150	; 0x96
   219d4:	18fb      	adds	r3, r7, r3
   219d6:	781a      	ldrb	r2, [r3, #0]
   219d8:	2396      	movs	r3, #150	; 0x96
   219da:	18fb      	adds	r3, r7, r3
   219dc:	3201      	adds	r2, #1
   219de:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   219e0:	2396      	movs	r3, #150	; 0x96
   219e2:	18fb      	adds	r3, r7, r3
   219e4:	781b      	ldrb	r3, [r3, #0]
   219e6:	2b3f      	cmp	r3, #63	; 0x3f
   219e8:	d9a4      	bls.n	21934 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   219ea:	230b      	movs	r3, #11
   219ec:	18fb      	adds	r3, r7, r3
   219ee:	781b      	ldrb	r3, [r3, #0]
   219f0:	2b00      	cmp	r3, #0
   219f2:	d004      	beq.n	219fe <m2m_wifi_connect_sc+0x152>
   219f4:	230b      	movs	r3, #11
   219f6:	18fb      	adds	r3, r7, r3
   219f8:	781b      	ldrb	r3, [r3, #0]
   219fa:	2b20      	cmp	r3, #32
   219fc:	d913      	bls.n	21a26 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   219fe:	238c      	movs	r3, #140	; 0x8c
   21a00:	009a      	lsls	r2, r3, #2
   21a02:	4992      	ldr	r1, [pc, #584]	; (21c4c <m2m_wifi_connect_sc+0x3a0>)
   21a04:	4b92      	ldr	r3, [pc, #584]	; (21c50 <m2m_wifi_connect_sc+0x3a4>)
   21a06:	0018      	movs	r0, r3
   21a08:	4b92      	ldr	r3, [pc, #584]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21a0a:	4798      	blx	r3
   21a0c:	4b97      	ldr	r3, [pc, #604]	; (21c6c <m2m_wifi_connect_sc+0x3c0>)
   21a0e:	0018      	movs	r0, r3
   21a10:	4b90      	ldr	r3, [pc, #576]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21a12:	4798      	blx	r3
   21a14:	4b91      	ldr	r3, [pc, #580]	; (21c5c <m2m_wifi_connect_sc+0x3b0>)
   21a16:	0018      	movs	r0, r3
   21a18:	4b8e      	ldr	r3, [pc, #568]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21a1a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21a1c:	2397      	movs	r3, #151	; 0x97
   21a1e:	18fb      	adds	r3, r7, r3
   21a20:	22f4      	movs	r2, #244	; 0xf4
   21a22:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21a24:	e16b      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21a26:	23a8      	movs	r3, #168	; 0xa8
   21a28:	18fb      	adds	r3, r7, r3
   21a2a:	881b      	ldrh	r3, [r3, #0]
   21a2c:	2b00      	cmp	r3, #0
   21a2e:	d004      	beq.n	21a3a <m2m_wifi_connect_sc+0x18e>
   21a30:	23a8      	movs	r3, #168	; 0xa8
   21a32:	18fb      	adds	r3, r7, r3
   21a34:	881b      	ldrh	r3, [r3, #0]
   21a36:	2b0e      	cmp	r3, #14
   21a38:	d917      	bls.n	21a6a <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21a3a:	23a8      	movs	r3, #168	; 0xa8
   21a3c:	18fb      	adds	r3, r7, r3
   21a3e:	881b      	ldrh	r3, [r3, #0]
   21a40:	2bff      	cmp	r3, #255	; 0xff
   21a42:	d012      	beq.n	21a6a <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21a44:	4a8a      	ldr	r2, [pc, #552]	; (21c70 <m2m_wifi_connect_sc+0x3c4>)
   21a46:	4981      	ldr	r1, [pc, #516]	; (21c4c <m2m_wifi_connect_sc+0x3a0>)
   21a48:	4b81      	ldr	r3, [pc, #516]	; (21c50 <m2m_wifi_connect_sc+0x3a4>)
   21a4a:	0018      	movs	r0, r3
   21a4c:	4b81      	ldr	r3, [pc, #516]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21a4e:	4798      	blx	r3
   21a50:	4b88      	ldr	r3, [pc, #544]	; (21c74 <m2m_wifi_connect_sc+0x3c8>)
   21a52:	0018      	movs	r0, r3
   21a54:	4b7f      	ldr	r3, [pc, #508]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21a56:	4798      	blx	r3
   21a58:	4b80      	ldr	r3, [pc, #512]	; (21c5c <m2m_wifi_connect_sc+0x3b0>)
   21a5a:	0018      	movs	r0, r3
   21a5c:	4b7d      	ldr	r3, [pc, #500]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21a5e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21a60:	2397      	movs	r3, #151	; 0x97
   21a62:	18fb      	adds	r3, r7, r3
   21a64:	22f4      	movs	r2, #244	; 0xf4
   21a66:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21a68:	e149      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   21a6a:	230b      	movs	r3, #11
   21a6c:	18fb      	adds	r3, r7, r3
   21a6e:	781a      	ldrb	r2, [r3, #0]
   21a70:	68f9      	ldr	r1, [r7, #12]
   21a72:	2314      	movs	r3, #20
   21a74:	18fb      	adds	r3, r7, r3
   21a76:	3346      	adds	r3, #70	; 0x46
   21a78:	0018      	movs	r0, r3
   21a7a:	4b7f      	ldr	r3, [pc, #508]	; (21c78 <m2m_wifi_connect_sc+0x3cc>)
   21a7c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21a7e:	230b      	movs	r3, #11
   21a80:	18fb      	adds	r3, r7, r3
   21a82:	781b      	ldrb	r3, [r3, #0]
   21a84:	2214      	movs	r2, #20
   21a86:	18ba      	adds	r2, r7, r2
   21a88:	2146      	movs	r1, #70	; 0x46
   21a8a:	18d3      	adds	r3, r2, r3
   21a8c:	185b      	adds	r3, r3, r1
   21a8e:	2200      	movs	r2, #0
   21a90:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21a92:	2314      	movs	r3, #20
   21a94:	18fb      	adds	r3, r7, r3
   21a96:	22a8      	movs	r2, #168	; 0xa8
   21a98:	18ba      	adds	r2, r7, r2
   21a9a:	2144      	movs	r1, #68	; 0x44
   21a9c:	8812      	ldrh	r2, [r2, #0]
   21a9e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   21aa0:	23ac      	movs	r3, #172	; 0xac
   21aa2:	18fb      	adds	r3, r7, r3
   21aa4:	781b      	ldrb	r3, [r3, #0]
   21aa6:	1e5a      	subs	r2, r3, #1
   21aa8:	4193      	sbcs	r3, r2
   21aaa:	b2db      	uxtb	r3, r3
   21aac:	0019      	movs	r1, r3
   21aae:	2314      	movs	r3, #20
   21ab0:	18fb      	adds	r3, r7, r3
   21ab2:	2267      	movs	r2, #103	; 0x67
   21ab4:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   21ab6:	2314      	movs	r3, #20
   21ab8:	18fb      	adds	r3, r7, r3
   21aba:	228c      	movs	r2, #140	; 0x8c
   21abc:	18ba      	adds	r2, r7, r2
   21abe:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21ac0:	238c      	movs	r3, #140	; 0x8c
   21ac2:	18fb      	adds	r3, r7, r3
   21ac4:	681b      	ldr	r3, [r3, #0]
   21ac6:	220a      	movs	r2, #10
   21ac8:	18ba      	adds	r2, r7, r2
   21aca:	2141      	movs	r1, #65	; 0x41
   21acc:	7812      	ldrb	r2, [r2, #0]
   21ace:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21ad0:	230a      	movs	r3, #10
   21ad2:	18fb      	adds	r3, r7, r3
   21ad4:	781b      	ldrb	r3, [r3, #0]
   21ad6:	2b03      	cmp	r3, #3
   21ad8:	d000      	beq.n	21adc <m2m_wifi_connect_sc+0x230>
   21ada:	e07d      	b.n	21bd8 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21adc:	687b      	ldr	r3, [r7, #4]
   21ade:	2288      	movs	r2, #136	; 0x88
   21ae0:	18ba      	adds	r2, r7, r2
   21ae2:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21ae4:	238c      	movs	r3, #140	; 0x8c
   21ae6:	18fb      	adds	r3, r7, r3
   21ae8:	681b      	ldr	r3, [r3, #0]
   21aea:	2284      	movs	r2, #132	; 0x84
   21aec:	18ba      	adds	r2, r7, r2
   21aee:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21af0:	2388      	movs	r3, #136	; 0x88
   21af2:	18fb      	adds	r3, r7, r3
   21af4:	681b      	ldr	r3, [r3, #0]
   21af6:	781b      	ldrb	r3, [r3, #0]
   21af8:	3b01      	subs	r3, #1
   21afa:	b2da      	uxtb	r2, r3
   21afc:	2384      	movs	r3, #132	; 0x84
   21afe:	18fb      	adds	r3, r7, r3
   21b00:	681b      	ldr	r3, [r3, #0]
   21b02:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21b04:	2384      	movs	r3, #132	; 0x84
   21b06:	18fb      	adds	r3, r7, r3
   21b08:	681b      	ldr	r3, [r3, #0]
   21b0a:	781b      	ldrb	r3, [r3, #0]
   21b0c:	2b03      	cmp	r3, #3
   21b0e:	d919      	bls.n	21b44 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21b10:	2394      	movs	r3, #148	; 0x94
   21b12:	009a      	lsls	r2, r3, #2
   21b14:	494d      	ldr	r1, [pc, #308]	; (21c4c <m2m_wifi_connect_sc+0x3a0>)
   21b16:	4b4e      	ldr	r3, [pc, #312]	; (21c50 <m2m_wifi_connect_sc+0x3a4>)
   21b18:	0018      	movs	r0, r3
   21b1a:	4b4e      	ldr	r3, [pc, #312]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21b1c:	4798      	blx	r3
   21b1e:	2384      	movs	r3, #132	; 0x84
   21b20:	18fb      	adds	r3, r7, r3
   21b22:	681b      	ldr	r3, [r3, #0]
   21b24:	781b      	ldrb	r3, [r3, #0]
   21b26:	001a      	movs	r2, r3
   21b28:	4b54      	ldr	r3, [pc, #336]	; (21c7c <m2m_wifi_connect_sc+0x3d0>)
   21b2a:	0011      	movs	r1, r2
   21b2c:	0018      	movs	r0, r3
   21b2e:	4b49      	ldr	r3, [pc, #292]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21b30:	4798      	blx	r3
   21b32:	4b4a      	ldr	r3, [pc, #296]	; (21c5c <m2m_wifi_connect_sc+0x3b0>)
   21b34:	0018      	movs	r0, r3
   21b36:	4b47      	ldr	r3, [pc, #284]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21b38:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21b3a:	2397      	movs	r3, #151	; 0x97
   21b3c:	18fb      	adds	r3, r7, r3
   21b3e:	22f4      	movs	r2, #244	; 0xf4
   21b40:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21b42:	e0dc      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21b44:	2388      	movs	r3, #136	; 0x88
   21b46:	18fb      	adds	r3, r7, r3
   21b48:	681b      	ldr	r3, [r3, #0]
   21b4a:	785b      	ldrb	r3, [r3, #1]
   21b4c:	3b01      	subs	r3, #1
   21b4e:	b2da      	uxtb	r2, r3
   21b50:	2384      	movs	r3, #132	; 0x84
   21b52:	18fb      	adds	r3, r7, r3
   21b54:	681b      	ldr	r3, [r3, #0]
   21b56:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21b58:	2384      	movs	r3, #132	; 0x84
   21b5a:	18fb      	adds	r3, r7, r3
   21b5c:	681b      	ldr	r3, [r3, #0]
   21b5e:	785b      	ldrb	r3, [r3, #1]
   21b60:	2b0a      	cmp	r3, #10
   21b62:	d01e      	beq.n	21ba2 <m2m_wifi_connect_sc+0x2f6>
   21b64:	2384      	movs	r3, #132	; 0x84
   21b66:	18fb      	adds	r3, r7, r3
   21b68:	681b      	ldr	r3, [r3, #0]
   21b6a:	785b      	ldrb	r3, [r3, #1]
   21b6c:	2b1a      	cmp	r3, #26
   21b6e:	d018      	beq.n	21ba2 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21b70:	4a43      	ldr	r2, [pc, #268]	; (21c80 <m2m_wifi_connect_sc+0x3d4>)
   21b72:	4936      	ldr	r1, [pc, #216]	; (21c4c <m2m_wifi_connect_sc+0x3a0>)
   21b74:	4b36      	ldr	r3, [pc, #216]	; (21c50 <m2m_wifi_connect_sc+0x3a4>)
   21b76:	0018      	movs	r0, r3
   21b78:	4b36      	ldr	r3, [pc, #216]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21b7a:	4798      	blx	r3
   21b7c:	2384      	movs	r3, #132	; 0x84
   21b7e:	18fb      	adds	r3, r7, r3
   21b80:	681b      	ldr	r3, [r3, #0]
   21b82:	785b      	ldrb	r3, [r3, #1]
   21b84:	001a      	movs	r2, r3
   21b86:	4b3f      	ldr	r3, [pc, #252]	; (21c84 <m2m_wifi_connect_sc+0x3d8>)
   21b88:	0011      	movs	r1, r2
   21b8a:	0018      	movs	r0, r3
   21b8c:	4b31      	ldr	r3, [pc, #196]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21b8e:	4798      	blx	r3
   21b90:	4b32      	ldr	r3, [pc, #200]	; (21c5c <m2m_wifi_connect_sc+0x3b0>)
   21b92:	0018      	movs	r0, r3
   21b94:	4b2f      	ldr	r3, [pc, #188]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21b96:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21b98:	2397      	movs	r3, #151	; 0x97
   21b9a:	18fb      	adds	r3, r7, r3
   21b9c:	22f4      	movs	r2, #244	; 0xf4
   21b9e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21ba0:	e0ad      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   21ba2:	2384      	movs	r3, #132	; 0x84
   21ba4:	18fb      	adds	r3, r7, r3
   21ba6:	681b      	ldr	r3, [r3, #0]
   21ba8:	1c98      	adds	r0, r3, #2
   21baa:	2388      	movs	r3, #136	; 0x88
   21bac:	18fb      	adds	r3, r7, r3
   21bae:	681b      	ldr	r3, [r3, #0]
   21bb0:	1c99      	adds	r1, r3, #2
   21bb2:	2388      	movs	r3, #136	; 0x88
   21bb4:	18fb      	adds	r3, r7, r3
   21bb6:	681b      	ldr	r3, [r3, #0]
   21bb8:	785b      	ldrb	r3, [r3, #1]
   21bba:	001a      	movs	r2, r3
   21bbc:	4b2e      	ldr	r3, [pc, #184]	; (21c78 <m2m_wifi_connect_sc+0x3cc>)
   21bbe:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21bc0:	2388      	movs	r3, #136	; 0x88
   21bc2:	18fb      	adds	r3, r7, r3
   21bc4:	681b      	ldr	r3, [r3, #0]
   21bc6:	785b      	ldrb	r3, [r3, #1]
   21bc8:	001a      	movs	r2, r3
   21bca:	2384      	movs	r3, #132	; 0x84
   21bcc:	18fb      	adds	r3, r7, r3
   21bce:	681b      	ldr	r3, [r3, #0]
   21bd0:	189b      	adds	r3, r3, r2
   21bd2:	2200      	movs	r2, #0
   21bd4:	709a      	strb	r2, [r3, #2]
   21bd6:	e081      	b.n	21cdc <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   21bd8:	230a      	movs	r3, #10
   21bda:	18fb      	adds	r3, r7, r3
   21bdc:	781b      	ldrb	r3, [r3, #0]
   21bde:	2b02      	cmp	r3, #2
   21be0:	d156      	bne.n	21c90 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21be2:	2382      	movs	r3, #130	; 0x82
   21be4:	18fc      	adds	r4, r7, r3
   21be6:	687b      	ldr	r3, [r7, #4]
   21be8:	0018      	movs	r0, r3
   21bea:	4b1d      	ldr	r3, [pc, #116]	; (21c60 <m2m_wifi_connect_sc+0x3b4>)
   21bec:	4798      	blx	r3
   21bee:	0003      	movs	r3, r0
   21bf0:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21bf2:	2382      	movs	r3, #130	; 0x82
   21bf4:	18fb      	adds	r3, r7, r3
   21bf6:	881b      	ldrh	r3, [r3, #0]
   21bf8:	2b00      	cmp	r3, #0
   21bfa:	d004      	beq.n	21c06 <m2m_wifi_connect_sc+0x35a>
   21bfc:	2382      	movs	r3, #130	; 0x82
   21bfe:	18fb      	adds	r3, r7, r3
   21c00:	881b      	ldrh	r3, [r3, #0]
   21c02:	2b40      	cmp	r3, #64	; 0x40
   21c04:	d912      	bls.n	21c2c <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   21c06:	4a20      	ldr	r2, [pc, #128]	; (21c88 <m2m_wifi_connect_sc+0x3dc>)
   21c08:	4910      	ldr	r1, [pc, #64]	; (21c4c <m2m_wifi_connect_sc+0x3a0>)
   21c0a:	4b11      	ldr	r3, [pc, #68]	; (21c50 <m2m_wifi_connect_sc+0x3a4>)
   21c0c:	0018      	movs	r0, r3
   21c0e:	4b11      	ldr	r3, [pc, #68]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21c10:	4798      	blx	r3
   21c12:	4b1e      	ldr	r3, [pc, #120]	; (21c8c <m2m_wifi_connect_sc+0x3e0>)
   21c14:	0018      	movs	r0, r3
   21c16:	4b0f      	ldr	r3, [pc, #60]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21c18:	4798      	blx	r3
   21c1a:	4b10      	ldr	r3, [pc, #64]	; (21c5c <m2m_wifi_connect_sc+0x3b0>)
   21c1c:	0018      	movs	r0, r3
   21c1e:	4b0d      	ldr	r3, [pc, #52]	; (21c54 <m2m_wifi_connect_sc+0x3a8>)
   21c20:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21c22:	2397      	movs	r3, #151	; 0x97
   21c24:	18fb      	adds	r3, r7, r3
   21c26:	22f4      	movs	r2, #244	; 0xf4
   21c28:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21c2a:	e068      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21c2c:	238c      	movs	r3, #140	; 0x8c
   21c2e:	18fb      	adds	r3, r7, r3
   21c30:	6818      	ldr	r0, [r3, #0]
   21c32:	2382      	movs	r3, #130	; 0x82
   21c34:	18fb      	adds	r3, r7, r3
   21c36:	881b      	ldrh	r3, [r3, #0]
   21c38:	3301      	adds	r3, #1
   21c3a:	001a      	movs	r2, r3
   21c3c:	687b      	ldr	r3, [r7, #4]
   21c3e:	0019      	movs	r1, r3
   21c40:	4b0d      	ldr	r3, [pc, #52]	; (21c78 <m2m_wifi_connect_sc+0x3cc>)
   21c42:	4798      	blx	r3
   21c44:	e04a      	b.n	21cdc <m2m_wifi_connect_sc+0x430>
   21c46:	46c0      	nop			; (mov r8, r8)
   21c48:	0000021a 	.word	0x0000021a
   21c4c:	0003839c 	.word	0x0003839c
   21c50:	00037fe4 	.word	0x00037fe4
   21c54:	0001d7a9 	.word	0x0001d7a9
   21c58:	00038224 	.word	0x00038224
   21c5c:	00037fe0 	.word	0x00037fe0
   21c60:	0002051b 	.word	0x0002051b
   21c64:	00000226 	.word	0x00000226
   21c68:	00038238 	.word	0x00038238
   21c6c:	00038248 	.word	0x00038248
   21c70:	00000239 	.word	0x00000239
   21c74:	0003825c 	.word	0x0003825c
   21c78:	000204a1 	.word	0x000204a1
   21c7c:	00038268 	.word	0x00038268
   21c80:	00000257 	.word	0x00000257
   21c84:	00038284 	.word	0x00038284
   21c88:	00000266 	.word	0x00000266
   21c8c:	000382a0 	.word	0x000382a0
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   21c90:	230a      	movs	r3, #10
   21c92:	18fb      	adds	r3, r7, r3
   21c94:	781b      	ldrb	r3, [r3, #0]
   21c96:	2b04      	cmp	r3, #4
   21c98:	d108      	bne.n	21cac <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   21c9a:	238c      	movs	r3, #140	; 0x8c
   21c9c:	18fb      	adds	r3, r7, r3
   21c9e:	681b      	ldr	r3, [r3, #0]
   21ca0:	6879      	ldr	r1, [r7, #4]
   21ca2:	223e      	movs	r2, #62	; 0x3e
   21ca4:	0018      	movs	r0, r3
   21ca6:	4b1a      	ldr	r3, [pc, #104]	; (21d10 <m2m_wifi_connect_sc+0x464>)
   21ca8:	4798      	blx	r3
   21caa:	e017      	b.n	21cdc <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   21cac:	230a      	movs	r3, #10
   21cae:	18fb      	adds	r3, r7, r3
   21cb0:	781b      	ldrb	r3, [r3, #0]
   21cb2:	2b01      	cmp	r3, #1
   21cb4:	d012      	beq.n	21cdc <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   21cb6:	4a17      	ldr	r2, [pc, #92]	; (21d14 <m2m_wifi_connect_sc+0x468>)
   21cb8:	4917      	ldr	r1, [pc, #92]	; (21d18 <m2m_wifi_connect_sc+0x46c>)
   21cba:	4b18      	ldr	r3, [pc, #96]	; (21d1c <m2m_wifi_connect_sc+0x470>)
   21cbc:	0018      	movs	r0, r3
   21cbe:	4b18      	ldr	r3, [pc, #96]	; (21d20 <m2m_wifi_connect_sc+0x474>)
   21cc0:	4798      	blx	r3
   21cc2:	4b18      	ldr	r3, [pc, #96]	; (21d24 <m2m_wifi_connect_sc+0x478>)
   21cc4:	0018      	movs	r0, r3
   21cc6:	4b16      	ldr	r3, [pc, #88]	; (21d20 <m2m_wifi_connect_sc+0x474>)
   21cc8:	4798      	blx	r3
   21cca:	4b17      	ldr	r3, [pc, #92]	; (21d28 <m2m_wifi_connect_sc+0x47c>)
   21ccc:	0018      	movs	r0, r3
   21cce:	4b14      	ldr	r3, [pc, #80]	; (21d20 <m2m_wifi_connect_sc+0x474>)
   21cd0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21cd2:	2397      	movs	r3, #151	; 0x97
   21cd4:	18fb      	adds	r3, r7, r3
   21cd6:	22f4      	movs	r2, #244	; 0xf4
   21cd8:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21cda:	e010      	b.n	21cfe <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   21cdc:	2397      	movs	r3, #151	; 0x97
   21cde:	18fc      	adds	r4, r7, r3
   21ce0:	2314      	movs	r3, #20
   21ce2:	18fa      	adds	r2, r7, r3
   21ce4:	2300      	movs	r3, #0
   21ce6:	9302      	str	r3, [sp, #8]
   21ce8:	2300      	movs	r3, #0
   21cea:	9301      	str	r3, [sp, #4]
   21cec:	2300      	movs	r3, #0
   21cee:	9300      	str	r3, [sp, #0]
   21cf0:	236c      	movs	r3, #108	; 0x6c
   21cf2:	2128      	movs	r1, #40	; 0x28
   21cf4:	2001      	movs	r0, #1
   21cf6:	4d0d      	ldr	r5, [pc, #52]	; (21d2c <m2m_wifi_connect_sc+0x480>)
   21cf8:	47a8      	blx	r5
   21cfa:	0003      	movs	r3, r0
   21cfc:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   21cfe:	2397      	movs	r3, #151	; 0x97
   21d00:	18fb      	adds	r3, r7, r3
   21d02:	781b      	ldrb	r3, [r3, #0]
   21d04:	b25b      	sxtb	r3, r3
}
   21d06:	0018      	movs	r0, r3
   21d08:	46bd      	mov	sp, r7
   21d0a:	b026      	add	sp, #152	; 0x98
   21d0c:	bdb0      	pop	{r4, r5, r7, pc}
   21d0e:	46c0      	nop			; (mov r8, r8)
   21d10:	000204a1 	.word	0x000204a1
   21d14:	00000276 	.word	0x00000276
   21d18:	0003839c 	.word	0x0003839c
   21d1c:	00037fe4 	.word	0x00037fe4
   21d20:	0001d7a9 	.word	0x0001d7a9
   21d24:	000382bc 	.word	0x000382bc
   21d28:	00037fe0 	.word	0x00037fe0
   21d2c:	0002073d 	.word	0x0002073d

00021d30 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   21d30:	b580      	push	{r7, lr}
   21d32:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21d34:	2300      	movs	r3, #0
}
   21d36:	0018      	movs	r0, r3
   21d38:	46bd      	mov	sp, r7
   21d3a:	bd80      	pop	{r7, pc}

00021d3c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   21d3c:	b590      	push	{r4, r7, lr}
   21d3e:	b087      	sub	sp, #28
   21d40:	af00      	add	r7, sp, #0
   21d42:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21d44:	2317      	movs	r3, #23
   21d46:	18fb      	adds	r3, r7, r3
   21d48:	2200      	movs	r2, #0
   21d4a:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   21d4c:	687b      	ldr	r3, [r7, #4]
   21d4e:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   21d50:	693b      	ldr	r3, [r7, #16]
   21d52:	2280      	movs	r2, #128	; 0x80
   21d54:	0052      	lsls	r2, r2, #1
   21d56:	4313      	orrs	r3, r2
   21d58:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   21d5a:	693a      	ldr	r2, [r7, #16]
   21d5c:	23a5      	movs	r3, #165	; 0xa5
   21d5e:	015b      	lsls	r3, r3, #5
   21d60:	0011      	movs	r1, r2
   21d62:	0018      	movs	r0, r3
   21d64:	4b12      	ldr	r3, [pc, #72]	; (21db0 <chip_apply_conf+0x74>)
   21d66:	4798      	blx	r3
		if(val32 != 0) {		
   21d68:	693b      	ldr	r3, [r7, #16]
   21d6a:	2b00      	cmp	r3, #0
   21d6c:	d018      	beq.n	21da0 <chip_apply_conf+0x64>
			uint32 reg = 0;
   21d6e:	2300      	movs	r3, #0
   21d70:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   21d72:	2317      	movs	r3, #23
   21d74:	18fc      	adds	r4, r7, r3
   21d76:	230c      	movs	r3, #12
   21d78:	18fa      	adds	r2, r7, r3
   21d7a:	23a5      	movs	r3, #165	; 0xa5
   21d7c:	015b      	lsls	r3, r3, #5
   21d7e:	0011      	movs	r1, r2
   21d80:	0018      	movs	r0, r3
   21d82:	4b0c      	ldr	r3, [pc, #48]	; (21db4 <chip_apply_conf+0x78>)
   21d84:	4798      	blx	r3
   21d86:	0003      	movs	r3, r0
   21d88:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21d8a:	2317      	movs	r3, #23
   21d8c:	18fb      	adds	r3, r7, r3
   21d8e:	781b      	ldrb	r3, [r3, #0]
   21d90:	b25b      	sxtb	r3, r3
   21d92:	2b00      	cmp	r3, #0
   21d94:	d1e1      	bne.n	21d5a <chip_apply_conf+0x1e>
				if(reg == val32)
   21d96:	68fa      	ldr	r2, [r7, #12]
   21d98:	693b      	ldr	r3, [r7, #16]
   21d9a:	429a      	cmp	r2, r3
   21d9c:	d002      	beq.n	21da4 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   21d9e:	e7dc      	b.n	21d5a <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   21da0:	46c0      	nop			; (mov r8, r8)
   21da2:	e000      	b.n	21da6 <chip_apply_conf+0x6a>
					break;
   21da4:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   21da6:	2300      	movs	r3, #0
}
   21da8:	0018      	movs	r0, r3
   21daa:	46bd      	mov	sp, r7
   21dac:	b007      	add	sp, #28
   21dae:	bd90      	pop	{r4, r7, pc}
   21db0:	00022591 	.word	0x00022591
   21db4:	0002256d 	.word	0x0002256d

00021db8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   21db8:	b590      	push	{r4, r7, lr}
   21dba:	b083      	sub	sp, #12
   21dbc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21dbe:	2300      	movs	r3, #0
   21dc0:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   21dc2:	1dfb      	adds	r3, r7, #7
   21dc4:	2200      	movs	r2, #0
   21dc6:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   21dc8:	1dfc      	adds	r4, r7, #7
   21dca:	003b      	movs	r3, r7
   21dcc:	4a24      	ldr	r2, [pc, #144]	; (21e60 <enable_interrupts+0xa8>)
   21dce:	0019      	movs	r1, r3
   21dd0:	0010      	movs	r0, r2
   21dd2:	4b24      	ldr	r3, [pc, #144]	; (21e64 <enable_interrupts+0xac>)
   21dd4:	4798      	blx	r3
   21dd6:	0003      	movs	r3, r0
   21dd8:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21dda:	1dfb      	adds	r3, r7, #7
   21ddc:	781b      	ldrb	r3, [r3, #0]
   21dde:	b25b      	sxtb	r3, r3
   21de0:	2b00      	cmp	r3, #0
   21de2:	d131      	bne.n	21e48 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   21de4:	683b      	ldr	r3, [r7, #0]
   21de6:	2280      	movs	r2, #128	; 0x80
   21de8:	0052      	lsls	r2, r2, #1
   21dea:	4313      	orrs	r3, r2
   21dec:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   21dee:	683b      	ldr	r3, [r7, #0]
   21df0:	1dfc      	adds	r4, r7, #7
   21df2:	4a1b      	ldr	r2, [pc, #108]	; (21e60 <enable_interrupts+0xa8>)
   21df4:	0019      	movs	r1, r3
   21df6:	0010      	movs	r0, r2
   21df8:	4b1b      	ldr	r3, [pc, #108]	; (21e68 <enable_interrupts+0xb0>)
   21dfa:	4798      	blx	r3
   21dfc:	0003      	movs	r3, r0
   21dfe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21e00:	1dfb      	adds	r3, r7, #7
   21e02:	781b      	ldrb	r3, [r3, #0]
   21e04:	b25b      	sxtb	r3, r3
   21e06:	2b00      	cmp	r3, #0
   21e08:	d120      	bne.n	21e4c <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   21e0a:	1dfc      	adds	r4, r7, #7
   21e0c:	003a      	movs	r2, r7
   21e0e:	23d0      	movs	r3, #208	; 0xd0
   21e10:	015b      	lsls	r3, r3, #5
   21e12:	0011      	movs	r1, r2
   21e14:	0018      	movs	r0, r3
   21e16:	4b13      	ldr	r3, [pc, #76]	; (21e64 <enable_interrupts+0xac>)
   21e18:	4798      	blx	r3
   21e1a:	0003      	movs	r3, r0
   21e1c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21e1e:	1dfb      	adds	r3, r7, #7
   21e20:	781b      	ldrb	r3, [r3, #0]
   21e22:	b25b      	sxtb	r3, r3
   21e24:	2b00      	cmp	r3, #0
   21e26:	d113      	bne.n	21e50 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   21e28:	683b      	ldr	r3, [r7, #0]
   21e2a:	2280      	movs	r2, #128	; 0x80
   21e2c:	0252      	lsls	r2, r2, #9
   21e2e:	4313      	orrs	r3, r2
   21e30:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   21e32:	683a      	ldr	r2, [r7, #0]
   21e34:	1dfc      	adds	r4, r7, #7
   21e36:	23d0      	movs	r3, #208	; 0xd0
   21e38:	015b      	lsls	r3, r3, #5
   21e3a:	0011      	movs	r1, r2
   21e3c:	0018      	movs	r0, r3
   21e3e:	4b0a      	ldr	r3, [pc, #40]	; (21e68 <enable_interrupts+0xb0>)
   21e40:	4798      	blx	r3
   21e42:	0003      	movs	r3, r0
   21e44:	7023      	strb	r3, [r4, #0]
   21e46:	e004      	b.n	21e52 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21e48:	46c0      	nop			; (mov r8, r8)
   21e4a:	e002      	b.n	21e52 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21e4c:	46c0      	nop			; (mov r8, r8)
   21e4e:	e000      	b.n	21e52 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21e50:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   21e52:	1dfb      	adds	r3, r7, #7
   21e54:	781b      	ldrb	r3, [r3, #0]
   21e56:	b25b      	sxtb	r3, r3
}
   21e58:	0018      	movs	r0, r3
   21e5a:	46bd      	mov	sp, r7
   21e5c:	b003      	add	sp, #12
   21e5e:	bd90      	pop	{r4, r7, pc}
   21e60:	00001408 	.word	0x00001408
   21e64:	0002256d 	.word	0x0002256d
   21e68:	00022591 	.word	0x00022591

00021e6c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   21e6c:	b580      	push	{r7, lr}
   21e6e:	b082      	sub	sp, #8
   21e70:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   21e72:	4b32      	ldr	r3, [pc, #200]	; (21f3c <nmi_get_chipid+0xd0>)
   21e74:	681b      	ldr	r3, [r3, #0]
   21e76:	2b00      	cmp	r3, #0
   21e78:	d159      	bne.n	21f2e <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   21e7a:	4a30      	ldr	r2, [pc, #192]	; (21f3c <nmi_get_chipid+0xd0>)
   21e7c:	2380      	movs	r3, #128	; 0x80
   21e7e:	015b      	lsls	r3, r3, #5
   21e80:	0011      	movs	r1, r2
   21e82:	0018      	movs	r0, r3
   21e84:	4b2e      	ldr	r3, [pc, #184]	; (21f40 <nmi_get_chipid+0xd4>)
   21e86:	4798      	blx	r3
   21e88:	1e03      	subs	r3, r0, #0
   21e8a:	d004      	beq.n	21e96 <nmi_get_chipid+0x2a>
			chipid = 0;
   21e8c:	4b2b      	ldr	r3, [pc, #172]	; (21f3c <nmi_get_chipid+0xd0>)
   21e8e:	2200      	movs	r2, #0
   21e90:	601a      	str	r2, [r3, #0]
			return 0;
   21e92:	2300      	movs	r3, #0
   21e94:	e04d      	b.n	21f32 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   21e96:	1d3b      	adds	r3, r7, #4
   21e98:	4a2a      	ldr	r2, [pc, #168]	; (21f44 <nmi_get_chipid+0xd8>)
   21e9a:	0019      	movs	r1, r3
   21e9c:	0010      	movs	r0, r2
   21e9e:	4b28      	ldr	r3, [pc, #160]	; (21f40 <nmi_get_chipid+0xd4>)
   21ea0:	4798      	blx	r3
   21ea2:	1e03      	subs	r3, r0, #0
   21ea4:	d004      	beq.n	21eb0 <nmi_get_chipid+0x44>
			chipid = 0;
   21ea6:	4b25      	ldr	r3, [pc, #148]	; (21f3c <nmi_get_chipid+0xd0>)
   21ea8:	2200      	movs	r2, #0
   21eaa:	601a      	str	r2, [r3, #0]
			return 0;
   21eac:	2300      	movs	r3, #0
   21eae:	e040      	b.n	21f32 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   21eb0:	4b22      	ldr	r3, [pc, #136]	; (21f3c <nmi_get_chipid+0xd0>)
   21eb2:	681b      	ldr	r3, [r3, #0]
   21eb4:	4a24      	ldr	r2, [pc, #144]	; (21f48 <nmi_get_chipid+0xdc>)
   21eb6:	4293      	cmp	r3, r2
   21eb8:	d106      	bne.n	21ec8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   21eba:	687b      	ldr	r3, [r7, #4]
   21ebc:	2b01      	cmp	r3, #1
   21ebe:	d029      	beq.n	21f14 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   21ec0:	4b1e      	ldr	r3, [pc, #120]	; (21f3c <nmi_get_chipid+0xd0>)
   21ec2:	4a22      	ldr	r2, [pc, #136]	; (21f4c <nmi_get_chipid+0xe0>)
   21ec4:	601a      	str	r2, [r3, #0]
   21ec6:	e025      	b.n	21f14 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   21ec8:	4b1c      	ldr	r3, [pc, #112]	; (21f3c <nmi_get_chipid+0xd0>)
   21eca:	681b      	ldr	r3, [r3, #0]
   21ecc:	4a20      	ldr	r2, [pc, #128]	; (21f50 <nmi_get_chipid+0xe4>)
   21ece:	4293      	cmp	r3, r2
   21ed0:	d10d      	bne.n	21eee <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   21ed2:	687b      	ldr	r3, [r7, #4]
   21ed4:	2b03      	cmp	r3, #3
   21ed6:	d01d      	beq.n	21f14 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   21ed8:	687b      	ldr	r3, [r7, #4]
   21eda:	2b04      	cmp	r3, #4
   21edc:	d103      	bne.n	21ee6 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   21ede:	4b17      	ldr	r3, [pc, #92]	; (21f3c <nmi_get_chipid+0xd0>)
   21ee0:	4a1c      	ldr	r2, [pc, #112]	; (21f54 <nmi_get_chipid+0xe8>)
   21ee2:	601a      	str	r2, [r3, #0]
   21ee4:	e016      	b.n	21f14 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   21ee6:	4b15      	ldr	r3, [pc, #84]	; (21f3c <nmi_get_chipid+0xd0>)
   21ee8:	4a1b      	ldr	r2, [pc, #108]	; (21f58 <nmi_get_chipid+0xec>)
   21eea:	601a      	str	r2, [r3, #0]
   21eec:	e012      	b.n	21f14 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   21eee:	4b13      	ldr	r3, [pc, #76]	; (21f3c <nmi_get_chipid+0xd0>)
   21ef0:	681b      	ldr	r3, [r3, #0]
   21ef2:	4a1a      	ldr	r2, [pc, #104]	; (21f5c <nmi_get_chipid+0xf0>)
   21ef4:	4293      	cmp	r3, r2
   21ef6:	d10d      	bne.n	21f14 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   21ef8:	4a10      	ldr	r2, [pc, #64]	; (21f3c <nmi_get_chipid+0xd0>)
   21efa:	23ec      	movs	r3, #236	; 0xec
   21efc:	039b      	lsls	r3, r3, #14
   21efe:	0011      	movs	r1, r2
   21f00:	0018      	movs	r0, r3
   21f02:	4b0f      	ldr	r3, [pc, #60]	; (21f40 <nmi_get_chipid+0xd4>)
   21f04:	4798      	blx	r3
   21f06:	1e03      	subs	r3, r0, #0
   21f08:	d004      	beq.n	21f14 <nmi_get_chipid+0xa8>
			chipid = 0;
   21f0a:	4b0c      	ldr	r3, [pc, #48]	; (21f3c <nmi_get_chipid+0xd0>)
   21f0c:	2200      	movs	r2, #0
   21f0e:	601a      	str	r2, [r3, #0]
			return 0;
   21f10:	2300      	movs	r3, #0
   21f12:	e00e      	b.n	21f32 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   21f14:	4b09      	ldr	r3, [pc, #36]	; (21f3c <nmi_get_chipid+0xd0>)
   21f16:	681b      	ldr	r3, [r3, #0]
   21f18:	4a11      	ldr	r2, [pc, #68]	; (21f60 <nmi_get_chipid+0xf4>)
   21f1a:	401a      	ands	r2, r3
   21f1c:	4b07      	ldr	r3, [pc, #28]	; (21f3c <nmi_get_chipid+0xd0>)
   21f1e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   21f20:	4b06      	ldr	r3, [pc, #24]	; (21f3c <nmi_get_chipid+0xd0>)
   21f22:	681b      	ldr	r3, [r3, #0]
   21f24:	22a0      	movs	r2, #160	; 0xa0
   21f26:	02d2      	lsls	r2, r2, #11
   21f28:	431a      	orrs	r2, r3
   21f2a:	4b04      	ldr	r3, [pc, #16]	; (21f3c <nmi_get_chipid+0xd0>)
   21f2c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   21f2e:	4b03      	ldr	r3, [pc, #12]	; (21f3c <nmi_get_chipid+0xd0>)
   21f30:	681b      	ldr	r3, [r3, #0]
}
   21f32:	0018      	movs	r0, r3
   21f34:	46bd      	mov	sp, r7
   21f36:	b002      	add	sp, #8
   21f38:	bd80      	pop	{r7, pc}
   21f3a:	46c0      	nop			; (mov r8, r8)
   21f3c:	20004128 	.word	0x20004128
   21f40:	0002256d 	.word	0x0002256d
   21f44:	000013f4 	.word	0x000013f4
   21f48:	001002a0 	.word	0x001002a0
   21f4c:	001002a1 	.word	0x001002a1
   21f50:	001002b0 	.word	0x001002b0
   21f54:	001002b1 	.word	0x001002b1
   21f58:	001002b2 	.word	0x001002b2
   21f5c:	001000f0 	.word	0x001000f0
   21f60:	fff0ffff 	.word	0xfff0ffff

00021f64 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   21f64:	b590      	push	{r4, r7, lr}
   21f66:	b083      	sub	sp, #12
   21f68:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   21f6a:	1dfb      	adds	r3, r7, #7
   21f6c:	2200      	movs	r2, #0
   21f6e:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21f70:	1dfc      	adds	r4, r7, #7
   21f72:	003b      	movs	r3, r7
   21f74:	0019      	movs	r1, r3
   21f76:	2010      	movs	r0, #16
   21f78:	4b2e      	ldr	r3, [pc, #184]	; (22034 <chip_sleep+0xd0>)
   21f7a:	4798      	blx	r3
   21f7c:	0003      	movs	r3, r0
   21f7e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   21f80:	1dfb      	adds	r3, r7, #7
   21f82:	781b      	ldrb	r3, [r3, #0]
   21f84:	b25b      	sxtb	r3, r3
   21f86:	2b00      	cmp	r3, #0
   21f88:	d145      	bne.n	22016 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   21f8a:	683b      	ldr	r3, [r7, #0]
   21f8c:	2201      	movs	r2, #1
   21f8e:	4013      	ands	r3, r2
   21f90:	d000      	beq.n	21f94 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21f92:	e7ed      	b.n	21f70 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   21f94:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   21f96:	1dfc      	adds	r4, r7, #7
   21f98:	003b      	movs	r3, r7
   21f9a:	0019      	movs	r1, r3
   21f9c:	2001      	movs	r0, #1
   21f9e:	4b25      	ldr	r3, [pc, #148]	; (22034 <chip_sleep+0xd0>)
   21fa0:	4798      	blx	r3
   21fa2:	0003      	movs	r3, r0
   21fa4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21fa6:	1dfb      	adds	r3, r7, #7
   21fa8:	781b      	ldrb	r3, [r3, #0]
   21faa:	b25b      	sxtb	r3, r3
   21fac:	2b00      	cmp	r3, #0
   21fae:	d134      	bne.n	2201a <chip_sleep+0xb6>
	if(reg & NBIT1)
   21fb0:	683b      	ldr	r3, [r7, #0]
   21fb2:	2202      	movs	r2, #2
   21fb4:	4013      	ands	r3, r2
   21fb6:	d010      	beq.n	21fda <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   21fb8:	683b      	ldr	r3, [r7, #0]
   21fba:	2202      	movs	r2, #2
   21fbc:	4393      	bics	r3, r2
   21fbe:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   21fc0:	683b      	ldr	r3, [r7, #0]
   21fc2:	1dfc      	adds	r4, r7, #7
   21fc4:	0019      	movs	r1, r3
   21fc6:	2001      	movs	r0, #1
   21fc8:	4b1b      	ldr	r3, [pc, #108]	; (22038 <chip_sleep+0xd4>)
   21fca:	4798      	blx	r3
   21fcc:	0003      	movs	r3, r0
   21fce:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   21fd0:	1dfb      	adds	r3, r7, #7
   21fd2:	781b      	ldrb	r3, [r3, #0]
   21fd4:	b25b      	sxtb	r3, r3
   21fd6:	2b00      	cmp	r3, #0
   21fd8:	d121      	bne.n	2201e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   21fda:	1dfc      	adds	r4, r7, #7
   21fdc:	003b      	movs	r3, r7
   21fde:	0019      	movs	r1, r3
   21fe0:	200b      	movs	r0, #11
   21fe2:	4b14      	ldr	r3, [pc, #80]	; (22034 <chip_sleep+0xd0>)
   21fe4:	4798      	blx	r3
   21fe6:	0003      	movs	r3, r0
   21fe8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21fea:	1dfb      	adds	r3, r7, #7
   21fec:	781b      	ldrb	r3, [r3, #0]
   21fee:	b25b      	sxtb	r3, r3
   21ff0:	2b00      	cmp	r3, #0
   21ff2:	d116      	bne.n	22022 <chip_sleep+0xbe>
	if(reg & NBIT0)
   21ff4:	683b      	ldr	r3, [r7, #0]
   21ff6:	2201      	movs	r2, #1
   21ff8:	4013      	ands	r3, r2
   21ffa:	d013      	beq.n	22024 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   21ffc:	683b      	ldr	r3, [r7, #0]
   21ffe:	2201      	movs	r2, #1
   22000:	4393      	bics	r3, r2
   22002:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22004:	683b      	ldr	r3, [r7, #0]
   22006:	1dfc      	adds	r4, r7, #7
   22008:	0019      	movs	r1, r3
   2200a:	200b      	movs	r0, #11
   2200c:	4b0a      	ldr	r3, [pc, #40]	; (22038 <chip_sleep+0xd4>)
   2200e:	4798      	blx	r3
   22010:	0003      	movs	r3, r0
   22012:	7023      	strb	r3, [r4, #0]
   22014:	e006      	b.n	22024 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   22016:	46c0      	nop			; (mov r8, r8)
   22018:	e004      	b.n	22024 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2201a:	46c0      	nop			; (mov r8, r8)
   2201c:	e002      	b.n	22024 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   2201e:	46c0      	nop			; (mov r8, r8)
   22020:	e000      	b.n	22024 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22022:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22024:	1dfb      	adds	r3, r7, #7
   22026:	781b      	ldrb	r3, [r3, #0]
   22028:	b25b      	sxtb	r3, r3
}
   2202a:	0018      	movs	r0, r3
   2202c:	46bd      	mov	sp, r7
   2202e:	b003      	add	sp, #12
   22030:	bd90      	pop	{r4, r7, pc}
   22032:	46c0      	nop			; (mov r8, r8)
   22034:	0002256d 	.word	0x0002256d
   22038:	00022591 	.word	0x00022591

0002203c <chip_wake>:
sint8 chip_wake(void)
{
   2203c:	b590      	push	{r4, r7, lr}
   2203e:	b085      	sub	sp, #20
   22040:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22042:	230f      	movs	r3, #15
   22044:	18fb      	adds	r3, r7, r3
   22046:	2200      	movs	r2, #0
   22048:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2204a:	2300      	movs	r3, #0
   2204c:	607b      	str	r3, [r7, #4]
   2204e:	2300      	movs	r3, #0
   22050:	603b      	str	r3, [r7, #0]
   22052:	2300      	movs	r3, #0
   22054:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22056:	230f      	movs	r3, #15
   22058:	18fc      	adds	r4, r7, r3
   2205a:	1d3b      	adds	r3, r7, #4
   2205c:	0019      	movs	r1, r3
   2205e:	200b      	movs	r0, #11
   22060:	4b4e      	ldr	r3, [pc, #312]	; (2219c <chip_wake+0x160>)
   22062:	4798      	blx	r3
   22064:	0003      	movs	r3, r0
   22066:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22068:	230f      	movs	r3, #15
   2206a:	18fb      	adds	r3, r7, r3
   2206c:	781b      	ldrb	r3, [r3, #0]
   2206e:	b25b      	sxtb	r3, r3
   22070:	2b00      	cmp	r3, #0
   22072:	d000      	beq.n	22076 <chip_wake+0x3a>
   22074:	e082      	b.n	2217c <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   22076:	687b      	ldr	r3, [r7, #4]
   22078:	2201      	movs	r2, #1
   2207a:	4013      	ands	r3, r2
   2207c:	d111      	bne.n	220a2 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   2207e:	687b      	ldr	r3, [r7, #4]
   22080:	2201      	movs	r2, #1
   22082:	4313      	orrs	r3, r2
   22084:	220f      	movs	r2, #15
   22086:	18bc      	adds	r4, r7, r2
   22088:	0019      	movs	r1, r3
   2208a:	200b      	movs	r0, #11
   2208c:	4b44      	ldr	r3, [pc, #272]	; (221a0 <chip_wake+0x164>)
   2208e:	4798      	blx	r3
   22090:	0003      	movs	r3, r0
   22092:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22094:	230f      	movs	r3, #15
   22096:	18fb      	adds	r3, r7, r3
   22098:	781b      	ldrb	r3, [r3, #0]
   2209a:	b25b      	sxtb	r3, r3
   2209c:	2b00      	cmp	r3, #0
   2209e:	d000      	beq.n	220a2 <chip_wake+0x66>
   220a0:	e06e      	b.n	22180 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   220a2:	230f      	movs	r3, #15
   220a4:	18fc      	adds	r4, r7, r3
   220a6:	1d3b      	adds	r3, r7, #4
   220a8:	0019      	movs	r1, r3
   220aa:	2001      	movs	r0, #1
   220ac:	4b3b      	ldr	r3, [pc, #236]	; (2219c <chip_wake+0x160>)
   220ae:	4798      	blx	r3
   220b0:	0003      	movs	r3, r0
   220b2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   220b4:	230f      	movs	r3, #15
   220b6:	18fb      	adds	r3, r7, r3
   220b8:	781b      	ldrb	r3, [r3, #0]
   220ba:	b25b      	sxtb	r3, r3
   220bc:	2b00      	cmp	r3, #0
   220be:	d161      	bne.n	22184 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   220c0:	687b      	ldr	r3, [r7, #4]
   220c2:	2202      	movs	r2, #2
   220c4:	4013      	ands	r3, r2
   220c6:	d110      	bne.n	220ea <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   220c8:	687b      	ldr	r3, [r7, #4]
   220ca:	2202      	movs	r2, #2
   220cc:	4313      	orrs	r3, r2
   220ce:	220f      	movs	r2, #15
   220d0:	18bc      	adds	r4, r7, r2
   220d2:	0019      	movs	r1, r3
   220d4:	2001      	movs	r0, #1
   220d6:	4b32      	ldr	r3, [pc, #200]	; (221a0 <chip_wake+0x164>)
   220d8:	4798      	blx	r3
   220da:	0003      	movs	r3, r0
   220dc:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   220de:	230f      	movs	r3, #15
   220e0:	18fb      	adds	r3, r7, r3
   220e2:	781b      	ldrb	r3, [r3, #0]
   220e4:	b25b      	sxtb	r3, r3
   220e6:	2b00      	cmp	r3, #0
   220e8:	d14e      	bne.n	22188 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   220ea:	230f      	movs	r3, #15
   220ec:	18fc      	adds	r4, r7, r3
   220ee:	003b      	movs	r3, r7
   220f0:	0019      	movs	r1, r3
   220f2:	200f      	movs	r0, #15
   220f4:	4b29      	ldr	r3, [pc, #164]	; (2219c <chip_wake+0x160>)
   220f6:	4798      	blx	r3
   220f8:	0003      	movs	r3, r0
   220fa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   220fc:	230f      	movs	r3, #15
   220fe:	18fb      	adds	r3, r7, r3
   22100:	781b      	ldrb	r3, [r3, #0]
   22102:	b25b      	sxtb	r3, r3
   22104:	2b00      	cmp	r3, #0
   22106:	d014      	beq.n	22132 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22108:	23a8      	movs	r3, #168	; 0xa8
   2210a:	005a      	lsls	r2, r3, #1
   2210c:	4925      	ldr	r1, [pc, #148]	; (221a4 <chip_wake+0x168>)
   2210e:	4b26      	ldr	r3, [pc, #152]	; (221a8 <chip_wake+0x16c>)
   22110:	0018      	movs	r0, r3
   22112:	4b26      	ldr	r3, [pc, #152]	; (221ac <chip_wake+0x170>)
   22114:	4798      	blx	r3
   22116:	230f      	movs	r3, #15
   22118:	18fb      	adds	r3, r7, r3
   2211a:	2100      	movs	r1, #0
   2211c:	5659      	ldrsb	r1, [r3, r1]
   2211e:	683a      	ldr	r2, [r7, #0]
   22120:	4b23      	ldr	r3, [pc, #140]	; (221b0 <chip_wake+0x174>)
   22122:	0018      	movs	r0, r3
   22124:	4b21      	ldr	r3, [pc, #132]	; (221ac <chip_wake+0x170>)
   22126:	4798      	blx	r3
   22128:	4b22      	ldr	r3, [pc, #136]	; (221b4 <chip_wake+0x178>)
   2212a:	0018      	movs	r0, r3
   2212c:	4b1f      	ldr	r3, [pc, #124]	; (221ac <chip_wake+0x170>)
   2212e:	4798      	blx	r3
			goto _WAKE_EXIT;
   22130:	e02b      	b.n	2218a <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22132:	683b      	ldr	r3, [r7, #0]
   22134:	2204      	movs	r2, #4
   22136:	4013      	ands	r3, r2
   22138:	d11c      	bne.n	22174 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2213a:	2002      	movs	r0, #2
   2213c:	4b1e      	ldr	r3, [pc, #120]	; (221b8 <chip_wake+0x17c>)
   2213e:	4798      	blx	r3
		trials++;
   22140:	68bb      	ldr	r3, [r7, #8]
   22142:	3301      	adds	r3, #1
   22144:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   22146:	68bb      	ldr	r3, [r7, #8]
   22148:	2b04      	cmp	r3, #4
   2214a:	d9ce      	bls.n	220ea <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   2214c:	23ad      	movs	r3, #173	; 0xad
   2214e:	005a      	lsls	r2, r3, #1
   22150:	4914      	ldr	r1, [pc, #80]	; (221a4 <chip_wake+0x168>)
   22152:	4b15      	ldr	r3, [pc, #84]	; (221a8 <chip_wake+0x16c>)
   22154:	0018      	movs	r0, r3
   22156:	4b15      	ldr	r3, [pc, #84]	; (221ac <chip_wake+0x170>)
   22158:	4798      	blx	r3
   2215a:	4b18      	ldr	r3, [pc, #96]	; (221bc <chip_wake+0x180>)
   2215c:	0018      	movs	r0, r3
   2215e:	4b13      	ldr	r3, [pc, #76]	; (221ac <chip_wake+0x170>)
   22160:	4798      	blx	r3
   22162:	4b14      	ldr	r3, [pc, #80]	; (221b4 <chip_wake+0x178>)
   22164:	0018      	movs	r0, r3
   22166:	4b11      	ldr	r3, [pc, #68]	; (221ac <chip_wake+0x170>)
   22168:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2216a:	230f      	movs	r3, #15
   2216c:	18fb      	adds	r3, r7, r3
   2216e:	22fc      	movs	r2, #252	; 0xfc
   22170:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22172:	e00a      	b.n	2218a <chip_wake+0x14e>
			break;
   22174:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   22176:	4b12      	ldr	r3, [pc, #72]	; (221c0 <chip_wake+0x184>)
   22178:	4798      	blx	r3
   2217a:	e006      	b.n	2218a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2217c:	46c0      	nop			; (mov r8, r8)
   2217e:	e004      	b.n	2218a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22180:	46c0      	nop			; (mov r8, r8)
   22182:	e002      	b.n	2218a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22184:	46c0      	nop			; (mov r8, r8)
   22186:	e000      	b.n	2218a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22188:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2218a:	230f      	movs	r3, #15
   2218c:	18fb      	adds	r3, r7, r3
   2218e:	781b      	ldrb	r3, [r3, #0]
   22190:	b25b      	sxtb	r3, r3
}
   22192:	0018      	movs	r0, r3
   22194:	46bd      	mov	sp, r7
   22196:	b005      	add	sp, #20
   22198:	bd90      	pop	{r4, r7, pc}
   2219a:	46c0      	nop			; (mov r8, r8)
   2219c:	0002256d 	.word	0x0002256d
   221a0:	00022591 	.word	0x00022591
   221a4:	0003843c 	.word	0x0003843c
   221a8:	000383b0 	.word	0x000383b0
   221ac:	0001d7a9 	.word	0x0001d7a9
   221b0:	000383c4 	.word	0x000383c4
   221b4:	000383dc 	.word	0x000383dc
   221b8:	0001fbfd 	.word	0x0001fbfd
   221bc:	000383e0 	.word	0x000383e0
   221c0:	0002252d 	.word	0x0002252d

000221c4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   221c4:	b580      	push	{r7, lr}
   221c6:	b088      	sub	sp, #32
   221c8:	af00      	add	r7, sp, #0
   221ca:	0002      	movs	r2, r0
   221cc:	1dfb      	adds	r3, r7, #7
   221ce:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   221d0:	2313      	movs	r3, #19
   221d2:	18fb      	adds	r3, r7, r3
   221d4:	2200      	movs	r2, #0
   221d6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   221d8:	2300      	movs	r3, #0
   221da:	61fb      	str	r3, [r7, #28]
   221dc:	2300      	movs	r3, #0
   221de:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   221e0:	2300      	movs	r3, #0
   221e2:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   221e4:	4b4a      	ldr	r3, [pc, #296]	; (22310 <wait_for_bootrom+0x14c>)
   221e6:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   221e8:	2300      	movs	r3, #0
   221ea:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   221ec:	4b49      	ldr	r3, [pc, #292]	; (22314 <wait_for_bootrom+0x150>)
   221ee:	0018      	movs	r0, r3
   221f0:	4b49      	ldr	r3, [pc, #292]	; (22318 <wait_for_bootrom+0x154>)
   221f2:	4798      	blx	r3
   221f4:	0003      	movs	r3, r0
   221f6:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   221f8:	69fb      	ldr	r3, [r7, #28]
   221fa:	2b00      	cmp	r3, #0
   221fc:	db03      	blt.n	22206 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   221fe:	2001      	movs	r0, #1
   22200:	4b46      	ldr	r3, [pc, #280]	; (2231c <wait_for_bootrom+0x158>)
   22202:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22204:	e7f2      	b.n	221ec <wait_for_bootrom+0x28>
			break;
   22206:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22208:	4b45      	ldr	r3, [pc, #276]	; (22320 <wait_for_bootrom+0x15c>)
   2220a:	0018      	movs	r0, r3
   2220c:	4b42      	ldr	r3, [pc, #264]	; (22318 <wait_for_bootrom+0x154>)
   2220e:	4798      	blx	r3
   22210:	0003      	movs	r3, r0
   22212:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22214:	69fb      	ldr	r3, [r7, #28]
   22216:	2201      	movs	r2, #1
   22218:	4013      	ands	r3, r2
   2221a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   2221c:	69fb      	ldr	r3, [r7, #28]
   2221e:	2b00      	cmp	r3, #0
   22220:	d112      	bne.n	22248 <wait_for_bootrom+0x84>
	{
		reg = 0;
   22222:	2300      	movs	r3, #0
   22224:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   22226:	e00b      	b.n	22240 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   22228:	2001      	movs	r0, #1
   2222a:	4b3c      	ldr	r3, [pc, #240]	; (2231c <wait_for_bootrom+0x158>)
   2222c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   2222e:	4b3d      	ldr	r3, [pc, #244]	; (22324 <wait_for_bootrom+0x160>)
   22230:	0018      	movs	r0, r3
   22232:	4b39      	ldr	r3, [pc, #228]	; (22318 <wait_for_bootrom+0x154>)
   22234:	4798      	blx	r3
   22236:	0003      	movs	r3, r0
   22238:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2223a:	69bb      	ldr	r3, [r7, #24]
   2223c:	3301      	adds	r3, #1
   2223e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22240:	69fb      	ldr	r3, [r7, #28]
   22242:	4a39      	ldr	r2, [pc, #228]	; (22328 <wait_for_bootrom+0x164>)
   22244:	4293      	cmp	r3, r2
   22246:	d1ef      	bne.n	22228 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   22248:	1dfb      	adds	r3, r7, #7
   2224a:	781b      	ldrb	r3, [r3, #0]
   2224c:	2b02      	cmp	r3, #2
   2224e:	d10d      	bne.n	2226c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22250:	4a36      	ldr	r2, [pc, #216]	; (2232c <wait_for_bootrom+0x168>)
   22252:	4b37      	ldr	r3, [pc, #220]	; (22330 <wait_for_bootrom+0x16c>)
   22254:	0011      	movs	r1, r2
   22256:	0018      	movs	r0, r3
   22258:	4b36      	ldr	r3, [pc, #216]	; (22334 <wait_for_bootrom+0x170>)
   2225a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   2225c:	2380      	movs	r3, #128	; 0x80
   2225e:	035b      	lsls	r3, r3, #13
   22260:	4a35      	ldr	r2, [pc, #212]	; (22338 <wait_for_bootrom+0x174>)
   22262:	0019      	movs	r1, r3
   22264:	0010      	movs	r0, r2
   22266:	4b33      	ldr	r3, [pc, #204]	; (22334 <wait_for_bootrom+0x170>)
   22268:	4798      	blx	r3
   2226a:	e022      	b.n	222b2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   2226c:	1dfb      	adds	r3, r7, #7
   2226e:	781b      	ldrb	r3, [r3, #0]
   22270:	2b03      	cmp	r3, #3
   22272:	d10b      	bne.n	2228c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22274:	4a2d      	ldr	r2, [pc, #180]	; (2232c <wait_for_bootrom+0x168>)
   22276:	4b2e      	ldr	r3, [pc, #184]	; (22330 <wait_for_bootrom+0x16c>)
   22278:	0011      	movs	r1, r2
   2227a:	0018      	movs	r0, r3
   2227c:	4b2d      	ldr	r3, [pc, #180]	; (22334 <wait_for_bootrom+0x170>)
   2227e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22280:	4b2d      	ldr	r3, [pc, #180]	; (22338 <wait_for_bootrom+0x174>)
   22282:	2100      	movs	r1, #0
   22284:	0018      	movs	r0, r3
   22286:	4b2b      	ldr	r3, [pc, #172]	; (22334 <wait_for_bootrom+0x170>)
   22288:	4798      	blx	r3
   2228a:	e012      	b.n	222b2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   2228c:	1dfb      	adds	r3, r7, #7
   2228e:	781b      	ldrb	r3, [r3, #0]
   22290:	2b04      	cmp	r3, #4
   22292:	d108      	bne.n	222a6 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   22294:	2380      	movs	r3, #128	; 0x80
   22296:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22298:	68fb      	ldr	r3, [r7, #12]
   2229a:	4a27      	ldr	r2, [pc, #156]	; (22338 <wait_for_bootrom+0x174>)
   2229c:	0019      	movs	r1, r3
   2229e:	0010      	movs	r0, r2
   222a0:	4b24      	ldr	r3, [pc, #144]	; (22334 <wait_for_bootrom+0x170>)
   222a2:	4798      	blx	r3
   222a4:	e005      	b.n	222b2 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   222a6:	68fb      	ldr	r3, [r7, #12]
   222a8:	4a23      	ldr	r2, [pc, #140]	; (22338 <wait_for_bootrom+0x174>)
   222aa:	0019      	movs	r1, r3
   222ac:	0010      	movs	r0, r2
   222ae:	4b21      	ldr	r3, [pc, #132]	; (22334 <wait_for_bootrom+0x170>)
   222b0:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   222b2:	4b22      	ldr	r3, [pc, #136]	; (2233c <wait_for_bootrom+0x178>)
   222b4:	4798      	blx	r3
   222b6:	0003      	movs	r3, r0
   222b8:	051b      	lsls	r3, r3, #20
   222ba:	0d1b      	lsrs	r3, r3, #20
   222bc:	4a20      	ldr	r2, [pc, #128]	; (22340 <wait_for_bootrom+0x17c>)
   222be:	4293      	cmp	r3, r2
   222c0:	d906      	bls.n	222d0 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   222c2:	697b      	ldr	r3, [r7, #20]
   222c4:	2202      	movs	r2, #2
   222c6:	4313      	orrs	r3, r2
   222c8:	0018      	movs	r0, r3
   222ca:	4b1e      	ldr	r3, [pc, #120]	; (22344 <wait_for_bootrom+0x180>)
   222cc:	4798      	blx	r3
   222ce:	e003      	b.n	222d8 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   222d0:	697b      	ldr	r3, [r7, #20]
   222d2:	0018      	movs	r0, r3
   222d4:	4b1b      	ldr	r3, [pc, #108]	; (22344 <wait_for_bootrom+0x180>)
   222d6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   222d8:	4b1b      	ldr	r3, [pc, #108]	; (22348 <wait_for_bootrom+0x184>)
   222da:	0018      	movs	r0, r3
   222dc:	4b1b      	ldr	r3, [pc, #108]	; (2234c <wait_for_bootrom+0x188>)
   222de:	4798      	blx	r3
   222e0:	68fa      	ldr	r2, [r7, #12]
   222e2:	4b1b      	ldr	r3, [pc, #108]	; (22350 <wait_for_bootrom+0x18c>)
   222e4:	0011      	movs	r1, r2
   222e6:	0018      	movs	r0, r3
   222e8:	4b18      	ldr	r3, [pc, #96]	; (2234c <wait_for_bootrom+0x188>)
   222ea:	4798      	blx	r3
   222ec:	4b19      	ldr	r3, [pc, #100]	; (22354 <wait_for_bootrom+0x190>)
   222ee:	0018      	movs	r0, r3
   222f0:	4b16      	ldr	r3, [pc, #88]	; (2234c <wait_for_bootrom+0x188>)
   222f2:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   222f4:	4a18      	ldr	r2, [pc, #96]	; (22358 <wait_for_bootrom+0x194>)
   222f6:	4b0b      	ldr	r3, [pc, #44]	; (22324 <wait_for_bootrom+0x160>)
   222f8:	0011      	movs	r1, r2
   222fa:	0018      	movs	r0, r3
   222fc:	4b0d      	ldr	r3, [pc, #52]	; (22334 <wait_for_bootrom+0x170>)
   222fe:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22300:	2313      	movs	r3, #19
   22302:	18fb      	adds	r3, r7, r3
   22304:	781b      	ldrb	r3, [r3, #0]
   22306:	b25b      	sxtb	r3, r3
}
   22308:	0018      	movs	r0, r3
   2230a:	46bd      	mov	sp, r7
   2230c:	b008      	add	sp, #32
   2230e:	bd80      	pop	{r7, pc}
   22310:	13301354 	.word	0x13301354
   22314:	00001014 	.word	0x00001014
   22318:	0002254d 	.word	0x0002254d
   2231c:	0001fbfd 	.word	0x0001fbfd
   22320:	000207bc 	.word	0x000207bc
   22324:	000c000c 	.word	0x000c000c
   22328:	10add09e 	.word	0x10add09e
   2232c:	3c1cd57d 	.word	0x3c1cd57d
   22330:	000207ac 	.word	0x000207ac
   22334:	00022591 	.word	0x00022591
   22338:	0000108c 	.word	0x0000108c
   2233c:	00021e6d 	.word	0x00021e6d
   22340:	0000039f 	.word	0x0000039f
   22344:	00021d3d 	.word	0x00021d3d
   22348:	000383fc 	.word	0x000383fc
   2234c:	0001d7a9 	.word	0x0001d7a9
   22350:	00038408 	.word	0x00038408
   22354:	000383dc 	.word	0x000383dc
   22358:	ef522f61 	.word	0xef522f61

0002235c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   2235c:	b580      	push	{r7, lr}
   2235e:	b088      	sub	sp, #32
   22360:	af00      	add	r7, sp, #0
   22362:	0002      	movs	r2, r0
   22364:	1dfb      	adds	r3, r7, #7
   22366:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22368:	231f      	movs	r3, #31
   2236a:	18fb      	adds	r3, r7, r3
   2236c:	2200      	movs	r2, #0
   2236e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22370:	2300      	movs	r3, #0
   22372:	61bb      	str	r3, [r7, #24]
   22374:	2300      	movs	r3, #0
   22376:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   22378:	2301      	movs	r3, #1
   2237a:	425b      	negs	r3, r3
   2237c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   2237e:	4b1d      	ldr	r3, [pc, #116]	; (223f4 <wait_for_firmware_start+0x98>)
   22380:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   22382:	4b1d      	ldr	r3, [pc, #116]	; (223f8 <wait_for_firmware_start+0x9c>)
   22384:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   22386:	1dfb      	adds	r3, r7, #7
   22388:	781b      	ldrb	r3, [r3, #0]
   2238a:	2b02      	cmp	r3, #2
   2238c:	d003      	beq.n	22396 <wait_for_firmware_start+0x3a>
   2238e:	1dfb      	adds	r3, r7, #7
   22390:	781b      	ldrb	r3, [r3, #0]
   22392:	2b03      	cmp	r3, #3
   22394:	d119      	bne.n	223ca <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   22396:	4b19      	ldr	r3, [pc, #100]	; (223fc <wait_for_firmware_start+0xa0>)
   22398:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2239a:	4b19      	ldr	r3, [pc, #100]	; (22400 <wait_for_firmware_start+0xa4>)
   2239c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   2239e:	e014      	b.n	223ca <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   223a0:	2002      	movs	r0, #2
   223a2:	4b18      	ldr	r3, [pc, #96]	; (22404 <wait_for_firmware_start+0xa8>)
   223a4:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   223a6:	68fb      	ldr	r3, [r7, #12]
   223a8:	0018      	movs	r0, r3
   223aa:	4b17      	ldr	r3, [pc, #92]	; (22408 <wait_for_firmware_start+0xac>)
   223ac:	4798      	blx	r3
   223ae:	0003      	movs	r3, r0
   223b0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   223b2:	697b      	ldr	r3, [r7, #20]
   223b4:	3301      	adds	r3, #1
   223b6:	617b      	str	r3, [r7, #20]
   223b8:	697a      	ldr	r2, [r7, #20]
   223ba:	693b      	ldr	r3, [r7, #16]
   223bc:	429a      	cmp	r2, r3
   223be:	d304      	bcc.n	223ca <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   223c0:	231f      	movs	r3, #31
   223c2:	18fb      	adds	r3, r7, r3
   223c4:	22fb      	movs	r2, #251	; 0xfb
   223c6:	701a      	strb	r2, [r3, #0]
			goto ERR;
   223c8:	e00c      	b.n	223e4 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   223ca:	68ba      	ldr	r2, [r7, #8]
   223cc:	69bb      	ldr	r3, [r7, #24]
   223ce:	429a      	cmp	r2, r3
   223d0:	d1e6      	bne.n	223a0 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   223d2:	68bb      	ldr	r3, [r7, #8]
   223d4:	4a08      	ldr	r2, [pc, #32]	; (223f8 <wait_for_firmware_start+0x9c>)
   223d6:	4293      	cmp	r3, r2
   223d8:	d104      	bne.n	223e4 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   223da:	4b06      	ldr	r3, [pc, #24]	; (223f4 <wait_for_firmware_start+0x98>)
   223dc:	2100      	movs	r1, #0
   223de:	0018      	movs	r0, r3
   223e0:	4b0a      	ldr	r3, [pc, #40]	; (2240c <wait_for_firmware_start+0xb0>)
   223e2:	4798      	blx	r3
	}
ERR:
	return ret;
   223e4:	231f      	movs	r3, #31
   223e6:	18fb      	adds	r3, r7, r3
   223e8:	781b      	ldrb	r3, [r3, #0]
   223ea:	b25b      	sxtb	r3, r3
}
   223ec:	0018      	movs	r0, r3
   223ee:	46bd      	mov	sp, r7
   223f0:	b008      	add	sp, #32
   223f2:	bd80      	pop	{r7, pc}
   223f4:	0000108c 	.word	0x0000108c
   223f8:	02532636 	.word	0x02532636
   223fc:	000207ac 	.word	0x000207ac
   22400:	d75dc1c3 	.word	0xd75dc1c3
   22404:	0001fbfd 	.word	0x0001fbfd
   22408:	0002254d 	.word	0x0002254d
   2240c:	00022591 	.word	0x00022591

00022410 <chip_deinit>:

sint8 chip_deinit(void)
{
   22410:	b590      	push	{r4, r7, lr}
   22412:	b083      	sub	sp, #12
   22414:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22416:	2300      	movs	r3, #0
   22418:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2241a:	1dfc      	adds	r4, r7, #7
   2241c:	003a      	movs	r2, r7
   2241e:	23a0      	movs	r3, #160	; 0xa0
   22420:	015b      	lsls	r3, r3, #5
   22422:	0011      	movs	r1, r2
   22424:	0018      	movs	r0, r3
   22426:	4b20      	ldr	r3, [pc, #128]	; (224a8 <chip_deinit+0x98>)
   22428:	4798      	blx	r3
   2242a:	0003      	movs	r3, r0
   2242c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   2242e:	1dfb      	adds	r3, r7, #7
   22430:	781b      	ldrb	r3, [r3, #0]
   22432:	b25b      	sxtb	r3, r3
   22434:	2b00      	cmp	r3, #0
   22436:	d00e      	beq.n	22456 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   22438:	4a1c      	ldr	r2, [pc, #112]	; (224ac <chip_deinit+0x9c>)
   2243a:	491d      	ldr	r1, [pc, #116]	; (224b0 <chip_deinit+0xa0>)
   2243c:	4b1d      	ldr	r3, [pc, #116]	; (224b4 <chip_deinit+0xa4>)
   2243e:	0018      	movs	r0, r3
   22440:	4b1d      	ldr	r3, [pc, #116]	; (224b8 <chip_deinit+0xa8>)
   22442:	4798      	blx	r3
   22444:	4b1d      	ldr	r3, [pc, #116]	; (224bc <chip_deinit+0xac>)
   22446:	0018      	movs	r0, r3
   22448:	4b1b      	ldr	r3, [pc, #108]	; (224b8 <chip_deinit+0xa8>)
   2244a:	4798      	blx	r3
   2244c:	4b1c      	ldr	r3, [pc, #112]	; (224c0 <chip_deinit+0xb0>)
   2244e:	0018      	movs	r0, r3
   22450:	4b19      	ldr	r3, [pc, #100]	; (224b8 <chip_deinit+0xa8>)
   22452:	4798      	blx	r3
		goto ERR1;
   22454:	e021      	b.n	2249a <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   22456:	683b      	ldr	r3, [r7, #0]
   22458:	4a1a      	ldr	r2, [pc, #104]	; (224c4 <chip_deinit+0xb4>)
   2245a:	4013      	ands	r3, r2
   2245c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   2245e:	683a      	ldr	r2, [r7, #0]
   22460:	1dfc      	adds	r4, r7, #7
   22462:	23a0      	movs	r3, #160	; 0xa0
   22464:	015b      	lsls	r3, r3, #5
   22466:	0011      	movs	r1, r2
   22468:	0018      	movs	r0, r3
   2246a:	4b17      	ldr	r3, [pc, #92]	; (224c8 <chip_deinit+0xb8>)
   2246c:	4798      	blx	r3
   2246e:	0003      	movs	r3, r0
   22470:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22472:	1dfb      	adds	r3, r7, #7
   22474:	781b      	ldrb	r3, [r3, #0]
   22476:	b25b      	sxtb	r3, r3
   22478:	2b00      	cmp	r3, #0
   2247a:	d00e      	beq.n	2249a <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   2247c:	4a13      	ldr	r2, [pc, #76]	; (224cc <chip_deinit+0xbc>)
   2247e:	490c      	ldr	r1, [pc, #48]	; (224b0 <chip_deinit+0xa0>)
   22480:	4b0c      	ldr	r3, [pc, #48]	; (224b4 <chip_deinit+0xa4>)
   22482:	0018      	movs	r0, r3
   22484:	4b0c      	ldr	r3, [pc, #48]	; (224b8 <chip_deinit+0xa8>)
   22486:	4798      	blx	r3
   22488:	4b0c      	ldr	r3, [pc, #48]	; (224bc <chip_deinit+0xac>)
   2248a:	0018      	movs	r0, r3
   2248c:	4b0a      	ldr	r3, [pc, #40]	; (224b8 <chip_deinit+0xa8>)
   2248e:	4798      	blx	r3
   22490:	4b0b      	ldr	r3, [pc, #44]	; (224c0 <chip_deinit+0xb0>)
   22492:	0018      	movs	r0, r3
   22494:	4b08      	ldr	r3, [pc, #32]	; (224b8 <chip_deinit+0xa8>)
   22496:	4798      	blx	r3
		goto ERR1;
   22498:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2249a:	1dfb      	adds	r3, r7, #7
   2249c:	781b      	ldrb	r3, [r3, #0]
   2249e:	b25b      	sxtb	r3, r3
}
   224a0:	0018      	movs	r0, r3
   224a2:	46bd      	mov	sp, r7
   224a4:	b003      	add	sp, #12
   224a6:	bd90      	pop	{r4, r7, pc}
   224a8:	0002256d 	.word	0x0002256d
   224ac:	00000201 	.word	0x00000201
   224b0:	00038448 	.word	0x00038448
   224b4:	000383b0 	.word	0x000383b0
   224b8:	0001d7a9 	.word	0x0001d7a9
   224bc:	00038420 	.word	0x00038420
   224c0:	000383dc 	.word	0x000383dc
   224c4:	fffffbff 	.word	0xfffffbff
   224c8:	00022591 	.word	0x00022591
   224cc:	00000207 	.word	0x00000207

000224d0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   224d0:	b590      	push	{r4, r7, lr}
   224d2:	b085      	sub	sp, #20
   224d4:	af00      	add	r7, sp, #0
   224d6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   224d8:	230f      	movs	r3, #15
   224da:	18fb      	adds	r3, r7, r3
   224dc:	2200      	movs	r2, #0
   224de:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   224e0:	230f      	movs	r3, #15
   224e2:	18fc      	adds	r4, r7, r3
   224e4:	687b      	ldr	r3, [r7, #4]
   224e6:	0018      	movs	r0, r3
   224e8:	4b05      	ldr	r3, [pc, #20]	; (22500 <nm_bus_iface_init+0x30>)
   224ea:	4798      	blx	r3
   224ec:	0003      	movs	r3, r0
   224ee:	7023      	strb	r3, [r4, #0]
	return ret;
   224f0:	230f      	movs	r3, #15
   224f2:	18fb      	adds	r3, r7, r3
   224f4:	781b      	ldrb	r3, [r3, #0]
   224f6:	b25b      	sxtb	r3, r3
}
   224f8:	0018      	movs	r0, r3
   224fa:	46bd      	mov	sp, r7
   224fc:	b005      	add	sp, #20
   224fe:	bd90      	pop	{r4, r7, pc}
   22500:	000202b9 	.word	0x000202b9

00022504 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22504:	b590      	push	{r4, r7, lr}
   22506:	b083      	sub	sp, #12
   22508:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2250a:	1dfb      	adds	r3, r7, #7
   2250c:	2200      	movs	r2, #0
   2250e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22510:	1dfc      	adds	r4, r7, #7
   22512:	4b05      	ldr	r3, [pc, #20]	; (22528 <nm_bus_iface_deinit+0x24>)
   22514:	4798      	blx	r3
   22516:	0003      	movs	r3, r0
   22518:	7023      	strb	r3, [r4, #0]

	return ret;
   2251a:	1dfb      	adds	r3, r7, #7
   2251c:	781b      	ldrb	r3, [r3, #0]
   2251e:	b25b      	sxtb	r3, r3
}
   22520:	0018      	movs	r0, r3
   22522:	46bd      	mov	sp, r7
   22524:	b003      	add	sp, #12
   22526:	bd90      	pop	{r4, r7, pc}
   22528:	00020431 	.word	0x00020431

0002252c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   2252c:	b580      	push	{r7, lr}
   2252e:	b082      	sub	sp, #8
   22530:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22532:	1dfb      	adds	r3, r7, #7
   22534:	2200      	movs	r2, #0
   22536:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22538:	4b03      	ldr	r3, [pc, #12]	; (22548 <nm_bus_reset+0x1c>)
   2253a:	4798      	blx	r3
   2253c:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   2253e:	0018      	movs	r0, r3
   22540:	46bd      	mov	sp, r7
   22542:	b002      	add	sp, #8
   22544:	bd80      	pop	{r7, pc}
   22546:	46c0      	nop			; (mov r8, r8)
   22548:	00024359 	.word	0x00024359

0002254c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   2254c:	b580      	push	{r7, lr}
   2254e:	b082      	sub	sp, #8
   22550:	af00      	add	r7, sp, #0
   22552:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22554:	687b      	ldr	r3, [r7, #4]
   22556:	0018      	movs	r0, r3
   22558:	4b03      	ldr	r3, [pc, #12]	; (22568 <nm_read_reg+0x1c>)
   2255a:	4798      	blx	r3
   2255c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   2255e:	0018      	movs	r0, r3
   22560:	46bd      	mov	sp, r7
   22562:	b002      	add	sp, #8
   22564:	bd80      	pop	{r7, pc}
   22566:	46c0      	nop			; (mov r8, r8)
   22568:	000244ed 	.word	0x000244ed

0002256c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   2256c:	b580      	push	{r7, lr}
   2256e:	b082      	sub	sp, #8
   22570:	af00      	add	r7, sp, #0
   22572:	6078      	str	r0, [r7, #4]
   22574:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   22576:	683a      	ldr	r2, [r7, #0]
   22578:	687b      	ldr	r3, [r7, #4]
   2257a:	0011      	movs	r1, r2
   2257c:	0018      	movs	r0, r3
   2257e:	4b03      	ldr	r3, [pc, #12]	; (2258c <nm_read_reg_with_ret+0x20>)
   22580:	4798      	blx	r3
   22582:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22584:	0018      	movs	r0, r3
   22586:	46bd      	mov	sp, r7
   22588:	b002      	add	sp, #8
   2258a:	bd80      	pop	{r7, pc}
   2258c:	00024511 	.word	0x00024511

00022590 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   22590:	b580      	push	{r7, lr}
   22592:	b082      	sub	sp, #8
   22594:	af00      	add	r7, sp, #0
   22596:	6078      	str	r0, [r7, #4]
   22598:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2259a:	683a      	ldr	r2, [r7, #0]
   2259c:	687b      	ldr	r3, [r7, #4]
   2259e:	0011      	movs	r1, r2
   225a0:	0018      	movs	r0, r3
   225a2:	4b03      	ldr	r3, [pc, #12]	; (225b0 <nm_write_reg+0x20>)
   225a4:	4798      	blx	r3
   225a6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   225a8:	0018      	movs	r0, r3
   225aa:	46bd      	mov	sp, r7
   225ac:	b002      	add	sp, #8
   225ae:	bd80      	pop	{r7, pc}
   225b0:	00024561 	.word	0x00024561

000225b4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   225b4:	b580      	push	{r7, lr}
   225b6:	b084      	sub	sp, #16
   225b8:	af00      	add	r7, sp, #0
   225ba:	60f8      	str	r0, [r7, #12]
   225bc:	60b9      	str	r1, [r7, #8]
   225be:	1dbb      	adds	r3, r7, #6
   225c0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   225c2:	1dbb      	adds	r3, r7, #6
   225c4:	881a      	ldrh	r2, [r3, #0]
   225c6:	68b9      	ldr	r1, [r7, #8]
   225c8:	68fb      	ldr	r3, [r7, #12]
   225ca:	0018      	movs	r0, r3
   225cc:	4b03      	ldr	r3, [pc, #12]	; (225dc <p_nm_read_block+0x28>)
   225ce:	4798      	blx	r3
   225d0:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   225d2:	0018      	movs	r0, r3
   225d4:	46bd      	mov	sp, r7
   225d6:	b004      	add	sp, #16
   225d8:	bd80      	pop	{r7, pc}
   225da:	46c0      	nop			; (mov r8, r8)
   225dc:	000245b1 	.word	0x000245b1

000225e0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   225e0:	b580      	push	{r7, lr}
   225e2:	b086      	sub	sp, #24
   225e4:	af00      	add	r7, sp, #0
   225e6:	60f8      	str	r0, [r7, #12]
   225e8:	60b9      	str	r1, [r7, #8]
   225ea:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   225ec:	4b2d      	ldr	r3, [pc, #180]	; (226a4 <nm_read_block+0xc4>)
   225ee:	881a      	ldrh	r2, [r3, #0]
   225f0:	2310      	movs	r3, #16
   225f2:	18fb      	adds	r3, r7, r3
   225f4:	3a08      	subs	r2, #8
   225f6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   225f8:	2300      	movs	r3, #0
   225fa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   225fc:	2313      	movs	r3, #19
   225fe:	18fb      	adds	r3, r7, r3
   22600:	2200      	movs	r2, #0
   22602:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22604:	2310      	movs	r3, #16
   22606:	18fb      	adds	r3, r7, r3
   22608:	881a      	ldrh	r2, [r3, #0]
   2260a:	687b      	ldr	r3, [r7, #4]
   2260c:	429a      	cmp	r2, r3
   2260e:	d313      	bcc.n	22638 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22610:	68ba      	ldr	r2, [r7, #8]
   22612:	697b      	ldr	r3, [r7, #20]
   22614:	18d1      	adds	r1, r2, r3
   22616:	687b      	ldr	r3, [r7, #4]
   22618:	b29a      	uxth	r2, r3
   2261a:	68fb      	ldr	r3, [r7, #12]
   2261c:	0018      	movs	r0, r3
   2261e:	4b22      	ldr	r3, [pc, #136]	; (226a8 <nm_read_block+0xc8>)
   22620:	4798      	blx	r3
   22622:	0003      	movs	r3, r0
   22624:	b2da      	uxtb	r2, r3
   22626:	2313      	movs	r3, #19
   22628:	18fb      	adds	r3, r7, r3
   2262a:	781b      	ldrb	r3, [r3, #0]
   2262c:	18d3      	adds	r3, r2, r3
   2262e:	b2da      	uxtb	r2, r3
   22630:	2313      	movs	r3, #19
   22632:	18fb      	adds	r3, r7, r3
   22634:	701a      	strb	r2, [r3, #0]
			break;
   22636:	e02d      	b.n	22694 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22638:	68ba      	ldr	r2, [r7, #8]
   2263a:	697b      	ldr	r3, [r7, #20]
   2263c:	18d1      	adds	r1, r2, r3
   2263e:	2310      	movs	r3, #16
   22640:	18fb      	adds	r3, r7, r3
   22642:	881a      	ldrh	r2, [r3, #0]
   22644:	68fb      	ldr	r3, [r7, #12]
   22646:	0018      	movs	r0, r3
   22648:	4b17      	ldr	r3, [pc, #92]	; (226a8 <nm_read_block+0xc8>)
   2264a:	4798      	blx	r3
   2264c:	0003      	movs	r3, r0
   2264e:	b2da      	uxtb	r2, r3
   22650:	2313      	movs	r3, #19
   22652:	18fb      	adds	r3, r7, r3
   22654:	781b      	ldrb	r3, [r3, #0]
   22656:	18d3      	adds	r3, r2, r3
   22658:	b2da      	uxtb	r2, r3
   2265a:	2313      	movs	r3, #19
   2265c:	18fb      	adds	r3, r7, r3
   2265e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22660:	2313      	movs	r3, #19
   22662:	18fb      	adds	r3, r7, r3
   22664:	781b      	ldrb	r3, [r3, #0]
   22666:	b25b      	sxtb	r3, r3
   22668:	2b00      	cmp	r3, #0
   2266a:	d112      	bne.n	22692 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   2266c:	2310      	movs	r3, #16
   2266e:	18fb      	adds	r3, r7, r3
   22670:	881b      	ldrh	r3, [r3, #0]
   22672:	687a      	ldr	r2, [r7, #4]
   22674:	1ad3      	subs	r3, r2, r3
   22676:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22678:	2310      	movs	r3, #16
   2267a:	18fb      	adds	r3, r7, r3
   2267c:	881b      	ldrh	r3, [r3, #0]
   2267e:	697a      	ldr	r2, [r7, #20]
   22680:	18d3      	adds	r3, r2, r3
   22682:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22684:	2310      	movs	r3, #16
   22686:	18fb      	adds	r3, r7, r3
   22688:	881b      	ldrh	r3, [r3, #0]
   2268a:	68fa      	ldr	r2, [r7, #12]
   2268c:	18d3      	adds	r3, r2, r3
   2268e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22690:	e7b8      	b.n	22604 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22692:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22694:	2313      	movs	r3, #19
   22696:	18fb      	adds	r3, r7, r3
   22698:	781b      	ldrb	r3, [r3, #0]
   2269a:	b25b      	sxtb	r3, r3
}
   2269c:	0018      	movs	r0, r3
   2269e:	46bd      	mov	sp, r7
   226a0:	b006      	add	sp, #24
   226a2:	bd80      	pop	{r7, pc}
   226a4:	2000011c 	.word	0x2000011c
   226a8:	000225b5 	.word	0x000225b5

000226ac <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   226ac:	b580      	push	{r7, lr}
   226ae:	b084      	sub	sp, #16
   226b0:	af00      	add	r7, sp, #0
   226b2:	60f8      	str	r0, [r7, #12]
   226b4:	60b9      	str	r1, [r7, #8]
   226b6:	1dbb      	adds	r3, r7, #6
   226b8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   226ba:	1dbb      	adds	r3, r7, #6
   226bc:	881a      	ldrh	r2, [r3, #0]
   226be:	68b9      	ldr	r1, [r7, #8]
   226c0:	68fb      	ldr	r3, [r7, #12]
   226c2:	0018      	movs	r0, r3
   226c4:	4b03      	ldr	r3, [pc, #12]	; (226d4 <p_nm_write_block+0x28>)
   226c6:	4798      	blx	r3
   226c8:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   226ca:	0018      	movs	r0, r3
   226cc:	46bd      	mov	sp, r7
   226ce:	b004      	add	sp, #16
   226d0:	bd80      	pop	{r7, pc}
   226d2:	46c0      	nop			; (mov r8, r8)
   226d4:	00024609 	.word	0x00024609

000226d8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   226d8:	b580      	push	{r7, lr}
   226da:	b086      	sub	sp, #24
   226dc:	af00      	add	r7, sp, #0
   226de:	60f8      	str	r0, [r7, #12]
   226e0:	60b9      	str	r1, [r7, #8]
   226e2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   226e4:	4b2d      	ldr	r3, [pc, #180]	; (2279c <nm_write_block+0xc4>)
   226e6:	881a      	ldrh	r2, [r3, #0]
   226e8:	2310      	movs	r3, #16
   226ea:	18fb      	adds	r3, r7, r3
   226ec:	3a08      	subs	r2, #8
   226ee:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   226f0:	2300      	movs	r3, #0
   226f2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   226f4:	2313      	movs	r3, #19
   226f6:	18fb      	adds	r3, r7, r3
   226f8:	2200      	movs	r2, #0
   226fa:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   226fc:	2310      	movs	r3, #16
   226fe:	18fb      	adds	r3, r7, r3
   22700:	881a      	ldrh	r2, [r3, #0]
   22702:	687b      	ldr	r3, [r7, #4]
   22704:	429a      	cmp	r2, r3
   22706:	d313      	bcc.n	22730 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22708:	68ba      	ldr	r2, [r7, #8]
   2270a:	697b      	ldr	r3, [r7, #20]
   2270c:	18d1      	adds	r1, r2, r3
   2270e:	687b      	ldr	r3, [r7, #4]
   22710:	b29a      	uxth	r2, r3
   22712:	68fb      	ldr	r3, [r7, #12]
   22714:	0018      	movs	r0, r3
   22716:	4b22      	ldr	r3, [pc, #136]	; (227a0 <nm_write_block+0xc8>)
   22718:	4798      	blx	r3
   2271a:	0003      	movs	r3, r0
   2271c:	b2da      	uxtb	r2, r3
   2271e:	2313      	movs	r3, #19
   22720:	18fb      	adds	r3, r7, r3
   22722:	781b      	ldrb	r3, [r3, #0]
   22724:	18d3      	adds	r3, r2, r3
   22726:	b2da      	uxtb	r2, r3
   22728:	2313      	movs	r3, #19
   2272a:	18fb      	adds	r3, r7, r3
   2272c:	701a      	strb	r2, [r3, #0]
			break;
   2272e:	e02d      	b.n	2278c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22730:	68ba      	ldr	r2, [r7, #8]
   22732:	697b      	ldr	r3, [r7, #20]
   22734:	18d1      	adds	r1, r2, r3
   22736:	2310      	movs	r3, #16
   22738:	18fb      	adds	r3, r7, r3
   2273a:	881a      	ldrh	r2, [r3, #0]
   2273c:	68fb      	ldr	r3, [r7, #12]
   2273e:	0018      	movs	r0, r3
   22740:	4b17      	ldr	r3, [pc, #92]	; (227a0 <nm_write_block+0xc8>)
   22742:	4798      	blx	r3
   22744:	0003      	movs	r3, r0
   22746:	b2da      	uxtb	r2, r3
   22748:	2313      	movs	r3, #19
   2274a:	18fb      	adds	r3, r7, r3
   2274c:	781b      	ldrb	r3, [r3, #0]
   2274e:	18d3      	adds	r3, r2, r3
   22750:	b2da      	uxtb	r2, r3
   22752:	2313      	movs	r3, #19
   22754:	18fb      	adds	r3, r7, r3
   22756:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22758:	2313      	movs	r3, #19
   2275a:	18fb      	adds	r3, r7, r3
   2275c:	781b      	ldrb	r3, [r3, #0]
   2275e:	b25b      	sxtb	r3, r3
   22760:	2b00      	cmp	r3, #0
   22762:	d112      	bne.n	2278a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22764:	2310      	movs	r3, #16
   22766:	18fb      	adds	r3, r7, r3
   22768:	881b      	ldrh	r3, [r3, #0]
   2276a:	687a      	ldr	r2, [r7, #4]
   2276c:	1ad3      	subs	r3, r2, r3
   2276e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22770:	2310      	movs	r3, #16
   22772:	18fb      	adds	r3, r7, r3
   22774:	881b      	ldrh	r3, [r3, #0]
   22776:	697a      	ldr	r2, [r7, #20]
   22778:	18d3      	adds	r3, r2, r3
   2277a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   2277c:	2310      	movs	r3, #16
   2277e:	18fb      	adds	r3, r7, r3
   22780:	881b      	ldrh	r3, [r3, #0]
   22782:	68fa      	ldr	r2, [r7, #12]
   22784:	18d3      	adds	r3, r2, r3
   22786:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22788:	e7b8      	b.n	226fc <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2278a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   2278c:	2313      	movs	r3, #19
   2278e:	18fb      	adds	r3, r7, r3
   22790:	781b      	ldrb	r3, [r3, #0]
   22792:	b25b      	sxtb	r3, r3
}
   22794:	0018      	movs	r0, r3
   22796:	46bd      	mov	sp, r7
   22798:	b006      	add	sp, #24
   2279a:	bd80      	pop	{r7, pc}
   2279c:	2000011c 	.word	0x2000011c
   227a0:	000226ad 	.word	0x000226ad

000227a4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   227a4:	b590      	push	{r4, r7, lr}
   227a6:	b089      	sub	sp, #36	; 0x24
   227a8:	af00      	add	r7, sp, #0
   227aa:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   227ac:	2300      	movs	r3, #0
   227ae:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   227b0:	231f      	movs	r3, #31
   227b2:	18fb      	adds	r3, r7, r3
   227b4:	2200      	movs	r2, #0
   227b6:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   227b8:	230c      	movs	r3, #12
   227ba:	18fb      	adds	r3, r7, r3
   227bc:	0018      	movs	r0, r3
   227be:	2308      	movs	r3, #8
   227c0:	001a      	movs	r2, r3
   227c2:	2100      	movs	r1, #0
   227c4:	4b64      	ldr	r3, [pc, #400]	; (22958 <nm_get_firmware_full_info+0x1b4>)
   227c6:	4798      	blx	r3
	if (pstrRev != NULL)
   227c8:	687b      	ldr	r3, [r7, #4]
   227ca:	2b00      	cmp	r3, #0
   227cc:	d100      	bne.n	227d0 <nm_get_firmware_full_info+0x2c>
   227ce:	e0ba      	b.n	22946 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   227d0:	687b      	ldr	r3, [r7, #4]
   227d2:	2228      	movs	r2, #40	; 0x28
   227d4:	2100      	movs	r1, #0
   227d6:	0018      	movs	r0, r3
   227d8:	4b60      	ldr	r3, [pc, #384]	; (2295c <nm_get_firmware_full_info+0x1b8>)
   227da:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   227dc:	231f      	movs	r3, #31
   227de:	18fc      	adds	r4, r7, r3
   227e0:	2314      	movs	r3, #20
   227e2:	18fb      	adds	r3, r7, r3
   227e4:	4a5e      	ldr	r2, [pc, #376]	; (22960 <nm_get_firmware_full_info+0x1bc>)
   227e6:	0019      	movs	r1, r3
   227e8:	0010      	movs	r0, r2
   227ea:	4b5e      	ldr	r3, [pc, #376]	; (22964 <nm_get_firmware_full_info+0x1c0>)
   227ec:	4798      	blx	r3
   227ee:	0003      	movs	r3, r0
   227f0:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   227f2:	231f      	movs	r3, #31
   227f4:	18fb      	adds	r3, r7, r3
   227f6:	781b      	ldrb	r3, [r3, #0]
   227f8:	b25b      	sxtb	r3, r3
   227fa:	2b00      	cmp	r3, #0
   227fc:	d000      	beq.n	22800 <nm_get_firmware_full_info+0x5c>
   227fe:	e0a2      	b.n	22946 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22800:	697b      	ldr	r3, [r7, #20]
   22802:	2b00      	cmp	r3, #0
   22804:	d100      	bne.n	22808 <nm_get_firmware_full_info+0x64>
   22806:	e09a      	b.n	2293e <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22808:	697b      	ldr	r3, [r7, #20]
   2280a:	22c0      	movs	r2, #192	; 0xc0
   2280c:	0292      	lsls	r2, r2, #10
   2280e:	4313      	orrs	r3, r2
   22810:	221f      	movs	r2, #31
   22812:	18bc      	adds	r4, r7, r2
   22814:	220c      	movs	r2, #12
   22816:	18b9      	adds	r1, r7, r2
   22818:	2208      	movs	r2, #8
   2281a:	0018      	movs	r0, r3
   2281c:	4b52      	ldr	r3, [pc, #328]	; (22968 <nm_get_firmware_full_info+0x1c4>)
   2281e:	4798      	blx	r3
   22820:	0003      	movs	r3, r0
   22822:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22824:	231f      	movs	r3, #31
   22826:	18fb      	adds	r3, r7, r3
   22828:	781b      	ldrb	r3, [r3, #0]
   2282a:	b25b      	sxtb	r3, r3
   2282c:	2b00      	cmp	r3, #0
   2282e:	d000      	beq.n	22832 <nm_get_firmware_full_info+0x8e>
   22830:	e089      	b.n	22946 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22832:	230c      	movs	r3, #12
   22834:	18fb      	adds	r3, r7, r3
   22836:	685b      	ldr	r3, [r3, #4]
   22838:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   2283a:	697b      	ldr	r3, [r7, #20]
   2283c:	041b      	lsls	r3, r3, #16
   2283e:	0c1b      	lsrs	r3, r3, #16
   22840:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22842:	697b      	ldr	r3, [r7, #20]
   22844:	2b00      	cmp	r3, #0
   22846:	d100      	bne.n	2284a <nm_get_firmware_full_info+0xa6>
   22848:	e074      	b.n	22934 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2284a:	697b      	ldr	r3, [r7, #20]
   2284c:	22c0      	movs	r2, #192	; 0xc0
   2284e:	0292      	lsls	r2, r2, #10
   22850:	4313      	orrs	r3, r2
   22852:	221f      	movs	r2, #31
   22854:	18bc      	adds	r4, r7, r2
   22856:	6879      	ldr	r1, [r7, #4]
   22858:	2228      	movs	r2, #40	; 0x28
   2285a:	0018      	movs	r0, r3
   2285c:	4b42      	ldr	r3, [pc, #264]	; (22968 <nm_get_firmware_full_info+0x1c4>)
   2285e:	4798      	blx	r3
   22860:	0003      	movs	r3, r0
   22862:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22864:	231f      	movs	r3, #31
   22866:	18fb      	adds	r3, r7, r3
   22868:	781b      	ldrb	r3, [r3, #0]
   2286a:	b25b      	sxtb	r3, r3
   2286c:	2b00      	cmp	r3, #0
   2286e:	d16a      	bne.n	22946 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22870:	687b      	ldr	r3, [r7, #4]
   22872:	791b      	ldrb	r3, [r3, #4]
   22874:	021b      	lsls	r3, r3, #8
   22876:	b21a      	sxth	r2, r3
   22878:	687b      	ldr	r3, [r7, #4]
   2287a:	795b      	ldrb	r3, [r3, #5]
   2287c:	011b      	lsls	r3, r3, #4
   2287e:	b21b      	sxth	r3, r3
   22880:	21ff      	movs	r1, #255	; 0xff
   22882:	400b      	ands	r3, r1
   22884:	b21b      	sxth	r3, r3
   22886:	4313      	orrs	r3, r2
   22888:	b21a      	sxth	r2, r3
   2288a:	687b      	ldr	r3, [r7, #4]
   2288c:	799b      	ldrb	r3, [r3, #6]
   2288e:	b21b      	sxth	r3, r3
   22890:	210f      	movs	r1, #15
   22892:	400b      	ands	r3, r1
   22894:	b21b      	sxth	r3, r3
   22896:	4313      	orrs	r3, r2
   22898:	b21a      	sxth	r2, r3
   2289a:	231c      	movs	r3, #28
   2289c:	18fb      	adds	r3, r7, r3
   2289e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   228a0:	231a      	movs	r3, #26
   228a2:	18fb      	adds	r3, r7, r3
   228a4:	4a31      	ldr	r2, [pc, #196]	; (2296c <nm_get_firmware_full_info+0x1c8>)
   228a6:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   228a8:	687b      	ldr	r3, [r7, #4]
   228aa:	79db      	ldrb	r3, [r3, #7]
   228ac:	021b      	lsls	r3, r3, #8
   228ae:	b21a      	sxth	r2, r3
   228b0:	687b      	ldr	r3, [r7, #4]
   228b2:	7a1b      	ldrb	r3, [r3, #8]
   228b4:	011b      	lsls	r3, r3, #4
   228b6:	b21b      	sxth	r3, r3
   228b8:	21ff      	movs	r1, #255	; 0xff
   228ba:	400b      	ands	r3, r1
   228bc:	b21b      	sxth	r3, r3
   228be:	4313      	orrs	r3, r2
   228c0:	b21a      	sxth	r2, r3
   228c2:	687b      	ldr	r3, [r7, #4]
   228c4:	7a5b      	ldrb	r3, [r3, #9]
   228c6:	b21b      	sxth	r3, r3
   228c8:	210f      	movs	r1, #15
   228ca:	400b      	ands	r3, r1
   228cc:	b21b      	sxth	r3, r3
   228ce:	4313      	orrs	r3, r2
   228d0:	b21a      	sxth	r2, r3
   228d2:	2318      	movs	r3, #24
   228d4:	18fb      	adds	r3, r7, r3
   228d6:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   228d8:	231c      	movs	r3, #28
   228da:	18fb      	adds	r3, r7, r3
   228dc:	881b      	ldrh	r3, [r3, #0]
   228de:	2b00      	cmp	r3, #0
   228e0:	d009      	beq.n	228f6 <nm_get_firmware_full_info+0x152>
   228e2:	2318      	movs	r3, #24
   228e4:	18fb      	adds	r3, r7, r3
   228e6:	881b      	ldrh	r3, [r3, #0]
   228e8:	2b00      	cmp	r3, #0
   228ea:	d004      	beq.n	228f6 <nm_get_firmware_full_info+0x152>
   228ec:	2318      	movs	r3, #24
   228ee:	18fb      	adds	r3, r7, r3
   228f0:	881b      	ldrh	r3, [r3, #0]
   228f2:	2b00      	cmp	r3, #0
   228f4:	d104      	bne.n	22900 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   228f6:	231f      	movs	r3, #31
   228f8:	18fb      	adds	r3, r7, r3
   228fa:	22f4      	movs	r2, #244	; 0xf4
   228fc:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   228fe:	e022      	b.n	22946 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22900:	231a      	movs	r3, #26
   22902:	18fa      	adds	r2, r7, r3
   22904:	2318      	movs	r3, #24
   22906:	18fb      	adds	r3, r7, r3
   22908:	8812      	ldrh	r2, [r2, #0]
   2290a:	881b      	ldrh	r3, [r3, #0]
   2290c:	429a      	cmp	r2, r3
   2290e:	d204      	bcs.n	2291a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22910:	231f      	movs	r3, #31
   22912:	18fb      	adds	r3, r7, r3
   22914:	22f3      	movs	r2, #243	; 0xf3
   22916:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22918:	e015      	b.n	22946 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   2291a:	231a      	movs	r3, #26
   2291c:	18fa      	adds	r2, r7, r3
   2291e:	231c      	movs	r3, #28
   22920:	18fb      	adds	r3, r7, r3
   22922:	8812      	ldrh	r2, [r2, #0]
   22924:	881b      	ldrh	r3, [r3, #0]
   22926:	429a      	cmp	r2, r3
   22928:	d90d      	bls.n	22946 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   2292a:	231f      	movs	r3, #31
   2292c:	18fb      	adds	r3, r7, r3
   2292e:	22f3      	movs	r2, #243	; 0xf3
   22930:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22932:	e008      	b.n	22946 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22934:	231f      	movs	r3, #31
   22936:	18fb      	adds	r3, r7, r3
   22938:	22f4      	movs	r2, #244	; 0xf4
   2293a:	701a      	strb	r2, [r3, #0]
   2293c:	e003      	b.n	22946 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   2293e:	231f      	movs	r3, #31
   22940:	18fb      	adds	r3, r7, r3
   22942:	22f4      	movs	r2, #244	; 0xf4
   22944:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22946:	231f      	movs	r3, #31
   22948:	18fb      	adds	r3, r7, r3
   2294a:	781b      	ldrb	r3, [r3, #0]
   2294c:	b25b      	sxtb	r3, r3
}
   2294e:	0018      	movs	r0, r3
   22950:	46bd      	mov	sp, r7
   22952:	b009      	add	sp, #36	; 0x24
   22954:	bd90      	pop	{r4, r7, pc}
   22956:	46c0      	nop			; (mov r8, r8)
   22958:	00034317 	.word	0x00034317
   2295c:	000204dd 	.word	0x000204dd
   22960:	000c0008 	.word	0x000c0008
   22964:	0002256d 	.word	0x0002256d
   22968:	000225e1 	.word	0x000225e1
   2296c:	00001354 	.word	0x00001354

00022970 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22970:	b590      	push	{r4, r7, lr}
   22972:	b085      	sub	sp, #20
   22974:	af00      	add	r7, sp, #0
   22976:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22978:	230f      	movs	r3, #15
   2297a:	18fb      	adds	r3, r7, r3
   2297c:	2200      	movs	r2, #0
   2297e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22980:	687b      	ldr	r3, [r7, #4]
   22982:	2b00      	cmp	r3, #0
   22984:	d013      	beq.n	229ae <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22986:	230e      	movs	r3, #14
   22988:	18fb      	adds	r3, r7, r3
   2298a:	687a      	ldr	r2, [r7, #4]
   2298c:	7812      	ldrb	r2, [r2, #0]
   2298e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22990:	230e      	movs	r3, #14
   22992:	18fb      	adds	r3, r7, r3
   22994:	781b      	ldrb	r3, [r3, #0]
   22996:	2b00      	cmp	r3, #0
   22998:	d004      	beq.n	229a4 <nm_drv_init+0x34>
   2299a:	230e      	movs	r3, #14
   2299c:	18fb      	adds	r3, r7, r3
   2299e:	781b      	ldrb	r3, [r3, #0]
   229a0:	2b04      	cmp	r3, #4
   229a2:	d908      	bls.n	229b6 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   229a4:	230e      	movs	r3, #14
   229a6:	18fb      	adds	r3, r7, r3
   229a8:	2201      	movs	r2, #1
   229aa:	701a      	strb	r2, [r3, #0]
   229ac:	e003      	b.n	229b6 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   229ae:	230e      	movs	r3, #14
   229b0:	18fb      	adds	r3, r7, r3
   229b2:	2201      	movs	r2, #1
   229b4:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   229b6:	230f      	movs	r3, #15
   229b8:	18fc      	adds	r4, r7, r3
   229ba:	2000      	movs	r0, #0
   229bc:	4b41      	ldr	r3, [pc, #260]	; (22ac4 <nm_drv_init+0x154>)
   229be:	4798      	blx	r3
   229c0:	0003      	movs	r3, r0
   229c2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   229c4:	230f      	movs	r3, #15
   229c6:	18fb      	adds	r3, r7, r3
   229c8:	781b      	ldrb	r3, [r3, #0]
   229ca:	b25b      	sxtb	r3, r3
   229cc:	2b00      	cmp	r3, #0
   229ce:	d00f      	beq.n	229f0 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   229d0:	2390      	movs	r3, #144	; 0x90
   229d2:	005a      	lsls	r2, r3, #1
   229d4:	493c      	ldr	r1, [pc, #240]	; (22ac8 <nm_drv_init+0x158>)
   229d6:	4b3d      	ldr	r3, [pc, #244]	; (22acc <nm_drv_init+0x15c>)
   229d8:	0018      	movs	r0, r3
   229da:	4b3d      	ldr	r3, [pc, #244]	; (22ad0 <nm_drv_init+0x160>)
   229dc:	4798      	blx	r3
   229de:	4b3d      	ldr	r3, [pc, #244]	; (22ad4 <nm_drv_init+0x164>)
   229e0:	0018      	movs	r0, r3
   229e2:	4b3b      	ldr	r3, [pc, #236]	; (22ad0 <nm_drv_init+0x160>)
   229e4:	4798      	blx	r3
   229e6:	4b3c      	ldr	r3, [pc, #240]	; (22ad8 <nm_drv_init+0x168>)
   229e8:	0018      	movs	r0, r3
   229ea:	4b39      	ldr	r3, [pc, #228]	; (22ad0 <nm_drv_init+0x160>)
   229ec:	4798      	blx	r3
		goto ERR1;
   229ee:	e061      	b.n	22ab4 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   229f0:	4b3a      	ldr	r3, [pc, #232]	; (22adc <nm_drv_init+0x16c>)
   229f2:	0018      	movs	r0, r3
   229f4:	4b36      	ldr	r3, [pc, #216]	; (22ad0 <nm_drv_init+0x160>)
   229f6:	4798      	blx	r3
   229f8:	4b39      	ldr	r3, [pc, #228]	; (22ae0 <nm_drv_init+0x170>)
   229fa:	4798      	blx	r3
   229fc:	0002      	movs	r2, r0
   229fe:	4b39      	ldr	r3, [pc, #228]	; (22ae4 <nm_drv_init+0x174>)
   22a00:	0011      	movs	r1, r2
   22a02:	0018      	movs	r0, r3
   22a04:	4b32      	ldr	r3, [pc, #200]	; (22ad0 <nm_drv_init+0x160>)
   22a06:	4798      	blx	r3
   22a08:	4b33      	ldr	r3, [pc, #204]	; (22ad8 <nm_drv_init+0x168>)
   22a0a:	0018      	movs	r0, r3
   22a0c:	4b30      	ldr	r3, [pc, #192]	; (22ad0 <nm_drv_init+0x160>)
   22a0e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22a10:	4b35      	ldr	r3, [pc, #212]	; (22ae8 <nm_drv_init+0x178>)
   22a12:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22a14:	230f      	movs	r3, #15
   22a16:	18fc      	adds	r4, r7, r3
   22a18:	230e      	movs	r3, #14
   22a1a:	18fb      	adds	r3, r7, r3
   22a1c:	781b      	ldrb	r3, [r3, #0]
   22a1e:	0018      	movs	r0, r3
   22a20:	4b32      	ldr	r3, [pc, #200]	; (22aec <nm_drv_init+0x17c>)
   22a22:	4798      	blx	r3
   22a24:	0003      	movs	r3, r0
   22a26:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22a28:	230f      	movs	r3, #15
   22a2a:	18fb      	adds	r3, r7, r3
   22a2c:	781b      	ldrb	r3, [r3, #0]
   22a2e:	b25b      	sxtb	r3, r3
   22a30:	2b00      	cmp	r3, #0
   22a32:	d13a      	bne.n	22aaa <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22a34:	230f      	movs	r3, #15
   22a36:	18fc      	adds	r4, r7, r3
   22a38:	230e      	movs	r3, #14
   22a3a:	18fb      	adds	r3, r7, r3
   22a3c:	781b      	ldrb	r3, [r3, #0]
   22a3e:	0018      	movs	r0, r3
   22a40:	4b2b      	ldr	r3, [pc, #172]	; (22af0 <nm_drv_init+0x180>)
   22a42:	4798      	blx	r3
   22a44:	0003      	movs	r3, r0
   22a46:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22a48:	230f      	movs	r3, #15
   22a4a:	18fb      	adds	r3, r7, r3
   22a4c:	781b      	ldrb	r3, [r3, #0]
   22a4e:	b25b      	sxtb	r3, r3
   22a50:	2b00      	cmp	r3, #0
   22a52:	d12c      	bne.n	22aae <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22a54:	230e      	movs	r3, #14
   22a56:	18fb      	adds	r3, r7, r3
   22a58:	781b      	ldrb	r3, [r3, #0]
   22a5a:	2b02      	cmp	r3, #2
   22a5c:	d02a      	beq.n	22ab4 <nm_drv_init+0x144>
   22a5e:	230e      	movs	r3, #14
   22a60:	18fb      	adds	r3, r7, r3
   22a62:	781b      	ldrb	r3, [r3, #0]
   22a64:	2b03      	cmp	r3, #3
   22a66:	d025      	beq.n	22ab4 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   22a68:	230f      	movs	r3, #15
   22a6a:	18fc      	adds	r4, r7, r3
   22a6c:	4b21      	ldr	r3, [pc, #132]	; (22af4 <nm_drv_init+0x184>)
   22a6e:	4798      	blx	r3
   22a70:	0003      	movs	r3, r0
   22a72:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22a74:	230f      	movs	r3, #15
   22a76:	18fb      	adds	r3, r7, r3
   22a78:	781b      	ldrb	r3, [r3, #0]
   22a7a:	b25b      	sxtb	r3, r3
   22a7c:	2b00      	cmp	r3, #0
   22a7e:	d00f      	beq.n	22aa0 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22a80:	23a7      	movs	r3, #167	; 0xa7
   22a82:	005a      	lsls	r2, r3, #1
   22a84:	4910      	ldr	r1, [pc, #64]	; (22ac8 <nm_drv_init+0x158>)
   22a86:	4b11      	ldr	r3, [pc, #68]	; (22acc <nm_drv_init+0x15c>)
   22a88:	0018      	movs	r0, r3
   22a8a:	4b11      	ldr	r3, [pc, #68]	; (22ad0 <nm_drv_init+0x160>)
   22a8c:	4798      	blx	r3
   22a8e:	4b1a      	ldr	r3, [pc, #104]	; (22af8 <nm_drv_init+0x188>)
   22a90:	0018      	movs	r0, r3
   22a92:	4b0f      	ldr	r3, [pc, #60]	; (22ad0 <nm_drv_init+0x160>)
   22a94:	4798      	blx	r3
   22a96:	4b10      	ldr	r3, [pc, #64]	; (22ad8 <nm_drv_init+0x168>)
   22a98:	0018      	movs	r0, r3
   22a9a:	4b0d      	ldr	r3, [pc, #52]	; (22ad0 <nm_drv_init+0x160>)
   22a9c:	4798      	blx	r3
		goto ERR2;
   22a9e:	e007      	b.n	22ab0 <nm_drv_init+0x140>
	}
	return ret;
   22aa0:	230f      	movs	r3, #15
   22aa2:	18fb      	adds	r3, r7, r3
   22aa4:	781b      	ldrb	r3, [r3, #0]
   22aa6:	b25b      	sxtb	r3, r3
   22aa8:	e008      	b.n	22abc <nm_drv_init+0x14c>
		goto ERR2;
   22aaa:	46c0      	nop			; (mov r8, r8)
   22aac:	e000      	b.n	22ab0 <nm_drv_init+0x140>
		goto ERR2;
   22aae:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   22ab0:	4b12      	ldr	r3, [pc, #72]	; (22afc <nm_drv_init+0x18c>)
   22ab2:	4798      	blx	r3
ERR1:
	return ret;
   22ab4:	230f      	movs	r3, #15
   22ab6:	18fb      	adds	r3, r7, r3
   22ab8:	781b      	ldrb	r3, [r3, #0]
   22aba:	b25b      	sxtb	r3, r3
}
   22abc:	0018      	movs	r0, r3
   22abe:	46bd      	mov	sp, r7
   22ac0:	b005      	add	sp, #20
   22ac2:	bd90      	pop	{r4, r7, pc}
   22ac4:	000224d1 	.word	0x000224d1
   22ac8:	00038524 	.word	0x00038524
   22acc:	00038454 	.word	0x00038454
   22ad0:	0001d7a9 	.word	0x0001d7a9
   22ad4:	00038468 	.word	0x00038468
   22ad8:	00038484 	.word	0x00038484
   22adc:	00038488 	.word	0x00038488
   22ae0:	00021e6d 	.word	0x00021e6d
   22ae4:	00038494 	.word	0x00038494
   22ae8:	00024389 	.word	0x00024389
   22aec:	000221c5 	.word	0x000221c5
   22af0:	0002235d 	.word	0x0002235d
   22af4:	00021db9 	.word	0x00021db9
   22af8:	000384a4 	.word	0x000384a4
   22afc:	00022505 	.word	0x00022505

00022b00 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22b00:	b590      	push	{r4, r7, lr}
   22b02:	b085      	sub	sp, #20
   22b04:	af00      	add	r7, sp, #0
   22b06:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   22b08:	230f      	movs	r3, #15
   22b0a:	18fc      	adds	r4, r7, r3
   22b0c:	4b2e      	ldr	r3, [pc, #184]	; (22bc8 <nm_drv_deinit+0xc8>)
   22b0e:	4798      	blx	r3
   22b10:	0003      	movs	r3, r0
   22b12:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b14:	230f      	movs	r3, #15
   22b16:	18fb      	adds	r3, r7, r3
   22b18:	781b      	ldrb	r3, [r3, #0]
   22b1a:	b25b      	sxtb	r3, r3
   22b1c:	2b00      	cmp	r3, #0
   22b1e:	d010      	beq.n	22b42 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22b20:	2366      	movs	r3, #102	; 0x66
   22b22:	33ff      	adds	r3, #255	; 0xff
   22b24:	001a      	movs	r2, r3
   22b26:	4929      	ldr	r1, [pc, #164]	; (22bcc <nm_drv_deinit+0xcc>)
   22b28:	4b29      	ldr	r3, [pc, #164]	; (22bd0 <nm_drv_deinit+0xd0>)
   22b2a:	0018      	movs	r0, r3
   22b2c:	4b29      	ldr	r3, [pc, #164]	; (22bd4 <nm_drv_deinit+0xd4>)
   22b2e:	4798      	blx	r3
   22b30:	4b29      	ldr	r3, [pc, #164]	; (22bd8 <nm_drv_deinit+0xd8>)
   22b32:	0018      	movs	r0, r3
   22b34:	4b27      	ldr	r3, [pc, #156]	; (22bd4 <nm_drv_deinit+0xd4>)
   22b36:	4798      	blx	r3
   22b38:	4b28      	ldr	r3, [pc, #160]	; (22bdc <nm_drv_deinit+0xdc>)
   22b3a:	0018      	movs	r0, r3
   22b3c:	4b25      	ldr	r3, [pc, #148]	; (22bd4 <nm_drv_deinit+0xd4>)
   22b3e:	4798      	blx	r3
		goto ERR1;
   22b40:	e03a      	b.n	22bb8 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22b42:	230f      	movs	r3, #15
   22b44:	18fc      	adds	r4, r7, r3
   22b46:	2000      	movs	r0, #0
   22b48:	4b25      	ldr	r3, [pc, #148]	; (22be0 <nm_drv_deinit+0xe0>)
   22b4a:	4798      	blx	r3
   22b4c:	0003      	movs	r3, r0
   22b4e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b50:	230f      	movs	r3, #15
   22b52:	18fb      	adds	r3, r7, r3
   22b54:	781b      	ldrb	r3, [r3, #0]
   22b56:	b25b      	sxtb	r3, r3
   22b58:	2b00      	cmp	r3, #0
   22b5a:	d00f      	beq.n	22b7c <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22b5c:	23b6      	movs	r3, #182	; 0xb6
   22b5e:	005a      	lsls	r2, r3, #1
   22b60:	491a      	ldr	r1, [pc, #104]	; (22bcc <nm_drv_deinit+0xcc>)
   22b62:	4b1b      	ldr	r3, [pc, #108]	; (22bd0 <nm_drv_deinit+0xd0>)
   22b64:	0018      	movs	r0, r3
   22b66:	4b1b      	ldr	r3, [pc, #108]	; (22bd4 <nm_drv_deinit+0xd4>)
   22b68:	4798      	blx	r3
   22b6a:	4b1e      	ldr	r3, [pc, #120]	; (22be4 <nm_drv_deinit+0xe4>)
   22b6c:	0018      	movs	r0, r3
   22b6e:	4b19      	ldr	r3, [pc, #100]	; (22bd4 <nm_drv_deinit+0xd4>)
   22b70:	4798      	blx	r3
   22b72:	4b1a      	ldr	r3, [pc, #104]	; (22bdc <nm_drv_deinit+0xdc>)
   22b74:	0018      	movs	r0, r3
   22b76:	4b17      	ldr	r3, [pc, #92]	; (22bd4 <nm_drv_deinit+0xd4>)
   22b78:	4798      	blx	r3
		goto ERR1;
   22b7a:	e01d      	b.n	22bb8 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22b7c:	230f      	movs	r3, #15
   22b7e:	18fc      	adds	r4, r7, r3
   22b80:	4b19      	ldr	r3, [pc, #100]	; (22be8 <nm_drv_deinit+0xe8>)
   22b82:	4798      	blx	r3
   22b84:	0003      	movs	r3, r0
   22b86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b88:	230f      	movs	r3, #15
   22b8a:	18fb      	adds	r3, r7, r3
   22b8c:	781b      	ldrb	r3, [r3, #0]
   22b8e:	b25b      	sxtb	r3, r3
   22b90:	2b00      	cmp	r3, #0
   22b92:	d00f      	beq.n	22bb4 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22b94:	23b9      	movs	r3, #185	; 0xb9
   22b96:	005a      	lsls	r2, r3, #1
   22b98:	490c      	ldr	r1, [pc, #48]	; (22bcc <nm_drv_deinit+0xcc>)
   22b9a:	4b0d      	ldr	r3, [pc, #52]	; (22bd0 <nm_drv_deinit+0xd0>)
   22b9c:	0018      	movs	r0, r3
   22b9e:	4b0d      	ldr	r3, [pc, #52]	; (22bd4 <nm_drv_deinit+0xd4>)
   22ba0:	4798      	blx	r3
   22ba2:	4b12      	ldr	r3, [pc, #72]	; (22bec <nm_drv_deinit+0xec>)
   22ba4:	0018      	movs	r0, r3
   22ba6:	4b0b      	ldr	r3, [pc, #44]	; (22bd4 <nm_drv_deinit+0xd4>)
   22ba8:	4798      	blx	r3
   22baa:	4b0c      	ldr	r3, [pc, #48]	; (22bdc <nm_drv_deinit+0xdc>)
   22bac:	0018      	movs	r0, r3
   22bae:	4b09      	ldr	r3, [pc, #36]	; (22bd4 <nm_drv_deinit+0xd4>)
   22bb0:	4798      	blx	r3
		goto ERR1;
   22bb2:	e001      	b.n	22bb8 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22bb4:	4b0e      	ldr	r3, [pc, #56]	; (22bf0 <nm_drv_deinit+0xf0>)
   22bb6:	4798      	blx	r3
#endif

ERR1:
	return ret;
   22bb8:	230f      	movs	r3, #15
   22bba:	18fb      	adds	r3, r7, r3
   22bbc:	781b      	ldrb	r3, [r3, #0]
   22bbe:	b25b      	sxtb	r3, r3
}
   22bc0:	0018      	movs	r0, r3
   22bc2:	46bd      	mov	sp, r7
   22bc4:	b005      	add	sp, #20
   22bc6:	bd90      	pop	{r4, r7, pc}
   22bc8:	00022411 	.word	0x00022411
   22bcc:	00038530 	.word	0x00038530
   22bd0:	00038454 	.word	0x00038454
   22bd4:	0001d7a9 	.word	0x0001d7a9
   22bd8:	000384c4 	.word	0x000384c4
   22bdc:	00038484 	.word	0x00038484
   22be0:	00025831 	.word	0x00025831
   22be4:	000384e4 	.word	0x000384e4
   22be8:	00022505 	.word	0x00022505
   22bec:	00038508 	.word	0x00038508
   22bf0:	000244d5 	.word	0x000244d5

00022bf4 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22bf4:	b580      	push	{r7, lr}
   22bf6:	b086      	sub	sp, #24
   22bf8:	af00      	add	r7, sp, #0
   22bfa:	6078      	str	r0, [r7, #4]
   22bfc:	000a      	movs	r2, r1
   22bfe:	1cbb      	adds	r3, r7, #2
   22c00:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22c02:	230c      	movs	r3, #12
   22c04:	18fb      	adds	r3, r7, r3
   22c06:	2200      	movs	r2, #0
   22c08:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   22c0a:	230c      	movs	r3, #12
   22c0c:	18fb      	adds	r3, r7, r3
   22c0e:	687a      	ldr	r2, [r7, #4]
   22c10:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22c12:	230c      	movs	r3, #12
   22c14:	18fb      	adds	r3, r7, r3
   22c16:	1cba      	adds	r2, r7, #2
   22c18:	8812      	ldrh	r2, [r2, #0]
   22c1a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22c1c:	230c      	movs	r3, #12
   22c1e:	18fb      	adds	r3, r7, r3
   22c20:	0019      	movs	r1, r3
   22c22:	2003      	movs	r0, #3
   22c24:	4b03      	ldr	r3, [pc, #12]	; (22c34 <nmi_spi_read+0x40>)
   22c26:	4798      	blx	r3
   22c28:	0003      	movs	r3, r0
}
   22c2a:	0018      	movs	r0, r3
   22c2c:	46bd      	mov	sp, r7
   22c2e:	b006      	add	sp, #24
   22c30:	bd80      	pop	{r7, pc}
   22c32:	46c0      	nop			; (mov r8, r8)
   22c34:	000203a1 	.word	0x000203a1

00022c38 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   22c38:	b580      	push	{r7, lr}
   22c3a:	b086      	sub	sp, #24
   22c3c:	af00      	add	r7, sp, #0
   22c3e:	6078      	str	r0, [r7, #4]
   22c40:	000a      	movs	r2, r1
   22c42:	1cbb      	adds	r3, r7, #2
   22c44:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   22c46:	230c      	movs	r3, #12
   22c48:	18fb      	adds	r3, r7, r3
   22c4a:	687a      	ldr	r2, [r7, #4]
   22c4c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   22c4e:	230c      	movs	r3, #12
   22c50:	18fb      	adds	r3, r7, r3
   22c52:	2200      	movs	r2, #0
   22c54:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22c56:	230c      	movs	r3, #12
   22c58:	18fb      	adds	r3, r7, r3
   22c5a:	1cba      	adds	r2, r7, #2
   22c5c:	8812      	ldrh	r2, [r2, #0]
   22c5e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22c60:	230c      	movs	r3, #12
   22c62:	18fb      	adds	r3, r7, r3
   22c64:	0019      	movs	r1, r3
   22c66:	2003      	movs	r0, #3
   22c68:	4b03      	ldr	r3, [pc, #12]	; (22c78 <nmi_spi_write+0x40>)
   22c6a:	4798      	blx	r3
   22c6c:	0003      	movs	r3, r0
}
   22c6e:	0018      	movs	r0, r3
   22c70:	46bd      	mov	sp, r7
   22c72:	b006      	add	sp, #24
   22c74:	bd80      	pop	{r7, pc}
   22c76:	46c0      	nop			; (mov r8, r8)
   22c78:	000203a1 	.word	0x000203a1

00022c7c <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22c7c:	b580      	push	{r7, lr}
   22c7e:	b088      	sub	sp, #32
   22c80:	af00      	add	r7, sp, #0
   22c82:	60f8      	str	r0, [r7, #12]
   22c84:	60b9      	str	r1, [r7, #8]
   22c86:	1dbb      	adds	r3, r7, #6
   22c88:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   22c8a:	2314      	movs	r3, #20
   22c8c:	18fb      	adds	r3, r7, r3
   22c8e:	68fa      	ldr	r2, [r7, #12]
   22c90:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   22c92:	2314      	movs	r3, #20
   22c94:	18fb      	adds	r3, r7, r3
   22c96:	68ba      	ldr	r2, [r7, #8]
   22c98:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22c9a:	2314      	movs	r3, #20
   22c9c:	18fb      	adds	r3, r7, r3
   22c9e:	1dba      	adds	r2, r7, #6
   22ca0:	8812      	ldrh	r2, [r2, #0]
   22ca2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   22ca4:	2314      	movs	r3, #20
   22ca6:	18fb      	adds	r3, r7, r3
   22ca8:	0019      	movs	r1, r3
   22caa:	2003      	movs	r0, #3
   22cac:	4b03      	ldr	r3, [pc, #12]	; (22cbc <nmi_spi_rw+0x40>)
   22cae:	4798      	blx	r3
   22cb0:	0003      	movs	r3, r0
}
   22cb2:	0018      	movs	r0, r3
   22cb4:	46bd      	mov	sp, r7
   22cb6:	b008      	add	sp, #32
   22cb8:	bd80      	pop	{r7, pc}
   22cba:	46c0      	nop			; (mov r8, r8)
   22cbc:	000203a1 	.word	0x000203a1

00022cc0 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   22cc0:	b580      	push	{r7, lr}
   22cc2:	b082      	sub	sp, #8
   22cc4:	af00      	add	r7, sp, #0
   22cc6:	0002      	movs	r2, r0
   22cc8:	1dfb      	adds	r3, r7, #7
   22cca:	701a      	strb	r2, [r3, #0]
   22ccc:	1dbb      	adds	r3, r7, #6
   22cce:	1c0a      	adds	r2, r1, #0
   22cd0:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   22cd2:	1dfb      	adds	r3, r7, #7
   22cd4:	781b      	ldrb	r3, [r3, #0]
   22cd6:	005a      	lsls	r2, r3, #1
   22cd8:	1dbb      	adds	r3, r7, #6
   22cda:	781b      	ldrb	r3, [r3, #0]
   22cdc:	4053      	eors	r3, r2
   22cde:	4a03      	ldr	r2, [pc, #12]	; (22cec <crc7_byte+0x2c>)
   22ce0:	5cd3      	ldrb	r3, [r2, r3]
}
   22ce2:	0018      	movs	r0, r3
   22ce4:	46bd      	mov	sp, r7
   22ce6:	b002      	add	sp, #8
   22ce8:	bd80      	pop	{r7, pc}
   22cea:	46c0      	nop			; (mov r8, r8)
   22cec:	00038540 	.word	0x00038540

00022cf0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   22cf0:	b590      	push	{r4, r7, lr}
   22cf2:	b085      	sub	sp, #20
   22cf4:	af00      	add	r7, sp, #0
   22cf6:	60b9      	str	r1, [r7, #8]
   22cf8:	607a      	str	r2, [r7, #4]
   22cfa:	230f      	movs	r3, #15
   22cfc:	18fb      	adds	r3, r7, r3
   22cfe:	1c02      	adds	r2, r0, #0
   22d00:	701a      	strb	r2, [r3, #0]
	while (len--)
   22d02:	e00e      	b.n	22d22 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   22d04:	68bb      	ldr	r3, [r7, #8]
   22d06:	1c5a      	adds	r2, r3, #1
   22d08:	60ba      	str	r2, [r7, #8]
   22d0a:	781a      	ldrb	r2, [r3, #0]
   22d0c:	230f      	movs	r3, #15
   22d0e:	18fc      	adds	r4, r7, r3
   22d10:	230f      	movs	r3, #15
   22d12:	18fb      	adds	r3, r7, r3
   22d14:	781b      	ldrb	r3, [r3, #0]
   22d16:	0011      	movs	r1, r2
   22d18:	0018      	movs	r0, r3
   22d1a:	4b08      	ldr	r3, [pc, #32]	; (22d3c <crc7+0x4c>)
   22d1c:	4798      	blx	r3
   22d1e:	0003      	movs	r3, r0
   22d20:	7023      	strb	r3, [r4, #0]
	while (len--)
   22d22:	687b      	ldr	r3, [r7, #4]
   22d24:	1e5a      	subs	r2, r3, #1
   22d26:	607a      	str	r2, [r7, #4]
   22d28:	2b00      	cmp	r3, #0
   22d2a:	d1eb      	bne.n	22d04 <crc7+0x14>
	return crc;
   22d2c:	230f      	movs	r3, #15
   22d2e:	18fb      	adds	r3, r7, r3
   22d30:	781b      	ldrb	r3, [r3, #0]
}
   22d32:	0018      	movs	r0, r3
   22d34:	46bd      	mov	sp, r7
   22d36:	b005      	add	sp, #20
   22d38:	bd90      	pop	{r4, r7, pc}
   22d3a:	46c0      	nop			; (mov r8, r8)
   22d3c:	00022cc1 	.word	0x00022cc1

00022d40 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   22d40:	b590      	push	{r4, r7, lr}
   22d42:	b089      	sub	sp, #36	; 0x24
   22d44:	af00      	add	r7, sp, #0
   22d46:	60b9      	str	r1, [r7, #8]
   22d48:	607a      	str	r2, [r7, #4]
   22d4a:	603b      	str	r3, [r7, #0]
   22d4c:	230f      	movs	r3, #15
   22d4e:	18fb      	adds	r3, r7, r3
   22d50:	1c02      	adds	r2, r0, #0
   22d52:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22d54:	231f      	movs	r3, #31
   22d56:	18fb      	adds	r3, r7, r3
   22d58:	2205      	movs	r2, #5
   22d5a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22d5c:	231e      	movs	r3, #30
   22d5e:	18fb      	adds	r3, r7, r3
   22d60:	2201      	movs	r2, #1
   22d62:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22d64:	2314      	movs	r3, #20
   22d66:	18fb      	adds	r3, r7, r3
   22d68:	220f      	movs	r2, #15
   22d6a:	18ba      	adds	r2, r7, r2
   22d6c:	7812      	ldrb	r2, [r2, #0]
   22d6e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22d70:	230f      	movs	r3, #15
   22d72:	18fb      	adds	r3, r7, r3
   22d74:	781b      	ldrb	r3, [r3, #0]
   22d76:	3bc1      	subs	r3, #193	; 0xc1
   22d78:	2b0e      	cmp	r3, #14
   22d7a:	d900      	bls.n	22d7e <spi_cmd+0x3e>
   22d7c:	e11b      	b.n	22fb6 <spi_cmd+0x276>
   22d7e:	009a      	lsls	r2, r3, #2
   22d80:	4bb6      	ldr	r3, [pc, #728]	; (2305c <spi_cmd+0x31c>)
   22d82:	18d3      	adds	r3, r2, r3
   22d84:	681b      	ldr	r3, [r3, #0]
   22d86:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   22d88:	68bb      	ldr	r3, [r7, #8]
   22d8a:	0c1b      	lsrs	r3, r3, #16
   22d8c:	b2da      	uxtb	r2, r3
   22d8e:	2314      	movs	r3, #20
   22d90:	18fb      	adds	r3, r7, r3
   22d92:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22d94:	68bb      	ldr	r3, [r7, #8]
   22d96:	0a1b      	lsrs	r3, r3, #8
   22d98:	b2da      	uxtb	r2, r3
   22d9a:	2314      	movs	r3, #20
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22da0:	68bb      	ldr	r3, [r7, #8]
   22da2:	b2da      	uxtb	r2, r3
   22da4:	2314      	movs	r3, #20
   22da6:	18fb      	adds	r3, r7, r3
   22da8:	70da      	strb	r2, [r3, #3]
		len = 5;
   22daa:	231f      	movs	r3, #31
   22dac:	18fb      	adds	r3, r7, r3
   22dae:	2205      	movs	r2, #5
   22db0:	701a      	strb	r2, [r3, #0]
		break;
   22db2:	e105      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   22db4:	68bb      	ldr	r3, [r7, #8]
   22db6:	0a1b      	lsrs	r3, r3, #8
   22db8:	b2da      	uxtb	r2, r3
   22dba:	2314      	movs	r3, #20
   22dbc:	18fb      	adds	r3, r7, r3
   22dbe:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22dc0:	2330      	movs	r3, #48	; 0x30
   22dc2:	18fb      	adds	r3, r7, r3
   22dc4:	781b      	ldrb	r3, [r3, #0]
   22dc6:	2b00      	cmp	r3, #0
   22dc8:	d009      	beq.n	22dde <spi_cmd+0x9e>
   22dca:	2314      	movs	r3, #20
   22dcc:	18fb      	adds	r3, r7, r3
   22dce:	785b      	ldrb	r3, [r3, #1]
   22dd0:	2280      	movs	r2, #128	; 0x80
   22dd2:	4252      	negs	r2, r2
   22dd4:	4313      	orrs	r3, r2
   22dd6:	b2da      	uxtb	r2, r3
   22dd8:	2314      	movs	r3, #20
   22dda:	18fb      	adds	r3, r7, r3
   22ddc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   22dde:	68bb      	ldr	r3, [r7, #8]
   22de0:	b2da      	uxtb	r2, r3
   22de2:	2314      	movs	r3, #20
   22de4:	18fb      	adds	r3, r7, r3
   22de6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22de8:	2314      	movs	r3, #20
   22dea:	18fb      	adds	r3, r7, r3
   22dec:	2200      	movs	r2, #0
   22dee:	70da      	strb	r2, [r3, #3]
		len = 5;
   22df0:	231f      	movs	r3, #31
   22df2:	18fb      	adds	r3, r7, r3
   22df4:	2205      	movs	r2, #5
   22df6:	701a      	strb	r2, [r3, #0]
		break;
   22df8:	e0e2      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   22dfa:	2314      	movs	r3, #20
   22dfc:	18fb      	adds	r3, r7, r3
   22dfe:	2200      	movs	r2, #0
   22e00:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22e02:	2314      	movs	r3, #20
   22e04:	18fb      	adds	r3, r7, r3
   22e06:	2200      	movs	r2, #0
   22e08:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22e0a:	2314      	movs	r3, #20
   22e0c:	18fb      	adds	r3, r7, r3
   22e0e:	2200      	movs	r2, #0
   22e10:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e12:	231f      	movs	r3, #31
   22e14:	18fb      	adds	r3, r7, r3
   22e16:	2205      	movs	r2, #5
   22e18:	701a      	strb	r2, [r3, #0]
		break;
   22e1a:	e0d1      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   22e1c:	2314      	movs	r3, #20
   22e1e:	18fb      	adds	r3, r7, r3
   22e20:	2200      	movs	r2, #0
   22e22:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22e24:	2314      	movs	r3, #20
   22e26:	18fb      	adds	r3, r7, r3
   22e28:	2200      	movs	r2, #0
   22e2a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22e2c:	2314      	movs	r3, #20
   22e2e:	18fb      	adds	r3, r7, r3
   22e30:	2200      	movs	r2, #0
   22e32:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e34:	231f      	movs	r3, #31
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	2205      	movs	r2, #5
   22e3a:	701a      	strb	r2, [r3, #0]
		break;
   22e3c:	e0c0      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   22e3e:	2314      	movs	r3, #20
   22e40:	18fb      	adds	r3, r7, r3
   22e42:	22ff      	movs	r2, #255	; 0xff
   22e44:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   22e46:	2314      	movs	r3, #20
   22e48:	18fb      	adds	r3, r7, r3
   22e4a:	22ff      	movs	r2, #255	; 0xff
   22e4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   22e4e:	2314      	movs	r3, #20
   22e50:	18fb      	adds	r3, r7, r3
   22e52:	22ff      	movs	r2, #255	; 0xff
   22e54:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e56:	231f      	movs	r3, #31
   22e58:	18fb      	adds	r3, r7, r3
   22e5a:	2205      	movs	r2, #5
   22e5c:	701a      	strb	r2, [r3, #0]
		break;
   22e5e:	e0af      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   22e60:	68bb      	ldr	r3, [r7, #8]
   22e62:	0c1b      	lsrs	r3, r3, #16
   22e64:	b2da      	uxtb	r2, r3
   22e66:	2314      	movs	r3, #20
   22e68:	18fb      	adds	r3, r7, r3
   22e6a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22e6c:	68bb      	ldr	r3, [r7, #8]
   22e6e:	0a1b      	lsrs	r3, r3, #8
   22e70:	b2da      	uxtb	r2, r3
   22e72:	2314      	movs	r3, #20
   22e74:	18fb      	adds	r3, r7, r3
   22e76:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22e78:	68bb      	ldr	r3, [r7, #8]
   22e7a:	b2da      	uxtb	r2, r3
   22e7c:	2314      	movs	r3, #20
   22e7e:	18fb      	adds	r3, r7, r3
   22e80:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   22e82:	683b      	ldr	r3, [r7, #0]
   22e84:	0a1b      	lsrs	r3, r3, #8
   22e86:	b2da      	uxtb	r2, r3
   22e88:	2314      	movs	r3, #20
   22e8a:	18fb      	adds	r3, r7, r3
   22e8c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   22e8e:	683b      	ldr	r3, [r7, #0]
   22e90:	b2da      	uxtb	r2, r3
   22e92:	2314      	movs	r3, #20
   22e94:	18fb      	adds	r3, r7, r3
   22e96:	715a      	strb	r2, [r3, #5]
		len = 7;
   22e98:	231f      	movs	r3, #31
   22e9a:	18fb      	adds	r3, r7, r3
   22e9c:	2207      	movs	r2, #7
   22e9e:	701a      	strb	r2, [r3, #0]
		break;
   22ea0:	e08e      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   22ea2:	68bb      	ldr	r3, [r7, #8]
   22ea4:	0c1b      	lsrs	r3, r3, #16
   22ea6:	b2da      	uxtb	r2, r3
   22ea8:	2314      	movs	r3, #20
   22eaa:	18fb      	adds	r3, r7, r3
   22eac:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22eae:	68bb      	ldr	r3, [r7, #8]
   22eb0:	0a1b      	lsrs	r3, r3, #8
   22eb2:	b2da      	uxtb	r2, r3
   22eb4:	2314      	movs	r3, #20
   22eb6:	18fb      	adds	r3, r7, r3
   22eb8:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22eba:	68bb      	ldr	r3, [r7, #8]
   22ebc:	b2da      	uxtb	r2, r3
   22ebe:	2314      	movs	r3, #20
   22ec0:	18fb      	adds	r3, r7, r3
   22ec2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   22ec4:	683b      	ldr	r3, [r7, #0]
   22ec6:	0c1b      	lsrs	r3, r3, #16
   22ec8:	b2da      	uxtb	r2, r3
   22eca:	2314      	movs	r3, #20
   22ecc:	18fb      	adds	r3, r7, r3
   22ece:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   22ed0:	683b      	ldr	r3, [r7, #0]
   22ed2:	0a1b      	lsrs	r3, r3, #8
   22ed4:	b2da      	uxtb	r2, r3
   22ed6:	2314      	movs	r3, #20
   22ed8:	18fb      	adds	r3, r7, r3
   22eda:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   22edc:	683b      	ldr	r3, [r7, #0]
   22ede:	b2da      	uxtb	r2, r3
   22ee0:	2314      	movs	r3, #20
   22ee2:	18fb      	adds	r3, r7, r3
   22ee4:	719a      	strb	r2, [r3, #6]
		len = 8;
   22ee6:	231f      	movs	r3, #31
   22ee8:	18fb      	adds	r3, r7, r3
   22eea:	2208      	movs	r2, #8
   22eec:	701a      	strb	r2, [r3, #0]
		break;
   22eee:	e067      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   22ef0:	68bb      	ldr	r3, [r7, #8]
   22ef2:	0a1b      	lsrs	r3, r3, #8
   22ef4:	b2da      	uxtb	r2, r3
   22ef6:	2314      	movs	r3, #20
   22ef8:	18fb      	adds	r3, r7, r3
   22efa:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22efc:	2330      	movs	r3, #48	; 0x30
   22efe:	18fb      	adds	r3, r7, r3
   22f00:	781b      	ldrb	r3, [r3, #0]
   22f02:	2b00      	cmp	r3, #0
   22f04:	d009      	beq.n	22f1a <spi_cmd+0x1da>
   22f06:	2314      	movs	r3, #20
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	785b      	ldrb	r3, [r3, #1]
   22f0c:	2280      	movs	r2, #128	; 0x80
   22f0e:	4252      	negs	r2, r2
   22f10:	4313      	orrs	r3, r2
   22f12:	b2da      	uxtb	r2, r3
   22f14:	2314      	movs	r3, #20
   22f16:	18fb      	adds	r3, r7, r3
   22f18:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   22f1a:	68bb      	ldr	r3, [r7, #8]
   22f1c:	b2da      	uxtb	r2, r3
   22f1e:	2314      	movs	r3, #20
   22f20:	18fb      	adds	r3, r7, r3
   22f22:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   22f24:	687b      	ldr	r3, [r7, #4]
   22f26:	0e1b      	lsrs	r3, r3, #24
   22f28:	b2da      	uxtb	r2, r3
   22f2a:	2314      	movs	r3, #20
   22f2c:	18fb      	adds	r3, r7, r3
   22f2e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   22f30:	687b      	ldr	r3, [r7, #4]
   22f32:	0c1b      	lsrs	r3, r3, #16
   22f34:	b2da      	uxtb	r2, r3
   22f36:	2314      	movs	r3, #20
   22f38:	18fb      	adds	r3, r7, r3
   22f3a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   22f3c:	687b      	ldr	r3, [r7, #4]
   22f3e:	0a1b      	lsrs	r3, r3, #8
   22f40:	b2da      	uxtb	r2, r3
   22f42:	2314      	movs	r3, #20
   22f44:	18fb      	adds	r3, r7, r3
   22f46:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   22f48:	687b      	ldr	r3, [r7, #4]
   22f4a:	b2da      	uxtb	r2, r3
   22f4c:	2314      	movs	r3, #20
   22f4e:	18fb      	adds	r3, r7, r3
   22f50:	719a      	strb	r2, [r3, #6]
		len = 8;
   22f52:	231f      	movs	r3, #31
   22f54:	18fb      	adds	r3, r7, r3
   22f56:	2208      	movs	r2, #8
   22f58:	701a      	strb	r2, [r3, #0]
		break;
   22f5a:	e031      	b.n	22fc0 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   22f5c:	68bb      	ldr	r3, [r7, #8]
   22f5e:	0c1b      	lsrs	r3, r3, #16
   22f60:	b2da      	uxtb	r2, r3
   22f62:	2314      	movs	r3, #20
   22f64:	18fb      	adds	r3, r7, r3
   22f66:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22f68:	68bb      	ldr	r3, [r7, #8]
   22f6a:	0a1b      	lsrs	r3, r3, #8
   22f6c:	b2da      	uxtb	r2, r3
   22f6e:	2314      	movs	r3, #20
   22f70:	18fb      	adds	r3, r7, r3
   22f72:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   22f74:	68bb      	ldr	r3, [r7, #8]
   22f76:	b2da      	uxtb	r2, r3
   22f78:	2314      	movs	r3, #20
   22f7a:	18fb      	adds	r3, r7, r3
   22f7c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   22f7e:	687b      	ldr	r3, [r7, #4]
   22f80:	0e1b      	lsrs	r3, r3, #24
   22f82:	b2da      	uxtb	r2, r3
   22f84:	2314      	movs	r3, #20
   22f86:	18fb      	adds	r3, r7, r3
   22f88:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   22f8a:	687b      	ldr	r3, [r7, #4]
   22f8c:	0c1b      	lsrs	r3, r3, #16
   22f8e:	b2da      	uxtb	r2, r3
   22f90:	2314      	movs	r3, #20
   22f92:	18fb      	adds	r3, r7, r3
   22f94:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   22f96:	687b      	ldr	r3, [r7, #4]
   22f98:	0a1b      	lsrs	r3, r3, #8
   22f9a:	b2da      	uxtb	r2, r3
   22f9c:	2314      	movs	r3, #20
   22f9e:	18fb      	adds	r3, r7, r3
   22fa0:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   22fa2:	687b      	ldr	r3, [r7, #4]
   22fa4:	b2da      	uxtb	r2, r3
   22fa6:	2314      	movs	r3, #20
   22fa8:	18fb      	adds	r3, r7, r3
   22faa:	71da      	strb	r2, [r3, #7]
		len = 9;
   22fac:	231f      	movs	r3, #31
   22fae:	18fb      	adds	r3, r7, r3
   22fb0:	2209      	movs	r2, #9
   22fb2:	701a      	strb	r2, [r3, #0]
		break;
   22fb4:	e004      	b.n	22fc0 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   22fb6:	231e      	movs	r3, #30
   22fb8:	18fb      	adds	r3, r7, r3
   22fba:	2200      	movs	r2, #0
   22fbc:	701a      	strb	r2, [r3, #0]
		break;
   22fbe:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   22fc0:	231e      	movs	r3, #30
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	781b      	ldrb	r3, [r3, #0]
   22fc6:	b25b      	sxtb	r3, r3
   22fc8:	2b00      	cmp	r3, #0
   22fca:	d03f      	beq.n	2304c <spi_cmd+0x30c>
		if (!gu8Crc_off)
   22fcc:	4b24      	ldr	r3, [pc, #144]	; (23060 <spi_cmd+0x320>)
   22fce:	781b      	ldrb	r3, [r3, #0]
   22fd0:	2b00      	cmp	r3, #0
   22fd2:	d115      	bne.n	23000 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   22fd4:	231f      	movs	r3, #31
   22fd6:	18fb      	adds	r3, r7, r3
   22fd8:	781b      	ldrb	r3, [r3, #0]
   22fda:	1e5c      	subs	r4, r3, #1
   22fdc:	231f      	movs	r3, #31
   22fde:	18fb      	adds	r3, r7, r3
   22fe0:	781b      	ldrb	r3, [r3, #0]
   22fe2:	3b01      	subs	r3, #1
   22fe4:	001a      	movs	r2, r3
   22fe6:	2314      	movs	r3, #20
   22fe8:	18fb      	adds	r3, r7, r3
   22fea:	0019      	movs	r1, r3
   22fec:	207f      	movs	r0, #127	; 0x7f
   22fee:	4b1d      	ldr	r3, [pc, #116]	; (23064 <spi_cmd+0x324>)
   22ff0:	4798      	blx	r3
   22ff2:	0003      	movs	r3, r0
   22ff4:	18db      	adds	r3, r3, r3
   22ff6:	b2da      	uxtb	r2, r3
   22ff8:	2314      	movs	r3, #20
   22ffa:	18fb      	adds	r3, r7, r3
   22ffc:	551a      	strb	r2, [r3, r4]
   22ffe:	e006      	b.n	2300e <spi_cmd+0x2ce>
		else
			len-=1;
   23000:	231f      	movs	r3, #31
   23002:	18fb      	adds	r3, r7, r3
   23004:	221f      	movs	r2, #31
   23006:	18ba      	adds	r2, r7, r2
   23008:	7812      	ldrb	r2, [r2, #0]
   2300a:	3a01      	subs	r2, #1
   2300c:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   2300e:	231f      	movs	r3, #31
   23010:	18fb      	adds	r3, r7, r3
   23012:	781b      	ldrb	r3, [r3, #0]
   23014:	b29a      	uxth	r2, r3
   23016:	2314      	movs	r3, #20
   23018:	18fb      	adds	r3, r7, r3
   2301a:	0011      	movs	r1, r2
   2301c:	0018      	movs	r0, r3
   2301e:	4b12      	ldr	r3, [pc, #72]	; (23068 <spi_cmd+0x328>)
   23020:	4798      	blx	r3
   23022:	1e03      	subs	r3, r0, #0
   23024:	d012      	beq.n	2304c <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23026:	2390      	movs	r3, #144	; 0x90
   23028:	005a      	lsls	r2, r3, #1
   2302a:	4910      	ldr	r1, [pc, #64]	; (2306c <spi_cmd+0x32c>)
   2302c:	4b10      	ldr	r3, [pc, #64]	; (23070 <spi_cmd+0x330>)
   2302e:	0018      	movs	r0, r3
   23030:	4b10      	ldr	r3, [pc, #64]	; (23074 <spi_cmd+0x334>)
   23032:	4798      	blx	r3
   23034:	4b10      	ldr	r3, [pc, #64]	; (23078 <spi_cmd+0x338>)
   23036:	0018      	movs	r0, r3
   23038:	4b0e      	ldr	r3, [pc, #56]	; (23074 <spi_cmd+0x334>)
   2303a:	4798      	blx	r3
   2303c:	4b0f      	ldr	r3, [pc, #60]	; (2307c <spi_cmd+0x33c>)
   2303e:	0018      	movs	r0, r3
   23040:	4b0c      	ldr	r3, [pc, #48]	; (23074 <spi_cmd+0x334>)
   23042:	4798      	blx	r3
			result = N_FAIL;
   23044:	231e      	movs	r3, #30
   23046:	18fb      	adds	r3, r7, r3
   23048:	2200      	movs	r2, #0
   2304a:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   2304c:	231e      	movs	r3, #30
   2304e:	18fb      	adds	r3, r7, r3
   23050:	781b      	ldrb	r3, [r3, #0]
   23052:	b25b      	sxtb	r3, r3
}
   23054:	0018      	movs	r0, r3
   23056:	46bd      	mov	sp, r7
   23058:	b009      	add	sp, #36	; 0x24
   2305a:	bd90      	pop	{r4, r7, pc}
   2305c:	00038bb8 	.word	0x00038bb8
   23060:	2000412c 	.word	0x2000412c
   23064:	00022cf1 	.word	0x00022cf1
   23068:	00022c39 	.word	0x00022c39
   2306c:	00038c30 	.word	0x00038c30
   23070:	00038640 	.word	0x00038640
   23074:	0001d7a9 	.word	0x0001d7a9
   23078:	00038654 	.word	0x00038654
   2307c:	00038680 	.word	0x00038680

00023080 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23080:	b590      	push	{r4, r7, lr}
   23082:	b085      	sub	sp, #20
   23084:	af00      	add	r7, sp, #0
   23086:	0002      	movs	r2, r0
   23088:	1dfb      	adds	r3, r7, #7
   2308a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   2308c:	230e      	movs	r3, #14
   2308e:	18fb      	adds	r3, r7, r3
   23090:	2201      	movs	r2, #1
   23092:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23094:	4b32      	ldr	r3, [pc, #200]	; (23160 <spi_data_rsp+0xe0>)
   23096:	781b      	ldrb	r3, [r3, #0]
   23098:	2b00      	cmp	r3, #0
   2309a:	d104      	bne.n	230a6 <spi_data_rsp+0x26>
		len = 2;
   2309c:	230f      	movs	r3, #15
   2309e:	18fb      	adds	r3, r7, r3
   230a0:	2202      	movs	r2, #2
   230a2:	701a      	strb	r2, [r3, #0]
   230a4:	e003      	b.n	230ae <spi_data_rsp+0x2e>
	else
		len = 3;
   230a6:	230f      	movs	r3, #15
   230a8:	18fb      	adds	r3, r7, r3
   230aa:	2203      	movs	r2, #3
   230ac:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   230ae:	230f      	movs	r3, #15
   230b0:	18fb      	adds	r3, r7, r3
   230b2:	781b      	ldrb	r3, [r3, #0]
   230b4:	b29a      	uxth	r2, r3
   230b6:	2308      	movs	r3, #8
   230b8:	18fb      	adds	r3, r7, r3
   230ba:	0011      	movs	r1, r2
   230bc:	0018      	movs	r0, r3
   230be:	4b29      	ldr	r3, [pc, #164]	; (23164 <spi_data_rsp+0xe4>)
   230c0:	4798      	blx	r3
   230c2:	1e03      	subs	r3, r0, #0
   230c4:	d013      	beq.n	230ee <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   230c6:	239a      	movs	r3, #154	; 0x9a
   230c8:	005a      	lsls	r2, r3, #1
   230ca:	4927      	ldr	r1, [pc, #156]	; (23168 <spi_data_rsp+0xe8>)
   230cc:	4b27      	ldr	r3, [pc, #156]	; (2316c <spi_data_rsp+0xec>)
   230ce:	0018      	movs	r0, r3
   230d0:	4b27      	ldr	r3, [pc, #156]	; (23170 <spi_data_rsp+0xf0>)
   230d2:	4798      	blx	r3
   230d4:	4b27      	ldr	r3, [pc, #156]	; (23174 <spi_data_rsp+0xf4>)
   230d6:	0018      	movs	r0, r3
   230d8:	4b25      	ldr	r3, [pc, #148]	; (23170 <spi_data_rsp+0xf0>)
   230da:	4798      	blx	r3
   230dc:	4b26      	ldr	r3, [pc, #152]	; (23178 <spi_data_rsp+0xf8>)
   230de:	0018      	movs	r0, r3
   230e0:	4b23      	ldr	r3, [pc, #140]	; (23170 <spi_data_rsp+0xf0>)
   230e2:	4798      	blx	r3
		result = N_FAIL;
   230e4:	230e      	movs	r3, #14
   230e6:	18fb      	adds	r3, r7, r3
   230e8:	2200      	movs	r2, #0
   230ea:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   230ec:	e030      	b.n	23150 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   230ee:	230f      	movs	r3, #15
   230f0:	18fb      	adds	r3, r7, r3
   230f2:	781b      	ldrb	r3, [r3, #0]
   230f4:	3b01      	subs	r3, #1
   230f6:	2208      	movs	r2, #8
   230f8:	18ba      	adds	r2, r7, r2
   230fa:	5cd3      	ldrb	r3, [r2, r3]
   230fc:	2b00      	cmp	r3, #0
   230fe:	d108      	bne.n	23112 <spi_data_rsp+0x92>
   23100:	230f      	movs	r3, #15
   23102:	18fb      	adds	r3, r7, r3
   23104:	781b      	ldrb	r3, [r3, #0]
   23106:	3b02      	subs	r3, #2
   23108:	2208      	movs	r2, #8
   2310a:	18ba      	adds	r2, r7, r2
   2310c:	5cd3      	ldrb	r3, [r2, r3]
   2310e:	2bc3      	cmp	r3, #195	; 0xc3
   23110:	d01e      	beq.n	23150 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23112:	233c      	movs	r3, #60	; 0x3c
   23114:	33ff      	adds	r3, #255	; 0xff
   23116:	001a      	movs	r2, r3
   23118:	4913      	ldr	r1, [pc, #76]	; (23168 <spi_data_rsp+0xe8>)
   2311a:	4b14      	ldr	r3, [pc, #80]	; (2316c <spi_data_rsp+0xec>)
   2311c:	0018      	movs	r0, r3
   2311e:	4b14      	ldr	r3, [pc, #80]	; (23170 <spi_data_rsp+0xf0>)
   23120:	4798      	blx	r3
   23122:	2308      	movs	r3, #8
   23124:	18fb      	adds	r3, r7, r3
   23126:	781b      	ldrb	r3, [r3, #0]
   23128:	0019      	movs	r1, r3
   2312a:	2308      	movs	r3, #8
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	785b      	ldrb	r3, [r3, #1]
   23130:	001a      	movs	r2, r3
   23132:	2308      	movs	r3, #8
   23134:	18fb      	adds	r3, r7, r3
   23136:	789b      	ldrb	r3, [r3, #2]
   23138:	4810      	ldr	r0, [pc, #64]	; (2317c <spi_data_rsp+0xfc>)
   2313a:	4c0d      	ldr	r4, [pc, #52]	; (23170 <spi_data_rsp+0xf0>)
   2313c:	47a0      	blx	r4
   2313e:	4b0e      	ldr	r3, [pc, #56]	; (23178 <spi_data_rsp+0xf8>)
   23140:	0018      	movs	r0, r3
   23142:	4b0b      	ldr	r3, [pc, #44]	; (23170 <spi_data_rsp+0xf0>)
   23144:	4798      	blx	r3
		result = N_FAIL;
   23146:	230e      	movs	r3, #14
   23148:	18fb      	adds	r3, r7, r3
   2314a:	2200      	movs	r2, #0
   2314c:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   2314e:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23150:	230e      	movs	r3, #14
   23152:	18fb      	adds	r3, r7, r3
   23154:	781b      	ldrb	r3, [r3, #0]
   23156:	b25b      	sxtb	r3, r3
}
   23158:	0018      	movs	r0, r3
   2315a:	46bd      	mov	sp, r7
   2315c:	b005      	add	sp, #20
   2315e:	bd90      	pop	{r4, r7, pc}
   23160:	2000412c 	.word	0x2000412c
   23164:	00022bf5 	.word	0x00022bf5
   23168:	00038c38 	.word	0x00038c38
   2316c:	00038640 	.word	0x00038640
   23170:	0001d7a9 	.word	0x0001d7a9
   23174:	00038684 	.word	0x00038684
   23178:	00038680 	.word	0x00038680
   2317c:	000386a4 	.word	0x000386a4

00023180 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23180:	b580      	push	{r7, lr}
   23182:	b084      	sub	sp, #16
   23184:	af00      	add	r7, sp, #0
   23186:	0002      	movs	r2, r0
   23188:	1dfb      	adds	r3, r7, #7
   2318a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   2318c:	230f      	movs	r3, #15
   2318e:	18fb      	adds	r3, r7, r3
   23190:	2201      	movs	r2, #1
   23192:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23194:	1dfb      	adds	r3, r7, #7
   23196:	781b      	ldrb	r3, [r3, #0]
   23198:	2bcf      	cmp	r3, #207	; 0xcf
   2319a:	d007      	beq.n	231ac <spi_cmd_rsp+0x2c>
   2319c:	1dfb      	adds	r3, r7, #7
   2319e:	781b      	ldrb	r3, [r3, #0]
   231a0:	2bc5      	cmp	r3, #197	; 0xc5
   231a2:	d003      	beq.n	231ac <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   231a4:	1dfb      	adds	r3, r7, #7
   231a6:	781b      	ldrb	r3, [r3, #0]
   231a8:	2bc6      	cmp	r3, #198	; 0xc6
   231aa:	d10c      	bne.n	231c6 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   231ac:	230d      	movs	r3, #13
   231ae:	18fb      	adds	r3, r7, r3
   231b0:	2101      	movs	r1, #1
   231b2:	0018      	movs	r0, r3
   231b4:	4b3b      	ldr	r3, [pc, #236]	; (232a4 <spi_cmd_rsp+0x124>)
   231b6:	4798      	blx	r3
   231b8:	1e03      	subs	r3, r0, #0
   231ba:	d004      	beq.n	231c6 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   231bc:	230f      	movs	r3, #15
   231be:	18fb      	adds	r3, r7, r3
   231c0:	2200      	movs	r2, #0
   231c2:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   231c4:	e065      	b.n	23292 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   231c6:	230e      	movs	r3, #14
   231c8:	18fb      	adds	r3, r7, r3
   231ca:	220a      	movs	r2, #10
   231cc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   231ce:	230d      	movs	r3, #13
   231d0:	18fb      	adds	r3, r7, r3
   231d2:	2101      	movs	r1, #1
   231d4:	0018      	movs	r0, r3
   231d6:	4b33      	ldr	r3, [pc, #204]	; (232a4 <spi_cmd_rsp+0x124>)
   231d8:	4798      	blx	r3
   231da:	1e03      	subs	r3, r0, #0
   231dc:	d014      	beq.n	23208 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   231de:	235c      	movs	r3, #92	; 0x5c
   231e0:	33ff      	adds	r3, #255	; 0xff
   231e2:	001a      	movs	r2, r3
   231e4:	4930      	ldr	r1, [pc, #192]	; (232a8 <spi_cmd_rsp+0x128>)
   231e6:	4b31      	ldr	r3, [pc, #196]	; (232ac <spi_cmd_rsp+0x12c>)
   231e8:	0018      	movs	r0, r3
   231ea:	4b31      	ldr	r3, [pc, #196]	; (232b0 <spi_cmd_rsp+0x130>)
   231ec:	4798      	blx	r3
   231ee:	4b31      	ldr	r3, [pc, #196]	; (232b4 <spi_cmd_rsp+0x134>)
   231f0:	0018      	movs	r0, r3
   231f2:	4b2f      	ldr	r3, [pc, #188]	; (232b0 <spi_cmd_rsp+0x130>)
   231f4:	4798      	blx	r3
   231f6:	4b30      	ldr	r3, [pc, #192]	; (232b8 <spi_cmd_rsp+0x138>)
   231f8:	0018      	movs	r0, r3
   231fa:	4b2d      	ldr	r3, [pc, #180]	; (232b0 <spi_cmd_rsp+0x130>)
   231fc:	4798      	blx	r3
			result = N_FAIL;
   231fe:	230f      	movs	r3, #15
   23200:	18fb      	adds	r3, r7, r3
   23202:	2200      	movs	r2, #0
   23204:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23206:	e044      	b.n	23292 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23208:	230d      	movs	r3, #13
   2320a:	18fb      	adds	r3, r7, r3
   2320c:	781b      	ldrb	r3, [r3, #0]
   2320e:	1dfa      	adds	r2, r7, #7
   23210:	7812      	ldrb	r2, [r2, #0]
   23212:	429a      	cmp	r2, r3
   23214:	d00b      	beq.n	2322e <spi_cmd_rsp+0xae>
   23216:	230e      	movs	r3, #14
   23218:	18fb      	adds	r3, r7, r3
   2321a:	781b      	ldrb	r3, [r3, #0]
   2321c:	b25b      	sxtb	r3, r3
   2321e:	b2da      	uxtb	r2, r3
   23220:	3a01      	subs	r2, #1
   23222:	b2d1      	uxtb	r1, r2
   23224:	220e      	movs	r2, #14
   23226:	18ba      	adds	r2, r7, r2
   23228:	7011      	strb	r1, [r2, #0]
   2322a:	2b00      	cmp	r3, #0
   2322c:	dccf      	bgt.n	231ce <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2322e:	230e      	movs	r3, #14
   23230:	18fb      	adds	r3, r7, r3
   23232:	220a      	movs	r2, #10
   23234:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23236:	230d      	movs	r3, #13
   23238:	18fb      	adds	r3, r7, r3
   2323a:	2101      	movs	r1, #1
   2323c:	0018      	movs	r0, r3
   2323e:	4b19      	ldr	r3, [pc, #100]	; (232a4 <spi_cmd_rsp+0x124>)
   23240:	4798      	blx	r3
   23242:	1e03      	subs	r3, r0, #0
   23244:	d014      	beq.n	23270 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23246:	236a      	movs	r3, #106	; 0x6a
   23248:	33ff      	adds	r3, #255	; 0xff
   2324a:	001a      	movs	r2, r3
   2324c:	4916      	ldr	r1, [pc, #88]	; (232a8 <spi_cmd_rsp+0x128>)
   2324e:	4b17      	ldr	r3, [pc, #92]	; (232ac <spi_cmd_rsp+0x12c>)
   23250:	0018      	movs	r0, r3
   23252:	4b17      	ldr	r3, [pc, #92]	; (232b0 <spi_cmd_rsp+0x130>)
   23254:	4798      	blx	r3
   23256:	4b17      	ldr	r3, [pc, #92]	; (232b4 <spi_cmd_rsp+0x134>)
   23258:	0018      	movs	r0, r3
   2325a:	4b15      	ldr	r3, [pc, #84]	; (232b0 <spi_cmd_rsp+0x130>)
   2325c:	4798      	blx	r3
   2325e:	4b16      	ldr	r3, [pc, #88]	; (232b8 <spi_cmd_rsp+0x138>)
   23260:	0018      	movs	r0, r3
   23262:	4b13      	ldr	r3, [pc, #76]	; (232b0 <spi_cmd_rsp+0x130>)
   23264:	4798      	blx	r3
			result = N_FAIL;
   23266:	230f      	movs	r3, #15
   23268:	18fb      	adds	r3, r7, r3
   2326a:	2200      	movs	r2, #0
   2326c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2326e:	e010      	b.n	23292 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23270:	230d      	movs	r3, #13
   23272:	18fb      	adds	r3, r7, r3
   23274:	781b      	ldrb	r3, [r3, #0]
   23276:	2b00      	cmp	r3, #0
   23278:	d00b      	beq.n	23292 <spi_cmd_rsp+0x112>
   2327a:	230e      	movs	r3, #14
   2327c:	18fb      	adds	r3, r7, r3
   2327e:	781b      	ldrb	r3, [r3, #0]
   23280:	b25b      	sxtb	r3, r3
   23282:	b2da      	uxtb	r2, r3
   23284:	3a01      	subs	r2, #1
   23286:	b2d1      	uxtb	r1, r2
   23288:	220e      	movs	r2, #14
   2328a:	18ba      	adds	r2, r7, r2
   2328c:	7011      	strb	r1, [r2, #0]
   2328e:	2b00      	cmp	r3, #0
   23290:	dcd1      	bgt.n	23236 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   23292:	230f      	movs	r3, #15
   23294:	18fb      	adds	r3, r7, r3
   23296:	781b      	ldrb	r3, [r3, #0]
   23298:	b25b      	sxtb	r3, r3
}
   2329a:	0018      	movs	r0, r3
   2329c:	46bd      	mov	sp, r7
   2329e:	b004      	add	sp, #16
   232a0:	bd80      	pop	{r7, pc}
   232a2:	46c0      	nop			; (mov r8, r8)
   232a4:	00022bf5 	.word	0x00022bf5
   232a8:	00038c48 	.word	0x00038c48
   232ac:	00038640 	.word	0x00038640
   232b0:	0001d7a9 	.word	0x0001d7a9
   232b4:	000386d4 	.word	0x000386d4
   232b8:	00038680 	.word	0x00038680

000232bc <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   232bc:	b590      	push	{r4, r7, lr}
   232be:	b09f      	sub	sp, #124	; 0x7c
   232c0:	af00      	add	r7, sp, #0
   232c2:	60b9      	str	r1, [r7, #8]
   232c4:	607a      	str	r2, [r7, #4]
   232c6:	603b      	str	r3, [r7, #0]
   232c8:	230f      	movs	r3, #15
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	1c02      	adds	r2, r0, #0
   232ce:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   232d0:	2300      	movs	r3, #0
   232d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   232d4:	2301      	movs	r3, #1
   232d6:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   232d8:	2338      	movs	r3, #56	; 0x38
   232da:	18fb      	adds	r3, r7, r3
   232dc:	220f      	movs	r2, #15
   232de:	18ba      	adds	r2, r7, r2
   232e0:	7812      	ldrb	r2, [r2, #0]
   232e2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   232e4:	230f      	movs	r3, #15
   232e6:	18fb      	adds	r3, r7, r3
   232e8:	781b      	ldrb	r3, [r3, #0]
   232ea:	3bc1      	subs	r3, #193	; 0xc1
   232ec:	2b0e      	cmp	r3, #14
   232ee:	d900      	bls.n	232f2 <spi_cmd_complete+0x36>
   232f0:	e103      	b.n	234fa <spi_cmd_complete+0x23e>
   232f2:	009a      	lsls	r2, r3, #2
   232f4:	4bd1      	ldr	r3, [pc, #836]	; (2363c <spi_cmd_complete+0x380>)
   232f6:	18d3      	adds	r3, r2, r3
   232f8:	681b      	ldr	r3, [r3, #0]
   232fa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   232fc:	68bb      	ldr	r3, [r7, #8]
   232fe:	0c1b      	lsrs	r3, r3, #16
   23300:	b2da      	uxtb	r2, r3
   23302:	2338      	movs	r3, #56	; 0x38
   23304:	18fb      	adds	r3, r7, r3
   23306:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23308:	68bb      	ldr	r3, [r7, #8]
   2330a:	0a1b      	lsrs	r3, r3, #8
   2330c:	b2da      	uxtb	r2, r3
   2330e:	2338      	movs	r3, #56	; 0x38
   23310:	18fb      	adds	r3, r7, r3
   23312:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23314:	68bb      	ldr	r3, [r7, #8]
   23316:	b2da      	uxtb	r2, r3
   23318:	2338      	movs	r3, #56	; 0x38
   2331a:	18fb      	adds	r3, r7, r3
   2331c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2331e:	2305      	movs	r3, #5
   23320:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23322:	e0ed      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23324:	68bb      	ldr	r3, [r7, #8]
   23326:	0a1b      	lsrs	r3, r3, #8
   23328:	b2da      	uxtb	r2, r3
   2332a:	2338      	movs	r3, #56	; 0x38
   2332c:	18fb      	adds	r3, r7, r3
   2332e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23330:	2388      	movs	r3, #136	; 0x88
   23332:	18fb      	adds	r3, r7, r3
   23334:	781b      	ldrb	r3, [r3, #0]
   23336:	2b01      	cmp	r3, #1
   23338:	d109      	bne.n	2334e <spi_cmd_complete+0x92>
   2333a:	2338      	movs	r3, #56	; 0x38
   2333c:	18fb      	adds	r3, r7, r3
   2333e:	785b      	ldrb	r3, [r3, #1]
   23340:	2280      	movs	r2, #128	; 0x80
   23342:	4252      	negs	r2, r2
   23344:	4313      	orrs	r3, r2
   23346:	b2da      	uxtb	r2, r3
   23348:	2338      	movs	r3, #56	; 0x38
   2334a:	18fb      	adds	r3, r7, r3
   2334c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   2334e:	68bb      	ldr	r3, [r7, #8]
   23350:	b2da      	uxtb	r2, r3
   23352:	2338      	movs	r3, #56	; 0x38
   23354:	18fb      	adds	r3, r7, r3
   23356:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23358:	2338      	movs	r3, #56	; 0x38
   2335a:	18fb      	adds	r3, r7, r3
   2335c:	2200      	movs	r2, #0
   2335e:	70da      	strb	r2, [r3, #3]
		len = 5;
   23360:	2305      	movs	r3, #5
   23362:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23364:	e0cc      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   23366:	2338      	movs	r3, #56	; 0x38
   23368:	18fb      	adds	r3, r7, r3
   2336a:	2200      	movs	r2, #0
   2336c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   2336e:	2338      	movs	r3, #56	; 0x38
   23370:	18fb      	adds	r3, r7, r3
   23372:	2200      	movs	r2, #0
   23374:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23376:	2338      	movs	r3, #56	; 0x38
   23378:	18fb      	adds	r3, r7, r3
   2337a:	2200      	movs	r2, #0
   2337c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2337e:	2305      	movs	r3, #5
   23380:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23382:	e0bd      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   23384:	2338      	movs	r3, #56	; 0x38
   23386:	18fb      	adds	r3, r7, r3
   23388:	2200      	movs	r2, #0
   2338a:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   2338c:	2338      	movs	r3, #56	; 0x38
   2338e:	18fb      	adds	r3, r7, r3
   23390:	2200      	movs	r2, #0
   23392:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23394:	2338      	movs	r3, #56	; 0x38
   23396:	18fb      	adds	r3, r7, r3
   23398:	2200      	movs	r2, #0
   2339a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2339c:	2305      	movs	r3, #5
   2339e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   233a0:	e0ae      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   233a2:	2338      	movs	r3, #56	; 0x38
   233a4:	18fb      	adds	r3, r7, r3
   233a6:	22ff      	movs	r2, #255	; 0xff
   233a8:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   233aa:	2338      	movs	r3, #56	; 0x38
   233ac:	18fb      	adds	r3, r7, r3
   233ae:	22ff      	movs	r2, #255	; 0xff
   233b0:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   233b2:	2338      	movs	r3, #56	; 0x38
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	22ff      	movs	r2, #255	; 0xff
   233b8:	70da      	strb	r2, [r3, #3]
		len = 5;
   233ba:	2305      	movs	r3, #5
   233bc:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   233be:	e09f      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   233c0:	68bb      	ldr	r3, [r7, #8]
   233c2:	0c1b      	lsrs	r3, r3, #16
   233c4:	b2da      	uxtb	r2, r3
   233c6:	2338      	movs	r3, #56	; 0x38
   233c8:	18fb      	adds	r3, r7, r3
   233ca:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   233cc:	68bb      	ldr	r3, [r7, #8]
   233ce:	0a1b      	lsrs	r3, r3, #8
   233d0:	b2da      	uxtb	r2, r3
   233d2:	2338      	movs	r3, #56	; 0x38
   233d4:	18fb      	adds	r3, r7, r3
   233d6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   233d8:	68bb      	ldr	r3, [r7, #8]
   233da:	b2da      	uxtb	r2, r3
   233dc:	2338      	movs	r3, #56	; 0x38
   233de:	18fb      	adds	r3, r7, r3
   233e0:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   233e2:	683b      	ldr	r3, [r7, #0]
   233e4:	0a1b      	lsrs	r3, r3, #8
   233e6:	b2da      	uxtb	r2, r3
   233e8:	2338      	movs	r3, #56	; 0x38
   233ea:	18fb      	adds	r3, r7, r3
   233ec:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   233ee:	683b      	ldr	r3, [r7, #0]
   233f0:	b2da      	uxtb	r2, r3
   233f2:	2338      	movs	r3, #56	; 0x38
   233f4:	18fb      	adds	r3, r7, r3
   233f6:	715a      	strb	r2, [r3, #5]
		len = 7;
   233f8:	2307      	movs	r3, #7
   233fa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   233fc:	e080      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   233fe:	68bb      	ldr	r3, [r7, #8]
   23400:	0c1b      	lsrs	r3, r3, #16
   23402:	b2da      	uxtb	r2, r3
   23404:	2338      	movs	r3, #56	; 0x38
   23406:	18fb      	adds	r3, r7, r3
   23408:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2340a:	68bb      	ldr	r3, [r7, #8]
   2340c:	0a1b      	lsrs	r3, r3, #8
   2340e:	b2da      	uxtb	r2, r3
   23410:	2338      	movs	r3, #56	; 0x38
   23412:	18fb      	adds	r3, r7, r3
   23414:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23416:	68bb      	ldr	r3, [r7, #8]
   23418:	b2da      	uxtb	r2, r3
   2341a:	2338      	movs	r3, #56	; 0x38
   2341c:	18fb      	adds	r3, r7, r3
   2341e:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23420:	683b      	ldr	r3, [r7, #0]
   23422:	0c1b      	lsrs	r3, r3, #16
   23424:	b2da      	uxtb	r2, r3
   23426:	2338      	movs	r3, #56	; 0x38
   23428:	18fb      	adds	r3, r7, r3
   2342a:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   2342c:	683b      	ldr	r3, [r7, #0]
   2342e:	0a1b      	lsrs	r3, r3, #8
   23430:	b2da      	uxtb	r2, r3
   23432:	2338      	movs	r3, #56	; 0x38
   23434:	18fb      	adds	r3, r7, r3
   23436:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   23438:	683b      	ldr	r3, [r7, #0]
   2343a:	b2da      	uxtb	r2, r3
   2343c:	2338      	movs	r3, #56	; 0x38
   2343e:	18fb      	adds	r3, r7, r3
   23440:	719a      	strb	r2, [r3, #6]
		len = 8;
   23442:	2308      	movs	r3, #8
   23444:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23446:	e05b      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   23448:	68bb      	ldr	r3, [r7, #8]
   2344a:	0a1b      	lsrs	r3, r3, #8
   2344c:	b2da      	uxtb	r2, r3
   2344e:	2338      	movs	r3, #56	; 0x38
   23450:	18fb      	adds	r3, r7, r3
   23452:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23454:	2388      	movs	r3, #136	; 0x88
   23456:	18fb      	adds	r3, r7, r3
   23458:	781b      	ldrb	r3, [r3, #0]
   2345a:	2b01      	cmp	r3, #1
   2345c:	d109      	bne.n	23472 <spi_cmd_complete+0x1b6>
   2345e:	2338      	movs	r3, #56	; 0x38
   23460:	18fb      	adds	r3, r7, r3
   23462:	785b      	ldrb	r3, [r3, #1]
   23464:	2280      	movs	r2, #128	; 0x80
   23466:	4252      	negs	r2, r2
   23468:	4313      	orrs	r3, r2
   2346a:	b2da      	uxtb	r2, r3
   2346c:	2338      	movs	r3, #56	; 0x38
   2346e:	18fb      	adds	r3, r7, r3
   23470:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   23472:	68bb      	ldr	r3, [r7, #8]
   23474:	b2da      	uxtb	r2, r3
   23476:	2338      	movs	r3, #56	; 0x38
   23478:	18fb      	adds	r3, r7, r3
   2347a:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   2347c:	687b      	ldr	r3, [r7, #4]
   2347e:	78da      	ldrb	r2, [r3, #3]
   23480:	2338      	movs	r3, #56	; 0x38
   23482:	18fb      	adds	r3, r7, r3
   23484:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23486:	687b      	ldr	r3, [r7, #4]
   23488:	789a      	ldrb	r2, [r3, #2]
   2348a:	2338      	movs	r3, #56	; 0x38
   2348c:	18fb      	adds	r3, r7, r3
   2348e:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23490:	687b      	ldr	r3, [r7, #4]
   23492:	785a      	ldrb	r2, [r3, #1]
   23494:	2338      	movs	r3, #56	; 0x38
   23496:	18fb      	adds	r3, r7, r3
   23498:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2349a:	687b      	ldr	r3, [r7, #4]
   2349c:	781a      	ldrb	r2, [r3, #0]
   2349e:	2338      	movs	r3, #56	; 0x38
   234a0:	18fb      	adds	r3, r7, r3
   234a2:	719a      	strb	r2, [r3, #6]
		len = 8;
   234a4:	2308      	movs	r3, #8
   234a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234a8:	e02a      	b.n	23500 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   234aa:	68bb      	ldr	r3, [r7, #8]
   234ac:	0c1b      	lsrs	r3, r3, #16
   234ae:	b2da      	uxtb	r2, r3
   234b0:	2338      	movs	r3, #56	; 0x38
   234b2:	18fb      	adds	r3, r7, r3
   234b4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   234b6:	68bb      	ldr	r3, [r7, #8]
   234b8:	0a1b      	lsrs	r3, r3, #8
   234ba:	b2da      	uxtb	r2, r3
   234bc:	2338      	movs	r3, #56	; 0x38
   234be:	18fb      	adds	r3, r7, r3
   234c0:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   234c2:	68bb      	ldr	r3, [r7, #8]
   234c4:	b2da      	uxtb	r2, r3
   234c6:	2338      	movs	r3, #56	; 0x38
   234c8:	18fb      	adds	r3, r7, r3
   234ca:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   234cc:	687b      	ldr	r3, [r7, #4]
   234ce:	78da      	ldrb	r2, [r3, #3]
   234d0:	2338      	movs	r3, #56	; 0x38
   234d2:	18fb      	adds	r3, r7, r3
   234d4:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   234d6:	687b      	ldr	r3, [r7, #4]
   234d8:	789a      	ldrb	r2, [r3, #2]
   234da:	2338      	movs	r3, #56	; 0x38
   234dc:	18fb      	adds	r3, r7, r3
   234de:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   234e0:	687b      	ldr	r3, [r7, #4]
   234e2:	785a      	ldrb	r2, [r3, #1]
   234e4:	2338      	movs	r3, #56	; 0x38
   234e6:	18fb      	adds	r3, r7, r3
   234e8:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   234ea:	687b      	ldr	r3, [r7, #4]
   234ec:	781a      	ldrb	r2, [r3, #0]
   234ee:	2338      	movs	r3, #56	; 0x38
   234f0:	18fb      	adds	r3, r7, r3
   234f2:	71da      	strb	r2, [r3, #7]
		len = 9;
   234f4:	2309      	movs	r3, #9
   234f6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234f8:	e002      	b.n	23500 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   234fa:	2300      	movs	r3, #0
   234fc:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   234fe:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23502:	2b01      	cmp	r3, #1
   23504:	d001      	beq.n	2350a <spi_cmd_complete+0x24e>
		return result;
   23506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23508:	e33a      	b.n	23b80 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2350a:	4b4d      	ldr	r3, [pc, #308]	; (23640 <spi_cmd_complete+0x384>)
   2350c:	781b      	ldrb	r3, [r3, #0]
   2350e:	2b00      	cmp	r3, #0
   23510:	d111      	bne.n	23536 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23514:	1e5c      	subs	r4, r3, #1
   23516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23518:	3b01      	subs	r3, #1
   2351a:	001a      	movs	r2, r3
   2351c:	2338      	movs	r3, #56	; 0x38
   2351e:	18fb      	adds	r3, r7, r3
   23520:	0019      	movs	r1, r3
   23522:	207f      	movs	r0, #127	; 0x7f
   23524:	4b47      	ldr	r3, [pc, #284]	; (23644 <spi_cmd_complete+0x388>)
   23526:	4798      	blx	r3
   23528:	0003      	movs	r3, r0
   2352a:	18db      	adds	r3, r3, r3
   2352c:	b2da      	uxtb	r2, r3
   2352e:	2338      	movs	r3, #56	; 0x38
   23530:	18fb      	adds	r3, r7, r3
   23532:	551a      	strb	r2, [r3, r4]
   23534:	e002      	b.n	2353c <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23538:	3b01      	subs	r3, #1
   2353a:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   2353c:	230f      	movs	r3, #15
   2353e:	18fb      	adds	r3, r7, r3
   23540:	781b      	ldrb	r3, [r3, #0]
   23542:	2bcf      	cmp	r3, #207	; 0xcf
   23544:	d009      	beq.n	2355a <spi_cmd_complete+0x29e>
   23546:	230f      	movs	r3, #15
   23548:	18fb      	adds	r3, r7, r3
   2354a:	781b      	ldrb	r3, [r3, #0]
   2354c:	2bc5      	cmp	r3, #197	; 0xc5
   2354e:	d004      	beq.n	2355a <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23550:	230f      	movs	r3, #15
   23552:	18fb      	adds	r3, r7, r3
   23554:	781b      	ldrb	r3, [r3, #0]
   23556:	2bc6      	cmp	r3, #198	; 0xc6
   23558:	d103      	bne.n	23562 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2355a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2355c:	3306      	adds	r3, #6
   2355e:	673b      	str	r3, [r7, #112]	; 0x70
   23560:	e018      	b.n	23594 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23562:	230f      	movs	r3, #15
   23564:	18fb      	adds	r3, r7, r3
   23566:	781b      	ldrb	r3, [r3, #0]
   23568:	2bc4      	cmp	r3, #196	; 0xc4
   2356a:	d004      	beq.n	23576 <spi_cmd_complete+0x2ba>
   2356c:	230f      	movs	r3, #15
   2356e:	18fb      	adds	r3, r7, r3
   23570:	781b      	ldrb	r3, [r3, #0]
   23572:	2bca      	cmp	r3, #202	; 0xca
   23574:	d10b      	bne.n	2358e <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   23576:	4b32      	ldr	r3, [pc, #200]	; (23640 <spi_cmd_complete+0x384>)
   23578:	781b      	ldrb	r3, [r3, #0]
   2357a:	2b00      	cmp	r3, #0
   2357c:	d103      	bne.n	23586 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2357e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23580:	330c      	adds	r3, #12
   23582:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23584:	e006      	b.n	23594 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23588:	330a      	adds	r3, #10
   2358a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   2358c:	e002      	b.n	23594 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23590:	3305      	adds	r3, #5
   23592:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23596:	2b20      	cmp	r3, #32
   23598:	d914      	bls.n	235c4 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2359a:	23f7      	movs	r3, #247	; 0xf7
   2359c:	005a      	lsls	r2, r3, #1
   2359e:	492a      	ldr	r1, [pc, #168]	; (23648 <spi_cmd_complete+0x38c>)
   235a0:	4b2a      	ldr	r3, [pc, #168]	; (2364c <spi_cmd_complete+0x390>)
   235a2:	0018      	movs	r0, r3
   235a4:	4b2a      	ldr	r3, [pc, #168]	; (23650 <spi_cmd_complete+0x394>)
   235a6:	4798      	blx	r3
   235a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   235aa:	4b2a      	ldr	r3, [pc, #168]	; (23654 <spi_cmd_complete+0x398>)
   235ac:	2220      	movs	r2, #32
   235ae:	0018      	movs	r0, r3
   235b0:	4b27      	ldr	r3, [pc, #156]	; (23650 <spi_cmd_complete+0x394>)
   235b2:	4798      	blx	r3
   235b4:	4b28      	ldr	r3, [pc, #160]	; (23658 <spi_cmd_complete+0x39c>)
   235b6:	0018      	movs	r0, r3
   235b8:	4b25      	ldr	r3, [pc, #148]	; (23650 <spi_cmd_complete+0x394>)
   235ba:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   235bc:	2300      	movs	r3, #0
   235be:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   235c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   235c2:	e2dd      	b.n	23b80 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   235c4:	2377      	movs	r3, #119	; 0x77
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   235ca:	701a      	strb	r2, [r3, #0]
   235cc:	e00d      	b.n	235ea <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   235ce:	2377      	movs	r3, #119	; 0x77
   235d0:	18fb      	adds	r3, r7, r3
   235d2:	781b      	ldrb	r3, [r3, #0]
   235d4:	2238      	movs	r2, #56	; 0x38
   235d6:	18ba      	adds	r2, r7, r2
   235d8:	2100      	movs	r1, #0
   235da:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   235dc:	2377      	movs	r3, #119	; 0x77
   235de:	18fb      	adds	r3, r7, r3
   235e0:	781a      	ldrb	r2, [r3, #0]
   235e2:	2377      	movs	r3, #119	; 0x77
   235e4:	18fb      	adds	r3, r7, r3
   235e6:	3201      	adds	r2, #1
   235e8:	701a      	strb	r2, [r3, #0]
   235ea:	2377      	movs	r3, #119	; 0x77
   235ec:	18fb      	adds	r3, r7, r3
   235ee:	781a      	ldrb	r2, [r3, #0]
   235f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   235f2:	429a      	cmp	r2, r3
   235f4:	d3eb      	bcc.n	235ce <spi_cmd_complete+0x312>
	}
	rix = len;
   235f6:	2376      	movs	r3, #118	; 0x76
   235f8:	18fb      	adds	r3, r7, r3
   235fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   235fc:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   235fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23600:	b29a      	uxth	r2, r3
   23602:	2318      	movs	r3, #24
   23604:	18f9      	adds	r1, r7, r3
   23606:	2338      	movs	r3, #56	; 0x38
   23608:	18fb      	adds	r3, r7, r3
   2360a:	0018      	movs	r0, r3
   2360c:	4b13      	ldr	r3, [pc, #76]	; (2365c <spi_cmd_complete+0x3a0>)
   2360e:	4798      	blx	r3
   23610:	1e03      	subs	r3, r0, #0
   23612:	d027      	beq.n	23664 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23614:	23fa      	movs	r3, #250	; 0xfa
   23616:	33ff      	adds	r3, #255	; 0xff
   23618:	001a      	movs	r2, r3
   2361a:	490b      	ldr	r1, [pc, #44]	; (23648 <spi_cmd_complete+0x38c>)
   2361c:	4b0b      	ldr	r3, [pc, #44]	; (2364c <spi_cmd_complete+0x390>)
   2361e:	0018      	movs	r0, r3
   23620:	4b0b      	ldr	r3, [pc, #44]	; (23650 <spi_cmd_complete+0x394>)
   23622:	4798      	blx	r3
   23624:	4b0e      	ldr	r3, [pc, #56]	; (23660 <spi_cmd_complete+0x3a4>)
   23626:	0018      	movs	r0, r3
   23628:	4b09      	ldr	r3, [pc, #36]	; (23650 <spi_cmd_complete+0x394>)
   2362a:	4798      	blx	r3
   2362c:	4b0a      	ldr	r3, [pc, #40]	; (23658 <spi_cmd_complete+0x39c>)
   2362e:	0018      	movs	r0, r3
   23630:	4b07      	ldr	r3, [pc, #28]	; (23650 <spi_cmd_complete+0x394>)
   23632:	4798      	blx	r3
		result = N_FAIL;
   23634:	2300      	movs	r3, #0
   23636:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2363a:	e2a1      	b.n	23b80 <spi_cmd_complete+0x8c4>
   2363c:	00038bf4 	.word	0x00038bf4
   23640:	2000412c 	.word	0x2000412c
   23644:	00022cf1 	.word	0x00022cf1
   23648:	00038c54 	.word	0x00038c54
   2364c:	00038640 	.word	0x00038640
   23650:	0001d7a9 	.word	0x0001d7a9
   23654:	00038708 	.word	0x00038708
   23658:	00038680 	.word	0x00038680
   2365c:	00022c7d 	.word	0x00022c7d
   23660:	00038654 	.word	0x00038654
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23664:	230f      	movs	r3, #15
   23666:	18fb      	adds	r3, r7, r3
   23668:	781b      	ldrb	r3, [r3, #0]
   2366a:	2bcf      	cmp	r3, #207	; 0xcf
   2366c:	d009      	beq.n	23682 <spi_cmd_complete+0x3c6>
   2366e:	230f      	movs	r3, #15
   23670:	18fb      	adds	r3, r7, r3
   23672:	781b      	ldrb	r3, [r3, #0]
   23674:	2bc5      	cmp	r3, #197	; 0xc5
   23676:	d004      	beq.n	23682 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   23678:	230f      	movs	r3, #15
   2367a:	18fb      	adds	r3, r7, r3
   2367c:	781b      	ldrb	r3, [r3, #0]
   2367e:	2bc6      	cmp	r3, #198	; 0xc6
   23680:	d106      	bne.n	23690 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   23682:	2376      	movs	r3, #118	; 0x76
   23684:	18fb      	adds	r3, r7, r3
   23686:	781a      	ldrb	r2, [r3, #0]
   23688:	2376      	movs	r3, #118	; 0x76
   2368a:	18fb      	adds	r3, r7, r3
   2368c:	3201      	adds	r2, #1
   2368e:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   23690:	2376      	movs	r3, #118	; 0x76
   23692:	18fb      	adds	r3, r7, r3
   23694:	781b      	ldrb	r3, [r3, #0]
   23696:	2276      	movs	r2, #118	; 0x76
   23698:	18ba      	adds	r2, r7, r2
   2369a:	1c59      	adds	r1, r3, #1
   2369c:	7011      	strb	r1, [r2, #0]
   2369e:	001a      	movs	r2, r3
   236a0:	2318      	movs	r3, #24
   236a2:	18fb      	adds	r3, r7, r3
   236a4:	5c9a      	ldrb	r2, [r3, r2]
   236a6:	2317      	movs	r3, #23
   236a8:	18fb      	adds	r3, r7, r3
   236aa:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   236ac:	2317      	movs	r3, #23
   236ae:	18fb      	adds	r3, r7, r3
   236b0:	781b      	ldrb	r3, [r3, #0]
   236b2:	220f      	movs	r2, #15
   236b4:	18ba      	adds	r2, r7, r2
   236b6:	7812      	ldrb	r2, [r2, #0]
   236b8:	429a      	cmp	r2, r3
   236ba:	d018      	beq.n	236ee <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   236bc:	4add      	ldr	r2, [pc, #884]	; (23a34 <spi_cmd_complete+0x778>)
   236be:	49de      	ldr	r1, [pc, #888]	; (23a38 <spi_cmd_complete+0x77c>)
   236c0:	4bde      	ldr	r3, [pc, #888]	; (23a3c <spi_cmd_complete+0x780>)
   236c2:	0018      	movs	r0, r3
   236c4:	4bde      	ldr	r3, [pc, #888]	; (23a40 <spi_cmd_complete+0x784>)
   236c6:	4798      	blx	r3
   236c8:	230f      	movs	r3, #15
   236ca:	18fb      	adds	r3, r7, r3
   236cc:	7819      	ldrb	r1, [r3, #0]
   236ce:	2317      	movs	r3, #23
   236d0:	18fb      	adds	r3, r7, r3
   236d2:	781b      	ldrb	r3, [r3, #0]
   236d4:	001a      	movs	r2, r3
   236d6:	4bdb      	ldr	r3, [pc, #876]	; (23a44 <spi_cmd_complete+0x788>)
   236d8:	0018      	movs	r0, r3
   236da:	4bd9      	ldr	r3, [pc, #868]	; (23a40 <spi_cmd_complete+0x784>)
   236dc:	4798      	blx	r3
   236de:	4bda      	ldr	r3, [pc, #872]	; (23a48 <spi_cmd_complete+0x78c>)
   236e0:	0018      	movs	r0, r3
   236e2:	4bd7      	ldr	r3, [pc, #860]	; (23a40 <spi_cmd_complete+0x784>)
   236e4:	4798      	blx	r3
		result = N_FAIL;
   236e6:	2300      	movs	r3, #0
   236e8:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   236ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   236ec:	e248      	b.n	23b80 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   236ee:	2376      	movs	r3, #118	; 0x76
   236f0:	18fb      	adds	r3, r7, r3
   236f2:	781b      	ldrb	r3, [r3, #0]
   236f4:	2276      	movs	r2, #118	; 0x76
   236f6:	18ba      	adds	r2, r7, r2
   236f8:	1c59      	adds	r1, r3, #1
   236fa:	7011      	strb	r1, [r2, #0]
   236fc:	001a      	movs	r2, r3
   236fe:	2318      	movs	r3, #24
   23700:	18fb      	adds	r3, r7, r3
   23702:	5c9a      	ldrb	r2, [r3, r2]
   23704:	2317      	movs	r3, #23
   23706:	18fb      	adds	r3, r7, r3
   23708:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2370a:	2317      	movs	r3, #23
   2370c:	18fb      	adds	r3, r7, r3
   2370e:	781b      	ldrb	r3, [r3, #0]
   23710:	2b00      	cmp	r3, #0
   23712:	d016      	beq.n	23742 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23714:	4acd      	ldr	r2, [pc, #820]	; (23a4c <spi_cmd_complete+0x790>)
   23716:	49c8      	ldr	r1, [pc, #800]	; (23a38 <spi_cmd_complete+0x77c>)
   23718:	4bc8      	ldr	r3, [pc, #800]	; (23a3c <spi_cmd_complete+0x780>)
   2371a:	0018      	movs	r0, r3
   2371c:	4bc8      	ldr	r3, [pc, #800]	; (23a40 <spi_cmd_complete+0x784>)
   2371e:	4798      	blx	r3
   23720:	2317      	movs	r3, #23
   23722:	18fb      	adds	r3, r7, r3
   23724:	781b      	ldrb	r3, [r3, #0]
   23726:	001a      	movs	r2, r3
   23728:	4bc9      	ldr	r3, [pc, #804]	; (23a50 <spi_cmd_complete+0x794>)
   2372a:	0011      	movs	r1, r2
   2372c:	0018      	movs	r0, r3
   2372e:	4bc4      	ldr	r3, [pc, #784]	; (23a40 <spi_cmd_complete+0x784>)
   23730:	4798      	blx	r3
   23732:	4bc5      	ldr	r3, [pc, #788]	; (23a48 <spi_cmd_complete+0x78c>)
   23734:	0018      	movs	r0, r3
   23736:	4bc2      	ldr	r3, [pc, #776]	; (23a40 <spi_cmd_complete+0x784>)
   23738:	4798      	blx	r3
		result = N_FAIL;
   2373a:	2300      	movs	r3, #0
   2373c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2373e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23740:	e21e      	b.n	23b80 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23742:	230f      	movs	r3, #15
   23744:	18fb      	adds	r3, r7, r3
   23746:	781b      	ldrb	r3, [r3, #0]
   23748:	2bc4      	cmp	r3, #196	; 0xc4
   2374a:	d00f      	beq.n	2376c <spi_cmd_complete+0x4b0>
   2374c:	230f      	movs	r3, #15
   2374e:	18fb      	adds	r3, r7, r3
   23750:	781b      	ldrb	r3, [r3, #0]
   23752:	2bca      	cmp	r3, #202	; 0xca
   23754:	d00a      	beq.n	2376c <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23756:	230f      	movs	r3, #15
   23758:	18fb      	adds	r3, r7, r3
   2375a:	781b      	ldrb	r3, [r3, #0]
   2375c:	2bc2      	cmp	r3, #194	; 0xc2
   2375e:	d005      	beq.n	2376c <spi_cmd_complete+0x4b0>
   23760:	230f      	movs	r3, #15
   23762:	18fb      	adds	r3, r7, r3
   23764:	781b      	ldrb	r3, [r3, #0]
   23766:	2bc8      	cmp	r3, #200	; 0xc8
   23768:	d000      	beq.n	2376c <spi_cmd_complete+0x4b0>
   2376a:	e208      	b.n	23b7e <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   2376c:	230a      	movs	r3, #10
   2376e:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   23770:	2376      	movs	r3, #118	; 0x76
   23772:	18fb      	adds	r3, r7, r3
   23774:	781a      	ldrb	r2, [r3, #0]
   23776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23778:	429a      	cmp	r2, r3
   2377a:	d218      	bcs.n	237ae <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   2377c:	2376      	movs	r3, #118	; 0x76
   2377e:	18fb      	adds	r3, r7, r3
   23780:	781b      	ldrb	r3, [r3, #0]
   23782:	2276      	movs	r2, #118	; 0x76
   23784:	18ba      	adds	r2, r7, r2
   23786:	1c59      	adds	r1, r3, #1
   23788:	7011      	strb	r1, [r2, #0]
   2378a:	001a      	movs	r2, r3
   2378c:	2318      	movs	r3, #24
   2378e:	18fb      	adds	r3, r7, r3
   23790:	5c9a      	ldrb	r2, [r3, r2]
   23792:	2317      	movs	r3, #23
   23794:	18fb      	adds	r3, r7, r3
   23796:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23798:	2317      	movs	r3, #23
   2379a:	18fb      	adds	r3, r7, r3
   2379c:	781b      	ldrb	r3, [r3, #0]
   2379e:	091b      	lsrs	r3, r3, #4
   237a0:	b2db      	uxtb	r3, r3
   237a2:	001a      	movs	r2, r3
   237a4:	230f      	movs	r3, #15
   237a6:	4013      	ands	r3, r2
   237a8:	2b0f      	cmp	r3, #15
   237aa:	d103      	bne.n	237b4 <spi_cmd_complete+0x4f8>
					break;
   237ac:	e007      	b.n	237be <spi_cmd_complete+0x502>
					retry = 0;
   237ae:	2300      	movs	r3, #0
   237b0:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   237b2:	e004      	b.n	237be <spi_cmd_complete+0x502>
			} while (retry--);
   237b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   237b6:	1e5a      	subs	r2, r3, #1
   237b8:	667a      	str	r2, [r7, #100]	; 0x64
   237ba:	2b00      	cmp	r3, #0
   237bc:	d1d8      	bne.n	23770 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   237be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   237c0:	2b00      	cmp	r3, #0
   237c2:	dc18      	bgt.n	237f6 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   237c4:	2395      	movs	r3, #149	; 0x95
   237c6:	009a      	lsls	r2, r3, #2
   237c8:	499b      	ldr	r1, [pc, #620]	; (23a38 <spi_cmd_complete+0x77c>)
   237ca:	4b9c      	ldr	r3, [pc, #624]	; (23a3c <spi_cmd_complete+0x780>)
   237cc:	0018      	movs	r0, r3
   237ce:	4b9c      	ldr	r3, [pc, #624]	; (23a40 <spi_cmd_complete+0x784>)
   237d0:	4798      	blx	r3
   237d2:	2317      	movs	r3, #23
   237d4:	18fb      	adds	r3, r7, r3
   237d6:	781b      	ldrb	r3, [r3, #0]
   237d8:	001a      	movs	r2, r3
   237da:	4b9e      	ldr	r3, [pc, #632]	; (23a54 <spi_cmd_complete+0x798>)
   237dc:	0011      	movs	r1, r2
   237de:	0018      	movs	r0, r3
   237e0:	4b97      	ldr	r3, [pc, #604]	; (23a40 <spi_cmd_complete+0x784>)
   237e2:	4798      	blx	r3
   237e4:	4b98      	ldr	r3, [pc, #608]	; (23a48 <spi_cmd_complete+0x78c>)
   237e6:	0018      	movs	r0, r3
   237e8:	4b95      	ldr	r3, [pc, #596]	; (23a40 <spi_cmd_complete+0x784>)
   237ea:	4798      	blx	r3
				result = N_RESET;
   237ec:	2301      	movs	r3, #1
   237ee:	425b      	negs	r3, r3
   237f0:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   237f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   237f4:	e1c4      	b.n	23b80 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   237f6:	230f      	movs	r3, #15
   237f8:	18fb      	adds	r3, r7, r3
   237fa:	781b      	ldrb	r3, [r3, #0]
   237fc:	2bc4      	cmp	r3, #196	; 0xc4
   237fe:	d005      	beq.n	2380c <spi_cmd_complete+0x550>
   23800:	230f      	movs	r3, #15
   23802:	18fb      	adds	r3, r7, r3
   23804:	781b      	ldrb	r3, [r3, #0]
   23806:	2bca      	cmp	r3, #202	; 0xca
   23808:	d000      	beq.n	2380c <spi_cmd_complete+0x550>
   2380a:	e08e      	b.n	2392a <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   2380c:	2376      	movs	r3, #118	; 0x76
   2380e:	18fb      	adds	r3, r7, r3
   23810:	781b      	ldrb	r3, [r3, #0]
   23812:	3303      	adds	r3, #3
   23814:	001a      	movs	r2, r3
   23816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23818:	429a      	cmp	r2, r3
   2381a:	d23c      	bcs.n	23896 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   2381c:	2376      	movs	r3, #118	; 0x76
   2381e:	18fb      	adds	r3, r7, r3
   23820:	781b      	ldrb	r3, [r3, #0]
   23822:	2276      	movs	r2, #118	; 0x76
   23824:	18ba      	adds	r2, r7, r2
   23826:	1c59      	adds	r1, r3, #1
   23828:	7011      	strb	r1, [r2, #0]
   2382a:	001a      	movs	r2, r3
   2382c:	2318      	movs	r3, #24
   2382e:	18fb      	adds	r3, r7, r3
   23830:	5c9a      	ldrb	r2, [r3, r2]
   23832:	687b      	ldr	r3, [r7, #4]
   23834:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23836:	687b      	ldr	r3, [r7, #4]
   23838:	1c5a      	adds	r2, r3, #1
   2383a:	2376      	movs	r3, #118	; 0x76
   2383c:	18fb      	adds	r3, r7, r3
   2383e:	781b      	ldrb	r3, [r3, #0]
   23840:	2176      	movs	r1, #118	; 0x76
   23842:	1879      	adds	r1, r7, r1
   23844:	1c58      	adds	r0, r3, #1
   23846:	7008      	strb	r0, [r1, #0]
   23848:	0019      	movs	r1, r3
   2384a:	2318      	movs	r3, #24
   2384c:	18fb      	adds	r3, r7, r3
   2384e:	5c5b      	ldrb	r3, [r3, r1]
   23850:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23852:	687b      	ldr	r3, [r7, #4]
   23854:	1c9a      	adds	r2, r3, #2
   23856:	2376      	movs	r3, #118	; 0x76
   23858:	18fb      	adds	r3, r7, r3
   2385a:	781b      	ldrb	r3, [r3, #0]
   2385c:	2176      	movs	r1, #118	; 0x76
   2385e:	1879      	adds	r1, r7, r1
   23860:	1c58      	adds	r0, r3, #1
   23862:	7008      	strb	r0, [r1, #0]
   23864:	0019      	movs	r1, r3
   23866:	2318      	movs	r3, #24
   23868:	18fb      	adds	r3, r7, r3
   2386a:	5c5b      	ldrb	r3, [r3, r1]
   2386c:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   2386e:	687b      	ldr	r3, [r7, #4]
   23870:	1cda      	adds	r2, r3, #3
   23872:	2376      	movs	r3, #118	; 0x76
   23874:	18fb      	adds	r3, r7, r3
   23876:	781b      	ldrb	r3, [r3, #0]
   23878:	2176      	movs	r1, #118	; 0x76
   2387a:	1879      	adds	r1, r7, r1
   2387c:	1c58      	adds	r0, r3, #1
   2387e:	7008      	strb	r0, [r1, #0]
   23880:	0019      	movs	r1, r3
   23882:	2318      	movs	r3, #24
   23884:	18fb      	adds	r3, r7, r3
   23886:	5c5b      	ldrb	r3, [r3, r1]
   23888:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2388a:	4b73      	ldr	r3, [pc, #460]	; (23a58 <spi_cmd_complete+0x79c>)
   2388c:	781b      	ldrb	r3, [r3, #0]
   2388e:	2b00      	cmp	r3, #0
   23890:	d000      	beq.n	23894 <spi_cmd_complete+0x5d8>
   23892:	e174      	b.n	23b7e <spi_cmd_complete+0x8c2>
   23894:	e011      	b.n	238ba <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   23896:	4a71      	ldr	r2, [pc, #452]	; (23a5c <spi_cmd_complete+0x7a0>)
   23898:	4967      	ldr	r1, [pc, #412]	; (23a38 <spi_cmd_complete+0x77c>)
   2389a:	4b68      	ldr	r3, [pc, #416]	; (23a3c <spi_cmd_complete+0x780>)
   2389c:	0018      	movs	r0, r3
   2389e:	4b68      	ldr	r3, [pc, #416]	; (23a40 <spi_cmd_complete+0x784>)
   238a0:	4798      	blx	r3
   238a2:	4b6f      	ldr	r3, [pc, #444]	; (23a60 <spi_cmd_complete+0x7a4>)
   238a4:	0018      	movs	r0, r3
   238a6:	4b66      	ldr	r3, [pc, #408]	; (23a40 <spi_cmd_complete+0x784>)
   238a8:	4798      	blx	r3
   238aa:	4b67      	ldr	r3, [pc, #412]	; (23a48 <spi_cmd_complete+0x78c>)
   238ac:	0018      	movs	r0, r3
   238ae:	4b64      	ldr	r3, [pc, #400]	; (23a40 <spi_cmd_complete+0x784>)
   238b0:	4798      	blx	r3
					result = N_FAIL;
   238b2:	2300      	movs	r3, #0
   238b4:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   238b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   238b8:	e162      	b.n	23b80 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   238ba:	2376      	movs	r3, #118	; 0x76
   238bc:	18fb      	adds	r3, r7, r3
   238be:	781b      	ldrb	r3, [r3, #0]
   238c0:	3301      	adds	r3, #1
   238c2:	001a      	movs	r2, r3
   238c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   238c6:	429a      	cmp	r2, r3
   238c8:	d21c      	bcs.n	23904 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   238ca:	2376      	movs	r3, #118	; 0x76
   238cc:	18fb      	adds	r3, r7, r3
   238ce:	781b      	ldrb	r3, [r3, #0]
   238d0:	2276      	movs	r2, #118	; 0x76
   238d2:	18ba      	adds	r2, r7, r2
   238d4:	1c59      	adds	r1, r3, #1
   238d6:	7011      	strb	r1, [r2, #0]
   238d8:	001a      	movs	r2, r3
   238da:	2318      	movs	r3, #24
   238dc:	18fb      	adds	r3, r7, r3
   238de:	5c9a      	ldrb	r2, [r3, r2]
   238e0:	2314      	movs	r3, #20
   238e2:	18fb      	adds	r3, r7, r3
   238e4:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   238e6:	2376      	movs	r3, #118	; 0x76
   238e8:	18fb      	adds	r3, r7, r3
   238ea:	781b      	ldrb	r3, [r3, #0]
   238ec:	2276      	movs	r2, #118	; 0x76
   238ee:	18ba      	adds	r2, r7, r2
   238f0:	1c59      	adds	r1, r3, #1
   238f2:	7011      	strb	r1, [r2, #0]
   238f4:	001a      	movs	r2, r3
   238f6:	2318      	movs	r3, #24
   238f8:	18fb      	adds	r3, r7, r3
   238fa:	5c9a      	ldrb	r2, [r3, r2]
   238fc:	2314      	movs	r3, #20
   238fe:	18fb      	adds	r3, r7, r3
   23900:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23902:	e13c      	b.n	23b7e <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23904:	239c      	movs	r3, #156	; 0x9c
   23906:	009a      	lsls	r2, r3, #2
   23908:	494b      	ldr	r1, [pc, #300]	; (23a38 <spi_cmd_complete+0x77c>)
   2390a:	4b4c      	ldr	r3, [pc, #304]	; (23a3c <spi_cmd_complete+0x780>)
   2390c:	0018      	movs	r0, r3
   2390e:	4b4c      	ldr	r3, [pc, #304]	; (23a40 <spi_cmd_complete+0x784>)
   23910:	4798      	blx	r3
   23912:	4b54      	ldr	r3, [pc, #336]	; (23a64 <spi_cmd_complete+0x7a8>)
   23914:	0018      	movs	r0, r3
   23916:	4b4a      	ldr	r3, [pc, #296]	; (23a40 <spi_cmd_complete+0x784>)
   23918:	4798      	blx	r3
   2391a:	4b4b      	ldr	r3, [pc, #300]	; (23a48 <spi_cmd_complete+0x78c>)
   2391c:	0018      	movs	r0, r3
   2391e:	4b48      	ldr	r3, [pc, #288]	; (23a40 <spi_cmd_complete+0x784>)
   23920:	4798      	blx	r3
						result = N_FAIL;
   23922:	2300      	movs	r3, #0
   23924:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23928:	e12a      	b.n	23b80 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2392a:	230f      	movs	r3, #15
   2392c:	18fb      	adds	r3, r7, r3
   2392e:	781b      	ldrb	r3, [r3, #0]
   23930:	2bc2      	cmp	r3, #194	; 0xc2
   23932:	d005      	beq.n	23940 <spi_cmd_complete+0x684>
   23934:	230f      	movs	r3, #15
   23936:	18fb      	adds	r3, r7, r3
   23938:	781b      	ldrb	r3, [r3, #0]
   2393a:	2bc8      	cmp	r3, #200	; 0xc8
   2393c:	d000      	beq.n	23940 <spi_cmd_complete+0x684>
   2393e:	e11e      	b.n	23b7e <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23940:	2300      	movs	r3, #0
   23942:	663b      	str	r3, [r7, #96]	; 0x60
   23944:	e011      	b.n	2396a <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23948:	1c5a      	adds	r2, r3, #1
   2394a:	663a      	str	r2, [r7, #96]	; 0x60
   2394c:	001a      	movs	r2, r3
   2394e:	687b      	ldr	r3, [r7, #4]
   23950:	189a      	adds	r2, r3, r2
   23952:	2376      	movs	r3, #118	; 0x76
   23954:	18fb      	adds	r3, r7, r3
   23956:	781b      	ldrb	r3, [r3, #0]
   23958:	2176      	movs	r1, #118	; 0x76
   2395a:	1879      	adds	r1, r7, r1
   2395c:	1c58      	adds	r0, r3, #1
   2395e:	7008      	strb	r0, [r1, #0]
   23960:	0019      	movs	r1, r3
   23962:	2318      	movs	r3, #24
   23964:	18fb      	adds	r3, r7, r3
   23966:	5c5b      	ldrb	r3, [r3, r1]
   23968:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2396a:	2376      	movs	r3, #118	; 0x76
   2396c:	18fb      	adds	r3, r7, r3
   2396e:	781a      	ldrb	r2, [r3, #0]
   23970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23972:	429a      	cmp	r2, r3
   23974:	d203      	bcs.n	2397e <spi_cmd_complete+0x6c2>
   23976:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23978:	683b      	ldr	r3, [r7, #0]
   2397a:	429a      	cmp	r2, r3
   2397c:	d3e3      	bcc.n	23946 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   2397e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23980:	683a      	ldr	r2, [r7, #0]
   23982:	1ad3      	subs	r3, r2, r3
   23984:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23986:	683b      	ldr	r3, [r7, #0]
   23988:	2b00      	cmp	r3, #0
   2398a:	d100      	bne.n	2398e <spi_cmd_complete+0x6d2>
   2398c:	e0f1      	b.n	23b72 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   2398e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23990:	2280      	movs	r2, #128	; 0x80
   23992:	0192      	lsls	r2, r2, #6
   23994:	1ad3      	subs	r3, r2, r3
   23996:	001a      	movs	r2, r3
   23998:	683b      	ldr	r3, [r7, #0]
   2399a:	429a      	cmp	r2, r3
   2399c:	d302      	bcc.n	239a4 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   2399e:	683b      	ldr	r3, [r7, #0]
   239a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   239a2:	e004      	b.n	239ae <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   239a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   239a6:	2280      	movs	r2, #128	; 0x80
   239a8:	0192      	lsls	r2, r2, #6
   239aa:	1ad3      	subs	r3, r2, r3
   239ac:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   239ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   239b0:	687a      	ldr	r2, [r7, #4]
   239b2:	18d3      	adds	r3, r2, r3
   239b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   239b6:	b292      	uxth	r2, r2
   239b8:	0011      	movs	r1, r2
   239ba:	0018      	movs	r0, r3
   239bc:	4b2a      	ldr	r3, [pc, #168]	; (23a68 <spi_cmd_complete+0x7ac>)
   239be:	4798      	blx	r3
   239c0:	1e03      	subs	r3, r0, #0
   239c2:	d010      	beq.n	239e6 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   239c4:	4a29      	ldr	r2, [pc, #164]	; (23a6c <spi_cmd_complete+0x7b0>)
   239c6:	491c      	ldr	r1, [pc, #112]	; (23a38 <spi_cmd_complete+0x77c>)
   239c8:	4b1c      	ldr	r3, [pc, #112]	; (23a3c <spi_cmd_complete+0x780>)
   239ca:	0018      	movs	r0, r3
   239cc:	4b1c      	ldr	r3, [pc, #112]	; (23a40 <spi_cmd_complete+0x784>)
   239ce:	4798      	blx	r3
   239d0:	4b27      	ldr	r3, [pc, #156]	; (23a70 <spi_cmd_complete+0x7b4>)
   239d2:	0018      	movs	r0, r3
   239d4:	4b1a      	ldr	r3, [pc, #104]	; (23a40 <spi_cmd_complete+0x784>)
   239d6:	4798      	blx	r3
   239d8:	4b1b      	ldr	r3, [pc, #108]	; (23a48 <spi_cmd_complete+0x78c>)
   239da:	0018      	movs	r0, r3
   239dc:	4b18      	ldr	r3, [pc, #96]	; (23a40 <spi_cmd_complete+0x784>)
   239de:	4798      	blx	r3
						result = N_FAIL;
   239e0:	2300      	movs	r3, #0
   239e2:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   239e4:	e0cb      	b.n	23b7e <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   239e6:	4b1c      	ldr	r3, [pc, #112]	; (23a58 <spi_cmd_complete+0x79c>)
   239e8:	781b      	ldrb	r3, [r3, #0]
   239ea:	2b00      	cmp	r3, #0
   239ec:	d119      	bne.n	23a22 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   239ee:	2314      	movs	r3, #20
   239f0:	18fb      	adds	r3, r7, r3
   239f2:	2102      	movs	r1, #2
   239f4:	0018      	movs	r0, r3
   239f6:	4b1c      	ldr	r3, [pc, #112]	; (23a68 <spi_cmd_complete+0x7ac>)
   239f8:	4798      	blx	r3
   239fa:	1e03      	subs	r3, r0, #0
   239fc:	d011      	beq.n	23a22 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   239fe:	23a6      	movs	r3, #166	; 0xa6
   23a00:	009a      	lsls	r2, r3, #2
   23a02:	490d      	ldr	r1, [pc, #52]	; (23a38 <spi_cmd_complete+0x77c>)
   23a04:	4b0d      	ldr	r3, [pc, #52]	; (23a3c <spi_cmd_complete+0x780>)
   23a06:	0018      	movs	r0, r3
   23a08:	4b0d      	ldr	r3, [pc, #52]	; (23a40 <spi_cmd_complete+0x784>)
   23a0a:	4798      	blx	r3
   23a0c:	4b19      	ldr	r3, [pc, #100]	; (23a74 <spi_cmd_complete+0x7b8>)
   23a0e:	0018      	movs	r0, r3
   23a10:	4b0b      	ldr	r3, [pc, #44]	; (23a40 <spi_cmd_complete+0x784>)
   23a12:	4798      	blx	r3
   23a14:	4b0c      	ldr	r3, [pc, #48]	; (23a48 <spi_cmd_complete+0x78c>)
   23a16:	0018      	movs	r0, r3
   23a18:	4b09      	ldr	r3, [pc, #36]	; (23a40 <spi_cmd_complete+0x784>)
   23a1a:	4798      	blx	r3
							result = N_FAIL;
   23a1c:	2300      	movs	r3, #0
   23a1e:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23a20:	e0ad      	b.n	23b7e <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23a22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23a26:	18d3      	adds	r3, r2, r3
   23a28:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23a2c:	683a      	ldr	r2, [r7, #0]
   23a2e:	1ad3      	subs	r3, r2, r3
   23a30:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23a32:	e09e      	b.n	23b72 <spi_cmd_complete+0x8b6>
   23a34:	0000022f 	.word	0x0000022f
   23a38:	00038c54 	.word	0x00038c54
   23a3c:	00038640 	.word	0x00038640
   23a40:	0001d7a9 	.word	0x0001d7a9
   23a44:	00038738 	.word	0x00038738
   23a48:	00038680 	.word	0x00038680
   23a4c:	00000239 	.word	0x00000239
   23a50:	00038774 	.word	0x00038774
   23a54:	000387a8 	.word	0x000387a8
   23a58:	2000412c 	.word	0x2000412c
   23a5c:	00000263 	.word	0x00000263
   23a60:	000387d8 	.word	0x000387d8
   23a64:	00038808 	.word	0x00038808
   23a68:	00022bf5 	.word	0x00022bf5
   23a6c:	0000028e 	.word	0x0000028e
   23a70:	00038838 	.word	0x00038838
   23a74:	0003886c 	.word	0x0003886c
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   23a78:	683a      	ldr	r2, [r7, #0]
   23a7a:	2380      	movs	r3, #128	; 0x80
   23a7c:	019b      	lsls	r3, r3, #6
   23a7e:	429a      	cmp	r2, r3
   23a80:	d802      	bhi.n	23a88 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23a82:	683b      	ldr	r3, [r7, #0]
   23a84:	65bb      	str	r3, [r7, #88]	; 0x58
   23a86:	e002      	b.n	23a8e <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   23a88:	2380      	movs	r3, #128	; 0x80
   23a8a:	019b      	lsls	r3, r3, #6
   23a8c:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23a8e:	230a      	movs	r3, #10
   23a90:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23a92:	2317      	movs	r3, #23
   23a94:	18fb      	adds	r3, r7, r3
   23a96:	2101      	movs	r1, #1
   23a98:	0018      	movs	r0, r3
   23a9a:	4b3b      	ldr	r3, [pc, #236]	; (23b88 <spi_cmd_complete+0x8cc>)
   23a9c:	4798      	blx	r3
   23a9e:	1e03      	subs	r3, r0, #0
   23aa0:	d011      	beq.n	23ac6 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   23aa2:	23ae      	movs	r3, #174	; 0xae
   23aa4:	009a      	lsls	r2, r3, #2
   23aa6:	4939      	ldr	r1, [pc, #228]	; (23b8c <spi_cmd_complete+0x8d0>)
   23aa8:	4b39      	ldr	r3, [pc, #228]	; (23b90 <spi_cmd_complete+0x8d4>)
   23aaa:	0018      	movs	r0, r3
   23aac:	4b39      	ldr	r3, [pc, #228]	; (23b94 <spi_cmd_complete+0x8d8>)
   23aae:	4798      	blx	r3
   23ab0:	4b39      	ldr	r3, [pc, #228]	; (23b98 <spi_cmd_complete+0x8dc>)
   23ab2:	0018      	movs	r0, r3
   23ab4:	4b37      	ldr	r3, [pc, #220]	; (23b94 <spi_cmd_complete+0x8d8>)
   23ab6:	4798      	blx	r3
   23ab8:	4b38      	ldr	r3, [pc, #224]	; (23b9c <spi_cmd_complete+0x8e0>)
   23aba:	0018      	movs	r0, r3
   23abc:	4b35      	ldr	r3, [pc, #212]	; (23b94 <spi_cmd_complete+0x8d8>)
   23abe:	4798      	blx	r3
							result = N_FAIL;
   23ac0:	2300      	movs	r3, #0
   23ac2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23ac4:	e010      	b.n	23ae8 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   23ac6:	2317      	movs	r3, #23
   23ac8:	18fb      	adds	r3, r7, r3
   23aca:	781b      	ldrb	r3, [r3, #0]
   23acc:	091b      	lsrs	r3, r3, #4
   23ace:	b2db      	uxtb	r3, r3
   23ad0:	001a      	movs	r2, r3
   23ad2:	230f      	movs	r3, #15
   23ad4:	4013      	ands	r3, r2
   23ad6:	2b0f      	cmp	r3, #15
   23ad8:	d005      	beq.n	23ae6 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   23ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23adc:	1e5a      	subs	r2, r3, #1
   23ade:	667a      	str	r2, [r7, #100]	; 0x64
   23ae0:	2b00      	cmp	r3, #0
   23ae2:	d1d6      	bne.n	23a92 <spi_cmd_complete+0x7d6>
   23ae4:	e000      	b.n	23ae8 <spi_cmd_complete+0x82c>
							break;
   23ae6:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   23ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23aea:	2b00      	cmp	r3, #0
   23aec:	d046      	beq.n	23b7c <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23af0:	687a      	ldr	r2, [r7, #4]
   23af2:	18d3      	adds	r3, r2, r3
   23af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23af6:	b292      	uxth	r2, r2
   23af8:	0011      	movs	r1, r2
   23afa:	0018      	movs	r0, r3
   23afc:	4b22      	ldr	r3, [pc, #136]	; (23b88 <spi_cmd_complete+0x8cc>)
   23afe:	4798      	blx	r3
   23b00:	1e03      	subs	r3, r0, #0
   23b02:	d011      	beq.n	23b28 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23b04:	23b2      	movs	r3, #178	; 0xb2
   23b06:	009a      	lsls	r2, r3, #2
   23b08:	4920      	ldr	r1, [pc, #128]	; (23b8c <spi_cmd_complete+0x8d0>)
   23b0a:	4b21      	ldr	r3, [pc, #132]	; (23b90 <spi_cmd_complete+0x8d4>)
   23b0c:	0018      	movs	r0, r3
   23b0e:	4b21      	ldr	r3, [pc, #132]	; (23b94 <spi_cmd_complete+0x8d8>)
   23b10:	4798      	blx	r3
   23b12:	4b23      	ldr	r3, [pc, #140]	; (23ba0 <spi_cmd_complete+0x8e4>)
   23b14:	0018      	movs	r0, r3
   23b16:	4b1f      	ldr	r3, [pc, #124]	; (23b94 <spi_cmd_complete+0x8d8>)
   23b18:	4798      	blx	r3
   23b1a:	4b20      	ldr	r3, [pc, #128]	; (23b9c <spi_cmd_complete+0x8e0>)
   23b1c:	0018      	movs	r0, r3
   23b1e:	4b1d      	ldr	r3, [pc, #116]	; (23b94 <spi_cmd_complete+0x8d8>)
   23b20:	4798      	blx	r3
						result = N_FAIL;
   23b22:	2300      	movs	r3, #0
   23b24:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23b26:	e02a      	b.n	23b7e <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23b28:	4b1e      	ldr	r3, [pc, #120]	; (23ba4 <spi_cmd_complete+0x8e8>)
   23b2a:	781b      	ldrb	r3, [r3, #0]
   23b2c:	2b00      	cmp	r3, #0
   23b2e:	d118      	bne.n	23b62 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23b30:	2314      	movs	r3, #20
   23b32:	18fb      	adds	r3, r7, r3
   23b34:	2102      	movs	r1, #2
   23b36:	0018      	movs	r0, r3
   23b38:	4b13      	ldr	r3, [pc, #76]	; (23b88 <spi_cmd_complete+0x8cc>)
   23b3a:	4798      	blx	r3
   23b3c:	1e03      	subs	r3, r0, #0
   23b3e:	d010      	beq.n	23b62 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23b40:	4a19      	ldr	r2, [pc, #100]	; (23ba8 <spi_cmd_complete+0x8ec>)
   23b42:	4912      	ldr	r1, [pc, #72]	; (23b8c <spi_cmd_complete+0x8d0>)
   23b44:	4b12      	ldr	r3, [pc, #72]	; (23b90 <spi_cmd_complete+0x8d4>)
   23b46:	0018      	movs	r0, r3
   23b48:	4b12      	ldr	r3, [pc, #72]	; (23b94 <spi_cmd_complete+0x8d8>)
   23b4a:	4798      	blx	r3
   23b4c:	4b17      	ldr	r3, [pc, #92]	; (23bac <spi_cmd_complete+0x8f0>)
   23b4e:	0018      	movs	r0, r3
   23b50:	4b10      	ldr	r3, [pc, #64]	; (23b94 <spi_cmd_complete+0x8d8>)
   23b52:	4798      	blx	r3
   23b54:	4b11      	ldr	r3, [pc, #68]	; (23b9c <spi_cmd_complete+0x8e0>)
   23b56:	0018      	movs	r0, r3
   23b58:	4b0e      	ldr	r3, [pc, #56]	; (23b94 <spi_cmd_complete+0x8d8>)
   23b5a:	4798      	blx	r3
							result = N_FAIL;
   23b5c:	2300      	movs	r3, #0
   23b5e:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23b60:	e00d      	b.n	23b7e <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23b66:	18d3      	adds	r3, r2, r3
   23b68:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23b6c:	683a      	ldr	r2, [r7, #0]
   23b6e:	1ad3      	subs	r3, r2, r3
   23b70:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23b72:	683b      	ldr	r3, [r7, #0]
   23b74:	2b00      	cmp	r3, #0
   23b76:	d000      	beq.n	23b7a <spi_cmd_complete+0x8be>
   23b78:	e77e      	b.n	23a78 <spi_cmd_complete+0x7bc>
   23b7a:	e000      	b.n	23b7e <spi_cmd_complete+0x8c2>
						break;
   23b7c:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23b80:	0018      	movs	r0, r3
   23b82:	46bd      	mov	sp, r7
   23b84:	b01f      	add	sp, #124	; 0x7c
   23b86:	bd90      	pop	{r4, r7, pc}
   23b88:	00022bf5 	.word	0x00022bf5
   23b8c:	00038c54 	.word	0x00038c54
   23b90:	00038640 	.word	0x00038640
   23b94:	0001d7a9 	.word	0x0001d7a9
   23b98:	000388a4 	.word	0x000388a4
   23b9c:	00038680 	.word	0x00038680
   23ba0:	00038838 	.word	0x00038838
   23ba4:	2000412c 	.word	0x2000412c
   23ba8:	000002d2 	.word	0x000002d2
   23bac:	0003886c 	.word	0x0003886c

00023bb0 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   23bb0:	b580      	push	{r7, lr}
   23bb2:	b086      	sub	sp, #24
   23bb4:	af00      	add	r7, sp, #0
   23bb6:	6078      	str	r0, [r7, #4]
   23bb8:	000a      	movs	r2, r1
   23bba:	1cbb      	adds	r3, r7, #2
   23bbc:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   23bbe:	2313      	movs	r3, #19
   23bc0:	18fb      	adds	r3, r7, r3
   23bc2:	2201      	movs	r2, #1
   23bc4:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   23bc6:	230c      	movs	r3, #12
   23bc8:	18fb      	adds	r3, r7, r3
   23bca:	2200      	movs	r2, #0
   23bcc:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23bce:	2316      	movs	r3, #22
   23bd0:	18fb      	adds	r3, r7, r3
   23bd2:	2200      	movs	r2, #0
   23bd4:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   23bd6:	1cbb      	adds	r3, r7, #2
   23bd8:	881a      	ldrh	r2, [r3, #0]
   23bda:	2380      	movs	r3, #128	; 0x80
   23bdc:	019b      	lsls	r3, r3, #6
   23bde:	429a      	cmp	r2, r3
   23be0:	d805      	bhi.n	23bee <spi_data_write+0x3e>
			nbytes = sz;
   23be2:	2314      	movs	r3, #20
   23be4:	18fb      	adds	r3, r7, r3
   23be6:	1cba      	adds	r2, r7, #2
   23be8:	8812      	ldrh	r2, [r2, #0]
   23bea:	801a      	strh	r2, [r3, #0]
   23bec:	e004      	b.n	23bf8 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   23bee:	2314      	movs	r3, #20
   23bf0:	18fb      	adds	r3, r7, r3
   23bf2:	2280      	movs	r2, #128	; 0x80
   23bf4:	0192      	lsls	r2, r2, #6
   23bf6:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   23bf8:	2311      	movs	r3, #17
   23bfa:	18fb      	adds	r3, r7, r3
   23bfc:	22f0      	movs	r2, #240	; 0xf0
   23bfe:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23c00:	2316      	movs	r3, #22
   23c02:	18fb      	adds	r3, r7, r3
   23c04:	2200      	movs	r2, #0
   23c06:	5e9b      	ldrsh	r3, [r3, r2]
   23c08:	2b00      	cmp	r3, #0
   23c0a:	d10f      	bne.n	23c2c <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   23c0c:	1cbb      	adds	r3, r7, #2
   23c0e:	881a      	ldrh	r2, [r3, #0]
   23c10:	2380      	movs	r3, #128	; 0x80
   23c12:	019b      	lsls	r3, r3, #6
   23c14:	429a      	cmp	r2, r3
   23c16:	d804      	bhi.n	23c22 <spi_data_write+0x72>
				order = 0x3;
   23c18:	2312      	movs	r3, #18
   23c1a:	18fb      	adds	r3, r7, r3
   23c1c:	2203      	movs	r2, #3
   23c1e:	701a      	strb	r2, [r3, #0]
   23c20:	e013      	b.n	23c4a <spi_data_write+0x9a>
			else
				order = 0x1;
   23c22:	2312      	movs	r3, #18
   23c24:	18fb      	adds	r3, r7, r3
   23c26:	2201      	movs	r2, #1
   23c28:	701a      	strb	r2, [r3, #0]
   23c2a:	e00e      	b.n	23c4a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23c2c:	1cbb      	adds	r3, r7, #2
   23c2e:	881a      	ldrh	r2, [r3, #0]
   23c30:	2380      	movs	r3, #128	; 0x80
   23c32:	019b      	lsls	r3, r3, #6
   23c34:	429a      	cmp	r2, r3
   23c36:	d804      	bhi.n	23c42 <spi_data_write+0x92>
				order = 0x3;
   23c38:	2312      	movs	r3, #18
   23c3a:	18fb      	adds	r3, r7, r3
   23c3c:	2203      	movs	r2, #3
   23c3e:	701a      	strb	r2, [r3, #0]
   23c40:	e003      	b.n	23c4a <spi_data_write+0x9a>
			else
				order = 0x2;
   23c42:	2312      	movs	r3, #18
   23c44:	18fb      	adds	r3, r7, r3
   23c46:	2202      	movs	r2, #2
   23c48:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   23c4a:	2311      	movs	r3, #17
   23c4c:	18fb      	adds	r3, r7, r3
   23c4e:	781a      	ldrb	r2, [r3, #0]
   23c50:	2312      	movs	r3, #18
   23c52:	18fb      	adds	r3, r7, r3
   23c54:	781b      	ldrb	r3, [r3, #0]
   23c56:	4313      	orrs	r3, r2
   23c58:	b2da      	uxtb	r2, r3
   23c5a:	2311      	movs	r3, #17
   23c5c:	18fb      	adds	r3, r7, r3
   23c5e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23c60:	2311      	movs	r3, #17
   23c62:	18fb      	adds	r3, r7, r3
   23c64:	2101      	movs	r1, #1
   23c66:	0018      	movs	r0, r3
   23c68:	4b3c      	ldr	r3, [pc, #240]	; (23d5c <spi_data_write+0x1ac>)
   23c6a:	4798      	blx	r3
   23c6c:	1e03      	subs	r3, r0, #0
   23c6e:	d012      	beq.n	23c96 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   23c70:	4a3b      	ldr	r2, [pc, #236]	; (23d60 <spi_data_write+0x1b0>)
   23c72:	493c      	ldr	r1, [pc, #240]	; (23d64 <spi_data_write+0x1b4>)
   23c74:	4b3c      	ldr	r3, [pc, #240]	; (23d68 <spi_data_write+0x1b8>)
   23c76:	0018      	movs	r0, r3
   23c78:	4b3c      	ldr	r3, [pc, #240]	; (23d6c <spi_data_write+0x1bc>)
   23c7a:	4798      	blx	r3
   23c7c:	4b3c      	ldr	r3, [pc, #240]	; (23d70 <spi_data_write+0x1c0>)
   23c7e:	0018      	movs	r0, r3
   23c80:	4b3a      	ldr	r3, [pc, #232]	; (23d6c <spi_data_write+0x1bc>)
   23c82:	4798      	blx	r3
   23c84:	4b3b      	ldr	r3, [pc, #236]	; (23d74 <spi_data_write+0x1c4>)
   23c86:	0018      	movs	r0, r3
   23c88:	4b38      	ldr	r3, [pc, #224]	; (23d6c <spi_data_write+0x1bc>)
   23c8a:	4798      	blx	r3
			result = N_FAIL;
   23c8c:	2313      	movs	r3, #19
   23c8e:	18fb      	adds	r3, r7, r3
   23c90:	2200      	movs	r2, #0
   23c92:	701a      	strb	r2, [r3, #0]
			break;
   23c94:	e059      	b.n	23d4a <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   23c96:	2316      	movs	r3, #22
   23c98:	18fb      	adds	r3, r7, r3
   23c9a:	2200      	movs	r2, #0
   23c9c:	5e9b      	ldrsh	r3, [r3, r2]
   23c9e:	687a      	ldr	r2, [r7, #4]
   23ca0:	18d2      	adds	r2, r2, r3
   23ca2:	2314      	movs	r3, #20
   23ca4:	18fb      	adds	r3, r7, r3
   23ca6:	881b      	ldrh	r3, [r3, #0]
   23ca8:	0019      	movs	r1, r3
   23caa:	0010      	movs	r0, r2
   23cac:	4b2b      	ldr	r3, [pc, #172]	; (23d5c <spi_data_write+0x1ac>)
   23cae:	4798      	blx	r3
   23cb0:	1e03      	subs	r3, r0, #0
   23cb2:	d012      	beq.n	23cda <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   23cb4:	4a30      	ldr	r2, [pc, #192]	; (23d78 <spi_data_write+0x1c8>)
   23cb6:	492b      	ldr	r1, [pc, #172]	; (23d64 <spi_data_write+0x1b4>)
   23cb8:	4b2b      	ldr	r3, [pc, #172]	; (23d68 <spi_data_write+0x1b8>)
   23cba:	0018      	movs	r0, r3
   23cbc:	4b2b      	ldr	r3, [pc, #172]	; (23d6c <spi_data_write+0x1bc>)
   23cbe:	4798      	blx	r3
   23cc0:	4b2e      	ldr	r3, [pc, #184]	; (23d7c <spi_data_write+0x1cc>)
   23cc2:	0018      	movs	r0, r3
   23cc4:	4b29      	ldr	r3, [pc, #164]	; (23d6c <spi_data_write+0x1bc>)
   23cc6:	4798      	blx	r3
   23cc8:	4b2a      	ldr	r3, [pc, #168]	; (23d74 <spi_data_write+0x1c4>)
   23cca:	0018      	movs	r0, r3
   23ccc:	4b27      	ldr	r3, [pc, #156]	; (23d6c <spi_data_write+0x1bc>)
   23cce:	4798      	blx	r3
			result = N_FAIL;
   23cd0:	2313      	movs	r3, #19
   23cd2:	18fb      	adds	r3, r7, r3
   23cd4:	2200      	movs	r2, #0
   23cd6:	701a      	strb	r2, [r3, #0]
			break;
   23cd8:	e037      	b.n	23d4a <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   23cda:	4b29      	ldr	r3, [pc, #164]	; (23d80 <spi_data_write+0x1d0>)
   23cdc:	781b      	ldrb	r3, [r3, #0]
   23cde:	2b00      	cmp	r3, #0
   23ce0:	d11b      	bne.n	23d1a <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   23ce2:	230c      	movs	r3, #12
   23ce4:	18fb      	adds	r3, r7, r3
   23ce6:	2102      	movs	r1, #2
   23ce8:	0018      	movs	r0, r3
   23cea:	4b1c      	ldr	r3, [pc, #112]	; (23d5c <spi_data_write+0x1ac>)
   23cec:	4798      	blx	r3
   23cee:	1e03      	subs	r3, r0, #0
   23cf0:	d013      	beq.n	23d1a <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   23cf2:	23d7      	movs	r3, #215	; 0xd7
   23cf4:	009a      	lsls	r2, r3, #2
   23cf6:	491b      	ldr	r1, [pc, #108]	; (23d64 <spi_data_write+0x1b4>)
   23cf8:	4b1b      	ldr	r3, [pc, #108]	; (23d68 <spi_data_write+0x1b8>)
   23cfa:	0018      	movs	r0, r3
   23cfc:	4b1b      	ldr	r3, [pc, #108]	; (23d6c <spi_data_write+0x1bc>)
   23cfe:	4798      	blx	r3
   23d00:	4b20      	ldr	r3, [pc, #128]	; (23d84 <spi_data_write+0x1d4>)
   23d02:	0018      	movs	r0, r3
   23d04:	4b19      	ldr	r3, [pc, #100]	; (23d6c <spi_data_write+0x1bc>)
   23d06:	4798      	blx	r3
   23d08:	4b1a      	ldr	r3, [pc, #104]	; (23d74 <spi_data_write+0x1c4>)
   23d0a:	0018      	movs	r0, r3
   23d0c:	4b17      	ldr	r3, [pc, #92]	; (23d6c <spi_data_write+0x1bc>)
   23d0e:	4798      	blx	r3
				result = N_FAIL;
   23d10:	2313      	movs	r3, #19
   23d12:	18fb      	adds	r3, r7, r3
   23d14:	2200      	movs	r2, #0
   23d16:	701a      	strb	r2, [r3, #0]
				break;
   23d18:	e017      	b.n	23d4a <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   23d1a:	2316      	movs	r3, #22
   23d1c:	18fb      	adds	r3, r7, r3
   23d1e:	881a      	ldrh	r2, [r3, #0]
   23d20:	2314      	movs	r3, #20
   23d22:	18fb      	adds	r3, r7, r3
   23d24:	881b      	ldrh	r3, [r3, #0]
   23d26:	18d3      	adds	r3, r2, r3
   23d28:	b29a      	uxth	r2, r3
   23d2a:	2316      	movs	r3, #22
   23d2c:	18fb      	adds	r3, r7, r3
   23d2e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   23d30:	1cbb      	adds	r3, r7, #2
   23d32:	1cb9      	adds	r1, r7, #2
   23d34:	2214      	movs	r2, #20
   23d36:	18ba      	adds	r2, r7, r2
   23d38:	8809      	ldrh	r1, [r1, #0]
   23d3a:	8812      	ldrh	r2, [r2, #0]
   23d3c:	1a8a      	subs	r2, r1, r2
   23d3e:	801a      	strh	r2, [r3, #0]
	} while (sz);
   23d40:	1cbb      	adds	r3, r7, #2
   23d42:	881b      	ldrh	r3, [r3, #0]
   23d44:	2b00      	cmp	r3, #0
   23d46:	d000      	beq.n	23d4a <spi_data_write+0x19a>
   23d48:	e745      	b.n	23bd6 <spi_data_write+0x26>


	return result;
   23d4a:	2313      	movs	r3, #19
   23d4c:	18fb      	adds	r3, r7, r3
   23d4e:	781b      	ldrb	r3, [r3, #0]
   23d50:	b25b      	sxtb	r3, r3
}
   23d52:	0018      	movs	r0, r3
   23d54:	46bd      	mov	sp, r7
   23d56:	b006      	add	sp, #24
   23d58:	bd80      	pop	{r7, pc}
   23d5a:	46c0      	nop			; (mov r8, r8)
   23d5c:	00022c39 	.word	0x00022c39
   23d60:	00000349 	.word	0x00000349
   23d64:	00038c68 	.word	0x00038c68
   23d68:	00038640 	.word	0x00038640
   23d6c:	0001d7a9 	.word	0x0001d7a9
   23d70:	00038908 	.word	0x00038908
   23d74:	00038680 	.word	0x00038680
   23d78:	00000352 	.word	0x00000352
   23d7c:	00038940 	.word	0x00038940
   23d80:	2000412c 	.word	0x2000412c
   23d84:	00038974 	.word	0x00038974

00023d88 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   23d88:	b590      	push	{r4, r7, lr}
   23d8a:	b087      	sub	sp, #28
   23d8c:	af02      	add	r7, sp, #8
   23d8e:	6078      	str	r0, [r7, #4]
   23d90:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23d92:	230f      	movs	r3, #15
   23d94:	18fb      	adds	r3, r7, r3
   23d96:	220a      	movs	r2, #10
   23d98:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23d9a:	230c      	movs	r3, #12
   23d9c:	18fb      	adds	r3, r7, r3
   23d9e:	2201      	movs	r2, #1
   23da0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   23da2:	230e      	movs	r3, #14
   23da4:	18fb      	adds	r3, r7, r3
   23da6:	22c9      	movs	r2, #201	; 0xc9
   23da8:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   23daa:	230d      	movs	r3, #13
   23dac:	18fb      	adds	r3, r7, r3
   23dae:	2200      	movs	r2, #0
   23db0:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   23db2:	687b      	ldr	r3, [r7, #4]
   23db4:	2b30      	cmp	r3, #48	; 0x30
   23db6:	d808      	bhi.n	23dca <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   23db8:	230e      	movs	r3, #14
   23dba:	18fb      	adds	r3, r7, r3
   23dbc:	22c3      	movs	r2, #195	; 0xc3
   23dbe:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23dc0:	230d      	movs	r3, #13
   23dc2:	18fb      	adds	r3, r7, r3
   23dc4:	2201      	movs	r2, #1
   23dc6:	701a      	strb	r2, [r3, #0]
   23dc8:	e007      	b.n	23dda <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   23dca:	230e      	movs	r3, #14
   23dcc:	18fb      	adds	r3, r7, r3
   23dce:	22c9      	movs	r2, #201	; 0xc9
   23dd0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23dd2:	230d      	movs	r3, #13
   23dd4:	18fb      	adds	r3, r7, r3
   23dd6:	2200      	movs	r2, #0
   23dd8:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   23dda:	003a      	movs	r2, r7
   23ddc:	6879      	ldr	r1, [r7, #4]
   23dde:	230e      	movs	r3, #14
   23de0:	18fb      	adds	r3, r7, r3
   23de2:	7818      	ldrb	r0, [r3, #0]
   23de4:	230d      	movs	r3, #13
   23de6:	18fb      	adds	r3, r7, r3
   23de8:	781b      	ldrb	r3, [r3, #0]
   23dea:	9300      	str	r3, [sp, #0]
   23dec:	2304      	movs	r3, #4
   23dee:	4c2e      	ldr	r4, [pc, #184]	; (23ea8 <spi_write_reg+0x120>)
   23df0:	47a0      	blx	r4
   23df2:	0002      	movs	r2, r0
   23df4:	230c      	movs	r3, #12
   23df6:	18fb      	adds	r3, r7, r3
   23df8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23dfa:	230c      	movs	r3, #12
   23dfc:	18fb      	adds	r3, r7, r3
   23dfe:	781b      	ldrb	r3, [r3, #0]
   23e00:	b25b      	sxtb	r3, r3
   23e02:	2b01      	cmp	r3, #1
   23e04:	d010      	beq.n	23e28 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   23e06:	4a29      	ldr	r2, [pc, #164]	; (23eac <spi_write_reg+0x124>)
   23e08:	4929      	ldr	r1, [pc, #164]	; (23eb0 <spi_write_reg+0x128>)
   23e0a:	4b2a      	ldr	r3, [pc, #168]	; (23eb4 <spi_write_reg+0x12c>)
   23e0c:	0018      	movs	r0, r3
   23e0e:	4b2a      	ldr	r3, [pc, #168]	; (23eb8 <spi_write_reg+0x130>)
   23e10:	4798      	blx	r3
   23e12:	687a      	ldr	r2, [r7, #4]
   23e14:	4b29      	ldr	r3, [pc, #164]	; (23ebc <spi_write_reg+0x134>)
   23e16:	0011      	movs	r1, r2
   23e18:	0018      	movs	r0, r3
   23e1a:	4b27      	ldr	r3, [pc, #156]	; (23eb8 <spi_write_reg+0x130>)
   23e1c:	4798      	blx	r3
   23e1e:	4b28      	ldr	r3, [pc, #160]	; (23ec0 <spi_write_reg+0x138>)
   23e20:	0018      	movs	r0, r3
   23e22:	4b25      	ldr	r3, [pc, #148]	; (23eb8 <spi_write_reg+0x130>)
   23e24:	4798      	blx	r3
		goto _FAIL_;
   23e26:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   23e28:	230c      	movs	r3, #12
   23e2a:	18fb      	adds	r3, r7, r3
   23e2c:	781b      	ldrb	r3, [r3, #0]
   23e2e:	b25b      	sxtb	r3, r3
   23e30:	2b01      	cmp	r3, #1
   23e32:	d030      	beq.n	23e96 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23e34:	2001      	movs	r0, #1
   23e36:	4b23      	ldr	r3, [pc, #140]	; (23ec4 <spi_write_reg+0x13c>)
   23e38:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23e3a:	2300      	movs	r3, #0
   23e3c:	9300      	str	r3, [sp, #0]
   23e3e:	2300      	movs	r3, #0
   23e40:	2200      	movs	r2, #0
   23e42:	2100      	movs	r1, #0
   23e44:	20cf      	movs	r0, #207	; 0xcf
   23e46:	4c20      	ldr	r4, [pc, #128]	; (23ec8 <spi_write_reg+0x140>)
   23e48:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23e4a:	20cf      	movs	r0, #207	; 0xcf
   23e4c:	4b1f      	ldr	r3, [pc, #124]	; (23ecc <spi_write_reg+0x144>)
   23e4e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   23e50:	23ea      	movs	r3, #234	; 0xea
   23e52:	009a      	lsls	r2, r3, #2
   23e54:	4916      	ldr	r1, [pc, #88]	; (23eb0 <spi_write_reg+0x128>)
   23e56:	4b17      	ldr	r3, [pc, #92]	; (23eb4 <spi_write_reg+0x12c>)
   23e58:	0018      	movs	r0, r3
   23e5a:	4b17      	ldr	r3, [pc, #92]	; (23eb8 <spi_write_reg+0x130>)
   23e5c:	4798      	blx	r3
   23e5e:	230f      	movs	r3, #15
   23e60:	18fb      	adds	r3, r7, r3
   23e62:	7819      	ldrb	r1, [r3, #0]
   23e64:	683b      	ldr	r3, [r7, #0]
   23e66:	687a      	ldr	r2, [r7, #4]
   23e68:	4819      	ldr	r0, [pc, #100]	; (23ed0 <spi_write_reg+0x148>)
   23e6a:	4c13      	ldr	r4, [pc, #76]	; (23eb8 <spi_write_reg+0x130>)
   23e6c:	47a0      	blx	r4
   23e6e:	4b14      	ldr	r3, [pc, #80]	; (23ec0 <spi_write_reg+0x138>)
   23e70:	0018      	movs	r0, r3
   23e72:	4b11      	ldr	r3, [pc, #68]	; (23eb8 <spi_write_reg+0x130>)
   23e74:	4798      	blx	r3
		nm_bsp_sleep(1);
   23e76:	2001      	movs	r0, #1
   23e78:	4b12      	ldr	r3, [pc, #72]	; (23ec4 <spi_write_reg+0x13c>)
   23e7a:	4798      	blx	r3
		retry--;
   23e7c:	230f      	movs	r3, #15
   23e7e:	18fb      	adds	r3, r7, r3
   23e80:	781a      	ldrb	r2, [r3, #0]
   23e82:	230f      	movs	r3, #15
   23e84:	18fb      	adds	r3, r7, r3
   23e86:	3a01      	subs	r2, #1
   23e88:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23e8a:	230f      	movs	r3, #15
   23e8c:	18fb      	adds	r3, r7, r3
   23e8e:	781b      	ldrb	r3, [r3, #0]
   23e90:	2b00      	cmp	r3, #0
   23e92:	d000      	beq.n	23e96 <spi_write_reg+0x10e>
   23e94:	e78d      	b.n	23db2 <spi_write_reg+0x2a>
	}

	return result;
   23e96:	230c      	movs	r3, #12
   23e98:	18fb      	adds	r3, r7, r3
   23e9a:	781b      	ldrb	r3, [r3, #0]
   23e9c:	b25b      	sxtb	r3, r3
}
   23e9e:	0018      	movs	r0, r3
   23ea0:	46bd      	mov	sp, r7
   23ea2:	b005      	add	sp, #20
   23ea4:	bd90      	pop	{r4, r7, pc}
   23ea6:	46c0      	nop			; (mov r8, r8)
   23ea8:	000232bd 	.word	0x000232bd
   23eac:	0000039d 	.word	0x0000039d
   23eb0:	00038c78 	.word	0x00038c78
   23eb4:	00038640 	.word	0x00038640
   23eb8:	0001d7a9 	.word	0x0001d7a9
   23ebc:	000389ac 	.word	0x000389ac
   23ec0:	00038680 	.word	0x00038680
   23ec4:	0001fbfd 	.word	0x0001fbfd
   23ec8:	00022d41 	.word	0x00022d41
   23ecc:	00023181 	.word	0x00023181
   23ed0:	000389d8 	.word	0x000389d8

00023ed4 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   23ed4:	b590      	push	{r4, r7, lr}
   23ed6:	b089      	sub	sp, #36	; 0x24
   23ed8:	af02      	add	r7, sp, #8
   23eda:	60f8      	str	r0, [r7, #12]
   23edc:	60b9      	str	r1, [r7, #8]
   23ede:	1dbb      	adds	r3, r7, #6
   23ee0:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23ee2:	2316      	movs	r3, #22
   23ee4:	18fb      	adds	r3, r7, r3
   23ee6:	220a      	movs	r2, #10
   23ee8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   23eea:	2315      	movs	r3, #21
   23eec:	18fb      	adds	r3, r7, r3
   23eee:	22c7      	movs	r2, #199	; 0xc7
   23ef0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   23ef2:	1dbb      	adds	r3, r7, #6
   23ef4:	881a      	ldrh	r2, [r3, #0]
   23ef6:	68f9      	ldr	r1, [r7, #12]
   23ef8:	2315      	movs	r3, #21
   23efa:	18fb      	adds	r3, r7, r3
   23efc:	7818      	ldrb	r0, [r3, #0]
   23efe:	2300      	movs	r3, #0
   23f00:	9300      	str	r3, [sp, #0]
   23f02:	0013      	movs	r3, r2
   23f04:	2200      	movs	r2, #0
   23f06:	4c4d      	ldr	r4, [pc, #308]	; (2403c <nm_spi_write+0x168>)
   23f08:	47a0      	blx	r4
   23f0a:	0002      	movs	r2, r0
   23f0c:	2317      	movs	r3, #23
   23f0e:	18fb      	adds	r3, r7, r3
   23f10:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23f12:	2317      	movs	r3, #23
   23f14:	18fb      	adds	r3, r7, r3
   23f16:	781b      	ldrb	r3, [r3, #0]
   23f18:	b25b      	sxtb	r3, r3
   23f1a:	2b01      	cmp	r3, #1
   23f1c:	d010      	beq.n	23f40 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   23f1e:	4a48      	ldr	r2, [pc, #288]	; (24040 <nm_spi_write+0x16c>)
   23f20:	4948      	ldr	r1, [pc, #288]	; (24044 <nm_spi_write+0x170>)
   23f22:	4b49      	ldr	r3, [pc, #292]	; (24048 <nm_spi_write+0x174>)
   23f24:	0018      	movs	r0, r3
   23f26:	4b49      	ldr	r3, [pc, #292]	; (2404c <nm_spi_write+0x178>)
   23f28:	4798      	blx	r3
   23f2a:	68fa      	ldr	r2, [r7, #12]
   23f2c:	4b48      	ldr	r3, [pc, #288]	; (24050 <nm_spi_write+0x17c>)
   23f2e:	0011      	movs	r1, r2
   23f30:	0018      	movs	r0, r3
   23f32:	4b46      	ldr	r3, [pc, #280]	; (2404c <nm_spi_write+0x178>)
   23f34:	4798      	blx	r3
   23f36:	4b47      	ldr	r3, [pc, #284]	; (24054 <nm_spi_write+0x180>)
   23f38:	0018      	movs	r0, r3
   23f3a:	4b44      	ldr	r3, [pc, #272]	; (2404c <nm_spi_write+0x178>)
   23f3c:	4798      	blx	r3
		goto _FAIL_;
   23f3e:	e03e      	b.n	23fbe <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   23f40:	2317      	movs	r3, #23
   23f42:	18fc      	adds	r4, r7, r3
   23f44:	1dbb      	adds	r3, r7, #6
   23f46:	881a      	ldrh	r2, [r3, #0]
   23f48:	68bb      	ldr	r3, [r7, #8]
   23f4a:	0011      	movs	r1, r2
   23f4c:	0018      	movs	r0, r3
   23f4e:	4b42      	ldr	r3, [pc, #264]	; (24058 <nm_spi_write+0x184>)
   23f50:	4798      	blx	r3
   23f52:	0003      	movs	r3, r0
   23f54:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23f56:	2317      	movs	r3, #23
   23f58:	18fb      	adds	r3, r7, r3
   23f5a:	781b      	ldrb	r3, [r3, #0]
   23f5c:	b25b      	sxtb	r3, r3
   23f5e:	2b01      	cmp	r3, #1
   23f60:	d00e      	beq.n	23f80 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23f62:	4a3e      	ldr	r2, [pc, #248]	; (2405c <nm_spi_write+0x188>)
   23f64:	4937      	ldr	r1, [pc, #220]	; (24044 <nm_spi_write+0x170>)
   23f66:	4b38      	ldr	r3, [pc, #224]	; (24048 <nm_spi_write+0x174>)
   23f68:	0018      	movs	r0, r3
   23f6a:	4b38      	ldr	r3, [pc, #224]	; (2404c <nm_spi_write+0x178>)
   23f6c:	4798      	blx	r3
   23f6e:	4b3c      	ldr	r3, [pc, #240]	; (24060 <nm_spi_write+0x18c>)
   23f70:	0018      	movs	r0, r3
   23f72:	4b36      	ldr	r3, [pc, #216]	; (2404c <nm_spi_write+0x178>)
   23f74:	4798      	blx	r3
   23f76:	4b37      	ldr	r3, [pc, #220]	; (24054 <nm_spi_write+0x180>)
   23f78:	0018      	movs	r0, r3
   23f7a:	4b34      	ldr	r3, [pc, #208]	; (2404c <nm_spi_write+0x178>)
   23f7c:	4798      	blx	r3
		goto _FAIL_;
   23f7e:	e01e      	b.n	23fbe <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   23f80:	2317      	movs	r3, #23
   23f82:	18fc      	adds	r4, r7, r3
   23f84:	2315      	movs	r3, #21
   23f86:	18fb      	adds	r3, r7, r3
   23f88:	781b      	ldrb	r3, [r3, #0]
   23f8a:	0018      	movs	r0, r3
   23f8c:	4b35      	ldr	r3, [pc, #212]	; (24064 <nm_spi_write+0x190>)
   23f8e:	4798      	blx	r3
   23f90:	0003      	movs	r3, r0
   23f92:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23f94:	2317      	movs	r3, #23
   23f96:	18fb      	adds	r3, r7, r3
   23f98:	781b      	ldrb	r3, [r3, #0]
   23f9a:	b25b      	sxtb	r3, r3
   23f9c:	2b01      	cmp	r3, #1
   23f9e:	d00e      	beq.n	23fbe <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23fa0:	4a31      	ldr	r2, [pc, #196]	; (24068 <nm_spi_write+0x194>)
   23fa2:	4928      	ldr	r1, [pc, #160]	; (24044 <nm_spi_write+0x170>)
   23fa4:	4b28      	ldr	r3, [pc, #160]	; (24048 <nm_spi_write+0x174>)
   23fa6:	0018      	movs	r0, r3
   23fa8:	4b28      	ldr	r3, [pc, #160]	; (2404c <nm_spi_write+0x178>)
   23faa:	4798      	blx	r3
   23fac:	4b2c      	ldr	r3, [pc, #176]	; (24060 <nm_spi_write+0x18c>)
   23fae:	0018      	movs	r0, r3
   23fb0:	4b26      	ldr	r3, [pc, #152]	; (2404c <nm_spi_write+0x178>)
   23fb2:	4798      	blx	r3
   23fb4:	4b27      	ldr	r3, [pc, #156]	; (24054 <nm_spi_write+0x180>)
   23fb6:	0018      	movs	r0, r3
   23fb8:	4b24      	ldr	r3, [pc, #144]	; (2404c <nm_spi_write+0x178>)
   23fba:	4798      	blx	r3
		goto _FAIL_;
   23fbc:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   23fbe:	2317      	movs	r3, #23
   23fc0:	18fb      	adds	r3, r7, r3
   23fc2:	781b      	ldrb	r3, [r3, #0]
   23fc4:	b25b      	sxtb	r3, r3
   23fc6:	2b01      	cmp	r3, #1
   23fc8:	d030      	beq.n	2402c <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   23fca:	2001      	movs	r0, #1
   23fcc:	4b27      	ldr	r3, [pc, #156]	; (2406c <nm_spi_write+0x198>)
   23fce:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23fd0:	2300      	movs	r3, #0
   23fd2:	9300      	str	r3, [sp, #0]
   23fd4:	2300      	movs	r3, #0
   23fd6:	2200      	movs	r2, #0
   23fd8:	2100      	movs	r1, #0
   23fda:	20cf      	movs	r0, #207	; 0xcf
   23fdc:	4c24      	ldr	r4, [pc, #144]	; (24070 <nm_spi_write+0x19c>)
   23fde:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23fe0:	20cf      	movs	r0, #207	; 0xcf
   23fe2:	4b24      	ldr	r3, [pc, #144]	; (24074 <nm_spi_write+0x1a0>)
   23fe4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23fe6:	4a24      	ldr	r2, [pc, #144]	; (24078 <nm_spi_write+0x1a4>)
   23fe8:	4916      	ldr	r1, [pc, #88]	; (24044 <nm_spi_write+0x170>)
   23fea:	4b17      	ldr	r3, [pc, #92]	; (24048 <nm_spi_write+0x174>)
   23fec:	0018      	movs	r0, r3
   23fee:	4b17      	ldr	r3, [pc, #92]	; (2404c <nm_spi_write+0x178>)
   23ff0:	4798      	blx	r3
   23ff2:	2316      	movs	r3, #22
   23ff4:	18fb      	adds	r3, r7, r3
   23ff6:	7819      	ldrb	r1, [r3, #0]
   23ff8:	1dbb      	adds	r3, r7, #6
   23ffa:	881b      	ldrh	r3, [r3, #0]
   23ffc:	68fa      	ldr	r2, [r7, #12]
   23ffe:	481f      	ldr	r0, [pc, #124]	; (2407c <nm_spi_write+0x1a8>)
   24000:	4c12      	ldr	r4, [pc, #72]	; (2404c <nm_spi_write+0x178>)
   24002:	47a0      	blx	r4
   24004:	4b13      	ldr	r3, [pc, #76]	; (24054 <nm_spi_write+0x180>)
   24006:	0018      	movs	r0, r3
   24008:	4b10      	ldr	r3, [pc, #64]	; (2404c <nm_spi_write+0x178>)
   2400a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2400c:	2001      	movs	r0, #1
   2400e:	4b17      	ldr	r3, [pc, #92]	; (2406c <nm_spi_write+0x198>)
   24010:	4798      	blx	r3
		retry--;
   24012:	2316      	movs	r3, #22
   24014:	18fb      	adds	r3, r7, r3
   24016:	781a      	ldrb	r2, [r3, #0]
   24018:	2316      	movs	r3, #22
   2401a:	18fb      	adds	r3, r7, r3
   2401c:	3a01      	subs	r2, #1
   2401e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24020:	2316      	movs	r3, #22
   24022:	18fb      	adds	r3, r7, r3
   24024:	781b      	ldrb	r3, [r3, #0]
   24026:	2b00      	cmp	r3, #0
   24028:	d000      	beq.n	2402c <nm_spi_write+0x158>
   2402a:	e762      	b.n	23ef2 <nm_spi_write+0x1e>
	}


	return result;
   2402c:	2317      	movs	r3, #23
   2402e:	18fb      	adds	r3, r7, r3
   24030:	781b      	ldrb	r3, [r3, #0]
   24032:	b25b      	sxtb	r3, r3
}
   24034:	0018      	movs	r0, r3
   24036:	46bd      	mov	sp, r7
   24038:	b007      	add	sp, #28
   2403a:	bd90      	pop	{r4, r7, pc}
   2403c:	000232bd 	.word	0x000232bd
   24040:	000003cf 	.word	0x000003cf
   24044:	00038c88 	.word	0x00038c88
   24048:	00038640 	.word	0x00038640
   2404c:	0001d7a9 	.word	0x0001d7a9
   24050:	000389f4 	.word	0x000389f4
   24054:	00038680 	.word	0x00038680
   24058:	00023bb1 	.word	0x00023bb1
   2405c:	000003d9 	.word	0x000003d9
   24060:	00038a24 	.word	0x00038a24
   24064:	00023081 	.word	0x00023081
   24068:	000003e1 	.word	0x000003e1
   2406c:	0001fbfd 	.word	0x0001fbfd
   24070:	00022d41 	.word	0x00022d41
   24074:	00023181 	.word	0x00023181
   24078:	000003eb 	.word	0x000003eb
   2407c:	00038a4c 	.word	0x00038a4c

00024080 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24080:	b590      	push	{r4, r7, lr}
   24082:	b087      	sub	sp, #28
   24084:	af02      	add	r7, sp, #8
   24086:	6078      	str	r0, [r7, #4]
   24088:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2408a:	230f      	movs	r3, #15
   2408c:	18fb      	adds	r3, r7, r3
   2408e:	220a      	movs	r2, #10
   24090:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24092:	230c      	movs	r3, #12
   24094:	18fb      	adds	r3, r7, r3
   24096:	2201      	movs	r2, #1
   24098:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2409a:	230e      	movs	r3, #14
   2409c:	18fb      	adds	r3, r7, r3
   2409e:	22ca      	movs	r2, #202	; 0xca
   240a0:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   240a2:	230d      	movs	r3, #13
   240a4:	18fb      	adds	r3, r7, r3
   240a6:	2200      	movs	r2, #0
   240a8:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   240aa:	687b      	ldr	r3, [r7, #4]
   240ac:	2bff      	cmp	r3, #255	; 0xff
   240ae:	d808      	bhi.n	240c2 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   240b0:	230e      	movs	r3, #14
   240b2:	18fb      	adds	r3, r7, r3
   240b4:	22c4      	movs	r2, #196	; 0xc4
   240b6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   240b8:	230d      	movs	r3, #13
   240ba:	18fb      	adds	r3, r7, r3
   240bc:	2201      	movs	r2, #1
   240be:	701a      	strb	r2, [r3, #0]
   240c0:	e007      	b.n	240d2 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   240c2:	230e      	movs	r3, #14
   240c4:	18fb      	adds	r3, r7, r3
   240c6:	22ca      	movs	r2, #202	; 0xca
   240c8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   240ca:	230d      	movs	r3, #13
   240cc:	18fb      	adds	r3, r7, r3
   240ce:	2200      	movs	r2, #0
   240d0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   240d2:	2308      	movs	r3, #8
   240d4:	18fa      	adds	r2, r7, r3
   240d6:	6879      	ldr	r1, [r7, #4]
   240d8:	230e      	movs	r3, #14
   240da:	18fb      	adds	r3, r7, r3
   240dc:	7818      	ldrb	r0, [r3, #0]
   240de:	230d      	movs	r3, #13
   240e0:	18fb      	adds	r3, r7, r3
   240e2:	781b      	ldrb	r3, [r3, #0]
   240e4:	9300      	str	r3, [sp, #0]
   240e6:	2304      	movs	r3, #4
   240e8:	4c37      	ldr	r4, [pc, #220]	; (241c8 <spi_read_reg+0x148>)
   240ea:	47a0      	blx	r4
   240ec:	0002      	movs	r2, r0
   240ee:	230c      	movs	r3, #12
   240f0:	18fb      	adds	r3, r7, r3
   240f2:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   240f4:	230c      	movs	r3, #12
   240f6:	18fb      	adds	r3, r7, r3
   240f8:	781b      	ldrb	r3, [r3, #0]
   240fa:	b25b      	sxtb	r3, r3
   240fc:	2b01      	cmp	r3, #1
   240fe:	d010      	beq.n	24122 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24100:	4a32      	ldr	r2, [pc, #200]	; (241cc <spi_read_reg+0x14c>)
   24102:	4933      	ldr	r1, [pc, #204]	; (241d0 <spi_read_reg+0x150>)
   24104:	4b33      	ldr	r3, [pc, #204]	; (241d4 <spi_read_reg+0x154>)
   24106:	0018      	movs	r0, r3
   24108:	4b33      	ldr	r3, [pc, #204]	; (241d8 <spi_read_reg+0x158>)
   2410a:	4798      	blx	r3
   2410c:	687a      	ldr	r2, [r7, #4]
   2410e:	4b33      	ldr	r3, [pc, #204]	; (241dc <spi_read_reg+0x15c>)
   24110:	0011      	movs	r1, r2
   24112:	0018      	movs	r0, r3
   24114:	4b30      	ldr	r3, [pc, #192]	; (241d8 <spi_read_reg+0x158>)
   24116:	4798      	blx	r3
   24118:	4b31      	ldr	r3, [pc, #196]	; (241e0 <spi_read_reg+0x160>)
   2411a:	0018      	movs	r0, r3
   2411c:	4b2e      	ldr	r3, [pc, #184]	; (241d8 <spi_read_reg+0x158>)
   2411e:	4798      	blx	r3
		goto _FAIL_;
   24120:	e014      	b.n	2414c <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24122:	2308      	movs	r3, #8
   24124:	18fb      	adds	r3, r7, r3
   24126:	781b      	ldrb	r3, [r3, #0]
   24128:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2412a:	2308      	movs	r3, #8
   2412c:	18fb      	adds	r3, r7, r3
   2412e:	785b      	ldrb	r3, [r3, #1]
   24130:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24132:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24134:	2308      	movs	r3, #8
   24136:	18fb      	adds	r3, r7, r3
   24138:	789b      	ldrb	r3, [r3, #2]
   2413a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   2413c:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   2413e:	2308      	movs	r3, #8
   24140:	18fb      	adds	r3, r7, r3
   24142:	78db      	ldrb	r3, [r3, #3]
   24144:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   24146:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   24148:	683b      	ldr	r3, [r7, #0]
   2414a:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   2414c:	230c      	movs	r3, #12
   2414e:	18fb      	adds	r3, r7, r3
   24150:	781b      	ldrb	r3, [r3, #0]
   24152:	b25b      	sxtb	r3, r3
   24154:	2b01      	cmp	r3, #1
   24156:	d02f      	beq.n	241b8 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24158:	2001      	movs	r0, #1
   2415a:	4b22      	ldr	r3, [pc, #136]	; (241e4 <spi_read_reg+0x164>)
   2415c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2415e:	2300      	movs	r3, #0
   24160:	9300      	str	r3, [sp, #0]
   24162:	2300      	movs	r3, #0
   24164:	2200      	movs	r2, #0
   24166:	2100      	movs	r1, #0
   24168:	20cf      	movs	r0, #207	; 0xcf
   2416a:	4c1f      	ldr	r4, [pc, #124]	; (241e8 <spi_read_reg+0x168>)
   2416c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2416e:	20cf      	movs	r0, #207	; 0xcf
   24170:	4b1e      	ldr	r3, [pc, #120]	; (241ec <spi_read_reg+0x16c>)
   24172:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24174:	4a1e      	ldr	r2, [pc, #120]	; (241f0 <spi_read_reg+0x170>)
   24176:	4916      	ldr	r1, [pc, #88]	; (241d0 <spi_read_reg+0x150>)
   24178:	4b16      	ldr	r3, [pc, #88]	; (241d4 <spi_read_reg+0x154>)
   2417a:	0018      	movs	r0, r3
   2417c:	4b16      	ldr	r3, [pc, #88]	; (241d8 <spi_read_reg+0x158>)
   2417e:	4798      	blx	r3
   24180:	230f      	movs	r3, #15
   24182:	18fb      	adds	r3, r7, r3
   24184:	7819      	ldrb	r1, [r3, #0]
   24186:	687a      	ldr	r2, [r7, #4]
   24188:	4b1a      	ldr	r3, [pc, #104]	; (241f4 <spi_read_reg+0x174>)
   2418a:	0018      	movs	r0, r3
   2418c:	4b12      	ldr	r3, [pc, #72]	; (241d8 <spi_read_reg+0x158>)
   2418e:	4798      	blx	r3
   24190:	4b13      	ldr	r3, [pc, #76]	; (241e0 <spi_read_reg+0x160>)
   24192:	0018      	movs	r0, r3
   24194:	4b10      	ldr	r3, [pc, #64]	; (241d8 <spi_read_reg+0x158>)
   24196:	4798      	blx	r3
		nm_bsp_sleep(1);
   24198:	2001      	movs	r0, #1
   2419a:	4b12      	ldr	r3, [pc, #72]	; (241e4 <spi_read_reg+0x164>)
   2419c:	4798      	blx	r3
		retry--;
   2419e:	230f      	movs	r3, #15
   241a0:	18fb      	adds	r3, r7, r3
   241a2:	781a      	ldrb	r2, [r3, #0]
   241a4:	230f      	movs	r3, #15
   241a6:	18fb      	adds	r3, r7, r3
   241a8:	3a01      	subs	r2, #1
   241aa:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   241ac:	230f      	movs	r3, #15
   241ae:	18fb      	adds	r3, r7, r3
   241b0:	781b      	ldrb	r3, [r3, #0]
   241b2:	2b00      	cmp	r3, #0
   241b4:	d000      	beq.n	241b8 <spi_read_reg+0x138>
   241b6:	e778      	b.n	240aa <spi_read_reg+0x2a>
	}
		
	return result;
   241b8:	230c      	movs	r3, #12
   241ba:	18fb      	adds	r3, r7, r3
   241bc:	781b      	ldrb	r3, [r3, #0]
   241be:	b25b      	sxtb	r3, r3
}
   241c0:	0018      	movs	r0, r3
   241c2:	46bd      	mov	sp, r7
   241c4:	b005      	add	sp, #20
   241c6:	bd90      	pop	{r4, r7, pc}
   241c8:	000232bd 	.word	0x000232bd
   241cc:	00000423 	.word	0x00000423
   241d0:	00038c98 	.word	0x00038c98
   241d4:	00038640 	.word	0x00038640
   241d8:	0001d7a9 	.word	0x0001d7a9
   241dc:	00038a68 	.word	0x00038a68
   241e0:	00038680 	.word	0x00038680
   241e4:	0001fbfd 	.word	0x0001fbfd
   241e8:	00022d41 	.word	0x00022d41
   241ec:	00023181 	.word	0x00023181
   241f0:	00000435 	.word	0x00000435
   241f4:	00038a94 	.word	0x00038a94

000241f8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   241f8:	b590      	push	{r4, r7, lr}
   241fa:	b089      	sub	sp, #36	; 0x24
   241fc:	af02      	add	r7, sp, #8
   241fe:	60f8      	str	r0, [r7, #12]
   24200:	60b9      	str	r1, [r7, #8]
   24202:	1dbb      	adds	r3, r7, #6
   24204:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24206:	2316      	movs	r3, #22
   24208:	18fb      	adds	r3, r7, r3
   2420a:	22c8      	movs	r2, #200	; 0xc8
   2420c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2420e:	2317      	movs	r3, #23
   24210:	18fb      	adds	r3, r7, r3
   24212:	220a      	movs	r2, #10
   24214:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24216:	1dbb      	adds	r3, r7, #6
   24218:	881c      	ldrh	r4, [r3, #0]
   2421a:	68ba      	ldr	r2, [r7, #8]
   2421c:	68f9      	ldr	r1, [r7, #12]
   2421e:	2316      	movs	r3, #22
   24220:	18fb      	adds	r3, r7, r3
   24222:	7818      	ldrb	r0, [r3, #0]
   24224:	2300      	movs	r3, #0
   24226:	9300      	str	r3, [sp, #0]
   24228:	0023      	movs	r3, r4
   2422a:	4c2e      	ldr	r4, [pc, #184]	; (242e4 <nm_spi_read+0xec>)
   2422c:	47a0      	blx	r4
   2422e:	0002      	movs	r2, r0
   24230:	2315      	movs	r3, #21
   24232:	18fb      	adds	r3, r7, r3
   24234:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24236:	2315      	movs	r3, #21
   24238:	18fb      	adds	r3, r7, r3
   2423a:	781b      	ldrb	r3, [r3, #0]
   2423c:	b25b      	sxtb	r3, r3
   2423e:	2b01      	cmp	r3, #1
   24240:	d010      	beq.n	24264 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24242:	4a29      	ldr	r2, [pc, #164]	; (242e8 <nm_spi_read+0xf0>)
   24244:	4929      	ldr	r1, [pc, #164]	; (242ec <nm_spi_read+0xf4>)
   24246:	4b2a      	ldr	r3, [pc, #168]	; (242f0 <nm_spi_read+0xf8>)
   24248:	0018      	movs	r0, r3
   2424a:	4b2a      	ldr	r3, [pc, #168]	; (242f4 <nm_spi_read+0xfc>)
   2424c:	4798      	blx	r3
   2424e:	68fa      	ldr	r2, [r7, #12]
   24250:	4b29      	ldr	r3, [pc, #164]	; (242f8 <nm_spi_read+0x100>)
   24252:	0011      	movs	r1, r2
   24254:	0018      	movs	r0, r3
   24256:	4b27      	ldr	r3, [pc, #156]	; (242f4 <nm_spi_read+0xfc>)
   24258:	4798      	blx	r3
   2425a:	4b28      	ldr	r3, [pc, #160]	; (242fc <nm_spi_read+0x104>)
   2425c:	0018      	movs	r0, r3
   2425e:	4b25      	ldr	r3, [pc, #148]	; (242f4 <nm_spi_read+0xfc>)
   24260:	4798      	blx	r3
		goto _FAIL_;
   24262:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24264:	2315      	movs	r3, #21
   24266:	18fb      	adds	r3, r7, r3
   24268:	781b      	ldrb	r3, [r3, #0]
   2426a:	b25b      	sxtb	r3, r3
   2426c:	2b01      	cmp	r3, #1
   2426e:	d030      	beq.n	242d2 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24270:	2001      	movs	r0, #1
   24272:	4b23      	ldr	r3, [pc, #140]	; (24300 <nm_spi_read+0x108>)
   24274:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24276:	2300      	movs	r3, #0
   24278:	9300      	str	r3, [sp, #0]
   2427a:	2300      	movs	r3, #0
   2427c:	2200      	movs	r2, #0
   2427e:	2100      	movs	r1, #0
   24280:	20cf      	movs	r0, #207	; 0xcf
   24282:	4c20      	ldr	r4, [pc, #128]	; (24304 <nm_spi_read+0x10c>)
   24284:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24286:	20cf      	movs	r0, #207	; 0xcf
   24288:	4b1f      	ldr	r3, [pc, #124]	; (24308 <nm_spi_read+0x110>)
   2428a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2428c:	4a1f      	ldr	r2, [pc, #124]	; (2430c <nm_spi_read+0x114>)
   2428e:	4917      	ldr	r1, [pc, #92]	; (242ec <nm_spi_read+0xf4>)
   24290:	4b17      	ldr	r3, [pc, #92]	; (242f0 <nm_spi_read+0xf8>)
   24292:	0018      	movs	r0, r3
   24294:	4b17      	ldr	r3, [pc, #92]	; (242f4 <nm_spi_read+0xfc>)
   24296:	4798      	blx	r3
   24298:	2317      	movs	r3, #23
   2429a:	18fb      	adds	r3, r7, r3
   2429c:	7819      	ldrb	r1, [r3, #0]
   2429e:	1dbb      	adds	r3, r7, #6
   242a0:	881b      	ldrh	r3, [r3, #0]
   242a2:	68fa      	ldr	r2, [r7, #12]
   242a4:	481a      	ldr	r0, [pc, #104]	; (24310 <nm_spi_read+0x118>)
   242a6:	4c13      	ldr	r4, [pc, #76]	; (242f4 <nm_spi_read+0xfc>)
   242a8:	47a0      	blx	r4
   242aa:	4b14      	ldr	r3, [pc, #80]	; (242fc <nm_spi_read+0x104>)
   242ac:	0018      	movs	r0, r3
   242ae:	4b11      	ldr	r3, [pc, #68]	; (242f4 <nm_spi_read+0xfc>)
   242b0:	4798      	blx	r3
		nm_bsp_sleep(1);
   242b2:	2001      	movs	r0, #1
   242b4:	4b12      	ldr	r3, [pc, #72]	; (24300 <nm_spi_read+0x108>)
   242b6:	4798      	blx	r3
		retry--;
   242b8:	2317      	movs	r3, #23
   242ba:	18fb      	adds	r3, r7, r3
   242bc:	781a      	ldrb	r2, [r3, #0]
   242be:	2317      	movs	r3, #23
   242c0:	18fb      	adds	r3, r7, r3
   242c2:	3a01      	subs	r2, #1
   242c4:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   242c6:	2317      	movs	r3, #23
   242c8:	18fb      	adds	r3, r7, r3
   242ca:	781b      	ldrb	r3, [r3, #0]
   242cc:	2b00      	cmp	r3, #0
   242ce:	d000      	beq.n	242d2 <nm_spi_read+0xda>
   242d0:	e7a1      	b.n	24216 <nm_spi_read+0x1e>
	}

	return result;
   242d2:	2315      	movs	r3, #21
   242d4:	18fb      	adds	r3, r7, r3
   242d6:	781b      	ldrb	r3, [r3, #0]
   242d8:	b25b      	sxtb	r3, r3
}
   242da:	0018      	movs	r0, r3
   242dc:	46bd      	mov	sp, r7
   242de:	b007      	add	sp, #28
   242e0:	bd90      	pop	{r4, r7, pc}
   242e2:	46c0      	nop			; (mov r8, r8)
   242e4:	000232bd 	.word	0x000232bd
   242e8:	00000472 	.word	0x00000472
   242ec:	00038ca8 	.word	0x00038ca8
   242f0:	00038640 	.word	0x00038640
   242f4:	0001d7a9 	.word	0x0001d7a9
   242f8:	00038aac 	.word	0x00038aac
   242fc:	00038680 	.word	0x00038680
   24300:	0001fbfd 	.word	0x0001fbfd
   24304:	00022d41 	.word	0x00022d41
   24308:	00023181 	.word	0x00023181
   2430c:	0000047d 	.word	0x0000047d
   24310:	00038a4c 	.word	0x00038a4c

00024314 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24314:	b580      	push	{r7, lr}
   24316:	b082      	sub	sp, #8
   24318:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2431a:	4b0c      	ldr	r3, [pc, #48]	; (2434c <spi_init_pkt_sz+0x38>)
   2431c:	0018      	movs	r0, r3
   2431e:	4b0c      	ldr	r3, [pc, #48]	; (24350 <spi_init_pkt_sz+0x3c>)
   24320:	4798      	blx	r3
   24322:	0003      	movs	r3, r0
   24324:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   24326:	687b      	ldr	r3, [r7, #4]
   24328:	2270      	movs	r2, #112	; 0x70
   2432a:	4393      	bics	r3, r2
   2432c:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   2432e:	687b      	ldr	r3, [r7, #4]
   24330:	2250      	movs	r2, #80	; 0x50
   24332:	4313      	orrs	r3, r2
   24334:	607b      	str	r3, [r7, #4]
   24336:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   24338:	687b      	ldr	r3, [r7, #4]
   2433a:	4a04      	ldr	r2, [pc, #16]	; (2434c <spi_init_pkt_sz+0x38>)
   2433c:	0019      	movs	r1, r3
   2433e:	0010      	movs	r0, r2
   24340:	4b04      	ldr	r3, [pc, #16]	; (24354 <spi_init_pkt_sz+0x40>)
   24342:	4798      	blx	r3
}
   24344:	46c0      	nop			; (mov r8, r8)
   24346:	46bd      	mov	sp, r7
   24348:	b002      	add	sp, #8
   2434a:	bd80      	pop	{r7, pc}
   2434c:	0000e824 	.word	0x0000e824
   24350:	000244ed 	.word	0x000244ed
   24354:	00024561 	.word	0x00024561

00024358 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   24358:	b590      	push	{r4, r7, lr}
   2435a:	b083      	sub	sp, #12
   2435c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2435e:	2300      	movs	r3, #0
   24360:	9300      	str	r3, [sp, #0]
   24362:	2300      	movs	r3, #0
   24364:	2200      	movs	r2, #0
   24366:	2100      	movs	r1, #0
   24368:	20cf      	movs	r0, #207	; 0xcf
   2436a:	4c05      	ldr	r4, [pc, #20]	; (24380 <nm_spi_reset+0x28>)
   2436c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   2436e:	20cf      	movs	r0, #207	; 0xcf
   24370:	4b04      	ldr	r3, [pc, #16]	; (24384 <nm_spi_reset+0x2c>)
   24372:	4798      	blx	r3
	return M2M_SUCCESS;
   24374:	2300      	movs	r3, #0
}
   24376:	0018      	movs	r0, r3
   24378:	46bd      	mov	sp, r7
   2437a:	b001      	add	sp, #4
   2437c:	bd90      	pop	{r4, r7, pc}
   2437e:	46c0      	nop			; (mov r8, r8)
   24380:	00022d41 	.word	0x00022d41
   24384:	00023181 	.word	0x00023181

00024388 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   24388:	b580      	push	{r7, lr}
   2438a:	b082      	sub	sp, #8
   2438c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   2438e:	2300      	movs	r3, #0
   24390:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   24392:	4b40      	ldr	r3, [pc, #256]	; (24494 <nm_spi_init+0x10c>)
   24394:	2200      	movs	r2, #0
   24396:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   24398:	003b      	movs	r3, r7
   2439a:	4a3f      	ldr	r2, [pc, #252]	; (24498 <nm_spi_init+0x110>)
   2439c:	0019      	movs	r1, r3
   2439e:	0010      	movs	r0, r2
   243a0:	4b3e      	ldr	r3, [pc, #248]	; (2449c <nm_spi_init+0x114>)
   243a2:	4798      	blx	r3
   243a4:	1e03      	subs	r3, r0, #0
   243a6:	d129      	bne.n	243fc <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   243a8:	4b3a      	ldr	r3, [pc, #232]	; (24494 <nm_spi_init+0x10c>)
   243aa:	2201      	movs	r2, #1
   243ac:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   243ae:	2398      	movs	r3, #152	; 0x98
   243b0:	00da      	lsls	r2, r3, #3
   243b2:	493b      	ldr	r1, [pc, #236]	; (244a0 <nm_spi_init+0x118>)
   243b4:	4b3b      	ldr	r3, [pc, #236]	; (244a4 <nm_spi_init+0x11c>)
   243b6:	0018      	movs	r0, r3
   243b8:	4b3b      	ldr	r3, [pc, #236]	; (244a8 <nm_spi_init+0x120>)
   243ba:	4798      	blx	r3
   243bc:	4b3b      	ldr	r3, [pc, #236]	; (244ac <nm_spi_init+0x124>)
   243be:	0018      	movs	r0, r3
   243c0:	4b39      	ldr	r3, [pc, #228]	; (244a8 <nm_spi_init+0x120>)
   243c2:	4798      	blx	r3
   243c4:	4b3a      	ldr	r3, [pc, #232]	; (244b0 <nm_spi_init+0x128>)
   243c6:	0018      	movs	r0, r3
   243c8:	4b37      	ldr	r3, [pc, #220]	; (244a8 <nm_spi_init+0x120>)
   243ca:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   243cc:	003b      	movs	r3, r7
   243ce:	4a32      	ldr	r2, [pc, #200]	; (24498 <nm_spi_init+0x110>)
   243d0:	0019      	movs	r1, r3
   243d2:	0010      	movs	r0, r2
   243d4:	4b31      	ldr	r3, [pc, #196]	; (2449c <nm_spi_init+0x114>)
   243d6:	4798      	blx	r3
   243d8:	1e03      	subs	r3, r0, #0
   243da:	d10f      	bne.n	243fc <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   243dc:	4a35      	ldr	r2, [pc, #212]	; (244b4 <nm_spi_init+0x12c>)
   243de:	4930      	ldr	r1, [pc, #192]	; (244a0 <nm_spi_init+0x118>)
   243e0:	4b30      	ldr	r3, [pc, #192]	; (244a4 <nm_spi_init+0x11c>)
   243e2:	0018      	movs	r0, r3
   243e4:	4b30      	ldr	r3, [pc, #192]	; (244a8 <nm_spi_init+0x120>)
   243e6:	4798      	blx	r3
   243e8:	4b33      	ldr	r3, [pc, #204]	; (244b8 <nm_spi_init+0x130>)
   243ea:	0018      	movs	r0, r3
   243ec:	4b2e      	ldr	r3, [pc, #184]	; (244a8 <nm_spi_init+0x120>)
   243ee:	4798      	blx	r3
   243f0:	4b2f      	ldr	r3, [pc, #188]	; (244b0 <nm_spi_init+0x128>)
   243f2:	0018      	movs	r0, r3
   243f4:	4b2c      	ldr	r3, [pc, #176]	; (244a8 <nm_spi_init+0x120>)
   243f6:	4798      	blx	r3
			return 0;
   243f8:	2300      	movs	r3, #0
   243fa:	e047      	b.n	2448c <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   243fc:	4b25      	ldr	r3, [pc, #148]	; (24494 <nm_spi_init+0x10c>)
   243fe:	781b      	ldrb	r3, [r3, #0]
   24400:	2b00      	cmp	r3, #0
   24402:	d126      	bne.n	24452 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24404:	683b      	ldr	r3, [r7, #0]
   24406:	220c      	movs	r2, #12
   24408:	4393      	bics	r3, r2
   2440a:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   2440c:	683b      	ldr	r3, [r7, #0]
   2440e:	2270      	movs	r2, #112	; 0x70
   24410:	4393      	bics	r3, r2
   24412:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24414:	683b      	ldr	r3, [r7, #0]
   24416:	2250      	movs	r2, #80	; 0x50
   24418:	4313      	orrs	r3, r2
   2441a:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   2441c:	683b      	ldr	r3, [r7, #0]
   2441e:	4a1e      	ldr	r2, [pc, #120]	; (24498 <nm_spi_init+0x110>)
   24420:	0019      	movs	r1, r3
   24422:	0010      	movs	r0, r2
   24424:	4b25      	ldr	r3, [pc, #148]	; (244bc <nm_spi_init+0x134>)
   24426:	4798      	blx	r3
   24428:	1e03      	subs	r3, r0, #0
   2442a:	d10f      	bne.n	2444c <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   2442c:	4a24      	ldr	r2, [pc, #144]	; (244c0 <nm_spi_init+0x138>)
   2442e:	491c      	ldr	r1, [pc, #112]	; (244a0 <nm_spi_init+0x118>)
   24430:	4b1c      	ldr	r3, [pc, #112]	; (244a4 <nm_spi_init+0x11c>)
   24432:	0018      	movs	r0, r3
   24434:	4b1c      	ldr	r3, [pc, #112]	; (244a8 <nm_spi_init+0x120>)
   24436:	4798      	blx	r3
   24438:	4b22      	ldr	r3, [pc, #136]	; (244c4 <nm_spi_init+0x13c>)
   2443a:	0018      	movs	r0, r3
   2443c:	4b1a      	ldr	r3, [pc, #104]	; (244a8 <nm_spi_init+0x120>)
   2443e:	4798      	blx	r3
   24440:	4b1b      	ldr	r3, [pc, #108]	; (244b0 <nm_spi_init+0x128>)
   24442:	0018      	movs	r0, r3
   24444:	4b18      	ldr	r3, [pc, #96]	; (244a8 <nm_spi_init+0x120>)
   24446:	4798      	blx	r3
			return 0;
   24448:	2300      	movs	r3, #0
   2444a:	e01f      	b.n	2448c <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   2444c:	4b11      	ldr	r3, [pc, #68]	; (24494 <nm_spi_init+0x10c>)
   2444e:	2201      	movs	r2, #1
   24450:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24452:	1d3a      	adds	r2, r7, #4
   24454:	2380      	movs	r3, #128	; 0x80
   24456:	015b      	lsls	r3, r3, #5
   24458:	0011      	movs	r1, r2
   2445a:	0018      	movs	r0, r3
   2445c:	4b0f      	ldr	r3, [pc, #60]	; (2449c <nm_spi_init+0x114>)
   2445e:	4798      	blx	r3
   24460:	1e03      	subs	r3, r0, #0
   24462:	d110      	bne.n	24486 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24464:	4a18      	ldr	r2, [pc, #96]	; (244c8 <nm_spi_init+0x140>)
   24466:	490e      	ldr	r1, [pc, #56]	; (244a0 <nm_spi_init+0x118>)
   24468:	4b0e      	ldr	r3, [pc, #56]	; (244a4 <nm_spi_init+0x11c>)
   2446a:	0018      	movs	r0, r3
   2446c:	4b0e      	ldr	r3, [pc, #56]	; (244a8 <nm_spi_init+0x120>)
   2446e:	4798      	blx	r3
   24470:	4b16      	ldr	r3, [pc, #88]	; (244cc <nm_spi_init+0x144>)
   24472:	0018      	movs	r0, r3
   24474:	4b0c      	ldr	r3, [pc, #48]	; (244a8 <nm_spi_init+0x120>)
   24476:	4798      	blx	r3
   24478:	4b0d      	ldr	r3, [pc, #52]	; (244b0 <nm_spi_init+0x128>)
   2447a:	0018      	movs	r0, r3
   2447c:	4b0a      	ldr	r3, [pc, #40]	; (244a8 <nm_spi_init+0x120>)
   2447e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24480:	2306      	movs	r3, #6
   24482:	425b      	negs	r3, r3
   24484:	e002      	b.n	2448c <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24486:	4b12      	ldr	r3, [pc, #72]	; (244d0 <nm_spi_init+0x148>)
   24488:	4798      	blx	r3


	return M2M_SUCCESS;
   2448a:	2300      	movs	r3, #0
}
   2448c:	0018      	movs	r0, r3
   2448e:	46bd      	mov	sp, r7
   24490:	b002      	add	sp, #8
   24492:	bd80      	pop	{r7, pc}
   24494:	2000412c 	.word	0x2000412c
   24498:	0000e824 	.word	0x0000e824
   2449c:	00024081 	.word	0x00024081
   244a0:	00038cb4 	.word	0x00038cb4
   244a4:	00038640 	.word	0x00038640
   244a8:	0001d7a9 	.word	0x0001d7a9
   244ac:	00038adc 	.word	0x00038adc
   244b0:	00038680 	.word	0x00038680
   244b4:	000004c3 	.word	0x000004c3
   244b8:	00038b2c 	.word	0x00038b2c
   244bc:	00023d89 	.word	0x00023d89
   244c0:	000004cd 	.word	0x000004cd
   244c4:	00038b5c 	.word	0x00038b5c
   244c8:	000004d7 	.word	0x000004d7
   244cc:	00038b90 	.word	0x00038b90
   244d0:	00024315 	.word	0x00024315

000244d4 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   244d4:	b580      	push	{r7, lr}
   244d6:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   244d8:	4b03      	ldr	r3, [pc, #12]	; (244e8 <nm_spi_deinit+0x14>)
   244da:	2200      	movs	r2, #0
   244dc:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   244de:	2300      	movs	r3, #0
}
   244e0:	0018      	movs	r0, r3
   244e2:	46bd      	mov	sp, r7
   244e4:	bd80      	pop	{r7, pc}
   244e6:	46c0      	nop			; (mov r8, r8)
   244e8:	2000412c 	.word	0x2000412c

000244ec <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   244ec:	b580      	push	{r7, lr}
   244ee:	b084      	sub	sp, #16
   244f0:	af00      	add	r7, sp, #0
   244f2:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   244f4:	230c      	movs	r3, #12
   244f6:	18fa      	adds	r2, r7, r3
   244f8:	687b      	ldr	r3, [r7, #4]
   244fa:	0011      	movs	r1, r2
   244fc:	0018      	movs	r0, r3
   244fe:	4b03      	ldr	r3, [pc, #12]	; (2450c <nm_spi_read_reg+0x20>)
   24500:	4798      	blx	r3

	return u32Val;
   24502:	68fb      	ldr	r3, [r7, #12]
}
   24504:	0018      	movs	r0, r3
   24506:	46bd      	mov	sp, r7
   24508:	b004      	add	sp, #16
   2450a:	bd80      	pop	{r7, pc}
   2450c:	00024081 	.word	0x00024081

00024510 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24510:	b590      	push	{r4, r7, lr}
   24512:	b085      	sub	sp, #20
   24514:	af00      	add	r7, sp, #0
   24516:	6078      	str	r0, [r7, #4]
   24518:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2451a:	230f      	movs	r3, #15
   2451c:	18fc      	adds	r4, r7, r3
   2451e:	683a      	ldr	r2, [r7, #0]
   24520:	687b      	ldr	r3, [r7, #4]
   24522:	0011      	movs	r1, r2
   24524:	0018      	movs	r0, r3
   24526:	4b0d      	ldr	r3, [pc, #52]	; (2455c <nm_spi_read_reg_with_ret+0x4c>)
   24528:	4798      	blx	r3
   2452a:	0003      	movs	r3, r0
   2452c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2452e:	230f      	movs	r3, #15
   24530:	18fb      	adds	r3, r7, r3
   24532:	781b      	ldrb	r3, [r3, #0]
   24534:	b25b      	sxtb	r3, r3
   24536:	2b01      	cmp	r3, #1
   24538:	d104      	bne.n	24544 <nm_spi_read_reg_with_ret+0x34>
   2453a:	230f      	movs	r3, #15
   2453c:	18fb      	adds	r3, r7, r3
   2453e:	2200      	movs	r2, #0
   24540:	701a      	strb	r2, [r3, #0]
   24542:	e003      	b.n	2454c <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24544:	230f      	movs	r3, #15
   24546:	18fb      	adds	r3, r7, r3
   24548:	22fa      	movs	r2, #250	; 0xfa
   2454a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2454c:	230f      	movs	r3, #15
   2454e:	18fb      	adds	r3, r7, r3
   24550:	781b      	ldrb	r3, [r3, #0]
   24552:	b25b      	sxtb	r3, r3
}
   24554:	0018      	movs	r0, r3
   24556:	46bd      	mov	sp, r7
   24558:	b005      	add	sp, #20
   2455a:	bd90      	pop	{r4, r7, pc}
   2455c:	00024081 	.word	0x00024081

00024560 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24560:	b590      	push	{r4, r7, lr}
   24562:	b085      	sub	sp, #20
   24564:	af00      	add	r7, sp, #0
   24566:	6078      	str	r0, [r7, #4]
   24568:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2456a:	230f      	movs	r3, #15
   2456c:	18fc      	adds	r4, r7, r3
   2456e:	683a      	ldr	r2, [r7, #0]
   24570:	687b      	ldr	r3, [r7, #4]
   24572:	0011      	movs	r1, r2
   24574:	0018      	movs	r0, r3
   24576:	4b0d      	ldr	r3, [pc, #52]	; (245ac <nm_spi_write_reg+0x4c>)
   24578:	4798      	blx	r3
   2457a:	0003      	movs	r3, r0
   2457c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2457e:	230f      	movs	r3, #15
   24580:	18fb      	adds	r3, r7, r3
   24582:	781b      	ldrb	r3, [r3, #0]
   24584:	b25b      	sxtb	r3, r3
   24586:	2b01      	cmp	r3, #1
   24588:	d104      	bne.n	24594 <nm_spi_write_reg+0x34>
   2458a:	230f      	movs	r3, #15
   2458c:	18fb      	adds	r3, r7, r3
   2458e:	2200      	movs	r2, #0
   24590:	701a      	strb	r2, [r3, #0]
   24592:	e003      	b.n	2459c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24594:	230f      	movs	r3, #15
   24596:	18fb      	adds	r3, r7, r3
   24598:	22fa      	movs	r2, #250	; 0xfa
   2459a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2459c:	230f      	movs	r3, #15
   2459e:	18fb      	adds	r3, r7, r3
   245a0:	781b      	ldrb	r3, [r3, #0]
   245a2:	b25b      	sxtb	r3, r3
}
   245a4:	0018      	movs	r0, r3
   245a6:	46bd      	mov	sp, r7
   245a8:	b005      	add	sp, #20
   245aa:	bd90      	pop	{r4, r7, pc}
   245ac:	00023d89 	.word	0x00023d89

000245b0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   245b0:	b590      	push	{r4, r7, lr}
   245b2:	b087      	sub	sp, #28
   245b4:	af00      	add	r7, sp, #0
   245b6:	60f8      	str	r0, [r7, #12]
   245b8:	60b9      	str	r1, [r7, #8]
   245ba:	1dbb      	adds	r3, r7, #6
   245bc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   245be:	2317      	movs	r3, #23
   245c0:	18fc      	adds	r4, r7, r3
   245c2:	1dbb      	adds	r3, r7, #6
   245c4:	881a      	ldrh	r2, [r3, #0]
   245c6:	68b9      	ldr	r1, [r7, #8]
   245c8:	68fb      	ldr	r3, [r7, #12]
   245ca:	0018      	movs	r0, r3
   245cc:	4b0d      	ldr	r3, [pc, #52]	; (24604 <nm_spi_read_block+0x54>)
   245ce:	4798      	blx	r3
   245d0:	0003      	movs	r3, r0
   245d2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   245d4:	2317      	movs	r3, #23
   245d6:	18fb      	adds	r3, r7, r3
   245d8:	781b      	ldrb	r3, [r3, #0]
   245da:	b25b      	sxtb	r3, r3
   245dc:	2b01      	cmp	r3, #1
   245de:	d104      	bne.n	245ea <nm_spi_read_block+0x3a>
   245e0:	2317      	movs	r3, #23
   245e2:	18fb      	adds	r3, r7, r3
   245e4:	2200      	movs	r2, #0
   245e6:	701a      	strb	r2, [r3, #0]
   245e8:	e003      	b.n	245f2 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   245ea:	2317      	movs	r3, #23
   245ec:	18fb      	adds	r3, r7, r3
   245ee:	22fa      	movs	r2, #250	; 0xfa
   245f0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   245f2:	2317      	movs	r3, #23
   245f4:	18fb      	adds	r3, r7, r3
   245f6:	781b      	ldrb	r3, [r3, #0]
   245f8:	b25b      	sxtb	r3, r3
}
   245fa:	0018      	movs	r0, r3
   245fc:	46bd      	mov	sp, r7
   245fe:	b007      	add	sp, #28
   24600:	bd90      	pop	{r4, r7, pc}
   24602:	46c0      	nop			; (mov r8, r8)
   24604:	000241f9 	.word	0x000241f9

00024608 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24608:	b590      	push	{r4, r7, lr}
   2460a:	b087      	sub	sp, #28
   2460c:	af00      	add	r7, sp, #0
   2460e:	60f8      	str	r0, [r7, #12]
   24610:	60b9      	str	r1, [r7, #8]
   24612:	1dbb      	adds	r3, r7, #6
   24614:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24616:	2317      	movs	r3, #23
   24618:	18fc      	adds	r4, r7, r3
   2461a:	1dbb      	adds	r3, r7, #6
   2461c:	881a      	ldrh	r2, [r3, #0]
   2461e:	68b9      	ldr	r1, [r7, #8]
   24620:	68fb      	ldr	r3, [r7, #12]
   24622:	0018      	movs	r0, r3
   24624:	4b0d      	ldr	r3, [pc, #52]	; (2465c <nm_spi_write_block+0x54>)
   24626:	4798      	blx	r3
   24628:	0003      	movs	r3, r0
   2462a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2462c:	2317      	movs	r3, #23
   2462e:	18fb      	adds	r3, r7, r3
   24630:	781b      	ldrb	r3, [r3, #0]
   24632:	b25b      	sxtb	r3, r3
   24634:	2b01      	cmp	r3, #1
   24636:	d104      	bne.n	24642 <nm_spi_write_block+0x3a>
   24638:	2317      	movs	r3, #23
   2463a:	18fb      	adds	r3, r7, r3
   2463c:	2200      	movs	r2, #0
   2463e:	701a      	strb	r2, [r3, #0]
   24640:	e003      	b.n	2464a <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24642:	2317      	movs	r3, #23
   24644:	18fb      	adds	r3, r7, r3
   24646:	22fa      	movs	r2, #250	; 0xfa
   24648:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2464a:	2317      	movs	r3, #23
   2464c:	18fb      	adds	r3, r7, r3
   2464e:	781b      	ldrb	r3, [r3, #0]
   24650:	b25b      	sxtb	r3, r3
}
   24652:	0018      	movs	r0, r3
   24654:	46bd      	mov	sp, r7
   24656:	b007      	add	sp, #28
   24658:	bd90      	pop	{r4, r7, pc}
   2465a:	46c0      	nop			; (mov r8, r8)
   2465c:	00023ed5 	.word	0x00023ed5

00024660 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   24660:	b590      	push	{r4, r7, lr}
   24662:	b089      	sub	sp, #36	; 0x24
   24664:	af00      	add	r7, sp, #0
   24666:	60b9      	str	r1, [r7, #8]
   24668:	0011      	movs	r1, r2
   2466a:	607b      	str	r3, [r7, #4]
   2466c:	230f      	movs	r3, #15
   2466e:	18fb      	adds	r3, r7, r3
   24670:	1c02      	adds	r2, r0, #0
   24672:	701a      	strb	r2, [r3, #0]
   24674:	230e      	movs	r3, #14
   24676:	18fb      	adds	r3, r7, r3
   24678:	1c0a      	adds	r2, r1, #0
   2467a:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   2467c:	2330      	movs	r3, #48	; 0x30
   2467e:	18fb      	adds	r3, r7, r3
   24680:	881b      	ldrh	r3, [r3, #0]
   24682:	2b00      	cmp	r3, #0
   24684:	d100      	bne.n	24688 <Socket_ReadSocketData+0x28>
   24686:	e0d7      	b.n	24838 <Socket_ReadSocketData+0x1d8>
   24688:	230f      	movs	r3, #15
   2468a:	18fb      	adds	r3, r7, r3
   2468c:	2200      	movs	r2, #0
   2468e:	569a      	ldrsb	r2, [r3, r2]
   24690:	4b6b      	ldr	r3, [pc, #428]	; (24840 <Socket_ReadSocketData+0x1e0>)
   24692:	0112      	lsls	r2, r2, #4
   24694:	58d3      	ldr	r3, [r2, r3]
   24696:	2b00      	cmp	r3, #0
   24698:	d100      	bne.n	2469c <Socket_ReadSocketData+0x3c>
   2469a:	e0cd      	b.n	24838 <Socket_ReadSocketData+0x1d8>
   2469c:	230f      	movs	r3, #15
   2469e:	18fb      	adds	r3, r7, r3
   246a0:	781b      	ldrb	r3, [r3, #0]
   246a2:	b25b      	sxtb	r3, r3
   246a4:	4a66      	ldr	r2, [pc, #408]	; (24840 <Socket_ReadSocketData+0x1e0>)
   246a6:	011b      	lsls	r3, r3, #4
   246a8:	18d3      	adds	r3, r2, r3
   246aa:	3304      	adds	r3, #4
   246ac:	881b      	ldrh	r3, [r3, #0]
   246ae:	b29b      	uxth	r3, r3
   246b0:	2b00      	cmp	r3, #0
   246b2:	d100      	bne.n	246b6 <Socket_ReadSocketData+0x56>
   246b4:	e0c0      	b.n	24838 <Socket_ReadSocketData+0x1d8>
   246b6:	230f      	movs	r3, #15
   246b8:	18fb      	adds	r3, r7, r3
   246ba:	781b      	ldrb	r3, [r3, #0]
   246bc:	b25b      	sxtb	r3, r3
   246be:	4a60      	ldr	r2, [pc, #384]	; (24840 <Socket_ReadSocketData+0x1e0>)
   246c0:	011b      	lsls	r3, r3, #4
   246c2:	18d3      	adds	r3, r2, r3
   246c4:	330a      	adds	r3, #10
   246c6:	781b      	ldrb	r3, [r3, #0]
   246c8:	b2db      	uxtb	r3, r3
   246ca:	2b01      	cmp	r3, #1
   246cc:	d000      	beq.n	246d0 <Socket_ReadSocketData+0x70>
   246ce:	e0b3      	b.n	24838 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   246d0:	687b      	ldr	r3, [r7, #4]
   246d2:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   246d4:	68bb      	ldr	r3, [r7, #8]
   246d6:	2230      	movs	r2, #48	; 0x30
   246d8:	18ba      	adds	r2, r7, r2
   246da:	8812      	ldrh	r2, [r2, #0]
   246dc:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   246de:	2319      	movs	r3, #25
   246e0:	18fb      	adds	r3, r7, r3
   246e2:	2201      	movs	r2, #1
   246e4:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   246e6:	231a      	movs	r3, #26
   246e8:	18fb      	adds	r3, r7, r3
   246ea:	2230      	movs	r2, #48	; 0x30
   246ec:	18ba      	adds	r2, r7, r2
   246ee:	8812      	ldrh	r2, [r2, #0]
   246f0:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   246f2:	230f      	movs	r3, #15
   246f4:	18fb      	adds	r3, r7, r3
   246f6:	781b      	ldrb	r3, [r3, #0]
   246f8:	b25b      	sxtb	r3, r3
   246fa:	4a51      	ldr	r2, [pc, #324]	; (24840 <Socket_ReadSocketData+0x1e0>)
   246fc:	011b      	lsls	r3, r3, #4
   246fe:	18d3      	adds	r3, r2, r3
   24700:	3304      	adds	r3, #4
   24702:	881b      	ldrh	r3, [r3, #0]
   24704:	b29b      	uxth	r3, r3
   24706:	221a      	movs	r2, #26
   24708:	18ba      	adds	r2, r7, r2
   2470a:	8812      	ldrh	r2, [r2, #0]
   2470c:	1ad3      	subs	r3, r2, r3
   2470e:	b29a      	uxth	r2, r3
   24710:	2316      	movs	r3, #22
   24712:	18fb      	adds	r3, r7, r3
   24714:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24716:	2316      	movs	r3, #22
   24718:	18fb      	adds	r3, r7, r3
   2471a:	2200      	movs	r2, #0
   2471c:	5e9b      	ldrsh	r3, [r3, r2]
   2471e:	2b00      	cmp	r3, #0
   24720:	dd0f      	ble.n	24742 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24722:	2319      	movs	r3, #25
   24724:	18fb      	adds	r3, r7, r3
   24726:	2200      	movs	r2, #0
   24728:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2472a:	230f      	movs	r3, #15
   2472c:	18fb      	adds	r3, r7, r3
   2472e:	2200      	movs	r2, #0
   24730:	569a      	ldrsb	r2, [r3, r2]
   24732:	231a      	movs	r3, #26
   24734:	18fb      	adds	r3, r7, r3
   24736:	4942      	ldr	r1, [pc, #264]	; (24840 <Socket_ReadSocketData+0x1e0>)
   24738:	0112      	lsls	r2, r2, #4
   2473a:	188a      	adds	r2, r1, r2
   2473c:	3204      	adds	r2, #4
   2473e:	8812      	ldrh	r2, [r2, #0]
   24740:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24742:	230f      	movs	r3, #15
   24744:	18fb      	adds	r3, r7, r3
   24746:	2200      	movs	r2, #0
   24748:	569a      	ldrsb	r2, [r3, r2]
   2474a:	4b3d      	ldr	r3, [pc, #244]	; (24840 <Socket_ReadSocketData+0x1e0>)
   2474c:	0112      	lsls	r2, r2, #4
   2474e:	58d1      	ldr	r1, [r2, r3]
   24750:	2319      	movs	r3, #25
   24752:	18fb      	adds	r3, r7, r3
   24754:	781c      	ldrb	r4, [r3, #0]
   24756:	231a      	movs	r3, #26
   24758:	18fb      	adds	r3, r7, r3
   2475a:	881a      	ldrh	r2, [r3, #0]
   2475c:	69f8      	ldr	r0, [r7, #28]
   2475e:	0023      	movs	r3, r4
   24760:	4c38      	ldr	r4, [pc, #224]	; (24844 <Socket_ReadSocketData+0x1e4>)
   24762:	47a0      	blx	r4
   24764:	1e03      	subs	r3, r0, #0
   24766:	d14f      	bne.n	24808 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24768:	230f      	movs	r3, #15
   2476a:	18fb      	adds	r3, r7, r3
   2476c:	2200      	movs	r2, #0
   2476e:	569a      	ldrsb	r2, [r3, r2]
   24770:	4b33      	ldr	r3, [pc, #204]	; (24840 <Socket_ReadSocketData+0x1e0>)
   24772:	0112      	lsls	r2, r2, #4
   24774:	58d2      	ldr	r2, [r2, r3]
   24776:	68bb      	ldr	r3, [r7, #8]
   24778:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   2477a:	231a      	movs	r3, #26
   2477c:	18fb      	adds	r3, r7, r3
   2477e:	2200      	movs	r2, #0
   24780:	5e9a      	ldrsh	r2, [r3, r2]
   24782:	68bb      	ldr	r3, [r7, #8]
   24784:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24786:	68bb      	ldr	r3, [r7, #8]
   24788:	88da      	ldrh	r2, [r3, #6]
   2478a:	231a      	movs	r3, #26
   2478c:	18fb      	adds	r3, r7, r3
   2478e:	881b      	ldrh	r3, [r3, #0]
   24790:	1ad3      	subs	r3, r2, r3
   24792:	b29a      	uxth	r2, r3
   24794:	68bb      	ldr	r3, [r7, #8]
   24796:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24798:	4b2b      	ldr	r3, [pc, #172]	; (24848 <Socket_ReadSocketData+0x1e8>)
   2479a:	681b      	ldr	r3, [r3, #0]
   2479c:	2b00      	cmp	r3, #0
   2479e:	d00b      	beq.n	247b8 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   247a0:	4b29      	ldr	r3, [pc, #164]	; (24848 <Socket_ReadSocketData+0x1e8>)
   247a2:	681b      	ldr	r3, [r3, #0]
   247a4:	68bc      	ldr	r4, [r7, #8]
   247a6:	220e      	movs	r2, #14
   247a8:	18ba      	adds	r2, r7, r2
   247aa:	7811      	ldrb	r1, [r2, #0]
   247ac:	220f      	movs	r2, #15
   247ae:	18ba      	adds	r2, r7, r2
   247b0:	2000      	movs	r0, #0
   247b2:	5610      	ldrsb	r0, [r2, r0]
   247b4:	0022      	movs	r2, r4
   247b6:	4798      	blx	r3

				u16ReadCount -= u16Read;
   247b8:	2330      	movs	r3, #48	; 0x30
   247ba:	18f9      	adds	r1, r7, r3
   247bc:	2330      	movs	r3, #48	; 0x30
   247be:	18fa      	adds	r2, r7, r3
   247c0:	231a      	movs	r3, #26
   247c2:	18fb      	adds	r3, r7, r3
   247c4:	8812      	ldrh	r2, [r2, #0]
   247c6:	881b      	ldrh	r3, [r3, #0]
   247c8:	1ad3      	subs	r3, r2, r3
   247ca:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   247cc:	231a      	movs	r3, #26
   247ce:	18fb      	adds	r3, r7, r3
   247d0:	881b      	ldrh	r3, [r3, #0]
   247d2:	69fa      	ldr	r2, [r7, #28]
   247d4:	18d3      	adds	r3, r2, r3
   247d6:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   247d8:	230f      	movs	r3, #15
   247da:	18fb      	adds	r3, r7, r3
   247dc:	781b      	ldrb	r3, [r3, #0]
   247de:	b25b      	sxtb	r3, r3
   247e0:	4a17      	ldr	r2, [pc, #92]	; (24840 <Socket_ReadSocketData+0x1e0>)
   247e2:	011b      	lsls	r3, r3, #4
   247e4:	18d3      	adds	r3, r2, r3
   247e6:	330a      	adds	r3, #10
   247e8:	781b      	ldrb	r3, [r3, #0]
   247ea:	b2db      	uxtb	r3, r3
   247ec:	2b00      	cmp	r3, #0
   247ee:	d11c      	bne.n	2482a <Socket_ReadSocketData+0x1ca>
   247f0:	2330      	movs	r3, #48	; 0x30
   247f2:	18fb      	adds	r3, r7, r3
   247f4:	881b      	ldrh	r3, [r3, #0]
   247f6:	2b00      	cmp	r3, #0
   247f8:	d017      	beq.n	2482a <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   247fa:	2301      	movs	r3, #1
   247fc:	2200      	movs	r2, #0
   247fe:	2100      	movs	r1, #0
   24800:	2000      	movs	r0, #0
   24802:	4c10      	ldr	r4, [pc, #64]	; (24844 <Socket_ReadSocketData+0x1e4>)
   24804:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24806:	e017      	b.n	24838 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24808:	4b10      	ldr	r3, [pc, #64]	; (2484c <Socket_ReadSocketData+0x1ec>)
   2480a:	0018      	movs	r0, r3
   2480c:	4b10      	ldr	r3, [pc, #64]	; (24850 <Socket_ReadSocketData+0x1f0>)
   2480e:	4798      	blx	r3
   24810:	2330      	movs	r3, #48	; 0x30
   24812:	18fb      	adds	r3, r7, r3
   24814:	881a      	ldrh	r2, [r3, #0]
   24816:	4b0f      	ldr	r3, [pc, #60]	; (24854 <Socket_ReadSocketData+0x1f4>)
   24818:	0011      	movs	r1, r2
   2481a:	0018      	movs	r0, r3
   2481c:	4b0c      	ldr	r3, [pc, #48]	; (24850 <Socket_ReadSocketData+0x1f0>)
   2481e:	4798      	blx	r3
   24820:	4b0d      	ldr	r3, [pc, #52]	; (24858 <Socket_ReadSocketData+0x1f8>)
   24822:	0018      	movs	r0, r3
   24824:	4b0a      	ldr	r3, [pc, #40]	; (24850 <Socket_ReadSocketData+0x1f0>)
   24826:	4798      	blx	r3
				break;
   24828:	e006      	b.n	24838 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2482a:	2330      	movs	r3, #48	; 0x30
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	881b      	ldrh	r3, [r3, #0]
   24830:	2b00      	cmp	r3, #0
   24832:	d000      	beq.n	24836 <Socket_ReadSocketData+0x1d6>
   24834:	e753      	b.n	246de <Socket_ReadSocketData+0x7e>
	}
}
   24836:	e7ff      	b.n	24838 <Socket_ReadSocketData+0x1d8>
   24838:	46c0      	nop			; (mov r8, r8)
   2483a:	46bd      	mov	sp, r7
   2483c:	b009      	add	sp, #36	; 0x24
   2483e:	bd90      	pop	{r4, r7, pc}
   24840:	20005908 	.word	0x20005908
   24844:	00021059 	.word	0x00021059
   24848:	200059b8 	.word	0x200059b8
   2484c:	00038cc0 	.word	0x00038cc0
   24850:	0001d7a9 	.word	0x0001d7a9
   24854:	00038ccc 	.word	0x00038ccc
   24858:	00038ce0 	.word	0x00038ce0

0002485c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   2485c:	b590      	push	{r4, r7, lr}
   2485e:	b0bb      	sub	sp, #236	; 0xec
   24860:	af02      	add	r7, sp, #8
   24862:	603a      	str	r2, [r7, #0]
   24864:	1dfb      	adds	r3, r7, #7
   24866:	1c02      	adds	r2, r0, #0
   24868:	701a      	strb	r2, [r3, #0]
   2486a:	1d3b      	adds	r3, r7, #4
   2486c:	1c0a      	adds	r2, r1, #0
   2486e:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24870:	1dfb      	adds	r3, r7, #7
   24872:	781b      	ldrb	r3, [r3, #0]
   24874:	2b41      	cmp	r3, #65	; 0x41
   24876:	d003      	beq.n	24880 <m2m_ip_cb+0x24>
   24878:	1dfb      	adds	r3, r7, #7
   2487a:	781b      	ldrb	r3, [r3, #0]
   2487c:	2b54      	cmp	r3, #84	; 0x54
   2487e:	d120      	bne.n	248c2 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24880:	23cc      	movs	r3, #204	; 0xcc
   24882:	18f9      	adds	r1, r7, r3
   24884:	6838      	ldr	r0, [r7, #0]
   24886:	2300      	movs	r3, #0
   24888:	2204      	movs	r2, #4
   2488a:	4c98      	ldr	r4, [pc, #608]	; (24aec <m2m_ip_cb+0x290>)
   2488c:	47a0      	blx	r4
   2488e:	1e03      	subs	r3, r0, #0
   24890:	d000      	beq.n	24894 <m2m_ip_cb+0x38>
   24892:	e275      	b.n	24d80 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24894:	23cc      	movs	r3, #204	; 0xcc
   24896:	18fb      	adds	r3, r7, r3
   24898:	2201      	movs	r2, #1
   2489a:	569a      	ldrsb	r2, [r3, r2]
   2489c:	23c8      	movs	r3, #200	; 0xc8
   2489e:	18fb      	adds	r3, r7, r3
   248a0:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   248a2:	4b93      	ldr	r3, [pc, #588]	; (24af0 <m2m_ip_cb+0x294>)
   248a4:	681b      	ldr	r3, [r3, #0]
   248a6:	2b00      	cmp	r3, #0
   248a8:	d100      	bne.n	248ac <m2m_ip_cb+0x50>
   248aa:	e269      	b.n	24d80 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   248ac:	4b90      	ldr	r3, [pc, #576]	; (24af0 <m2m_ip_cb+0x294>)
   248ae:	681b      	ldr	r3, [r3, #0]
   248b0:	22cc      	movs	r2, #204	; 0xcc
   248b2:	18ba      	adds	r2, r7, r2
   248b4:	2000      	movs	r0, #0
   248b6:	5610      	ldrsb	r0, [r2, r0]
   248b8:	22c8      	movs	r2, #200	; 0xc8
   248ba:	18ba      	adds	r2, r7, r2
   248bc:	2101      	movs	r1, #1
   248be:	4798      	blx	r3
	{
   248c0:	e25e      	b.n	24d80 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   248c2:	1dfb      	adds	r3, r7, #7
   248c4:	781b      	ldrb	r3, [r3, #0]
   248c6:	2b42      	cmp	r3, #66	; 0x42
   248c8:	d120      	bne.n	2490c <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   248ca:	23c4      	movs	r3, #196	; 0xc4
   248cc:	18f9      	adds	r1, r7, r3
   248ce:	6838      	ldr	r0, [r7, #0]
   248d0:	2300      	movs	r3, #0
   248d2:	2204      	movs	r2, #4
   248d4:	4c85      	ldr	r4, [pc, #532]	; (24aec <m2m_ip_cb+0x290>)
   248d6:	47a0      	blx	r4
   248d8:	1e03      	subs	r3, r0, #0
   248da:	d000      	beq.n	248de <m2m_ip_cb+0x82>
   248dc:	e257      	b.n	24d8e <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   248de:	23c4      	movs	r3, #196	; 0xc4
   248e0:	18fb      	adds	r3, r7, r3
   248e2:	2201      	movs	r2, #1
   248e4:	569a      	ldrsb	r2, [r3, r2]
   248e6:	23c0      	movs	r3, #192	; 0xc0
   248e8:	18fb      	adds	r3, r7, r3
   248ea:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   248ec:	4b80      	ldr	r3, [pc, #512]	; (24af0 <m2m_ip_cb+0x294>)
   248ee:	681b      	ldr	r3, [r3, #0]
   248f0:	2b00      	cmp	r3, #0
   248f2:	d100      	bne.n	248f6 <m2m_ip_cb+0x9a>
   248f4:	e24b      	b.n	24d8e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   248f6:	4b7e      	ldr	r3, [pc, #504]	; (24af0 <m2m_ip_cb+0x294>)
   248f8:	681b      	ldr	r3, [r3, #0]
   248fa:	22c4      	movs	r2, #196	; 0xc4
   248fc:	18ba      	adds	r2, r7, r2
   248fe:	2000      	movs	r0, #0
   24900:	5610      	ldrsb	r0, [r2, r0]
   24902:	22c0      	movs	r2, #192	; 0xc0
   24904:	18ba      	adds	r2, r7, r2
   24906:	2102      	movs	r1, #2
   24908:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   2490a:	e240      	b.n	24d8e <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   2490c:	1dfb      	adds	r3, r7, #7
   2490e:	781b      	ldrb	r3, [r3, #0]
   24910:	2b43      	cmp	r3, #67	; 0x43
   24912:	d000      	beq.n	24916 <m2m_ip_cb+0xba>
   24914:	e086      	b.n	24a24 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24916:	23b4      	movs	r3, #180	; 0xb4
   24918:	18f9      	adds	r1, r7, r3
   2491a:	6838      	ldr	r0, [r7, #0]
   2491c:	2300      	movs	r3, #0
   2491e:	220c      	movs	r2, #12
   24920:	4c72      	ldr	r4, [pc, #456]	; (24aec <m2m_ip_cb+0x290>)
   24922:	47a0      	blx	r4
   24924:	1e03      	subs	r3, r0, #0
   24926:	d000      	beq.n	2492a <m2m_ip_cb+0xce>
   24928:	e231      	b.n	24d8e <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   2492a:	23b4      	movs	r3, #180	; 0xb4
   2492c:	18fb      	adds	r3, r7, r3
   2492e:	7a5b      	ldrb	r3, [r3, #9]
   24930:	b25b      	sxtb	r3, r3
   24932:	2b00      	cmp	r3, #0
   24934:	db4f      	blt.n	249d6 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24936:	23b4      	movs	r3, #180	; 0xb4
   24938:	18fb      	adds	r3, r7, r3
   2493a:	7a5b      	ldrb	r3, [r3, #9]
   2493c:	b25b      	sxtb	r3, r3
   2493e:	0018      	movs	r0, r3
   24940:	23b4      	movs	r3, #180	; 0xb4
   24942:	18fb      	adds	r3, r7, r3
   24944:	7a1b      	ldrb	r3, [r3, #8]
   24946:	b25b      	sxtb	r3, r3
   24948:	4a6a      	ldr	r2, [pc, #424]	; (24af4 <m2m_ip_cb+0x298>)
   2494a:	011b      	lsls	r3, r3, #4
   2494c:	18d3      	adds	r3, r2, r3
   2494e:	330b      	adds	r3, #11
   24950:	781b      	ldrb	r3, [r3, #0]
   24952:	b2d9      	uxtb	r1, r3
   24954:	4a67      	ldr	r2, [pc, #412]	; (24af4 <m2m_ip_cb+0x298>)
   24956:	0103      	lsls	r3, r0, #4
   24958:	18d3      	adds	r3, r2, r3
   2495a:	330b      	adds	r3, #11
   2495c:	1c0a      	adds	r2, r1, #0
   2495e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24960:	23b4      	movs	r3, #180	; 0xb4
   24962:	18fb      	adds	r3, r7, r3
   24964:	7a5b      	ldrb	r3, [r3, #9]
   24966:	b25b      	sxtb	r3, r3
   24968:	4a62      	ldr	r2, [pc, #392]	; (24af4 <m2m_ip_cb+0x298>)
   2496a:	011b      	lsls	r3, r3, #4
   2496c:	18d3      	adds	r3, r2, r3
   2496e:	330a      	adds	r3, #10
   24970:	2201      	movs	r2, #1
   24972:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24974:	23b4      	movs	r3, #180	; 0xb4
   24976:	18fb      	adds	r3, r7, r3
   24978:	7a5b      	ldrb	r3, [r3, #9]
   2497a:	b25b      	sxtb	r3, r3
   2497c:	0018      	movs	r0, r3
   2497e:	23b4      	movs	r3, #180	; 0xb4
   24980:	18fb      	adds	r3, r7, r3
   24982:	895b      	ldrh	r3, [r3, #10]
   24984:	3b08      	subs	r3, #8
   24986:	b299      	uxth	r1, r3
   24988:	4a5a      	ldr	r2, [pc, #360]	; (24af4 <m2m_ip_cb+0x298>)
   2498a:	0103      	lsls	r3, r0, #4
   2498c:	18d3      	adds	r3, r2, r3
   2498e:	3308      	adds	r3, #8
   24990:	1c0a      	adds	r2, r1, #0
   24992:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24994:	4b58      	ldr	r3, [pc, #352]	; (24af8 <m2m_ip_cb+0x29c>)
   24996:	881b      	ldrh	r3, [r3, #0]
   24998:	b29b      	uxth	r3, r3
   2499a:	3301      	adds	r3, #1
   2499c:	b29a      	uxth	r2, r3
   2499e:	4b56      	ldr	r3, [pc, #344]	; (24af8 <m2m_ip_cb+0x29c>)
   249a0:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   249a2:	4b55      	ldr	r3, [pc, #340]	; (24af8 <m2m_ip_cb+0x29c>)
   249a4:	881b      	ldrh	r3, [r3, #0]
   249a6:	b29b      	uxth	r3, r3
   249a8:	2b00      	cmp	r3, #0
   249aa:	d106      	bne.n	249ba <m2m_ip_cb+0x15e>
					++gu16SessionID;
   249ac:	4b52      	ldr	r3, [pc, #328]	; (24af8 <m2m_ip_cb+0x29c>)
   249ae:	881b      	ldrh	r3, [r3, #0]
   249b0:	b29b      	uxth	r3, r3
   249b2:	3301      	adds	r3, #1
   249b4:	b29a      	uxth	r2, r3
   249b6:	4b50      	ldr	r3, [pc, #320]	; (24af8 <m2m_ip_cb+0x29c>)
   249b8:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   249ba:	23b4      	movs	r3, #180	; 0xb4
   249bc:	18fb      	adds	r3, r7, r3
   249be:	7a5b      	ldrb	r3, [r3, #9]
   249c0:	b25b      	sxtb	r3, r3
   249c2:	0018      	movs	r0, r3
   249c4:	4b4c      	ldr	r3, [pc, #304]	; (24af8 <m2m_ip_cb+0x29c>)
   249c6:	881b      	ldrh	r3, [r3, #0]
   249c8:	b299      	uxth	r1, r3
   249ca:	4a4a      	ldr	r2, [pc, #296]	; (24af4 <m2m_ip_cb+0x298>)
   249cc:	0103      	lsls	r3, r0, #4
   249ce:	18d3      	adds	r3, r2, r3
   249d0:	3306      	adds	r3, #6
   249d2:	1c0a      	adds	r2, r1, #0
   249d4:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   249d6:	23b4      	movs	r3, #180	; 0xb4
   249d8:	18fb      	adds	r3, r7, r3
   249da:	2209      	movs	r2, #9
   249dc:	569a      	ldrsb	r2, [r3, r2]
   249de:	23a0      	movs	r3, #160	; 0xa0
   249e0:	18fb      	adds	r3, r7, r3
   249e2:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   249e4:	23a0      	movs	r3, #160	; 0xa0
   249e6:	18fb      	adds	r3, r7, r3
   249e8:	2202      	movs	r2, #2
   249ea:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   249ec:	23b4      	movs	r3, #180	; 0xb4
   249ee:	18fb      	adds	r3, r7, r3
   249f0:	885a      	ldrh	r2, [r3, #2]
   249f2:	23a0      	movs	r3, #160	; 0xa0
   249f4:	18fb      	adds	r3, r7, r3
   249f6:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   249f8:	23b4      	movs	r3, #180	; 0xb4
   249fa:	18fb      	adds	r3, r7, r3
   249fc:	685a      	ldr	r2, [r3, #4]
   249fe:	23a0      	movs	r3, #160	; 0xa0
   24a00:	18fb      	adds	r3, r7, r3
   24a02:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24a04:	4b3a      	ldr	r3, [pc, #232]	; (24af0 <m2m_ip_cb+0x294>)
   24a06:	681b      	ldr	r3, [r3, #0]
   24a08:	2b00      	cmp	r3, #0
   24a0a:	d100      	bne.n	24a0e <m2m_ip_cb+0x1b2>
   24a0c:	e1bf      	b.n	24d8e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24a0e:	4b38      	ldr	r3, [pc, #224]	; (24af0 <m2m_ip_cb+0x294>)
   24a10:	681b      	ldr	r3, [r3, #0]
   24a12:	22b4      	movs	r2, #180	; 0xb4
   24a14:	18ba      	adds	r2, r7, r2
   24a16:	2008      	movs	r0, #8
   24a18:	5610      	ldrsb	r0, [r2, r0]
   24a1a:	22a0      	movs	r2, #160	; 0xa0
   24a1c:	18ba      	adds	r2, r7, r2
   24a1e:	2104      	movs	r1, #4
   24a20:	4798      	blx	r3
}
   24a22:	e1b4      	b.n	24d8e <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24a24:	1dfb      	adds	r3, r7, #7
   24a26:	781b      	ldrb	r3, [r3, #0]
   24a28:	2b44      	cmp	r3, #68	; 0x44
   24a2a:	d003      	beq.n	24a34 <m2m_ip_cb+0x1d8>
   24a2c:	1dfb      	adds	r3, r7, #7
   24a2e:	781b      	ldrb	r3, [r3, #0]
   24a30:	2b4b      	cmp	r3, #75	; 0x4b
   24a32:	d13d      	bne.n	24ab0 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24a34:	239c      	movs	r3, #156	; 0x9c
   24a36:	18f9      	adds	r1, r7, r3
   24a38:	6838      	ldr	r0, [r7, #0]
   24a3a:	2300      	movs	r3, #0
   24a3c:	2204      	movs	r2, #4
   24a3e:	4c2b      	ldr	r4, [pc, #172]	; (24aec <m2m_ip_cb+0x290>)
   24a40:	47a0      	blx	r4
   24a42:	1e03      	subs	r3, r0, #0
   24a44:	d000      	beq.n	24a48 <m2m_ip_cb+0x1ec>
   24a46:	e19d      	b.n	24d84 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24a48:	239c      	movs	r3, #156	; 0x9c
   24a4a:	18fb      	adds	r3, r7, r3
   24a4c:	2200      	movs	r2, #0
   24a4e:	569a      	ldrsb	r2, [r3, r2]
   24a50:	2398      	movs	r3, #152	; 0x98
   24a52:	18fb      	adds	r3, r7, r3
   24a54:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24a56:	239c      	movs	r3, #156	; 0x9c
   24a58:	18fb      	adds	r3, r7, r3
   24a5a:	2201      	movs	r2, #1
   24a5c:	569a      	ldrsb	r2, [r3, r2]
   24a5e:	2398      	movs	r3, #152	; 0x98
   24a60:	18fb      	adds	r3, r7, r3
   24a62:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24a64:	239c      	movs	r3, #156	; 0x9c
   24a66:	18fb      	adds	r3, r7, r3
   24a68:	785b      	ldrb	r3, [r3, #1]
   24a6a:	b25b      	sxtb	r3, r3
   24a6c:	2b00      	cmp	r3, #0
   24a6e:	d10f      	bne.n	24a90 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24a70:	239c      	movs	r3, #156	; 0x9c
   24a72:	18fb      	adds	r3, r7, r3
   24a74:	781b      	ldrb	r3, [r3, #0]
   24a76:	b25b      	sxtb	r3, r3
   24a78:	0018      	movs	r0, r3
   24a7a:	239c      	movs	r3, #156	; 0x9c
   24a7c:	18fb      	adds	r3, r7, r3
   24a7e:	885b      	ldrh	r3, [r3, #2]
   24a80:	3b08      	subs	r3, #8
   24a82:	b299      	uxth	r1, r3
   24a84:	4a1b      	ldr	r2, [pc, #108]	; (24af4 <m2m_ip_cb+0x298>)
   24a86:	0103      	lsls	r3, r0, #4
   24a88:	18d3      	adds	r3, r2, r3
   24a8a:	3308      	adds	r3, #8
   24a8c:	1c0a      	adds	r2, r1, #0
   24a8e:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24a90:	4b17      	ldr	r3, [pc, #92]	; (24af0 <m2m_ip_cb+0x294>)
   24a92:	681b      	ldr	r3, [r3, #0]
   24a94:	2b00      	cmp	r3, #0
   24a96:	d100      	bne.n	24a9a <m2m_ip_cb+0x23e>
   24a98:	e174      	b.n	24d84 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   24a9a:	4b15      	ldr	r3, [pc, #84]	; (24af0 <m2m_ip_cb+0x294>)
   24a9c:	681b      	ldr	r3, [r3, #0]
   24a9e:	229c      	movs	r2, #156	; 0x9c
   24aa0:	18ba      	adds	r2, r7, r2
   24aa2:	2000      	movs	r0, #0
   24aa4:	5610      	ldrsb	r0, [r2, r0]
   24aa6:	2298      	movs	r2, #152	; 0x98
   24aa8:	18ba      	adds	r2, r7, r2
   24aaa:	2105      	movs	r1, #5
   24aac:	4798      	blx	r3
	{
   24aae:	e169      	b.n	24d84 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   24ab0:	1dfb      	adds	r3, r7, #7
   24ab2:	781b      	ldrb	r3, [r3, #0]
   24ab4:	2b4a      	cmp	r3, #74	; 0x4a
   24ab6:	d123      	bne.n	24b00 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   24ab8:	230c      	movs	r3, #12
   24aba:	18f9      	adds	r1, r7, r3
   24abc:	6838      	ldr	r0, [r7, #0]
   24abe:	2300      	movs	r3, #0
   24ac0:	2244      	movs	r2, #68	; 0x44
   24ac2:	4c0a      	ldr	r4, [pc, #40]	; (24aec <m2m_ip_cb+0x290>)
   24ac4:	47a0      	blx	r4
   24ac6:	1e03      	subs	r3, r0, #0
   24ac8:	d000      	beq.n	24acc <m2m_ip_cb+0x270>
   24aca:	e160      	b.n	24d8e <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24acc:	4b0b      	ldr	r3, [pc, #44]	; (24afc <m2m_ip_cb+0x2a0>)
   24ace:	681b      	ldr	r3, [r3, #0]
   24ad0:	2b00      	cmp	r3, #0
   24ad2:	d100      	bne.n	24ad6 <m2m_ip_cb+0x27a>
   24ad4:	e15b      	b.n	24d8e <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   24ad6:	4b09      	ldr	r3, [pc, #36]	; (24afc <m2m_ip_cb+0x2a0>)
   24ad8:	681a      	ldr	r2, [r3, #0]
   24ada:	230c      	movs	r3, #12
   24adc:	18fb      	adds	r3, r7, r3
   24ade:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24ae0:	230c      	movs	r3, #12
   24ae2:	18fb      	adds	r3, r7, r3
   24ae4:	0018      	movs	r0, r3
   24ae6:	4790      	blx	r2
}
   24ae8:	e151      	b.n	24d8e <m2m_ip_cb+0x532>
   24aea:	46c0      	nop			; (mov r8, r8)
   24aec:	00021059 	.word	0x00021059
   24af0:	200059b8 	.word	0x200059b8
   24af4:	20005908 	.word	0x20005908
   24af8:	2000412e 	.word	0x2000412e
   24afc:	200059c0 	.word	0x200059c0
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24b00:	1dfb      	adds	r3, r7, #7
   24b02:	781b      	ldrb	r3, [r3, #0]
   24b04:	2b46      	cmp	r3, #70	; 0x46
   24b06:	d008      	beq.n	24b1a <m2m_ip_cb+0x2be>
   24b08:	1dfb      	adds	r3, r7, #7
   24b0a:	781b      	ldrb	r3, [r3, #0]
   24b0c:	2b48      	cmp	r3, #72	; 0x48
   24b0e:	d004      	beq.n	24b1a <m2m_ip_cb+0x2be>
   24b10:	1dfb      	adds	r3, r7, #7
   24b12:	781b      	ldrb	r3, [r3, #0]
   24b14:	2b4d      	cmp	r3, #77	; 0x4d
   24b16:	d000      	beq.n	24b1a <m2m_ip_cb+0x2be>
   24b18:	e0b4      	b.n	24c84 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   24b1a:	23df      	movs	r3, #223	; 0xdf
   24b1c:	18fb      	adds	r3, r7, r3
   24b1e:	2206      	movs	r2, #6
   24b20:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24b22:	1dfb      	adds	r3, r7, #7
   24b24:	781b      	ldrb	r3, [r3, #0]
   24b26:	2b48      	cmp	r3, #72	; 0x48
   24b28:	d103      	bne.n	24b32 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   24b2a:	23df      	movs	r3, #223	; 0xdf
   24b2c:	18fb      	adds	r3, r7, r3
   24b2e:	2209      	movs	r2, #9
   24b30:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24b32:	23d8      	movs	r3, #216	; 0xd8
   24b34:	18fb      	adds	r3, r7, r3
   24b36:	2210      	movs	r2, #16
   24b38:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   24b3a:	23d8      	movs	r3, #216	; 0xd8
   24b3c:	18fb      	adds	r3, r7, r3
   24b3e:	881a      	ldrh	r2, [r3, #0]
   24b40:	2388      	movs	r3, #136	; 0x88
   24b42:	18f9      	adds	r1, r7, r3
   24b44:	6838      	ldr	r0, [r7, #0]
   24b46:	2300      	movs	r3, #0
   24b48:	4c93      	ldr	r4, [pc, #588]	; (24d98 <m2m_ip_cb+0x53c>)
   24b4a:	47a0      	blx	r4
   24b4c:	1e03      	subs	r3, r0, #0
   24b4e:	d000      	beq.n	24b52 <m2m_ip_cb+0x2f6>
   24b50:	e11a      	b.n	24d88 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24b52:	23d6      	movs	r3, #214	; 0xd6
   24b54:	18fb      	adds	r3, r7, r3
   24b56:	2200      	movs	r2, #0
   24b58:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   24b5a:	23d5      	movs	r3, #213	; 0xd5
   24b5c:	18fb      	adds	r3, r7, r3
   24b5e:	2288      	movs	r2, #136	; 0x88
   24b60:	18ba      	adds	r2, r7, r2
   24b62:	7b12      	ldrb	r2, [r2, #12]
   24b64:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   24b66:	23d6      	movs	r3, #214	; 0xd6
   24b68:	18fb      	adds	r3, r7, r3
   24b6a:	2288      	movs	r2, #136	; 0x88
   24b6c:	18ba      	adds	r2, r7, r2
   24b6e:	89d2      	ldrh	r2, [r2, #14]
   24b70:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24b72:	23d5      	movs	r3, #213	; 0xd5
   24b74:	18fb      	adds	r3, r7, r3
   24b76:	781b      	ldrb	r3, [r3, #0]
   24b78:	b25b      	sxtb	r3, r3
   24b7a:	4a88      	ldr	r2, [pc, #544]	; (24d9c <m2m_ip_cb+0x540>)
   24b7c:	011b      	lsls	r3, r3, #4
   24b7e:	18d3      	adds	r3, r2, r3
   24b80:	330c      	adds	r3, #12
   24b82:	2200      	movs	r2, #0
   24b84:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   24b86:	23d2      	movs	r3, #210	; 0xd2
   24b88:	18fb      	adds	r3, r7, r3
   24b8a:	2288      	movs	r2, #136	; 0x88
   24b8c:	18ba      	adds	r2, r7, r2
   24b8e:	8912      	ldrh	r2, [r2, #8]
   24b90:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24b92:	23d0      	movs	r3, #208	; 0xd0
   24b94:	18fb      	adds	r3, r7, r3
   24b96:	2288      	movs	r2, #136	; 0x88
   24b98:	18ba      	adds	r2, r7, r2
   24b9a:	8952      	ldrh	r2, [r2, #10]
   24b9c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   24b9e:	2388      	movs	r3, #136	; 0x88
   24ba0:	18fb      	adds	r3, r7, r3
   24ba2:	885a      	ldrh	r2, [r3, #2]
   24ba4:	2370      	movs	r3, #112	; 0x70
   24ba6:	18fb      	adds	r3, r7, r3
   24ba8:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   24baa:	2388      	movs	r3, #136	; 0x88
   24bac:	18fb      	adds	r3, r7, r3
   24bae:	685a      	ldr	r2, [r3, #4]
   24bb0:	2370      	movs	r3, #112	; 0x70
   24bb2:	18fb      	adds	r3, r7, r3
   24bb4:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24bb6:	23d5      	movs	r3, #213	; 0xd5
   24bb8:	18fb      	adds	r3, r7, r3
   24bba:	781b      	ldrb	r3, [r3, #0]
   24bbc:	b25b      	sxtb	r3, r3
   24bbe:	4a77      	ldr	r2, [pc, #476]	; (24d9c <m2m_ip_cb+0x540>)
   24bc0:	011b      	lsls	r3, r3, #4
   24bc2:	18d3      	adds	r3, r2, r3
   24bc4:	3306      	adds	r3, #6
   24bc6:	881b      	ldrh	r3, [r3, #0]
   24bc8:	b29b      	uxth	r3, r3
   24bca:	22d6      	movs	r2, #214	; 0xd6
   24bcc:	18ba      	adds	r2, r7, r2
   24bce:	8812      	ldrh	r2, [r2, #0]
   24bd0:	429a      	cmp	r2, r3
   24bd2:	d148      	bne.n	24c66 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24bd4:	23d2      	movs	r3, #210	; 0xd2
   24bd6:	18fb      	adds	r3, r7, r3
   24bd8:	2200      	movs	r2, #0
   24bda:	5e9b      	ldrsh	r3, [r3, r2]
   24bdc:	2b00      	cmp	r3, #0
   24bde:	dd25      	ble.n	24c2c <m2m_ip_cb+0x3d0>
   24be0:	23d2      	movs	r3, #210	; 0xd2
   24be2:	18fb      	adds	r3, r7, r3
   24be4:	2200      	movs	r2, #0
   24be6:	5e9a      	ldrsh	r2, [r3, r2]
   24be8:	1d3b      	adds	r3, r7, #4
   24bea:	881b      	ldrh	r3, [r3, #0]
   24bec:	429a      	cmp	r2, r3
   24bee:	da1d      	bge.n	24c2c <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24bf0:	23d0      	movs	r3, #208	; 0xd0
   24bf2:	18fb      	adds	r3, r7, r3
   24bf4:	881b      	ldrh	r3, [r3, #0]
   24bf6:	683a      	ldr	r2, [r7, #0]
   24bf8:	18d3      	adds	r3, r2, r3
   24bfa:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   24bfc:	23d8      	movs	r3, #216	; 0xd8
   24bfe:	18fb      	adds	r3, r7, r3
   24c00:	22d2      	movs	r2, #210	; 0xd2
   24c02:	18ba      	adds	r2, r7, r2
   24c04:	8812      	ldrh	r2, [r2, #0]
   24c06:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   24c08:	683c      	ldr	r4, [r7, #0]
   24c0a:	23df      	movs	r3, #223	; 0xdf
   24c0c:	18fb      	adds	r3, r7, r3
   24c0e:	781a      	ldrb	r2, [r3, #0]
   24c10:	2370      	movs	r3, #112	; 0x70
   24c12:	18f9      	adds	r1, r7, r3
   24c14:	23d5      	movs	r3, #213	; 0xd5
   24c16:	18fb      	adds	r3, r7, r3
   24c18:	2000      	movs	r0, #0
   24c1a:	5618      	ldrsb	r0, [r3, r0]
   24c1c:	23d8      	movs	r3, #216	; 0xd8
   24c1e:	18fb      	adds	r3, r7, r3
   24c20:	881b      	ldrh	r3, [r3, #0]
   24c22:	9300      	str	r3, [sp, #0]
   24c24:	0023      	movs	r3, r4
   24c26:	4c5e      	ldr	r4, [pc, #376]	; (24da0 <m2m_ip_cb+0x544>)
   24c28:	47a0      	blx	r4
	{
   24c2a:	e0ad      	b.n	24d88 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24c2c:	2370      	movs	r3, #112	; 0x70
   24c2e:	18fb      	adds	r3, r7, r3
   24c30:	22d2      	movs	r2, #210	; 0xd2
   24c32:	18ba      	adds	r2, r7, r2
   24c34:	8812      	ldrh	r2, [r2, #0]
   24c36:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   24c38:	2370      	movs	r3, #112	; 0x70
   24c3a:	18fb      	adds	r3, r7, r3
   24c3c:	2200      	movs	r2, #0
   24c3e:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24c40:	4b58      	ldr	r3, [pc, #352]	; (24da4 <m2m_ip_cb+0x548>)
   24c42:	681b      	ldr	r3, [r3, #0]
   24c44:	2b00      	cmp	r3, #0
   24c46:	d100      	bne.n	24c4a <m2m_ip_cb+0x3ee>
   24c48:	e09e      	b.n	24d88 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   24c4a:	4b56      	ldr	r3, [pc, #344]	; (24da4 <m2m_ip_cb+0x548>)
   24c4c:	681b      	ldr	r3, [r3, #0]
   24c4e:	2270      	movs	r2, #112	; 0x70
   24c50:	18bc      	adds	r4, r7, r2
   24c52:	22df      	movs	r2, #223	; 0xdf
   24c54:	18ba      	adds	r2, r7, r2
   24c56:	7811      	ldrb	r1, [r2, #0]
   24c58:	22d5      	movs	r2, #213	; 0xd5
   24c5a:	18ba      	adds	r2, r7, r2
   24c5c:	2000      	movs	r0, #0
   24c5e:	5610      	ldrsb	r0, [r2, r0]
   24c60:	0022      	movs	r2, r4
   24c62:	4798      	blx	r3
	{
   24c64:	e090      	b.n	24d88 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   24c66:	23d8      	movs	r3, #216	; 0xd8
   24c68:	18fa      	adds	r2, r7, r3
   24c6a:	1d3b      	adds	r3, r7, #4
   24c6c:	8812      	ldrh	r2, [r2, #0]
   24c6e:	881b      	ldrh	r3, [r3, #0]
   24c70:	429a      	cmp	r2, r3
   24c72:	d300      	bcc.n	24c76 <m2m_ip_cb+0x41a>
   24c74:	e088      	b.n	24d88 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24c76:	2301      	movs	r3, #1
   24c78:	2200      	movs	r2, #0
   24c7a:	2100      	movs	r1, #0
   24c7c:	2000      	movs	r0, #0
   24c7e:	4c46      	ldr	r4, [pc, #280]	; (24d98 <m2m_ip_cb+0x53c>)
   24c80:	47a0      	blx	r4
	{
   24c82:	e081      	b.n	24d88 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   24c84:	1dfb      	adds	r3, r7, #7
   24c86:	781b      	ldrb	r3, [r3, #0]
   24c88:	2b45      	cmp	r3, #69	; 0x45
   24c8a:	d007      	beq.n	24c9c <m2m_ip_cb+0x440>
   24c8c:	1dfb      	adds	r3, r7, #7
   24c8e:	781b      	ldrb	r3, [r3, #0]
   24c90:	2b47      	cmp	r3, #71	; 0x47
   24c92:	d003      	beq.n	24c9c <m2m_ip_cb+0x440>
   24c94:	1dfb      	adds	r3, r7, #7
   24c96:	781b      	ldrb	r3, [r3, #0]
   24c98:	2b4c      	cmp	r3, #76	; 0x4c
   24c9a:	d14c      	bne.n	24d36 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   24c9c:	23de      	movs	r3, #222	; 0xde
   24c9e:	18fb      	adds	r3, r7, r3
   24ca0:	2207      	movs	r2, #7
   24ca2:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   24ca4:	1dfb      	adds	r3, r7, #7
   24ca6:	781b      	ldrb	r3, [r3, #0]
   24ca8:	2b47      	cmp	r3, #71	; 0x47
   24caa:	d103      	bne.n	24cb4 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   24cac:	23de      	movs	r3, #222	; 0xde
   24cae:	18fb      	adds	r3, r7, r3
   24cb0:	2208      	movs	r2, #8
   24cb2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   24cb4:	2364      	movs	r3, #100	; 0x64
   24cb6:	18f9      	adds	r1, r7, r3
   24cb8:	6838      	ldr	r0, [r7, #0]
   24cba:	2300      	movs	r3, #0
   24cbc:	2208      	movs	r2, #8
   24cbe:	4c36      	ldr	r4, [pc, #216]	; (24d98 <m2m_ip_cb+0x53c>)
   24cc0:	47a0      	blx	r4
   24cc2:	1e03      	subs	r3, r0, #0
   24cc4:	d162      	bne.n	24d8c <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   24cc6:	23dc      	movs	r3, #220	; 0xdc
   24cc8:	18fb      	adds	r3, r7, r3
   24cca:	2200      	movs	r2, #0
   24ccc:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   24cce:	23db      	movs	r3, #219	; 0xdb
   24cd0:	18fb      	adds	r3, r7, r3
   24cd2:	2264      	movs	r2, #100	; 0x64
   24cd4:	18ba      	adds	r2, r7, r2
   24cd6:	7812      	ldrb	r2, [r2, #0]
   24cd8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   24cda:	23dc      	movs	r3, #220	; 0xdc
   24cdc:	18fb      	adds	r3, r7, r3
   24cde:	2264      	movs	r2, #100	; 0x64
   24ce0:	18ba      	adds	r2, r7, r2
   24ce2:	8892      	ldrh	r2, [r2, #4]
   24ce4:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   24ce6:	2364      	movs	r3, #100	; 0x64
   24ce8:	18fb      	adds	r3, r7, r3
   24cea:	2202      	movs	r2, #2
   24cec:	5e9a      	ldrsh	r2, [r3, r2]
   24cee:	236e      	movs	r3, #110	; 0x6e
   24cf0:	18fb      	adds	r3, r7, r3
   24cf2:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24cf4:	23db      	movs	r3, #219	; 0xdb
   24cf6:	18fb      	adds	r3, r7, r3
   24cf8:	781b      	ldrb	r3, [r3, #0]
   24cfa:	b25b      	sxtb	r3, r3
   24cfc:	4a27      	ldr	r2, [pc, #156]	; (24d9c <m2m_ip_cb+0x540>)
   24cfe:	011b      	lsls	r3, r3, #4
   24d00:	18d3      	adds	r3, r2, r3
   24d02:	3306      	adds	r3, #6
   24d04:	881b      	ldrh	r3, [r3, #0]
   24d06:	b29b      	uxth	r3, r3
   24d08:	22dc      	movs	r2, #220	; 0xdc
   24d0a:	18ba      	adds	r2, r7, r2
   24d0c:	8812      	ldrh	r2, [r2, #0]
   24d0e:	429a      	cmp	r2, r3
   24d10:	d13c      	bne.n	24d8c <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   24d12:	4b24      	ldr	r3, [pc, #144]	; (24da4 <m2m_ip_cb+0x548>)
   24d14:	681b      	ldr	r3, [r3, #0]
   24d16:	2b00      	cmp	r3, #0
   24d18:	d038      	beq.n	24d8c <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   24d1a:	4b22      	ldr	r3, [pc, #136]	; (24da4 <m2m_ip_cb+0x548>)
   24d1c:	681b      	ldr	r3, [r3, #0]
   24d1e:	226e      	movs	r2, #110	; 0x6e
   24d20:	18bc      	adds	r4, r7, r2
   24d22:	22de      	movs	r2, #222	; 0xde
   24d24:	18ba      	adds	r2, r7, r2
   24d26:	7811      	ldrb	r1, [r2, #0]
   24d28:	22db      	movs	r2, #219	; 0xdb
   24d2a:	18ba      	adds	r2, r7, r2
   24d2c:	2000      	movs	r0, #0
   24d2e:	5610      	ldrsb	r0, [r2, r0]
   24d30:	0022      	movs	r2, r4
   24d32:	4798      	blx	r3
	{
   24d34:	e02a      	b.n	24d8c <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   24d36:	1dfb      	adds	r3, r7, #7
   24d38:	781b      	ldrb	r3, [r3, #0]
   24d3a:	2b52      	cmp	r3, #82	; 0x52
   24d3c:	d127      	bne.n	24d8e <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   24d3e:	2350      	movs	r3, #80	; 0x50
   24d40:	18f9      	adds	r1, r7, r3
   24d42:	6838      	ldr	r0, [r7, #0]
   24d44:	2301      	movs	r3, #1
   24d46:	2214      	movs	r2, #20
   24d48:	4c13      	ldr	r4, [pc, #76]	; (24d98 <m2m_ip_cb+0x53c>)
   24d4a:	47a0      	blx	r4
   24d4c:	1e03      	subs	r3, r0, #0
   24d4e:	d11e      	bne.n	24d8e <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   24d50:	2350      	movs	r3, #80	; 0x50
   24d52:	18fb      	adds	r3, r7, r3
   24d54:	685b      	ldr	r3, [r3, #4]
   24d56:	001a      	movs	r2, r3
   24d58:	4b13      	ldr	r3, [pc, #76]	; (24da8 <m2m_ip_cb+0x54c>)
   24d5a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24d5c:	4b12      	ldr	r3, [pc, #72]	; (24da8 <m2m_ip_cb+0x54c>)
   24d5e:	681b      	ldr	r3, [r3, #0]
   24d60:	2b00      	cmp	r3, #0
   24d62:	d014      	beq.n	24d8e <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24d64:	4b10      	ldr	r3, [pc, #64]	; (24da8 <m2m_ip_cb+0x54c>)
   24d66:	681c      	ldr	r4, [r3, #0]
   24d68:	2350      	movs	r3, #80	; 0x50
   24d6a:	18fb      	adds	r3, r7, r3
   24d6c:	6818      	ldr	r0, [r3, #0]
   24d6e:	2350      	movs	r3, #80	; 0x50
   24d70:	18fb      	adds	r3, r7, r3
   24d72:	6899      	ldr	r1, [r3, #8]
   24d74:	2350      	movs	r3, #80	; 0x50
   24d76:	18fb      	adds	r3, r7, r3
   24d78:	7c1b      	ldrb	r3, [r3, #16]
   24d7a:	001a      	movs	r2, r3
   24d7c:	47a0      	blx	r4
}
   24d7e:	e006      	b.n	24d8e <m2m_ip_cb+0x532>
	{
   24d80:	46c0      	nop			; (mov r8, r8)
   24d82:	e004      	b.n	24d8e <m2m_ip_cb+0x532>
	{
   24d84:	46c0      	nop			; (mov r8, r8)
   24d86:	e002      	b.n	24d8e <m2m_ip_cb+0x532>
	{
   24d88:	46c0      	nop			; (mov r8, r8)
   24d8a:	e000      	b.n	24d8e <m2m_ip_cb+0x532>
	{
   24d8c:	46c0      	nop			; (mov r8, r8)
}
   24d8e:	46c0      	nop			; (mov r8, r8)
   24d90:	46bd      	mov	sp, r7
   24d92:	b039      	add	sp, #228	; 0xe4
   24d94:	bd90      	pop	{r4, r7, pc}
   24d96:	46c0      	nop			; (mov r8, r8)
   24d98:	00021059 	.word	0x00021059
   24d9c:	20005908 	.word	0x20005908
   24da0:	00024661 	.word	0x00024661
   24da4:	200059b8 	.word	0x200059b8
   24da8:	200059bc 	.word	0x200059bc

00024dac <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   24dac:	b580      	push	{r7, lr}
   24dae:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   24db0:	4b0c      	ldr	r3, [pc, #48]	; (24de4 <socketInit+0x38>)
   24db2:	781b      	ldrb	r3, [r3, #0]
   24db4:	b2db      	uxtb	r3, r3
   24db6:	2b00      	cmp	r3, #0
   24db8:	d110      	bne.n	24ddc <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24dba:	4b0b      	ldr	r3, [pc, #44]	; (24de8 <socketInit+0x3c>)
   24dbc:	22b0      	movs	r2, #176	; 0xb0
   24dbe:	2100      	movs	r1, #0
   24dc0:	0018      	movs	r0, r3
   24dc2:	4b0a      	ldr	r3, [pc, #40]	; (24dec <socketInit+0x40>)
   24dc4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   24dc6:	4b0a      	ldr	r3, [pc, #40]	; (24df0 <socketInit+0x44>)
   24dc8:	0019      	movs	r1, r3
   24dca:	2002      	movs	r0, #2
   24dcc:	4b09      	ldr	r3, [pc, #36]	; (24df4 <socketInit+0x48>)
   24dce:	4798      	blx	r3
		gbSocketInit	= 1;
   24dd0:	4b04      	ldr	r3, [pc, #16]	; (24de4 <socketInit+0x38>)
   24dd2:	2201      	movs	r2, #1
   24dd4:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   24dd6:	4b08      	ldr	r3, [pc, #32]	; (24df8 <socketInit+0x4c>)
   24dd8:	2200      	movs	r2, #0
   24dda:	801a      	strh	r2, [r3, #0]
	}
}
   24ddc:	46c0      	nop			; (mov r8, r8)
   24dde:	46bd      	mov	sp, r7
   24de0:	bd80      	pop	{r7, pc}
   24de2:	46c0      	nop			; (mov r8, r8)
   24de4:	20004130 	.word	0x20004130
   24de8:	20005908 	.word	0x20005908
   24dec:	000204dd 	.word	0x000204dd
   24df0:	0002485d 	.word	0x0002485d
   24df4:	000211d9 	.word	0x000211d9
   24df8:	2000412e 	.word	0x2000412e

00024dfc <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   24dfc:	b580      	push	{r7, lr}
   24dfe:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24e00:	4b0a      	ldr	r3, [pc, #40]	; (24e2c <socketDeinit+0x30>)
   24e02:	22b0      	movs	r2, #176	; 0xb0
   24e04:	2100      	movs	r1, #0
   24e06:	0018      	movs	r0, r3
   24e08:	4b09      	ldr	r3, [pc, #36]	; (24e30 <socketDeinit+0x34>)
   24e0a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   24e0c:	2100      	movs	r1, #0
   24e0e:	2002      	movs	r0, #2
   24e10:	4b08      	ldr	r3, [pc, #32]	; (24e34 <socketDeinit+0x38>)
   24e12:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   24e14:	4b08      	ldr	r3, [pc, #32]	; (24e38 <socketDeinit+0x3c>)
   24e16:	2200      	movs	r2, #0
   24e18:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   24e1a:	4b08      	ldr	r3, [pc, #32]	; (24e3c <socketDeinit+0x40>)
   24e1c:	2200      	movs	r2, #0
   24e1e:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   24e20:	4b07      	ldr	r3, [pc, #28]	; (24e40 <socketDeinit+0x44>)
   24e22:	2200      	movs	r2, #0
   24e24:	701a      	strb	r2, [r3, #0]
}
   24e26:	46c0      	nop			; (mov r8, r8)
   24e28:	46bd      	mov	sp, r7
   24e2a:	bd80      	pop	{r7, pc}
   24e2c:	20005908 	.word	0x20005908
   24e30:	000204dd 	.word	0x000204dd
   24e34:	000211d9 	.word	0x000211d9
   24e38:	200059b8 	.word	0x200059b8
   24e3c:	200059c0 	.word	0x200059c0
   24e40:	20004130 	.word	0x20004130

00024e44 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24e44:	b580      	push	{r7, lr}
   24e46:	b082      	sub	sp, #8
   24e48:	af00      	add	r7, sp, #0
   24e4a:	6078      	str	r0, [r7, #4]
   24e4c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   24e4e:	4b05      	ldr	r3, [pc, #20]	; (24e64 <registerSocketCallback+0x20>)
   24e50:	687a      	ldr	r2, [r7, #4]
   24e52:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24e54:	4b04      	ldr	r3, [pc, #16]	; (24e68 <registerSocketCallback+0x24>)
   24e56:	683a      	ldr	r2, [r7, #0]
   24e58:	601a      	str	r2, [r3, #0]
}
   24e5a:	46c0      	nop			; (mov r8, r8)
   24e5c:	46bd      	mov	sp, r7
   24e5e:	b002      	add	sp, #8
   24e60:	bd80      	pop	{r7, pc}
   24e62:	46c0      	nop			; (mov r8, r8)
   24e64:	200059b8 	.word	0x200059b8
   24e68:	200059c0 	.word	0x200059c0

00024e6c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   24e6c:	b590      	push	{r4, r7, lr}
   24e6e:	b08d      	sub	sp, #52	; 0x34
   24e70:	af04      	add	r7, sp, #16
   24e72:	0004      	movs	r4, r0
   24e74:	0008      	movs	r0, r1
   24e76:	0011      	movs	r1, r2
   24e78:	1dbb      	adds	r3, r7, #6
   24e7a:	1c22      	adds	r2, r4, #0
   24e7c:	801a      	strh	r2, [r3, #0]
   24e7e:	1d7b      	adds	r3, r7, #5
   24e80:	1c02      	adds	r2, r0, #0
   24e82:	701a      	strb	r2, [r3, #0]
   24e84:	1d3b      	adds	r3, r7, #4
   24e86:	1c0a      	adds	r2, r1, #0
   24e88:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   24e8a:	231f      	movs	r3, #31
   24e8c:	18fb      	adds	r3, r7, r3
   24e8e:	22ff      	movs	r2, #255	; 0xff
   24e90:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   24e92:	1dbb      	adds	r3, r7, #6
   24e94:	881b      	ldrh	r3, [r3, #0]
   24e96:	2b02      	cmp	r3, #2
   24e98:	d000      	beq.n	24e9c <socket+0x30>
   24e9a:	e0ce      	b.n	2503a <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   24e9c:	1d7b      	adds	r3, r7, #5
   24e9e:	781b      	ldrb	r3, [r3, #0]
   24ea0:	2b01      	cmp	r3, #1
   24ea2:	d135      	bne.n	24f10 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24ea4:	231e      	movs	r3, #30
   24ea6:	18fb      	adds	r3, r7, r3
   24ea8:	2200      	movs	r2, #0
   24eaa:	701a      	strb	r2, [r3, #0]
   24eac:	e02a      	b.n	24f04 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   24eae:	2317      	movs	r3, #23
   24eb0:	18fb      	adds	r3, r7, r3
   24eb2:	4a66      	ldr	r2, [pc, #408]	; (2504c <socket+0x1e0>)
   24eb4:	7812      	ldrb	r2, [r2, #0]
   24eb6:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   24eb8:	4b64      	ldr	r3, [pc, #400]	; (2504c <socket+0x1e0>)
   24eba:	781b      	ldrb	r3, [r3, #0]
   24ebc:	b2db      	uxtb	r3, r3
   24ebe:	011a      	lsls	r2, r3, #4
   24ec0:	4b63      	ldr	r3, [pc, #396]	; (25050 <socket+0x1e4>)
   24ec2:	18d3      	adds	r3, r2, r3
   24ec4:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   24ec6:	4b61      	ldr	r3, [pc, #388]	; (2504c <socket+0x1e0>)
   24ec8:	781b      	ldrb	r3, [r3, #0]
   24eca:	b2db      	uxtb	r3, r3
   24ecc:	1c5a      	adds	r2, r3, #1
   24ece:	4b61      	ldr	r3, [pc, #388]	; (25054 <socket+0x1e8>)
   24ed0:	2107      	movs	r1, #7
   24ed2:	0010      	movs	r0, r2
   24ed4:	4798      	blx	r3
   24ed6:	000b      	movs	r3, r1
   24ed8:	b2da      	uxtb	r2, r3
   24eda:	4b5c      	ldr	r3, [pc, #368]	; (2504c <socket+0x1e0>)
   24edc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24ede:	69bb      	ldr	r3, [r7, #24]
   24ee0:	7a9b      	ldrb	r3, [r3, #10]
   24ee2:	b2db      	uxtb	r3, r3
   24ee4:	2b00      	cmp	r3, #0
   24ee6:	d106      	bne.n	24ef6 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   24ee8:	231f      	movs	r3, #31
   24eea:	18fb      	adds	r3, r7, r3
   24eec:	2217      	movs	r2, #23
   24eee:	18ba      	adds	r2, r7, r2
   24ef0:	7812      	ldrb	r2, [r2, #0]
   24ef2:	701a      	strb	r2, [r3, #0]
					break;
   24ef4:	e04c      	b.n	24f90 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24ef6:	231e      	movs	r3, #30
   24ef8:	18fb      	adds	r3, r7, r3
   24efa:	781a      	ldrb	r2, [r3, #0]
   24efc:	231e      	movs	r3, #30
   24efe:	18fb      	adds	r3, r7, r3
   24f00:	3201      	adds	r2, #1
   24f02:	701a      	strb	r2, [r3, #0]
   24f04:	231e      	movs	r3, #30
   24f06:	18fb      	adds	r3, r7, r3
   24f08:	781b      	ldrb	r3, [r3, #0]
   24f0a:	2b06      	cmp	r3, #6
   24f0c:	d9cf      	bls.n	24eae <socket+0x42>
   24f0e:	e03f      	b.n	24f90 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   24f10:	1d7b      	adds	r3, r7, #5
   24f12:	781b      	ldrb	r3, [r3, #0]
   24f14:	2b02      	cmp	r3, #2
   24f16:	d13b      	bne.n	24f90 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   24f18:	4b4f      	ldr	r3, [pc, #316]	; (25058 <socket+0x1ec>)
   24f1a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   24f1c:	231e      	movs	r3, #30
   24f1e:	18fb      	adds	r3, r7, r3
   24f20:	2200      	movs	r2, #0
   24f22:	701a      	strb	r2, [r3, #0]
   24f24:	e02f      	b.n	24f86 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   24f26:	2317      	movs	r3, #23
   24f28:	18fb      	adds	r3, r7, r3
   24f2a:	4a4c      	ldr	r2, [pc, #304]	; (2505c <socket+0x1f0>)
   24f2c:	7812      	ldrb	r2, [r2, #0]
   24f2e:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   24f30:	4b4a      	ldr	r3, [pc, #296]	; (2505c <socket+0x1f0>)
   24f32:	781b      	ldrb	r3, [r3, #0]
   24f34:	b2db      	uxtb	r3, r3
   24f36:	011b      	lsls	r3, r3, #4
   24f38:	693a      	ldr	r2, [r7, #16]
   24f3a:	18d3      	adds	r3, r2, r3
   24f3c:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   24f3e:	4b47      	ldr	r3, [pc, #284]	; (2505c <socket+0x1f0>)
   24f40:	781b      	ldrb	r3, [r3, #0]
   24f42:	b2db      	uxtb	r3, r3
   24f44:	3301      	adds	r3, #1
   24f46:	4a46      	ldr	r2, [pc, #280]	; (25060 <socket+0x1f4>)
   24f48:	4013      	ands	r3, r2
   24f4a:	d504      	bpl.n	24f56 <socket+0xea>
   24f4c:	3b01      	subs	r3, #1
   24f4e:	2204      	movs	r2, #4
   24f50:	4252      	negs	r2, r2
   24f52:	4313      	orrs	r3, r2
   24f54:	3301      	adds	r3, #1
   24f56:	b2da      	uxtb	r2, r3
   24f58:	4b40      	ldr	r3, [pc, #256]	; (2505c <socket+0x1f0>)
   24f5a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24f5c:	69bb      	ldr	r3, [r7, #24]
   24f5e:	7a9b      	ldrb	r3, [r3, #10]
   24f60:	b2db      	uxtb	r3, r3
   24f62:	2b00      	cmp	r3, #0
   24f64:	d108      	bne.n	24f78 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   24f66:	2317      	movs	r3, #23
   24f68:	18fb      	adds	r3, r7, r3
   24f6a:	781b      	ldrb	r3, [r3, #0]
   24f6c:	3307      	adds	r3, #7
   24f6e:	b2da      	uxtb	r2, r3
   24f70:	231f      	movs	r3, #31
   24f72:	18fb      	adds	r3, r7, r3
   24f74:	701a      	strb	r2, [r3, #0]
					break;
   24f76:	e00b      	b.n	24f90 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   24f78:	231e      	movs	r3, #30
   24f7a:	18fb      	adds	r3, r7, r3
   24f7c:	781a      	ldrb	r2, [r3, #0]
   24f7e:	231e      	movs	r3, #30
   24f80:	18fb      	adds	r3, r7, r3
   24f82:	3201      	adds	r2, #1
   24f84:	701a      	strb	r2, [r3, #0]
   24f86:	231e      	movs	r3, #30
   24f88:	18fb      	adds	r3, r7, r3
   24f8a:	781b      	ldrb	r3, [r3, #0]
   24f8c:	2b03      	cmp	r3, #3
   24f8e:	d9ca      	bls.n	24f26 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   24f90:	231f      	movs	r3, #31
   24f92:	18fb      	adds	r3, r7, r3
   24f94:	781b      	ldrb	r3, [r3, #0]
   24f96:	2b7f      	cmp	r3, #127	; 0x7f
   24f98:	d84f      	bhi.n	2503a <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   24f9a:	69bb      	ldr	r3, [r7, #24]
   24f9c:	2210      	movs	r2, #16
   24f9e:	2100      	movs	r1, #0
   24fa0:	0018      	movs	r0, r3
   24fa2:	4b30      	ldr	r3, [pc, #192]	; (25064 <socket+0x1f8>)
   24fa4:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   24fa6:	69bb      	ldr	r3, [r7, #24]
   24fa8:	2201      	movs	r2, #1
   24faa:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   24fac:	4b2e      	ldr	r3, [pc, #184]	; (25068 <socket+0x1fc>)
   24fae:	881b      	ldrh	r3, [r3, #0]
   24fb0:	b29b      	uxth	r3, r3
   24fb2:	3301      	adds	r3, #1
   24fb4:	b29a      	uxth	r2, r3
   24fb6:	4b2c      	ldr	r3, [pc, #176]	; (25068 <socket+0x1fc>)
   24fb8:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   24fba:	4b2b      	ldr	r3, [pc, #172]	; (25068 <socket+0x1fc>)
   24fbc:	881b      	ldrh	r3, [r3, #0]
   24fbe:	b29b      	uxth	r3, r3
   24fc0:	2b00      	cmp	r3, #0
   24fc2:	d106      	bne.n	24fd2 <socket+0x166>
				++gu16SessionID;
   24fc4:	4b28      	ldr	r3, [pc, #160]	; (25068 <socket+0x1fc>)
   24fc6:	881b      	ldrh	r3, [r3, #0]
   24fc8:	b29b      	uxth	r3, r3
   24fca:	3301      	adds	r3, #1
   24fcc:	b29a      	uxth	r2, r3
   24fce:	4b26      	ldr	r3, [pc, #152]	; (25068 <socket+0x1fc>)
   24fd0:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   24fd2:	4b25      	ldr	r3, [pc, #148]	; (25068 <socket+0x1fc>)
   24fd4:	881b      	ldrh	r3, [r3, #0]
   24fd6:	b29a      	uxth	r2, r3
   24fd8:	69bb      	ldr	r3, [r7, #24]
   24fda:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   24fdc:	4b23      	ldr	r3, [pc, #140]	; (2506c <socket+0x200>)
   24fde:	0018      	movs	r0, r3
   24fe0:	4b23      	ldr	r3, [pc, #140]	; (25070 <socket+0x204>)
   24fe2:	4798      	blx	r3
   24fe4:	231f      	movs	r3, #31
   24fe6:	18fb      	adds	r3, r7, r3
   24fe8:	2100      	movs	r1, #0
   24fea:	5659      	ldrsb	r1, [r3, r1]
   24fec:	4b1e      	ldr	r3, [pc, #120]	; (25068 <socket+0x1fc>)
   24fee:	881b      	ldrh	r3, [r3, #0]
   24ff0:	b29b      	uxth	r3, r3
   24ff2:	001a      	movs	r2, r3
   24ff4:	4b1f      	ldr	r3, [pc, #124]	; (25074 <socket+0x208>)
   24ff6:	0018      	movs	r0, r3
   24ff8:	4b1d      	ldr	r3, [pc, #116]	; (25070 <socket+0x204>)
   24ffa:	4798      	blx	r3
   24ffc:	4b1e      	ldr	r3, [pc, #120]	; (25078 <socket+0x20c>)
   24ffe:	0018      	movs	r0, r3
   25000:	4b1b      	ldr	r3, [pc, #108]	; (25070 <socket+0x204>)
   25002:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25004:	1d3b      	adds	r3, r7, #4
   25006:	781b      	ldrb	r3, [r3, #0]
   25008:	2201      	movs	r2, #1
   2500a:	4013      	ands	r3, r2
   2500c:	d015      	beq.n	2503a <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   2500e:	230c      	movs	r3, #12
   25010:	18fb      	adds	r3, r7, r3
   25012:	221f      	movs	r2, #31
   25014:	18ba      	adds	r2, r7, r2
   25016:	7812      	ldrb	r2, [r2, #0]
   25018:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2501a:	69bb      	ldr	r3, [r7, #24]
   2501c:	2221      	movs	r2, #33	; 0x21
   2501e:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25020:	230c      	movs	r3, #12
   25022:	18fa      	adds	r2, r7, r3
   25024:	2300      	movs	r3, #0
   25026:	9302      	str	r3, [sp, #8]
   25028:	2300      	movs	r3, #0
   2502a:	9301      	str	r3, [sp, #4]
   2502c:	2300      	movs	r3, #0
   2502e:	9300      	str	r3, [sp, #0]
   25030:	2304      	movs	r3, #4
   25032:	2150      	movs	r1, #80	; 0x50
   25034:	2002      	movs	r0, #2
   25036:	4c11      	ldr	r4, [pc, #68]	; (2507c <socket+0x210>)
   25038:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2503a:	231f      	movs	r3, #31
   2503c:	18fb      	adds	r3, r7, r3
   2503e:	781b      	ldrb	r3, [r3, #0]
   25040:	b25b      	sxtb	r3, r3
}
   25042:	0018      	movs	r0, r3
   25044:	46bd      	mov	sp, r7
   25046:	b009      	add	sp, #36	; 0x24
   25048:	bd90      	pop	{r4, r7, pc}
   2504a:	46c0      	nop			; (mov r8, r8)
   2504c:	20004131 	.word	0x20004131
   25050:	20005908 	.word	0x20005908
   25054:	00032525 	.word	0x00032525
   25058:	20005978 	.word	0x20005978
   2505c:	20004132 	.word	0x20004132
   25060:	80000003 	.word	0x80000003
   25064:	000204dd 	.word	0x000204dd
   25068:	2000412e 	.word	0x2000412e
   2506c:	00038cc0 	.word	0x00038cc0
   25070:	0001d7a9 	.word	0x0001d7a9
   25074:	00038ce4 	.word	0x00038ce4
   25078:	00038ce0 	.word	0x00038ce0
   2507c:	0002073d 	.word	0x0002073d

00025080 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25080:	b5b0      	push	{r4, r5, r7, lr}
   25082:	b08a      	sub	sp, #40	; 0x28
   25084:	af04      	add	r7, sp, #16
   25086:	6039      	str	r1, [r7, #0]
   25088:	0011      	movs	r1, r2
   2508a:	1dfb      	adds	r3, r7, #7
   2508c:	1c02      	adds	r2, r0, #0
   2508e:	701a      	strb	r2, [r3, #0]
   25090:	1dbb      	adds	r3, r7, #6
   25092:	1c0a      	adds	r2, r1, #0
   25094:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25096:	2317      	movs	r3, #23
   25098:	18fb      	adds	r3, r7, r3
   2509a:	22fa      	movs	r2, #250	; 0xfa
   2509c:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   2509e:	1dfb      	adds	r3, r7, #7
   250a0:	781b      	ldrb	r3, [r3, #0]
   250a2:	2b7f      	cmp	r3, #127	; 0x7f
   250a4:	d867      	bhi.n	25176 <connect+0xf6>
   250a6:	683b      	ldr	r3, [r7, #0]
   250a8:	2b00      	cmp	r3, #0
   250aa:	d064      	beq.n	25176 <connect+0xf6>
   250ac:	1dfb      	adds	r3, r7, #7
   250ae:	781b      	ldrb	r3, [r3, #0]
   250b0:	b25b      	sxtb	r3, r3
   250b2:	4a35      	ldr	r2, [pc, #212]	; (25188 <connect+0x108>)
   250b4:	011b      	lsls	r3, r3, #4
   250b6:	18d3      	adds	r3, r2, r3
   250b8:	330a      	adds	r3, #10
   250ba:	781b      	ldrb	r3, [r3, #0]
   250bc:	b2db      	uxtb	r3, r3
   250be:	2b01      	cmp	r3, #1
   250c0:	d159      	bne.n	25176 <connect+0xf6>
   250c2:	1dbb      	adds	r3, r7, #6
   250c4:	781b      	ldrb	r3, [r3, #0]
   250c6:	2b00      	cmp	r3, #0
   250c8:	d055      	beq.n	25176 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   250ca:	2316      	movs	r3, #22
   250cc:	18fb      	adds	r3, r7, r3
   250ce:	2244      	movs	r2, #68	; 0x44
   250d0:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   250d2:	1dfb      	adds	r3, r7, #7
   250d4:	781b      	ldrb	r3, [r3, #0]
   250d6:	b25b      	sxtb	r3, r3
   250d8:	4a2b      	ldr	r2, [pc, #172]	; (25188 <connect+0x108>)
   250da:	011b      	lsls	r3, r3, #4
   250dc:	18d3      	adds	r3, r2, r3
   250de:	330b      	adds	r3, #11
   250e0:	781b      	ldrb	r3, [r3, #0]
   250e2:	b2db      	uxtb	r3, r3
   250e4:	001a      	movs	r2, r3
   250e6:	2301      	movs	r3, #1
   250e8:	4013      	ands	r3, r2
   250ea:	d00f      	beq.n	2510c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   250ec:	2316      	movs	r3, #22
   250ee:	18fb      	adds	r3, r7, r3
   250f0:	224b      	movs	r2, #75	; 0x4b
   250f2:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   250f4:	1dfb      	adds	r3, r7, #7
   250f6:	781b      	ldrb	r3, [r3, #0]
   250f8:	b25b      	sxtb	r3, r3
   250fa:	4a23      	ldr	r2, [pc, #140]	; (25188 <connect+0x108>)
   250fc:	011b      	lsls	r3, r3, #4
   250fe:	18d3      	adds	r3, r2, r3
   25100:	330b      	adds	r3, #11
   25102:	781b      	ldrb	r3, [r3, #0]
   25104:	b2da      	uxtb	r2, r3
   25106:	2308      	movs	r3, #8
   25108:	18fb      	adds	r3, r7, r3
   2510a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   2510c:	2308      	movs	r3, #8
   2510e:	18fb      	adds	r3, r7, r3
   25110:	1dfa      	adds	r2, r7, #7
   25112:	7812      	ldrb	r2, [r2, #0]
   25114:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25116:	6839      	ldr	r1, [r7, #0]
   25118:	2308      	movs	r3, #8
   2511a:	18fb      	adds	r3, r7, r3
   2511c:	2208      	movs	r2, #8
   2511e:	0018      	movs	r0, r3
   25120:	4b1a      	ldr	r3, [pc, #104]	; (2518c <connect+0x10c>)
   25122:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25124:	1dfb      	adds	r3, r7, #7
   25126:	781b      	ldrb	r3, [r3, #0]
   25128:	b25b      	sxtb	r3, r3
   2512a:	4a17      	ldr	r2, [pc, #92]	; (25188 <connect+0x108>)
   2512c:	011b      	lsls	r3, r3, #4
   2512e:	18d3      	adds	r3, r2, r3
   25130:	3306      	adds	r3, #6
   25132:	881b      	ldrh	r3, [r3, #0]
   25134:	b29a      	uxth	r2, r3
   25136:	2308      	movs	r3, #8
   25138:	18fb      	adds	r3, r7, r3
   2513a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   2513c:	2317      	movs	r3, #23
   2513e:	18fc      	adds	r4, r7, r3
   25140:	2308      	movs	r3, #8
   25142:	18fa      	adds	r2, r7, r3
   25144:	2316      	movs	r3, #22
   25146:	18fb      	adds	r3, r7, r3
   25148:	7819      	ldrb	r1, [r3, #0]
   2514a:	2300      	movs	r3, #0
   2514c:	9302      	str	r3, [sp, #8]
   2514e:	2300      	movs	r3, #0
   25150:	9301      	str	r3, [sp, #4]
   25152:	2300      	movs	r3, #0
   25154:	9300      	str	r3, [sp, #0]
   25156:	230c      	movs	r3, #12
   25158:	2002      	movs	r0, #2
   2515a:	4d0d      	ldr	r5, [pc, #52]	; (25190 <connect+0x110>)
   2515c:	47a8      	blx	r5
   2515e:	0003      	movs	r3, r0
   25160:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25162:	2317      	movs	r3, #23
   25164:	18fb      	adds	r3, r7, r3
   25166:	781b      	ldrb	r3, [r3, #0]
   25168:	b25b      	sxtb	r3, r3
   2516a:	2b00      	cmp	r3, #0
   2516c:	d003      	beq.n	25176 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   2516e:	2317      	movs	r3, #23
   25170:	18fb      	adds	r3, r7, r3
   25172:	22f7      	movs	r2, #247	; 0xf7
   25174:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   25176:	2317      	movs	r3, #23
   25178:	18fb      	adds	r3, r7, r3
   2517a:	781b      	ldrb	r3, [r3, #0]
   2517c:	b25b      	sxtb	r3, r3
}
   2517e:	0018      	movs	r0, r3
   25180:	46bd      	mov	sp, r7
   25182:	b006      	add	sp, #24
   25184:	bdb0      	pop	{r4, r5, r7, pc}
   25186:	46c0      	nop			; (mov r8, r8)
   25188:	20005908 	.word	0x20005908
   2518c:	000204a1 	.word	0x000204a1
   25190:	0002073d 	.word	0x0002073d

00025194 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25194:	b590      	push	{r4, r7, lr}
   25196:	b08f      	sub	sp, #60	; 0x3c
   25198:	af04      	add	r7, sp, #16
   2519a:	0004      	movs	r4, r0
   2519c:	60b9      	str	r1, [r7, #8]
   2519e:	0010      	movs	r0, r2
   251a0:	0019      	movs	r1, r3
   251a2:	230f      	movs	r3, #15
   251a4:	18fb      	adds	r3, r7, r3
   251a6:	1c22      	adds	r2, r4, #0
   251a8:	701a      	strb	r2, [r3, #0]
   251aa:	230c      	movs	r3, #12
   251ac:	18fb      	adds	r3, r7, r3
   251ae:	1c02      	adds	r2, r0, #0
   251b0:	801a      	strh	r2, [r3, #0]
   251b2:	1dbb      	adds	r3, r7, #6
   251b4:	1c0a      	adds	r2, r1, #0
   251b6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   251b8:	2326      	movs	r3, #38	; 0x26
   251ba:	18fb      	adds	r3, r7, r3
   251bc:	2206      	movs	r2, #6
   251be:	4252      	negs	r2, r2
   251c0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   251c2:	230f      	movs	r3, #15
   251c4:	18fb      	adds	r3, r7, r3
   251c6:	781b      	ldrb	r3, [r3, #0]
   251c8:	2b7f      	cmp	r3, #127	; 0x7f
   251ca:	d900      	bls.n	251ce <send+0x3a>
   251cc:	e087      	b.n	252de <send+0x14a>
   251ce:	68bb      	ldr	r3, [r7, #8]
   251d0:	2b00      	cmp	r3, #0
   251d2:	d100      	bne.n	251d6 <send+0x42>
   251d4:	e083      	b.n	252de <send+0x14a>
   251d6:	230c      	movs	r3, #12
   251d8:	18fb      	adds	r3, r7, r3
   251da:	881a      	ldrh	r2, [r3, #0]
   251dc:	23af      	movs	r3, #175	; 0xaf
   251de:	00db      	lsls	r3, r3, #3
   251e0:	429a      	cmp	r2, r3
   251e2:	d900      	bls.n	251e6 <send+0x52>
   251e4:	e07b      	b.n	252de <send+0x14a>
   251e6:	230f      	movs	r3, #15
   251e8:	18fb      	adds	r3, r7, r3
   251ea:	781b      	ldrb	r3, [r3, #0]
   251ec:	b25b      	sxtb	r3, r3
   251ee:	4a40      	ldr	r2, [pc, #256]	; (252f0 <send+0x15c>)
   251f0:	011b      	lsls	r3, r3, #4
   251f2:	18d3      	adds	r3, r2, r3
   251f4:	330a      	adds	r3, #10
   251f6:	781b      	ldrb	r3, [r3, #0]
   251f8:	b2db      	uxtb	r3, r3
   251fa:	2b01      	cmp	r3, #1
   251fc:	d16f      	bne.n	252de <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   251fe:	2323      	movs	r3, #35	; 0x23
   25200:	18fb      	adds	r3, r7, r3
   25202:	2245      	movs	r2, #69	; 0x45
   25204:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25206:	2324      	movs	r3, #36	; 0x24
   25208:	18fb      	adds	r3, r7, r3
   2520a:	2250      	movs	r2, #80	; 0x50
   2520c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   2520e:	2310      	movs	r3, #16
   25210:	18fb      	adds	r3, r7, r3
   25212:	220f      	movs	r2, #15
   25214:	18ba      	adds	r2, r7, r2
   25216:	7812      	ldrb	r2, [r2, #0]
   25218:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2521a:	2310      	movs	r3, #16
   2521c:	18fb      	adds	r3, r7, r3
   2521e:	220c      	movs	r2, #12
   25220:	18ba      	adds	r2, r7, r2
   25222:	8812      	ldrh	r2, [r2, #0]
   25224:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   25226:	230f      	movs	r3, #15
   25228:	18fb      	adds	r3, r7, r3
   2522a:	781b      	ldrb	r3, [r3, #0]
   2522c:	b25b      	sxtb	r3, r3
   2522e:	4a30      	ldr	r2, [pc, #192]	; (252f0 <send+0x15c>)
   25230:	011b      	lsls	r3, r3, #4
   25232:	18d3      	adds	r3, r2, r3
   25234:	3306      	adds	r3, #6
   25236:	881b      	ldrh	r3, [r3, #0]
   25238:	b29a      	uxth	r2, r3
   2523a:	2310      	movs	r3, #16
   2523c:	18fb      	adds	r3, r7, r3
   2523e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25240:	230f      	movs	r3, #15
   25242:	18fb      	adds	r3, r7, r3
   25244:	781b      	ldrb	r3, [r3, #0]
   25246:	b25b      	sxtb	r3, r3
   25248:	2b06      	cmp	r3, #6
   2524a:	dd03      	ble.n	25254 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   2524c:	2324      	movs	r3, #36	; 0x24
   2524e:	18fb      	adds	r3, r7, r3
   25250:	2244      	movs	r2, #68	; 0x44
   25252:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25254:	230f      	movs	r3, #15
   25256:	18fb      	adds	r3, r7, r3
   25258:	781b      	ldrb	r3, [r3, #0]
   2525a:	b25b      	sxtb	r3, r3
   2525c:	4a24      	ldr	r2, [pc, #144]	; (252f0 <send+0x15c>)
   2525e:	011b      	lsls	r3, r3, #4
   25260:	18d3      	adds	r3, r2, r3
   25262:	330b      	adds	r3, #11
   25264:	781b      	ldrb	r3, [r3, #0]
   25266:	b2db      	uxtb	r3, r3
   25268:	001a      	movs	r2, r3
   2526a:	2301      	movs	r3, #1
   2526c:	4013      	ands	r3, r2
   2526e:	d00f      	beq.n	25290 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25270:	2323      	movs	r3, #35	; 0x23
   25272:	18fb      	adds	r3, r7, r3
   25274:	224c      	movs	r2, #76	; 0x4c
   25276:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   25278:	230f      	movs	r3, #15
   2527a:	18fb      	adds	r3, r7, r3
   2527c:	2200      	movs	r2, #0
   2527e:	569a      	ldrsb	r2, [r3, r2]
   25280:	2324      	movs	r3, #36	; 0x24
   25282:	18fb      	adds	r3, r7, r3
   25284:	491a      	ldr	r1, [pc, #104]	; (252f0 <send+0x15c>)
   25286:	0112      	lsls	r2, r2, #4
   25288:	188a      	adds	r2, r1, r2
   2528a:	3208      	adds	r2, #8
   2528c:	8812      	ldrh	r2, [r2, #0]
   2528e:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25290:	2323      	movs	r3, #35	; 0x23
   25292:	18fb      	adds	r3, r7, r3
   25294:	781b      	ldrb	r3, [r3, #0]
   25296:	2280      	movs	r2, #128	; 0x80
   25298:	4252      	negs	r2, r2
   2529a:	4313      	orrs	r3, r2
   2529c:	b2d9      	uxtb	r1, r3
   2529e:	2310      	movs	r3, #16
   252a0:	18fa      	adds	r2, r7, r3
   252a2:	2324      	movs	r3, #36	; 0x24
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	881b      	ldrh	r3, [r3, #0]
   252a8:	9302      	str	r3, [sp, #8]
   252aa:	230c      	movs	r3, #12
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	881b      	ldrh	r3, [r3, #0]
   252b0:	9301      	str	r3, [sp, #4]
   252b2:	68bb      	ldr	r3, [r7, #8]
   252b4:	9300      	str	r3, [sp, #0]
   252b6:	2310      	movs	r3, #16
   252b8:	2002      	movs	r0, #2
   252ba:	4c0e      	ldr	r4, [pc, #56]	; (252f4 <send+0x160>)
   252bc:	47a0      	blx	r4
   252be:	0003      	movs	r3, r0
   252c0:	001a      	movs	r2, r3
   252c2:	2326      	movs	r3, #38	; 0x26
   252c4:	18fb      	adds	r3, r7, r3
   252c6:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   252c8:	2326      	movs	r3, #38	; 0x26
   252ca:	18fb      	adds	r3, r7, r3
   252cc:	2200      	movs	r2, #0
   252ce:	5e9b      	ldrsh	r3, [r3, r2]
   252d0:	2b00      	cmp	r3, #0
   252d2:	d004      	beq.n	252de <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   252d4:	2326      	movs	r3, #38	; 0x26
   252d6:	18fb      	adds	r3, r7, r3
   252d8:	220e      	movs	r2, #14
   252da:	4252      	negs	r2, r2
   252dc:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   252de:	2326      	movs	r3, #38	; 0x26
   252e0:	18fb      	adds	r3, r7, r3
   252e2:	2200      	movs	r2, #0
   252e4:	5e9b      	ldrsh	r3, [r3, r2]
}
   252e6:	0018      	movs	r0, r3
   252e8:	46bd      	mov	sp, r7
   252ea:	b00b      	add	sp, #44	; 0x2c
   252ec:	bd90      	pop	{r4, r7, pc}
   252ee:	46c0      	nop			; (mov r8, r8)
   252f0:	20005908 	.word	0x20005908
   252f4:	0002073d 	.word	0x0002073d

000252f8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   252f8:	b590      	push	{r4, r7, lr}
   252fa:	b08d      	sub	sp, #52	; 0x34
   252fc:	af04      	add	r7, sp, #16
   252fe:	60b9      	str	r1, [r7, #8]
   25300:	0011      	movs	r1, r2
   25302:	607b      	str	r3, [r7, #4]
   25304:	230f      	movs	r3, #15
   25306:	18fb      	adds	r3, r7, r3
   25308:	1c02      	adds	r2, r0, #0
   2530a:	701a      	strb	r2, [r3, #0]
   2530c:	230c      	movs	r3, #12
   2530e:	18fb      	adds	r3, r7, r3
   25310:	1c0a      	adds	r2, r1, #0
   25312:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25314:	231e      	movs	r3, #30
   25316:	18fb      	adds	r3, r7, r3
   25318:	2206      	movs	r2, #6
   2531a:	4252      	negs	r2, r2
   2531c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   2531e:	230f      	movs	r3, #15
   25320:	18fb      	adds	r3, r7, r3
   25322:	781b      	ldrb	r3, [r3, #0]
   25324:	2b7f      	cmp	r3, #127	; 0x7f
   25326:	d900      	bls.n	2532a <recv+0x32>
   25328:	e099      	b.n	2545e <recv+0x166>
   2532a:	68bb      	ldr	r3, [r7, #8]
   2532c:	2b00      	cmp	r3, #0
   2532e:	d100      	bne.n	25332 <recv+0x3a>
   25330:	e095      	b.n	2545e <recv+0x166>
   25332:	230c      	movs	r3, #12
   25334:	18fb      	adds	r3, r7, r3
   25336:	881b      	ldrh	r3, [r3, #0]
   25338:	2b00      	cmp	r3, #0
   2533a:	d100      	bne.n	2533e <recv+0x46>
   2533c:	e08f      	b.n	2545e <recv+0x166>
   2533e:	230f      	movs	r3, #15
   25340:	18fb      	adds	r3, r7, r3
   25342:	781b      	ldrb	r3, [r3, #0]
   25344:	b25b      	sxtb	r3, r3
   25346:	4a4a      	ldr	r2, [pc, #296]	; (25470 <recv+0x178>)
   25348:	011b      	lsls	r3, r3, #4
   2534a:	18d3      	adds	r3, r2, r3
   2534c:	330a      	adds	r3, #10
   2534e:	781b      	ldrb	r3, [r3, #0]
   25350:	b2db      	uxtb	r3, r3
   25352:	2b01      	cmp	r3, #1
   25354:	d000      	beq.n	25358 <recv+0x60>
   25356:	e082      	b.n	2545e <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   25358:	231e      	movs	r3, #30
   2535a:	18fb      	adds	r3, r7, r3
   2535c:	2200      	movs	r2, #0
   2535e:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25360:	230f      	movs	r3, #15
   25362:	18fb      	adds	r3, r7, r3
   25364:	2200      	movs	r2, #0
   25366:	569a      	ldrsb	r2, [r3, r2]
   25368:	4b41      	ldr	r3, [pc, #260]	; (25470 <recv+0x178>)
   2536a:	0112      	lsls	r2, r2, #4
   2536c:	68b9      	ldr	r1, [r7, #8]
   2536e:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   25370:	230f      	movs	r3, #15
   25372:	18fb      	adds	r3, r7, r3
   25374:	781b      	ldrb	r3, [r3, #0]
   25376:	b25b      	sxtb	r3, r3
   25378:	4a3d      	ldr	r2, [pc, #244]	; (25470 <recv+0x178>)
   2537a:	011b      	lsls	r3, r3, #4
   2537c:	18d3      	adds	r3, r2, r3
   2537e:	3304      	adds	r3, #4
   25380:	220c      	movs	r2, #12
   25382:	18ba      	adds	r2, r7, r2
   25384:	8812      	ldrh	r2, [r2, #0]
   25386:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   25388:	230f      	movs	r3, #15
   2538a:	18fb      	adds	r3, r7, r3
   2538c:	781b      	ldrb	r3, [r3, #0]
   2538e:	b25b      	sxtb	r3, r3
   25390:	4a37      	ldr	r2, [pc, #220]	; (25470 <recv+0x178>)
   25392:	011b      	lsls	r3, r3, #4
   25394:	18d3      	adds	r3, r2, r3
   25396:	330c      	adds	r3, #12
   25398:	781b      	ldrb	r3, [r3, #0]
   2539a:	b2db      	uxtb	r3, r3
   2539c:	2b00      	cmp	r3, #0
   2539e:	d15e      	bne.n	2545e <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   253a0:	231d      	movs	r3, #29
   253a2:	18fb      	adds	r3, r7, r3
   253a4:	2246      	movs	r2, #70	; 0x46
   253a6:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   253a8:	230f      	movs	r3, #15
   253aa:	18fb      	adds	r3, r7, r3
   253ac:	781b      	ldrb	r3, [r3, #0]
   253ae:	b25b      	sxtb	r3, r3
   253b0:	4a2f      	ldr	r2, [pc, #188]	; (25470 <recv+0x178>)
   253b2:	011b      	lsls	r3, r3, #4
   253b4:	18d3      	adds	r3, r2, r3
   253b6:	330c      	adds	r3, #12
   253b8:	2201      	movs	r2, #1
   253ba:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   253bc:	230f      	movs	r3, #15
   253be:	18fb      	adds	r3, r7, r3
   253c0:	781b      	ldrb	r3, [r3, #0]
   253c2:	b25b      	sxtb	r3, r3
   253c4:	4a2a      	ldr	r2, [pc, #168]	; (25470 <recv+0x178>)
   253c6:	011b      	lsls	r3, r3, #4
   253c8:	18d3      	adds	r3, r2, r3
   253ca:	330b      	adds	r3, #11
   253cc:	781b      	ldrb	r3, [r3, #0]
   253ce:	b2db      	uxtb	r3, r3
   253d0:	001a      	movs	r2, r3
   253d2:	2301      	movs	r3, #1
   253d4:	4013      	ands	r3, r2
   253d6:	d003      	beq.n	253e0 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   253d8:	231d      	movs	r3, #29
   253da:	18fb      	adds	r3, r7, r3
   253dc:	224d      	movs	r2, #77	; 0x4d
   253de:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   253e0:	687b      	ldr	r3, [r7, #4]
   253e2:	2b00      	cmp	r3, #0
   253e4:	d105      	bne.n	253f2 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   253e6:	2314      	movs	r3, #20
   253e8:	18fb      	adds	r3, r7, r3
   253ea:	2201      	movs	r2, #1
   253ec:	4252      	negs	r2, r2
   253ee:	601a      	str	r2, [r3, #0]
   253f0:	e003      	b.n	253fa <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   253f2:	2314      	movs	r3, #20
   253f4:	18fb      	adds	r3, r7, r3
   253f6:	687a      	ldr	r2, [r7, #4]
   253f8:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   253fa:	2314      	movs	r3, #20
   253fc:	18fb      	adds	r3, r7, r3
   253fe:	220f      	movs	r2, #15
   25400:	18ba      	adds	r2, r7, r2
   25402:	7812      	ldrb	r2, [r2, #0]
   25404:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25406:	230f      	movs	r3, #15
   25408:	18fb      	adds	r3, r7, r3
   2540a:	781b      	ldrb	r3, [r3, #0]
   2540c:	b25b      	sxtb	r3, r3
   2540e:	4a18      	ldr	r2, [pc, #96]	; (25470 <recv+0x178>)
   25410:	011b      	lsls	r3, r3, #4
   25412:	18d3      	adds	r3, r2, r3
   25414:	3306      	adds	r3, #6
   25416:	881b      	ldrh	r3, [r3, #0]
   25418:	b29a      	uxth	r2, r3
   2541a:	2314      	movs	r3, #20
   2541c:	18fb      	adds	r3, r7, r3
   2541e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25420:	2314      	movs	r3, #20
   25422:	18fa      	adds	r2, r7, r3
   25424:	231d      	movs	r3, #29
   25426:	18fb      	adds	r3, r7, r3
   25428:	7819      	ldrb	r1, [r3, #0]
   2542a:	2300      	movs	r3, #0
   2542c:	9302      	str	r3, [sp, #8]
   2542e:	2300      	movs	r3, #0
   25430:	9301      	str	r3, [sp, #4]
   25432:	2300      	movs	r3, #0
   25434:	9300      	str	r3, [sp, #0]
   25436:	2308      	movs	r3, #8
   25438:	2002      	movs	r0, #2
   2543a:	4c0e      	ldr	r4, [pc, #56]	; (25474 <recv+0x17c>)
   2543c:	47a0      	blx	r4
   2543e:	0003      	movs	r3, r0
   25440:	001a      	movs	r2, r3
   25442:	231e      	movs	r3, #30
   25444:	18fb      	adds	r3, r7, r3
   25446:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   25448:	231e      	movs	r3, #30
   2544a:	18fb      	adds	r3, r7, r3
   2544c:	2200      	movs	r2, #0
   2544e:	5e9b      	ldrsh	r3, [r3, r2]
   25450:	2b00      	cmp	r3, #0
   25452:	d004      	beq.n	2545e <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25454:	231e      	movs	r3, #30
   25456:	18fb      	adds	r3, r7, r3
   25458:	220e      	movs	r2, #14
   2545a:	4252      	negs	r2, r2
   2545c:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   2545e:	231e      	movs	r3, #30
   25460:	18fb      	adds	r3, r7, r3
   25462:	2200      	movs	r2, #0
   25464:	5e9b      	ldrsh	r3, [r3, r2]
}
   25466:	0018      	movs	r0, r3
   25468:	46bd      	mov	sp, r7
   2546a:	b009      	add	sp, #36	; 0x24
   2546c:	bd90      	pop	{r4, r7, pc}
   2546e:	46c0      	nop			; (mov r8, r8)
   25470:	20005908 	.word	0x20005908
   25474:	0002073d 	.word	0x0002073d

00025478 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   25478:	b5b0      	push	{r4, r5, r7, lr}
   2547a:	b088      	sub	sp, #32
   2547c:	af04      	add	r7, sp, #16
   2547e:	0002      	movs	r2, r0
   25480:	1dfb      	adds	r3, r7, #7
   25482:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25484:	230f      	movs	r3, #15
   25486:	18fb      	adds	r3, r7, r3
   25488:	22fa      	movs	r2, #250	; 0xfa
   2548a:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   2548c:	4b43      	ldr	r3, [pc, #268]	; (2559c <close+0x124>)
   2548e:	0018      	movs	r0, r3
   25490:	4b43      	ldr	r3, [pc, #268]	; (255a0 <close+0x128>)
   25492:	4798      	blx	r3
   25494:	1dfb      	adds	r3, r7, #7
   25496:	2200      	movs	r2, #0
   25498:	569a      	ldrsb	r2, [r3, r2]
   2549a:	4b42      	ldr	r3, [pc, #264]	; (255a4 <close+0x12c>)
   2549c:	0011      	movs	r1, r2
   2549e:	0018      	movs	r0, r3
   254a0:	4b3f      	ldr	r3, [pc, #252]	; (255a0 <close+0x128>)
   254a2:	4798      	blx	r3
   254a4:	4b40      	ldr	r3, [pc, #256]	; (255a8 <close+0x130>)
   254a6:	0018      	movs	r0, r3
   254a8:	4b3d      	ldr	r3, [pc, #244]	; (255a0 <close+0x128>)
   254aa:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   254ac:	1dfb      	adds	r3, r7, #7
   254ae:	781b      	ldrb	r3, [r3, #0]
   254b0:	2b7f      	cmp	r3, #127	; 0x7f
   254b2:	d86a      	bhi.n	2558a <close+0x112>
   254b4:	1dfb      	adds	r3, r7, #7
   254b6:	781b      	ldrb	r3, [r3, #0]
   254b8:	b25b      	sxtb	r3, r3
   254ba:	4a3c      	ldr	r2, [pc, #240]	; (255ac <close+0x134>)
   254bc:	011b      	lsls	r3, r3, #4
   254be:	18d3      	adds	r3, r2, r3
   254c0:	330a      	adds	r3, #10
   254c2:	781b      	ldrb	r3, [r3, #0]
   254c4:	b2db      	uxtb	r3, r3
   254c6:	2b01      	cmp	r3, #1
   254c8:	d15f      	bne.n	2558a <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   254ca:	230e      	movs	r3, #14
   254cc:	18fb      	adds	r3, r7, r3
   254ce:	2249      	movs	r2, #73	; 0x49
   254d0:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   254d2:	2308      	movs	r3, #8
   254d4:	18fb      	adds	r3, r7, r3
   254d6:	1dfa      	adds	r2, r7, #7
   254d8:	7812      	ldrb	r2, [r2, #0]
   254da:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   254dc:	1dfb      	adds	r3, r7, #7
   254de:	781b      	ldrb	r3, [r3, #0]
   254e0:	b25b      	sxtb	r3, r3
   254e2:	4a32      	ldr	r2, [pc, #200]	; (255ac <close+0x134>)
   254e4:	011b      	lsls	r3, r3, #4
   254e6:	18d3      	adds	r3, r2, r3
   254e8:	3306      	adds	r3, #6
   254ea:	881b      	ldrh	r3, [r3, #0]
   254ec:	b29a      	uxth	r2, r3
   254ee:	2308      	movs	r3, #8
   254f0:	18fb      	adds	r3, r7, r3
   254f2:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   254f4:	1dfb      	adds	r3, r7, #7
   254f6:	781b      	ldrb	r3, [r3, #0]
   254f8:	b25b      	sxtb	r3, r3
   254fa:	4a2c      	ldr	r2, [pc, #176]	; (255ac <close+0x134>)
   254fc:	011b      	lsls	r3, r3, #4
   254fe:	18d3      	adds	r3, r2, r3
   25500:	330a      	adds	r3, #10
   25502:	2200      	movs	r2, #0
   25504:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25506:	1dfb      	adds	r3, r7, #7
   25508:	781b      	ldrb	r3, [r3, #0]
   2550a:	b25b      	sxtb	r3, r3
   2550c:	4a27      	ldr	r2, [pc, #156]	; (255ac <close+0x134>)
   2550e:	011b      	lsls	r3, r3, #4
   25510:	18d3      	adds	r3, r2, r3
   25512:	3306      	adds	r3, #6
   25514:	2200      	movs	r2, #0
   25516:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25518:	1dfb      	adds	r3, r7, #7
   2551a:	781b      	ldrb	r3, [r3, #0]
   2551c:	b25b      	sxtb	r3, r3
   2551e:	4a23      	ldr	r2, [pc, #140]	; (255ac <close+0x134>)
   25520:	011b      	lsls	r3, r3, #4
   25522:	18d3      	adds	r3, r2, r3
   25524:	330b      	adds	r3, #11
   25526:	781b      	ldrb	r3, [r3, #0]
   25528:	b2db      	uxtb	r3, r3
   2552a:	001a      	movs	r2, r3
   2552c:	2301      	movs	r3, #1
   2552e:	4013      	ands	r3, r2
   25530:	d003      	beq.n	2553a <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25532:	230e      	movs	r3, #14
   25534:	18fb      	adds	r3, r7, r3
   25536:	224e      	movs	r2, #78	; 0x4e
   25538:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2553a:	230f      	movs	r3, #15
   2553c:	18fc      	adds	r4, r7, r3
   2553e:	2308      	movs	r3, #8
   25540:	18fa      	adds	r2, r7, r3
   25542:	230e      	movs	r3, #14
   25544:	18fb      	adds	r3, r7, r3
   25546:	7819      	ldrb	r1, [r3, #0]
   25548:	2300      	movs	r3, #0
   2554a:	9302      	str	r3, [sp, #8]
   2554c:	2300      	movs	r3, #0
   2554e:	9301      	str	r3, [sp, #4]
   25550:	2300      	movs	r3, #0
   25552:	9300      	str	r3, [sp, #0]
   25554:	2304      	movs	r3, #4
   25556:	2002      	movs	r0, #2
   25558:	4d15      	ldr	r5, [pc, #84]	; (255b0 <close+0x138>)
   2555a:	47a8      	blx	r5
   2555c:	0003      	movs	r3, r0
   2555e:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25560:	230f      	movs	r3, #15
   25562:	18fb      	adds	r3, r7, r3
   25564:	781b      	ldrb	r3, [r3, #0]
   25566:	b25b      	sxtb	r3, r3
   25568:	2b00      	cmp	r3, #0
   2556a:	d003      	beq.n	25574 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   2556c:	230f      	movs	r3, #15
   2556e:	18fb      	adds	r3, r7, r3
   25570:	22f7      	movs	r2, #247	; 0xf7
   25572:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   25574:	1dfb      	adds	r3, r7, #7
   25576:	781b      	ldrb	r3, [r3, #0]
   25578:	b25b      	sxtb	r3, r3
   2557a:	011a      	lsls	r2, r3, #4
   2557c:	4b0b      	ldr	r3, [pc, #44]	; (255ac <close+0x134>)
   2557e:	18d3      	adds	r3, r2, r3
   25580:	2210      	movs	r2, #16
   25582:	2100      	movs	r1, #0
   25584:	0018      	movs	r0, r3
   25586:	4b0b      	ldr	r3, [pc, #44]	; (255b4 <close+0x13c>)
   25588:	4798      	blx	r3
	}
	return s8Ret;
   2558a:	230f      	movs	r3, #15
   2558c:	18fb      	adds	r3, r7, r3
   2558e:	781b      	ldrb	r3, [r3, #0]
   25590:	b25b      	sxtb	r3, r3
}
   25592:	0018      	movs	r0, r3
   25594:	46bd      	mov	sp, r7
   25596:	b004      	add	sp, #16
   25598:	bdb0      	pop	{r4, r5, r7, pc}
   2559a:	46c0      	nop			; (mov r8, r8)
   2559c:	00038cc0 	.word	0x00038cc0
   255a0:	0001d7a9 	.word	0x0001d7a9
   255a4:	00038d00 	.word	0x00038d00
   255a8:	00038ce0 	.word	0x00038ce0
   255ac:	20005908 	.word	0x20005908
   255b0:	0002073d 	.word	0x0002073d
   255b4:	000204dd 	.word	0x000204dd

000255b8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   255b8:	b580      	push	{r7, lr}
   255ba:	b086      	sub	sp, #24
   255bc:	af00      	add	r7, sp, #0
   255be:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   255c0:	2300      	movs	r3, #0
   255c2:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   255c4:	2317      	movs	r3, #23
   255c6:	18fb      	adds	r3, r7, r3
   255c8:	2200      	movs	r2, #0
   255ca:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   255cc:	2316      	movs	r3, #22
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	2200      	movs	r2, #0
   255d2:	701a      	strb	r2, [r3, #0]
   255d4:	e060      	b.n	25698 <nmi_inet_addr+0xe0>
	{
		j = 0;
   255d6:	2315      	movs	r3, #21
   255d8:	18fb      	adds	r3, r7, r3
   255da:	2200      	movs	r2, #0
   255dc:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   255de:	2314      	movs	r3, #20
   255e0:	18fb      	adds	r3, r7, r3
   255e2:	687a      	ldr	r2, [r7, #4]
   255e4:	7812      	ldrb	r2, [r2, #0]
   255e6:	701a      	strb	r2, [r3, #0]
			++j;
   255e8:	2315      	movs	r3, #21
   255ea:	18fb      	adds	r3, r7, r3
   255ec:	2215      	movs	r2, #21
   255ee:	18ba      	adds	r2, r7, r2
   255f0:	7812      	ldrb	r2, [r2, #0]
   255f2:	3201      	adds	r2, #1
   255f4:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   255f6:	2315      	movs	r3, #21
   255f8:	18fb      	adds	r3, r7, r3
   255fa:	781b      	ldrb	r3, [r3, #0]
   255fc:	2b04      	cmp	r3, #4
   255fe:	d901      	bls.n	25604 <nmi_inet_addr+0x4c>
			{
				return 0;
   25600:	2300      	movs	r3, #0
   25602:	e057      	b.n	256b4 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25604:	2314      	movs	r3, #20
   25606:	18fb      	adds	r3, r7, r3
   25608:	781b      	ldrb	r3, [r3, #0]
   2560a:	2b2e      	cmp	r3, #46	; 0x2e
   2560c:	d004      	beq.n	25618 <nmi_inet_addr+0x60>
   2560e:	2314      	movs	r3, #20
   25610:	18fb      	adds	r3, r7, r3
   25612:	781b      	ldrb	r3, [r3, #0]
   25614:	2b00      	cmp	r3, #0
   25616:	d10d      	bne.n	25634 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25618:	2316      	movs	r3, #22
   2561a:	18fb      	adds	r3, r7, r3
   2561c:	781b      	ldrb	r3, [r3, #0]
   2561e:	220c      	movs	r2, #12
   25620:	18ba      	adds	r2, r7, r2
   25622:	2117      	movs	r1, #23
   25624:	1879      	adds	r1, r7, r1
   25626:	7809      	ldrb	r1, [r1, #0]
   25628:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2562a:	2317      	movs	r3, #23
   2562c:	18fb      	adds	r3, r7, r3
   2562e:	2200      	movs	r2, #0
   25630:	701a      	strb	r2, [r3, #0]
   25632:	e01d      	b.n	25670 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25634:	2314      	movs	r3, #20
   25636:	18fb      	adds	r3, r7, r3
   25638:	781b      	ldrb	r3, [r3, #0]
   2563a:	2b2f      	cmp	r3, #47	; 0x2f
   2563c:	d916      	bls.n	2566c <nmi_inet_addr+0xb4>
   2563e:	2314      	movs	r3, #20
   25640:	18fb      	adds	r3, r7, r3
   25642:	781b      	ldrb	r3, [r3, #0]
   25644:	2b39      	cmp	r3, #57	; 0x39
   25646:	d811      	bhi.n	2566c <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25648:	2317      	movs	r3, #23
   2564a:	18fb      	adds	r3, r7, r3
   2564c:	781b      	ldrb	r3, [r3, #0]
   2564e:	1c1a      	adds	r2, r3, #0
   25650:	0092      	lsls	r2, r2, #2
   25652:	18d3      	adds	r3, r2, r3
   25654:	18db      	adds	r3, r3, r3
   25656:	b2da      	uxtb	r2, r3
   25658:	2314      	movs	r3, #20
   2565a:	18fb      	adds	r3, r7, r3
   2565c:	781b      	ldrb	r3, [r3, #0]
   2565e:	18d3      	adds	r3, r2, r3
   25660:	b2da      	uxtb	r2, r3
   25662:	2317      	movs	r3, #23
   25664:	18fb      	adds	r3, r7, r3
   25666:	3a30      	subs	r2, #48	; 0x30
   25668:	701a      	strb	r2, [r3, #0]
   2566a:	e001      	b.n	25670 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   2566c:	2300      	movs	r3, #0
   2566e:	e021      	b.n	256b4 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   25670:	687b      	ldr	r3, [r7, #4]
   25672:	3301      	adds	r3, #1
   25674:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   25676:	2314      	movs	r3, #20
   25678:	18fb      	adds	r3, r7, r3
   2567a:	781b      	ldrb	r3, [r3, #0]
   2567c:	2b2e      	cmp	r3, #46	; 0x2e
   2567e:	d004      	beq.n	2568a <nmi_inet_addr+0xd2>
   25680:	2314      	movs	r3, #20
   25682:	18fb      	adds	r3, r7, r3
   25684:	781b      	ldrb	r3, [r3, #0]
   25686:	2b00      	cmp	r3, #0
   25688:	d1a9      	bne.n	255de <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   2568a:	2316      	movs	r3, #22
   2568c:	18fb      	adds	r3, r7, r3
   2568e:	2216      	movs	r2, #22
   25690:	18ba      	adds	r2, r7, r2
   25692:	7812      	ldrb	r2, [r2, #0]
   25694:	3201      	adds	r2, #1
   25696:	701a      	strb	r2, [r3, #0]
   25698:	2316      	movs	r3, #22
   2569a:	18fb      	adds	r3, r7, r3
   2569c:	781b      	ldrb	r3, [r3, #0]
   2569e:	2b03      	cmp	r3, #3
   256a0:	d999      	bls.n	255d6 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   256a2:	230c      	movs	r3, #12
   256a4:	18f9      	adds	r1, r7, r3
   256a6:	2310      	movs	r3, #16
   256a8:	18fb      	adds	r3, r7, r3
   256aa:	2204      	movs	r2, #4
   256ac:	0018      	movs	r0, r3
   256ae:	4b03      	ldr	r3, [pc, #12]	; (256bc <nmi_inet_addr+0x104>)
   256b0:	4798      	blx	r3
	return u32IP;
   256b2:	693b      	ldr	r3, [r7, #16]
}
   256b4:	0018      	movs	r0, r3
   256b6:	46bd      	mov	sp, r7
   256b8:	b006      	add	sp, #24
   256ba:	bd80      	pop	{r7, pc}
   256bc:	000204a1 	.word	0x000204a1

000256c0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   256c0:	b5b0      	push	{r4, r5, r7, lr}
   256c2:	b088      	sub	sp, #32
   256c4:	af04      	add	r7, sp, #16
   256c6:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   256c8:	230f      	movs	r3, #15
   256ca:	18fb      	adds	r3, r7, r3
   256cc:	22fa      	movs	r2, #250	; 0xfa
   256ce:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   256d0:	687b      	ldr	r3, [r7, #4]
   256d2:	0018      	movs	r0, r3
   256d4:	4b14      	ldr	r3, [pc, #80]	; (25728 <gethostbyname+0x68>)
   256d6:	4798      	blx	r3
   256d8:	0003      	movs	r3, r0
   256da:	001a      	movs	r2, r3
   256dc:	230e      	movs	r3, #14
   256de:	18fb      	adds	r3, r7, r3
   256e0:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   256e2:	230e      	movs	r3, #14
   256e4:	18fb      	adds	r3, r7, r3
   256e6:	781b      	ldrb	r3, [r3, #0]
   256e8:	2b40      	cmp	r3, #64	; 0x40
   256ea:	d815      	bhi.n	25718 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   256ec:	230e      	movs	r3, #14
   256ee:	18fb      	adds	r3, r7, r3
   256f0:	781b      	ldrb	r3, [r3, #0]
   256f2:	b29b      	uxth	r3, r3
   256f4:	3301      	adds	r3, #1
   256f6:	b299      	uxth	r1, r3
   256f8:	230f      	movs	r3, #15
   256fa:	18fc      	adds	r4, r7, r3
   256fc:	687a      	ldr	r2, [r7, #4]
   256fe:	2300      	movs	r3, #0
   25700:	9302      	str	r3, [sp, #8]
   25702:	2300      	movs	r3, #0
   25704:	9301      	str	r3, [sp, #4]
   25706:	2300      	movs	r3, #0
   25708:	9300      	str	r3, [sp, #0]
   2570a:	000b      	movs	r3, r1
   2570c:	214a      	movs	r1, #74	; 0x4a
   2570e:	2002      	movs	r0, #2
   25710:	4d06      	ldr	r5, [pc, #24]	; (2572c <gethostbyname+0x6c>)
   25712:	47a8      	blx	r5
   25714:	0003      	movs	r3, r0
   25716:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25718:	230f      	movs	r3, #15
   2571a:	18fb      	adds	r3, r7, r3
   2571c:	781b      	ldrb	r3, [r3, #0]
   2571e:	b25b      	sxtb	r3, r3
}
   25720:	0018      	movs	r0, r3
   25722:	46bd      	mov	sp, r7
   25724:	b004      	add	sp, #16
   25726:	bdb0      	pop	{r4, r5, r7, pc}
   25728:	0002051b 	.word	0x0002051b
   2572c:	0002073d 	.word	0x0002073d

00025730 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25730:	b580      	push	{r7, lr}
   25732:	b082      	sub	sp, #8
   25734:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25736:	003b      	movs	r3, r7
   25738:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   2573a:	687b      	ldr	r3, [r7, #4]
   2573c:	22b9      	movs	r2, #185	; 0xb9
   2573e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25740:	4b13      	ldr	r3, [pc, #76]	; (25790 <spi_flash_enter_low_power_mode+0x60>)
   25742:	2100      	movs	r1, #0
   25744:	0018      	movs	r0, r3
   25746:	4b13      	ldr	r3, [pc, #76]	; (25794 <spi_flash_enter_low_power_mode+0x64>)
   25748:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2574a:	687b      	ldr	r3, [r7, #4]
   2574c:	781b      	ldrb	r3, [r3, #0]
   2574e:	001a      	movs	r2, r3
   25750:	4b11      	ldr	r3, [pc, #68]	; (25798 <spi_flash_enter_low_power_mode+0x68>)
   25752:	0011      	movs	r1, r2
   25754:	0018      	movs	r0, r3
   25756:	4b0f      	ldr	r3, [pc, #60]	; (25794 <spi_flash_enter_low_power_mode+0x64>)
   25758:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2575a:	4b10      	ldr	r3, [pc, #64]	; (2579c <spi_flash_enter_low_power_mode+0x6c>)
   2575c:	2101      	movs	r1, #1
   2575e:	0018      	movs	r0, r3
   25760:	4b0c      	ldr	r3, [pc, #48]	; (25794 <spi_flash_enter_low_power_mode+0x64>)
   25762:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25764:	4b0e      	ldr	r3, [pc, #56]	; (257a0 <spi_flash_enter_low_power_mode+0x70>)
   25766:	2100      	movs	r1, #0
   25768:	0018      	movs	r0, r3
   2576a:	4b0a      	ldr	r3, [pc, #40]	; (25794 <spi_flash_enter_low_power_mode+0x64>)
   2576c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   2576e:	4b0d      	ldr	r3, [pc, #52]	; (257a4 <spi_flash_enter_low_power_mode+0x74>)
   25770:	2181      	movs	r1, #129	; 0x81
   25772:	0018      	movs	r0, r3
   25774:	4b07      	ldr	r3, [pc, #28]	; (25794 <spi_flash_enter_low_power_mode+0x64>)
   25776:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25778:	46c0      	nop			; (mov r8, r8)
   2577a:	4b0b      	ldr	r3, [pc, #44]	; (257a8 <spi_flash_enter_low_power_mode+0x78>)
   2577c:	0018      	movs	r0, r3
   2577e:	4b0b      	ldr	r3, [pc, #44]	; (257ac <spi_flash_enter_low_power_mode+0x7c>)
   25780:	4798      	blx	r3
   25782:	0003      	movs	r3, r0
   25784:	2b01      	cmp	r3, #1
   25786:	d1f8      	bne.n	2577a <spi_flash_enter_low_power_mode+0x4a>
}
   25788:	46c0      	nop			; (mov r8, r8)
   2578a:	46bd      	mov	sp, r7
   2578c:	b002      	add	sp, #8
   2578e:	bd80      	pop	{r7, pc}
   25790:	00010208 	.word	0x00010208
   25794:	00022591 	.word	0x00022591
   25798:	0001020c 	.word	0x0001020c
   2579c:	00010214 	.word	0x00010214
   257a0:	0001021c 	.word	0x0001021c
   257a4:	00010204 	.word	0x00010204
   257a8:	00010218 	.word	0x00010218
   257ac:	0002254d 	.word	0x0002254d

000257b0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   257b0:	b580      	push	{r7, lr}
   257b2:	b082      	sub	sp, #8
   257b4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   257b6:	003b      	movs	r3, r7
   257b8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   257ba:	687b      	ldr	r3, [r7, #4]
   257bc:	22ab      	movs	r2, #171	; 0xab
   257be:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   257c0:	4b13      	ldr	r3, [pc, #76]	; (25810 <spi_flash_leave_low_power_mode+0x60>)
   257c2:	2100      	movs	r1, #0
   257c4:	0018      	movs	r0, r3
   257c6:	4b13      	ldr	r3, [pc, #76]	; (25814 <spi_flash_leave_low_power_mode+0x64>)
   257c8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   257ca:	687b      	ldr	r3, [r7, #4]
   257cc:	781b      	ldrb	r3, [r3, #0]
   257ce:	001a      	movs	r2, r3
   257d0:	4b11      	ldr	r3, [pc, #68]	; (25818 <spi_flash_leave_low_power_mode+0x68>)
   257d2:	0011      	movs	r1, r2
   257d4:	0018      	movs	r0, r3
   257d6:	4b0f      	ldr	r3, [pc, #60]	; (25814 <spi_flash_leave_low_power_mode+0x64>)
   257d8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   257da:	4b10      	ldr	r3, [pc, #64]	; (2581c <spi_flash_leave_low_power_mode+0x6c>)
   257dc:	2101      	movs	r1, #1
   257de:	0018      	movs	r0, r3
   257e0:	4b0c      	ldr	r3, [pc, #48]	; (25814 <spi_flash_leave_low_power_mode+0x64>)
   257e2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   257e4:	4b0e      	ldr	r3, [pc, #56]	; (25820 <spi_flash_leave_low_power_mode+0x70>)
   257e6:	2100      	movs	r1, #0
   257e8:	0018      	movs	r0, r3
   257ea:	4b0a      	ldr	r3, [pc, #40]	; (25814 <spi_flash_leave_low_power_mode+0x64>)
   257ec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   257ee:	4b0d      	ldr	r3, [pc, #52]	; (25824 <spi_flash_leave_low_power_mode+0x74>)
   257f0:	2181      	movs	r1, #129	; 0x81
   257f2:	0018      	movs	r0, r3
   257f4:	4b07      	ldr	r3, [pc, #28]	; (25814 <spi_flash_leave_low_power_mode+0x64>)
   257f6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   257f8:	46c0      	nop			; (mov r8, r8)
   257fa:	4b0b      	ldr	r3, [pc, #44]	; (25828 <spi_flash_leave_low_power_mode+0x78>)
   257fc:	0018      	movs	r0, r3
   257fe:	4b0b      	ldr	r3, [pc, #44]	; (2582c <spi_flash_leave_low_power_mode+0x7c>)
   25800:	4798      	blx	r3
   25802:	0003      	movs	r3, r0
   25804:	2b01      	cmp	r3, #1
   25806:	d1f8      	bne.n	257fa <spi_flash_leave_low_power_mode+0x4a>
}
   25808:	46c0      	nop			; (mov r8, r8)
   2580a:	46bd      	mov	sp, r7
   2580c:	b002      	add	sp, #8
   2580e:	bd80      	pop	{r7, pc}
   25810:	00010208 	.word	0x00010208
   25814:	00022591 	.word	0x00022591
   25818:	0001020c 	.word	0x0001020c
   2581c:	00010214 	.word	0x00010214
   25820:	0001021c 	.word	0x0001021c
   25824:	00010204 	.word	0x00010204
   25828:	00010218 	.word	0x00010218
   2582c:	0002254d 	.word	0x0002254d

00025830 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25830:	b590      	push	{r4, r7, lr}
   25832:	b085      	sub	sp, #20
   25834:	af00      	add	r7, sp, #0
   25836:	0002      	movs	r2, r0
   25838:	1dfb      	adds	r3, r7, #7
   2583a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   2583c:	230f      	movs	r3, #15
   2583e:	18fb      	adds	r3, r7, r3
   25840:	2200      	movs	r2, #0
   25842:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25844:	4b24      	ldr	r3, [pc, #144]	; (258d8 <spi_flash_enable+0xa8>)
   25846:	4798      	blx	r3
   25848:	0003      	movs	r3, r0
   2584a:	051b      	lsls	r3, r3, #20
   2584c:	0d1b      	lsrs	r3, r3, #20
   2584e:	4a23      	ldr	r2, [pc, #140]	; (258dc <spi_flash_enable+0xac>)
   25850:	4293      	cmp	r3, r2
   25852:	d938      	bls.n	258c6 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25854:	230f      	movs	r3, #15
   25856:	18fc      	adds	r4, r7, r3
   25858:	2308      	movs	r3, #8
   2585a:	18fb      	adds	r3, r7, r3
   2585c:	4a20      	ldr	r2, [pc, #128]	; (258e0 <spi_flash_enable+0xb0>)
   2585e:	0019      	movs	r1, r3
   25860:	0010      	movs	r0, r2
   25862:	4b20      	ldr	r3, [pc, #128]	; (258e4 <spi_flash_enable+0xb4>)
   25864:	4798      	blx	r3
   25866:	0003      	movs	r3, r0
   25868:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2586a:	230f      	movs	r3, #15
   2586c:	18fb      	adds	r3, r7, r3
   2586e:	781b      	ldrb	r3, [r3, #0]
   25870:	b25b      	sxtb	r3, r3
   25872:	2b00      	cmp	r3, #0
   25874:	d126      	bne.n	258c4 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   25876:	68bb      	ldr	r3, [r7, #8]
   25878:	4a1b      	ldr	r2, [pc, #108]	; (258e8 <spi_flash_enable+0xb8>)
   2587a:	4013      	ands	r3, r2
   2587c:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   2587e:	68bb      	ldr	r3, [r7, #8]
   25880:	4a1a      	ldr	r2, [pc, #104]	; (258ec <spi_flash_enable+0xbc>)
   25882:	4313      	orrs	r3, r2
   25884:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25886:	68bb      	ldr	r3, [r7, #8]
   25888:	4a15      	ldr	r2, [pc, #84]	; (258e0 <spi_flash_enable+0xb0>)
   2588a:	0019      	movs	r1, r3
   2588c:	0010      	movs	r0, r2
   2588e:	4b18      	ldr	r3, [pc, #96]	; (258f0 <spi_flash_enable+0xc0>)
   25890:	4798      	blx	r3
		if(enable) {
   25892:	1dfb      	adds	r3, r7, #7
   25894:	781b      	ldrb	r3, [r3, #0]
   25896:	2b00      	cmp	r3, #0
   25898:	d002      	beq.n	258a0 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2589a:	4b16      	ldr	r3, [pc, #88]	; (258f4 <spi_flash_enable+0xc4>)
   2589c:	4798      	blx	r3
   2589e:	e001      	b.n	258a4 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   258a0:	4b15      	ldr	r3, [pc, #84]	; (258f8 <spi_flash_enable+0xc8>)
   258a2:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   258a4:	68bb      	ldr	r3, [r7, #8]
   258a6:	4a10      	ldr	r2, [pc, #64]	; (258e8 <spi_flash_enable+0xb8>)
   258a8:	4013      	ands	r3, r2
   258aa:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   258ac:	68bb      	ldr	r3, [r7, #8]
   258ae:	2280      	movs	r2, #128	; 0x80
   258b0:	0252      	lsls	r2, r2, #9
   258b2:	4313      	orrs	r3, r2
   258b4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   258b6:	68bb      	ldr	r3, [r7, #8]
   258b8:	4a09      	ldr	r2, [pc, #36]	; (258e0 <spi_flash_enable+0xb0>)
   258ba:	0019      	movs	r1, r3
   258bc:	0010      	movs	r0, r2
   258be:	4b0c      	ldr	r3, [pc, #48]	; (258f0 <spi_flash_enable+0xc0>)
   258c0:	4798      	blx	r3
   258c2:	e000      	b.n	258c6 <spi_flash_enable+0x96>
			goto ERR1;
   258c4:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   258c6:	230f      	movs	r3, #15
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	781b      	ldrb	r3, [r3, #0]
   258cc:	b25b      	sxtb	r3, r3
}
   258ce:	0018      	movs	r0, r3
   258d0:	46bd      	mov	sp, r7
   258d2:	b005      	add	sp, #20
   258d4:	bd90      	pop	{r4, r7, pc}
   258d6:	46c0      	nop			; (mov r8, r8)
   258d8:	00021e6d 	.word	0x00021e6d
   258dc:	0000039f 	.word	0x0000039f
   258e0:	00001410 	.word	0x00001410
   258e4:	0002256d 	.word	0x0002256d
   258e8:	f8888fff 	.word	0xf8888fff
   258ec:	01111000 	.word	0x01111000
   258f0:	00022591 	.word	0x00022591
   258f4:	000257b1 	.word	0x000257b1
   258f8:	00025731 	.word	0x00025731

000258fc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   258fc:	b580      	push	{r7, lr}
   258fe:	b084      	sub	sp, #16
   25900:	af00      	add	r7, sp, #0
   25902:	0002      	movs	r2, r0
   25904:	1dfb      	adds	r3, r7, #7
   25906:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25908:	1dfb      	adds	r3, r7, #7
   2590a:	781b      	ldrb	r3, [r3, #0]
   2590c:	2b00      	cmp	r3, #0
   2590e:	d108      	bne.n	25922 <mem_test_unit_ready+0x26>
   25910:	1dfb      	adds	r3, r7, #7
   25912:	781a      	ldrb	r2, [r3, #0]
   25914:	4b08      	ldr	r3, [pc, #32]	; (25938 <mem_test_unit_ready+0x3c>)
   25916:	0152      	lsls	r2, r2, #5
   25918:	58d3      	ldr	r3, [r2, r3]
   2591a:	4798      	blx	r3
   2591c:	0003      	movs	r3, r0
   2591e:	001a      	movs	r2, r3
   25920:	e000      	b.n	25924 <mem_test_unit_ready+0x28>
   25922:	2201      	movs	r2, #1
  status =
   25924:	230f      	movs	r3, #15
   25926:	18fb      	adds	r3, r7, r3
   25928:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2592a:	230f      	movs	r3, #15
   2592c:	18fb      	adds	r3, r7, r3
   2592e:	781b      	ldrb	r3, [r3, #0]
}
   25930:	0018      	movs	r0, r3
   25932:	46bd      	mov	sp, r7
   25934:	b004      	add	sp, #16
   25936:	bd80      	pop	{r7, pc}
   25938:	00038d8c 	.word	0x00038d8c

0002593c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   2593c:	b580      	push	{r7, lr}
   2593e:	b084      	sub	sp, #16
   25940:	af00      	add	r7, sp, #0
   25942:	0002      	movs	r2, r0
   25944:	6039      	str	r1, [r7, #0]
   25946:	1dfb      	adds	r3, r7, #7
   25948:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   2594a:	1dfb      	adds	r3, r7, #7
   2594c:	781b      	ldrb	r3, [r3, #0]
   2594e:	2b00      	cmp	r3, #0
   25950:	d10c      	bne.n	2596c <mem_read_capacity+0x30>
   25952:	1dfb      	adds	r3, r7, #7
   25954:	781b      	ldrb	r3, [r3, #0]
   25956:	4a0b      	ldr	r2, [pc, #44]	; (25984 <mem_read_capacity+0x48>)
   25958:	015b      	lsls	r3, r3, #5
   2595a:	18d3      	adds	r3, r2, r3
   2595c:	3304      	adds	r3, #4
   2595e:	681b      	ldr	r3, [r3, #0]
   25960:	683a      	ldr	r2, [r7, #0]
   25962:	0010      	movs	r0, r2
   25964:	4798      	blx	r3
   25966:	0003      	movs	r3, r0
   25968:	001a      	movs	r2, r3
   2596a:	e000      	b.n	2596e <mem_read_capacity+0x32>
   2596c:	2201      	movs	r2, #1
  status =
   2596e:	230f      	movs	r3, #15
   25970:	18fb      	adds	r3, r7, r3
   25972:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25974:	230f      	movs	r3, #15
   25976:	18fb      	adds	r3, r7, r3
   25978:	781b      	ldrb	r3, [r3, #0]
}
   2597a:	0018      	movs	r0, r3
   2597c:	46bd      	mov	sp, r7
   2597e:	b004      	add	sp, #16
   25980:	bd80      	pop	{r7, pc}
   25982:	46c0      	nop			; (mov r8, r8)
   25984:	00038d8c 	.word	0x00038d8c

00025988 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25988:	b580      	push	{r7, lr}
   2598a:	b084      	sub	sp, #16
   2598c:	af00      	add	r7, sp, #0
   2598e:	0002      	movs	r2, r0
   25990:	1dfb      	adds	r3, r7, #7
   25992:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25994:	1dfb      	adds	r3, r7, #7
   25996:	781b      	ldrb	r3, [r3, #0]
   25998:	425a      	negs	r2, r3
   2599a:	4153      	adcs	r3, r2
   2599c:	b2da      	uxtb	r2, r3
  sector_size =
   2599e:	230f      	movs	r3, #15
   259a0:	18fb      	adds	r3, r7, r3
   259a2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   259a4:	230f      	movs	r3, #15
   259a6:	18fb      	adds	r3, r7, r3
   259a8:	781b      	ldrb	r3, [r3, #0]
}
   259aa:	0018      	movs	r0, r3
   259ac:	46bd      	mov	sp, r7
   259ae:	b004      	add	sp, #16
   259b0:	bd80      	pop	{r7, pc}
	...

000259b4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   259b4:	b580      	push	{r7, lr}
   259b6:	b084      	sub	sp, #16
   259b8:	af00      	add	r7, sp, #0
   259ba:	0002      	movs	r2, r0
   259bc:	1dfb      	adds	r3, r7, #7
   259be:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   259c0:	1dfb      	adds	r3, r7, #7
   259c2:	781b      	ldrb	r3, [r3, #0]
   259c4:	2b00      	cmp	r3, #0
   259c6:	d109      	bne.n	259dc <mem_wr_protect+0x28>
   259c8:	1dfb      	adds	r3, r7, #7
   259ca:	781b      	ldrb	r3, [r3, #0]
   259cc:	4a0a      	ldr	r2, [pc, #40]	; (259f8 <mem_wr_protect+0x44>)
   259ce:	015b      	lsls	r3, r3, #5
   259d0:	18d3      	adds	r3, r2, r3
   259d2:	330c      	adds	r3, #12
   259d4:	681b      	ldr	r3, [r3, #0]
   259d6:	4798      	blx	r3
   259d8:	1e03      	subs	r3, r0, #0
   259da:	d001      	beq.n	259e0 <mem_wr_protect+0x2c>
   259dc:	2201      	movs	r2, #1
   259de:	e000      	b.n	259e2 <mem_wr_protect+0x2e>
   259e0:	2200      	movs	r2, #0
  wr_protect =
   259e2:	230f      	movs	r3, #15
   259e4:	18fb      	adds	r3, r7, r3
   259e6:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   259e8:	230f      	movs	r3, #15
   259ea:	18fb      	adds	r3, r7, r3
   259ec:	781b      	ldrb	r3, [r3, #0]
}
   259ee:	0018      	movs	r0, r3
   259f0:	46bd      	mov	sp, r7
   259f2:	b004      	add	sp, #16
   259f4:	bd80      	pop	{r7, pc}
   259f6:	46c0      	nop			; (mov r8, r8)
   259f8:	00038d8c 	.word	0x00038d8c

000259fc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   259fc:	b580      	push	{r7, lr}
   259fe:	b086      	sub	sp, #24
   25a00:	af00      	add	r7, sp, #0
   25a02:	60b9      	str	r1, [r7, #8]
   25a04:	607a      	str	r2, [r7, #4]
   25a06:	230f      	movs	r3, #15
   25a08:	18fb      	adds	r3, r7, r3
   25a0a:	1c02      	adds	r2, r0, #0
   25a0c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25a0e:	230f      	movs	r3, #15
   25a10:	18fb      	adds	r3, r7, r3
   25a12:	781b      	ldrb	r3, [r3, #0]
   25a14:	2b00      	cmp	r3, #0
   25a16:	d10e      	bne.n	25a36 <memory_2_ram+0x3a>
   25a18:	230f      	movs	r3, #15
   25a1a:	18fb      	adds	r3, r7, r3
   25a1c:	781b      	ldrb	r3, [r3, #0]
   25a1e:	4a0b      	ldr	r2, [pc, #44]	; (25a4c <memory_2_ram+0x50>)
   25a20:	015b      	lsls	r3, r3, #5
   25a22:	18d3      	adds	r3, r2, r3
   25a24:	3314      	adds	r3, #20
   25a26:	681b      	ldr	r3, [r3, #0]
   25a28:	6879      	ldr	r1, [r7, #4]
   25a2a:	68ba      	ldr	r2, [r7, #8]
   25a2c:	0010      	movs	r0, r2
   25a2e:	4798      	blx	r3
   25a30:	0003      	movs	r3, r0
   25a32:	001a      	movs	r2, r3
   25a34:	e000      	b.n	25a38 <memory_2_ram+0x3c>
   25a36:	2201      	movs	r2, #1
  status =
   25a38:	2317      	movs	r3, #23
   25a3a:	18fb      	adds	r3, r7, r3
   25a3c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25a3e:	2317      	movs	r3, #23
   25a40:	18fb      	adds	r3, r7, r3
   25a42:	781b      	ldrb	r3, [r3, #0]
}
   25a44:	0018      	movs	r0, r3
   25a46:	46bd      	mov	sp, r7
   25a48:	b006      	add	sp, #24
   25a4a:	bd80      	pop	{r7, pc}
   25a4c:	00038d8c 	.word	0x00038d8c

00025a50 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25a50:	b580      	push	{r7, lr}
   25a52:	b086      	sub	sp, #24
   25a54:	af00      	add	r7, sp, #0
   25a56:	60b9      	str	r1, [r7, #8]
   25a58:	607a      	str	r2, [r7, #4]
   25a5a:	230f      	movs	r3, #15
   25a5c:	18fb      	adds	r3, r7, r3
   25a5e:	1c02      	adds	r2, r0, #0
   25a60:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25a62:	230f      	movs	r3, #15
   25a64:	18fb      	adds	r3, r7, r3
   25a66:	781b      	ldrb	r3, [r3, #0]
   25a68:	2b00      	cmp	r3, #0
   25a6a:	d10e      	bne.n	25a8a <ram_2_memory+0x3a>
   25a6c:	230f      	movs	r3, #15
   25a6e:	18fb      	adds	r3, r7, r3
   25a70:	781b      	ldrb	r3, [r3, #0]
   25a72:	4a0b      	ldr	r2, [pc, #44]	; (25aa0 <ram_2_memory+0x50>)
   25a74:	015b      	lsls	r3, r3, #5
   25a76:	18d3      	adds	r3, r2, r3
   25a78:	3318      	adds	r3, #24
   25a7a:	681b      	ldr	r3, [r3, #0]
   25a7c:	6879      	ldr	r1, [r7, #4]
   25a7e:	68ba      	ldr	r2, [r7, #8]
   25a80:	0010      	movs	r0, r2
   25a82:	4798      	blx	r3
   25a84:	0003      	movs	r3, r0
   25a86:	001a      	movs	r2, r3
   25a88:	e000      	b.n	25a8c <ram_2_memory+0x3c>
   25a8a:	2201      	movs	r2, #1
  status =
   25a8c:	2317      	movs	r3, #23
   25a8e:	18fb      	adds	r3, r7, r3
   25a90:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25a92:	2317      	movs	r3, #23
   25a94:	18fb      	adds	r3, r7, r3
   25a96:	781b      	ldrb	r3, [r3, #0]
}
   25a98:	0018      	movs	r0, r3
   25a9a:	46bd      	mov	sp, r7
   25a9c:	b006      	add	sp, #24
   25a9e:	bd80      	pop	{r7, pc}
   25aa0:	00038d8c 	.word	0x00038d8c

00025aa4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25aa4:	b580      	push	{r7, lr}
   25aa6:	b082      	sub	sp, #8
   25aa8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   25aaa:	4b10      	ldr	r3, [pc, #64]	; (25aec <cpu_irq_enter_critical+0x48>)
   25aac:	681b      	ldr	r3, [r3, #0]
   25aae:	2b00      	cmp	r3, #0
   25ab0:	d112      	bne.n	25ad8 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25ab2:	f3ef 8310 	mrs	r3, PRIMASK
   25ab6:	607b      	str	r3, [r7, #4]
  return(result);
   25ab8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   25aba:	2b00      	cmp	r3, #0
   25abc:	d109      	bne.n	25ad2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   25abe:	b672      	cpsid	i
   25ac0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25ac4:	4b0a      	ldr	r3, [pc, #40]	; (25af0 <cpu_irq_enter_critical+0x4c>)
   25ac6:	2200      	movs	r2, #0
   25ac8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   25aca:	4b0a      	ldr	r3, [pc, #40]	; (25af4 <cpu_irq_enter_critical+0x50>)
   25acc:	2201      	movs	r2, #1
   25ace:	701a      	strb	r2, [r3, #0]
   25ad0:	e002      	b.n	25ad8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25ad2:	4b08      	ldr	r3, [pc, #32]	; (25af4 <cpu_irq_enter_critical+0x50>)
   25ad4:	2200      	movs	r2, #0
   25ad6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   25ad8:	4b04      	ldr	r3, [pc, #16]	; (25aec <cpu_irq_enter_critical+0x48>)
   25ada:	681b      	ldr	r3, [r3, #0]
   25adc:	1c5a      	adds	r2, r3, #1
   25ade:	4b03      	ldr	r3, [pc, #12]	; (25aec <cpu_irq_enter_critical+0x48>)
   25ae0:	601a      	str	r2, [r3, #0]
}
   25ae2:	46c0      	nop			; (mov r8, r8)
   25ae4:	46bd      	mov	sp, r7
   25ae6:	b002      	add	sp, #8
   25ae8:	bd80      	pop	{r7, pc}
   25aea:	46c0      	nop			; (mov r8, r8)
   25aec:	20004134 	.word	0x20004134
   25af0:	2000011e 	.word	0x2000011e
   25af4:	20004138 	.word	0x20004138

00025af8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   25af8:	b580      	push	{r7, lr}
   25afa:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25afc:	4b0b      	ldr	r3, [pc, #44]	; (25b2c <cpu_irq_leave_critical+0x34>)
   25afe:	681b      	ldr	r3, [r3, #0]
   25b00:	1e5a      	subs	r2, r3, #1
   25b02:	4b0a      	ldr	r3, [pc, #40]	; (25b2c <cpu_irq_leave_critical+0x34>)
   25b04:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   25b06:	4b09      	ldr	r3, [pc, #36]	; (25b2c <cpu_irq_leave_critical+0x34>)
   25b08:	681b      	ldr	r3, [r3, #0]
   25b0a:	2b00      	cmp	r3, #0
   25b0c:	d10a      	bne.n	25b24 <cpu_irq_leave_critical+0x2c>
   25b0e:	4b08      	ldr	r3, [pc, #32]	; (25b30 <cpu_irq_leave_critical+0x38>)
   25b10:	781b      	ldrb	r3, [r3, #0]
   25b12:	b2db      	uxtb	r3, r3
   25b14:	2b00      	cmp	r3, #0
   25b16:	d005      	beq.n	25b24 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   25b18:	4b06      	ldr	r3, [pc, #24]	; (25b34 <cpu_irq_leave_critical+0x3c>)
   25b1a:	2201      	movs	r2, #1
   25b1c:	701a      	strb	r2, [r3, #0]
   25b1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25b22:	b662      	cpsie	i
	}
}
   25b24:	46c0      	nop			; (mov r8, r8)
   25b26:	46bd      	mov	sp, r7
   25b28:	bd80      	pop	{r7, pc}
   25b2a:	46c0      	nop			; (mov r8, r8)
   25b2c:	20004134 	.word	0x20004134
   25b30:	20004138 	.word	0x20004138
   25b34:	2000011e 	.word	0x2000011e

00025b38 <system_pinmux_get_group_from_gpio_pin>:
{
   25b38:	b580      	push	{r7, lr}
   25b3a:	b084      	sub	sp, #16
   25b3c:	af00      	add	r7, sp, #0
   25b3e:	0002      	movs	r2, r0
   25b40:	1dfb      	adds	r3, r7, #7
   25b42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25b44:	230f      	movs	r3, #15
   25b46:	18fb      	adds	r3, r7, r3
   25b48:	1dfa      	adds	r2, r7, #7
   25b4a:	7812      	ldrb	r2, [r2, #0]
   25b4c:	09d2      	lsrs	r2, r2, #7
   25b4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25b50:	230e      	movs	r3, #14
   25b52:	18fb      	adds	r3, r7, r3
   25b54:	1dfa      	adds	r2, r7, #7
   25b56:	7812      	ldrb	r2, [r2, #0]
   25b58:	0952      	lsrs	r2, r2, #5
   25b5a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25b5c:	4b0d      	ldr	r3, [pc, #52]	; (25b94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25b5e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25b60:	230f      	movs	r3, #15
   25b62:	18fb      	adds	r3, r7, r3
   25b64:	781b      	ldrb	r3, [r3, #0]
   25b66:	2b00      	cmp	r3, #0
   25b68:	d10f      	bne.n	25b8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25b6a:	230f      	movs	r3, #15
   25b6c:	18fb      	adds	r3, r7, r3
   25b6e:	781b      	ldrb	r3, [r3, #0]
   25b70:	009b      	lsls	r3, r3, #2
   25b72:	2210      	movs	r2, #16
   25b74:	4694      	mov	ip, r2
   25b76:	44bc      	add	ip, r7
   25b78:	4463      	add	r3, ip
   25b7a:	3b08      	subs	r3, #8
   25b7c:	681a      	ldr	r2, [r3, #0]
   25b7e:	230e      	movs	r3, #14
   25b80:	18fb      	adds	r3, r7, r3
   25b82:	781b      	ldrb	r3, [r3, #0]
   25b84:	01db      	lsls	r3, r3, #7
   25b86:	18d3      	adds	r3, r2, r3
   25b88:	e000      	b.n	25b8c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25b8a:	2300      	movs	r3, #0
}
   25b8c:	0018      	movs	r0, r3
   25b8e:	46bd      	mov	sp, r7
   25b90:	b004      	add	sp, #16
   25b92:	bd80      	pop	{r7, pc}
   25b94:	41004400 	.word	0x41004400

00025b98 <port_get_group_from_gpio_pin>:
{
   25b98:	b580      	push	{r7, lr}
   25b9a:	b082      	sub	sp, #8
   25b9c:	af00      	add	r7, sp, #0
   25b9e:	0002      	movs	r2, r0
   25ba0:	1dfb      	adds	r3, r7, #7
   25ba2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25ba4:	1dfb      	adds	r3, r7, #7
   25ba6:	781b      	ldrb	r3, [r3, #0]
   25ba8:	0018      	movs	r0, r3
   25baa:	4b03      	ldr	r3, [pc, #12]	; (25bb8 <port_get_group_from_gpio_pin+0x20>)
   25bac:	4798      	blx	r3
   25bae:	0003      	movs	r3, r0
}
   25bb0:	0018      	movs	r0, r3
   25bb2:	46bd      	mov	sp, r7
   25bb4:	b002      	add	sp, #8
   25bb6:	bd80      	pop	{r7, pc}
   25bb8:	00025b39 	.word	0x00025b39

00025bbc <port_get_config_defaults>:
{
   25bbc:	b580      	push	{r7, lr}
   25bbe:	b082      	sub	sp, #8
   25bc0:	af00      	add	r7, sp, #0
   25bc2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   25bc4:	687b      	ldr	r3, [r7, #4]
   25bc6:	2200      	movs	r2, #0
   25bc8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   25bca:	687b      	ldr	r3, [r7, #4]
   25bcc:	2201      	movs	r2, #1
   25bce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25bd0:	687b      	ldr	r3, [r7, #4]
   25bd2:	2200      	movs	r2, #0
   25bd4:	709a      	strb	r2, [r3, #2]
}
   25bd6:	46c0      	nop			; (mov r8, r8)
   25bd8:	46bd      	mov	sp, r7
   25bda:	b002      	add	sp, #8
   25bdc:	bd80      	pop	{r7, pc}
	...

00025be0 <port_pin_set_output_level>:
{
   25be0:	b580      	push	{r7, lr}
   25be2:	b084      	sub	sp, #16
   25be4:	af00      	add	r7, sp, #0
   25be6:	0002      	movs	r2, r0
   25be8:	1dfb      	adds	r3, r7, #7
   25bea:	701a      	strb	r2, [r3, #0]
   25bec:	1dbb      	adds	r3, r7, #6
   25bee:	1c0a      	adds	r2, r1, #0
   25bf0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25bf2:	1dfb      	adds	r3, r7, #7
   25bf4:	781b      	ldrb	r3, [r3, #0]
   25bf6:	0018      	movs	r0, r3
   25bf8:	4b0d      	ldr	r3, [pc, #52]	; (25c30 <port_pin_set_output_level+0x50>)
   25bfa:	4798      	blx	r3
   25bfc:	0003      	movs	r3, r0
   25bfe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25c00:	1dfb      	adds	r3, r7, #7
   25c02:	781b      	ldrb	r3, [r3, #0]
   25c04:	221f      	movs	r2, #31
   25c06:	4013      	ands	r3, r2
   25c08:	2201      	movs	r2, #1
   25c0a:	409a      	lsls	r2, r3
   25c0c:	0013      	movs	r3, r2
   25c0e:	60bb      	str	r3, [r7, #8]
	if (level) {
   25c10:	1dbb      	adds	r3, r7, #6
   25c12:	781b      	ldrb	r3, [r3, #0]
   25c14:	2b00      	cmp	r3, #0
   25c16:	d003      	beq.n	25c20 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25c18:	68fb      	ldr	r3, [r7, #12]
   25c1a:	68ba      	ldr	r2, [r7, #8]
   25c1c:	619a      	str	r2, [r3, #24]
}
   25c1e:	e002      	b.n	25c26 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25c20:	68fb      	ldr	r3, [r7, #12]
   25c22:	68ba      	ldr	r2, [r7, #8]
   25c24:	615a      	str	r2, [r3, #20]
}
   25c26:	46c0      	nop			; (mov r8, r8)
   25c28:	46bd      	mov	sp, r7
   25c2a:	b004      	add	sp, #16
   25c2c:	bd80      	pop	{r7, pc}
   25c2e:	46c0      	nop			; (mov r8, r8)
   25c30:	00025b99 	.word	0x00025b99

00025c34 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25c34:	b580      	push	{r7, lr}
   25c36:	b082      	sub	sp, #8
   25c38:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   25c3a:	1d3b      	adds	r3, r7, #4
   25c3c:	0018      	movs	r0, r3
   25c3e:	4b0e      	ldr	r3, [pc, #56]	; (25c78 <system_board_init+0x44>)
   25c40:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25c42:	1d3b      	adds	r3, r7, #4
   25c44:	2201      	movs	r2, #1
   25c46:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   25c48:	1d3b      	adds	r3, r7, #4
   25c4a:	0019      	movs	r1, r3
   25c4c:	2017      	movs	r0, #23
   25c4e:	4b0b      	ldr	r3, [pc, #44]	; (25c7c <system_board_init+0x48>)
   25c50:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25c52:	2101      	movs	r1, #1
   25c54:	2017      	movs	r0, #23
   25c56:	4b0a      	ldr	r3, [pc, #40]	; (25c80 <system_board_init+0x4c>)
   25c58:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   25c5a:	1d3b      	adds	r3, r7, #4
   25c5c:	2200      	movs	r2, #0
   25c5e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25c60:	1d3b      	adds	r3, r7, #4
   25c62:	2201      	movs	r2, #1
   25c64:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   25c66:	1d3b      	adds	r3, r7, #4
   25c68:	0019      	movs	r1, r3
   25c6a:	2037      	movs	r0, #55	; 0x37
   25c6c:	4b03      	ldr	r3, [pc, #12]	; (25c7c <system_board_init+0x48>)
   25c6e:	4798      	blx	r3
}
   25c70:	46c0      	nop			; (mov r8, r8)
   25c72:	46bd      	mov	sp, r7
   25c74:	b002      	add	sp, #8
   25c76:	bd80      	pop	{r7, pc}
   25c78:	00025bbd 	.word	0x00025bbd
   25c7c:	000262a9 	.word	0x000262a9
   25c80:	00025be1 	.word	0x00025be1

00025c84 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   25c84:	b580      	push	{r7, lr}
   25c86:	b084      	sub	sp, #16
   25c88:	af00      	add	r7, sp, #0
   25c8a:	0002      	movs	r2, r0
   25c8c:	1dfb      	adds	r3, r7, #7
   25c8e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25c90:	230f      	movs	r3, #15
   25c92:	18fb      	adds	r3, r7, r3
   25c94:	1dfa      	adds	r2, r7, #7
   25c96:	7812      	ldrb	r2, [r2, #0]
   25c98:	0952      	lsrs	r2, r2, #5
   25c9a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   25c9c:	230f      	movs	r3, #15
   25c9e:	18fb      	adds	r3, r7, r3
   25ca0:	781b      	ldrb	r3, [r3, #0]
   25ca2:	2b00      	cmp	r3, #0
   25ca4:	d10c      	bne.n	25cc0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25ca6:	4b09      	ldr	r3, [pc, #36]	; (25ccc <_extint_get_eic_from_channel+0x48>)
   25ca8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   25caa:	230f      	movs	r3, #15
   25cac:	18fb      	adds	r3, r7, r3
   25cae:	781b      	ldrb	r3, [r3, #0]
   25cb0:	009b      	lsls	r3, r3, #2
   25cb2:	2210      	movs	r2, #16
   25cb4:	4694      	mov	ip, r2
   25cb6:	44bc      	add	ip, r7
   25cb8:	4463      	add	r3, ip
   25cba:	3b08      	subs	r3, #8
   25cbc:	681b      	ldr	r3, [r3, #0]
   25cbe:	e000      	b.n	25cc2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   25cc0:	2300      	movs	r3, #0
	}
}
   25cc2:	0018      	movs	r0, r3
   25cc4:	46bd      	mov	sp, r7
   25cc6:	b004      	add	sp, #16
   25cc8:	bd80      	pop	{r7, pc}
   25cca:	46c0      	nop			; (mov r8, r8)
   25ccc:	40001800 	.word	0x40001800

00025cd0 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   25cd0:	b580      	push	{r7, lr}
   25cd2:	b084      	sub	sp, #16
   25cd4:	af00      	add	r7, sp, #0
   25cd6:	0002      	movs	r2, r0
   25cd8:	1dfb      	adds	r3, r7, #7
   25cda:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25cdc:	1dfb      	adds	r3, r7, #7
   25cde:	781b      	ldrb	r3, [r3, #0]
   25ce0:	0018      	movs	r0, r3
   25ce2:	4b0b      	ldr	r3, [pc, #44]	; (25d10 <extint_chan_is_detected+0x40>)
   25ce4:	4798      	blx	r3
   25ce6:	0003      	movs	r3, r0
   25ce8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25cea:	1dfb      	adds	r3, r7, #7
   25cec:	781b      	ldrb	r3, [r3, #0]
   25cee:	221f      	movs	r2, #31
   25cf0:	4013      	ands	r3, r2
   25cf2:	2201      	movs	r2, #1
   25cf4:	409a      	lsls	r2, r3
   25cf6:	0013      	movs	r3, r2
   25cf8:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   25cfa:	68fb      	ldr	r3, [r7, #12]
   25cfc:	691b      	ldr	r3, [r3, #16]
   25cfe:	68ba      	ldr	r2, [r7, #8]
   25d00:	4013      	ands	r3, r2
   25d02:	1e5a      	subs	r2, r3, #1
   25d04:	4193      	sbcs	r3, r2
   25d06:	b2db      	uxtb	r3, r3
}
   25d08:	0018      	movs	r0, r3
   25d0a:	46bd      	mov	sp, r7
   25d0c:	b004      	add	sp, #16
   25d0e:	bd80      	pop	{r7, pc}
   25d10:	00025c85 	.word	0x00025c85

00025d14 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   25d14:	b580      	push	{r7, lr}
   25d16:	b084      	sub	sp, #16
   25d18:	af00      	add	r7, sp, #0
   25d1a:	0002      	movs	r2, r0
   25d1c:	1dfb      	adds	r3, r7, #7
   25d1e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25d20:	1dfb      	adds	r3, r7, #7
   25d22:	781b      	ldrb	r3, [r3, #0]
   25d24:	0018      	movs	r0, r3
   25d26:	4b09      	ldr	r3, [pc, #36]	; (25d4c <extint_chan_clear_detected+0x38>)
   25d28:	4798      	blx	r3
   25d2a:	0003      	movs	r3, r0
   25d2c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25d2e:	1dfb      	adds	r3, r7, #7
   25d30:	781b      	ldrb	r3, [r3, #0]
   25d32:	221f      	movs	r2, #31
   25d34:	4013      	ands	r3, r2
   25d36:	2201      	movs	r2, #1
   25d38:	409a      	lsls	r2, r3
   25d3a:	0013      	movs	r3, r2
   25d3c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   25d3e:	68fb      	ldr	r3, [r7, #12]
   25d40:	68ba      	ldr	r2, [r7, #8]
   25d42:	611a      	str	r2, [r3, #16]
}
   25d44:	46c0      	nop			; (mov r8, r8)
   25d46:	46bd      	mov	sp, r7
   25d48:	b004      	add	sp, #16
   25d4a:	bd80      	pop	{r7, pc}
   25d4c:	00025c85 	.word	0x00025c85

00025d50 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25d50:	b580      	push	{r7, lr}
   25d52:	b082      	sub	sp, #8
   25d54:	af00      	add	r7, sp, #0
   25d56:	6078      	str	r0, [r7, #4]
   25d58:	0008      	movs	r0, r1
   25d5a:	0011      	movs	r1, r2
   25d5c:	1cfb      	adds	r3, r7, #3
   25d5e:	1c02      	adds	r2, r0, #0
   25d60:	701a      	strb	r2, [r3, #0]
   25d62:	1cbb      	adds	r3, r7, #2
   25d64:	1c0a      	adds	r2, r1, #0
   25d66:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   25d68:	1cbb      	adds	r3, r7, #2
   25d6a:	781b      	ldrb	r3, [r3, #0]
   25d6c:	2b00      	cmp	r3, #0
   25d6e:	d001      	beq.n	25d74 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   25d70:	2317      	movs	r3, #23
   25d72:	e019      	b.n	25da8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   25d74:	1cfb      	adds	r3, r7, #3
   25d76:	781a      	ldrb	r2, [r3, #0]
   25d78:	4b0d      	ldr	r3, [pc, #52]	; (25db0 <extint_register_callback+0x60>)
   25d7a:	0092      	lsls	r2, r2, #2
   25d7c:	58d3      	ldr	r3, [r2, r3]
   25d7e:	2b00      	cmp	r3, #0
   25d80:	d107      	bne.n	25d92 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   25d82:	1cfb      	adds	r3, r7, #3
   25d84:	781a      	ldrb	r2, [r3, #0]
   25d86:	4b0a      	ldr	r3, [pc, #40]	; (25db0 <extint_register_callback+0x60>)
   25d88:	0092      	lsls	r2, r2, #2
   25d8a:	6879      	ldr	r1, [r7, #4]
   25d8c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   25d8e:	2300      	movs	r3, #0
   25d90:	e00a      	b.n	25da8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   25d92:	1cfb      	adds	r3, r7, #3
   25d94:	781a      	ldrb	r2, [r3, #0]
   25d96:	4b06      	ldr	r3, [pc, #24]	; (25db0 <extint_register_callback+0x60>)
   25d98:	0092      	lsls	r2, r2, #2
   25d9a:	58d2      	ldr	r2, [r2, r3]
   25d9c:	687b      	ldr	r3, [r7, #4]
   25d9e:	429a      	cmp	r2, r3
   25da0:	d101      	bne.n	25da6 <extint_register_callback+0x56>
		return STATUS_OK;
   25da2:	2300      	movs	r3, #0
   25da4:	e000      	b.n	25da8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   25da6:	231d      	movs	r3, #29
}
   25da8:	0018      	movs	r0, r3
   25daa:	46bd      	mov	sp, r7
   25dac:	b002      	add	sp, #8
   25dae:	bd80      	pop	{r7, pc}
   25db0:	200059c8 	.word	0x200059c8

00025db4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25db4:	b580      	push	{r7, lr}
   25db6:	b084      	sub	sp, #16
   25db8:	af00      	add	r7, sp, #0
   25dba:	0002      	movs	r2, r0
   25dbc:	1dfb      	adds	r3, r7, #7
   25dbe:	701a      	strb	r2, [r3, #0]
   25dc0:	1dbb      	adds	r3, r7, #6
   25dc2:	1c0a      	adds	r2, r1, #0
   25dc4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25dc6:	1dbb      	adds	r3, r7, #6
   25dc8:	781b      	ldrb	r3, [r3, #0]
   25dca:	2b00      	cmp	r3, #0
   25dcc:	d10e      	bne.n	25dec <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25dce:	1dfb      	adds	r3, r7, #7
   25dd0:	781b      	ldrb	r3, [r3, #0]
   25dd2:	0018      	movs	r0, r3
   25dd4:	4b08      	ldr	r3, [pc, #32]	; (25df8 <extint_chan_enable_callback+0x44>)
   25dd6:	4798      	blx	r3
   25dd8:	0003      	movs	r3, r0
   25dda:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   25ddc:	1dfb      	adds	r3, r7, #7
   25dde:	781b      	ldrb	r3, [r3, #0]
   25de0:	2201      	movs	r2, #1
   25de2:	409a      	lsls	r2, r3
   25de4:	68fb      	ldr	r3, [r7, #12]
   25de6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25de8:	2300      	movs	r3, #0
   25dea:	e000      	b.n	25dee <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25dec:	2317      	movs	r3, #23
}
   25dee:	0018      	movs	r0, r3
   25df0:	46bd      	mov	sp, r7
   25df2:	b004      	add	sp, #16
   25df4:	bd80      	pop	{r7, pc}
   25df6:	46c0      	nop			; (mov r8, r8)
   25df8:	00025c85 	.word	0x00025c85

00025dfc <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25dfc:	b580      	push	{r7, lr}
   25dfe:	b084      	sub	sp, #16
   25e00:	af00      	add	r7, sp, #0
   25e02:	0002      	movs	r2, r0
   25e04:	1dfb      	adds	r3, r7, #7
   25e06:	701a      	strb	r2, [r3, #0]
   25e08:	1dbb      	adds	r3, r7, #6
   25e0a:	1c0a      	adds	r2, r1, #0
   25e0c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25e0e:	1dbb      	adds	r3, r7, #6
   25e10:	781b      	ldrb	r3, [r3, #0]
   25e12:	2b00      	cmp	r3, #0
   25e14:	d10e      	bne.n	25e34 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25e16:	1dfb      	adds	r3, r7, #7
   25e18:	781b      	ldrb	r3, [r3, #0]
   25e1a:	0018      	movs	r0, r3
   25e1c:	4b08      	ldr	r3, [pc, #32]	; (25e40 <extint_chan_disable_callback+0x44>)
   25e1e:	4798      	blx	r3
   25e20:	0003      	movs	r3, r0
   25e22:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25e24:	1dfb      	adds	r3, r7, #7
   25e26:	781b      	ldrb	r3, [r3, #0]
   25e28:	2201      	movs	r2, #1
   25e2a:	409a      	lsls	r2, r3
   25e2c:	68fb      	ldr	r3, [r7, #12]
   25e2e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25e30:	2300      	movs	r3, #0
   25e32:	e000      	b.n	25e36 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25e34:	2317      	movs	r3, #23
}
   25e36:	0018      	movs	r0, r3
   25e38:	46bd      	mov	sp, r7
   25e3a:	b004      	add	sp, #16
   25e3c:	bd80      	pop	{r7, pc}
   25e3e:	46c0      	nop			; (mov r8, r8)
   25e40:	00025c85 	.word	0x00025c85

00025e44 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25e44:	b580      	push	{r7, lr}
   25e46:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25e48:	4b15      	ldr	r3, [pc, #84]	; (25ea0 <EIC_Handler+0x5c>)
   25e4a:	2200      	movs	r2, #0
   25e4c:	701a      	strb	r2, [r3, #0]
   25e4e:	e020      	b.n	25e92 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   25e50:	4b13      	ldr	r3, [pc, #76]	; (25ea0 <EIC_Handler+0x5c>)
   25e52:	781b      	ldrb	r3, [r3, #0]
   25e54:	0018      	movs	r0, r3
   25e56:	4b13      	ldr	r3, [pc, #76]	; (25ea4 <EIC_Handler+0x60>)
   25e58:	4798      	blx	r3
   25e5a:	1e03      	subs	r3, r0, #0
   25e5c:	d013      	beq.n	25e86 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   25e5e:	4b10      	ldr	r3, [pc, #64]	; (25ea0 <EIC_Handler+0x5c>)
   25e60:	781b      	ldrb	r3, [r3, #0]
   25e62:	0018      	movs	r0, r3
   25e64:	4b10      	ldr	r3, [pc, #64]	; (25ea8 <EIC_Handler+0x64>)
   25e66:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   25e68:	4b0d      	ldr	r3, [pc, #52]	; (25ea0 <EIC_Handler+0x5c>)
   25e6a:	781b      	ldrb	r3, [r3, #0]
   25e6c:	001a      	movs	r2, r3
   25e6e:	4b0f      	ldr	r3, [pc, #60]	; (25eac <EIC_Handler+0x68>)
   25e70:	0092      	lsls	r2, r2, #2
   25e72:	58d3      	ldr	r3, [r2, r3]
   25e74:	2b00      	cmp	r3, #0
   25e76:	d006      	beq.n	25e86 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   25e78:	4b09      	ldr	r3, [pc, #36]	; (25ea0 <EIC_Handler+0x5c>)
   25e7a:	781b      	ldrb	r3, [r3, #0]
   25e7c:	001a      	movs	r2, r3
   25e7e:	4b0b      	ldr	r3, [pc, #44]	; (25eac <EIC_Handler+0x68>)
   25e80:	0092      	lsls	r2, r2, #2
   25e82:	58d3      	ldr	r3, [r2, r3]
   25e84:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25e86:	4b06      	ldr	r3, [pc, #24]	; (25ea0 <EIC_Handler+0x5c>)
   25e88:	781b      	ldrb	r3, [r3, #0]
   25e8a:	3301      	adds	r3, #1
   25e8c:	b2da      	uxtb	r2, r3
   25e8e:	4b04      	ldr	r3, [pc, #16]	; (25ea0 <EIC_Handler+0x5c>)
   25e90:	701a      	strb	r2, [r3, #0]
   25e92:	4b03      	ldr	r3, [pc, #12]	; (25ea0 <EIC_Handler+0x5c>)
   25e94:	781b      	ldrb	r3, [r3, #0]
   25e96:	2b0f      	cmp	r3, #15
   25e98:	d9da      	bls.n	25e50 <EIC_Handler+0xc>
			}
		}
	}
}
   25e9a:	46c0      	nop			; (mov r8, r8)
   25e9c:	46bd      	mov	sp, r7
   25e9e:	bd80      	pop	{r7, pc}
   25ea0:	200059c4 	.word	0x200059c4
   25ea4:	00025cd1 	.word	0x00025cd1
   25ea8:	00025d15 	.word	0x00025d15
   25eac:	200059c8 	.word	0x200059c8

00025eb0 <system_gclk_chan_get_config_defaults>:
{
   25eb0:	b580      	push	{r7, lr}
   25eb2:	b082      	sub	sp, #8
   25eb4:	af00      	add	r7, sp, #0
   25eb6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25eb8:	687b      	ldr	r3, [r7, #4]
   25eba:	2200      	movs	r2, #0
   25ebc:	701a      	strb	r2, [r3, #0]
}
   25ebe:	46c0      	nop			; (mov r8, r8)
   25ec0:	46bd      	mov	sp, r7
   25ec2:	b002      	add	sp, #8
   25ec4:	bd80      	pop	{r7, pc}
	...

00025ec8 <system_apb_clock_set_mask>:
{
   25ec8:	b580      	push	{r7, lr}
   25eca:	b082      	sub	sp, #8
   25ecc:	af00      	add	r7, sp, #0
   25ece:	0002      	movs	r2, r0
   25ed0:	6039      	str	r1, [r7, #0]
   25ed2:	1dfb      	adds	r3, r7, #7
   25ed4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25ed6:	1dfb      	adds	r3, r7, #7
   25ed8:	781b      	ldrb	r3, [r3, #0]
   25eda:	2b01      	cmp	r3, #1
   25edc:	d00a      	beq.n	25ef4 <system_apb_clock_set_mask+0x2c>
   25ede:	2b02      	cmp	r3, #2
   25ee0:	d00f      	beq.n	25f02 <system_apb_clock_set_mask+0x3a>
   25ee2:	2b00      	cmp	r3, #0
   25ee4:	d114      	bne.n	25f10 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25ee6:	4b0e      	ldr	r3, [pc, #56]	; (25f20 <system_apb_clock_set_mask+0x58>)
   25ee8:	4a0d      	ldr	r2, [pc, #52]	; (25f20 <system_apb_clock_set_mask+0x58>)
   25eea:	6991      	ldr	r1, [r2, #24]
   25eec:	683a      	ldr	r2, [r7, #0]
   25eee:	430a      	orrs	r2, r1
   25ef0:	619a      	str	r2, [r3, #24]
			break;
   25ef2:	e00f      	b.n	25f14 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25ef4:	4b0a      	ldr	r3, [pc, #40]	; (25f20 <system_apb_clock_set_mask+0x58>)
   25ef6:	4a0a      	ldr	r2, [pc, #40]	; (25f20 <system_apb_clock_set_mask+0x58>)
   25ef8:	69d1      	ldr	r1, [r2, #28]
   25efa:	683a      	ldr	r2, [r7, #0]
   25efc:	430a      	orrs	r2, r1
   25efe:	61da      	str	r2, [r3, #28]
			break;
   25f00:	e008      	b.n	25f14 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25f02:	4b07      	ldr	r3, [pc, #28]	; (25f20 <system_apb_clock_set_mask+0x58>)
   25f04:	4a06      	ldr	r2, [pc, #24]	; (25f20 <system_apb_clock_set_mask+0x58>)
   25f06:	6a11      	ldr	r1, [r2, #32]
   25f08:	683a      	ldr	r2, [r7, #0]
   25f0a:	430a      	orrs	r2, r1
   25f0c:	621a      	str	r2, [r3, #32]
			break;
   25f0e:	e001      	b.n	25f14 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25f10:	2317      	movs	r3, #23
   25f12:	e000      	b.n	25f16 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25f14:	2300      	movs	r3, #0
}
   25f16:	0018      	movs	r0, r3
   25f18:	46bd      	mov	sp, r7
   25f1a:	b002      	add	sp, #8
   25f1c:	bd80      	pop	{r7, pc}
   25f1e:	46c0      	nop			; (mov r8, r8)
   25f20:	40000400 	.word	0x40000400

00025f24 <system_pinmux_get_config_defaults>:
{
   25f24:	b580      	push	{r7, lr}
   25f26:	b082      	sub	sp, #8
   25f28:	af00      	add	r7, sp, #0
   25f2a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25f2c:	687b      	ldr	r3, [r7, #4]
   25f2e:	2280      	movs	r2, #128	; 0x80
   25f30:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25f32:	687b      	ldr	r3, [r7, #4]
   25f34:	2200      	movs	r2, #0
   25f36:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25f38:	687b      	ldr	r3, [r7, #4]
   25f3a:	2201      	movs	r2, #1
   25f3c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25f3e:	687b      	ldr	r3, [r7, #4]
   25f40:	2200      	movs	r2, #0
   25f42:	70da      	strb	r2, [r3, #3]
}
   25f44:	46c0      	nop			; (mov r8, r8)
   25f46:	46bd      	mov	sp, r7
   25f48:	b002      	add	sp, #8
   25f4a:	bd80      	pop	{r7, pc}

00025f4c <system_interrupt_enable>:
{
   25f4c:	b580      	push	{r7, lr}
   25f4e:	b082      	sub	sp, #8
   25f50:	af00      	add	r7, sp, #0
   25f52:	0002      	movs	r2, r0
   25f54:	1dfb      	adds	r3, r7, #7
   25f56:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25f58:	4b06      	ldr	r3, [pc, #24]	; (25f74 <system_interrupt_enable+0x28>)
   25f5a:	1dfa      	adds	r2, r7, #7
   25f5c:	7812      	ldrb	r2, [r2, #0]
   25f5e:	0011      	movs	r1, r2
   25f60:	221f      	movs	r2, #31
   25f62:	400a      	ands	r2, r1
   25f64:	2101      	movs	r1, #1
   25f66:	4091      	lsls	r1, r2
   25f68:	000a      	movs	r2, r1
   25f6a:	601a      	str	r2, [r3, #0]
}
   25f6c:	46c0      	nop			; (mov r8, r8)
   25f6e:	46bd      	mov	sp, r7
   25f70:	b002      	add	sp, #8
   25f72:	bd80      	pop	{r7, pc}
   25f74:	e000e100 	.word	0xe000e100

00025f78 <_extint_get_eic_from_channel>:
{
   25f78:	b580      	push	{r7, lr}
   25f7a:	b084      	sub	sp, #16
   25f7c:	af00      	add	r7, sp, #0
   25f7e:	0002      	movs	r2, r0
   25f80:	1dfb      	adds	r3, r7, #7
   25f82:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25f84:	230f      	movs	r3, #15
   25f86:	18fb      	adds	r3, r7, r3
   25f88:	1dfa      	adds	r2, r7, #7
   25f8a:	7812      	ldrb	r2, [r2, #0]
   25f8c:	0952      	lsrs	r2, r2, #5
   25f8e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   25f90:	230f      	movs	r3, #15
   25f92:	18fb      	adds	r3, r7, r3
   25f94:	781b      	ldrb	r3, [r3, #0]
   25f96:	2b00      	cmp	r3, #0
   25f98:	d10c      	bne.n	25fb4 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25f9a:	4b09      	ldr	r3, [pc, #36]	; (25fc0 <_extint_get_eic_from_channel+0x48>)
   25f9c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   25f9e:	230f      	movs	r3, #15
   25fa0:	18fb      	adds	r3, r7, r3
   25fa2:	781b      	ldrb	r3, [r3, #0]
   25fa4:	009b      	lsls	r3, r3, #2
   25fa6:	2210      	movs	r2, #16
   25fa8:	4694      	mov	ip, r2
   25faa:	44bc      	add	ip, r7
   25fac:	4463      	add	r3, ip
   25fae:	3b08      	subs	r3, #8
   25fb0:	681b      	ldr	r3, [r3, #0]
   25fb2:	e000      	b.n	25fb6 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   25fb4:	2300      	movs	r3, #0
}
   25fb6:	0018      	movs	r0, r3
   25fb8:	46bd      	mov	sp, r7
   25fba:	b004      	add	sp, #16
   25fbc:	bd80      	pop	{r7, pc}
   25fbe:	46c0      	nop			; (mov r8, r8)
   25fc0:	40001800 	.word	0x40001800

00025fc4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   25fc4:	b580      	push	{r7, lr}
   25fc6:	b082      	sub	sp, #8
   25fc8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25fca:	4b0f      	ldr	r3, [pc, #60]	; (26008 <extint_is_syncing+0x44>)
   25fcc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25fce:	2300      	movs	r3, #0
   25fd0:	607b      	str	r3, [r7, #4]
   25fd2:	e011      	b.n	25ff8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   25fd4:	687b      	ldr	r3, [r7, #4]
   25fd6:	009b      	lsls	r3, r3, #2
   25fd8:	2208      	movs	r2, #8
   25fda:	4694      	mov	ip, r2
   25fdc:	44bc      	add	ip, r7
   25fde:	4463      	add	r3, ip
   25fe0:	3b08      	subs	r3, #8
   25fe2:	681b      	ldr	r3, [r3, #0]
   25fe4:	785b      	ldrb	r3, [r3, #1]
   25fe6:	b2db      	uxtb	r3, r3
   25fe8:	b25b      	sxtb	r3, r3
   25fea:	2b00      	cmp	r3, #0
   25fec:	da01      	bge.n	25ff2 <extint_is_syncing+0x2e>
			return true;
   25fee:	2301      	movs	r3, #1
   25ff0:	e006      	b.n	26000 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25ff2:	687b      	ldr	r3, [r7, #4]
   25ff4:	3301      	adds	r3, #1
   25ff6:	607b      	str	r3, [r7, #4]
   25ff8:	687b      	ldr	r3, [r7, #4]
   25ffa:	2b00      	cmp	r3, #0
   25ffc:	d0ea      	beq.n	25fd4 <extint_is_syncing+0x10>
		}
	}
	return false;
   25ffe:	2300      	movs	r3, #0
}
   26000:	0018      	movs	r0, r3
   26002:	46bd      	mov	sp, r7
   26004:	b002      	add	sp, #8
   26006:	bd80      	pop	{r7, pc}
   26008:	40001800 	.word	0x40001800

0002600c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   2600c:	b580      	push	{r7, lr}
   2600e:	b084      	sub	sp, #16
   26010:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26012:	4b2d      	ldr	r3, [pc, #180]	; (260c8 <_system_extint_init+0xbc>)
   26014:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   26016:	2140      	movs	r1, #64	; 0x40
   26018:	2000      	movs	r0, #0
   2601a:	4b2c      	ldr	r3, [pc, #176]	; (260cc <_system_extint_init+0xc0>)
   2601c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2601e:	003b      	movs	r3, r7
   26020:	0018      	movs	r0, r3
   26022:	4b2b      	ldr	r3, [pc, #172]	; (260d0 <_system_extint_init+0xc4>)
   26024:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   26026:	003b      	movs	r3, r7
   26028:	2200      	movs	r2, #0
   2602a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   2602c:	003b      	movs	r3, r7
   2602e:	0019      	movs	r1, r3
   26030:	2005      	movs	r0, #5
   26032:	4b28      	ldr	r3, [pc, #160]	; (260d4 <_system_extint_init+0xc8>)
   26034:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   26036:	2005      	movs	r0, #5
   26038:	4b27      	ldr	r3, [pc, #156]	; (260d8 <_system_extint_init+0xcc>)
   2603a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2603c:	2300      	movs	r3, #0
   2603e:	60fb      	str	r3, [r7, #12]
   26040:	e018      	b.n	26074 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26042:	68fb      	ldr	r3, [r7, #12]
   26044:	009b      	lsls	r3, r3, #2
   26046:	2210      	movs	r2, #16
   26048:	4694      	mov	ip, r2
   2604a:	44bc      	add	ip, r7
   2604c:	4463      	add	r3, ip
   2604e:	3b0c      	subs	r3, #12
   26050:	681a      	ldr	r2, [r3, #0]
   26052:	68fb      	ldr	r3, [r7, #12]
   26054:	009b      	lsls	r3, r3, #2
   26056:	2110      	movs	r1, #16
   26058:	468c      	mov	ip, r1
   2605a:	44bc      	add	ip, r7
   2605c:	4463      	add	r3, ip
   2605e:	3b0c      	subs	r3, #12
   26060:	681b      	ldr	r3, [r3, #0]
   26062:	781b      	ldrb	r3, [r3, #0]
   26064:	b2db      	uxtb	r3, r3
   26066:	2101      	movs	r1, #1
   26068:	430b      	orrs	r3, r1
   2606a:	b2db      	uxtb	r3, r3
   2606c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2606e:	68fb      	ldr	r3, [r7, #12]
   26070:	3301      	adds	r3, #1
   26072:	60fb      	str	r3, [r7, #12]
   26074:	68fb      	ldr	r3, [r7, #12]
   26076:	2b00      	cmp	r3, #0
   26078:	d0e3      	beq.n	26042 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2607a:	46c0      	nop			; (mov r8, r8)
   2607c:	4b17      	ldr	r3, [pc, #92]	; (260dc <_system_extint_init+0xd0>)
   2607e:	4798      	blx	r3
   26080:	1e03      	subs	r3, r0, #0
   26082:	d1fb      	bne.n	2607c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26084:	230b      	movs	r3, #11
   26086:	18fb      	adds	r3, r7, r3
   26088:	2200      	movs	r2, #0
   2608a:	701a      	strb	r2, [r3, #0]
   2608c:	e00d      	b.n	260aa <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   2608e:	230b      	movs	r3, #11
   26090:	18fb      	adds	r3, r7, r3
   26092:	781a      	ldrb	r2, [r3, #0]
   26094:	4b12      	ldr	r3, [pc, #72]	; (260e0 <_system_extint_init+0xd4>)
   26096:	0092      	lsls	r2, r2, #2
   26098:	2100      	movs	r1, #0
   2609a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2609c:	230b      	movs	r3, #11
   2609e:	18fb      	adds	r3, r7, r3
   260a0:	781a      	ldrb	r2, [r3, #0]
   260a2:	230b      	movs	r3, #11
   260a4:	18fb      	adds	r3, r7, r3
   260a6:	3201      	adds	r2, #1
   260a8:	701a      	strb	r2, [r3, #0]
   260aa:	230b      	movs	r3, #11
   260ac:	18fb      	adds	r3, r7, r3
   260ae:	781b      	ldrb	r3, [r3, #0]
   260b0:	2b0f      	cmp	r3, #15
   260b2:	d9ec      	bls.n	2608e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   260b4:	2004      	movs	r0, #4
   260b6:	4b0b      	ldr	r3, [pc, #44]	; (260e4 <_system_extint_init+0xd8>)
   260b8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   260ba:	4b0b      	ldr	r3, [pc, #44]	; (260e8 <_system_extint_init+0xdc>)
   260bc:	4798      	blx	r3
}
   260be:	46c0      	nop			; (mov r8, r8)
   260c0:	46bd      	mov	sp, r7
   260c2:	b004      	add	sp, #16
   260c4:	bd80      	pop	{r7, pc}
   260c6:	46c0      	nop			; (mov r8, r8)
   260c8:	40001800 	.word	0x40001800
   260cc:	00025ec9 	.word	0x00025ec9
   260d0:	00025eb1 	.word	0x00025eb1
   260d4:	00029739 	.word	0x00029739
   260d8:	0002977d 	.word	0x0002977d
   260dc:	00025fc5 	.word	0x00025fc5
   260e0:	200059c8 	.word	0x200059c8
   260e4:	00025f4d 	.word	0x00025f4d
   260e8:	000260ed 	.word	0x000260ed

000260ec <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   260ec:	b580      	push	{r7, lr}
   260ee:	b082      	sub	sp, #8
   260f0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   260f2:	4b15      	ldr	r3, [pc, #84]	; (26148 <_extint_enable+0x5c>)
   260f4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   260f6:	2300      	movs	r3, #0
   260f8:	607b      	str	r3, [r7, #4]
   260fa:	e018      	b.n	2612e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   260fc:	687b      	ldr	r3, [r7, #4]
   260fe:	009b      	lsls	r3, r3, #2
   26100:	2208      	movs	r2, #8
   26102:	4694      	mov	ip, r2
   26104:	44bc      	add	ip, r7
   26106:	4463      	add	r3, ip
   26108:	3b08      	subs	r3, #8
   2610a:	681a      	ldr	r2, [r3, #0]
   2610c:	687b      	ldr	r3, [r7, #4]
   2610e:	009b      	lsls	r3, r3, #2
   26110:	2108      	movs	r1, #8
   26112:	468c      	mov	ip, r1
   26114:	44bc      	add	ip, r7
   26116:	4463      	add	r3, ip
   26118:	3b08      	subs	r3, #8
   2611a:	681b      	ldr	r3, [r3, #0]
   2611c:	781b      	ldrb	r3, [r3, #0]
   2611e:	b2db      	uxtb	r3, r3
   26120:	2102      	movs	r1, #2
   26122:	430b      	orrs	r3, r1
   26124:	b2db      	uxtb	r3, r3
   26126:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26128:	687b      	ldr	r3, [r7, #4]
   2612a:	3301      	adds	r3, #1
   2612c:	607b      	str	r3, [r7, #4]
   2612e:	687b      	ldr	r3, [r7, #4]
   26130:	2b00      	cmp	r3, #0
   26132:	d0e3      	beq.n	260fc <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26134:	46c0      	nop			; (mov r8, r8)
   26136:	4b05      	ldr	r3, [pc, #20]	; (2614c <_extint_enable+0x60>)
   26138:	4798      	blx	r3
   2613a:	1e03      	subs	r3, r0, #0
   2613c:	d1fb      	bne.n	26136 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   2613e:	46c0      	nop			; (mov r8, r8)
   26140:	46bd      	mov	sp, r7
   26142:	b002      	add	sp, #8
   26144:	bd80      	pop	{r7, pc}
   26146:	46c0      	nop			; (mov r8, r8)
   26148:	40001800 	.word	0x40001800
   2614c:	00025fc5 	.word	0x00025fc5

00026150 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26150:	b580      	push	{r7, lr}
   26152:	b082      	sub	sp, #8
   26154:	af00      	add	r7, sp, #0
   26156:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26158:	687b      	ldr	r3, [r7, #4]
   2615a:	2200      	movs	r2, #0
   2615c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   2615e:	687b      	ldr	r3, [r7, #4]
   26160:	2200      	movs	r2, #0
   26162:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26164:	687b      	ldr	r3, [r7, #4]
   26166:	2201      	movs	r2, #1
   26168:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2616a:	687b      	ldr	r3, [r7, #4]
   2616c:	2201      	movs	r2, #1
   2616e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26170:	687b      	ldr	r3, [r7, #4]
   26172:	2200      	movs	r2, #0
   26174:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   26176:	687b      	ldr	r3, [r7, #4]
   26178:	2202      	movs	r2, #2
   2617a:	72da      	strb	r2, [r3, #11]
}
   2617c:	46c0      	nop			; (mov r8, r8)
   2617e:	46bd      	mov	sp, r7
   26180:	b002      	add	sp, #8
   26182:	bd80      	pop	{r7, pc}

00026184 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26184:	b580      	push	{r7, lr}
   26186:	b086      	sub	sp, #24
   26188:	af00      	add	r7, sp, #0
   2618a:	0002      	movs	r2, r0
   2618c:	6039      	str	r1, [r7, #0]
   2618e:	1dfb      	adds	r3, r7, #7
   26190:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26192:	2308      	movs	r3, #8
   26194:	18fb      	adds	r3, r7, r3
   26196:	0018      	movs	r0, r3
   26198:	4b36      	ldr	r3, [pc, #216]	; (26274 <extint_chan_set_config+0xf0>)
   2619a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   2619c:	683b      	ldr	r3, [r7, #0]
   2619e:	685b      	ldr	r3, [r3, #4]
   261a0:	b2da      	uxtb	r2, r3
   261a2:	2308      	movs	r3, #8
   261a4:	18fb      	adds	r3, r7, r3
   261a6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   261a8:	2308      	movs	r3, #8
   261aa:	18fb      	adds	r3, r7, r3
   261ac:	2200      	movs	r2, #0
   261ae:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   261b0:	683b      	ldr	r3, [r7, #0]
   261b2:	7a1a      	ldrb	r2, [r3, #8]
   261b4:	2308      	movs	r3, #8
   261b6:	18fb      	adds	r3, r7, r3
   261b8:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   261ba:	683b      	ldr	r3, [r7, #0]
   261bc:	681b      	ldr	r3, [r3, #0]
   261be:	b2db      	uxtb	r3, r3
   261c0:	2208      	movs	r2, #8
   261c2:	18ba      	adds	r2, r7, r2
   261c4:	0011      	movs	r1, r2
   261c6:	0018      	movs	r0, r3
   261c8:	4b2b      	ldr	r3, [pc, #172]	; (26278 <extint_chan_set_config+0xf4>)
   261ca:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   261cc:	1dfb      	adds	r3, r7, #7
   261ce:	781b      	ldrb	r3, [r3, #0]
   261d0:	0018      	movs	r0, r3
   261d2:	4b2a      	ldr	r3, [pc, #168]	; (2627c <extint_chan_set_config+0xf8>)
   261d4:	4798      	blx	r3
   261d6:	0003      	movs	r3, r0
   261d8:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   261da:	1dfb      	adds	r3, r7, #7
   261dc:	781b      	ldrb	r3, [r3, #0]
   261de:	2207      	movs	r2, #7
   261e0:	4013      	ands	r3, r2
   261e2:	009b      	lsls	r3, r3, #2
   261e4:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   261e6:	683b      	ldr	r3, [r7, #0]
   261e8:	7adb      	ldrb	r3, [r3, #11]
   261ea:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   261ec:	683b      	ldr	r3, [r7, #0]
   261ee:	7a9b      	ldrb	r3, [r3, #10]
   261f0:	2b00      	cmp	r3, #0
   261f2:	d003      	beq.n	261fc <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   261f4:	697b      	ldr	r3, [r7, #20]
   261f6:	2208      	movs	r2, #8
   261f8:	4313      	orrs	r3, r2
   261fa:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   261fc:	1dfb      	adds	r3, r7, #7
   261fe:	781b      	ldrb	r3, [r3, #0]
   26200:	08db      	lsrs	r3, r3, #3
   26202:	b2db      	uxtb	r3, r3
   26204:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26206:	1dfb      	adds	r3, r7, #7
   26208:	781b      	ldrb	r3, [r3, #0]
   2620a:	08db      	lsrs	r3, r3, #3
   2620c:	b2db      	uxtb	r3, r3
   2620e:	001a      	movs	r2, r3
   26210:	693b      	ldr	r3, [r7, #16]
   26212:	3206      	adds	r2, #6
   26214:	0092      	lsls	r2, r2, #2
   26216:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26218:	210f      	movs	r1, #15
   2621a:	68fa      	ldr	r2, [r7, #12]
   2621c:	4091      	lsls	r1, r2
   2621e:	000a      	movs	r2, r1
   26220:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26222:	401a      	ands	r2, r3
			(new_config << config_pos);
   26224:	6979      	ldr	r1, [r7, #20]
   26226:	68fb      	ldr	r3, [r7, #12]
   26228:	4099      	lsls	r1, r3
   2622a:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2622c:	431a      	orrs	r2, r3
   2622e:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26230:	693b      	ldr	r3, [r7, #16]
   26232:	1d82      	adds	r2, r0, #6
   26234:	0092      	lsls	r2, r2, #2
   26236:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   26238:	683b      	ldr	r3, [r7, #0]
   2623a:	7a5b      	ldrb	r3, [r3, #9]
   2623c:	2b00      	cmp	r3, #0
   2623e:	d00a      	beq.n	26256 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26240:	693b      	ldr	r3, [r7, #16]
   26242:	695a      	ldr	r2, [r3, #20]
   26244:	1dfb      	adds	r3, r7, #7
   26246:	781b      	ldrb	r3, [r3, #0]
   26248:	2101      	movs	r1, #1
   2624a:	4099      	lsls	r1, r3
   2624c:	000b      	movs	r3, r1
   2624e:	431a      	orrs	r2, r3
   26250:	693b      	ldr	r3, [r7, #16]
   26252:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26254:	e00a      	b.n	2626c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   26256:	693b      	ldr	r3, [r7, #16]
   26258:	695b      	ldr	r3, [r3, #20]
   2625a:	1dfa      	adds	r2, r7, #7
   2625c:	7812      	ldrb	r2, [r2, #0]
   2625e:	2101      	movs	r1, #1
   26260:	4091      	lsls	r1, r2
   26262:	000a      	movs	r2, r1
   26264:	43d2      	mvns	r2, r2
   26266:	401a      	ands	r2, r3
   26268:	693b      	ldr	r3, [r7, #16]
   2626a:	615a      	str	r2, [r3, #20]
}
   2626c:	46c0      	nop			; (mov r8, r8)
   2626e:	46bd      	mov	sp, r7
   26270:	b006      	add	sp, #24
   26272:	bd80      	pop	{r7, pc}
   26274:	00025f25 	.word	0x00025f25
   26278:	00029a99 	.word	0x00029a99
   2627c:	00025f79 	.word	0x00025f79

00026280 <system_pinmux_get_config_defaults>:
{
   26280:	b580      	push	{r7, lr}
   26282:	b082      	sub	sp, #8
   26284:	af00      	add	r7, sp, #0
   26286:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26288:	687b      	ldr	r3, [r7, #4]
   2628a:	2280      	movs	r2, #128	; 0x80
   2628c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2628e:	687b      	ldr	r3, [r7, #4]
   26290:	2200      	movs	r2, #0
   26292:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26294:	687b      	ldr	r3, [r7, #4]
   26296:	2201      	movs	r2, #1
   26298:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2629a:	687b      	ldr	r3, [r7, #4]
   2629c:	2200      	movs	r2, #0
   2629e:	70da      	strb	r2, [r3, #3]
}
   262a0:	46c0      	nop			; (mov r8, r8)
   262a2:	46bd      	mov	sp, r7
   262a4:	b002      	add	sp, #8
   262a6:	bd80      	pop	{r7, pc}

000262a8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   262a8:	b580      	push	{r7, lr}
   262aa:	b084      	sub	sp, #16
   262ac:	af00      	add	r7, sp, #0
   262ae:	0002      	movs	r2, r0
   262b0:	6039      	str	r1, [r7, #0]
   262b2:	1dfb      	adds	r3, r7, #7
   262b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   262b6:	230c      	movs	r3, #12
   262b8:	18fb      	adds	r3, r7, r3
   262ba:	0018      	movs	r0, r3
   262bc:	4b10      	ldr	r3, [pc, #64]	; (26300 <port_pin_set_config+0x58>)
   262be:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   262c0:	230c      	movs	r3, #12
   262c2:	18fb      	adds	r3, r7, r3
   262c4:	2280      	movs	r2, #128	; 0x80
   262c6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   262c8:	683b      	ldr	r3, [r7, #0]
   262ca:	781a      	ldrb	r2, [r3, #0]
   262cc:	230c      	movs	r3, #12
   262ce:	18fb      	adds	r3, r7, r3
   262d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   262d2:	683b      	ldr	r3, [r7, #0]
   262d4:	785a      	ldrb	r2, [r3, #1]
   262d6:	230c      	movs	r3, #12
   262d8:	18fb      	adds	r3, r7, r3
   262da:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   262dc:	683b      	ldr	r3, [r7, #0]
   262de:	789a      	ldrb	r2, [r3, #2]
   262e0:	230c      	movs	r3, #12
   262e2:	18fb      	adds	r3, r7, r3
   262e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   262e6:	230c      	movs	r3, #12
   262e8:	18fa      	adds	r2, r7, r3
   262ea:	1dfb      	adds	r3, r7, #7
   262ec:	781b      	ldrb	r3, [r3, #0]
   262ee:	0011      	movs	r1, r2
   262f0:	0018      	movs	r0, r3
   262f2:	4b04      	ldr	r3, [pc, #16]	; (26304 <port_pin_set_config+0x5c>)
   262f4:	4798      	blx	r3
}
   262f6:	46c0      	nop			; (mov r8, r8)
   262f8:	46bd      	mov	sp, r7
   262fa:	b004      	add	sp, #16
   262fc:	bd80      	pop	{r7, pc}
   262fe:	46c0      	nop			; (mov r8, r8)
   26300:	00026281 	.word	0x00026281
   26304:	00029a99 	.word	0x00029a99

00026308 <system_gclk_chan_get_config_defaults>:
{
   26308:	b580      	push	{r7, lr}
   2630a:	b082      	sub	sp, #8
   2630c:	af00      	add	r7, sp, #0
   2630e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26310:	687b      	ldr	r3, [r7, #4]
   26312:	2200      	movs	r2, #0
   26314:	701a      	strb	r2, [r3, #0]
}
   26316:	46c0      	nop			; (mov r8, r8)
   26318:	46bd      	mov	sp, r7
   2631a:	b002      	add	sp, #8
   2631c:	bd80      	pop	{r7, pc}
	...

00026320 <system_apb_clock_set_mask>:
{
   26320:	b580      	push	{r7, lr}
   26322:	b082      	sub	sp, #8
   26324:	af00      	add	r7, sp, #0
   26326:	0002      	movs	r2, r0
   26328:	6039      	str	r1, [r7, #0]
   2632a:	1dfb      	adds	r3, r7, #7
   2632c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2632e:	1dfb      	adds	r3, r7, #7
   26330:	781b      	ldrb	r3, [r3, #0]
   26332:	2b01      	cmp	r3, #1
   26334:	d00a      	beq.n	2634c <system_apb_clock_set_mask+0x2c>
   26336:	2b02      	cmp	r3, #2
   26338:	d00f      	beq.n	2635a <system_apb_clock_set_mask+0x3a>
   2633a:	2b00      	cmp	r3, #0
   2633c:	d114      	bne.n	26368 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2633e:	4b0e      	ldr	r3, [pc, #56]	; (26378 <system_apb_clock_set_mask+0x58>)
   26340:	4a0d      	ldr	r2, [pc, #52]	; (26378 <system_apb_clock_set_mask+0x58>)
   26342:	6991      	ldr	r1, [r2, #24]
   26344:	683a      	ldr	r2, [r7, #0]
   26346:	430a      	orrs	r2, r1
   26348:	619a      	str	r2, [r3, #24]
			break;
   2634a:	e00f      	b.n	2636c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2634c:	4b0a      	ldr	r3, [pc, #40]	; (26378 <system_apb_clock_set_mask+0x58>)
   2634e:	4a0a      	ldr	r2, [pc, #40]	; (26378 <system_apb_clock_set_mask+0x58>)
   26350:	69d1      	ldr	r1, [r2, #28]
   26352:	683a      	ldr	r2, [r7, #0]
   26354:	430a      	orrs	r2, r1
   26356:	61da      	str	r2, [r3, #28]
			break;
   26358:	e008      	b.n	2636c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2635a:	4b07      	ldr	r3, [pc, #28]	; (26378 <system_apb_clock_set_mask+0x58>)
   2635c:	4a06      	ldr	r2, [pc, #24]	; (26378 <system_apb_clock_set_mask+0x58>)
   2635e:	6a11      	ldr	r1, [r2, #32]
   26360:	683a      	ldr	r2, [r7, #0]
   26362:	430a      	orrs	r2, r1
   26364:	621a      	str	r2, [r3, #32]
			break;
   26366:	e001      	b.n	2636c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26368:	2317      	movs	r3, #23
   2636a:	e000      	b.n	2636e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2636c:	2300      	movs	r3, #0
}
   2636e:	0018      	movs	r0, r3
   26370:	46bd      	mov	sp, r7
   26372:	b002      	add	sp, #8
   26374:	bd80      	pop	{r7, pc}
   26376:	46c0      	nop			; (mov r8, r8)
   26378:	40000400 	.word	0x40000400

0002637c <system_interrupt_enable>:
{
   2637c:	b580      	push	{r7, lr}
   2637e:	b082      	sub	sp, #8
   26380:	af00      	add	r7, sp, #0
   26382:	0002      	movs	r2, r0
   26384:	1dfb      	adds	r3, r7, #7
   26386:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26388:	4b06      	ldr	r3, [pc, #24]	; (263a4 <system_interrupt_enable+0x28>)
   2638a:	1dfa      	adds	r2, r7, #7
   2638c:	7812      	ldrb	r2, [r2, #0]
   2638e:	0011      	movs	r1, r2
   26390:	221f      	movs	r2, #31
   26392:	400a      	ands	r2, r1
   26394:	2101      	movs	r1, #1
   26396:	4091      	lsls	r1, r2
   26398:	000a      	movs	r2, r1
   2639a:	601a      	str	r2, [r3, #0]
}
   2639c:	46c0      	nop			; (mov r8, r8)
   2639e:	46bd      	mov	sp, r7
   263a0:	b002      	add	sp, #8
   263a2:	bd80      	pop	{r7, pc}
   263a4:	e000e100 	.word	0xe000e100

000263a8 <system_interrupt_disable>:
{
   263a8:	b580      	push	{r7, lr}
   263aa:	b082      	sub	sp, #8
   263ac:	af00      	add	r7, sp, #0
   263ae:	0002      	movs	r2, r0
   263b0:	1dfb      	adds	r3, r7, #7
   263b2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   263b4:	4a07      	ldr	r2, [pc, #28]	; (263d4 <system_interrupt_disable+0x2c>)
   263b6:	1dfb      	adds	r3, r7, #7
   263b8:	781b      	ldrb	r3, [r3, #0]
   263ba:	0019      	movs	r1, r3
   263bc:	231f      	movs	r3, #31
   263be:	400b      	ands	r3, r1
   263c0:	2101      	movs	r1, #1
   263c2:	4099      	lsls	r1, r3
   263c4:	000b      	movs	r3, r1
   263c6:	0019      	movs	r1, r3
   263c8:	2380      	movs	r3, #128	; 0x80
   263ca:	50d1      	str	r1, [r2, r3]
}
   263cc:	46c0      	nop			; (mov r8, r8)
   263ce:	46bd      	mov	sp, r7
   263d0:	b002      	add	sp, #8
   263d2:	bd80      	pop	{r7, pc}
   263d4:	e000e100 	.word	0xe000e100

000263d8 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   263d8:	b580      	push	{r7, lr}
   263da:	b084      	sub	sp, #16
   263dc:	af00      	add	r7, sp, #0
   263de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   263e0:	687b      	ldr	r3, [r7, #4]
   263e2:	681b      	ldr	r3, [r3, #0]
   263e4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   263e6:	68fb      	ldr	r3, [r7, #12]
   263e8:	7a9b      	ldrb	r3, [r3, #10]
   263ea:	b2db      	uxtb	r3, r3
   263ec:	b25b      	sxtb	r3, r3
   263ee:	2b00      	cmp	r3, #0
   263f0:	da01      	bge.n	263f6 <rtc_calendar_is_syncing+0x1e>
                return true;
   263f2:	2301      	movs	r3, #1
   263f4:	e000      	b.n	263f8 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   263f6:	2300      	movs	r3, #0
}
   263f8:	0018      	movs	r0, r3
   263fa:	46bd      	mov	sp, r7
   263fc:	b004      	add	sp, #16
   263fe:	bd80      	pop	{r7, pc}

00026400 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26400:	b580      	push	{r7, lr}
   26402:	b084      	sub	sp, #16
   26404:	af00      	add	r7, sp, #0
   26406:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26408:	687b      	ldr	r3, [r7, #4]
   2640a:	681b      	ldr	r3, [r3, #0]
   2640c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   2640e:	2003      	movs	r0, #3
   26410:	4b0a      	ldr	r3, [pc, #40]	; (2643c <rtc_calendar_enable+0x3c>)
   26412:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26414:	46c0      	nop			; (mov r8, r8)
   26416:	687b      	ldr	r3, [r7, #4]
   26418:	0018      	movs	r0, r3
   2641a:	4b09      	ldr	r3, [pc, #36]	; (26440 <rtc_calendar_enable+0x40>)
   2641c:	4798      	blx	r3
   2641e:	1e03      	subs	r3, r0, #0
   26420:	d1f9      	bne.n	26416 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26422:	68fb      	ldr	r3, [r7, #12]
   26424:	881b      	ldrh	r3, [r3, #0]
   26426:	b29b      	uxth	r3, r3
   26428:	2202      	movs	r2, #2
   2642a:	4313      	orrs	r3, r2
   2642c:	b29a      	uxth	r2, r3
   2642e:	68fb      	ldr	r3, [r7, #12]
   26430:	801a      	strh	r2, [r3, #0]
}
   26432:	46c0      	nop			; (mov r8, r8)
   26434:	46bd      	mov	sp, r7
   26436:	b004      	add	sp, #16
   26438:	bd80      	pop	{r7, pc}
   2643a:	46c0      	nop			; (mov r8, r8)
   2643c:	0002637d 	.word	0x0002637d
   26440:	000263d9 	.word	0x000263d9

00026444 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26444:	b580      	push	{r7, lr}
   26446:	b084      	sub	sp, #16
   26448:	af00      	add	r7, sp, #0
   2644a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2644c:	687b      	ldr	r3, [r7, #4]
   2644e:	681b      	ldr	r3, [r3, #0]
   26450:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26452:	2003      	movs	r0, #3
   26454:	4b0d      	ldr	r3, [pc, #52]	; (2648c <rtc_calendar_disable+0x48>)
   26456:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26458:	46c0      	nop			; (mov r8, r8)
   2645a:	687b      	ldr	r3, [r7, #4]
   2645c:	0018      	movs	r0, r3
   2645e:	4b0c      	ldr	r3, [pc, #48]	; (26490 <rtc_calendar_disable+0x4c>)
   26460:	4798      	blx	r3
   26462:	1e03      	subs	r3, r0, #0
   26464:	d1f9      	bne.n	2645a <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26466:	68fb      	ldr	r3, [r7, #12]
   26468:	22c1      	movs	r2, #193	; 0xc1
   2646a:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   2646c:	68fb      	ldr	r3, [r7, #12]
   2646e:	22c1      	movs	r2, #193	; 0xc1
   26470:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   26472:	68fb      	ldr	r3, [r7, #12]
   26474:	881b      	ldrh	r3, [r3, #0]
   26476:	b29b      	uxth	r3, r3
   26478:	2202      	movs	r2, #2
   2647a:	4393      	bics	r3, r2
   2647c:	b29a      	uxth	r2, r3
   2647e:	68fb      	ldr	r3, [r7, #12]
   26480:	801a      	strh	r2, [r3, #0]
}
   26482:	46c0      	nop			; (mov r8, r8)
   26484:	46bd      	mov	sp, r7
   26486:	b004      	add	sp, #16
   26488:	bd80      	pop	{r7, pc}
   2648a:	46c0      	nop			; (mov r8, r8)
   2648c:	000263a9 	.word	0x000263a9
   26490:	000263d9 	.word	0x000263d9

00026494 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26494:	b580      	push	{r7, lr}
   26496:	b084      	sub	sp, #16
   26498:	af00      	add	r7, sp, #0
   2649a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2649c:	687b      	ldr	r3, [r7, #4]
   2649e:	681b      	ldr	r3, [r3, #0]
   264a0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   264a2:	687b      	ldr	r3, [r7, #4]
   264a4:	0018      	movs	r0, r3
   264a6:	4b0d      	ldr	r3, [pc, #52]	; (264dc <rtc_calendar_reset+0x48>)
   264a8:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   264aa:	687b      	ldr	r3, [r7, #4]
   264ac:	2200      	movs	r2, #0
   264ae:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   264b0:	687b      	ldr	r3, [r7, #4]
   264b2:	2200      	movs	r2, #0
   264b4:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   264b6:	46c0      	nop			; (mov r8, r8)
   264b8:	687b      	ldr	r3, [r7, #4]
   264ba:	0018      	movs	r0, r3
   264bc:	4b08      	ldr	r3, [pc, #32]	; (264e0 <rtc_calendar_reset+0x4c>)
   264be:	4798      	blx	r3
   264c0:	1e03      	subs	r3, r0, #0
   264c2:	d1f9      	bne.n	264b8 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   264c4:	68fb      	ldr	r3, [r7, #12]
   264c6:	881b      	ldrh	r3, [r3, #0]
   264c8:	b29b      	uxth	r3, r3
   264ca:	2201      	movs	r2, #1
   264cc:	4313      	orrs	r3, r2
   264ce:	b29a      	uxth	r2, r3
   264d0:	68fb      	ldr	r3, [r7, #12]
   264d2:	801a      	strh	r2, [r3, #0]
}
   264d4:	46c0      	nop			; (mov r8, r8)
   264d6:	46bd      	mov	sp, r7
   264d8:	b004      	add	sp, #16
   264da:	bd80      	pop	{r7, pc}
   264dc:	00026445 	.word	0x00026445
   264e0:	000263d9 	.word	0x000263d9

000264e4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   264e4:	b580      	push	{r7, lr}
   264e6:	b084      	sub	sp, #16
   264e8:	af00      	add	r7, sp, #0
   264ea:	6078      	str	r0, [r7, #4]
   264ec:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   264ee:	683b      	ldr	r3, [r7, #0]
   264f0:	88db      	ldrh	r3, [r3, #6]
   264f2:	001a      	movs	r2, r3
   264f4:	687b      	ldr	r3, [r7, #4]
   264f6:	88db      	ldrh	r3, [r3, #6]
   264f8:	1ad3      	subs	r3, r2, r3
   264fa:	069b      	lsls	r3, r3, #26
   264fc:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   264fe:	683b      	ldr	r3, [r7, #0]
   26500:	795b      	ldrb	r3, [r3, #5]
   26502:	059b      	lsls	r3, r3, #22
   26504:	001a      	movs	r2, r3
   26506:	68fb      	ldr	r3, [r7, #12]
   26508:	4313      	orrs	r3, r2
   2650a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   2650c:	683b      	ldr	r3, [r7, #0]
   2650e:	791b      	ldrb	r3, [r3, #4]
   26510:	045b      	lsls	r3, r3, #17
   26512:	001a      	movs	r2, r3
   26514:	68fb      	ldr	r3, [r7, #12]
   26516:	4313      	orrs	r3, r2
   26518:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2651a:	683b      	ldr	r3, [r7, #0]
   2651c:	789b      	ldrb	r3, [r3, #2]
   2651e:	031b      	lsls	r3, r3, #12
   26520:	001a      	movs	r2, r3
   26522:	68fb      	ldr	r3, [r7, #12]
   26524:	4313      	orrs	r3, r2
   26526:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26528:	687b      	ldr	r3, [r7, #4]
   2652a:	791b      	ldrb	r3, [r3, #4]
   2652c:	2201      	movs	r2, #1
   2652e:	4053      	eors	r3, r2
   26530:	b2db      	uxtb	r3, r3
   26532:	2b00      	cmp	r3, #0
   26534:	d008      	beq.n	26548 <rtc_calendar_time_to_register_value+0x64>
   26536:	683b      	ldr	r3, [r7, #0]
   26538:	78db      	ldrb	r3, [r3, #3]
   2653a:	2b00      	cmp	r3, #0
   2653c:	d004      	beq.n	26548 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   2653e:	68fb      	ldr	r3, [r7, #12]
   26540:	2280      	movs	r2, #128	; 0x80
   26542:	0252      	lsls	r2, r2, #9
   26544:	4313      	orrs	r3, r2
   26546:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26548:	683b      	ldr	r3, [r7, #0]
   2654a:	785b      	ldrb	r3, [r3, #1]
   2654c:	019b      	lsls	r3, r3, #6
   2654e:	001a      	movs	r2, r3
   26550:	68fb      	ldr	r3, [r7, #12]
   26552:	4313      	orrs	r3, r2
   26554:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26556:	683b      	ldr	r3, [r7, #0]
   26558:	781b      	ldrb	r3, [r3, #0]
   2655a:	001a      	movs	r2, r3
   2655c:	68fb      	ldr	r3, [r7, #12]
   2655e:	4313      	orrs	r3, r2
   26560:	60fb      	str	r3, [r7, #12]

	return register_value;
   26562:	68fb      	ldr	r3, [r7, #12]
}
   26564:	0018      	movs	r0, r3
   26566:	46bd      	mov	sp, r7
   26568:	b004      	add	sp, #16
   2656a:	bd80      	pop	{r7, pc}

0002656c <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   2656c:	b580      	push	{r7, lr}
   2656e:	b084      	sub	sp, #16
   26570:	af00      	add	r7, sp, #0
   26572:	60f8      	str	r0, [r7, #12]
   26574:	60b9      	str	r1, [r7, #8]
   26576:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26578:	68bb      	ldr	r3, [r7, #8]
   2657a:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   2657c:	b29a      	uxth	r2, r3
   2657e:	68fb      	ldr	r3, [r7, #12]
   26580:	88db      	ldrh	r3, [r3, #6]
   26582:	18d3      	adds	r3, r2, r3
   26584:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26586:	687b      	ldr	r3, [r7, #4]
   26588:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   2658a:	68bb      	ldr	r3, [r7, #8]
   2658c:	0d9b      	lsrs	r3, r3, #22
   2658e:	b2db      	uxtb	r3, r3
   26590:	220f      	movs	r2, #15
   26592:	4013      	ands	r3, r2
   26594:	b2da      	uxtb	r2, r3
   26596:	687b      	ldr	r3, [r7, #4]
   26598:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2659a:	68bb      	ldr	r3, [r7, #8]
   2659c:	0c5b      	lsrs	r3, r3, #17
   2659e:	b2db      	uxtb	r3, r3
   265a0:	221f      	movs	r2, #31
   265a2:	4013      	ands	r3, r2
   265a4:	b2da      	uxtb	r2, r3
   265a6:	687b      	ldr	r3, [r7, #4]
   265a8:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   265aa:	68fb      	ldr	r3, [r7, #12]
   265ac:	791b      	ldrb	r3, [r3, #4]
   265ae:	2b00      	cmp	r3, #0
   265b0:	d008      	beq.n	265c4 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   265b2:	68bb      	ldr	r3, [r7, #8]
   265b4:	0b1b      	lsrs	r3, r3, #12
   265b6:	b2db      	uxtb	r3, r3
   265b8:	221f      	movs	r2, #31
   265ba:	4013      	ands	r3, r2
   265bc:	b2da      	uxtb	r2, r3
   265be:	687b      	ldr	r3, [r7, #4]
   265c0:	709a      	strb	r2, [r3, #2]
   265c2:	e010      	b.n	265e6 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   265c4:	68bb      	ldr	r3, [r7, #8]
   265c6:	0b1b      	lsrs	r3, r3, #12
   265c8:	b2db      	uxtb	r3, r3
   265ca:	220f      	movs	r2, #15
   265cc:	4013      	ands	r3, r2
   265ce:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   265d0:	687b      	ldr	r3, [r7, #4]
   265d2:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   265d4:	68ba      	ldr	r2, [r7, #8]
   265d6:	2380      	movs	r3, #128	; 0x80
   265d8:	025b      	lsls	r3, r3, #9
   265da:	4013      	ands	r3, r2
   265dc:	1e5a      	subs	r2, r3, #1
   265de:	4193      	sbcs	r3, r2
   265e0:	b2da      	uxtb	r2, r3
   265e2:	687b      	ldr	r3, [r7, #4]
   265e4:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   265e6:	68bb      	ldr	r3, [r7, #8]
   265e8:	099b      	lsrs	r3, r3, #6
   265ea:	b2db      	uxtb	r3, r3
   265ec:	223f      	movs	r2, #63	; 0x3f
   265ee:	4013      	ands	r3, r2
   265f0:	b2da      	uxtb	r2, r3
   265f2:	687b      	ldr	r3, [r7, #4]
   265f4:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   265f6:	68bb      	ldr	r3, [r7, #8]
   265f8:	b2db      	uxtb	r3, r3
   265fa:	223f      	movs	r2, #63	; 0x3f
   265fc:	4013      	ands	r3, r2
   265fe:	b2da      	uxtb	r2, r3
   26600:	687b      	ldr	r3, [r7, #4]
   26602:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26604:	46c0      	nop			; (mov r8, r8)
   26606:	46bd      	mov	sp, r7
   26608:	b004      	add	sp, #16
   2660a:	bd80      	pop	{r7, pc}

0002660c <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   2660c:	b580      	push	{r7, lr}
   2660e:	b084      	sub	sp, #16
   26610:	af00      	add	r7, sp, #0
   26612:	6078      	str	r0, [r7, #4]
   26614:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26616:	687b      	ldr	r3, [r7, #4]
   26618:	681b      	ldr	r3, [r3, #0]
   2661a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   2661c:	683b      	ldr	r3, [r7, #0]
   2661e:	881a      	ldrh	r2, [r3, #0]
   26620:	230e      	movs	r3, #14
   26622:	18fb      	adds	r3, r7, r3
   26624:	2108      	movs	r1, #8
   26626:	430a      	orrs	r2, r1
   26628:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2662a:	683b      	ldr	r3, [r7, #0]
   2662c:	791b      	ldrb	r3, [r3, #4]
   2662e:	2201      	movs	r2, #1
   26630:	4053      	eors	r3, r2
   26632:	b2db      	uxtb	r3, r3
   26634:	2b00      	cmp	r3, #0
   26636:	d007      	beq.n	26648 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26638:	230e      	movs	r3, #14
   2663a:	18fb      	adds	r3, r7, r3
   2663c:	220e      	movs	r2, #14
   2663e:	18ba      	adds	r2, r7, r2
   26640:	8812      	ldrh	r2, [r2, #0]
   26642:	2140      	movs	r1, #64	; 0x40
   26644:	430a      	orrs	r2, r1
   26646:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26648:	683b      	ldr	r3, [r7, #0]
   2664a:	789b      	ldrb	r3, [r3, #2]
   2664c:	2b00      	cmp	r3, #0
   2664e:	d007      	beq.n	26660 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26650:	230e      	movs	r3, #14
   26652:	18fb      	adds	r3, r7, r3
   26654:	220e      	movs	r2, #14
   26656:	18ba      	adds	r2, r7, r2
   26658:	8812      	ldrh	r2, [r2, #0]
   2665a:	2180      	movs	r1, #128	; 0x80
   2665c:	430a      	orrs	r2, r1
   2665e:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   26660:	68bb      	ldr	r3, [r7, #8]
   26662:	220e      	movs	r2, #14
   26664:	18ba      	adds	r2, r7, r2
   26666:	8812      	ldrh	r2, [r2, #0]
   26668:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2666a:	683b      	ldr	r3, [r7, #0]
   2666c:	78db      	ldrb	r3, [r3, #3]
   2666e:	2b00      	cmp	r3, #0
   26670:	d008      	beq.n	26684 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   26672:	68bb      	ldr	r3, [r7, #8]
   26674:	885b      	ldrh	r3, [r3, #2]
   26676:	b29b      	uxth	r3, r3
   26678:	2280      	movs	r2, #128	; 0x80
   2667a:	01d2      	lsls	r2, r2, #7
   2667c:	4313      	orrs	r3, r2
   2667e:	b29a      	uxth	r2, r3
   26680:	68bb      	ldr	r3, [r7, #8]
   26682:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26684:	230d      	movs	r3, #13
   26686:	18fb      	adds	r3, r7, r3
   26688:	2200      	movs	r2, #0
   2668a:	701a      	strb	r2, [r3, #0]
   2668c:	e017      	b.n	266be <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   2668e:	230d      	movs	r3, #13
   26690:	18fb      	adds	r3, r7, r3
   26692:	781a      	ldrb	r2, [r3, #0]
   26694:	0013      	movs	r3, r2
   26696:	009b      	lsls	r3, r3, #2
   26698:	189b      	adds	r3, r3, r2
   2669a:	005b      	lsls	r3, r3, #1
   2669c:	3308      	adds	r3, #8
   2669e:	683a      	ldr	r2, [r7, #0]
   266a0:	18d1      	adds	r1, r2, r3
   266a2:	230d      	movs	r3, #13
   266a4:	18fb      	adds	r3, r7, r3
   266a6:	781a      	ldrb	r2, [r3, #0]
   266a8:	687b      	ldr	r3, [r7, #4]
   266aa:	0018      	movs	r0, r3
   266ac:	4b08      	ldr	r3, [pc, #32]	; (266d0 <_rtc_calendar_set_config+0xc4>)
   266ae:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   266b0:	230d      	movs	r3, #13
   266b2:	18fb      	adds	r3, r7, r3
   266b4:	781a      	ldrb	r2, [r3, #0]
   266b6:	230d      	movs	r3, #13
   266b8:	18fb      	adds	r3, r7, r3
   266ba:	3201      	adds	r2, #1
   266bc:	701a      	strb	r2, [r3, #0]
   266be:	230d      	movs	r3, #13
   266c0:	18fb      	adds	r3, r7, r3
   266c2:	781b      	ldrb	r3, [r3, #0]
   266c4:	2b00      	cmp	r3, #0
   266c6:	d0e2      	beq.n	2668e <_rtc_calendar_set_config+0x82>
	}
}
   266c8:	46c0      	nop			; (mov r8, r8)
   266ca:	46bd      	mov	sp, r7
   266cc:	b004      	add	sp, #16
   266ce:	bd80      	pop	{r7, pc}
   266d0:	000267f5 	.word	0x000267f5

000266d4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   266d4:	b580      	push	{r7, lr}
   266d6:	b086      	sub	sp, #24
   266d8:	af00      	add	r7, sp, #0
   266da:	60f8      	str	r0, [r7, #12]
   266dc:	60b9      	str	r1, [r7, #8]
   266de:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   266e0:	68fb      	ldr	r3, [r7, #12]
   266e2:	68ba      	ldr	r2, [r7, #8]
   266e4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   266e6:	2120      	movs	r1, #32
   266e8:	2000      	movs	r0, #0
   266ea:	4b18      	ldr	r3, [pc, #96]	; (2674c <rtc_calendar_init+0x78>)
   266ec:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   266ee:	2314      	movs	r3, #20
   266f0:	18fb      	adds	r3, r7, r3
   266f2:	0018      	movs	r0, r3
   266f4:	4b16      	ldr	r3, [pc, #88]	; (26750 <rtc_calendar_init+0x7c>)
   266f6:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   266f8:	2314      	movs	r3, #20
   266fa:	18fb      	adds	r3, r7, r3
   266fc:	2202      	movs	r2, #2
   266fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26700:	2314      	movs	r3, #20
   26702:	18fb      	adds	r3, r7, r3
   26704:	0019      	movs	r1, r3
   26706:	2004      	movs	r0, #4
   26708:	4b12      	ldr	r3, [pc, #72]	; (26754 <rtc_calendar_init+0x80>)
   2670a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   2670c:	2004      	movs	r0, #4
   2670e:	4b12      	ldr	r3, [pc, #72]	; (26758 <rtc_calendar_init+0x84>)
   26710:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26712:	68fb      	ldr	r3, [r7, #12]
   26714:	0018      	movs	r0, r3
   26716:	4b11      	ldr	r3, [pc, #68]	; (2675c <rtc_calendar_init+0x88>)
   26718:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2671a:	687b      	ldr	r3, [r7, #4]
   2671c:	791a      	ldrb	r2, [r3, #4]
   2671e:	68fb      	ldr	r3, [r7, #12]
   26720:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26722:	687b      	ldr	r3, [r7, #4]
   26724:	78da      	ldrb	r2, [r3, #3]
   26726:	68fb      	ldr	r3, [r7, #12]
   26728:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2672a:	687b      	ldr	r3, [r7, #4]
   2672c:	88da      	ldrh	r2, [r3, #6]
   2672e:	68fb      	ldr	r3, [r7, #12]
   26730:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26732:	4b0b      	ldr	r3, [pc, #44]	; (26760 <rtc_calendar_init+0x8c>)
   26734:	68fa      	ldr	r2, [r7, #12]
   26736:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26738:	687a      	ldr	r2, [r7, #4]
   2673a:	68fb      	ldr	r3, [r7, #12]
   2673c:	0011      	movs	r1, r2
   2673e:	0018      	movs	r0, r3
   26740:	4b08      	ldr	r3, [pc, #32]	; (26764 <rtc_calendar_init+0x90>)
   26742:	4798      	blx	r3
}
   26744:	46c0      	nop			; (mov r8, r8)
   26746:	46bd      	mov	sp, r7
   26748:	b006      	add	sp, #24
   2674a:	bd80      	pop	{r7, pc}
   2674c:	00026321 	.word	0x00026321
   26750:	00026309 	.word	0x00026309
   26754:	00029739 	.word	0x00029739
   26758:	0002977d 	.word	0x0002977d
   2675c:	00026495 	.word	0x00026495
   26760:	20005a08 	.word	0x20005a08
   26764:	0002660d 	.word	0x0002660d

00026768 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26768:	b580      	push	{r7, lr}
   2676a:	b084      	sub	sp, #16
   2676c:	af00      	add	r7, sp, #0
   2676e:	6078      	str	r0, [r7, #4]
   26770:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26772:	687b      	ldr	r3, [r7, #4]
   26774:	681b      	ldr	r3, [r3, #0]
   26776:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26778:	687b      	ldr	r3, [r7, #4]
   2677a:	795b      	ldrb	r3, [r3, #5]
   2677c:	2201      	movs	r2, #1
   2677e:	4053      	eors	r3, r2
   26780:	b2db      	uxtb	r3, r3
   26782:	2b00      	cmp	r3, #0
   26784:	d00a      	beq.n	2679c <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26786:	68fb      	ldr	r3, [r7, #12]
   26788:	4a16      	ldr	r2, [pc, #88]	; (267e4 <rtc_calendar_get_time+0x7c>)
   2678a:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   2678c:	46c0      	nop			; (mov r8, r8)
   2678e:	687b      	ldr	r3, [r7, #4]
   26790:	0018      	movs	r0, r3
   26792:	4b15      	ldr	r3, [pc, #84]	; (267e8 <rtc_calendar_get_time+0x80>)
   26794:	4798      	blx	r3
   26796:	1e03      	subs	r3, r0, #0
   26798:	d1f9      	bne.n	2678e <rtc_calendar_get_time+0x26>
   2679a:	e016      	b.n	267ca <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   2679c:	68fb      	ldr	r3, [r7, #12]
   2679e:	885b      	ldrh	r3, [r3, #2]
   267a0:	b29b      	uxth	r3, r3
   267a2:	001a      	movs	r2, r3
   267a4:	2380      	movs	r3, #128	; 0x80
   267a6:	01db      	lsls	r3, r3, #7
   267a8:	4013      	ands	r3, r2
   267aa:	d10e      	bne.n	267ca <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   267ac:	68fb      	ldr	r3, [r7, #12]
   267ae:	885b      	ldrh	r3, [r3, #2]
   267b0:	b29b      	uxth	r3, r3
   267b2:	4a0e      	ldr	r2, [pc, #56]	; (267ec <rtc_calendar_get_time+0x84>)
   267b4:	4313      	orrs	r3, r2
   267b6:	b29a      	uxth	r2, r3
   267b8:	68fb      	ldr	r3, [r7, #12]
   267ba:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   267bc:	46c0      	nop			; (mov r8, r8)
   267be:	687b      	ldr	r3, [r7, #4]
   267c0:	0018      	movs	r0, r3
   267c2:	4b09      	ldr	r3, [pc, #36]	; (267e8 <rtc_calendar_get_time+0x80>)
   267c4:	4798      	blx	r3
   267c6:	1e03      	subs	r3, r0, #0
   267c8:	d1f9      	bne.n	267be <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   267ca:	68fb      	ldr	r3, [r7, #12]
   267cc:	691b      	ldr	r3, [r3, #16]
   267ce:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   267d0:	683a      	ldr	r2, [r7, #0]
   267d2:	68b9      	ldr	r1, [r7, #8]
   267d4:	687b      	ldr	r3, [r7, #4]
   267d6:	0018      	movs	r0, r3
   267d8:	4b05      	ldr	r3, [pc, #20]	; (267f0 <rtc_calendar_get_time+0x88>)
   267da:	4798      	blx	r3
}
   267dc:	46c0      	nop			; (mov r8, r8)
   267de:	46bd      	mov	sp, r7
   267e0:	b004      	add	sp, #16
   267e2:	bd80      	pop	{r7, pc}
   267e4:	ffff8000 	.word	0xffff8000
   267e8:	000263d9 	.word	0x000263d9
   267ec:	ffffc000 	.word	0xffffc000
   267f0:	0002656d 	.word	0x0002656d

000267f4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   267f4:	b580      	push	{r7, lr}
   267f6:	b086      	sub	sp, #24
   267f8:	af00      	add	r7, sp, #0
   267fa:	60f8      	str	r0, [r7, #12]
   267fc:	60b9      	str	r1, [r7, #8]
   267fe:	1dfb      	adds	r3, r7, #7
   26800:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26802:	68fb      	ldr	r3, [r7, #12]
   26804:	681b      	ldr	r3, [r3, #0]
   26806:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26808:	1dfb      	adds	r3, r7, #7
   2680a:	781b      	ldrb	r3, [r3, #0]
   2680c:	2b01      	cmp	r3, #1
   2680e:	d901      	bls.n	26814 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26810:	2317      	movs	r3, #23
   26812:	e021      	b.n	26858 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26814:	68ba      	ldr	r2, [r7, #8]
   26816:	68fb      	ldr	r3, [r7, #12]
   26818:	0011      	movs	r1, r2
   2681a:	0018      	movs	r0, r3
   2681c:	4b10      	ldr	r3, [pc, #64]	; (26860 <rtc_calendar_set_alarm+0x6c>)
   2681e:	4798      	blx	r3
   26820:	0003      	movs	r3, r0
   26822:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26824:	46c0      	nop			; (mov r8, r8)
   26826:	68fb      	ldr	r3, [r7, #12]
   26828:	0018      	movs	r0, r3
   2682a:	4b0e      	ldr	r3, [pc, #56]	; (26864 <rtc_calendar_set_alarm+0x70>)
   2682c:	4798      	blx	r3
   2682e:	1e03      	subs	r3, r0, #0
   26830:	d1f9      	bne.n	26826 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26832:	1dfb      	adds	r3, r7, #7
   26834:	781a      	ldrb	r2, [r3, #0]
   26836:	697b      	ldr	r3, [r7, #20]
   26838:	3203      	adds	r2, #3
   2683a:	00d2      	lsls	r2, r2, #3
   2683c:	6939      	ldr	r1, [r7, #16]
   2683e:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26840:	1dfb      	adds	r3, r7, #7
   26842:	781b      	ldrb	r3, [r3, #0]
   26844:	68ba      	ldr	r2, [r7, #8]
   26846:	7a11      	ldrb	r1, [r2, #8]
   26848:	697a      	ldr	r2, [r7, #20]
   2684a:	3303      	adds	r3, #3
   2684c:	00db      	lsls	r3, r3, #3
   2684e:	18d3      	adds	r3, r2, r3
   26850:	3304      	adds	r3, #4
   26852:	1c0a      	adds	r2, r1, #0
   26854:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26856:	2300      	movs	r3, #0
}
   26858:	0018      	movs	r0, r3
   2685a:	46bd      	mov	sp, r7
   2685c:	b006      	add	sp, #24
   2685e:	bd80      	pop	{r7, pc}
   26860:	000264e5 	.word	0x000264e5
   26864:	000263d9 	.word	0x000263d9

00026868 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   26868:	b580      	push	{r7, lr}
   2686a:	b086      	sub	sp, #24
   2686c:	af00      	add	r7, sp, #0
   2686e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26870:	4b28      	ldr	r3, [pc, #160]	; (26914 <_rtc_interrupt_handler+0xac>)
   26872:	687a      	ldr	r2, [r7, #4]
   26874:	0092      	lsls	r2, r2, #2
   26876:	58d3      	ldr	r3, [r2, r3]
   26878:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2687a:	697b      	ldr	r3, [r7, #20]
   2687c:	681b      	ldr	r3, [r3, #0]
   2687e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26880:	230e      	movs	r3, #14
   26882:	18fb      	adds	r3, r7, r3
   26884:	697a      	ldr	r2, [r7, #20]
   26886:	8a52      	ldrh	r2, [r2, #18]
   26888:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2688a:	697b      	ldr	r3, [r7, #20]
   2688c:	8a1b      	ldrh	r3, [r3, #16]
   2688e:	b29a      	uxth	r2, r3
   26890:	230e      	movs	r3, #14
   26892:	18fb      	adds	r3, r7, r3
   26894:	210e      	movs	r1, #14
   26896:	1879      	adds	r1, r7, r1
   26898:	8809      	ldrh	r1, [r1, #0]
   2689a:	400a      	ands	r2, r1
   2689c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   2689e:	693b      	ldr	r3, [r7, #16]
   268a0:	7a1b      	ldrb	r3, [r3, #8]
   268a2:	b2da      	uxtb	r2, r3
   268a4:	230c      	movs	r3, #12
   268a6:	18fb      	adds	r3, r7, r3
   268a8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   268aa:	693b      	ldr	r3, [r7, #16]
   268ac:	79db      	ldrb	r3, [r3, #7]
   268ae:	b2db      	uxtb	r3, r3
   268b0:	b29a      	uxth	r2, r3
   268b2:	230c      	movs	r3, #12
   268b4:	18fb      	adds	r3, r7, r3
   268b6:	210c      	movs	r1, #12
   268b8:	1879      	adds	r1, r7, r1
   268ba:	8809      	ldrh	r1, [r1, #0]
   268bc:	400a      	ands	r2, r1
   268be:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   268c0:	230c      	movs	r3, #12
   268c2:	18fb      	adds	r3, r7, r3
   268c4:	881b      	ldrh	r3, [r3, #0]
   268c6:	2280      	movs	r2, #128	; 0x80
   268c8:	4013      	ands	r3, r2
   268ca:	d00c      	beq.n	268e6 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   268cc:	230e      	movs	r3, #14
   268ce:	18fb      	adds	r3, r7, r3
   268d0:	881b      	ldrh	r3, [r3, #0]
   268d2:	2202      	movs	r2, #2
   268d4:	4013      	ands	r3, r2
   268d6:	d002      	beq.n	268de <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   268d8:	697b      	ldr	r3, [r7, #20]
   268da:	68db      	ldr	r3, [r3, #12]
   268dc:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   268de:	693b      	ldr	r3, [r7, #16]
   268e0:	2280      	movs	r2, #128	; 0x80
   268e2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   268e4:	e011      	b.n	2690a <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   268e6:	230c      	movs	r3, #12
   268e8:	18fb      	adds	r3, r7, r3
   268ea:	881b      	ldrh	r3, [r3, #0]
   268ec:	2201      	movs	r2, #1
   268ee:	4013      	ands	r3, r2
   268f0:	d00b      	beq.n	2690a <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   268f2:	230e      	movs	r3, #14
   268f4:	18fb      	adds	r3, r7, r3
   268f6:	881b      	ldrh	r3, [r3, #0]
   268f8:	2201      	movs	r2, #1
   268fa:	4013      	ands	r3, r2
   268fc:	d002      	beq.n	26904 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   268fe:	697b      	ldr	r3, [r7, #20]
   26900:	689b      	ldr	r3, [r3, #8]
   26902:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26904:	693b      	ldr	r3, [r7, #16]
   26906:	2201      	movs	r2, #1
   26908:	721a      	strb	r2, [r3, #8]
}
   2690a:	46c0      	nop			; (mov r8, r8)
   2690c:	46bd      	mov	sp, r7
   2690e:	b006      	add	sp, #24
   26910:	bd80      	pop	{r7, pc}
   26912:	46c0      	nop			; (mov r8, r8)
   26914:	20005a08 	.word	0x20005a08

00026918 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26918:	b580      	push	{r7, lr}
   2691a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   2691c:	2000      	movs	r0, #0
   2691e:	4b02      	ldr	r3, [pc, #8]	; (26928 <RTC_Handler+0x10>)
   26920:	4798      	blx	r3
}
   26922:	46c0      	nop			; (mov r8, r8)
   26924:	46bd      	mov	sp, r7
   26926:	bd80      	pop	{r7, pc}
   26928:	00026869 	.word	0x00026869

0002692c <system_gclk_chan_get_config_defaults>:
{
   2692c:	b580      	push	{r7, lr}
   2692e:	b082      	sub	sp, #8
   26930:	af00      	add	r7, sp, #0
   26932:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26934:	687b      	ldr	r3, [r7, #4]
   26936:	2200      	movs	r2, #0
   26938:	701a      	strb	r2, [r3, #0]
}
   2693a:	46c0      	nop			; (mov r8, r8)
   2693c:	46bd      	mov	sp, r7
   2693e:	b002      	add	sp, #8
   26940:	bd80      	pop	{r7, pc}

00026942 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26942:	b5f0      	push	{r4, r5, r6, r7, lr}
   26944:	b08d      	sub	sp, #52	; 0x34
   26946:	af00      	add	r7, sp, #0
   26948:	60b8      	str	r0, [r7, #8]
   2694a:	60f9      	str	r1, [r7, #12]
   2694c:	603a      	str	r2, [r7, #0]
   2694e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26950:	2300      	movs	r3, #0
   26952:	2400      	movs	r4, #0
   26954:	623b      	str	r3, [r7, #32]
   26956:	627c      	str	r4, [r7, #36]	; 0x24
   26958:	2300      	movs	r3, #0
   2695a:	2400      	movs	r4, #0
   2695c:	61bb      	str	r3, [r7, #24]
   2695e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26960:	233f      	movs	r3, #63	; 0x3f
   26962:	62fb      	str	r3, [r7, #44]	; 0x2c
   26964:	e053      	b.n	26a0e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26968:	3b20      	subs	r3, #32
   2696a:	2b00      	cmp	r3, #0
   2696c:	db04      	blt.n	26978 <long_division+0x36>
   2696e:	2201      	movs	r2, #1
   26970:	409a      	lsls	r2, r3
   26972:	0013      	movs	r3, r2
   26974:	617b      	str	r3, [r7, #20]
   26976:	e00b      	b.n	26990 <long_division+0x4e>
   26978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2697a:	2220      	movs	r2, #32
   2697c:	1ad3      	subs	r3, r2, r3
   2697e:	2201      	movs	r2, #1
   26980:	40da      	lsrs	r2, r3
   26982:	0013      	movs	r3, r2
   26984:	2100      	movs	r1, #0
   26986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26988:	4091      	lsls	r1, r2
   2698a:	000a      	movs	r2, r1
   2698c:	4313      	orrs	r3, r2
   2698e:	617b      	str	r3, [r7, #20]
   26990:	2201      	movs	r2, #1
   26992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26994:	409a      	lsls	r2, r3
   26996:	0013      	movs	r3, r2
   26998:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2699a:	69bb      	ldr	r3, [r7, #24]
   2699c:	69fc      	ldr	r4, [r7, #28]
   2699e:	18db      	adds	r3, r3, r3
   269a0:	4164      	adcs	r4, r4
   269a2:	61bb      	str	r3, [r7, #24]
   269a4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   269a6:	68bb      	ldr	r3, [r7, #8]
   269a8:	693a      	ldr	r2, [r7, #16]
   269aa:	401a      	ands	r2, r3
   269ac:	0015      	movs	r5, r2
   269ae:	68fb      	ldr	r3, [r7, #12]
   269b0:	697a      	ldr	r2, [r7, #20]
   269b2:	401a      	ands	r2, r3
   269b4:	0016      	movs	r6, r2
   269b6:	002b      	movs	r3, r5
   269b8:	4333      	orrs	r3, r6
   269ba:	d007      	beq.n	269cc <long_division+0x8a>
			r |= 0x01;
   269bc:	69bb      	ldr	r3, [r7, #24]
   269be:	2201      	movs	r2, #1
   269c0:	4313      	orrs	r3, r2
   269c2:	61bb      	str	r3, [r7, #24]
   269c4:	69fb      	ldr	r3, [r7, #28]
   269c6:	2200      	movs	r2, #0
   269c8:	4313      	orrs	r3, r2
   269ca:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   269cc:	687a      	ldr	r2, [r7, #4]
   269ce:	69fb      	ldr	r3, [r7, #28]
   269d0:	429a      	cmp	r2, r3
   269d2:	d819      	bhi.n	26a08 <long_division+0xc6>
   269d4:	687a      	ldr	r2, [r7, #4]
   269d6:	69fb      	ldr	r3, [r7, #28]
   269d8:	429a      	cmp	r2, r3
   269da:	d103      	bne.n	269e4 <long_division+0xa2>
   269dc:	683a      	ldr	r2, [r7, #0]
   269de:	69bb      	ldr	r3, [r7, #24]
   269e0:	429a      	cmp	r2, r3
   269e2:	d811      	bhi.n	26a08 <long_division+0xc6>
			r = r - d;
   269e4:	69b9      	ldr	r1, [r7, #24]
   269e6:	69fa      	ldr	r2, [r7, #28]
   269e8:	683b      	ldr	r3, [r7, #0]
   269ea:	687c      	ldr	r4, [r7, #4]
   269ec:	1ac9      	subs	r1, r1, r3
   269ee:	41a2      	sbcs	r2, r4
   269f0:	000b      	movs	r3, r1
   269f2:	0014      	movs	r4, r2
   269f4:	61bb      	str	r3, [r7, #24]
   269f6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   269f8:	6a3a      	ldr	r2, [r7, #32]
   269fa:	693b      	ldr	r3, [r7, #16]
   269fc:	4313      	orrs	r3, r2
   269fe:	623b      	str	r3, [r7, #32]
   26a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26a02:	697b      	ldr	r3, [r7, #20]
   26a04:	4313      	orrs	r3, r2
   26a06:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26a0a:	3b01      	subs	r3, #1
   26a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   26a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26a10:	2b00      	cmp	r3, #0
   26a12:	daa8      	bge.n	26966 <long_division+0x24>
		}
	}

	return q;
   26a14:	6a3b      	ldr	r3, [r7, #32]
   26a16:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26a18:	0018      	movs	r0, r3
   26a1a:	0021      	movs	r1, r4
   26a1c:	46bd      	mov	sp, r7
   26a1e:	b00d      	add	sp, #52	; 0x34
   26a20:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026a22 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26a22:	b580      	push	{r7, lr}
   26a24:	b086      	sub	sp, #24
   26a26:	af00      	add	r7, sp, #0
   26a28:	60f8      	str	r0, [r7, #12]
   26a2a:	60b9      	str	r1, [r7, #8]
   26a2c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26a2e:	2316      	movs	r3, #22
   26a30:	18fb      	adds	r3, r7, r3
   26a32:	2200      	movs	r2, #0
   26a34:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26a36:	68bb      	ldr	r3, [r7, #8]
   26a38:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26a3a:	68bb      	ldr	r3, [r7, #8]
   26a3c:	085a      	lsrs	r2, r3, #1
   26a3e:	68fb      	ldr	r3, [r7, #12]
   26a40:	429a      	cmp	r2, r3
   26a42:	d201      	bcs.n	26a48 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26a44:	2340      	movs	r3, #64	; 0x40
   26a46:	e026      	b.n	26a96 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26a48:	68bb      	ldr	r3, [r7, #8]
   26a4a:	085b      	lsrs	r3, r3, #1
   26a4c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26a4e:	e00a      	b.n	26a66 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26a50:	693a      	ldr	r2, [r7, #16]
   26a52:	68fb      	ldr	r3, [r7, #12]
   26a54:	1ad3      	subs	r3, r2, r3
   26a56:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26a58:	2316      	movs	r3, #22
   26a5a:	18fb      	adds	r3, r7, r3
   26a5c:	881a      	ldrh	r2, [r3, #0]
   26a5e:	2316      	movs	r3, #22
   26a60:	18fb      	adds	r3, r7, r3
   26a62:	3201      	adds	r2, #1
   26a64:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   26a66:	693a      	ldr	r2, [r7, #16]
   26a68:	68fb      	ldr	r3, [r7, #12]
   26a6a:	429a      	cmp	r2, r3
   26a6c:	d2f0      	bcs.n	26a50 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26a6e:	2316      	movs	r3, #22
   26a70:	18fb      	adds	r3, r7, r3
   26a72:	2216      	movs	r2, #22
   26a74:	18ba      	adds	r2, r7, r2
   26a76:	8812      	ldrh	r2, [r2, #0]
   26a78:	3a01      	subs	r2, #1
   26a7a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26a7c:	2316      	movs	r3, #22
   26a7e:	18fb      	adds	r3, r7, r3
   26a80:	881b      	ldrh	r3, [r3, #0]
   26a82:	2bff      	cmp	r3, #255	; 0xff
   26a84:	d901      	bls.n	26a8a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26a86:	2340      	movs	r3, #64	; 0x40
   26a88:	e005      	b.n	26a96 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   26a8a:	687b      	ldr	r3, [r7, #4]
   26a8c:	2216      	movs	r2, #22
   26a8e:	18ba      	adds	r2, r7, r2
   26a90:	8812      	ldrh	r2, [r2, #0]
   26a92:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26a94:	2300      	movs	r3, #0
	}
}
   26a96:	0018      	movs	r0, r3
   26a98:	46bd      	mov	sp, r7
   26a9a:	b006      	add	sp, #24
   26a9c:	bd80      	pop	{r7, pc}
	...

00026aa0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   26aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   26aa2:	b0a1      	sub	sp, #132	; 0x84
   26aa4:	af00      	add	r7, sp, #0
   26aa6:	64f8      	str	r0, [r7, #76]	; 0x4c
   26aa8:	64b9      	str	r1, [r7, #72]	; 0x48
   26aaa:	647a      	str	r2, [r7, #68]	; 0x44
   26aac:	2243      	movs	r2, #67	; 0x43
   26aae:	18ba      	adds	r2, r7, r2
   26ab0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   26ab2:	2300      	movs	r3, #0
   26ab4:	2400      	movs	r4, #0
   26ab6:	673b      	str	r3, [r7, #112]	; 0x70
   26ab8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   26aba:	2300      	movs	r3, #0
   26abc:	2400      	movs	r4, #0
   26abe:	66bb      	str	r3, [r7, #104]	; 0x68
   26ac0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26ac2:	2300      	movs	r3, #0
   26ac4:	2400      	movs	r4, #0
   26ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   26ac8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   26aca:	2300      	movs	r3, #0
   26acc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26ace:	2358      	movs	r3, #88	; 0x58
   26ad0:	2240      	movs	r2, #64	; 0x40
   26ad2:	4694      	mov	ip, r2
   26ad4:	44bc      	add	ip, r7
   26ad6:	4463      	add	r3, ip
   26ad8:	781a      	ldrb	r2, [r3, #0]
   26ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26adc:	435a      	muls	r2, r3
   26ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26ae0:	429a      	cmp	r2, r3
   26ae2:	d901      	bls.n	26ae8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26ae4:	2340      	movs	r3, #64	; 0x40
   26ae6:	e0b3      	b.n	26c50 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   26ae8:	2343      	movs	r3, #67	; 0x43
   26aea:	18fb      	adds	r3, r7, r3
   26aec:	781b      	ldrb	r3, [r3, #0]
   26aee:	2b00      	cmp	r3, #0
   26af0:	d13d      	bne.n	26b6e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26af2:	2358      	movs	r3, #88	; 0x58
   26af4:	2240      	movs	r2, #64	; 0x40
   26af6:	4694      	mov	ip, r2
   26af8:	44bc      	add	ip, r7
   26afa:	4463      	add	r3, ip
   26afc:	781b      	ldrb	r3, [r3, #0]
   26afe:	b2db      	uxtb	r3, r3
   26b00:	613b      	str	r3, [r7, #16]
   26b02:	2300      	movs	r3, #0
   26b04:	617b      	str	r3, [r7, #20]
   26b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26b08:	60bb      	str	r3, [r7, #8]
   26b0a:	2300      	movs	r3, #0
   26b0c:	60fb      	str	r3, [r7, #12]
   26b0e:	4c52      	ldr	r4, [pc, #328]	; (26c58 <_sercom_get_async_baud_val+0x1b8>)
   26b10:	68ba      	ldr	r2, [r7, #8]
   26b12:	68fb      	ldr	r3, [r7, #12]
   26b14:	6938      	ldr	r0, [r7, #16]
   26b16:	6979      	ldr	r1, [r7, #20]
   26b18:	47a0      	blx	r4
   26b1a:	0003      	movs	r3, r0
   26b1c:	000c      	movs	r4, r1
   26b1e:	001b      	movs	r3, r3
   26b20:	65fb      	str	r3, [r7, #92]	; 0x5c
   26b22:	2300      	movs	r3, #0
   26b24:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26b28:	603b      	str	r3, [r7, #0]
   26b2a:	2300      	movs	r3, #0
   26b2c:	607b      	str	r3, [r7, #4]
   26b2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26b30:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26b32:	683a      	ldr	r2, [r7, #0]
   26b34:	687b      	ldr	r3, [r7, #4]
   26b36:	4c49      	ldr	r4, [pc, #292]	; (26c5c <_sercom_get_async_baud_val+0x1bc>)
   26b38:	47a0      	blx	r4
   26b3a:	0003      	movs	r3, r0
   26b3c:	000c      	movs	r4, r1
   26b3e:	673b      	str	r3, [r7, #112]	; 0x70
   26b40:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26b42:	2100      	movs	r1, #0
   26b44:	2201      	movs	r2, #1
   26b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26b48:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   26b4a:	1ac9      	subs	r1, r1, r3
   26b4c:	41a2      	sbcs	r2, r4
   26b4e:	000b      	movs	r3, r1
   26b50:	0014      	movs	r4, r2
   26b52:	66bb      	str	r3, [r7, #104]	; 0x68
   26b54:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26b58:	0c1b      	lsrs	r3, r3, #16
   26b5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26b5c:	0416      	lsls	r6, r2, #16
   26b5e:	431e      	orrs	r6, r3
   26b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26b62:	041d      	lsls	r5, r3, #16
   26b64:	0033      	movs	r3, r6
   26b66:	67bb      	str	r3, [r7, #120]	; 0x78
   26b68:	2300      	movs	r3, #0
   26b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   26b6c:	e06a      	b.n	26c44 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26b6e:	2343      	movs	r3, #67	; 0x43
   26b70:	18fb      	adds	r3, r7, r3
   26b72:	781b      	ldrb	r3, [r3, #0]
   26b74:	2b01      	cmp	r3, #1
   26b76:	d165      	bne.n	26c44 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   26b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26b7a:	633b      	str	r3, [r7, #48]	; 0x30
   26b7c:	2300      	movs	r3, #0
   26b7e:	637b      	str	r3, [r7, #52]	; 0x34
   26b80:	2358      	movs	r3, #88	; 0x58
   26b82:	2240      	movs	r2, #64	; 0x40
   26b84:	4694      	mov	ip, r2
   26b86:	44bc      	add	ip, r7
   26b88:	4463      	add	r3, ip
   26b8a:	781b      	ldrb	r3, [r3, #0]
   26b8c:	b2db      	uxtb	r3, r3
   26b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   26b90:	2300      	movs	r3, #0
   26b92:	62fb      	str	r3, [r7, #44]	; 0x2c
   26b94:	4c30      	ldr	r4, [pc, #192]	; (26c58 <_sercom_get_async_baud_val+0x1b8>)
   26b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
   26b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26b9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   26b9e:	47a0      	blx	r4
   26ba0:	0003      	movs	r3, r0
   26ba2:	000c      	movs	r4, r1
   26ba4:	65bb      	str	r3, [r7, #88]	; 0x58
   26ba6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   26ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26baa:	623b      	str	r3, [r7, #32]
   26bac:	2300      	movs	r3, #0
   26bae:	627b      	str	r3, [r7, #36]	; 0x24
   26bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26bb2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26bb4:	001a      	movs	r2, r3
   26bb6:	0023      	movs	r3, r4
   26bb8:	6a38      	ldr	r0, [r7, #32]
   26bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26bbc:	4c27      	ldr	r4, [pc, #156]	; (26c5c <_sercom_get_async_baud_val+0x1bc>)
   26bbe:	47a0      	blx	r4
   26bc0:	0003      	movs	r3, r0
   26bc2:	000c      	movs	r4, r1
   26bc4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   26bc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   26bc8:	2380      	movs	r3, #128	; 0x80
   26bca:	019b      	lsls	r3, r3, #6
   26bcc:	429a      	cmp	r2, r3
   26bce:	d901      	bls.n	26bd4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26bd0:	2340      	movs	r3, #64	; 0x40
   26bd2:	e03d      	b.n	26c50 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26bd6:	61bb      	str	r3, [r7, #24]
   26bd8:	2300      	movs	r3, #0
   26bda:	61fb      	str	r3, [r7, #28]
   26bdc:	69b9      	ldr	r1, [r7, #24]
   26bde:	69fa      	ldr	r2, [r7, #28]
   26be0:	000b      	movs	r3, r1
   26be2:	0f5b      	lsrs	r3, r3, #29
   26be4:	0010      	movs	r0, r2
   26be6:	00c0      	lsls	r0, r0, #3
   26be8:	63f8      	str	r0, [r7, #60]	; 0x3c
   26bea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   26bec:	4318      	orrs	r0, r3
   26bee:	63f8      	str	r0, [r7, #60]	; 0x3c
   26bf0:	000b      	movs	r3, r1
   26bf2:	00db      	lsls	r3, r3, #3
   26bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   26bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26bf8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26bfa:	001a      	movs	r2, r3
   26bfc:	0023      	movs	r3, r4
   26bfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26c02:	4c16      	ldr	r4, [pc, #88]	; (26c5c <_sercom_get_async_baud_val+0x1bc>)
   26c04:	47a0      	blx	r4
   26c06:	0003      	movs	r3, r0
   26c08:	000c      	movs	r4, r1
   26c0a:	65bb      	str	r3, [r7, #88]	; 0x58
   26c0c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   26c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26c10:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26c12:	b2d9      	uxtb	r1, r3
   26c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26c16:	b2db      	uxtb	r3, r3
   26c18:	00db      	lsls	r3, r3, #3
   26c1a:	b2da      	uxtb	r2, r3
   26c1c:	2317      	movs	r3, #23
   26c1e:	2040      	movs	r0, #64	; 0x40
   26c20:	4684      	mov	ip, r0
   26c22:	44bc      	add	ip, r7
   26c24:	4463      	add	r3, ip
   26c26:	1a8a      	subs	r2, r1, r2
   26c28:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   26c2a:	2317      	movs	r3, #23
   26c2c:	2240      	movs	r2, #64	; 0x40
   26c2e:	4694      	mov	ip, r2
   26c30:	44bc      	add	ip, r7
   26c32:	4463      	add	r3, ip
   26c34:	781b      	ldrb	r3, [r3, #0]
   26c36:	035b      	lsls	r3, r3, #13
   26c38:	001a      	movs	r2, r3
   26c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26c3c:	4313      	orrs	r3, r2
   26c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   26c40:	2300      	movs	r3, #0
   26c42:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   26c46:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   26c48:	b29a      	uxth	r2, r3
   26c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26c4c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   26c4e:	2300      	movs	r3, #0
}
   26c50:	0018      	movs	r0, r3
   26c52:	46bd      	mov	sp, r7
   26c54:	b021      	add	sp, #132	; 0x84
   26c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26c58:	00032531 	.word	0x00032531
   26c5c:	00026943 	.word	0x00026943

00026c60 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26c60:	b580      	push	{r7, lr}
   26c62:	b084      	sub	sp, #16
   26c64:	af00      	add	r7, sp, #0
   26c66:	0002      	movs	r2, r0
   26c68:	1dfb      	adds	r3, r7, #7
   26c6a:	701a      	strb	r2, [r3, #0]
   26c6c:	1dbb      	adds	r3, r7, #6
   26c6e:	1c0a      	adds	r2, r1, #0
   26c70:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   26c72:	4b1a      	ldr	r3, [pc, #104]	; (26cdc <sercom_set_gclk_generator+0x7c>)
   26c74:	781b      	ldrb	r3, [r3, #0]
   26c76:	2201      	movs	r2, #1
   26c78:	4053      	eors	r3, r2
   26c7a:	b2db      	uxtb	r3, r3
   26c7c:	2b00      	cmp	r3, #0
   26c7e:	d103      	bne.n	26c88 <sercom_set_gclk_generator+0x28>
   26c80:	1dbb      	adds	r3, r7, #6
   26c82:	781b      	ldrb	r3, [r3, #0]
   26c84:	2b00      	cmp	r3, #0
   26c86:	d01b      	beq.n	26cc0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26c88:	230c      	movs	r3, #12
   26c8a:	18fb      	adds	r3, r7, r3
   26c8c:	0018      	movs	r0, r3
   26c8e:	4b14      	ldr	r3, [pc, #80]	; (26ce0 <sercom_set_gclk_generator+0x80>)
   26c90:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   26c92:	230c      	movs	r3, #12
   26c94:	18fb      	adds	r3, r7, r3
   26c96:	1dfa      	adds	r2, r7, #7
   26c98:	7812      	ldrb	r2, [r2, #0]
   26c9a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   26c9c:	230c      	movs	r3, #12
   26c9e:	18fb      	adds	r3, r7, r3
   26ca0:	0019      	movs	r1, r3
   26ca2:	2013      	movs	r0, #19
   26ca4:	4b0f      	ldr	r3, [pc, #60]	; (26ce4 <sercom_set_gclk_generator+0x84>)
   26ca6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   26ca8:	2013      	movs	r0, #19
   26caa:	4b0f      	ldr	r3, [pc, #60]	; (26ce8 <sercom_set_gclk_generator+0x88>)
   26cac:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   26cae:	4b0b      	ldr	r3, [pc, #44]	; (26cdc <sercom_set_gclk_generator+0x7c>)
   26cb0:	1dfa      	adds	r2, r7, #7
   26cb2:	7812      	ldrb	r2, [r2, #0]
   26cb4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   26cb6:	4b09      	ldr	r3, [pc, #36]	; (26cdc <sercom_set_gclk_generator+0x7c>)
   26cb8:	2201      	movs	r2, #1
   26cba:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   26cbc:	2300      	movs	r3, #0
   26cbe:	e008      	b.n	26cd2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   26cc0:	4b06      	ldr	r3, [pc, #24]	; (26cdc <sercom_set_gclk_generator+0x7c>)
   26cc2:	785b      	ldrb	r3, [r3, #1]
   26cc4:	1dfa      	adds	r2, r7, #7
   26cc6:	7812      	ldrb	r2, [r2, #0]
   26cc8:	429a      	cmp	r2, r3
   26cca:	d101      	bne.n	26cd0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   26ccc:	2300      	movs	r3, #0
   26cce:	e000      	b.n	26cd2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   26cd0:	231d      	movs	r3, #29
}
   26cd2:	0018      	movs	r0, r3
   26cd4:	46bd      	mov	sp, r7
   26cd6:	b004      	add	sp, #16
   26cd8:	bd80      	pop	{r7, pc}
   26cda:	46c0      	nop			; (mov r8, r8)
   26cdc:	2000413c 	.word	0x2000413c
   26ce0:	0002692d 	.word	0x0002692d
   26ce4:	00029739 	.word	0x00029739
   26ce8:	0002977d 	.word	0x0002977d

00026cec <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   26cec:	b580      	push	{r7, lr}
   26cee:	b082      	sub	sp, #8
   26cf0:	af00      	add	r7, sp, #0
   26cf2:	6078      	str	r0, [r7, #4]
   26cf4:	000a      	movs	r2, r1
   26cf6:	1cfb      	adds	r3, r7, #3
   26cf8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   26cfa:	687b      	ldr	r3, [r7, #4]
   26cfc:	4a4d      	ldr	r2, [pc, #308]	; (26e34 <_sercom_get_default_pad+0x148>)
   26cfe:	4293      	cmp	r3, r2
   26d00:	d03f      	beq.n	26d82 <_sercom_get_default_pad+0x96>
   26d02:	4a4c      	ldr	r2, [pc, #304]	; (26e34 <_sercom_get_default_pad+0x148>)
   26d04:	4293      	cmp	r3, r2
   26d06:	d806      	bhi.n	26d16 <_sercom_get_default_pad+0x2a>
   26d08:	4a4b      	ldr	r2, [pc, #300]	; (26e38 <_sercom_get_default_pad+0x14c>)
   26d0a:	4293      	cmp	r3, r2
   26d0c:	d00f      	beq.n	26d2e <_sercom_get_default_pad+0x42>
   26d0e:	4a4b      	ldr	r2, [pc, #300]	; (26e3c <_sercom_get_default_pad+0x150>)
   26d10:	4293      	cmp	r3, r2
   26d12:	d021      	beq.n	26d58 <_sercom_get_default_pad+0x6c>
   26d14:	e089      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26d16:	4a4a      	ldr	r2, [pc, #296]	; (26e40 <_sercom_get_default_pad+0x154>)
   26d18:	4293      	cmp	r3, r2
   26d1a:	d100      	bne.n	26d1e <_sercom_get_default_pad+0x32>
   26d1c:	e05b      	b.n	26dd6 <_sercom_get_default_pad+0xea>
   26d1e:	4a49      	ldr	r2, [pc, #292]	; (26e44 <_sercom_get_default_pad+0x158>)
   26d20:	4293      	cmp	r3, r2
   26d22:	d100      	bne.n	26d26 <_sercom_get_default_pad+0x3a>
   26d24:	e06c      	b.n	26e00 <_sercom_get_default_pad+0x114>
   26d26:	4a48      	ldr	r2, [pc, #288]	; (26e48 <_sercom_get_default_pad+0x15c>)
   26d28:	4293      	cmp	r3, r2
   26d2a:	d03f      	beq.n	26dac <_sercom_get_default_pad+0xc0>
   26d2c:	e07d      	b.n	26e2a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   26d2e:	1cfb      	adds	r3, r7, #3
   26d30:	781b      	ldrb	r3, [r3, #0]
   26d32:	2b01      	cmp	r3, #1
   26d34:	d00a      	beq.n	26d4c <_sercom_get_default_pad+0x60>
   26d36:	dc02      	bgt.n	26d3e <_sercom_get_default_pad+0x52>
   26d38:	2b00      	cmp	r3, #0
   26d3a:	d005      	beq.n	26d48 <_sercom_get_default_pad+0x5c>
   26d3c:	e075      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26d3e:	2b02      	cmp	r3, #2
   26d40:	d006      	beq.n	26d50 <_sercom_get_default_pad+0x64>
   26d42:	2b03      	cmp	r3, #3
   26d44:	d006      	beq.n	26d54 <_sercom_get_default_pad+0x68>
   26d46:	e070      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26d48:	4b40      	ldr	r3, [pc, #256]	; (26e4c <_sercom_get_default_pad+0x160>)
   26d4a:	e06f      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d4c:	4b40      	ldr	r3, [pc, #256]	; (26e50 <_sercom_get_default_pad+0x164>)
   26d4e:	e06d      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d50:	4b40      	ldr	r3, [pc, #256]	; (26e54 <_sercom_get_default_pad+0x168>)
   26d52:	e06b      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d54:	4b40      	ldr	r3, [pc, #256]	; (26e58 <_sercom_get_default_pad+0x16c>)
   26d56:	e069      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d58:	1cfb      	adds	r3, r7, #3
   26d5a:	781b      	ldrb	r3, [r3, #0]
   26d5c:	2b01      	cmp	r3, #1
   26d5e:	d00a      	beq.n	26d76 <_sercom_get_default_pad+0x8a>
   26d60:	dc02      	bgt.n	26d68 <_sercom_get_default_pad+0x7c>
   26d62:	2b00      	cmp	r3, #0
   26d64:	d005      	beq.n	26d72 <_sercom_get_default_pad+0x86>
   26d66:	e060      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26d68:	2b02      	cmp	r3, #2
   26d6a:	d006      	beq.n	26d7a <_sercom_get_default_pad+0x8e>
   26d6c:	2b03      	cmp	r3, #3
   26d6e:	d006      	beq.n	26d7e <_sercom_get_default_pad+0x92>
   26d70:	e05b      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26d72:	2303      	movs	r3, #3
   26d74:	e05a      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d76:	4b39      	ldr	r3, [pc, #228]	; (26e5c <_sercom_get_default_pad+0x170>)
   26d78:	e058      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d7a:	4b39      	ldr	r3, [pc, #228]	; (26e60 <_sercom_get_default_pad+0x174>)
   26d7c:	e056      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d7e:	4b39      	ldr	r3, [pc, #228]	; (26e64 <_sercom_get_default_pad+0x178>)
   26d80:	e054      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26d82:	1cfb      	adds	r3, r7, #3
   26d84:	781b      	ldrb	r3, [r3, #0]
   26d86:	2b01      	cmp	r3, #1
   26d88:	d00a      	beq.n	26da0 <_sercom_get_default_pad+0xb4>
   26d8a:	dc02      	bgt.n	26d92 <_sercom_get_default_pad+0xa6>
   26d8c:	2b00      	cmp	r3, #0
   26d8e:	d005      	beq.n	26d9c <_sercom_get_default_pad+0xb0>
   26d90:	e04b      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26d92:	2b02      	cmp	r3, #2
   26d94:	d006      	beq.n	26da4 <_sercom_get_default_pad+0xb8>
   26d96:	2b03      	cmp	r3, #3
   26d98:	d006      	beq.n	26da8 <_sercom_get_default_pad+0xbc>
   26d9a:	e046      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26d9c:	4b32      	ldr	r3, [pc, #200]	; (26e68 <_sercom_get_default_pad+0x17c>)
   26d9e:	e045      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26da0:	4b32      	ldr	r3, [pc, #200]	; (26e6c <_sercom_get_default_pad+0x180>)
   26da2:	e043      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26da4:	4b32      	ldr	r3, [pc, #200]	; (26e70 <_sercom_get_default_pad+0x184>)
   26da6:	e041      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26da8:	4b32      	ldr	r3, [pc, #200]	; (26e74 <_sercom_get_default_pad+0x188>)
   26daa:	e03f      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26dac:	1cfb      	adds	r3, r7, #3
   26dae:	781b      	ldrb	r3, [r3, #0]
   26db0:	2b01      	cmp	r3, #1
   26db2:	d00a      	beq.n	26dca <_sercom_get_default_pad+0xde>
   26db4:	dc02      	bgt.n	26dbc <_sercom_get_default_pad+0xd0>
   26db6:	2b00      	cmp	r3, #0
   26db8:	d005      	beq.n	26dc6 <_sercom_get_default_pad+0xda>
   26dba:	e036      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26dbc:	2b02      	cmp	r3, #2
   26dbe:	d006      	beq.n	26dce <_sercom_get_default_pad+0xe2>
   26dc0:	2b03      	cmp	r3, #3
   26dc2:	d006      	beq.n	26dd2 <_sercom_get_default_pad+0xe6>
   26dc4:	e031      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26dc6:	4b2c      	ldr	r3, [pc, #176]	; (26e78 <_sercom_get_default_pad+0x18c>)
   26dc8:	e030      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26dca:	4b2c      	ldr	r3, [pc, #176]	; (26e7c <_sercom_get_default_pad+0x190>)
   26dcc:	e02e      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26dce:	4b2c      	ldr	r3, [pc, #176]	; (26e80 <_sercom_get_default_pad+0x194>)
   26dd0:	e02c      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26dd2:	4b2c      	ldr	r3, [pc, #176]	; (26e84 <_sercom_get_default_pad+0x198>)
   26dd4:	e02a      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26dd6:	1cfb      	adds	r3, r7, #3
   26dd8:	781b      	ldrb	r3, [r3, #0]
   26dda:	2b01      	cmp	r3, #1
   26ddc:	d00a      	beq.n	26df4 <_sercom_get_default_pad+0x108>
   26dde:	dc02      	bgt.n	26de6 <_sercom_get_default_pad+0xfa>
   26de0:	2b00      	cmp	r3, #0
   26de2:	d005      	beq.n	26df0 <_sercom_get_default_pad+0x104>
   26de4:	e021      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26de6:	2b02      	cmp	r3, #2
   26de8:	d006      	beq.n	26df8 <_sercom_get_default_pad+0x10c>
   26dea:	2b03      	cmp	r3, #3
   26dec:	d006      	beq.n	26dfc <_sercom_get_default_pad+0x110>
   26dee:	e01c      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26df0:	4b25      	ldr	r3, [pc, #148]	; (26e88 <_sercom_get_default_pad+0x19c>)
   26df2:	e01b      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26df4:	4b25      	ldr	r3, [pc, #148]	; (26e8c <_sercom_get_default_pad+0x1a0>)
   26df6:	e019      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26df8:	4b25      	ldr	r3, [pc, #148]	; (26e90 <_sercom_get_default_pad+0x1a4>)
   26dfa:	e017      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26dfc:	4b25      	ldr	r3, [pc, #148]	; (26e94 <_sercom_get_default_pad+0x1a8>)
   26dfe:	e015      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26e00:	1cfb      	adds	r3, r7, #3
   26e02:	781b      	ldrb	r3, [r3, #0]
   26e04:	2b01      	cmp	r3, #1
   26e06:	d00a      	beq.n	26e1e <_sercom_get_default_pad+0x132>
   26e08:	dc02      	bgt.n	26e10 <_sercom_get_default_pad+0x124>
   26e0a:	2b00      	cmp	r3, #0
   26e0c:	d005      	beq.n	26e1a <_sercom_get_default_pad+0x12e>
   26e0e:	e00c      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26e10:	2b02      	cmp	r3, #2
   26e12:	d006      	beq.n	26e22 <_sercom_get_default_pad+0x136>
   26e14:	2b03      	cmp	r3, #3
   26e16:	d006      	beq.n	26e26 <_sercom_get_default_pad+0x13a>
   26e18:	e007      	b.n	26e2a <_sercom_get_default_pad+0x13e>
   26e1a:	4b1f      	ldr	r3, [pc, #124]	; (26e98 <_sercom_get_default_pad+0x1ac>)
   26e1c:	e006      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26e1e:	4b1f      	ldr	r3, [pc, #124]	; (26e9c <_sercom_get_default_pad+0x1b0>)
   26e20:	e004      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26e22:	4b1f      	ldr	r3, [pc, #124]	; (26ea0 <_sercom_get_default_pad+0x1b4>)
   26e24:	e002      	b.n	26e2c <_sercom_get_default_pad+0x140>
   26e26:	4b1f      	ldr	r3, [pc, #124]	; (26ea4 <_sercom_get_default_pad+0x1b8>)
   26e28:	e000      	b.n	26e2c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   26e2a:	2300      	movs	r3, #0
}
   26e2c:	0018      	movs	r0, r3
   26e2e:	46bd      	mov	sp, r7
   26e30:	b002      	add	sp, #8
   26e32:	bd80      	pop	{r7, pc}
   26e34:	42001000 	.word	0x42001000
   26e38:	42000800 	.word	0x42000800
   26e3c:	42000c00 	.word	0x42000c00
   26e40:	42001800 	.word	0x42001800
   26e44:	42001c00 	.word	0x42001c00
   26e48:	42001400 	.word	0x42001400
   26e4c:	00040003 	.word	0x00040003
   26e50:	00050003 	.word	0x00050003
   26e54:	00060003 	.word	0x00060003
   26e58:	00070003 	.word	0x00070003
   26e5c:	00010003 	.word	0x00010003
   26e60:	001e0003 	.word	0x001e0003
   26e64:	001f0003 	.word	0x001f0003
   26e68:	00080003 	.word	0x00080003
   26e6c:	00090003 	.word	0x00090003
   26e70:	000a0003 	.word	0x000a0003
   26e74:	000b0003 	.word	0x000b0003
   26e78:	00100003 	.word	0x00100003
   26e7c:	00110003 	.word	0x00110003
   26e80:	00120003 	.word	0x00120003
   26e84:	00130003 	.word	0x00130003
   26e88:	000c0003 	.word	0x000c0003
   26e8c:	000d0003 	.word	0x000d0003
   26e90:	000e0003 	.word	0x000e0003
   26e94:	000f0003 	.word	0x000f0003
   26e98:	00160003 	.word	0x00160003
   26e9c:	00170003 	.word	0x00170003
   26ea0:	00180003 	.word	0x00180003
   26ea4:	00190003 	.word	0x00190003

00026ea8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   26ea8:	b590      	push	{r4, r7, lr}
   26eaa:	b08b      	sub	sp, #44	; 0x2c
   26eac:	af00      	add	r7, sp, #0
   26eae:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   26eb0:	230c      	movs	r3, #12
   26eb2:	18fb      	adds	r3, r7, r3
   26eb4:	4a0f      	ldr	r2, [pc, #60]	; (26ef4 <_sercom_get_sercom_inst_index+0x4c>)
   26eb6:	ca13      	ldmia	r2!, {r0, r1, r4}
   26eb8:	c313      	stmia	r3!, {r0, r1, r4}
   26eba:	ca13      	ldmia	r2!, {r0, r1, r4}
   26ebc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26ebe:	2300      	movs	r3, #0
   26ec0:	627b      	str	r3, [r7, #36]	; 0x24
   26ec2:	e00e      	b.n	26ee2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   26ec4:	230c      	movs	r3, #12
   26ec6:	18fb      	adds	r3, r7, r3
   26ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26eca:	0092      	lsls	r2, r2, #2
   26ecc:	58d3      	ldr	r3, [r2, r3]
   26ece:	001a      	movs	r2, r3
   26ed0:	687b      	ldr	r3, [r7, #4]
   26ed2:	429a      	cmp	r2, r3
   26ed4:	d102      	bne.n	26edc <_sercom_get_sercom_inst_index+0x34>
			return i;
   26ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26ed8:	b2db      	uxtb	r3, r3
   26eda:	e006      	b.n	26eea <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26ede:	3301      	adds	r3, #1
   26ee0:	627b      	str	r3, [r7, #36]	; 0x24
   26ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26ee4:	2b05      	cmp	r3, #5
   26ee6:	d9ed      	bls.n	26ec4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   26ee8:	2300      	movs	r3, #0
}
   26eea:	0018      	movs	r0, r3
   26eec:	46bd      	mov	sp, r7
   26eee:	b00b      	add	sp, #44	; 0x2c
   26ef0:	bd90      	pop	{r4, r7, pc}
   26ef2:	46c0      	nop			; (mov r8, r8)
   26ef4:	00038dac 	.word	0x00038dac

00026ef8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   26ef8:	b580      	push	{r7, lr}
   26efa:	b082      	sub	sp, #8
   26efc:	af00      	add	r7, sp, #0
   26efe:	0002      	movs	r2, r0
   26f00:	1dfb      	adds	r3, r7, #7
   26f02:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   26f04:	46c0      	nop			; (mov r8, r8)
   26f06:	46bd      	mov	sp, r7
   26f08:	b002      	add	sp, #8
   26f0a:	bd80      	pop	{r7, pc}

00026f0c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   26f0c:	b580      	push	{r7, lr}
   26f0e:	b084      	sub	sp, #16
   26f10:	af00      	add	r7, sp, #0
   26f12:	0002      	movs	r2, r0
   26f14:	6039      	str	r1, [r7, #0]
   26f16:	1dfb      	adds	r3, r7, #7
   26f18:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   26f1a:	4b13      	ldr	r3, [pc, #76]	; (26f68 <_sercom_set_handler+0x5c>)
   26f1c:	781b      	ldrb	r3, [r3, #0]
   26f1e:	2201      	movs	r2, #1
   26f20:	4053      	eors	r3, r2
   26f22:	b2db      	uxtb	r3, r3
   26f24:	2b00      	cmp	r3, #0
   26f26:	d015      	beq.n	26f54 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26f28:	2300      	movs	r3, #0
   26f2a:	60fb      	str	r3, [r7, #12]
   26f2c:	e00c      	b.n	26f48 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   26f2e:	4b0f      	ldr	r3, [pc, #60]	; (26f6c <_sercom_set_handler+0x60>)
   26f30:	68fa      	ldr	r2, [r7, #12]
   26f32:	0092      	lsls	r2, r2, #2
   26f34:	490e      	ldr	r1, [pc, #56]	; (26f70 <_sercom_set_handler+0x64>)
   26f36:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   26f38:	4b0e      	ldr	r3, [pc, #56]	; (26f74 <_sercom_set_handler+0x68>)
   26f3a:	68fa      	ldr	r2, [r7, #12]
   26f3c:	0092      	lsls	r2, r2, #2
   26f3e:	2100      	movs	r1, #0
   26f40:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26f42:	68fb      	ldr	r3, [r7, #12]
   26f44:	3301      	adds	r3, #1
   26f46:	60fb      	str	r3, [r7, #12]
   26f48:	68fb      	ldr	r3, [r7, #12]
   26f4a:	2b05      	cmp	r3, #5
   26f4c:	d9ef      	bls.n	26f2e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   26f4e:	4b06      	ldr	r3, [pc, #24]	; (26f68 <_sercom_set_handler+0x5c>)
   26f50:	2201      	movs	r2, #1
   26f52:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   26f54:	1dfb      	adds	r3, r7, #7
   26f56:	781a      	ldrb	r2, [r3, #0]
   26f58:	4b04      	ldr	r3, [pc, #16]	; (26f6c <_sercom_set_handler+0x60>)
   26f5a:	0092      	lsls	r2, r2, #2
   26f5c:	6839      	ldr	r1, [r7, #0]
   26f5e:	50d1      	str	r1, [r2, r3]
}
   26f60:	46c0      	nop			; (mov r8, r8)
   26f62:	46bd      	mov	sp, r7
   26f64:	b004      	add	sp, #16
   26f66:	bd80      	pop	{r7, pc}
   26f68:	2000413e 	.word	0x2000413e
   26f6c:	20004140 	.word	0x20004140
   26f70:	00026ef9 	.word	0x00026ef9
   26f74:	20005a0c 	.word	0x20005a0c

00026f78 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   26f78:	b590      	push	{r4, r7, lr}
   26f7a:	b085      	sub	sp, #20
   26f7c:	af00      	add	r7, sp, #0
   26f7e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   26f80:	2308      	movs	r3, #8
   26f82:	18fb      	adds	r3, r7, r3
   26f84:	4a0b      	ldr	r2, [pc, #44]	; (26fb4 <_sercom_get_interrupt_vector+0x3c>)
   26f86:	6811      	ldr	r1, [r2, #0]
   26f88:	6019      	str	r1, [r3, #0]
   26f8a:	8892      	ldrh	r2, [r2, #4]
   26f8c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   26f8e:	230f      	movs	r3, #15
   26f90:	18fc      	adds	r4, r7, r3
   26f92:	687b      	ldr	r3, [r7, #4]
   26f94:	0018      	movs	r0, r3
   26f96:	4b08      	ldr	r3, [pc, #32]	; (26fb8 <_sercom_get_interrupt_vector+0x40>)
   26f98:	4798      	blx	r3
   26f9a:	0003      	movs	r3, r0
   26f9c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   26f9e:	230f      	movs	r3, #15
   26fa0:	18fb      	adds	r3, r7, r3
   26fa2:	781b      	ldrb	r3, [r3, #0]
   26fa4:	2208      	movs	r2, #8
   26fa6:	18ba      	adds	r2, r7, r2
   26fa8:	5cd3      	ldrb	r3, [r2, r3]
   26faa:	b25b      	sxtb	r3, r3
}
   26fac:	0018      	movs	r0, r3
   26fae:	46bd      	mov	sp, r7
   26fb0:	b005      	add	sp, #20
   26fb2:	bd90      	pop	{r4, r7, pc}
   26fb4:	00038dc4 	.word	0x00038dc4
   26fb8:	00026ea9 	.word	0x00026ea9

00026fbc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   26fbc:	b580      	push	{r7, lr}
   26fbe:	af00      	add	r7, sp, #0
   26fc0:	4b03      	ldr	r3, [pc, #12]	; (26fd0 <SERCOM0_Handler+0x14>)
   26fc2:	681b      	ldr	r3, [r3, #0]
   26fc4:	2000      	movs	r0, #0
   26fc6:	4798      	blx	r3
   26fc8:	46c0      	nop			; (mov r8, r8)
   26fca:	46bd      	mov	sp, r7
   26fcc:	bd80      	pop	{r7, pc}
   26fce:	46c0      	nop			; (mov r8, r8)
   26fd0:	20004140 	.word	0x20004140

00026fd4 <SERCOM1_Handler>:
   26fd4:	b580      	push	{r7, lr}
   26fd6:	af00      	add	r7, sp, #0
   26fd8:	4b03      	ldr	r3, [pc, #12]	; (26fe8 <SERCOM1_Handler+0x14>)
   26fda:	685b      	ldr	r3, [r3, #4]
   26fdc:	2001      	movs	r0, #1
   26fde:	4798      	blx	r3
   26fe0:	46c0      	nop			; (mov r8, r8)
   26fe2:	46bd      	mov	sp, r7
   26fe4:	bd80      	pop	{r7, pc}
   26fe6:	46c0      	nop			; (mov r8, r8)
   26fe8:	20004140 	.word	0x20004140

00026fec <SERCOM2_Handler>:
   26fec:	b580      	push	{r7, lr}
   26fee:	af00      	add	r7, sp, #0
   26ff0:	4b03      	ldr	r3, [pc, #12]	; (27000 <SERCOM2_Handler+0x14>)
   26ff2:	689b      	ldr	r3, [r3, #8]
   26ff4:	2002      	movs	r0, #2
   26ff6:	4798      	blx	r3
   26ff8:	46c0      	nop			; (mov r8, r8)
   26ffa:	46bd      	mov	sp, r7
   26ffc:	bd80      	pop	{r7, pc}
   26ffe:	46c0      	nop			; (mov r8, r8)
   27000:	20004140 	.word	0x20004140

00027004 <SERCOM3_Handler>:
   27004:	b580      	push	{r7, lr}
   27006:	af00      	add	r7, sp, #0
   27008:	4b03      	ldr	r3, [pc, #12]	; (27018 <SERCOM3_Handler+0x14>)
   2700a:	68db      	ldr	r3, [r3, #12]
   2700c:	2003      	movs	r0, #3
   2700e:	4798      	blx	r3
   27010:	46c0      	nop			; (mov r8, r8)
   27012:	46bd      	mov	sp, r7
   27014:	bd80      	pop	{r7, pc}
   27016:	46c0      	nop			; (mov r8, r8)
   27018:	20004140 	.word	0x20004140

0002701c <SERCOM4_Handler>:
   2701c:	b580      	push	{r7, lr}
   2701e:	af00      	add	r7, sp, #0
   27020:	4b03      	ldr	r3, [pc, #12]	; (27030 <SERCOM4_Handler+0x14>)
   27022:	691b      	ldr	r3, [r3, #16]
   27024:	2004      	movs	r0, #4
   27026:	4798      	blx	r3
   27028:	46c0      	nop			; (mov r8, r8)
   2702a:	46bd      	mov	sp, r7
   2702c:	bd80      	pop	{r7, pc}
   2702e:	46c0      	nop			; (mov r8, r8)
   27030:	20004140 	.word	0x20004140

00027034 <SERCOM5_Handler>:
   27034:	b580      	push	{r7, lr}
   27036:	af00      	add	r7, sp, #0
   27038:	4b03      	ldr	r3, [pc, #12]	; (27048 <SERCOM5_Handler+0x14>)
   2703a:	695b      	ldr	r3, [r3, #20]
   2703c:	2005      	movs	r0, #5
   2703e:	4798      	blx	r3
   27040:	46c0      	nop			; (mov r8, r8)
   27042:	46bd      	mov	sp, r7
   27044:	bd80      	pop	{r7, pc}
   27046:	46c0      	nop			; (mov r8, r8)
   27048:	20004140 	.word	0x20004140

0002704c <system_pinmux_get_config_defaults>:
{
   2704c:	b580      	push	{r7, lr}
   2704e:	b082      	sub	sp, #8
   27050:	af00      	add	r7, sp, #0
   27052:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27054:	687b      	ldr	r3, [r7, #4]
   27056:	2280      	movs	r2, #128	; 0x80
   27058:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2705a:	687b      	ldr	r3, [r7, #4]
   2705c:	2200      	movs	r2, #0
   2705e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27060:	687b      	ldr	r3, [r7, #4]
   27062:	2201      	movs	r2, #1
   27064:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27066:	687b      	ldr	r3, [r7, #4]
   27068:	2200      	movs	r2, #0
   2706a:	70da      	strb	r2, [r3, #3]
}
   2706c:	46c0      	nop			; (mov r8, r8)
   2706e:	46bd      	mov	sp, r7
   27070:	b002      	add	sp, #8
   27072:	bd80      	pop	{r7, pc}

00027074 <system_pinmux_get_group_from_gpio_pin>:
{
   27074:	b580      	push	{r7, lr}
   27076:	b084      	sub	sp, #16
   27078:	af00      	add	r7, sp, #0
   2707a:	0002      	movs	r2, r0
   2707c:	1dfb      	adds	r3, r7, #7
   2707e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27080:	230f      	movs	r3, #15
   27082:	18fb      	adds	r3, r7, r3
   27084:	1dfa      	adds	r2, r7, #7
   27086:	7812      	ldrb	r2, [r2, #0]
   27088:	09d2      	lsrs	r2, r2, #7
   2708a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2708c:	230e      	movs	r3, #14
   2708e:	18fb      	adds	r3, r7, r3
   27090:	1dfa      	adds	r2, r7, #7
   27092:	7812      	ldrb	r2, [r2, #0]
   27094:	0952      	lsrs	r2, r2, #5
   27096:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27098:	4b0d      	ldr	r3, [pc, #52]	; (270d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2709a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2709c:	230f      	movs	r3, #15
   2709e:	18fb      	adds	r3, r7, r3
   270a0:	781b      	ldrb	r3, [r3, #0]
   270a2:	2b00      	cmp	r3, #0
   270a4:	d10f      	bne.n	270c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   270a6:	230f      	movs	r3, #15
   270a8:	18fb      	adds	r3, r7, r3
   270aa:	781b      	ldrb	r3, [r3, #0]
   270ac:	009b      	lsls	r3, r3, #2
   270ae:	2210      	movs	r2, #16
   270b0:	4694      	mov	ip, r2
   270b2:	44bc      	add	ip, r7
   270b4:	4463      	add	r3, ip
   270b6:	3b08      	subs	r3, #8
   270b8:	681a      	ldr	r2, [r3, #0]
   270ba:	230e      	movs	r3, #14
   270bc:	18fb      	adds	r3, r7, r3
   270be:	781b      	ldrb	r3, [r3, #0]
   270c0:	01db      	lsls	r3, r3, #7
   270c2:	18d3      	adds	r3, r2, r3
   270c4:	e000      	b.n	270c8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   270c6:	2300      	movs	r3, #0
}
   270c8:	0018      	movs	r0, r3
   270ca:	46bd      	mov	sp, r7
   270cc:	b004      	add	sp, #16
   270ce:	bd80      	pop	{r7, pc}
   270d0:	41004400 	.word	0x41004400

000270d4 <port_get_group_from_gpio_pin>:
{
   270d4:	b580      	push	{r7, lr}
   270d6:	b082      	sub	sp, #8
   270d8:	af00      	add	r7, sp, #0
   270da:	0002      	movs	r2, r0
   270dc:	1dfb      	adds	r3, r7, #7
   270de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   270e0:	1dfb      	adds	r3, r7, #7
   270e2:	781b      	ldrb	r3, [r3, #0]
   270e4:	0018      	movs	r0, r3
   270e6:	4b03      	ldr	r3, [pc, #12]	; (270f4 <port_get_group_from_gpio_pin+0x20>)
   270e8:	4798      	blx	r3
   270ea:	0003      	movs	r3, r0
}
   270ec:	0018      	movs	r0, r3
   270ee:	46bd      	mov	sp, r7
   270f0:	b002      	add	sp, #8
   270f2:	bd80      	pop	{r7, pc}
   270f4:	00027075 	.word	0x00027075

000270f8 <port_pin_set_output_level>:
{
   270f8:	b580      	push	{r7, lr}
   270fa:	b084      	sub	sp, #16
   270fc:	af00      	add	r7, sp, #0
   270fe:	0002      	movs	r2, r0
   27100:	1dfb      	adds	r3, r7, #7
   27102:	701a      	strb	r2, [r3, #0]
   27104:	1dbb      	adds	r3, r7, #6
   27106:	1c0a      	adds	r2, r1, #0
   27108:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2710a:	1dfb      	adds	r3, r7, #7
   2710c:	781b      	ldrb	r3, [r3, #0]
   2710e:	0018      	movs	r0, r3
   27110:	4b0d      	ldr	r3, [pc, #52]	; (27148 <port_pin_set_output_level+0x50>)
   27112:	4798      	blx	r3
   27114:	0003      	movs	r3, r0
   27116:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27118:	1dfb      	adds	r3, r7, #7
   2711a:	781b      	ldrb	r3, [r3, #0]
   2711c:	221f      	movs	r2, #31
   2711e:	4013      	ands	r3, r2
   27120:	2201      	movs	r2, #1
   27122:	409a      	lsls	r2, r3
   27124:	0013      	movs	r3, r2
   27126:	60bb      	str	r3, [r7, #8]
	if (level) {
   27128:	1dbb      	adds	r3, r7, #6
   2712a:	781b      	ldrb	r3, [r3, #0]
   2712c:	2b00      	cmp	r3, #0
   2712e:	d003      	beq.n	27138 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27130:	68fb      	ldr	r3, [r7, #12]
   27132:	68ba      	ldr	r2, [r7, #8]
   27134:	619a      	str	r2, [r3, #24]
}
   27136:	e002      	b.n	2713e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   27138:	68fb      	ldr	r3, [r7, #12]
   2713a:	68ba      	ldr	r2, [r7, #8]
   2713c:	615a      	str	r2, [r3, #20]
}
   2713e:	46c0      	nop			; (mov r8, r8)
   27140:	46bd      	mov	sp, r7
   27142:	b004      	add	sp, #16
   27144:	bd80      	pop	{r7, pc}
   27146:	46c0      	nop			; (mov r8, r8)
   27148:	000270d5 	.word	0x000270d5

0002714c <system_gclk_chan_get_config_defaults>:
{
   2714c:	b580      	push	{r7, lr}
   2714e:	b082      	sub	sp, #8
   27150:	af00      	add	r7, sp, #0
   27152:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27154:	687b      	ldr	r3, [r7, #4]
   27156:	2200      	movs	r2, #0
   27158:	701a      	strb	r2, [r3, #0]
}
   2715a:	46c0      	nop			; (mov r8, r8)
   2715c:	46bd      	mov	sp, r7
   2715e:	b002      	add	sp, #8
   27160:	bd80      	pop	{r7, pc}
	...

00027164 <system_apb_clock_set_mask>:
{
   27164:	b580      	push	{r7, lr}
   27166:	b082      	sub	sp, #8
   27168:	af00      	add	r7, sp, #0
   2716a:	0002      	movs	r2, r0
   2716c:	6039      	str	r1, [r7, #0]
   2716e:	1dfb      	adds	r3, r7, #7
   27170:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27172:	1dfb      	adds	r3, r7, #7
   27174:	781b      	ldrb	r3, [r3, #0]
   27176:	2b01      	cmp	r3, #1
   27178:	d00a      	beq.n	27190 <system_apb_clock_set_mask+0x2c>
   2717a:	2b02      	cmp	r3, #2
   2717c:	d00f      	beq.n	2719e <system_apb_clock_set_mask+0x3a>
   2717e:	2b00      	cmp	r3, #0
   27180:	d114      	bne.n	271ac <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27182:	4b0e      	ldr	r3, [pc, #56]	; (271bc <system_apb_clock_set_mask+0x58>)
   27184:	4a0d      	ldr	r2, [pc, #52]	; (271bc <system_apb_clock_set_mask+0x58>)
   27186:	6991      	ldr	r1, [r2, #24]
   27188:	683a      	ldr	r2, [r7, #0]
   2718a:	430a      	orrs	r2, r1
   2718c:	619a      	str	r2, [r3, #24]
			break;
   2718e:	e00f      	b.n	271b0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27190:	4b0a      	ldr	r3, [pc, #40]	; (271bc <system_apb_clock_set_mask+0x58>)
   27192:	4a0a      	ldr	r2, [pc, #40]	; (271bc <system_apb_clock_set_mask+0x58>)
   27194:	69d1      	ldr	r1, [r2, #28]
   27196:	683a      	ldr	r2, [r7, #0]
   27198:	430a      	orrs	r2, r1
   2719a:	61da      	str	r2, [r3, #28]
			break;
   2719c:	e008      	b.n	271b0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2719e:	4b07      	ldr	r3, [pc, #28]	; (271bc <system_apb_clock_set_mask+0x58>)
   271a0:	4a06      	ldr	r2, [pc, #24]	; (271bc <system_apb_clock_set_mask+0x58>)
   271a2:	6a11      	ldr	r1, [r2, #32]
   271a4:	683a      	ldr	r2, [r7, #0]
   271a6:	430a      	orrs	r2, r1
   271a8:	621a      	str	r2, [r3, #32]
			break;
   271aa:	e001      	b.n	271b0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   271ac:	2317      	movs	r3, #23
   271ae:	e000      	b.n	271b2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   271b0:	2300      	movs	r3, #0
}
   271b2:	0018      	movs	r0, r3
   271b4:	46bd      	mov	sp, r7
   271b6:	b002      	add	sp, #8
   271b8:	bd80      	pop	{r7, pc}
   271ba:	46c0      	nop			; (mov r8, r8)
   271bc:	40000400 	.word	0x40000400

000271c0 <system_is_debugger_present>:
{
   271c0:	b580      	push	{r7, lr}
   271c2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   271c4:	4b05      	ldr	r3, [pc, #20]	; (271dc <system_is_debugger_present+0x1c>)
   271c6:	789b      	ldrb	r3, [r3, #2]
   271c8:	b2db      	uxtb	r3, r3
   271ca:	001a      	movs	r2, r3
   271cc:	2302      	movs	r3, #2
   271ce:	4013      	ands	r3, r2
   271d0:	1e5a      	subs	r2, r3, #1
   271d2:	4193      	sbcs	r3, r2
   271d4:	b2db      	uxtb	r3, r3
}
   271d6:	0018      	movs	r0, r3
   271d8:	46bd      	mov	sp, r7
   271da:	bd80      	pop	{r7, pc}
   271dc:	41002000 	.word	0x41002000

000271e0 <system_interrupt_enable>:
{
   271e0:	b580      	push	{r7, lr}
   271e2:	b082      	sub	sp, #8
   271e4:	af00      	add	r7, sp, #0
   271e6:	0002      	movs	r2, r0
   271e8:	1dfb      	adds	r3, r7, #7
   271ea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   271ec:	4b06      	ldr	r3, [pc, #24]	; (27208 <system_interrupt_enable+0x28>)
   271ee:	1dfa      	adds	r2, r7, #7
   271f0:	7812      	ldrb	r2, [r2, #0]
   271f2:	0011      	movs	r1, r2
   271f4:	221f      	movs	r2, #31
   271f6:	400a      	ands	r2, r1
   271f8:	2101      	movs	r1, #1
   271fa:	4091      	lsls	r1, r2
   271fc:	000a      	movs	r2, r1
   271fe:	601a      	str	r2, [r3, #0]
}
   27200:	46c0      	nop			; (mov r8, r8)
   27202:	46bd      	mov	sp, r7
   27204:	b002      	add	sp, #8
   27206:	bd80      	pop	{r7, pc}
   27208:	e000e100 	.word	0xe000e100

0002720c <system_interrupt_disable>:
{
   2720c:	b580      	push	{r7, lr}
   2720e:	b082      	sub	sp, #8
   27210:	af00      	add	r7, sp, #0
   27212:	0002      	movs	r2, r0
   27214:	1dfb      	adds	r3, r7, #7
   27216:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27218:	4a07      	ldr	r2, [pc, #28]	; (27238 <system_interrupt_disable+0x2c>)
   2721a:	1dfb      	adds	r3, r7, #7
   2721c:	781b      	ldrb	r3, [r3, #0]
   2721e:	0019      	movs	r1, r3
   27220:	231f      	movs	r3, #31
   27222:	400b      	ands	r3, r1
   27224:	2101      	movs	r1, #1
   27226:	4099      	lsls	r1, r3
   27228:	000b      	movs	r3, r1
   2722a:	0019      	movs	r1, r3
   2722c:	2380      	movs	r3, #128	; 0x80
   2722e:	50d1      	str	r1, [r2, r3]
}
   27230:	46c0      	nop			; (mov r8, r8)
   27232:	46bd      	mov	sp, r7
   27234:	b002      	add	sp, #8
   27236:	bd80      	pop	{r7, pc}
   27238:	e000e100 	.word	0xe000e100

0002723c <spi_is_syncing>:
{
   2723c:	b580      	push	{r7, lr}
   2723e:	b084      	sub	sp, #16
   27240:	af00      	add	r7, sp, #0
   27242:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27244:	687b      	ldr	r3, [r7, #4]
   27246:	681b      	ldr	r3, [r3, #0]
   27248:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2724a:	68fb      	ldr	r3, [r7, #12]
   2724c:	69db      	ldr	r3, [r3, #28]
   2724e:	1e5a      	subs	r2, r3, #1
   27250:	4193      	sbcs	r3, r2
   27252:	b2db      	uxtb	r3, r3
}
   27254:	0018      	movs	r0, r3
   27256:	46bd      	mov	sp, r7
   27258:	b004      	add	sp, #16
   2725a:	bd80      	pop	{r7, pc}

0002725c <spi_enable>:
{
   2725c:	b580      	push	{r7, lr}
   2725e:	b084      	sub	sp, #16
   27260:	af00      	add	r7, sp, #0
   27262:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27264:	687b      	ldr	r3, [r7, #4]
   27266:	681b      	ldr	r3, [r3, #0]
   27268:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2726a:	687b      	ldr	r3, [r7, #4]
   2726c:	681b      	ldr	r3, [r3, #0]
   2726e:	0018      	movs	r0, r3
   27270:	4b0b      	ldr	r3, [pc, #44]	; (272a0 <spi_enable+0x44>)
   27272:	4798      	blx	r3
   27274:	0003      	movs	r3, r0
   27276:	0018      	movs	r0, r3
   27278:	4b0a      	ldr	r3, [pc, #40]	; (272a4 <spi_enable+0x48>)
   2727a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2727c:	46c0      	nop			; (mov r8, r8)
   2727e:	687b      	ldr	r3, [r7, #4]
   27280:	0018      	movs	r0, r3
   27282:	4b09      	ldr	r3, [pc, #36]	; (272a8 <spi_enable+0x4c>)
   27284:	4798      	blx	r3
   27286:	1e03      	subs	r3, r0, #0
   27288:	d1f9      	bne.n	2727e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2728a:	68fb      	ldr	r3, [r7, #12]
   2728c:	681b      	ldr	r3, [r3, #0]
   2728e:	2202      	movs	r2, #2
   27290:	431a      	orrs	r2, r3
   27292:	68fb      	ldr	r3, [r7, #12]
   27294:	601a      	str	r2, [r3, #0]
}
   27296:	46c0      	nop			; (mov r8, r8)
   27298:	46bd      	mov	sp, r7
   2729a:	b004      	add	sp, #16
   2729c:	bd80      	pop	{r7, pc}
   2729e:	46c0      	nop			; (mov r8, r8)
   272a0:	00026f79 	.word	0x00026f79
   272a4:	000271e1 	.word	0x000271e1
   272a8:	0002723d 	.word	0x0002723d

000272ac <spi_disable>:
{
   272ac:	b580      	push	{r7, lr}
   272ae:	b084      	sub	sp, #16
   272b0:	af00      	add	r7, sp, #0
   272b2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   272b4:	687b      	ldr	r3, [r7, #4]
   272b6:	681b      	ldr	r3, [r3, #0]
   272b8:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   272ba:	687b      	ldr	r3, [r7, #4]
   272bc:	681b      	ldr	r3, [r3, #0]
   272be:	0018      	movs	r0, r3
   272c0:	4b0e      	ldr	r3, [pc, #56]	; (272fc <spi_disable+0x50>)
   272c2:	4798      	blx	r3
   272c4:	0003      	movs	r3, r0
   272c6:	0018      	movs	r0, r3
   272c8:	4b0d      	ldr	r3, [pc, #52]	; (27300 <spi_disable+0x54>)
   272ca:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   272cc:	46c0      	nop			; (mov r8, r8)
   272ce:	687b      	ldr	r3, [r7, #4]
   272d0:	0018      	movs	r0, r3
   272d2:	4b0c      	ldr	r3, [pc, #48]	; (27304 <spi_disable+0x58>)
   272d4:	4798      	blx	r3
   272d6:	1e03      	subs	r3, r0, #0
   272d8:	d1f9      	bne.n	272ce <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   272da:	68fb      	ldr	r3, [r7, #12]
   272dc:	228f      	movs	r2, #143	; 0x8f
   272de:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   272e0:	68fb      	ldr	r3, [r7, #12]
   272e2:	228f      	movs	r2, #143	; 0x8f
   272e4:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   272e6:	68fb      	ldr	r3, [r7, #12]
   272e8:	681b      	ldr	r3, [r3, #0]
   272ea:	2202      	movs	r2, #2
   272ec:	4393      	bics	r3, r2
   272ee:	001a      	movs	r2, r3
   272f0:	68fb      	ldr	r3, [r7, #12]
   272f2:	601a      	str	r2, [r3, #0]
}
   272f4:	46c0      	nop			; (mov r8, r8)
   272f6:	46bd      	mov	sp, r7
   272f8:	b004      	add	sp, #16
   272fa:	bd80      	pop	{r7, pc}
   272fc:	00026f79 	.word	0x00026f79
   27300:	0002720d 	.word	0x0002720d
   27304:	0002723d 	.word	0x0002723d

00027308 <spi_is_write_complete>:
{
   27308:	b580      	push	{r7, lr}
   2730a:	b084      	sub	sp, #16
   2730c:	af00      	add	r7, sp, #0
   2730e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27310:	687b      	ldr	r3, [r7, #4]
   27312:	681b      	ldr	r3, [r3, #0]
   27314:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27316:	68fb      	ldr	r3, [r7, #12]
   27318:	7e1b      	ldrb	r3, [r3, #24]
   2731a:	b2db      	uxtb	r3, r3
   2731c:	001a      	movs	r2, r3
   2731e:	2302      	movs	r3, #2
   27320:	4013      	ands	r3, r2
   27322:	1e5a      	subs	r2, r3, #1
   27324:	4193      	sbcs	r3, r2
   27326:	b2db      	uxtb	r3, r3
}
   27328:	0018      	movs	r0, r3
   2732a:	46bd      	mov	sp, r7
   2732c:	b004      	add	sp, #16
   2732e:	bd80      	pop	{r7, pc}

00027330 <spi_is_ready_to_write>:
{
   27330:	b580      	push	{r7, lr}
   27332:	b084      	sub	sp, #16
   27334:	af00      	add	r7, sp, #0
   27336:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27338:	687b      	ldr	r3, [r7, #4]
   2733a:	681b      	ldr	r3, [r3, #0]
   2733c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2733e:	68fb      	ldr	r3, [r7, #12]
   27340:	7e1b      	ldrb	r3, [r3, #24]
   27342:	b2db      	uxtb	r3, r3
   27344:	001a      	movs	r2, r3
   27346:	2301      	movs	r3, #1
   27348:	4013      	ands	r3, r2
   2734a:	1e5a      	subs	r2, r3, #1
   2734c:	4193      	sbcs	r3, r2
   2734e:	b2db      	uxtb	r3, r3
}
   27350:	0018      	movs	r0, r3
   27352:	46bd      	mov	sp, r7
   27354:	b004      	add	sp, #16
   27356:	bd80      	pop	{r7, pc}

00027358 <spi_is_ready_to_read>:
{
   27358:	b580      	push	{r7, lr}
   2735a:	b084      	sub	sp, #16
   2735c:	af00      	add	r7, sp, #0
   2735e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27360:	687b      	ldr	r3, [r7, #4]
   27362:	681b      	ldr	r3, [r3, #0]
   27364:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   27366:	68fb      	ldr	r3, [r7, #12]
   27368:	7e1b      	ldrb	r3, [r3, #24]
   2736a:	b2db      	uxtb	r3, r3
   2736c:	001a      	movs	r2, r3
   2736e:	2304      	movs	r3, #4
   27370:	4013      	ands	r3, r2
   27372:	1e5a      	subs	r2, r3, #1
   27374:	4193      	sbcs	r3, r2
   27376:	b2db      	uxtb	r3, r3
}
   27378:	0018      	movs	r0, r3
   2737a:	46bd      	mov	sp, r7
   2737c:	b004      	add	sp, #16
   2737e:	bd80      	pop	{r7, pc}

00027380 <spi_write>:
{
   27380:	b580      	push	{r7, lr}
   27382:	b084      	sub	sp, #16
   27384:	af00      	add	r7, sp, #0
   27386:	6078      	str	r0, [r7, #4]
   27388:	000a      	movs	r2, r1
   2738a:	1cbb      	adds	r3, r7, #2
   2738c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2738e:	687b      	ldr	r3, [r7, #4]
   27390:	681b      	ldr	r3, [r3, #0]
   27392:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   27394:	687b      	ldr	r3, [r7, #4]
   27396:	0018      	movs	r0, r3
   27398:	4b0a      	ldr	r3, [pc, #40]	; (273c4 <spi_write+0x44>)
   2739a:	4798      	blx	r3
   2739c:	0003      	movs	r3, r0
   2739e:	001a      	movs	r2, r3
   273a0:	2301      	movs	r3, #1
   273a2:	4053      	eors	r3, r2
   273a4:	b2db      	uxtb	r3, r3
   273a6:	2b00      	cmp	r3, #0
   273a8:	d001      	beq.n	273ae <spi_write+0x2e>
		return STATUS_BUSY;
   273aa:	2305      	movs	r3, #5
   273ac:	e006      	b.n	273bc <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   273ae:	1cbb      	adds	r3, r7, #2
   273b0:	881b      	ldrh	r3, [r3, #0]
   273b2:	05db      	lsls	r3, r3, #23
   273b4:	0dda      	lsrs	r2, r3, #23
   273b6:	68fb      	ldr	r3, [r7, #12]
   273b8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   273ba:	2300      	movs	r3, #0
}
   273bc:	0018      	movs	r0, r3
   273be:	46bd      	mov	sp, r7
   273c0:	b004      	add	sp, #16
   273c2:	bd80      	pop	{r7, pc}
   273c4:	00027331 	.word	0x00027331

000273c8 <spi_read>:
{
   273c8:	b580      	push	{r7, lr}
   273ca:	b084      	sub	sp, #16
   273cc:	af00      	add	r7, sp, #0
   273ce:	6078      	str	r0, [r7, #4]
   273d0:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   273d2:	687b      	ldr	r3, [r7, #4]
   273d4:	681b      	ldr	r3, [r3, #0]
   273d6:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   273d8:	687b      	ldr	r3, [r7, #4]
   273da:	0018      	movs	r0, r3
   273dc:	4b1b      	ldr	r3, [pc, #108]	; (2744c <spi_read+0x84>)
   273de:	4798      	blx	r3
   273e0:	0003      	movs	r3, r0
   273e2:	001a      	movs	r2, r3
   273e4:	2301      	movs	r3, #1
   273e6:	4053      	eors	r3, r2
   273e8:	b2db      	uxtb	r3, r3
   273ea:	2b00      	cmp	r3, #0
   273ec:	d001      	beq.n	273f2 <spi_read+0x2a>
		return STATUS_ERR_IO;
   273ee:	2310      	movs	r3, #16
   273f0:	e027      	b.n	27442 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   273f2:	230f      	movs	r3, #15
   273f4:	18fb      	adds	r3, r7, r3
   273f6:	2200      	movs	r2, #0
   273f8:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   273fa:	68bb      	ldr	r3, [r7, #8]
   273fc:	8b5b      	ldrh	r3, [r3, #26]
   273fe:	b29b      	uxth	r3, r3
   27400:	001a      	movs	r2, r3
   27402:	2304      	movs	r3, #4
   27404:	4013      	ands	r3, r2
   27406:	d006      	beq.n	27416 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27408:	230f      	movs	r3, #15
   2740a:	18fb      	adds	r3, r7, r3
   2740c:	221e      	movs	r2, #30
   2740e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27410:	68bb      	ldr	r3, [r7, #8]
   27412:	2204      	movs	r2, #4
   27414:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27416:	687b      	ldr	r3, [r7, #4]
   27418:	799b      	ldrb	r3, [r3, #6]
   2741a:	2b01      	cmp	r3, #1
   2741c:	d108      	bne.n	27430 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2741e:	68bb      	ldr	r3, [r7, #8]
   27420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27422:	b29b      	uxth	r3, r3
   27424:	05db      	lsls	r3, r3, #23
   27426:	0ddb      	lsrs	r3, r3, #23
   27428:	b29a      	uxth	r2, r3
   2742a:	683b      	ldr	r3, [r7, #0]
   2742c:	801a      	strh	r2, [r3, #0]
   2742e:	e005      	b.n	2743c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27430:	68bb      	ldr	r3, [r7, #8]
   27432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27434:	b2db      	uxtb	r3, r3
   27436:	b29a      	uxth	r2, r3
   27438:	683b      	ldr	r3, [r7, #0]
   2743a:	801a      	strh	r2, [r3, #0]
	return retval;
   2743c:	230f      	movs	r3, #15
   2743e:	18fb      	adds	r3, r7, r3
   27440:	781b      	ldrb	r3, [r3, #0]
}
   27442:	0018      	movs	r0, r3
   27444:	46bd      	mov	sp, r7
   27446:	b004      	add	sp, #16
   27448:	bd80      	pop	{r7, pc}
   2744a:	46c0      	nop			; (mov r8, r8)
   2744c:	00027359 	.word	0x00027359

00027450 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27450:	b590      	push	{r4, r7, lr}
   27452:	b089      	sub	sp, #36	; 0x24
   27454:	af00      	add	r7, sp, #0
   27456:	6078      	str	r0, [r7, #4]
   27458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2745a:	230c      	movs	r3, #12
   2745c:	18fb      	adds	r3, r7, r3
   2745e:	2200      	movs	r2, #0
   27460:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27462:	687b      	ldr	r3, [r7, #4]
   27464:	681b      	ldr	r3, [r3, #0]
   27466:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27468:	687b      	ldr	r3, [r7, #4]
   2746a:	0018      	movs	r0, r3
   2746c:	4b24      	ldr	r3, [pc, #144]	; (27500 <spi_set_baudrate+0xb0>)
   2746e:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27470:	46c0      	nop			; (mov r8, r8)
   27472:	687b      	ldr	r3, [r7, #4]
   27474:	0018      	movs	r0, r3
   27476:	4b23      	ldr	r3, [pc, #140]	; (27504 <spi_set_baudrate+0xb4>)
   27478:	4798      	blx	r3
   2747a:	1e03      	subs	r3, r0, #0
   2747c:	d1f9      	bne.n	27472 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2747e:	687b      	ldr	r3, [r7, #4]
   27480:	681b      	ldr	r3, [r3, #0]
   27482:	0018      	movs	r0, r3
   27484:	4b20      	ldr	r3, [pc, #128]	; (27508 <spi_set_baudrate+0xb8>)
   27486:	4798      	blx	r3
   27488:	0003      	movs	r3, r0
   2748a:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2748c:	69bb      	ldr	r3, [r7, #24]
   2748e:	3314      	adds	r3, #20
   27490:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27492:	697b      	ldr	r3, [r7, #20]
   27494:	b2db      	uxtb	r3, r3
   27496:	0018      	movs	r0, r3
   27498:	4b1c      	ldr	r3, [pc, #112]	; (2750c <spi_set_baudrate+0xbc>)
   2749a:	4798      	blx	r3
   2749c:	0003      	movs	r3, r0
   2749e:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   274a0:	230f      	movs	r3, #15
   274a2:	18fc      	adds	r4, r7, r3
   274a4:	230c      	movs	r3, #12
   274a6:	18fa      	adds	r2, r7, r3
   274a8:	6939      	ldr	r1, [r7, #16]
   274aa:	683b      	ldr	r3, [r7, #0]
   274ac:	0018      	movs	r0, r3
   274ae:	4b18      	ldr	r3, [pc, #96]	; (27510 <spi_set_baudrate+0xc0>)
   274b0:	4798      	blx	r3
   274b2:	0003      	movs	r3, r0
   274b4:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   274b6:	230f      	movs	r3, #15
   274b8:	18fb      	adds	r3, r7, r3
   274ba:	781b      	ldrb	r3, [r3, #0]
   274bc:	2b00      	cmp	r3, #0
   274be:	d001      	beq.n	274c4 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   274c0:	2317      	movs	r3, #23
   274c2:	e018      	b.n	274f6 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   274c4:	230c      	movs	r3, #12
   274c6:	18fb      	adds	r3, r7, r3
   274c8:	881b      	ldrh	r3, [r3, #0]
   274ca:	b2da      	uxtb	r2, r3
   274cc:	69fb      	ldr	r3, [r7, #28]
   274ce:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   274d0:	46c0      	nop			; (mov r8, r8)
   274d2:	687b      	ldr	r3, [r7, #4]
   274d4:	0018      	movs	r0, r3
   274d6:	4b0b      	ldr	r3, [pc, #44]	; (27504 <spi_set_baudrate+0xb4>)
   274d8:	4798      	blx	r3
   274da:	1e03      	subs	r3, r0, #0
   274dc:	d1f9      	bne.n	274d2 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   274de:	687b      	ldr	r3, [r7, #4]
   274e0:	0018      	movs	r0, r3
   274e2:	4b0c      	ldr	r3, [pc, #48]	; (27514 <spi_set_baudrate+0xc4>)
   274e4:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   274e6:	46c0      	nop			; (mov r8, r8)
   274e8:	687b      	ldr	r3, [r7, #4]
   274ea:	0018      	movs	r0, r3
   274ec:	4b05      	ldr	r3, [pc, #20]	; (27504 <spi_set_baudrate+0xb4>)
   274ee:	4798      	blx	r3
   274f0:	1e03      	subs	r3, r0, #0
   274f2:	d1f9      	bne.n	274e8 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   274f4:	2300      	movs	r3, #0
}
   274f6:	0018      	movs	r0, r3
   274f8:	46bd      	mov	sp, r7
   274fa:	b009      	add	sp, #36	; 0x24
   274fc:	bd90      	pop	{r4, r7, pc}
   274fe:	46c0      	nop			; (mov r8, r8)
   27500:	000272ad 	.word	0x000272ad
   27504:	0002723d 	.word	0x0002723d
   27508:	00026ea9 	.word	0x00026ea9
   2750c:	0002985d 	.word	0x0002985d
   27510:	00026a23 	.word	0x00026a23
   27514:	0002725d 	.word	0x0002725d

00027518 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27518:	b590      	push	{r4, r7, lr}
   2751a:	b093      	sub	sp, #76	; 0x4c
   2751c:	af00      	add	r7, sp, #0
   2751e:	6078      	str	r0, [r7, #4]
   27520:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27522:	687b      	ldr	r3, [r7, #4]
   27524:	681b      	ldr	r3, [r3, #0]
   27526:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27528:	687b      	ldr	r3, [r7, #4]
   2752a:	681b      	ldr	r3, [r3, #0]
   2752c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2752e:	231c      	movs	r3, #28
   27530:	18fb      	adds	r3, r7, r3
   27532:	0018      	movs	r0, r3
   27534:	4b75      	ldr	r3, [pc, #468]	; (2770c <_spi_set_config+0x1f4>)
   27536:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27538:	231c      	movs	r3, #28
   2753a:	18fb      	adds	r3, r7, r3
   2753c:	2200      	movs	r2, #0
   2753e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27540:	683b      	ldr	r3, [r7, #0]
   27542:	781b      	ldrb	r3, [r3, #0]
   27544:	2b00      	cmp	r3, #0
   27546:	d103      	bne.n	27550 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27548:	231c      	movs	r3, #28
   2754a:	18fb      	adds	r3, r7, r3
   2754c:	2200      	movs	r2, #0
   2754e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27550:	683b      	ldr	r3, [r7, #0]
   27552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27554:	230c      	movs	r3, #12
   27556:	18fb      	adds	r3, r7, r3
   27558:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2755a:	683b      	ldr	r3, [r7, #0]
   2755c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2755e:	230c      	movs	r3, #12
   27560:	18fb      	adds	r3, r7, r3
   27562:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27564:	683b      	ldr	r3, [r7, #0]
   27566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27568:	230c      	movs	r3, #12
   2756a:	18fb      	adds	r3, r7, r3
   2756c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2756e:	683b      	ldr	r3, [r7, #0]
   27570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27572:	230c      	movs	r3, #12
   27574:	18fb      	adds	r3, r7, r3
   27576:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27578:	2347      	movs	r3, #71	; 0x47
   2757a:	18fb      	adds	r3, r7, r3
   2757c:	2200      	movs	r2, #0
   2757e:	701a      	strb	r2, [r3, #0]
   27580:	e02c      	b.n	275dc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27582:	2347      	movs	r3, #71	; 0x47
   27584:	18fb      	adds	r3, r7, r3
   27586:	781a      	ldrb	r2, [r3, #0]
   27588:	230c      	movs	r3, #12
   2758a:	18fb      	adds	r3, r7, r3
   2758c:	0092      	lsls	r2, r2, #2
   2758e:	58d3      	ldr	r3, [r2, r3]
   27590:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27594:	2b00      	cmp	r3, #0
   27596:	d109      	bne.n	275ac <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27598:	2347      	movs	r3, #71	; 0x47
   2759a:	18fb      	adds	r3, r7, r3
   2759c:	781a      	ldrb	r2, [r3, #0]
   2759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   275a0:	0011      	movs	r1, r2
   275a2:	0018      	movs	r0, r3
   275a4:	4b5a      	ldr	r3, [pc, #360]	; (27710 <_spi_set_config+0x1f8>)
   275a6:	4798      	blx	r3
   275a8:	0003      	movs	r3, r0
   275aa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   275ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   275ae:	3301      	adds	r3, #1
   275b0:	d00d      	beq.n	275ce <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   275b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   275b4:	b2da      	uxtb	r2, r3
   275b6:	231c      	movs	r3, #28
   275b8:	18fb      	adds	r3, r7, r3
   275ba:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   275bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   275be:	0c1b      	lsrs	r3, r3, #16
   275c0:	b2db      	uxtb	r3, r3
   275c2:	221c      	movs	r2, #28
   275c4:	18ba      	adds	r2, r7, r2
   275c6:	0011      	movs	r1, r2
   275c8:	0018      	movs	r0, r3
   275ca:	4b52      	ldr	r3, [pc, #328]	; (27714 <_spi_set_config+0x1fc>)
   275cc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   275ce:	2347      	movs	r3, #71	; 0x47
   275d0:	18fb      	adds	r3, r7, r3
   275d2:	781a      	ldrb	r2, [r3, #0]
   275d4:	2347      	movs	r3, #71	; 0x47
   275d6:	18fb      	adds	r3, r7, r3
   275d8:	3201      	adds	r2, #1
   275da:	701a      	strb	r2, [r3, #0]
   275dc:	2347      	movs	r3, #71	; 0x47
   275de:	18fb      	adds	r3, r7, r3
   275e0:	781b      	ldrb	r3, [r3, #0]
   275e2:	2b03      	cmp	r3, #3
   275e4:	d9cd      	bls.n	27582 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   275e6:	683b      	ldr	r3, [r7, #0]
   275e8:	781a      	ldrb	r2, [r3, #0]
   275ea:	687b      	ldr	r3, [r7, #4]
   275ec:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   275ee:	683b      	ldr	r3, [r7, #0]
   275f0:	7c1a      	ldrb	r2, [r3, #16]
   275f2:	687b      	ldr	r3, [r7, #4]
   275f4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   275f6:	683b      	ldr	r3, [r7, #0]
   275f8:	7c9a      	ldrb	r2, [r3, #18]
   275fa:	687b      	ldr	r3, [r7, #4]
   275fc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   275fe:	683b      	ldr	r3, [r7, #0]
   27600:	7d1a      	ldrb	r2, [r3, #20]
   27602:	687b      	ldr	r3, [r7, #4]
   27604:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27606:	230a      	movs	r3, #10
   27608:	18fb      	adds	r3, r7, r3
   2760a:	2200      	movs	r2, #0
   2760c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2760e:	2300      	movs	r3, #0
   27610:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27612:	2300      	movs	r3, #0
   27614:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27616:	683b      	ldr	r3, [r7, #0]
   27618:	781b      	ldrb	r3, [r3, #0]
   2761a:	2b01      	cmp	r3, #1
   2761c:	d129      	bne.n	27672 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2761e:	687b      	ldr	r3, [r7, #4]
   27620:	681b      	ldr	r3, [r3, #0]
   27622:	0018      	movs	r0, r3
   27624:	4b3c      	ldr	r3, [pc, #240]	; (27718 <_spi_set_config+0x200>)
   27626:	4798      	blx	r3
   27628:	0003      	movs	r3, r0
   2762a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2762e:	3314      	adds	r3, #20
   27630:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27632:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27634:	b2db      	uxtb	r3, r3
   27636:	0018      	movs	r0, r3
   27638:	4b38      	ldr	r3, [pc, #224]	; (2771c <_spi_set_config+0x204>)
   2763a:	4798      	blx	r3
   2763c:	0003      	movs	r3, r0
   2763e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27640:	683b      	ldr	r3, [r7, #0]
   27642:	699b      	ldr	r3, [r3, #24]
   27644:	2223      	movs	r2, #35	; 0x23
   27646:	18bc      	adds	r4, r7, r2
   27648:	220a      	movs	r2, #10
   2764a:	18ba      	adds	r2, r7, r2
   2764c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2764e:	0018      	movs	r0, r3
   27650:	4b33      	ldr	r3, [pc, #204]	; (27720 <_spi_set_config+0x208>)
   27652:	4798      	blx	r3
   27654:	0003      	movs	r3, r0
   27656:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27658:	2323      	movs	r3, #35	; 0x23
   2765a:	18fb      	adds	r3, r7, r3
   2765c:	781b      	ldrb	r3, [r3, #0]
   2765e:	2b00      	cmp	r3, #0
   27660:	d001      	beq.n	27666 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   27662:	2317      	movs	r3, #23
   27664:	e04e      	b.n	27704 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   27666:	230a      	movs	r3, #10
   27668:	18fb      	adds	r3, r7, r3
   2766a:	881b      	ldrh	r3, [r3, #0]
   2766c:	b2da      	uxtb	r2, r3
   2766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27670:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   27672:	683b      	ldr	r3, [r7, #0]
   27674:	685b      	ldr	r3, [r3, #4]
   27676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27678:	4313      	orrs	r3, r2
   2767a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2767c:	683b      	ldr	r3, [r7, #0]
   2767e:	689b      	ldr	r3, [r3, #8]
   27680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27682:	4313      	orrs	r3, r2
   27684:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27686:	683b      	ldr	r3, [r7, #0]
   27688:	68db      	ldr	r3, [r3, #12]
   2768a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2768c:	4313      	orrs	r3, r2
   2768e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   27690:	683b      	ldr	r3, [r7, #0]
   27692:	7c1b      	ldrb	r3, [r3, #16]
   27694:	001a      	movs	r2, r3
   27696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27698:	4313      	orrs	r3, r2
   2769a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2769c:	683b      	ldr	r3, [r7, #0]
   2769e:	7c5b      	ldrb	r3, [r3, #17]
   276a0:	2b00      	cmp	r3, #0
   276a2:	d103      	bne.n	276ac <_spi_set_config+0x194>
   276a4:	4b1f      	ldr	r3, [pc, #124]	; (27724 <_spi_set_config+0x20c>)
   276a6:	4798      	blx	r3
   276a8:	1e03      	subs	r3, r0, #0
   276aa:	d003      	beq.n	276b4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   276ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   276ae:	2280      	movs	r2, #128	; 0x80
   276b0:	4313      	orrs	r3, r2
   276b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   276b4:	683b      	ldr	r3, [r7, #0]
   276b6:	7c9b      	ldrb	r3, [r3, #18]
   276b8:	2b00      	cmp	r3, #0
   276ba:	d004      	beq.n	276c6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   276bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   276be:	2280      	movs	r2, #128	; 0x80
   276c0:	0292      	lsls	r2, r2, #10
   276c2:	4313      	orrs	r3, r2
   276c4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   276c6:	683b      	ldr	r3, [r7, #0]
   276c8:	7cdb      	ldrb	r3, [r3, #19]
   276ca:	2b00      	cmp	r3, #0
   276cc:	d004      	beq.n	276d8 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   276ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   276d0:	2280      	movs	r2, #128	; 0x80
   276d2:	0092      	lsls	r2, r2, #2
   276d4:	4313      	orrs	r3, r2
   276d6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   276d8:	683b      	ldr	r3, [r7, #0]
   276da:	7d1b      	ldrb	r3, [r3, #20]
   276dc:	2b00      	cmp	r3, #0
   276de:	d004      	beq.n	276ea <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   276e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   276e2:	2280      	movs	r2, #128	; 0x80
   276e4:	0192      	lsls	r2, r2, #6
   276e6:	4313      	orrs	r3, r2
   276e8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   276ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   276ec:	681a      	ldr	r2, [r3, #0]
   276ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   276f0:	431a      	orrs	r2, r3
   276f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   276f4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   276f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   276f8:	685a      	ldr	r2, [r3, #4]
   276fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   276fc:	431a      	orrs	r2, r3
   276fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27700:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27702:	2300      	movs	r3, #0
}
   27704:	0018      	movs	r0, r3
   27706:	46bd      	mov	sp, r7
   27708:	b013      	add	sp, #76	; 0x4c
   2770a:	bd90      	pop	{r4, r7, pc}
   2770c:	0002704d 	.word	0x0002704d
   27710:	00026ced 	.word	0x00026ced
   27714:	00029a99 	.word	0x00029a99
   27718:	00026ea9 	.word	0x00026ea9
   2771c:	0002985d 	.word	0x0002985d
   27720:	00026a23 	.word	0x00026a23
   27724:	000271c1 	.word	0x000271c1

00027728 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27728:	b590      	push	{r4, r7, lr}
   2772a:	b08b      	sub	sp, #44	; 0x2c
   2772c:	af00      	add	r7, sp, #0
   2772e:	60f8      	str	r0, [r7, #12]
   27730:	60b9      	str	r1, [r7, #8]
   27732:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27734:	68fb      	ldr	r3, [r7, #12]
   27736:	68ba      	ldr	r2, [r7, #8]
   27738:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2773a:	68fb      	ldr	r3, [r7, #12]
   2773c:	681b      	ldr	r3, [r3, #0]
   2773e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27740:	6a3b      	ldr	r3, [r7, #32]
   27742:	681b      	ldr	r3, [r3, #0]
   27744:	2202      	movs	r2, #2
   27746:	4013      	ands	r3, r2
   27748:	d001      	beq.n	2774e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2774a:	231c      	movs	r3, #28
   2774c:	e09c      	b.n	27888 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2774e:	6a3b      	ldr	r3, [r7, #32]
   27750:	681b      	ldr	r3, [r3, #0]
   27752:	2201      	movs	r2, #1
   27754:	4013      	ands	r3, r2
   27756:	d001      	beq.n	2775c <spi_init+0x34>
		return STATUS_BUSY;
   27758:	2305      	movs	r3, #5
   2775a:	e095      	b.n	27888 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2775c:	68fb      	ldr	r3, [r7, #12]
   2775e:	681b      	ldr	r3, [r3, #0]
   27760:	0018      	movs	r0, r3
   27762:	4b4b      	ldr	r3, [pc, #300]	; (27890 <spi_init+0x168>)
   27764:	4798      	blx	r3
   27766:	0003      	movs	r3, r0
   27768:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2776a:	69fb      	ldr	r3, [r7, #28]
   2776c:	3302      	adds	r3, #2
   2776e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27770:	69fb      	ldr	r3, [r7, #28]
   27772:	3314      	adds	r3, #20
   27774:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27776:	2201      	movs	r2, #1
   27778:	69bb      	ldr	r3, [r7, #24]
   2777a:	409a      	lsls	r2, r3
   2777c:	0013      	movs	r3, r2
   2777e:	0019      	movs	r1, r3
   27780:	2002      	movs	r0, #2
   27782:	4b44      	ldr	r3, [pc, #272]	; (27894 <spi_init+0x16c>)
   27784:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27786:	2310      	movs	r3, #16
   27788:	18fb      	adds	r3, r7, r3
   2778a:	0018      	movs	r0, r3
   2778c:	4b42      	ldr	r3, [pc, #264]	; (27898 <spi_init+0x170>)
   2778e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27790:	687b      	ldr	r3, [r7, #4]
   27792:	2224      	movs	r2, #36	; 0x24
   27794:	5c9a      	ldrb	r2, [r3, r2]
   27796:	2310      	movs	r3, #16
   27798:	18fb      	adds	r3, r7, r3
   2779a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2779c:	697b      	ldr	r3, [r7, #20]
   2779e:	b2db      	uxtb	r3, r3
   277a0:	2210      	movs	r2, #16
   277a2:	18ba      	adds	r2, r7, r2
   277a4:	0011      	movs	r1, r2
   277a6:	0018      	movs	r0, r3
   277a8:	4b3c      	ldr	r3, [pc, #240]	; (2789c <spi_init+0x174>)
   277aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   277ac:	697b      	ldr	r3, [r7, #20]
   277ae:	b2db      	uxtb	r3, r3
   277b0:	0018      	movs	r0, r3
   277b2:	4b3b      	ldr	r3, [pc, #236]	; (278a0 <spi_init+0x178>)
   277b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   277b6:	687b      	ldr	r3, [r7, #4]
   277b8:	2224      	movs	r2, #36	; 0x24
   277ba:	5c9b      	ldrb	r3, [r3, r2]
   277bc:	2100      	movs	r1, #0
   277be:	0018      	movs	r0, r3
   277c0:	4b38      	ldr	r3, [pc, #224]	; (278a4 <spi_init+0x17c>)
   277c2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   277c4:	687b      	ldr	r3, [r7, #4]
   277c6:	781b      	ldrb	r3, [r3, #0]
   277c8:	2b01      	cmp	r3, #1
   277ca:	d105      	bne.n	277d8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   277cc:	6a3b      	ldr	r3, [r7, #32]
   277ce:	681b      	ldr	r3, [r3, #0]
   277d0:	220c      	movs	r2, #12
   277d2:	431a      	orrs	r2, r3
   277d4:	6a3b      	ldr	r3, [r7, #32]
   277d6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   277d8:	2327      	movs	r3, #39	; 0x27
   277da:	18fb      	adds	r3, r7, r3
   277dc:	2200      	movs	r2, #0
   277de:	701a      	strb	r2, [r3, #0]
   277e0:	e010      	b.n	27804 <spi_init+0xdc>
		module->callback[i]        = NULL;
   277e2:	2327      	movs	r3, #39	; 0x27
   277e4:	18fb      	adds	r3, r7, r3
   277e6:	781b      	ldrb	r3, [r3, #0]
   277e8:	68fa      	ldr	r2, [r7, #12]
   277ea:	3302      	adds	r3, #2
   277ec:	009b      	lsls	r3, r3, #2
   277ee:	18d3      	adds	r3, r2, r3
   277f0:	3304      	adds	r3, #4
   277f2:	2200      	movs	r2, #0
   277f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   277f6:	2327      	movs	r3, #39	; 0x27
   277f8:	18fb      	adds	r3, r7, r3
   277fa:	781a      	ldrb	r2, [r3, #0]
   277fc:	2327      	movs	r3, #39	; 0x27
   277fe:	18fb      	adds	r3, r7, r3
   27800:	3201      	adds	r2, #1
   27802:	701a      	strb	r2, [r3, #0]
   27804:	2327      	movs	r3, #39	; 0x27
   27806:	18fb      	adds	r3, r7, r3
   27808:	781b      	ldrb	r3, [r3, #0]
   2780a:	2b06      	cmp	r3, #6
   2780c:	d9e9      	bls.n	277e2 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   2780e:	68fb      	ldr	r3, [r7, #12]
   27810:	2200      	movs	r2, #0
   27812:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27814:	68fb      	ldr	r3, [r7, #12]
   27816:	2200      	movs	r2, #0
   27818:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2781a:	68fb      	ldr	r3, [r7, #12]
   2781c:	2200      	movs	r2, #0
   2781e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27820:	68fb      	ldr	r3, [r7, #12]
   27822:	2200      	movs	r2, #0
   27824:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27826:	68fb      	ldr	r3, [r7, #12]
   27828:	2236      	movs	r2, #54	; 0x36
   2782a:	2100      	movs	r1, #0
   2782c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   2782e:	68fb      	ldr	r3, [r7, #12]
   27830:	2237      	movs	r2, #55	; 0x37
   27832:	2100      	movs	r1, #0
   27834:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27836:	68fb      	ldr	r3, [r7, #12]
   27838:	2238      	movs	r2, #56	; 0x38
   2783a:	2100      	movs	r1, #0
   2783c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   2783e:	68fb      	ldr	r3, [r7, #12]
   27840:	2203      	movs	r2, #3
   27842:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27844:	68fb      	ldr	r3, [r7, #12]
   27846:	2200      	movs	r2, #0
   27848:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2784a:	68fb      	ldr	r3, [r7, #12]
   2784c:	681b      	ldr	r3, [r3, #0]
   2784e:	2213      	movs	r2, #19
   27850:	18bc      	adds	r4, r7, r2
   27852:	0018      	movs	r0, r3
   27854:	4b0e      	ldr	r3, [pc, #56]	; (27890 <spi_init+0x168>)
   27856:	4798      	blx	r3
   27858:	0003      	movs	r3, r0
   2785a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   2785c:	4a12      	ldr	r2, [pc, #72]	; (278a8 <spi_init+0x180>)
   2785e:	2313      	movs	r3, #19
   27860:	18fb      	adds	r3, r7, r3
   27862:	781b      	ldrb	r3, [r3, #0]
   27864:	0011      	movs	r1, r2
   27866:	0018      	movs	r0, r3
   27868:	4b10      	ldr	r3, [pc, #64]	; (278ac <spi_init+0x184>)
   2786a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2786c:	2313      	movs	r3, #19
   2786e:	18fb      	adds	r3, r7, r3
   27870:	781a      	ldrb	r2, [r3, #0]
   27872:	4b0f      	ldr	r3, [pc, #60]	; (278b0 <spi_init+0x188>)
   27874:	0092      	lsls	r2, r2, #2
   27876:	68f9      	ldr	r1, [r7, #12]
   27878:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2787a:	687a      	ldr	r2, [r7, #4]
   2787c:	68fb      	ldr	r3, [r7, #12]
   2787e:	0011      	movs	r1, r2
   27880:	0018      	movs	r0, r3
   27882:	4b0c      	ldr	r3, [pc, #48]	; (278b4 <spi_init+0x18c>)
   27884:	4798      	blx	r3
   27886:	0003      	movs	r3, r0
}
   27888:	0018      	movs	r0, r3
   2788a:	46bd      	mov	sp, r7
   2788c:	b00b      	add	sp, #44	; 0x2c
   2788e:	bd90      	pop	{r4, r7, pc}
   27890:	00026ea9 	.word	0x00026ea9
   27894:	00027165 	.word	0x00027165
   27898:	0002714d 	.word	0x0002714d
   2789c:	00029739 	.word	0x00029739
   278a0:	0002977d 	.word	0x0002977d
   278a4:	00026c61 	.word	0x00026c61
   278a8:	00027d81 	.word	0x00027d81
   278ac:	00026f0d 	.word	0x00026f0d
   278b0:	20005a0c 	.word	0x20005a0c
   278b4:	00027519 	.word	0x00027519

000278b8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   278b8:	b590      	push	{r4, r7, lr}
   278ba:	b087      	sub	sp, #28
   278bc:	af00      	add	r7, sp, #0
   278be:	60f8      	str	r0, [r7, #12]
   278c0:	60b9      	str	r1, [r7, #8]
   278c2:	0019      	movs	r1, r3
   278c4:	1dbb      	adds	r3, r7, #6
   278c6:	801a      	strh	r2, [r3, #0]
   278c8:	1d3b      	adds	r3, r7, #4
   278ca:	1c0a      	adds	r2, r1, #0
   278cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   278ce:	68fb      	ldr	r3, [r7, #12]
   278d0:	2238      	movs	r2, #56	; 0x38
   278d2:	5c9b      	ldrb	r3, [r3, r2]
   278d4:	b2db      	uxtb	r3, r3
   278d6:	2b05      	cmp	r3, #5
   278d8:	d101      	bne.n	278de <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   278da:	2305      	movs	r3, #5
   278dc:	e07a      	b.n	279d4 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   278de:	1dbb      	adds	r3, r7, #6
   278e0:	881b      	ldrh	r3, [r3, #0]
   278e2:	2b00      	cmp	r3, #0
   278e4:	d101      	bne.n	278ea <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   278e6:	2317      	movs	r3, #23
   278e8:	e074      	b.n	279d4 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   278ea:	68fb      	ldr	r3, [r7, #12]
   278ec:	79db      	ldrb	r3, [r3, #7]
   278ee:	2201      	movs	r2, #1
   278f0:	4053      	eors	r3, r2
   278f2:	b2db      	uxtb	r3, r3
   278f4:	2b00      	cmp	r3, #0
   278f6:	d001      	beq.n	278fc <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   278f8:	231c      	movs	r3, #28
   278fa:	e06b      	b.n	279d4 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   278fc:	2316      	movs	r3, #22
   278fe:	18fb      	adds	r3, r7, r3
   27900:	2200      	movs	r2, #0
   27902:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27904:	e05e      	b.n	279c4 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27906:	68fb      	ldr	r3, [r7, #12]
   27908:	795b      	ldrb	r3, [r3, #5]
   2790a:	2b01      	cmp	r3, #1
   2790c:	d112      	bne.n	27934 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   2790e:	46c0      	nop			; (mov r8, r8)
   27910:	68fb      	ldr	r3, [r7, #12]
   27912:	0018      	movs	r0, r3
   27914:	4b31      	ldr	r3, [pc, #196]	; (279dc <spi_read_buffer_wait+0x124>)
   27916:	4798      	blx	r3
   27918:	0003      	movs	r3, r0
   2791a:	001a      	movs	r2, r3
   2791c:	2301      	movs	r3, #1
   2791e:	4053      	eors	r3, r2
   27920:	b2db      	uxtb	r3, r3
   27922:	2b00      	cmp	r3, #0
   27924:	d1f4      	bne.n	27910 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27926:	1d3b      	adds	r3, r7, #4
   27928:	881a      	ldrh	r2, [r3, #0]
   2792a:	68fb      	ldr	r3, [r7, #12]
   2792c:	0011      	movs	r1, r2
   2792e:	0018      	movs	r0, r3
   27930:	4b2b      	ldr	r3, [pc, #172]	; (279e0 <spi_read_buffer_wait+0x128>)
   27932:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27934:	46c0      	nop			; (mov r8, r8)
   27936:	68fb      	ldr	r3, [r7, #12]
   27938:	0018      	movs	r0, r3
   2793a:	4b2a      	ldr	r3, [pc, #168]	; (279e4 <spi_read_buffer_wait+0x12c>)
   2793c:	4798      	blx	r3
   2793e:	0003      	movs	r3, r0
   27940:	001a      	movs	r2, r3
   27942:	2301      	movs	r3, #1
   27944:	4053      	eors	r3, r2
   27946:	b2db      	uxtb	r3, r3
   27948:	2b00      	cmp	r3, #0
   2794a:	d1f4      	bne.n	27936 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   2794c:	2312      	movs	r3, #18
   2794e:	18fb      	adds	r3, r7, r3
   27950:	2200      	movs	r2, #0
   27952:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27954:	2315      	movs	r3, #21
   27956:	18fc      	adds	r4, r7, r3
   27958:	2312      	movs	r3, #18
   2795a:	18fa      	adds	r2, r7, r3
   2795c:	68fb      	ldr	r3, [r7, #12]
   2795e:	0011      	movs	r1, r2
   27960:	0018      	movs	r0, r3
   27962:	4b21      	ldr	r3, [pc, #132]	; (279e8 <spi_read_buffer_wait+0x130>)
   27964:	4798      	blx	r3
   27966:	0003      	movs	r3, r0
   27968:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2796a:	2315      	movs	r3, #21
   2796c:	18fb      	adds	r3, r7, r3
   2796e:	781b      	ldrb	r3, [r3, #0]
   27970:	2b00      	cmp	r3, #0
   27972:	d003      	beq.n	2797c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27974:	2315      	movs	r3, #21
   27976:	18fb      	adds	r3, r7, r3
   27978:	781b      	ldrb	r3, [r3, #0]
   2797a:	e02b      	b.n	279d4 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2797c:	2316      	movs	r3, #22
   2797e:	18fb      	adds	r3, r7, r3
   27980:	881b      	ldrh	r3, [r3, #0]
   27982:	2216      	movs	r2, #22
   27984:	18ba      	adds	r2, r7, r2
   27986:	1c59      	adds	r1, r3, #1
   27988:	8011      	strh	r1, [r2, #0]
   2798a:	001a      	movs	r2, r3
   2798c:	68bb      	ldr	r3, [r7, #8]
   2798e:	189b      	adds	r3, r3, r2
   27990:	2212      	movs	r2, #18
   27992:	18ba      	adds	r2, r7, r2
   27994:	8812      	ldrh	r2, [r2, #0]
   27996:	b2d2      	uxtb	r2, r2
   27998:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2799a:	68fb      	ldr	r3, [r7, #12]
   2799c:	799b      	ldrb	r3, [r3, #6]
   2799e:	2b01      	cmp	r3, #1
   279a0:	d110      	bne.n	279c4 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   279a2:	2316      	movs	r3, #22
   279a4:	18fb      	adds	r3, r7, r3
   279a6:	881b      	ldrh	r3, [r3, #0]
   279a8:	2216      	movs	r2, #22
   279aa:	18ba      	adds	r2, r7, r2
   279ac:	1c59      	adds	r1, r3, #1
   279ae:	8011      	strh	r1, [r2, #0]
   279b0:	001a      	movs	r2, r3
   279b2:	68bb      	ldr	r3, [r7, #8]
   279b4:	189b      	adds	r3, r3, r2
   279b6:	2212      	movs	r2, #18
   279b8:	18ba      	adds	r2, r7, r2
   279ba:	8812      	ldrh	r2, [r2, #0]
   279bc:	0a12      	lsrs	r2, r2, #8
   279be:	b292      	uxth	r2, r2
   279c0:	b2d2      	uxtb	r2, r2
   279c2:	701a      	strb	r2, [r3, #0]
	while (length--) {
   279c4:	1dbb      	adds	r3, r7, #6
   279c6:	881b      	ldrh	r3, [r3, #0]
   279c8:	1dba      	adds	r2, r7, #6
   279ca:	1e59      	subs	r1, r3, #1
   279cc:	8011      	strh	r1, [r2, #0]
   279ce:	2b00      	cmp	r3, #0
   279d0:	d199      	bne.n	27906 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   279d2:	2300      	movs	r3, #0
}
   279d4:	0018      	movs	r0, r3
   279d6:	46bd      	mov	sp, r7
   279d8:	b007      	add	sp, #28
   279da:	bd90      	pop	{r4, r7, pc}
   279dc:	00027331 	.word	0x00027331
   279e0:	00027381 	.word	0x00027381
   279e4:	00027359 	.word	0x00027359
   279e8:	000273c9 	.word	0x000273c9

000279ec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   279ec:	b580      	push	{r7, lr}
   279ee:	b086      	sub	sp, #24
   279f0:	af00      	add	r7, sp, #0
   279f2:	60f8      	str	r0, [r7, #12]
   279f4:	60b9      	str	r1, [r7, #8]
   279f6:	1dfb      	adds	r3, r7, #7
   279f8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   279fa:	68fb      	ldr	r3, [r7, #12]
   279fc:	795b      	ldrb	r3, [r3, #5]
   279fe:	2b01      	cmp	r3, #1
   27a00:	d001      	beq.n	27a06 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27a02:	2315      	movs	r3, #21
   27a04:	e05c      	b.n	27ac0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27a06:	68fb      	ldr	r3, [r7, #12]
   27a08:	7a1b      	ldrb	r3, [r3, #8]
   27a0a:	2201      	movs	r2, #1
   27a0c:	4053      	eors	r3, r2
   27a0e:	b2db      	uxtb	r3, r3
   27a10:	2b00      	cmp	r3, #0
   27a12:	d054      	beq.n	27abe <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27a14:	1dfb      	adds	r3, r7, #7
   27a16:	781b      	ldrb	r3, [r3, #0]
   27a18:	2b00      	cmp	r3, #0
   27a1a:	d04a      	beq.n	27ab2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27a1c:	68bb      	ldr	r3, [r7, #8]
   27a1e:	785b      	ldrb	r3, [r3, #1]
   27a20:	2b00      	cmp	r3, #0
   27a22:	d03f      	beq.n	27aa4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27a24:	68fb      	ldr	r3, [r7, #12]
   27a26:	0018      	movs	r0, r3
   27a28:	4b27      	ldr	r3, [pc, #156]	; (27ac8 <spi_select_slave+0xdc>)
   27a2a:	4798      	blx	r3
   27a2c:	0003      	movs	r3, r0
   27a2e:	001a      	movs	r2, r3
   27a30:	2301      	movs	r3, #1
   27a32:	4053      	eors	r3, r2
   27a34:	b2db      	uxtb	r3, r3
   27a36:	2b00      	cmp	r3, #0
   27a38:	d007      	beq.n	27a4a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27a3a:	68bb      	ldr	r3, [r7, #8]
   27a3c:	781b      	ldrb	r3, [r3, #0]
   27a3e:	2101      	movs	r1, #1
   27a40:	0018      	movs	r0, r3
   27a42:	4b22      	ldr	r3, [pc, #136]	; (27acc <spi_select_slave+0xe0>)
   27a44:	4798      	blx	r3
					return STATUS_BUSY;
   27a46:	2305      	movs	r3, #5
   27a48:	e03a      	b.n	27ac0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27a4a:	68bb      	ldr	r3, [r7, #8]
   27a4c:	781b      	ldrb	r3, [r3, #0]
   27a4e:	2100      	movs	r1, #0
   27a50:	0018      	movs	r0, r3
   27a52:	4b1e      	ldr	r3, [pc, #120]	; (27acc <spi_select_slave+0xe0>)
   27a54:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27a56:	68bb      	ldr	r3, [r7, #8]
   27a58:	789b      	ldrb	r3, [r3, #2]
   27a5a:	b29a      	uxth	r2, r3
   27a5c:	68fb      	ldr	r3, [r7, #12]
   27a5e:	0011      	movs	r1, r2
   27a60:	0018      	movs	r0, r3
   27a62:	4b1b      	ldr	r3, [pc, #108]	; (27ad0 <spi_select_slave+0xe4>)
   27a64:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   27a66:	68fb      	ldr	r3, [r7, #12]
   27a68:	79db      	ldrb	r3, [r3, #7]
   27a6a:	2201      	movs	r2, #1
   27a6c:	4053      	eors	r3, r2
   27a6e:	b2db      	uxtb	r3, r3
   27a70:	2b00      	cmp	r3, #0
   27a72:	d024      	beq.n	27abe <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27a74:	46c0      	nop			; (mov r8, r8)
   27a76:	68fb      	ldr	r3, [r7, #12]
   27a78:	0018      	movs	r0, r3
   27a7a:	4b16      	ldr	r3, [pc, #88]	; (27ad4 <spi_select_slave+0xe8>)
   27a7c:	4798      	blx	r3
   27a7e:	0003      	movs	r3, r0
   27a80:	001a      	movs	r2, r3
   27a82:	2301      	movs	r3, #1
   27a84:	4053      	eors	r3, r2
   27a86:	b2db      	uxtb	r3, r3
   27a88:	2b00      	cmp	r3, #0
   27a8a:	d1f4      	bne.n	27a76 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27a8c:	2316      	movs	r3, #22
   27a8e:	18fb      	adds	r3, r7, r3
   27a90:	2200      	movs	r2, #0
   27a92:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27a94:	2316      	movs	r3, #22
   27a96:	18fa      	adds	r2, r7, r3
   27a98:	68fb      	ldr	r3, [r7, #12]
   27a9a:	0011      	movs	r1, r2
   27a9c:	0018      	movs	r0, r3
   27a9e:	4b0e      	ldr	r3, [pc, #56]	; (27ad8 <spi_select_slave+0xec>)
   27aa0:	4798      	blx	r3
   27aa2:	e00c      	b.n	27abe <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27aa4:	68bb      	ldr	r3, [r7, #8]
   27aa6:	781b      	ldrb	r3, [r3, #0]
   27aa8:	2100      	movs	r1, #0
   27aaa:	0018      	movs	r0, r3
   27aac:	4b07      	ldr	r3, [pc, #28]	; (27acc <spi_select_slave+0xe0>)
   27aae:	4798      	blx	r3
   27ab0:	e005      	b.n	27abe <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   27ab2:	68bb      	ldr	r3, [r7, #8]
   27ab4:	781b      	ldrb	r3, [r3, #0]
   27ab6:	2101      	movs	r1, #1
   27ab8:	0018      	movs	r0, r3
   27aba:	4b04      	ldr	r3, [pc, #16]	; (27acc <spi_select_slave+0xe0>)
   27abc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   27abe:	2300      	movs	r3, #0
}
   27ac0:	0018      	movs	r0, r3
   27ac2:	46bd      	mov	sp, r7
   27ac4:	b006      	add	sp, #24
   27ac6:	bd80      	pop	{r7, pc}
   27ac8:	00027331 	.word	0x00027331
   27acc:	000270f9 	.word	0x000270f9
   27ad0:	00027381 	.word	0x00027381
   27ad4:	00027359 	.word	0x00027359
   27ad8:	000273c9 	.word	0x000273c9

00027adc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27adc:	b580      	push	{r7, lr}
   27ade:	b086      	sub	sp, #24
   27ae0:	af00      	add	r7, sp, #0
   27ae2:	60f8      	str	r0, [r7, #12]
   27ae4:	60b9      	str	r1, [r7, #8]
   27ae6:	1dbb      	adds	r3, r7, #6
   27ae8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27aea:	68fb      	ldr	r3, [r7, #12]
   27aec:	2238      	movs	r2, #56	; 0x38
   27aee:	5c9b      	ldrb	r3, [r3, r2]
   27af0:	b2db      	uxtb	r3, r3
   27af2:	2b05      	cmp	r3, #5
   27af4:	d101      	bne.n	27afa <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27af6:	2305      	movs	r3, #5
   27af8:	e087      	b.n	27c0a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   27afa:	1dbb      	adds	r3, r7, #6
   27afc:	881b      	ldrh	r3, [r3, #0]
   27afe:	2b00      	cmp	r3, #0
   27b00:	d101      	bne.n	27b06 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27b02:	2317      	movs	r3, #23
   27b04:	e081      	b.n	27c0a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   27b06:	2316      	movs	r3, #22
   27b08:	18fb      	adds	r3, r7, r3
   27b0a:	2200      	movs	r2, #0
   27b0c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27b0e:	2314      	movs	r3, #20
   27b10:	18fb      	adds	r3, r7, r3
   27b12:	1dba      	adds	r2, r7, #6
   27b14:	8812      	ldrh	r2, [r2, #0]
   27b16:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   27b18:	e05f      	b.n	27bda <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   27b1a:	46c0      	nop			; (mov r8, r8)
   27b1c:	68fb      	ldr	r3, [r7, #12]
   27b1e:	0018      	movs	r0, r3
   27b20:	4b3c      	ldr	r3, [pc, #240]	; (27c14 <spi_write_buffer_wait+0x138>)
   27b22:	4798      	blx	r3
   27b24:	0003      	movs	r3, r0
   27b26:	001a      	movs	r2, r3
   27b28:	2301      	movs	r3, #1
   27b2a:	4053      	eors	r3, r2
   27b2c:	b2db      	uxtb	r3, r3
   27b2e:	2b00      	cmp	r3, #0
   27b30:	d1f4      	bne.n	27b1c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27b32:	2316      	movs	r3, #22
   27b34:	18fb      	adds	r3, r7, r3
   27b36:	881b      	ldrh	r3, [r3, #0]
   27b38:	2216      	movs	r2, #22
   27b3a:	18ba      	adds	r2, r7, r2
   27b3c:	1c59      	adds	r1, r3, #1
   27b3e:	8011      	strh	r1, [r2, #0]
   27b40:	001a      	movs	r2, r3
   27b42:	68bb      	ldr	r3, [r7, #8]
   27b44:	189b      	adds	r3, r3, r2
   27b46:	781a      	ldrb	r2, [r3, #0]
   27b48:	2312      	movs	r3, #18
   27b4a:	18fb      	adds	r3, r7, r3
   27b4c:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27b4e:	68fb      	ldr	r3, [r7, #12]
   27b50:	799b      	ldrb	r3, [r3, #6]
   27b52:	2b01      	cmp	r3, #1
   27b54:	d115      	bne.n	27b82 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27b56:	2316      	movs	r3, #22
   27b58:	18fb      	adds	r3, r7, r3
   27b5a:	881b      	ldrh	r3, [r3, #0]
   27b5c:	2216      	movs	r2, #22
   27b5e:	18ba      	adds	r2, r7, r2
   27b60:	1c59      	adds	r1, r3, #1
   27b62:	8011      	strh	r1, [r2, #0]
   27b64:	001a      	movs	r2, r3
   27b66:	68bb      	ldr	r3, [r7, #8]
   27b68:	189b      	adds	r3, r3, r2
   27b6a:	781b      	ldrb	r3, [r3, #0]
   27b6c:	021b      	lsls	r3, r3, #8
   27b6e:	b21a      	sxth	r2, r3
   27b70:	2312      	movs	r3, #18
   27b72:	18fb      	adds	r3, r7, r3
   27b74:	2100      	movs	r1, #0
   27b76:	5e5b      	ldrsh	r3, [r3, r1]
   27b78:	4313      	orrs	r3, r2
   27b7a:	b21a      	sxth	r2, r3
   27b7c:	2312      	movs	r3, #18
   27b7e:	18fb      	adds	r3, r7, r3
   27b80:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27b82:	2312      	movs	r3, #18
   27b84:	18fb      	adds	r3, r7, r3
   27b86:	881a      	ldrh	r2, [r3, #0]
   27b88:	68fb      	ldr	r3, [r7, #12]
   27b8a:	0011      	movs	r1, r2
   27b8c:	0018      	movs	r0, r3
   27b8e:	4b22      	ldr	r3, [pc, #136]	; (27c18 <spi_write_buffer_wait+0x13c>)
   27b90:	4798      	blx	r3

		if (module->receiver_enabled) {
   27b92:	68fb      	ldr	r3, [r7, #12]
   27b94:	79db      	ldrb	r3, [r3, #7]
   27b96:	2214      	movs	r2, #20
   27b98:	18ba      	adds	r2, r7, r2
   27b9a:	2114      	movs	r1, #20
   27b9c:	1879      	adds	r1, r7, r1
   27b9e:	8809      	ldrh	r1, [r1, #0]
   27ba0:	8011      	strh	r1, [r2, #0]
   27ba2:	2b00      	cmp	r3, #0
   27ba4:	d019      	beq.n	27bda <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   27ba6:	46c0      	nop			; (mov r8, r8)
   27ba8:	68fb      	ldr	r3, [r7, #12]
   27baa:	0018      	movs	r0, r3
   27bac:	4b1b      	ldr	r3, [pc, #108]	; (27c1c <spi_write_buffer_wait+0x140>)
   27bae:	4798      	blx	r3
   27bb0:	0003      	movs	r3, r0
   27bb2:	001a      	movs	r2, r3
   27bb4:	2301      	movs	r3, #1
   27bb6:	4053      	eors	r3, r2
   27bb8:	b2db      	uxtb	r3, r3
   27bba:	2b00      	cmp	r3, #0
   27bbc:	d1f4      	bne.n	27ba8 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   27bbe:	2310      	movs	r3, #16
   27bc0:	18fa      	adds	r2, r7, r3
   27bc2:	68fb      	ldr	r3, [r7, #12]
   27bc4:	0011      	movs	r1, r2
   27bc6:	0018      	movs	r0, r3
   27bc8:	4b15      	ldr	r3, [pc, #84]	; (27c20 <spi_write_buffer_wait+0x144>)
   27bca:	4798      	blx	r3
			flush_length--;
   27bcc:	2314      	movs	r3, #20
   27bce:	18fb      	adds	r3, r7, r3
   27bd0:	881a      	ldrh	r2, [r3, #0]
   27bd2:	2314      	movs	r3, #20
   27bd4:	18fb      	adds	r3, r7, r3
   27bd6:	3a01      	subs	r2, #1
   27bd8:	801a      	strh	r2, [r3, #0]
	while (length--) {
   27bda:	1dbb      	adds	r3, r7, #6
   27bdc:	881b      	ldrh	r3, [r3, #0]
   27bde:	1dba      	adds	r2, r7, #6
   27be0:	1e59      	subs	r1, r3, #1
   27be2:	8011      	strh	r1, [r2, #0]
   27be4:	2b00      	cmp	r3, #0
   27be6:	d198      	bne.n	27b1a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   27be8:	68fb      	ldr	r3, [r7, #12]
   27bea:	795b      	ldrb	r3, [r3, #5]
   27bec:	2b01      	cmp	r3, #1
   27bee:	d10b      	bne.n	27c08 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27bf0:	46c0      	nop			; (mov r8, r8)
   27bf2:	68fb      	ldr	r3, [r7, #12]
   27bf4:	0018      	movs	r0, r3
   27bf6:	4b0b      	ldr	r3, [pc, #44]	; (27c24 <spi_write_buffer_wait+0x148>)
   27bf8:	4798      	blx	r3
   27bfa:	0003      	movs	r3, r0
   27bfc:	001a      	movs	r2, r3
   27bfe:	2301      	movs	r3, #1
   27c00:	4053      	eors	r3, r2
   27c02:	b2db      	uxtb	r3, r3
   27c04:	2b00      	cmp	r3, #0
   27c06:	d1f4      	bne.n	27bf2 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   27c08:	2300      	movs	r3, #0
}
   27c0a:	0018      	movs	r0, r3
   27c0c:	46bd      	mov	sp, r7
   27c0e:	b006      	add	sp, #24
   27c10:	bd80      	pop	{r7, pc}
   27c12:	46c0      	nop			; (mov r8, r8)
   27c14:	00027331 	.word	0x00027331
   27c18:	00027381 	.word	0x00027381
   27c1c:	00027359 	.word	0x00027359
   27c20:	000273c9 	.word	0x000273c9
   27c24:	00027309 	.word	0x00027309

00027c28 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   27c28:	b580      	push	{r7, lr}
   27c2a:	b084      	sub	sp, #16
   27c2c:	af00      	add	r7, sp, #0
   27c2e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27c30:	687b      	ldr	r3, [r7, #4]
   27c32:	681b      	ldr	r3, [r3, #0]
   27c34:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   27c36:	687b      	ldr	r3, [r7, #4]
   27c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27c3a:	781b      	ldrb	r3, [r3, #0]
   27c3c:	b2da      	uxtb	r2, r3
   27c3e:	230e      	movs	r3, #14
   27c40:	18fb      	adds	r3, r7, r3
   27c42:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27c44:	687b      	ldr	r3, [r7, #4]
   27c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27c48:	1c5a      	adds	r2, r3, #1
   27c4a:	687b      	ldr	r3, [r7, #4]
   27c4c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27c4e:	687b      	ldr	r3, [r7, #4]
   27c50:	799b      	ldrb	r3, [r3, #6]
   27c52:	2b01      	cmp	r3, #1
   27c54:	d113      	bne.n	27c7e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   27c56:	687b      	ldr	r3, [r7, #4]
   27c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27c5a:	781b      	ldrb	r3, [r3, #0]
   27c5c:	b2db      	uxtb	r3, r3
   27c5e:	021b      	lsls	r3, r3, #8
   27c60:	b21a      	sxth	r2, r3
   27c62:	230e      	movs	r3, #14
   27c64:	18fb      	adds	r3, r7, r3
   27c66:	2100      	movs	r1, #0
   27c68:	5e5b      	ldrsh	r3, [r3, r1]
   27c6a:	4313      	orrs	r3, r2
   27c6c:	b21a      	sxth	r2, r3
   27c6e:	230e      	movs	r3, #14
   27c70:	18fb      	adds	r3, r7, r3
   27c72:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27c74:	687b      	ldr	r3, [r7, #4]
   27c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27c78:	1c5a      	adds	r2, r3, #1
   27c7a:	687b      	ldr	r3, [r7, #4]
   27c7c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   27c7e:	230e      	movs	r3, #14
   27c80:	18fb      	adds	r3, r7, r3
   27c82:	881b      	ldrh	r3, [r3, #0]
   27c84:	05db      	lsls	r3, r3, #23
   27c86:	0dda      	lsrs	r2, r3, #23
   27c88:	68bb      	ldr	r3, [r7, #8]
   27c8a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   27c8c:	687b      	ldr	r3, [r7, #4]
   27c8e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27c90:	b29b      	uxth	r3, r3
   27c92:	3b01      	subs	r3, #1
   27c94:	b29a      	uxth	r2, r3
   27c96:	687b      	ldr	r3, [r7, #4]
   27c98:	869a      	strh	r2, [r3, #52]	; 0x34
}
   27c9a:	46c0      	nop			; (mov r8, r8)
   27c9c:	46bd      	mov	sp, r7
   27c9e:	b004      	add	sp, #16
   27ca0:	bd80      	pop	{r7, pc}
	...

00027ca4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   27ca4:	b580      	push	{r7, lr}
   27ca6:	b084      	sub	sp, #16
   27ca8:	af00      	add	r7, sp, #0
   27caa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27cac:	687b      	ldr	r3, [r7, #4]
   27cae:	681b      	ldr	r3, [r3, #0]
   27cb0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   27cb2:	4b08      	ldr	r3, [pc, #32]	; (27cd4 <_spi_write_dummy+0x30>)
   27cb4:	881b      	ldrh	r3, [r3, #0]
   27cb6:	001a      	movs	r2, r3
   27cb8:	68fb      	ldr	r3, [r7, #12]
   27cba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27cbc:	687b      	ldr	r3, [r7, #4]
   27cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27cc0:	b29b      	uxth	r3, r3
   27cc2:	3b01      	subs	r3, #1
   27cc4:	b29a      	uxth	r2, r3
   27cc6:	687b      	ldr	r3, [r7, #4]
   27cc8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27cca:	46c0      	nop			; (mov r8, r8)
   27ccc:	46bd      	mov	sp, r7
   27cce:	b004      	add	sp, #16
   27cd0:	bd80      	pop	{r7, pc}
   27cd2:	46c0      	nop			; (mov r8, r8)
   27cd4:	20005a24 	.word	0x20005a24

00027cd8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   27cd8:	b580      	push	{r7, lr}
   27cda:	b084      	sub	sp, #16
   27cdc:	af00      	add	r7, sp, #0
   27cde:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27ce0:	687b      	ldr	r3, [r7, #4]
   27ce2:	681b      	ldr	r3, [r3, #0]
   27ce4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   27ce6:	230a      	movs	r3, #10
   27ce8:	18fb      	adds	r3, r7, r3
   27cea:	2200      	movs	r2, #0
   27cec:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   27cee:	68fb      	ldr	r3, [r7, #12]
   27cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27cf2:	230a      	movs	r3, #10
   27cf4:	18fb      	adds	r3, r7, r3
   27cf6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27cf8:	687b      	ldr	r3, [r7, #4]
   27cfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27cfc:	b29b      	uxth	r3, r3
   27cfe:	3b01      	subs	r3, #1
   27d00:	b29a      	uxth	r2, r3
   27d02:	687b      	ldr	r3, [r7, #4]
   27d04:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27d06:	46c0      	nop			; (mov r8, r8)
   27d08:	46bd      	mov	sp, r7
   27d0a:	b004      	add	sp, #16
   27d0c:	bd80      	pop	{r7, pc}

00027d0e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   27d0e:	b580      	push	{r7, lr}
   27d10:	b084      	sub	sp, #16
   27d12:	af00      	add	r7, sp, #0
   27d14:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27d16:	687b      	ldr	r3, [r7, #4]
   27d18:	681b      	ldr	r3, [r3, #0]
   27d1a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   27d1c:	68fb      	ldr	r3, [r7, #12]
   27d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d20:	b29a      	uxth	r2, r3
   27d22:	230a      	movs	r3, #10
   27d24:	18fb      	adds	r3, r7, r3
   27d26:	05d2      	lsls	r2, r2, #23
   27d28:	0dd2      	lsrs	r2, r2, #23
   27d2a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   27d2c:	687b      	ldr	r3, [r7, #4]
   27d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d30:	220a      	movs	r2, #10
   27d32:	18ba      	adds	r2, r7, r2
   27d34:	8812      	ldrh	r2, [r2, #0]
   27d36:	b2d2      	uxtb	r2, r2
   27d38:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   27d3a:	687b      	ldr	r3, [r7, #4]
   27d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d3e:	1c5a      	adds	r2, r3, #1
   27d40:	687b      	ldr	r3, [r7, #4]
   27d42:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27d44:	687b      	ldr	r3, [r7, #4]
   27d46:	799b      	ldrb	r3, [r3, #6]
   27d48:	2b01      	cmp	r3, #1
   27d4a:	d10d      	bne.n	27d68 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   27d4c:	687b      	ldr	r3, [r7, #4]
   27d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d50:	220a      	movs	r2, #10
   27d52:	18ba      	adds	r2, r7, r2
   27d54:	8812      	ldrh	r2, [r2, #0]
   27d56:	0a12      	lsrs	r2, r2, #8
   27d58:	b292      	uxth	r2, r2
   27d5a:	b2d2      	uxtb	r2, r2
   27d5c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   27d5e:	687b      	ldr	r3, [r7, #4]
   27d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d62:	1c5a      	adds	r2, r3, #1
   27d64:	687b      	ldr	r3, [r7, #4]
   27d66:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   27d68:	687b      	ldr	r3, [r7, #4]
   27d6a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27d6c:	b29b      	uxth	r3, r3
   27d6e:	3b01      	subs	r3, #1
   27d70:	b29a      	uxth	r2, r3
   27d72:	687b      	ldr	r3, [r7, #4]
   27d74:	861a      	strh	r2, [r3, #48]	; 0x30
}
   27d76:	46c0      	nop			; (mov r8, r8)
   27d78:	46bd      	mov	sp, r7
   27d7a:	b004      	add	sp, #16
   27d7c:	bd80      	pop	{r7, pc}
	...

00027d80 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   27d80:	b580      	push	{r7, lr}
   27d82:	b086      	sub	sp, #24
   27d84:	af00      	add	r7, sp, #0
   27d86:	0002      	movs	r2, r0
   27d88:	1dfb      	adds	r3, r7, #7
   27d8a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   27d8c:	1dfb      	adds	r3, r7, #7
   27d8e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   27d90:	4b96      	ldr	r3, [pc, #600]	; (27fec <_spi_interrupt_handler+0x26c>)
   27d92:	0092      	lsls	r2, r2, #2
   27d94:	58d3      	ldr	r3, [r2, r3]
   27d96:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27d98:	697b      	ldr	r3, [r7, #20]
   27d9a:	681b      	ldr	r3, [r3, #0]
   27d9c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   27d9e:	697b      	ldr	r3, [r7, #20]
   27da0:	2237      	movs	r2, #55	; 0x37
   27da2:	5c9a      	ldrb	r2, [r3, r2]
   27da4:	697b      	ldr	r3, [r7, #20]
   27da6:	2136      	movs	r1, #54	; 0x36
   27da8:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   27daa:	230f      	movs	r3, #15
   27dac:	18fb      	adds	r3, r7, r3
   27dae:	400a      	ands	r2, r1
   27db0:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   27db2:	693b      	ldr	r3, [r7, #16]
   27db4:	7e1b      	ldrb	r3, [r3, #24]
   27db6:	b2da      	uxtb	r2, r3
   27db8:	230c      	movs	r3, #12
   27dba:	18fb      	adds	r3, r7, r3
   27dbc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   27dbe:	693b      	ldr	r3, [r7, #16]
   27dc0:	7d9b      	ldrb	r3, [r3, #22]
   27dc2:	b2db      	uxtb	r3, r3
   27dc4:	b29a      	uxth	r2, r3
   27dc6:	230c      	movs	r3, #12
   27dc8:	18fb      	adds	r3, r7, r3
   27dca:	210c      	movs	r1, #12
   27dcc:	1879      	adds	r1, r7, r1
   27dce:	8809      	ldrh	r1, [r1, #0]
   27dd0:	400a      	ands	r2, r1
   27dd2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   27dd4:	230c      	movs	r3, #12
   27dd6:	18fb      	adds	r3, r7, r3
   27dd8:	881b      	ldrh	r3, [r3, #0]
   27dda:	2201      	movs	r2, #1
   27ddc:	4013      	ands	r3, r2
   27dde:	d038      	beq.n	27e52 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27de0:	697b      	ldr	r3, [r7, #20]
   27de2:	795b      	ldrb	r3, [r3, #5]
   27de4:	2b01      	cmp	r3, #1
   27de6:	d110      	bne.n	27e0a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   27de8:	697b      	ldr	r3, [r7, #20]
   27dea:	7a5b      	ldrb	r3, [r3, #9]
   27dec:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27dee:	2b00      	cmp	r3, #0
   27df0:	d10b      	bne.n	27e0a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   27df2:	697b      	ldr	r3, [r7, #20]
   27df4:	0018      	movs	r0, r3
   27df6:	4b7e      	ldr	r3, [pc, #504]	; (27ff0 <_spi_interrupt_handler+0x270>)
   27df8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   27dfa:	697b      	ldr	r3, [r7, #20]
   27dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27dfe:	b29b      	uxth	r3, r3
   27e00:	2b00      	cmp	r3, #0
   27e02:	d102      	bne.n	27e0a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27e04:	693b      	ldr	r3, [r7, #16]
   27e06:	2201      	movs	r2, #1
   27e08:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   27e0a:	697b      	ldr	r3, [r7, #20]
   27e0c:	795b      	ldrb	r3, [r3, #5]
		if (0
   27e0e:	2b01      	cmp	r3, #1
   27e10:	d11f      	bne.n	27e52 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   27e12:	697b      	ldr	r3, [r7, #20]
   27e14:	7a5b      	ldrb	r3, [r3, #9]
   27e16:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   27e18:	2b00      	cmp	r3, #0
   27e1a:	d01a      	beq.n	27e52 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   27e1c:	697b      	ldr	r3, [r7, #20]
   27e1e:	0018      	movs	r0, r3
   27e20:	4b74      	ldr	r3, [pc, #464]	; (27ff4 <_spi_interrupt_handler+0x274>)
   27e22:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27e24:	697b      	ldr	r3, [r7, #20]
   27e26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27e28:	b29b      	uxth	r3, r3
   27e2a:	2b00      	cmp	r3, #0
   27e2c:	d111      	bne.n	27e52 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27e2e:	693b      	ldr	r3, [r7, #16]
   27e30:	2201      	movs	r2, #1
   27e32:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27e34:	697b      	ldr	r3, [r7, #20]
   27e36:	7a5b      	ldrb	r3, [r3, #9]
   27e38:	b2db      	uxtb	r3, r3
   27e3a:	2b01      	cmp	r3, #1
   27e3c:	d109      	bne.n	27e52 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   27e3e:	697b      	ldr	r3, [r7, #20]
   27e40:	79db      	ldrb	r3, [r3, #7]
   27e42:	2201      	movs	r2, #1
   27e44:	4053      	eors	r3, r2
   27e46:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   27e48:	2b00      	cmp	r3, #0
   27e4a:	d002      	beq.n	27e52 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27e4c:	693b      	ldr	r3, [r7, #16]
   27e4e:	2202      	movs	r2, #2
   27e50:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   27e52:	230c      	movs	r3, #12
   27e54:	18fb      	adds	r3, r7, r3
   27e56:	881b      	ldrh	r3, [r3, #0]
   27e58:	2204      	movs	r2, #4
   27e5a:	4013      	ands	r3, r2
   27e5c:	d100      	bne.n	27e60 <_spi_interrupt_handler+0xe0>
   27e5e:	e07e      	b.n	27f5e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27e60:	693b      	ldr	r3, [r7, #16]
   27e62:	8b5b      	ldrh	r3, [r3, #26]
   27e64:	b29b      	uxth	r3, r3
   27e66:	001a      	movs	r2, r3
   27e68:	2304      	movs	r3, #4
   27e6a:	4013      	ands	r3, r2
   27e6c:	d022      	beq.n	27eb4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   27e6e:	697b      	ldr	r3, [r7, #20]
   27e70:	7a5b      	ldrb	r3, [r3, #9]
   27e72:	b2db      	uxtb	r3, r3
   27e74:	2b01      	cmp	r3, #1
   27e76:	d014      	beq.n	27ea2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   27e78:	697b      	ldr	r3, [r7, #20]
   27e7a:	2238      	movs	r2, #56	; 0x38
   27e7c:	211e      	movs	r1, #30
   27e7e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   27e80:	697b      	ldr	r3, [r7, #20]
   27e82:	2203      	movs	r2, #3
   27e84:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   27e86:	693b      	ldr	r3, [r7, #16]
   27e88:	2205      	movs	r2, #5
   27e8a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   27e8c:	230f      	movs	r3, #15
   27e8e:	18fb      	adds	r3, r7, r3
   27e90:	781b      	ldrb	r3, [r3, #0]
   27e92:	2208      	movs	r2, #8
   27e94:	4013      	ands	r3, r2
   27e96:	d004      	beq.n	27ea2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   27e98:	697b      	ldr	r3, [r7, #20]
   27e9a:	699b      	ldr	r3, [r3, #24]
   27e9c:	697a      	ldr	r2, [r7, #20]
   27e9e:	0010      	movs	r0, r2
   27ea0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   27ea2:	693b      	ldr	r3, [r7, #16]
   27ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27ea6:	230a      	movs	r3, #10
   27ea8:	18fb      	adds	r3, r7, r3
   27eaa:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27eac:	693b      	ldr	r3, [r7, #16]
   27eae:	2204      	movs	r2, #4
   27eb0:	835a      	strh	r2, [r3, #26]
   27eb2:	e054      	b.n	27f5e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   27eb4:	697b      	ldr	r3, [r7, #20]
   27eb6:	7a5b      	ldrb	r3, [r3, #9]
   27eb8:	b2db      	uxtb	r3, r3
   27eba:	2b01      	cmp	r3, #1
   27ebc:	d11e      	bne.n	27efc <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   27ebe:	697b      	ldr	r3, [r7, #20]
   27ec0:	0018      	movs	r0, r3
   27ec2:	4b4d      	ldr	r3, [pc, #308]	; (27ff8 <_spi_interrupt_handler+0x278>)
   27ec4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   27ec6:	697b      	ldr	r3, [r7, #20]
   27ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27eca:	b29b      	uxth	r3, r3
   27ecc:	2b00      	cmp	r3, #0
   27ece:	d146      	bne.n	27f5e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   27ed0:	693b      	ldr	r3, [r7, #16]
   27ed2:	2204      	movs	r2, #4
   27ed4:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   27ed6:	697b      	ldr	r3, [r7, #20]
   27ed8:	2238      	movs	r2, #56	; 0x38
   27eda:	2100      	movs	r1, #0
   27edc:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   27ede:	697b      	ldr	r3, [r7, #20]
   27ee0:	2203      	movs	r2, #3
   27ee2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   27ee4:	230f      	movs	r3, #15
   27ee6:	18fb      	adds	r3, r7, r3
   27ee8:	781b      	ldrb	r3, [r3, #0]
   27eea:	2201      	movs	r2, #1
   27eec:	4013      	ands	r3, r2
   27eee:	d036      	beq.n	27f5e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   27ef0:	697b      	ldr	r3, [r7, #20]
   27ef2:	68db      	ldr	r3, [r3, #12]
   27ef4:	697a      	ldr	r2, [r7, #20]
   27ef6:	0010      	movs	r0, r2
   27ef8:	4798      	blx	r3
   27efa:	e030      	b.n	27f5e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   27efc:	697b      	ldr	r3, [r7, #20]
   27efe:	0018      	movs	r0, r3
   27f00:	4b3e      	ldr	r3, [pc, #248]	; (27ffc <_spi_interrupt_handler+0x27c>)
   27f02:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   27f04:	697b      	ldr	r3, [r7, #20]
   27f06:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27f08:	b29b      	uxth	r3, r3
   27f0a:	2b00      	cmp	r3, #0
   27f0c:	d127      	bne.n	27f5e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   27f0e:	697b      	ldr	r3, [r7, #20]
   27f10:	2238      	movs	r2, #56	; 0x38
   27f12:	2100      	movs	r1, #0
   27f14:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   27f16:	693b      	ldr	r3, [r7, #16]
   27f18:	2204      	movs	r2, #4
   27f1a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   27f1c:	697b      	ldr	r3, [r7, #20]
   27f1e:	7a5b      	ldrb	r3, [r3, #9]
   27f20:	b2db      	uxtb	r3, r3
   27f22:	2b02      	cmp	r3, #2
   27f24:	d10b      	bne.n	27f3e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   27f26:	230f      	movs	r3, #15
   27f28:	18fb      	adds	r3, r7, r3
   27f2a:	781b      	ldrb	r3, [r3, #0]
   27f2c:	2204      	movs	r2, #4
   27f2e:	4013      	ands	r3, r2
   27f30:	d015      	beq.n	27f5e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   27f32:	697b      	ldr	r3, [r7, #20]
   27f34:	695b      	ldr	r3, [r3, #20]
   27f36:	697a      	ldr	r2, [r7, #20]
   27f38:	0010      	movs	r0, r2
   27f3a:	4798      	blx	r3
   27f3c:	e00f      	b.n	27f5e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   27f3e:	697b      	ldr	r3, [r7, #20]
   27f40:	7a5b      	ldrb	r3, [r3, #9]
   27f42:	b2db      	uxtb	r3, r3
   27f44:	2b00      	cmp	r3, #0
   27f46:	d10a      	bne.n	27f5e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   27f48:	230f      	movs	r3, #15
   27f4a:	18fb      	adds	r3, r7, r3
   27f4c:	781b      	ldrb	r3, [r3, #0]
   27f4e:	2202      	movs	r2, #2
   27f50:	4013      	ands	r3, r2
   27f52:	d004      	beq.n	27f5e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   27f54:	697b      	ldr	r3, [r7, #20]
   27f56:	691b      	ldr	r3, [r3, #16]
   27f58:	697a      	ldr	r2, [r7, #20]
   27f5a:	0010      	movs	r0, r2
   27f5c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   27f5e:	230c      	movs	r3, #12
   27f60:	18fb      	adds	r3, r7, r3
   27f62:	881b      	ldrh	r3, [r3, #0]
   27f64:	2202      	movs	r2, #2
   27f66:	4013      	ands	r3, r2
   27f68:	d024      	beq.n	27fb4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27f6a:	697b      	ldr	r3, [r7, #20]
   27f6c:	795b      	ldrb	r3, [r3, #5]
   27f6e:	2b01      	cmp	r3, #1
   27f70:	d120      	bne.n	27fb4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27f72:	697b      	ldr	r3, [r7, #20]
   27f74:	7a5b      	ldrb	r3, [r3, #9]
   27f76:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27f78:	2b01      	cmp	r3, #1
   27f7a:	d11b      	bne.n	27fb4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27f7c:	697b      	ldr	r3, [r7, #20]
   27f7e:	79db      	ldrb	r3, [r3, #7]
   27f80:	2201      	movs	r2, #1
   27f82:	4053      	eors	r3, r2
   27f84:	b2db      	uxtb	r3, r3
   27f86:	2b00      	cmp	r3, #0
   27f88:	d014      	beq.n	27fb4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27f8a:	693b      	ldr	r3, [r7, #16]
   27f8c:	2202      	movs	r2, #2
   27f8e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   27f90:	697b      	ldr	r3, [r7, #20]
   27f92:	2203      	movs	r2, #3
   27f94:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   27f96:	697b      	ldr	r3, [r7, #20]
   27f98:	2238      	movs	r2, #56	; 0x38
   27f9a:	2100      	movs	r1, #0
   27f9c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   27f9e:	230f      	movs	r3, #15
   27fa0:	18fb      	adds	r3, r7, r3
   27fa2:	781b      	ldrb	r3, [r3, #0]
   27fa4:	2201      	movs	r2, #1
   27fa6:	4013      	ands	r3, r2
   27fa8:	d004      	beq.n	27fb4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   27faa:	697b      	ldr	r3, [r7, #20]
   27fac:	68db      	ldr	r3, [r3, #12]
   27fae:	697a      	ldr	r2, [r7, #20]
   27fb0:	0010      	movs	r0, r2
   27fb2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   27fb4:	230c      	movs	r3, #12
   27fb6:	18fb      	adds	r3, r7, r3
   27fb8:	881b      	ldrh	r3, [r3, #0]
   27fba:	2280      	movs	r2, #128	; 0x80
   27fbc:	4013      	ands	r3, r2
   27fbe:	d010      	beq.n	27fe2 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27fc0:	693b      	ldr	r3, [r7, #16]
   27fc2:	2280      	movs	r2, #128	; 0x80
   27fc4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27fc6:	693b      	ldr	r3, [r7, #16]
   27fc8:	2280      	movs	r2, #128	; 0x80
   27fca:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   27fcc:	230f      	movs	r3, #15
   27fce:	18fb      	adds	r3, r7, r3
   27fd0:	781b      	ldrb	r3, [r3, #0]
   27fd2:	2240      	movs	r2, #64	; 0x40
   27fd4:	4013      	ands	r3, r2
   27fd6:	d004      	beq.n	27fe2 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   27fd8:	697b      	ldr	r3, [r7, #20]
   27fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27fdc:	697a      	ldr	r2, [r7, #20]
   27fde:	0010      	movs	r0, r2
   27fe0:	4798      	blx	r3
		}
	}
#  endif
}
   27fe2:	46c0      	nop			; (mov r8, r8)
   27fe4:	46bd      	mov	sp, r7
   27fe6:	b006      	add	sp, #24
   27fe8:	bd80      	pop	{r7, pc}
   27fea:	46c0      	nop			; (mov r8, r8)
   27fec:	20005a0c 	.word	0x20005a0c
   27ff0:	00027ca5 	.word	0x00027ca5
   27ff4:	00027c29 	.word	0x00027c29
   27ff8:	00027cd9 	.word	0x00027cd9
   27ffc:	00027d0f 	.word	0x00027d0f

00028000 <system_gclk_chan_get_config_defaults>:
{
   28000:	b580      	push	{r7, lr}
   28002:	b082      	sub	sp, #8
   28004:	af00      	add	r7, sp, #0
   28006:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28008:	687b      	ldr	r3, [r7, #4]
   2800a:	2200      	movs	r2, #0
   2800c:	701a      	strb	r2, [r3, #0]
}
   2800e:	46c0      	nop			; (mov r8, r8)
   28010:	46bd      	mov	sp, r7
   28012:	b002      	add	sp, #8
   28014:	bd80      	pop	{r7, pc}
	...

00028018 <system_apb_clock_set_mask>:
{
   28018:	b580      	push	{r7, lr}
   2801a:	b082      	sub	sp, #8
   2801c:	af00      	add	r7, sp, #0
   2801e:	0002      	movs	r2, r0
   28020:	6039      	str	r1, [r7, #0]
   28022:	1dfb      	adds	r3, r7, #7
   28024:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28026:	1dfb      	adds	r3, r7, #7
   28028:	781b      	ldrb	r3, [r3, #0]
   2802a:	2b01      	cmp	r3, #1
   2802c:	d00a      	beq.n	28044 <system_apb_clock_set_mask+0x2c>
   2802e:	2b02      	cmp	r3, #2
   28030:	d00f      	beq.n	28052 <system_apb_clock_set_mask+0x3a>
   28032:	2b00      	cmp	r3, #0
   28034:	d114      	bne.n	28060 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28036:	4b0e      	ldr	r3, [pc, #56]	; (28070 <system_apb_clock_set_mask+0x58>)
   28038:	4a0d      	ldr	r2, [pc, #52]	; (28070 <system_apb_clock_set_mask+0x58>)
   2803a:	6991      	ldr	r1, [r2, #24]
   2803c:	683a      	ldr	r2, [r7, #0]
   2803e:	430a      	orrs	r2, r1
   28040:	619a      	str	r2, [r3, #24]
			break;
   28042:	e00f      	b.n	28064 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28044:	4b0a      	ldr	r3, [pc, #40]	; (28070 <system_apb_clock_set_mask+0x58>)
   28046:	4a0a      	ldr	r2, [pc, #40]	; (28070 <system_apb_clock_set_mask+0x58>)
   28048:	69d1      	ldr	r1, [r2, #28]
   2804a:	683a      	ldr	r2, [r7, #0]
   2804c:	430a      	orrs	r2, r1
   2804e:	61da      	str	r2, [r3, #28]
			break;
   28050:	e008      	b.n	28064 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28052:	4b07      	ldr	r3, [pc, #28]	; (28070 <system_apb_clock_set_mask+0x58>)
   28054:	4a06      	ldr	r2, [pc, #24]	; (28070 <system_apb_clock_set_mask+0x58>)
   28056:	6a11      	ldr	r1, [r2, #32]
   28058:	683a      	ldr	r2, [r7, #0]
   2805a:	430a      	orrs	r2, r1
   2805c:	621a      	str	r2, [r3, #32]
			break;
   2805e:	e001      	b.n	28064 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28060:	2317      	movs	r3, #23
   28062:	e000      	b.n	28066 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28064:	2300      	movs	r3, #0
}
   28066:	0018      	movs	r0, r3
   28068:	46bd      	mov	sp, r7
   2806a:	b002      	add	sp, #8
   2806c:	bd80      	pop	{r7, pc}
   2806e:	46c0      	nop			; (mov r8, r8)
   28070:	40000400 	.word	0x40000400

00028074 <system_pinmux_get_config_defaults>:
{
   28074:	b580      	push	{r7, lr}
   28076:	b082      	sub	sp, #8
   28078:	af00      	add	r7, sp, #0
   2807a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2807c:	687b      	ldr	r3, [r7, #4]
   2807e:	2280      	movs	r2, #128	; 0x80
   28080:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28082:	687b      	ldr	r3, [r7, #4]
   28084:	2200      	movs	r2, #0
   28086:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28088:	687b      	ldr	r3, [r7, #4]
   2808a:	2201      	movs	r2, #1
   2808c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2808e:	687b      	ldr	r3, [r7, #4]
   28090:	2200      	movs	r2, #0
   28092:	70da      	strb	r2, [r3, #3]
}
   28094:	46c0      	nop			; (mov r8, r8)
   28096:	46bd      	mov	sp, r7
   28098:	b002      	add	sp, #8
   2809a:	bd80      	pop	{r7, pc}

0002809c <system_is_debugger_present>:
{
   2809c:	b580      	push	{r7, lr}
   2809e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   280a0:	4b05      	ldr	r3, [pc, #20]	; (280b8 <system_is_debugger_present+0x1c>)
   280a2:	789b      	ldrb	r3, [r3, #2]
   280a4:	b2db      	uxtb	r3, r3
   280a6:	001a      	movs	r2, r3
   280a8:	2302      	movs	r3, #2
   280aa:	4013      	ands	r3, r2
   280ac:	1e5a      	subs	r2, r3, #1
   280ae:	4193      	sbcs	r3, r2
   280b0:	b2db      	uxtb	r3, r3
}
   280b2:	0018      	movs	r0, r3
   280b4:	46bd      	mov	sp, r7
   280b6:	bd80      	pop	{r7, pc}
   280b8:	41002000 	.word	0x41002000

000280bc <usart_is_syncing>:
{
   280bc:	b580      	push	{r7, lr}
   280be:	b084      	sub	sp, #16
   280c0:	af00      	add	r7, sp, #0
   280c2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   280c4:	687b      	ldr	r3, [r7, #4]
   280c6:	681b      	ldr	r3, [r3, #0]
   280c8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   280ca:	68fb      	ldr	r3, [r7, #12]
   280cc:	69db      	ldr	r3, [r3, #28]
   280ce:	1e5a      	subs	r2, r3, #1
   280d0:	4193      	sbcs	r3, r2
   280d2:	b2db      	uxtb	r3, r3
}
   280d4:	0018      	movs	r0, r3
   280d6:	46bd      	mov	sp, r7
   280d8:	b004      	add	sp, #16
   280da:	bd80      	pop	{r7, pc}

000280dc <_usart_wait_for_sync>:
{
   280dc:	b580      	push	{r7, lr}
   280de:	b082      	sub	sp, #8
   280e0:	af00      	add	r7, sp, #0
   280e2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   280e4:	46c0      	nop			; (mov r8, r8)
   280e6:	687b      	ldr	r3, [r7, #4]
   280e8:	0018      	movs	r0, r3
   280ea:	4b04      	ldr	r3, [pc, #16]	; (280fc <_usart_wait_for_sync+0x20>)
   280ec:	4798      	blx	r3
   280ee:	1e03      	subs	r3, r0, #0
   280f0:	d1f9      	bne.n	280e6 <_usart_wait_for_sync+0xa>
}
   280f2:	46c0      	nop			; (mov r8, r8)
   280f4:	46bd      	mov	sp, r7
   280f6:	b002      	add	sp, #8
   280f8:	bd80      	pop	{r7, pc}
   280fa:	46c0      	nop			; (mov r8, r8)
   280fc:	000280bd 	.word	0x000280bd

00028100 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28100:	b5b0      	push	{r4, r5, r7, lr}
   28102:	b08c      	sub	sp, #48	; 0x30
   28104:	af02      	add	r7, sp, #8
   28106:	6078      	str	r0, [r7, #4]
   28108:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2810a:	687b      	ldr	r3, [r7, #4]
   2810c:	681b      	ldr	r3, [r3, #0]
   2810e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28110:	687b      	ldr	r3, [r7, #4]
   28112:	681b      	ldr	r3, [r3, #0]
   28114:	0018      	movs	r0, r3
   28116:	4bab      	ldr	r3, [pc, #684]	; (283c4 <_usart_set_config+0x2c4>)
   28118:	4798      	blx	r3
   2811a:	0003      	movs	r3, r0
   2811c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2811e:	697b      	ldr	r3, [r7, #20]
   28120:	3314      	adds	r3, #20
   28122:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28124:	2300      	movs	r3, #0
   28126:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   28128:	2300      	movs	r3, #0
   2812a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2812c:	230a      	movs	r3, #10
   2812e:	18fb      	adds	r3, r7, r3
   28130:	2200      	movs	r2, #0
   28132:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28134:	231f      	movs	r3, #31
   28136:	18fb      	adds	r3, r7, r3
   28138:	2200      	movs	r2, #0
   2813a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2813c:	231e      	movs	r3, #30
   2813e:	18fb      	adds	r3, r7, r3
   28140:	2210      	movs	r2, #16
   28142:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28144:	683b      	ldr	r3, [r7, #0]
   28146:	8a1b      	ldrh	r3, [r3, #16]
   28148:	2280      	movs	r2, #128	; 0x80
   2814a:	01d2      	lsls	r2, r2, #7
   2814c:	4293      	cmp	r3, r2
   2814e:	d01c      	beq.n	2818a <_usart_set_config+0x8a>
   28150:	2280      	movs	r2, #128	; 0x80
   28152:	01d2      	lsls	r2, r2, #7
   28154:	4293      	cmp	r3, r2
   28156:	dc06      	bgt.n	28166 <_usart_set_config+0x66>
   28158:	2b00      	cmp	r3, #0
   2815a:	d00d      	beq.n	28178 <_usart_set_config+0x78>
   2815c:	2280      	movs	r2, #128	; 0x80
   2815e:	0192      	lsls	r2, r2, #6
   28160:	4293      	cmp	r3, r2
   28162:	d024      	beq.n	281ae <_usart_set_config+0xae>
   28164:	e035      	b.n	281d2 <_usart_set_config+0xd2>
   28166:	22c0      	movs	r2, #192	; 0xc0
   28168:	01d2      	lsls	r2, r2, #7
   2816a:	4293      	cmp	r3, r2
   2816c:	d028      	beq.n	281c0 <_usart_set_config+0xc0>
   2816e:	2280      	movs	r2, #128	; 0x80
   28170:	0212      	lsls	r2, r2, #8
   28172:	4293      	cmp	r3, r2
   28174:	d012      	beq.n	2819c <_usart_set_config+0x9c>
   28176:	e02c      	b.n	281d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28178:	231f      	movs	r3, #31
   2817a:	18fb      	adds	r3, r7, r3
   2817c:	2200      	movs	r2, #0
   2817e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28180:	231e      	movs	r3, #30
   28182:	18fb      	adds	r3, r7, r3
   28184:	2210      	movs	r2, #16
   28186:	701a      	strb	r2, [r3, #0]
			break;
   28188:	e023      	b.n	281d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2818a:	231f      	movs	r3, #31
   2818c:	18fb      	adds	r3, r7, r3
   2818e:	2200      	movs	r2, #0
   28190:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28192:	231e      	movs	r3, #30
   28194:	18fb      	adds	r3, r7, r3
   28196:	2208      	movs	r2, #8
   28198:	701a      	strb	r2, [r3, #0]
			break;
   2819a:	e01a      	b.n	281d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2819c:	231f      	movs	r3, #31
   2819e:	18fb      	adds	r3, r7, r3
   281a0:	2200      	movs	r2, #0
   281a2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   281a4:	231e      	movs	r3, #30
   281a6:	18fb      	adds	r3, r7, r3
   281a8:	2203      	movs	r2, #3
   281aa:	701a      	strb	r2, [r3, #0]
			break;
   281ac:	e011      	b.n	281d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   281ae:	231f      	movs	r3, #31
   281b0:	18fb      	adds	r3, r7, r3
   281b2:	2201      	movs	r2, #1
   281b4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   281b6:	231e      	movs	r3, #30
   281b8:	18fb      	adds	r3, r7, r3
   281ba:	2210      	movs	r2, #16
   281bc:	701a      	strb	r2, [r3, #0]
			break;
   281be:	e008      	b.n	281d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   281c0:	231f      	movs	r3, #31
   281c2:	18fb      	adds	r3, r7, r3
   281c4:	2201      	movs	r2, #1
   281c6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   281c8:	231e      	movs	r3, #30
   281ca:	18fb      	adds	r3, r7, r3
   281cc:	2208      	movs	r2, #8
   281ce:	701a      	strb	r2, [r3, #0]
			break;
   281d0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   281d2:	683b      	ldr	r3, [r7, #0]
   281d4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   281d6:	683b      	ldr	r3, [r7, #0]
   281d8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   281da:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   281dc:	683b      	ldr	r3, [r7, #0]
   281de:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   281e0:	4313      	orrs	r3, r2
		config->sample_rate |
   281e2:	683a      	ldr	r2, [r7, #0]
   281e4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   281e6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   281e8:	683a      	ldr	r2, [r7, #0]
   281ea:	7e12      	ldrb	r2, [r2, #24]
   281ec:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   281ee:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   281f0:	683a      	ldr	r2, [r7, #0]
   281f2:	2126      	movs	r1, #38	; 0x26
   281f4:	5c52      	ldrb	r2, [r2, r1]
   281f6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   281f8:	4313      	orrs	r3, r2
   281fa:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   281fc:	231d      	movs	r3, #29
   281fe:	18fb      	adds	r3, r7, r3
   28200:	2200      	movs	r2, #0
   28202:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28204:	683b      	ldr	r3, [r7, #0]
   28206:	685b      	ldr	r3, [r3, #4]
   28208:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2820a:	68fb      	ldr	r3, [r7, #12]
   2820c:	2b00      	cmp	r3, #0
   2820e:	d01e      	beq.n	2824e <_usart_set_config+0x14e>
   28210:	2280      	movs	r2, #128	; 0x80
   28212:	0552      	lsls	r2, r2, #21
   28214:	4293      	cmp	r3, r2
   28216:	d14f      	bne.n	282b8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28218:	683b      	ldr	r3, [r7, #0]
   2821a:	2227      	movs	r2, #39	; 0x27
   2821c:	5c9b      	ldrb	r3, [r3, r2]
   2821e:	2201      	movs	r2, #1
   28220:	4053      	eors	r3, r2
   28222:	b2db      	uxtb	r3, r3
   28224:	2b00      	cmp	r3, #0
   28226:	d046      	beq.n	282b6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   28228:	683b      	ldr	r3, [r7, #0]
   2822a:	6a1d      	ldr	r5, [r3, #32]
   2822c:	693b      	ldr	r3, [r7, #16]
   2822e:	b2db      	uxtb	r3, r3
   28230:	0018      	movs	r0, r3
   28232:	4b65      	ldr	r3, [pc, #404]	; (283c8 <_usart_set_config+0x2c8>)
   28234:	4798      	blx	r3
   28236:	0001      	movs	r1, r0
   28238:	231d      	movs	r3, #29
   2823a:	18fc      	adds	r4, r7, r3
   2823c:	230a      	movs	r3, #10
   2823e:	18fb      	adds	r3, r7, r3
   28240:	001a      	movs	r2, r3
   28242:	0028      	movs	r0, r5
   28244:	4b61      	ldr	r3, [pc, #388]	; (283cc <_usart_set_config+0x2cc>)
   28246:	4798      	blx	r3
   28248:	0003      	movs	r3, r0
   2824a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2824c:	e033      	b.n	282b6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2824e:	683b      	ldr	r3, [r7, #0]
   28250:	2227      	movs	r2, #39	; 0x27
   28252:	5c9b      	ldrb	r3, [r3, r2]
   28254:	2b00      	cmp	r3, #0
   28256:	d014      	beq.n	28282 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28258:	683b      	ldr	r3, [r7, #0]
   2825a:	6a18      	ldr	r0, [r3, #32]
   2825c:	683b      	ldr	r3, [r7, #0]
   2825e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28260:	231d      	movs	r3, #29
   28262:	18fc      	adds	r4, r7, r3
   28264:	231f      	movs	r3, #31
   28266:	18fb      	adds	r3, r7, r3
   28268:	781d      	ldrb	r5, [r3, #0]
   2826a:	230a      	movs	r3, #10
   2826c:	18fa      	adds	r2, r7, r3
   2826e:	231e      	movs	r3, #30
   28270:	18fb      	adds	r3, r7, r3
   28272:	781b      	ldrb	r3, [r3, #0]
   28274:	9300      	str	r3, [sp, #0]
   28276:	002b      	movs	r3, r5
   28278:	4d55      	ldr	r5, [pc, #340]	; (283d0 <_usart_set_config+0x2d0>)
   2827a:	47a8      	blx	r5
   2827c:	0003      	movs	r3, r0
   2827e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28280:	e01a      	b.n	282b8 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   28282:	683b      	ldr	r3, [r7, #0]
   28284:	6a1d      	ldr	r5, [r3, #32]
   28286:	693b      	ldr	r3, [r7, #16]
   28288:	b2db      	uxtb	r3, r3
   2828a:	0018      	movs	r0, r3
   2828c:	4b4e      	ldr	r3, [pc, #312]	; (283c8 <_usart_set_config+0x2c8>)
   2828e:	4798      	blx	r3
				status_code =
   28290:	231d      	movs	r3, #29
   28292:	18fc      	adds	r4, r7, r3
   28294:	231f      	movs	r3, #31
   28296:	18fb      	adds	r3, r7, r3
   28298:	7819      	ldrb	r1, [r3, #0]
   2829a:	230a      	movs	r3, #10
   2829c:	18fa      	adds	r2, r7, r3
   2829e:	231e      	movs	r3, #30
   282a0:	18fb      	adds	r3, r7, r3
   282a2:	781b      	ldrb	r3, [r3, #0]
   282a4:	9300      	str	r3, [sp, #0]
   282a6:	000b      	movs	r3, r1
   282a8:	0001      	movs	r1, r0
   282aa:	0028      	movs	r0, r5
   282ac:	4d48      	ldr	r5, [pc, #288]	; (283d0 <_usart_set_config+0x2d0>)
   282ae:	47a8      	blx	r5
   282b0:	0003      	movs	r3, r0
   282b2:	7023      	strb	r3, [r4, #0]
			break;
   282b4:	e000      	b.n	282b8 <_usart_set_config+0x1b8>
			break;
   282b6:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   282b8:	231d      	movs	r3, #29
   282ba:	18fb      	adds	r3, r7, r3
   282bc:	781b      	ldrb	r3, [r3, #0]
   282be:	2b00      	cmp	r3, #0
   282c0:	d003      	beq.n	282ca <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   282c2:	231d      	movs	r3, #29
   282c4:	18fb      	adds	r3, r7, r3
   282c6:	781b      	ldrb	r3, [r3, #0]
   282c8:	e077      	b.n	283ba <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   282ca:	683b      	ldr	r3, [r7, #0]
   282cc:	7e5b      	ldrb	r3, [r3, #25]
   282ce:	2b00      	cmp	r3, #0
   282d0:	d003      	beq.n	282da <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   282d2:	683b      	ldr	r3, [r7, #0]
   282d4:	7e9a      	ldrb	r2, [r3, #26]
   282d6:	69bb      	ldr	r3, [r7, #24]
   282d8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   282da:	687b      	ldr	r3, [r7, #4]
   282dc:	0018      	movs	r0, r3
   282de:	4b3d      	ldr	r3, [pc, #244]	; (283d4 <_usart_set_config+0x2d4>)
   282e0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   282e2:	230a      	movs	r3, #10
   282e4:	18fb      	adds	r3, r7, r3
   282e6:	881a      	ldrh	r2, [r3, #0]
   282e8:	69bb      	ldr	r3, [r7, #24]
   282ea:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   282ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   282ee:	68fb      	ldr	r3, [r7, #12]
   282f0:	4313      	orrs	r3, r2
   282f2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   282f4:	683b      	ldr	r3, [r7, #0]
   282f6:	2227      	movs	r2, #39	; 0x27
   282f8:	5c9b      	ldrb	r3, [r3, r2]
   282fa:	2201      	movs	r2, #1
   282fc:	4053      	eors	r3, r2
   282fe:	b2db      	uxtb	r3, r3
   28300:	2b00      	cmp	r3, #0
   28302:	d003      	beq.n	2830c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28306:	2204      	movs	r2, #4
   28308:	4313      	orrs	r3, r2
   2830a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2830c:	683b      	ldr	r3, [r7, #0]
   2830e:	7e5b      	ldrb	r3, [r3, #25]
   28310:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28312:	683b      	ldr	r3, [r7, #0]
   28314:	7f1b      	ldrb	r3, [r3, #28]
   28316:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28318:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2831a:	683b      	ldr	r3, [r7, #0]
   2831c:	7f5b      	ldrb	r3, [r3, #29]
   2831e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28320:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28322:	683b      	ldr	r3, [r7, #0]
   28324:	2124      	movs	r1, #36	; 0x24
   28326:	5c5b      	ldrb	r3, [r3, r1]
   28328:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2832a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2832c:	683b      	ldr	r3, [r7, #0]
   2832e:	2125      	movs	r1, #37	; 0x25
   28330:	5c5b      	ldrb	r3, [r3, r1]
   28332:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28334:	4313      	orrs	r3, r2
	ctrlb =  
   28336:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   28338:	683b      	ldr	r3, [r7, #0]
   2833a:	7a9b      	ldrb	r3, [r3, #10]
   2833c:	001a      	movs	r2, r3
   2833e:	6a3b      	ldr	r3, [r7, #32]
   28340:	4313      	orrs	r3, r2
   28342:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28344:	683b      	ldr	r3, [r7, #0]
   28346:	7adb      	ldrb	r3, [r3, #11]
   28348:	001a      	movs	r2, r3
   2834a:	6a3b      	ldr	r3, [r7, #32]
   2834c:	4313      	orrs	r3, r2
   2834e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28350:	683b      	ldr	r3, [r7, #0]
   28352:	891b      	ldrh	r3, [r3, #8]
   28354:	2bff      	cmp	r3, #255	; 0xff
   28356:	d00b      	beq.n	28370 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   28358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2835a:	2280      	movs	r2, #128	; 0x80
   2835c:	0452      	lsls	r2, r2, #17
   2835e:	4313      	orrs	r3, r2
   28360:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28362:	683b      	ldr	r3, [r7, #0]
   28364:	891b      	ldrh	r3, [r3, #8]
   28366:	001a      	movs	r2, r3
   28368:	6a3b      	ldr	r3, [r7, #32]
   2836a:	4313      	orrs	r3, r2
   2836c:	623b      	str	r3, [r7, #32]
   2836e:	e008      	b.n	28382 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   28370:	683b      	ldr	r3, [r7, #0]
   28372:	7edb      	ldrb	r3, [r3, #27]
   28374:	2b00      	cmp	r3, #0
   28376:	d004      	beq.n	28382 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   28378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2837a:	2280      	movs	r2, #128	; 0x80
   2837c:	04d2      	lsls	r2, r2, #19
   2837e:	4313      	orrs	r3, r2
   28380:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28382:	683b      	ldr	r3, [r7, #0]
   28384:	222c      	movs	r2, #44	; 0x2c
   28386:	5c9b      	ldrb	r3, [r3, r2]
   28388:	2b00      	cmp	r3, #0
   2838a:	d103      	bne.n	28394 <_usart_set_config+0x294>
   2838c:	4b12      	ldr	r3, [pc, #72]	; (283d8 <_usart_set_config+0x2d8>)
   2838e:	4798      	blx	r3
   28390:	1e03      	subs	r3, r0, #0
   28392:	d003      	beq.n	2839c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   28394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28396:	2280      	movs	r2, #128	; 0x80
   28398:	4313      	orrs	r3, r2
   2839a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2839c:	687b      	ldr	r3, [r7, #4]
   2839e:	0018      	movs	r0, r3
   283a0:	4b0c      	ldr	r3, [pc, #48]	; (283d4 <_usart_set_config+0x2d4>)
   283a2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   283a4:	69bb      	ldr	r3, [r7, #24]
   283a6:	6a3a      	ldr	r2, [r7, #32]
   283a8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   283aa:	687b      	ldr	r3, [r7, #4]
   283ac:	0018      	movs	r0, r3
   283ae:	4b09      	ldr	r3, [pc, #36]	; (283d4 <_usart_set_config+0x2d4>)
   283b0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   283b2:	69bb      	ldr	r3, [r7, #24]
   283b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   283b6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   283b8:	2300      	movs	r3, #0
}
   283ba:	0018      	movs	r0, r3
   283bc:	46bd      	mov	sp, r7
   283be:	b00a      	add	sp, #40	; 0x28
   283c0:	bdb0      	pop	{r4, r5, r7, pc}
   283c2:	46c0      	nop			; (mov r8, r8)
   283c4:	00026ea9 	.word	0x00026ea9
   283c8:	0002985d 	.word	0x0002985d
   283cc:	00026a23 	.word	0x00026a23
   283d0:	00026aa1 	.word	0x00026aa1
   283d4:	000280dd 	.word	0x000280dd
   283d8:	0002809d 	.word	0x0002809d

000283dc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   283dc:	b590      	push	{r4, r7, lr}
   283de:	b093      	sub	sp, #76	; 0x4c
   283e0:	af00      	add	r7, sp, #0
   283e2:	60f8      	str	r0, [r7, #12]
   283e4:	60b9      	str	r1, [r7, #8]
   283e6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   283e8:	233b      	movs	r3, #59	; 0x3b
   283ea:	18fb      	adds	r3, r7, r3
   283ec:	2200      	movs	r2, #0
   283ee:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   283f0:	68fb      	ldr	r3, [r7, #12]
   283f2:	68ba      	ldr	r2, [r7, #8]
   283f4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   283f6:	68fb      	ldr	r3, [r7, #12]
   283f8:	681b      	ldr	r3, [r3, #0]
   283fa:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   283fc:	68fb      	ldr	r3, [r7, #12]
   283fe:	681b      	ldr	r3, [r3, #0]
   28400:	0018      	movs	r0, r3
   28402:	4b86      	ldr	r3, [pc, #536]	; (2861c <usart_init+0x240>)
   28404:	4798      	blx	r3
   28406:	0003      	movs	r3, r0
   28408:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2840c:	3302      	adds	r3, #2
   2840e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28412:	3314      	adds	r3, #20
   28414:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28418:	681b      	ldr	r3, [r3, #0]
   2841a:	2201      	movs	r2, #1
   2841c:	4013      	ands	r3, r2
   2841e:	d001      	beq.n	28424 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28420:	2305      	movs	r3, #5
   28422:	e0f6      	b.n	28612 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28426:	681b      	ldr	r3, [r3, #0]
   28428:	2202      	movs	r2, #2
   2842a:	4013      	ands	r3, r2
   2842c:	d001      	beq.n	28432 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2842e:	231c      	movs	r3, #28
   28430:	e0ef      	b.n	28612 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28432:	2201      	movs	r2, #1
   28434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28436:	409a      	lsls	r2, r3
   28438:	0013      	movs	r3, r2
   2843a:	0019      	movs	r1, r3
   2843c:	2002      	movs	r0, #2
   2843e:	4b78      	ldr	r3, [pc, #480]	; (28620 <usart_init+0x244>)
   28440:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28442:	2324      	movs	r3, #36	; 0x24
   28444:	18fb      	adds	r3, r7, r3
   28446:	0018      	movs	r0, r3
   28448:	4b76      	ldr	r3, [pc, #472]	; (28624 <usart_init+0x248>)
   2844a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2844c:	687b      	ldr	r3, [r7, #4]
   2844e:	222d      	movs	r2, #45	; 0x2d
   28450:	5c9a      	ldrb	r2, [r3, r2]
   28452:	2324      	movs	r3, #36	; 0x24
   28454:	18fb      	adds	r3, r7, r3
   28456:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28458:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2845a:	b2db      	uxtb	r3, r3
   2845c:	2224      	movs	r2, #36	; 0x24
   2845e:	18ba      	adds	r2, r7, r2
   28460:	0011      	movs	r1, r2
   28462:	0018      	movs	r0, r3
   28464:	4b70      	ldr	r3, [pc, #448]	; (28628 <usart_init+0x24c>)
   28466:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28468:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2846a:	b2db      	uxtb	r3, r3
   2846c:	0018      	movs	r0, r3
   2846e:	4b6f      	ldr	r3, [pc, #444]	; (2862c <usart_init+0x250>)
   28470:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28472:	687b      	ldr	r3, [r7, #4]
   28474:	222d      	movs	r2, #45	; 0x2d
   28476:	5c9b      	ldrb	r3, [r3, r2]
   28478:	2100      	movs	r1, #0
   2847a:	0018      	movs	r0, r3
   2847c:	4b6c      	ldr	r3, [pc, #432]	; (28630 <usart_init+0x254>)
   2847e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28480:	687b      	ldr	r3, [r7, #4]
   28482:	7ada      	ldrb	r2, [r3, #11]
   28484:	68fb      	ldr	r3, [r7, #12]
   28486:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28488:	687b      	ldr	r3, [r7, #4]
   2848a:	2224      	movs	r2, #36	; 0x24
   2848c:	5c9a      	ldrb	r2, [r3, r2]
   2848e:	68fb      	ldr	r3, [r7, #12]
   28490:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28492:	687b      	ldr	r3, [r7, #4]
   28494:	2225      	movs	r2, #37	; 0x25
   28496:	5c9a      	ldrb	r2, [r3, r2]
   28498:	68fb      	ldr	r3, [r7, #12]
   2849a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2849c:	687b      	ldr	r3, [r7, #4]
   2849e:	7eda      	ldrb	r2, [r3, #27]
   284a0:	68fb      	ldr	r3, [r7, #12]
   284a2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   284a4:	687b      	ldr	r3, [r7, #4]
   284a6:	7f1a      	ldrb	r2, [r3, #28]
   284a8:	68fb      	ldr	r3, [r7, #12]
   284aa:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   284ac:	233b      	movs	r3, #59	; 0x3b
   284ae:	18fc      	adds	r4, r7, r3
   284b0:	687a      	ldr	r2, [r7, #4]
   284b2:	68fb      	ldr	r3, [r7, #12]
   284b4:	0011      	movs	r1, r2
   284b6:	0018      	movs	r0, r3
   284b8:	4b5e      	ldr	r3, [pc, #376]	; (28634 <usart_init+0x258>)
   284ba:	4798      	blx	r3
   284bc:	0003      	movs	r3, r0
   284be:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   284c0:	233b      	movs	r3, #59	; 0x3b
   284c2:	18fb      	adds	r3, r7, r3
   284c4:	781b      	ldrb	r3, [r3, #0]
   284c6:	2b00      	cmp	r3, #0
   284c8:	d003      	beq.n	284d2 <usart_init+0xf6>
		return status_code;
   284ca:	233b      	movs	r3, #59	; 0x3b
   284cc:	18fb      	adds	r3, r7, r3
   284ce:	781b      	ldrb	r3, [r3, #0]
   284d0:	e09f      	b.n	28612 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   284d2:	2320      	movs	r3, #32
   284d4:	18fb      	adds	r3, r7, r3
   284d6:	0018      	movs	r0, r3
   284d8:	4b57      	ldr	r3, [pc, #348]	; (28638 <usart_init+0x25c>)
   284da:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   284dc:	2320      	movs	r3, #32
   284de:	18fb      	adds	r3, r7, r3
   284e0:	2200      	movs	r2, #0
   284e2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   284e4:	2320      	movs	r3, #32
   284e6:	18fb      	adds	r3, r7, r3
   284e8:	2200      	movs	r2, #0
   284ea:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   284ec:	687b      	ldr	r3, [r7, #4]
   284ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   284f0:	2310      	movs	r3, #16
   284f2:	18fb      	adds	r3, r7, r3
   284f4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   284f6:	687b      	ldr	r3, [r7, #4]
   284f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   284fa:	2310      	movs	r3, #16
   284fc:	18fb      	adds	r3, r7, r3
   284fe:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28500:	687b      	ldr	r3, [r7, #4]
   28502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28504:	2310      	movs	r3, #16
   28506:	18fb      	adds	r3, r7, r3
   28508:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2850a:	687b      	ldr	r3, [r7, #4]
   2850c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2850e:	2310      	movs	r3, #16
   28510:	18fb      	adds	r3, r7, r3
   28512:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28514:	2347      	movs	r3, #71	; 0x47
   28516:	18fb      	adds	r3, r7, r3
   28518:	2200      	movs	r2, #0
   2851a:	701a      	strb	r2, [r3, #0]
   2851c:	e02c      	b.n	28578 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2851e:	2347      	movs	r3, #71	; 0x47
   28520:	18fb      	adds	r3, r7, r3
   28522:	781a      	ldrb	r2, [r3, #0]
   28524:	2310      	movs	r3, #16
   28526:	18fb      	adds	r3, r7, r3
   28528:	0092      	lsls	r2, r2, #2
   2852a:	58d3      	ldr	r3, [r2, r3]
   2852c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2852e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28530:	2b00      	cmp	r3, #0
   28532:	d109      	bne.n	28548 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28534:	2347      	movs	r3, #71	; 0x47
   28536:	18fb      	adds	r3, r7, r3
   28538:	781a      	ldrb	r2, [r3, #0]
   2853a:	68bb      	ldr	r3, [r7, #8]
   2853c:	0011      	movs	r1, r2
   2853e:	0018      	movs	r0, r3
   28540:	4b3e      	ldr	r3, [pc, #248]	; (2863c <usart_init+0x260>)
   28542:	4798      	blx	r3
   28544:	0003      	movs	r3, r0
   28546:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2854a:	3301      	adds	r3, #1
   2854c:	d00d      	beq.n	2856a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2854e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28550:	b2da      	uxtb	r2, r3
   28552:	2320      	movs	r3, #32
   28554:	18fb      	adds	r3, r7, r3
   28556:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2855a:	0c1b      	lsrs	r3, r3, #16
   2855c:	b2db      	uxtb	r3, r3
   2855e:	2220      	movs	r2, #32
   28560:	18ba      	adds	r2, r7, r2
   28562:	0011      	movs	r1, r2
   28564:	0018      	movs	r0, r3
   28566:	4b36      	ldr	r3, [pc, #216]	; (28640 <usart_init+0x264>)
   28568:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2856a:	2347      	movs	r3, #71	; 0x47
   2856c:	18fb      	adds	r3, r7, r3
   2856e:	781a      	ldrb	r2, [r3, #0]
   28570:	2347      	movs	r3, #71	; 0x47
   28572:	18fb      	adds	r3, r7, r3
   28574:	3201      	adds	r2, #1
   28576:	701a      	strb	r2, [r3, #0]
   28578:	2347      	movs	r3, #71	; 0x47
   2857a:	18fb      	adds	r3, r7, r3
   2857c:	781b      	ldrb	r3, [r3, #0]
   2857e:	2b03      	cmp	r3, #3
   28580:	d9cd      	bls.n	2851e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28582:	2300      	movs	r3, #0
   28584:	63fb      	str	r3, [r7, #60]	; 0x3c
   28586:	e00a      	b.n	2859e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28588:	68fa      	ldr	r2, [r7, #12]
   2858a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2858c:	3302      	adds	r3, #2
   2858e:	009b      	lsls	r3, r3, #2
   28590:	18d3      	adds	r3, r2, r3
   28592:	3304      	adds	r3, #4
   28594:	2200      	movs	r2, #0
   28596:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2859a:	3301      	adds	r3, #1
   2859c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   285a0:	2b05      	cmp	r3, #5
   285a2:	d9f1      	bls.n	28588 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   285a4:	68fb      	ldr	r3, [r7, #12]
   285a6:	2200      	movs	r2, #0
   285a8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   285aa:	68fb      	ldr	r3, [r7, #12]
   285ac:	2200      	movs	r2, #0
   285ae:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   285b0:	68fb      	ldr	r3, [r7, #12]
   285b2:	2200      	movs	r2, #0
   285b4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   285b6:	68fb      	ldr	r3, [r7, #12]
   285b8:	2200      	movs	r2, #0
   285ba:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   285bc:	68fb      	ldr	r3, [r7, #12]
   285be:	2230      	movs	r2, #48	; 0x30
   285c0:	2100      	movs	r1, #0
   285c2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   285c4:	68fb      	ldr	r3, [r7, #12]
   285c6:	2231      	movs	r2, #49	; 0x31
   285c8:	2100      	movs	r1, #0
   285ca:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   285cc:	68fb      	ldr	r3, [r7, #12]
   285ce:	2232      	movs	r2, #50	; 0x32
   285d0:	2100      	movs	r1, #0
   285d2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   285d4:	68fb      	ldr	r3, [r7, #12]
   285d6:	2233      	movs	r2, #51	; 0x33
   285d8:	2100      	movs	r1, #0
   285da:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   285dc:	68fb      	ldr	r3, [r7, #12]
   285de:	681b      	ldr	r3, [r3, #0]
   285e0:	2227      	movs	r2, #39	; 0x27
   285e2:	18bc      	adds	r4, r7, r2
   285e4:	0018      	movs	r0, r3
   285e6:	4b0d      	ldr	r3, [pc, #52]	; (2861c <usart_init+0x240>)
   285e8:	4798      	blx	r3
   285ea:	0003      	movs	r3, r0
   285ec:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   285ee:	4a15      	ldr	r2, [pc, #84]	; (28644 <usart_init+0x268>)
   285f0:	2327      	movs	r3, #39	; 0x27
   285f2:	18fb      	adds	r3, r7, r3
   285f4:	781b      	ldrb	r3, [r3, #0]
   285f6:	0011      	movs	r1, r2
   285f8:	0018      	movs	r0, r3
   285fa:	4b13      	ldr	r3, [pc, #76]	; (28648 <usart_init+0x26c>)
   285fc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   285fe:	2327      	movs	r3, #39	; 0x27
   28600:	18fb      	adds	r3, r7, r3
   28602:	781a      	ldrb	r2, [r3, #0]
   28604:	4b11      	ldr	r3, [pc, #68]	; (2864c <usart_init+0x270>)
   28606:	0092      	lsls	r2, r2, #2
   28608:	68f9      	ldr	r1, [r7, #12]
   2860a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2860c:	233b      	movs	r3, #59	; 0x3b
   2860e:	18fb      	adds	r3, r7, r3
   28610:	781b      	ldrb	r3, [r3, #0]
}
   28612:	0018      	movs	r0, r3
   28614:	46bd      	mov	sp, r7
   28616:	b013      	add	sp, #76	; 0x4c
   28618:	bd90      	pop	{r4, r7, pc}
   2861a:	46c0      	nop			; (mov r8, r8)
   2861c:	00026ea9 	.word	0x00026ea9
   28620:	00028019 	.word	0x00028019
   28624:	00028001 	.word	0x00028001
   28628:	00029739 	.word	0x00029739
   2862c:	0002977d 	.word	0x0002977d
   28630:	00026c61 	.word	0x00026c61
   28634:	00028101 	.word	0x00028101
   28638:	00028075 	.word	0x00028075
   2863c:	00026ced 	.word	0x00026ced
   28640:	00029a99 	.word	0x00029a99
   28644:	000288b9 	.word	0x000288b9
   28648:	00026f0d 	.word	0x00026f0d
   2864c:	20005a0c 	.word	0x20005a0c

00028650 <system_interrupt_enter_critical_section>:
{
   28650:	b580      	push	{r7, lr}
   28652:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28654:	4b02      	ldr	r3, [pc, #8]	; (28660 <system_interrupt_enter_critical_section+0x10>)
   28656:	4798      	blx	r3
}
   28658:	46c0      	nop			; (mov r8, r8)
   2865a:	46bd      	mov	sp, r7
   2865c:	bd80      	pop	{r7, pc}
   2865e:	46c0      	nop			; (mov r8, r8)
   28660:	00025aa5 	.word	0x00025aa5

00028664 <system_interrupt_leave_critical_section>:
{
   28664:	b580      	push	{r7, lr}
   28666:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28668:	4b02      	ldr	r3, [pc, #8]	; (28674 <system_interrupt_leave_critical_section+0x10>)
   2866a:	4798      	blx	r3
}
   2866c:	46c0      	nop			; (mov r8, r8)
   2866e:	46bd      	mov	sp, r7
   28670:	bd80      	pop	{r7, pc}
   28672:	46c0      	nop			; (mov r8, r8)
   28674:	00025af9 	.word	0x00025af9

00028678 <usart_is_syncing>:
{
   28678:	b580      	push	{r7, lr}
   2867a:	b084      	sub	sp, #16
   2867c:	af00      	add	r7, sp, #0
   2867e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28680:	687b      	ldr	r3, [r7, #4]
   28682:	681b      	ldr	r3, [r3, #0]
   28684:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28686:	68fb      	ldr	r3, [r7, #12]
   28688:	69db      	ldr	r3, [r3, #28]
   2868a:	1e5a      	subs	r2, r3, #1
   2868c:	4193      	sbcs	r3, r2
   2868e:	b2db      	uxtb	r3, r3
}
   28690:	0018      	movs	r0, r3
   28692:	46bd      	mov	sp, r7
   28694:	b004      	add	sp, #16
   28696:	bd80      	pop	{r7, pc}

00028698 <_usart_wait_for_sync>:
{
   28698:	b580      	push	{r7, lr}
   2869a:	b082      	sub	sp, #8
   2869c:	af00      	add	r7, sp, #0
   2869e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   286a0:	46c0      	nop			; (mov r8, r8)
   286a2:	687b      	ldr	r3, [r7, #4]
   286a4:	0018      	movs	r0, r3
   286a6:	4b04      	ldr	r3, [pc, #16]	; (286b8 <_usart_wait_for_sync+0x20>)
   286a8:	4798      	blx	r3
   286aa:	1e03      	subs	r3, r0, #0
   286ac:	d1f9      	bne.n	286a2 <_usart_wait_for_sync+0xa>
}
   286ae:	46c0      	nop			; (mov r8, r8)
   286b0:	46bd      	mov	sp, r7
   286b2:	b002      	add	sp, #8
   286b4:	bd80      	pop	{r7, pc}
   286b6:	46c0      	nop			; (mov r8, r8)
   286b8:	00028679 	.word	0x00028679

000286bc <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   286bc:	b580      	push	{r7, lr}
   286be:	b086      	sub	sp, #24
   286c0:	af00      	add	r7, sp, #0
   286c2:	60f8      	str	r0, [r7, #12]
   286c4:	60b9      	str	r1, [r7, #8]
   286c6:	1dbb      	adds	r3, r7, #6
   286c8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   286ca:	68fb      	ldr	r3, [r7, #12]
   286cc:	681b      	ldr	r3, [r3, #0]
   286ce:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   286d0:	4b0f      	ldr	r3, [pc, #60]	; (28710 <_usart_write_buffer+0x54>)
   286d2:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   286d4:	68fb      	ldr	r3, [r7, #12]
   286d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   286d8:	b29b      	uxth	r3, r3
   286da:	2b00      	cmp	r3, #0
   286dc:	d003      	beq.n	286e6 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   286de:	4b0d      	ldr	r3, [pc, #52]	; (28714 <_usart_write_buffer+0x58>)
   286e0:	4798      	blx	r3
		return STATUS_BUSY;
   286e2:	2305      	movs	r3, #5
   286e4:	e010      	b.n	28708 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   286e6:	68fb      	ldr	r3, [r7, #12]
   286e8:	1dba      	adds	r2, r7, #6
   286ea:	8812      	ldrh	r2, [r2, #0]
   286ec:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   286ee:	4b09      	ldr	r3, [pc, #36]	; (28714 <_usart_write_buffer+0x58>)
   286f0:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   286f2:	68fb      	ldr	r3, [r7, #12]
   286f4:	68ba      	ldr	r2, [r7, #8]
   286f6:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   286f8:	68fb      	ldr	r3, [r7, #12]
   286fa:	2233      	movs	r2, #51	; 0x33
   286fc:	2105      	movs	r1, #5
   286fe:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28700:	697b      	ldr	r3, [r7, #20]
   28702:	2201      	movs	r2, #1
   28704:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28706:	2300      	movs	r3, #0
}
   28708:	0018      	movs	r0, r3
   2870a:	46bd      	mov	sp, r7
   2870c:	b006      	add	sp, #24
   2870e:	bd80      	pop	{r7, pc}
   28710:	00028651 	.word	0x00028651
   28714:	00028665 	.word	0x00028665

00028718 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28718:	b580      	push	{r7, lr}
   2871a:	b086      	sub	sp, #24
   2871c:	af00      	add	r7, sp, #0
   2871e:	60f8      	str	r0, [r7, #12]
   28720:	60b9      	str	r1, [r7, #8]
   28722:	1dbb      	adds	r3, r7, #6
   28724:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28726:	68fb      	ldr	r3, [r7, #12]
   28728:	681b      	ldr	r3, [r3, #0]
   2872a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2872c:	4b16      	ldr	r3, [pc, #88]	; (28788 <_usart_read_buffer+0x70>)
   2872e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28730:	68fb      	ldr	r3, [r7, #12]
   28732:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28734:	b29b      	uxth	r3, r3
   28736:	2b00      	cmp	r3, #0
   28738:	d003      	beq.n	28742 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2873a:	4b14      	ldr	r3, [pc, #80]	; (2878c <_usart_read_buffer+0x74>)
   2873c:	4798      	blx	r3
		return STATUS_BUSY;
   2873e:	2305      	movs	r3, #5
   28740:	e01e      	b.n	28780 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28742:	68fb      	ldr	r3, [r7, #12]
   28744:	1dba      	adds	r2, r7, #6
   28746:	8812      	ldrh	r2, [r2, #0]
   28748:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2874a:	4b10      	ldr	r3, [pc, #64]	; (2878c <_usart_read_buffer+0x74>)
   2874c:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2874e:	68fb      	ldr	r3, [r7, #12]
   28750:	68ba      	ldr	r2, [r7, #8]
   28752:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28754:	68fb      	ldr	r3, [r7, #12]
   28756:	2232      	movs	r2, #50	; 0x32
   28758:	2105      	movs	r1, #5
   2875a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2875c:	697b      	ldr	r3, [r7, #20]
   2875e:	2204      	movs	r2, #4
   28760:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28762:	68fb      	ldr	r3, [r7, #12]
   28764:	7a1b      	ldrb	r3, [r3, #8]
   28766:	2b00      	cmp	r3, #0
   28768:	d002      	beq.n	28770 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2876a:	697b      	ldr	r3, [r7, #20]
   2876c:	2220      	movs	r2, #32
   2876e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   28770:	68fb      	ldr	r3, [r7, #12]
   28772:	7a5b      	ldrb	r3, [r3, #9]
   28774:	2b00      	cmp	r3, #0
   28776:	d002      	beq.n	2877e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28778:	697b      	ldr	r3, [r7, #20]
   2877a:	2208      	movs	r2, #8
   2877c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2877e:	2300      	movs	r3, #0
}
   28780:	0018      	movs	r0, r3
   28782:	46bd      	mov	sp, r7
   28784:	b006      	add	sp, #24
   28786:	bd80      	pop	{r7, pc}
   28788:	00028651 	.word	0x00028651
   2878c:	00028665 	.word	0x00028665

00028790 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   28790:	b580      	push	{r7, lr}
   28792:	b084      	sub	sp, #16
   28794:	af00      	add	r7, sp, #0
   28796:	60f8      	str	r0, [r7, #12]
   28798:	60b9      	str	r1, [r7, #8]
   2879a:	1dfb      	adds	r3, r7, #7
   2879c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2879e:	1dfb      	adds	r3, r7, #7
   287a0:	781b      	ldrb	r3, [r3, #0]
   287a2:	68fa      	ldr	r2, [r7, #12]
   287a4:	3302      	adds	r3, #2
   287a6:	009b      	lsls	r3, r3, #2
   287a8:	18d3      	adds	r3, r2, r3
   287aa:	3304      	adds	r3, #4
   287ac:	68ba      	ldr	r2, [r7, #8]
   287ae:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   287b0:	68fb      	ldr	r3, [r7, #12]
   287b2:	2230      	movs	r2, #48	; 0x30
   287b4:	5c9b      	ldrb	r3, [r3, r2]
   287b6:	b25a      	sxtb	r2, r3
   287b8:	1dfb      	adds	r3, r7, #7
   287ba:	781b      	ldrb	r3, [r3, #0]
   287bc:	2101      	movs	r1, #1
   287be:	4099      	lsls	r1, r3
   287c0:	000b      	movs	r3, r1
   287c2:	b25b      	sxtb	r3, r3
   287c4:	4313      	orrs	r3, r2
   287c6:	b25b      	sxtb	r3, r3
   287c8:	b2d9      	uxtb	r1, r3
   287ca:	68fb      	ldr	r3, [r7, #12]
   287cc:	2230      	movs	r2, #48	; 0x30
   287ce:	5499      	strb	r1, [r3, r2]
}
   287d0:	46c0      	nop			; (mov r8, r8)
   287d2:	46bd      	mov	sp, r7
   287d4:	b004      	add	sp, #16
   287d6:	bd80      	pop	{r7, pc}

000287d8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   287d8:	b580      	push	{r7, lr}
   287da:	b084      	sub	sp, #16
   287dc:	af00      	add	r7, sp, #0
   287de:	60f8      	str	r0, [r7, #12]
   287e0:	60b9      	str	r1, [r7, #8]
   287e2:	1dbb      	adds	r3, r7, #6
   287e4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   287e6:	1dbb      	adds	r3, r7, #6
   287e8:	881b      	ldrh	r3, [r3, #0]
   287ea:	2b00      	cmp	r3, #0
   287ec:	d101      	bne.n	287f2 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   287ee:	2317      	movs	r3, #23
   287f0:	e010      	b.n	28814 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   287f2:	68fb      	ldr	r3, [r7, #12]
   287f4:	79db      	ldrb	r3, [r3, #7]
   287f6:	2201      	movs	r2, #1
   287f8:	4053      	eors	r3, r2
   287fa:	b2db      	uxtb	r3, r3
   287fc:	2b00      	cmp	r3, #0
   287fe:	d001      	beq.n	28804 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28800:	231c      	movs	r3, #28
   28802:	e007      	b.n	28814 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28804:	1dbb      	adds	r3, r7, #6
   28806:	881a      	ldrh	r2, [r3, #0]
   28808:	68b9      	ldr	r1, [r7, #8]
   2880a:	68fb      	ldr	r3, [r7, #12]
   2880c:	0018      	movs	r0, r3
   2880e:	4b03      	ldr	r3, [pc, #12]	; (2881c <usart_write_buffer_job+0x44>)
   28810:	4798      	blx	r3
   28812:	0003      	movs	r3, r0
}
   28814:	0018      	movs	r0, r3
   28816:	46bd      	mov	sp, r7
   28818:	b004      	add	sp, #16
   2881a:	bd80      	pop	{r7, pc}
   2881c:	000286bd 	.word	0x000286bd

00028820 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28820:	b580      	push	{r7, lr}
   28822:	b084      	sub	sp, #16
   28824:	af00      	add	r7, sp, #0
   28826:	60f8      	str	r0, [r7, #12]
   28828:	60b9      	str	r1, [r7, #8]
   2882a:	1dbb      	adds	r3, r7, #6
   2882c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2882e:	1dbb      	adds	r3, r7, #6
   28830:	881b      	ldrh	r3, [r3, #0]
   28832:	2b00      	cmp	r3, #0
   28834:	d101      	bne.n	2883a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28836:	2317      	movs	r3, #23
   28838:	e010      	b.n	2885c <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2883a:	68fb      	ldr	r3, [r7, #12]
   2883c:	799b      	ldrb	r3, [r3, #6]
   2883e:	2201      	movs	r2, #1
   28840:	4053      	eors	r3, r2
   28842:	b2db      	uxtb	r3, r3
   28844:	2b00      	cmp	r3, #0
   28846:	d001      	beq.n	2884c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28848:	231c      	movs	r3, #28
   2884a:	e007      	b.n	2885c <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2884c:	1dbb      	adds	r3, r7, #6
   2884e:	881a      	ldrh	r2, [r3, #0]
   28850:	68b9      	ldr	r1, [r7, #8]
   28852:	68fb      	ldr	r3, [r7, #12]
   28854:	0018      	movs	r0, r3
   28856:	4b03      	ldr	r3, [pc, #12]	; (28864 <usart_read_buffer_job+0x44>)
   28858:	4798      	blx	r3
   2885a:	0003      	movs	r3, r0
}
   2885c:	0018      	movs	r0, r3
   2885e:	46bd      	mov	sp, r7
   28860:	b004      	add	sp, #16
   28862:	bd80      	pop	{r7, pc}
   28864:	00028719 	.word	0x00028719

00028868 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   28868:	b580      	push	{r7, lr}
   2886a:	b084      	sub	sp, #16
   2886c:	af00      	add	r7, sp, #0
   2886e:	6078      	str	r0, [r7, #4]
   28870:	000a      	movs	r2, r1
   28872:	1cfb      	adds	r3, r7, #3
   28874:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   28876:	1cfb      	adds	r3, r7, #3
   28878:	781b      	ldrb	r3, [r3, #0]
   2887a:	2b00      	cmp	r3, #0
   2887c:	d002      	beq.n	28884 <usart_get_job_status+0x1c>
   2887e:	2b01      	cmp	r3, #1
   28880:	d007      	beq.n	28892 <usart_get_job_status+0x2a>
   28882:	e00d      	b.n	288a0 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28884:	230f      	movs	r3, #15
   28886:	18fb      	adds	r3, r7, r3
   28888:	687a      	ldr	r2, [r7, #4]
   2888a:	2132      	movs	r1, #50	; 0x32
   2888c:	5c52      	ldrb	r2, [r2, r1]
   2888e:	701a      	strb	r2, [r3, #0]
			break;
   28890:	e00b      	b.n	288aa <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28892:	230f      	movs	r3, #15
   28894:	18fb      	adds	r3, r7, r3
   28896:	687a      	ldr	r2, [r7, #4]
   28898:	2133      	movs	r1, #51	; 0x33
   2889a:	5c52      	ldrb	r2, [r2, r1]
   2889c:	701a      	strb	r2, [r3, #0]
			break;
   2889e:	e004      	b.n	288aa <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   288a0:	230f      	movs	r3, #15
   288a2:	18fb      	adds	r3, r7, r3
   288a4:	2217      	movs	r2, #23
   288a6:	701a      	strb	r2, [r3, #0]
			break;
   288a8:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   288aa:	230f      	movs	r3, #15
   288ac:	18fb      	adds	r3, r7, r3
   288ae:	781b      	ldrb	r3, [r3, #0]
}
   288b0:	0018      	movs	r0, r3
   288b2:	46bd      	mov	sp, r7
   288b4:	b004      	add	sp, #16
   288b6:	bd80      	pop	{r7, pc}

000288b8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   288b8:	b580      	push	{r7, lr}
   288ba:	b088      	sub	sp, #32
   288bc:	af00      	add	r7, sp, #0
   288be:	0002      	movs	r2, r0
   288c0:	1dfb      	adds	r3, r7, #7
   288c2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   288c4:	1dfb      	adds	r3, r7, #7
   288c6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   288c8:	4ba3      	ldr	r3, [pc, #652]	; (28b58 <_usart_interrupt_handler+0x2a0>)
   288ca:	0092      	lsls	r2, r2, #2
   288cc:	58d3      	ldr	r3, [r2, r3]
   288ce:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   288d0:	69bb      	ldr	r3, [r7, #24]
   288d2:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   288d4:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   288d6:	69bb      	ldr	r3, [r7, #24]
   288d8:	0018      	movs	r0, r3
   288da:	4ba0      	ldr	r3, [pc, #640]	; (28b5c <_usart_interrupt_handler+0x2a4>)
   288dc:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   288de:	697b      	ldr	r3, [r7, #20]
   288e0:	7e1b      	ldrb	r3, [r3, #24]
   288e2:	b2da      	uxtb	r2, r3
   288e4:	2312      	movs	r3, #18
   288e6:	18fb      	adds	r3, r7, r3
   288e8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   288ea:	697b      	ldr	r3, [r7, #20]
   288ec:	7d9b      	ldrb	r3, [r3, #22]
   288ee:	b2db      	uxtb	r3, r3
   288f0:	b29a      	uxth	r2, r3
   288f2:	2312      	movs	r3, #18
   288f4:	18fb      	adds	r3, r7, r3
   288f6:	2112      	movs	r1, #18
   288f8:	1879      	adds	r1, r7, r1
   288fa:	8809      	ldrh	r1, [r1, #0]
   288fc:	400a      	ands	r2, r1
   288fe:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28900:	69bb      	ldr	r3, [r7, #24]
   28902:	2230      	movs	r2, #48	; 0x30
   28904:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28906:	69ba      	ldr	r2, [r7, #24]
   28908:	2131      	movs	r1, #49	; 0x31
   2890a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2890c:	4013      	ands	r3, r2
   2890e:	b2da      	uxtb	r2, r3
   28910:	2310      	movs	r3, #16
   28912:	18fb      	adds	r3, r7, r3
   28914:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28916:	2312      	movs	r3, #18
   28918:	18fb      	adds	r3, r7, r3
   2891a:	881b      	ldrh	r3, [r3, #0]
   2891c:	2201      	movs	r2, #1
   2891e:	4013      	ands	r3, r2
   28920:	d044      	beq.n	289ac <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28922:	69bb      	ldr	r3, [r7, #24]
   28924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28926:	b29b      	uxth	r3, r3
   28928:	2b00      	cmp	r3, #0
   2892a:	d03c      	beq.n	289a6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2892c:	69bb      	ldr	r3, [r7, #24]
   2892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28930:	781b      	ldrb	r3, [r3, #0]
   28932:	b2da      	uxtb	r2, r3
   28934:	231c      	movs	r3, #28
   28936:	18fb      	adds	r3, r7, r3
   28938:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2893a:	69bb      	ldr	r3, [r7, #24]
   2893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2893e:	1c5a      	adds	r2, r3, #1
   28940:	69bb      	ldr	r3, [r7, #24]
   28942:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28944:	69bb      	ldr	r3, [r7, #24]
   28946:	795b      	ldrb	r3, [r3, #5]
   28948:	2b01      	cmp	r3, #1
   2894a:	d113      	bne.n	28974 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2894c:	69bb      	ldr	r3, [r7, #24]
   2894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28950:	781b      	ldrb	r3, [r3, #0]
   28952:	b2db      	uxtb	r3, r3
   28954:	021b      	lsls	r3, r3, #8
   28956:	b21a      	sxth	r2, r3
   28958:	231c      	movs	r3, #28
   2895a:	18fb      	adds	r3, r7, r3
   2895c:	2100      	movs	r1, #0
   2895e:	5e5b      	ldrsh	r3, [r3, r1]
   28960:	4313      	orrs	r3, r2
   28962:	b21a      	sxth	r2, r3
   28964:	231c      	movs	r3, #28
   28966:	18fb      	adds	r3, r7, r3
   28968:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2896a:	69bb      	ldr	r3, [r7, #24]
   2896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2896e:	1c5a      	adds	r2, r3, #1
   28970:	69bb      	ldr	r3, [r7, #24]
   28972:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28974:	231c      	movs	r3, #28
   28976:	18fb      	adds	r3, r7, r3
   28978:	881b      	ldrh	r3, [r3, #0]
   2897a:	05db      	lsls	r3, r3, #23
   2897c:	0ddb      	lsrs	r3, r3, #23
   2897e:	b29a      	uxth	r2, r3
   28980:	697b      	ldr	r3, [r7, #20]
   28982:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28984:	69bb      	ldr	r3, [r7, #24]
   28986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28988:	b29b      	uxth	r3, r3
   2898a:	3b01      	subs	r3, #1
   2898c:	b29b      	uxth	r3, r3
   2898e:	69ba      	ldr	r2, [r7, #24]
   28990:	1c19      	adds	r1, r3, #0
   28992:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28994:	2b00      	cmp	r3, #0
   28996:	d109      	bne.n	289ac <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28998:	697b      	ldr	r3, [r7, #20]
   2899a:	2201      	movs	r2, #1
   2899c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2899e:	697b      	ldr	r3, [r7, #20]
   289a0:	2202      	movs	r2, #2
   289a2:	759a      	strb	r2, [r3, #22]
   289a4:	e002      	b.n	289ac <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   289a6:	697b      	ldr	r3, [r7, #20]
   289a8:	2201      	movs	r2, #1
   289aa:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   289ac:	2312      	movs	r3, #18
   289ae:	18fb      	adds	r3, r7, r3
   289b0:	881b      	ldrh	r3, [r3, #0]
   289b2:	2202      	movs	r2, #2
   289b4:	4013      	ands	r3, r2
   289b6:	d011      	beq.n	289dc <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   289b8:	697b      	ldr	r3, [r7, #20]
   289ba:	2202      	movs	r2, #2
   289bc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   289be:	69bb      	ldr	r3, [r7, #24]
   289c0:	2233      	movs	r2, #51	; 0x33
   289c2:	2100      	movs	r1, #0
   289c4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   289c6:	2310      	movs	r3, #16
   289c8:	18fb      	adds	r3, r7, r3
   289ca:	881b      	ldrh	r3, [r3, #0]
   289cc:	2201      	movs	r2, #1
   289ce:	4013      	ands	r3, r2
   289d0:	d004      	beq.n	289dc <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   289d2:	69bb      	ldr	r3, [r7, #24]
   289d4:	68db      	ldr	r3, [r3, #12]
   289d6:	69ba      	ldr	r2, [r7, #24]
   289d8:	0010      	movs	r0, r2
   289da:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   289dc:	2312      	movs	r3, #18
   289de:	18fb      	adds	r3, r7, r3
   289e0:	881b      	ldrh	r3, [r3, #0]
   289e2:	2204      	movs	r2, #4
   289e4:	4013      	ands	r3, r2
   289e6:	d100      	bne.n	289ea <_usart_interrupt_handler+0x132>
   289e8:	e0bd      	b.n	28b66 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   289ea:	69bb      	ldr	r3, [r7, #24]
   289ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   289ee:	b29b      	uxth	r3, r3
   289f0:	2b00      	cmp	r3, #0
   289f2:	d100      	bne.n	289f6 <_usart_interrupt_handler+0x13e>
   289f4:	e0b4      	b.n	28b60 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   289f6:	697b      	ldr	r3, [r7, #20]
   289f8:	8b5b      	ldrh	r3, [r3, #26]
   289fa:	b29b      	uxth	r3, r3
   289fc:	b2da      	uxtb	r2, r3
   289fe:	231f      	movs	r3, #31
   28a00:	18fb      	adds	r3, r7, r3
   28a02:	213f      	movs	r1, #63	; 0x3f
   28a04:	400a      	ands	r2, r1
   28a06:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28a08:	231f      	movs	r3, #31
   28a0a:	18fb      	adds	r3, r7, r3
   28a0c:	781b      	ldrb	r3, [r3, #0]
   28a0e:	2208      	movs	r2, #8
   28a10:	4013      	ands	r3, r2
   28a12:	d007      	beq.n	28a24 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28a14:	231f      	movs	r3, #31
   28a16:	18fb      	adds	r3, r7, r3
   28a18:	221f      	movs	r2, #31
   28a1a:	18ba      	adds	r2, r7, r2
   28a1c:	7812      	ldrb	r2, [r2, #0]
   28a1e:	2108      	movs	r1, #8
   28a20:	438a      	bics	r2, r1
   28a22:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28a24:	231f      	movs	r3, #31
   28a26:	18fb      	adds	r3, r7, r3
   28a28:	781b      	ldrb	r3, [r3, #0]
   28a2a:	2b00      	cmp	r3, #0
   28a2c:	d050      	beq.n	28ad0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28a2e:	231f      	movs	r3, #31
   28a30:	18fb      	adds	r3, r7, r3
   28a32:	781b      	ldrb	r3, [r3, #0]
   28a34:	2202      	movs	r2, #2
   28a36:	4013      	ands	r3, r2
   28a38:	d007      	beq.n	28a4a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28a3a:	69bb      	ldr	r3, [r7, #24]
   28a3c:	2232      	movs	r2, #50	; 0x32
   28a3e:	211a      	movs	r1, #26
   28a40:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28a42:	697b      	ldr	r3, [r7, #20]
   28a44:	2202      	movs	r2, #2
   28a46:	835a      	strh	r2, [r3, #26]
   28a48:	e036      	b.n	28ab8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28a4a:	231f      	movs	r3, #31
   28a4c:	18fb      	adds	r3, r7, r3
   28a4e:	781b      	ldrb	r3, [r3, #0]
   28a50:	2204      	movs	r2, #4
   28a52:	4013      	ands	r3, r2
   28a54:	d007      	beq.n	28a66 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28a56:	69bb      	ldr	r3, [r7, #24]
   28a58:	2232      	movs	r2, #50	; 0x32
   28a5a:	211e      	movs	r1, #30
   28a5c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28a5e:	697b      	ldr	r3, [r7, #20]
   28a60:	2204      	movs	r2, #4
   28a62:	835a      	strh	r2, [r3, #26]
   28a64:	e028      	b.n	28ab8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   28a66:	231f      	movs	r3, #31
   28a68:	18fb      	adds	r3, r7, r3
   28a6a:	781b      	ldrb	r3, [r3, #0]
   28a6c:	2201      	movs	r2, #1
   28a6e:	4013      	ands	r3, r2
   28a70:	d007      	beq.n	28a82 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28a72:	69bb      	ldr	r3, [r7, #24]
   28a74:	2232      	movs	r2, #50	; 0x32
   28a76:	2113      	movs	r1, #19
   28a78:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   28a7a:	697b      	ldr	r3, [r7, #20]
   28a7c:	2201      	movs	r2, #1
   28a7e:	835a      	strh	r2, [r3, #26]
   28a80:	e01a      	b.n	28ab8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28a82:	231f      	movs	r3, #31
   28a84:	18fb      	adds	r3, r7, r3
   28a86:	781b      	ldrb	r3, [r3, #0]
   28a88:	2210      	movs	r2, #16
   28a8a:	4013      	ands	r3, r2
   28a8c:	d007      	beq.n	28a9e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28a8e:	69bb      	ldr	r3, [r7, #24]
   28a90:	2232      	movs	r2, #50	; 0x32
   28a92:	2142      	movs	r1, #66	; 0x42
   28a94:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   28a96:	697b      	ldr	r3, [r7, #20]
   28a98:	2210      	movs	r2, #16
   28a9a:	835a      	strh	r2, [r3, #26]
   28a9c:	e00c      	b.n	28ab8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   28a9e:	231f      	movs	r3, #31
   28aa0:	18fb      	adds	r3, r7, r3
   28aa2:	781b      	ldrb	r3, [r3, #0]
   28aa4:	2220      	movs	r2, #32
   28aa6:	4013      	ands	r3, r2
   28aa8:	d006      	beq.n	28ab8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   28aaa:	69bb      	ldr	r3, [r7, #24]
   28aac:	2232      	movs	r2, #50	; 0x32
   28aae:	2141      	movs	r1, #65	; 0x41
   28ab0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   28ab2:	697b      	ldr	r3, [r7, #20]
   28ab4:	2220      	movs	r2, #32
   28ab6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   28ab8:	2310      	movs	r3, #16
   28aba:	18fb      	adds	r3, r7, r3
   28abc:	881b      	ldrh	r3, [r3, #0]
   28abe:	2204      	movs	r2, #4
   28ac0:	4013      	ands	r3, r2
				if (callback_status
   28ac2:	d050      	beq.n	28b66 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28ac4:	69bb      	ldr	r3, [r7, #24]
   28ac6:	695b      	ldr	r3, [r3, #20]
   28ac8:	69ba      	ldr	r2, [r7, #24]
   28aca:	0010      	movs	r0, r2
   28acc:	4798      	blx	r3
   28ace:	e04a      	b.n	28b66 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28ad0:	697b      	ldr	r3, [r7, #20]
   28ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28ad4:	b29a      	uxth	r2, r3
   28ad6:	230e      	movs	r3, #14
   28ad8:	18fb      	adds	r3, r7, r3
   28ada:	05d2      	lsls	r2, r2, #23
   28adc:	0dd2      	lsrs	r2, r2, #23
   28ade:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28ae0:	69bb      	ldr	r3, [r7, #24]
   28ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28ae4:	220e      	movs	r2, #14
   28ae6:	18ba      	adds	r2, r7, r2
   28ae8:	8812      	ldrh	r2, [r2, #0]
   28aea:	b2d2      	uxtb	r2, r2
   28aec:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28aee:	69bb      	ldr	r3, [r7, #24]
   28af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28af2:	1c5a      	adds	r2, r3, #1
   28af4:	69bb      	ldr	r3, [r7, #24]
   28af6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28af8:	69bb      	ldr	r3, [r7, #24]
   28afa:	795b      	ldrb	r3, [r3, #5]
   28afc:	2b01      	cmp	r3, #1
   28afe:	d10d      	bne.n	28b1c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28b00:	69bb      	ldr	r3, [r7, #24]
   28b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28b04:	220e      	movs	r2, #14
   28b06:	18ba      	adds	r2, r7, r2
   28b08:	8812      	ldrh	r2, [r2, #0]
   28b0a:	0a12      	lsrs	r2, r2, #8
   28b0c:	b292      	uxth	r2, r2
   28b0e:	b2d2      	uxtb	r2, r2
   28b10:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28b12:	69bb      	ldr	r3, [r7, #24]
   28b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28b16:	1c5a      	adds	r2, r3, #1
   28b18:	69bb      	ldr	r3, [r7, #24]
   28b1a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28b1c:	69bb      	ldr	r3, [r7, #24]
   28b1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28b20:	b29b      	uxth	r3, r3
   28b22:	3b01      	subs	r3, #1
   28b24:	b29b      	uxth	r3, r3
   28b26:	69ba      	ldr	r2, [r7, #24]
   28b28:	1c19      	adds	r1, r3, #0
   28b2a:	8591      	strh	r1, [r2, #44]	; 0x2c
   28b2c:	2b00      	cmp	r3, #0
   28b2e:	d11a      	bne.n	28b66 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28b30:	697b      	ldr	r3, [r7, #20]
   28b32:	2204      	movs	r2, #4
   28b34:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28b36:	69bb      	ldr	r3, [r7, #24]
   28b38:	2232      	movs	r2, #50	; 0x32
   28b3a:	2100      	movs	r1, #0
   28b3c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28b3e:	2310      	movs	r3, #16
   28b40:	18fb      	adds	r3, r7, r3
   28b42:	881b      	ldrh	r3, [r3, #0]
   28b44:	2202      	movs	r2, #2
   28b46:	4013      	ands	r3, r2
					if (callback_status
   28b48:	d00d      	beq.n	28b66 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   28b4a:	69bb      	ldr	r3, [r7, #24]
   28b4c:	691b      	ldr	r3, [r3, #16]
   28b4e:	69ba      	ldr	r2, [r7, #24]
   28b50:	0010      	movs	r0, r2
   28b52:	4798      	blx	r3
   28b54:	e007      	b.n	28b66 <_usart_interrupt_handler+0x2ae>
   28b56:	46c0      	nop			; (mov r8, r8)
   28b58:	20005a0c 	.word	0x20005a0c
   28b5c:	00028699 	.word	0x00028699
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28b60:	697b      	ldr	r3, [r7, #20]
   28b62:	2204      	movs	r2, #4
   28b64:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   28b66:	2312      	movs	r3, #18
   28b68:	18fb      	adds	r3, r7, r3
   28b6a:	881b      	ldrh	r3, [r3, #0]
   28b6c:	2210      	movs	r2, #16
   28b6e:	4013      	ands	r3, r2
   28b70:	d010      	beq.n	28b94 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28b72:	697b      	ldr	r3, [r7, #20]
   28b74:	2210      	movs	r2, #16
   28b76:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   28b78:	697b      	ldr	r3, [r7, #20]
   28b7a:	2210      	movs	r2, #16
   28b7c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28b7e:	2310      	movs	r3, #16
   28b80:	18fb      	adds	r3, r7, r3
   28b82:	881b      	ldrh	r3, [r3, #0]
   28b84:	2210      	movs	r2, #16
   28b86:	4013      	ands	r3, r2
   28b88:	d004      	beq.n	28b94 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   28b8a:	69bb      	ldr	r3, [r7, #24]
   28b8c:	69db      	ldr	r3, [r3, #28]
   28b8e:	69ba      	ldr	r2, [r7, #24]
   28b90:	0010      	movs	r0, r2
   28b92:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28b94:	2312      	movs	r3, #18
   28b96:	18fb      	adds	r3, r7, r3
   28b98:	881b      	ldrh	r3, [r3, #0]
   28b9a:	2220      	movs	r2, #32
   28b9c:	4013      	ands	r3, r2
   28b9e:	d010      	beq.n	28bc2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   28ba0:	697b      	ldr	r3, [r7, #20]
   28ba2:	2220      	movs	r2, #32
   28ba4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   28ba6:	697b      	ldr	r3, [r7, #20]
   28ba8:	2220      	movs	r2, #32
   28baa:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28bac:	2310      	movs	r3, #16
   28bae:	18fb      	adds	r3, r7, r3
   28bb0:	881b      	ldrh	r3, [r3, #0]
   28bb2:	2208      	movs	r2, #8
   28bb4:	4013      	ands	r3, r2
   28bb6:	d004      	beq.n	28bc2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   28bb8:	69bb      	ldr	r3, [r7, #24]
   28bba:	699b      	ldr	r3, [r3, #24]
   28bbc:	69ba      	ldr	r2, [r7, #24]
   28bbe:	0010      	movs	r0, r2
   28bc0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28bc2:	2312      	movs	r3, #18
   28bc4:	18fb      	adds	r3, r7, r3
   28bc6:	881b      	ldrh	r3, [r3, #0]
   28bc8:	2208      	movs	r2, #8
   28bca:	4013      	ands	r3, r2
   28bcc:	d010      	beq.n	28bf0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28bce:	697b      	ldr	r3, [r7, #20]
   28bd0:	2208      	movs	r2, #8
   28bd2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28bd4:	697b      	ldr	r3, [r7, #20]
   28bd6:	2208      	movs	r2, #8
   28bd8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   28bda:	2310      	movs	r3, #16
   28bdc:	18fb      	adds	r3, r7, r3
   28bde:	881b      	ldrh	r3, [r3, #0]
   28be0:	2220      	movs	r2, #32
   28be2:	4013      	ands	r3, r2
   28be4:	d004      	beq.n	28bf0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   28be6:	69bb      	ldr	r3, [r7, #24]
   28be8:	6a1b      	ldr	r3, [r3, #32]
   28bea:	69ba      	ldr	r2, [r7, #24]
   28bec:	0010      	movs	r0, r2
   28bee:	4798      	blx	r3
		}
	}
#endif
}
   28bf0:	46c0      	nop			; (mov r8, r8)
   28bf2:	46bd      	mov	sp, r7
   28bf4:	b008      	add	sp, #32
   28bf6:	bd80      	pop	{r7, pc}

00028bf8 <system_gclk_gen_get_config_defaults>:
{
   28bf8:	b580      	push	{r7, lr}
   28bfa:	b082      	sub	sp, #8
   28bfc:	af00      	add	r7, sp, #0
   28bfe:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28c00:	687b      	ldr	r3, [r7, #4]
   28c02:	2201      	movs	r2, #1
   28c04:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   28c06:	687b      	ldr	r3, [r7, #4]
   28c08:	2200      	movs	r2, #0
   28c0a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   28c0c:	687b      	ldr	r3, [r7, #4]
   28c0e:	2206      	movs	r2, #6
   28c10:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28c12:	687b      	ldr	r3, [r7, #4]
   28c14:	2200      	movs	r2, #0
   28c16:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   28c18:	687b      	ldr	r3, [r7, #4]
   28c1a:	2200      	movs	r2, #0
   28c1c:	725a      	strb	r2, [r3, #9]
}
   28c1e:	46c0      	nop			; (mov r8, r8)
   28c20:	46bd      	mov	sp, r7
   28c22:	b002      	add	sp, #8
   28c24:	bd80      	pop	{r7, pc}

00028c26 <system_gclk_chan_get_config_defaults>:
{
   28c26:	b580      	push	{r7, lr}
   28c28:	b082      	sub	sp, #8
   28c2a:	af00      	add	r7, sp, #0
   28c2c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28c2e:	687b      	ldr	r3, [r7, #4]
   28c30:	2200      	movs	r2, #0
   28c32:	701a      	strb	r2, [r3, #0]
}
   28c34:	46c0      	nop			; (mov r8, r8)
   28c36:	46bd      	mov	sp, r7
   28c38:	b002      	add	sp, #8
   28c3a:	bd80      	pop	{r7, pc}

00028c3c <system_clock_source_osc8m_get_config_defaults>:
{
   28c3c:	b580      	push	{r7, lr}
   28c3e:	b082      	sub	sp, #8
   28c40:	af00      	add	r7, sp, #0
   28c42:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28c44:	687b      	ldr	r3, [r7, #4]
   28c46:	2203      	movs	r2, #3
   28c48:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   28c4a:	687b      	ldr	r3, [r7, #4]
   28c4c:	2200      	movs	r2, #0
   28c4e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28c50:	687b      	ldr	r3, [r7, #4]
   28c52:	2201      	movs	r2, #1
   28c54:	709a      	strb	r2, [r3, #2]
}
   28c56:	46c0      	nop			; (mov r8, r8)
   28c58:	46bd      	mov	sp, r7
   28c5a:	b002      	add	sp, #8
   28c5c:	bd80      	pop	{r7, pc}
	...

00028c60 <system_cpu_clock_set_divider>:
{
   28c60:	b580      	push	{r7, lr}
   28c62:	b082      	sub	sp, #8
   28c64:	af00      	add	r7, sp, #0
   28c66:	0002      	movs	r2, r0
   28c68:	1dfb      	adds	r3, r7, #7
   28c6a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28c6c:	4a03      	ldr	r2, [pc, #12]	; (28c7c <system_cpu_clock_set_divider+0x1c>)
   28c6e:	1dfb      	adds	r3, r7, #7
   28c70:	781b      	ldrb	r3, [r3, #0]
   28c72:	7213      	strb	r3, [r2, #8]
}
   28c74:	46c0      	nop			; (mov r8, r8)
   28c76:	46bd      	mov	sp, r7
   28c78:	b002      	add	sp, #8
   28c7a:	bd80      	pop	{r7, pc}
   28c7c:	40000400 	.word	0x40000400

00028c80 <system_apb_clock_set_divider>:
{
   28c80:	b580      	push	{r7, lr}
   28c82:	b082      	sub	sp, #8
   28c84:	af00      	add	r7, sp, #0
   28c86:	0002      	movs	r2, r0
   28c88:	1dfb      	adds	r3, r7, #7
   28c8a:	701a      	strb	r2, [r3, #0]
   28c8c:	1dbb      	adds	r3, r7, #6
   28c8e:	1c0a      	adds	r2, r1, #0
   28c90:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28c92:	1dfb      	adds	r3, r7, #7
   28c94:	781b      	ldrb	r3, [r3, #0]
   28c96:	2b01      	cmp	r3, #1
   28c98:	d008      	beq.n	28cac <system_apb_clock_set_divider+0x2c>
   28c9a:	2b02      	cmp	r3, #2
   28c9c:	d00b      	beq.n	28cb6 <system_apb_clock_set_divider+0x36>
   28c9e:	2b00      	cmp	r3, #0
   28ca0:	d10e      	bne.n	28cc0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   28ca2:	4a0b      	ldr	r2, [pc, #44]	; (28cd0 <system_apb_clock_set_divider+0x50>)
   28ca4:	1dbb      	adds	r3, r7, #6
   28ca6:	781b      	ldrb	r3, [r3, #0]
   28ca8:	7253      	strb	r3, [r2, #9]
			break;
   28caa:	e00b      	b.n	28cc4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   28cac:	4a08      	ldr	r2, [pc, #32]	; (28cd0 <system_apb_clock_set_divider+0x50>)
   28cae:	1dbb      	adds	r3, r7, #6
   28cb0:	781b      	ldrb	r3, [r3, #0]
   28cb2:	7293      	strb	r3, [r2, #10]
			break;
   28cb4:	e006      	b.n	28cc4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   28cb6:	4a06      	ldr	r2, [pc, #24]	; (28cd0 <system_apb_clock_set_divider+0x50>)
   28cb8:	1dbb      	adds	r3, r7, #6
   28cba:	781b      	ldrb	r3, [r3, #0]
   28cbc:	72d3      	strb	r3, [r2, #11]
			break;
   28cbe:	e001      	b.n	28cc4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   28cc0:	2317      	movs	r3, #23
   28cc2:	e000      	b.n	28cc6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   28cc4:	2300      	movs	r3, #0
}
   28cc6:	0018      	movs	r0, r3
   28cc8:	46bd      	mov	sp, r7
   28cca:	b002      	add	sp, #8
   28ccc:	bd80      	pop	{r7, pc}
   28cce:	46c0      	nop			; (mov r8, r8)
   28cd0:	40000400 	.word	0x40000400

00028cd4 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   28cd4:	b580      	push	{r7, lr}
   28cd6:	b082      	sub	sp, #8
   28cd8:	af00      	add	r7, sp, #0
   28cda:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   28cdc:	687b      	ldr	r3, [r7, #4]
   28cde:	2201      	movs	r2, #1
   28ce0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   28ce2:	687b      	ldr	r3, [r7, #4]
   28ce4:	2200      	movs	r2, #0
   28ce6:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   28ce8:	687b      	ldr	r3, [r7, #4]
   28cea:	2200      	movs	r2, #0
   28cec:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   28cee:	687b      	ldr	r3, [r7, #4]
   28cf0:	2200      	movs	r2, #0
   28cf2:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   28cf4:	687b      	ldr	r3, [r7, #4]
   28cf6:	2200      	movs	r2, #0
   28cf8:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   28cfa:	687b      	ldr	r3, [r7, #4]
   28cfc:	4a0a      	ldr	r2, [pc, #40]	; (28d28 <system_clock_source_dpll_get_config_defaults+0x54>)
   28cfe:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   28d00:	687b      	ldr	r3, [r7, #4]
   28d02:	2280      	movs	r2, #128	; 0x80
   28d04:	0212      	lsls	r2, r2, #8
   28d06:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   28d08:	687b      	ldr	r3, [r7, #4]
   28d0a:	2201      	movs	r2, #1
   28d0c:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   28d0e:	687b      	ldr	r3, [r7, #4]
   28d10:	2200      	movs	r2, #0
   28d12:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   28d14:	687b      	ldr	r3, [r7, #4]
   28d16:	2200      	movs	r2, #0
   28d18:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   28d1a:	687b      	ldr	r3, [r7, #4]
   28d1c:	2200      	movs	r2, #0
   28d1e:	749a      	strb	r2, [r3, #18]
};
   28d20:	46c0      	nop			; (mov r8, r8)
   28d22:	46bd      	mov	sp, r7
   28d24:	b002      	add	sp, #8
   28d26:	bd80      	pop	{r7, pc}
   28d28:	02dc6c00 	.word	0x02dc6c00

00028d2c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   28d2c:	b580      	push	{r7, lr}
   28d2e:	b082      	sub	sp, #8
   28d30:	af00      	add	r7, sp, #0
   28d32:	0002      	movs	r2, r0
   28d34:	1dfb      	adds	r3, r7, #7
   28d36:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   28d38:	4a08      	ldr	r2, [pc, #32]	; (28d5c <system_flash_set_waitstates+0x30>)
   28d3a:	1dfb      	adds	r3, r7, #7
   28d3c:	781b      	ldrb	r3, [r3, #0]
   28d3e:	210f      	movs	r1, #15
   28d40:	400b      	ands	r3, r1
   28d42:	b2d9      	uxtb	r1, r3
   28d44:	6853      	ldr	r3, [r2, #4]
   28d46:	200f      	movs	r0, #15
   28d48:	4001      	ands	r1, r0
   28d4a:	0049      	lsls	r1, r1, #1
   28d4c:	201e      	movs	r0, #30
   28d4e:	4383      	bics	r3, r0
   28d50:	430b      	orrs	r3, r1
   28d52:	6053      	str	r3, [r2, #4]
}
   28d54:	46c0      	nop			; (mov r8, r8)
   28d56:	46bd      	mov	sp, r7
   28d58:	b002      	add	sp, #8
   28d5a:	bd80      	pop	{r7, pc}
   28d5c:	41004000 	.word	0x41004000

00028d60 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   28d60:	b580      	push	{r7, lr}
   28d62:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28d64:	46c0      	nop			; (mov r8, r8)
   28d66:	4b04      	ldr	r3, [pc, #16]	; (28d78 <_system_dfll_wait_for_sync+0x18>)
   28d68:	68db      	ldr	r3, [r3, #12]
   28d6a:	2210      	movs	r2, #16
   28d6c:	4013      	ands	r3, r2
   28d6e:	d0fa      	beq.n	28d66 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   28d70:	46c0      	nop			; (mov r8, r8)
   28d72:	46bd      	mov	sp, r7
   28d74:	bd80      	pop	{r7, pc}
   28d76:	46c0      	nop			; (mov r8, r8)
   28d78:	40000800 	.word	0x40000800

00028d7c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   28d7c:	b580      	push	{r7, lr}
   28d7e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   28d80:	4b0c      	ldr	r3, [pc, #48]	; (28db4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28d82:	2202      	movs	r2, #2
   28d84:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28d86:	4b0c      	ldr	r3, [pc, #48]	; (28db8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28d88:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   28d8a:	4a0a      	ldr	r2, [pc, #40]	; (28db4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28d8c:	4b0b      	ldr	r3, [pc, #44]	; (28dbc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28d8e:	689b      	ldr	r3, [r3, #8]
   28d90:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   28d92:	4a08      	ldr	r2, [pc, #32]	; (28db4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28d94:	4b09      	ldr	r3, [pc, #36]	; (28dbc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28d96:	685b      	ldr	r3, [r3, #4]
   28d98:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   28d9a:	4b06      	ldr	r3, [pc, #24]	; (28db4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28d9c:	2200      	movs	r2, #0
   28d9e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28da0:	4b05      	ldr	r3, [pc, #20]	; (28db8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28da2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   28da4:	4a03      	ldr	r2, [pc, #12]	; (28db4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28da6:	4b05      	ldr	r3, [pc, #20]	; (28dbc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28da8:	681b      	ldr	r3, [r3, #0]
   28daa:	b29b      	uxth	r3, r3
   28dac:	8493      	strh	r3, [r2, #36]	; 0x24
}
   28dae:	46c0      	nop			; (mov r8, r8)
   28db0:	46bd      	mov	sp, r7
   28db2:	bd80      	pop	{r7, pc}
   28db4:	40000800 	.word	0x40000800
   28db8:	00028d61 	.word	0x00028d61
   28dbc:	20004158 	.word	0x20004158

00028dc0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   28dc0:	b580      	push	{r7, lr}
   28dc2:	b082      	sub	sp, #8
   28dc4:	af00      	add	r7, sp, #0
   28dc6:	0002      	movs	r2, r0
   28dc8:	1dfb      	adds	r3, r7, #7
   28dca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28dcc:	1dfb      	adds	r3, r7, #7
   28dce:	781b      	ldrb	r3, [r3, #0]
   28dd0:	2b08      	cmp	r3, #8
   28dd2:	d841      	bhi.n	28e58 <system_clock_source_get_hz+0x98>
   28dd4:	009a      	lsls	r2, r3, #2
   28dd6:	4b23      	ldr	r3, [pc, #140]	; (28e64 <system_clock_source_get_hz+0xa4>)
   28dd8:	18d3      	adds	r3, r2, r3
   28dda:	681b      	ldr	r3, [r3, #0]
   28ddc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   28dde:	4b22      	ldr	r3, [pc, #136]	; (28e68 <system_clock_source_get_hz+0xa8>)
   28de0:	691b      	ldr	r3, [r3, #16]
   28de2:	e03a      	b.n	28e5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   28de4:	4b21      	ldr	r3, [pc, #132]	; (28e6c <system_clock_source_get_hz+0xac>)
   28de6:	6a1b      	ldr	r3, [r3, #32]
   28de8:	059b      	lsls	r3, r3, #22
   28dea:	0f9b      	lsrs	r3, r3, #30
   28dec:	b2db      	uxtb	r3, r3
   28dee:	001a      	movs	r2, r3
   28df0:	4b1f      	ldr	r3, [pc, #124]	; (28e70 <system_clock_source_get_hz+0xb0>)
   28df2:	40d3      	lsrs	r3, r2
   28df4:	e031      	b.n	28e5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   28df6:	2380      	movs	r3, #128	; 0x80
   28df8:	021b      	lsls	r3, r3, #8
   28dfa:	e02e      	b.n	28e5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   28dfc:	2380      	movs	r3, #128	; 0x80
   28dfe:	021b      	lsls	r3, r3, #8
   28e00:	e02b      	b.n	28e5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   28e02:	4b19      	ldr	r3, [pc, #100]	; (28e68 <system_clock_source_get_hz+0xa8>)
   28e04:	695b      	ldr	r3, [r3, #20]
   28e06:	e028      	b.n	28e5a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   28e08:	4b17      	ldr	r3, [pc, #92]	; (28e68 <system_clock_source_get_hz+0xa8>)
   28e0a:	681b      	ldr	r3, [r3, #0]
   28e0c:	2202      	movs	r2, #2
   28e0e:	4013      	ands	r3, r2
   28e10:	d101      	bne.n	28e16 <system_clock_source_get_hz+0x56>
			return 0;
   28e12:	2300      	movs	r3, #0
   28e14:	e021      	b.n	28e5a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   28e16:	4b17      	ldr	r3, [pc, #92]	; (28e74 <system_clock_source_get_hz+0xb4>)
   28e18:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   28e1a:	4b13      	ldr	r3, [pc, #76]	; (28e68 <system_clock_source_get_hz+0xa8>)
   28e1c:	681b      	ldr	r3, [r3, #0]
   28e1e:	2224      	movs	r2, #36	; 0x24
   28e20:	4013      	ands	r3, r2
   28e22:	2b04      	cmp	r3, #4
   28e24:	d109      	bne.n	28e3a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28e26:	2000      	movs	r0, #0
   28e28:	4b13      	ldr	r3, [pc, #76]	; (28e78 <system_clock_source_get_hz+0xb8>)
   28e2a:	4798      	blx	r3
   28e2c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   28e2e:	4b0e      	ldr	r3, [pc, #56]	; (28e68 <system_clock_source_get_hz+0xa8>)
   28e30:	689b      	ldr	r3, [r3, #8]
   28e32:	041b      	lsls	r3, r3, #16
   28e34:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28e36:	4353      	muls	r3, r2
   28e38:	e00f      	b.n	28e5a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   28e3a:	4b10      	ldr	r3, [pc, #64]	; (28e7c <system_clock_source_get_hz+0xbc>)
   28e3c:	e00d      	b.n	28e5a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   28e3e:	4a0b      	ldr	r2, [pc, #44]	; (28e6c <system_clock_source_get_hz+0xac>)
   28e40:	2350      	movs	r3, #80	; 0x50
   28e42:	5cd3      	ldrb	r3, [r2, r3]
   28e44:	b2db      	uxtb	r3, r3
   28e46:	001a      	movs	r2, r3
   28e48:	2304      	movs	r3, #4
   28e4a:	4013      	ands	r3, r2
   28e4c:	d101      	bne.n	28e52 <system_clock_source_get_hz+0x92>
			return 0;
   28e4e:	2300      	movs	r3, #0
   28e50:	e003      	b.n	28e5a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   28e52:	4b05      	ldr	r3, [pc, #20]	; (28e68 <system_clock_source_get_hz+0xa8>)
   28e54:	68db      	ldr	r3, [r3, #12]
   28e56:	e000      	b.n	28e5a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   28e58:	2300      	movs	r3, #0
	}
}
   28e5a:	0018      	movs	r0, r3
   28e5c:	46bd      	mov	sp, r7
   28e5e:	b002      	add	sp, #8
   28e60:	bd80      	pop	{r7, pc}
   28e62:	46c0      	nop			; (mov r8, r8)
   28e64:	00038dcc 	.word	0x00038dcc
   28e68:	20004158 	.word	0x20004158
   28e6c:	40000800 	.word	0x40000800
   28e70:	007a1200 	.word	0x007a1200
   28e74:	00028d61 	.word	0x00028d61
   28e78:	0002985d 	.word	0x0002985d
   28e7c:	02dc6c00 	.word	0x02dc6c00

00028e80 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   28e80:	b580      	push	{r7, lr}
   28e82:	b084      	sub	sp, #16
   28e84:	af00      	add	r7, sp, #0
   28e86:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   28e88:	4b1a      	ldr	r3, [pc, #104]	; (28ef4 <system_clock_source_osc8m_set_config+0x74>)
   28e8a:	6a1b      	ldr	r3, [r3, #32]
   28e8c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   28e8e:	687b      	ldr	r3, [r7, #4]
   28e90:	781b      	ldrb	r3, [r3, #0]
   28e92:	1c1a      	adds	r2, r3, #0
   28e94:	2303      	movs	r3, #3
   28e96:	4013      	ands	r3, r2
   28e98:	b2da      	uxtb	r2, r3
   28e9a:	230d      	movs	r3, #13
   28e9c:	18fb      	adds	r3, r7, r3
   28e9e:	2103      	movs	r1, #3
   28ea0:	400a      	ands	r2, r1
   28ea2:	0010      	movs	r0, r2
   28ea4:	781a      	ldrb	r2, [r3, #0]
   28ea6:	2103      	movs	r1, #3
   28ea8:	438a      	bics	r2, r1
   28eaa:	1c11      	adds	r1, r2, #0
   28eac:	1c02      	adds	r2, r0, #0
   28eae:	430a      	orrs	r2, r1
   28eb0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   28eb2:	687b      	ldr	r3, [r7, #4]
   28eb4:	789a      	ldrb	r2, [r3, #2]
   28eb6:	230c      	movs	r3, #12
   28eb8:	18fb      	adds	r3, r7, r3
   28eba:	01d0      	lsls	r0, r2, #7
   28ebc:	781a      	ldrb	r2, [r3, #0]
   28ebe:	217f      	movs	r1, #127	; 0x7f
   28ec0:	400a      	ands	r2, r1
   28ec2:	1c11      	adds	r1, r2, #0
   28ec4:	1c02      	adds	r2, r0, #0
   28ec6:	430a      	orrs	r2, r1
   28ec8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   28eca:	687b      	ldr	r3, [r7, #4]
   28ecc:	785a      	ldrb	r2, [r3, #1]
   28ece:	230c      	movs	r3, #12
   28ed0:	18fb      	adds	r3, r7, r3
   28ed2:	2101      	movs	r1, #1
   28ed4:	400a      	ands	r2, r1
   28ed6:	0190      	lsls	r0, r2, #6
   28ed8:	781a      	ldrb	r2, [r3, #0]
   28eda:	2140      	movs	r1, #64	; 0x40
   28edc:	438a      	bics	r2, r1
   28ede:	1c11      	adds	r1, r2, #0
   28ee0:	1c02      	adds	r2, r0, #0
   28ee2:	430a      	orrs	r2, r1
   28ee4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   28ee6:	4b03      	ldr	r3, [pc, #12]	; (28ef4 <system_clock_source_osc8m_set_config+0x74>)
   28ee8:	68fa      	ldr	r2, [r7, #12]
   28eea:	621a      	str	r2, [r3, #32]
}
   28eec:	46c0      	nop			; (mov r8, r8)
   28eee:	46bd      	mov	sp, r7
   28ef0:	b004      	add	sp, #16
   28ef2:	bd80      	pop	{r7, pc}
   28ef4:	40000800 	.word	0x40000800

00028ef8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   28ef8:	b580      	push	{r7, lr}
   28efa:	b086      	sub	sp, #24
   28efc:	af00      	add	r7, sp, #0
   28efe:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   28f00:	687b      	ldr	r3, [r7, #4]
   28f02:	68db      	ldr	r3, [r3, #12]
   28f04:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   28f06:	687b      	ldr	r3, [r7, #4]
   28f08:	7d1b      	ldrb	r3, [r3, #20]
   28f0a:	2b01      	cmp	r3, #1
   28f0c:	d10a      	bne.n	28f24 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   28f0e:	687b      	ldr	r3, [r7, #4]
   28f10:	8a1b      	ldrh	r3, [r3, #16]
   28f12:	3301      	adds	r3, #1
   28f14:	005b      	lsls	r3, r3, #1
   28f16:	001a      	movs	r2, r3
   28f18:	4b36      	ldr	r3, [pc, #216]	; (28ff4 <system_clock_source_dpll_set_config+0xfc>)
   28f1a:	0011      	movs	r1, r2
   28f1c:	6978      	ldr	r0, [r7, #20]
   28f1e:	4798      	blx	r3
   28f20:	0003      	movs	r3, r0
   28f22:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   28f24:	687b      	ldr	r3, [r7, #4]
   28f26:	689b      	ldr	r3, [r3, #8]
   28f28:	011a      	lsls	r2, r3, #4
   28f2a:	4b32      	ldr	r3, [pc, #200]	; (28ff4 <system_clock_source_dpll_set_config+0xfc>)
   28f2c:	6979      	ldr	r1, [r7, #20]
   28f2e:	0010      	movs	r0, r2
   28f30:	4798      	blx	r3
   28f32:	0003      	movs	r3, r0
   28f34:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   28f36:	693b      	ldr	r3, [r7, #16]
   28f38:	b2da      	uxtb	r2, r3
   28f3a:	230f      	movs	r3, #15
   28f3c:	18fb      	adds	r3, r7, r3
   28f3e:	210f      	movs	r1, #15
   28f40:	400a      	ands	r2, r1
   28f42:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   28f44:	693b      	ldr	r3, [r7, #16]
   28f46:	091b      	lsrs	r3, r3, #4
   28f48:	3b01      	subs	r3, #1
   28f4a:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   28f4c:	492a      	ldr	r1, [pc, #168]	; (28ff8 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28f4e:	687b      	ldr	r3, [r7, #4]
   28f50:	781b      	ldrb	r3, [r3, #0]
   28f52:	01db      	lsls	r3, r3, #7
   28f54:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   28f56:	687b      	ldr	r3, [r7, #4]
   28f58:	785b      	ldrb	r3, [r3, #1]
   28f5a:	019b      	lsls	r3, r3, #6
   28f5c:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28f5e:	4313      	orrs	r3, r2
   28f60:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   28f62:	2344      	movs	r3, #68	; 0x44
   28f64:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   28f66:	4b24      	ldr	r3, [pc, #144]	; (28ff8 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28f68:	220f      	movs	r2, #15
   28f6a:	18ba      	adds	r2, r7, r2
   28f6c:	7812      	ldrb	r2, [r2, #0]
   28f6e:	0412      	lsls	r2, r2, #16
   28f70:	0011      	movs	r1, r2
   28f72:	22f0      	movs	r2, #240	; 0xf0
   28f74:	0312      	lsls	r2, r2, #12
   28f76:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   28f78:	693a      	ldr	r2, [r7, #16]
   28f7a:	0512      	lsls	r2, r2, #20
   28f7c:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28f7e:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   28f80:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   28f82:	4b1d      	ldr	r3, [pc, #116]	; (28ff8 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28f84:	687a      	ldr	r2, [r7, #4]
   28f86:	8a12      	ldrh	r2, [r2, #16]
   28f88:	0412      	lsls	r2, r2, #16
   28f8a:	0011      	movs	r1, r2
   28f8c:	4a1b      	ldr	r2, [pc, #108]	; (28ffc <system_clock_source_dpll_set_config+0x104>)
   28f8e:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28f90:	687a      	ldr	r2, [r7, #4]
   28f92:	7892      	ldrb	r2, [r2, #2]
   28f94:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28f96:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28f98:	687a      	ldr	r2, [r7, #4]
   28f9a:	7cd2      	ldrb	r2, [r2, #19]
   28f9c:	0212      	lsls	r2, r2, #8
   28f9e:	0010      	movs	r0, r2
   28fa0:	22e0      	movs	r2, #224	; 0xe0
   28fa2:	00d2      	lsls	r2, r2, #3
   28fa4:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28fa6:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28fa8:	687a      	ldr	r2, [r7, #4]
   28faa:	7d12      	ldrb	r2, [r2, #20]
   28fac:	0112      	lsls	r2, r2, #4
   28fae:	0010      	movs	r0, r2
   28fb0:	2230      	movs	r2, #48	; 0x30
   28fb2:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28fb4:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28fb6:	687a      	ldr	r2, [r7, #4]
   28fb8:	78d2      	ldrb	r2, [r2, #3]
   28fba:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28fbc:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28fbe:	687a      	ldr	r2, [r7, #4]
   28fc0:	7912      	ldrb	r2, [r2, #4]
   28fc2:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28fc4:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   28fc6:	687a      	ldr	r2, [r7, #4]
   28fc8:	7c92      	ldrb	r2, [r2, #18]
   28fca:	0010      	movs	r0, r2
   28fcc:	2203      	movs	r2, #3
   28fce:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28fd0:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   28fd2:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   28fd4:	693b      	ldr	r3, [r7, #16]
   28fd6:	3301      	adds	r3, #1
   28fd8:	011a      	lsls	r2, r3, #4
   28fda:	230f      	movs	r3, #15
   28fdc:	18fb      	adds	r3, r7, r3
   28fde:	781b      	ldrb	r3, [r3, #0]
   28fe0:	18d3      	adds	r3, r2, r3
   28fe2:	697a      	ldr	r2, [r7, #20]
   28fe4:	4353      	muls	r3, r2
   28fe6:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   28fe8:	4b05      	ldr	r3, [pc, #20]	; (29000 <system_clock_source_dpll_set_config+0x108>)
   28fea:	60da      	str	r2, [r3, #12]
}
   28fec:	46c0      	nop			; (mov r8, r8)
   28fee:	46bd      	mov	sp, r7
   28ff0:	b006      	add	sp, #24
   28ff2:	bd80      	pop	{r7, pc}
   28ff4:	00032245 	.word	0x00032245
   28ff8:	40000800 	.word	0x40000800
   28ffc:	07ff0000 	.word	0x07ff0000
   29000:	20004158 	.word	0x20004158

00029004 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29004:	b580      	push	{r7, lr}
   29006:	b082      	sub	sp, #8
   29008:	af00      	add	r7, sp, #0
   2900a:	0002      	movs	r2, r0
   2900c:	1dfb      	adds	r3, r7, #7
   2900e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29010:	1dfb      	adds	r3, r7, #7
   29012:	781b      	ldrb	r3, [r3, #0]
   29014:	2b08      	cmp	r3, #8
   29016:	d83b      	bhi.n	29090 <system_clock_source_enable+0x8c>
   29018:	009a      	lsls	r2, r3, #2
   2901a:	4b21      	ldr	r3, [pc, #132]	; (290a0 <system_clock_source_enable+0x9c>)
   2901c:	18d3      	adds	r3, r2, r3
   2901e:	681b      	ldr	r3, [r3, #0]
   29020:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29022:	4b20      	ldr	r3, [pc, #128]	; (290a4 <system_clock_source_enable+0xa0>)
   29024:	4a1f      	ldr	r2, [pc, #124]	; (290a4 <system_clock_source_enable+0xa0>)
   29026:	6a12      	ldr	r2, [r2, #32]
   29028:	2102      	movs	r1, #2
   2902a:	430a      	orrs	r2, r1
   2902c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2902e:	2300      	movs	r3, #0
   29030:	e031      	b.n	29096 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29032:	4b1c      	ldr	r3, [pc, #112]	; (290a4 <system_clock_source_enable+0xa0>)
   29034:	4a1b      	ldr	r2, [pc, #108]	; (290a4 <system_clock_source_enable+0xa0>)
   29036:	6992      	ldr	r2, [r2, #24]
   29038:	2102      	movs	r1, #2
   2903a:	430a      	orrs	r2, r1
   2903c:	619a      	str	r2, [r3, #24]
		break;
   2903e:	e029      	b.n	29094 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29040:	4a18      	ldr	r2, [pc, #96]	; (290a4 <system_clock_source_enable+0xa0>)
   29042:	4b18      	ldr	r3, [pc, #96]	; (290a4 <system_clock_source_enable+0xa0>)
   29044:	8a1b      	ldrh	r3, [r3, #16]
   29046:	b29b      	uxth	r3, r3
   29048:	2102      	movs	r1, #2
   2904a:	430b      	orrs	r3, r1
   2904c:	b29b      	uxth	r3, r3
   2904e:	8213      	strh	r3, [r2, #16]
		break;
   29050:	e020      	b.n	29094 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29052:	4a14      	ldr	r2, [pc, #80]	; (290a4 <system_clock_source_enable+0xa0>)
   29054:	4b13      	ldr	r3, [pc, #76]	; (290a4 <system_clock_source_enable+0xa0>)
   29056:	8a9b      	ldrh	r3, [r3, #20]
   29058:	b29b      	uxth	r3, r3
   2905a:	2102      	movs	r1, #2
   2905c:	430b      	orrs	r3, r1
   2905e:	b29b      	uxth	r3, r3
   29060:	8293      	strh	r3, [r2, #20]
		break;
   29062:	e017      	b.n	29094 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29064:	4b10      	ldr	r3, [pc, #64]	; (290a8 <system_clock_source_enable+0xa4>)
   29066:	681b      	ldr	r3, [r3, #0]
   29068:	2202      	movs	r2, #2
   2906a:	431a      	orrs	r2, r3
   2906c:	4b0e      	ldr	r3, [pc, #56]	; (290a8 <system_clock_source_enable+0xa4>)
   2906e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29070:	4b0e      	ldr	r3, [pc, #56]	; (290ac <system_clock_source_enable+0xa8>)
   29072:	4798      	blx	r3
		break;
   29074:	e00e      	b.n	29094 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   29076:	4a0b      	ldr	r2, [pc, #44]	; (290a4 <system_clock_source_enable+0xa0>)
   29078:	490a      	ldr	r1, [pc, #40]	; (290a4 <system_clock_source_enable+0xa0>)
   2907a:	2344      	movs	r3, #68	; 0x44
   2907c:	5ccb      	ldrb	r3, [r1, r3]
   2907e:	b2db      	uxtb	r3, r3
   29080:	2102      	movs	r1, #2
   29082:	430b      	orrs	r3, r1
   29084:	b2d9      	uxtb	r1, r3
   29086:	2344      	movs	r3, #68	; 0x44
   29088:	54d1      	strb	r1, [r2, r3]
		break;
   2908a:	e003      	b.n	29094 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2908c:	2300      	movs	r3, #0
   2908e:	e002      	b.n	29096 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29090:	2317      	movs	r3, #23
   29092:	e000      	b.n	29096 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29094:	2300      	movs	r3, #0
}
   29096:	0018      	movs	r0, r3
   29098:	46bd      	mov	sp, r7
   2909a:	b002      	add	sp, #8
   2909c:	bd80      	pop	{r7, pc}
   2909e:	46c0      	nop			; (mov r8, r8)
   290a0:	00038df0 	.word	0x00038df0
   290a4:	40000800 	.word	0x40000800
   290a8:	20004158 	.word	0x20004158
   290ac:	00028d7d 	.word	0x00028d7d

000290b0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   290b0:	b580      	push	{r7, lr}
   290b2:	b084      	sub	sp, #16
   290b4:	af00      	add	r7, sp, #0
   290b6:	0002      	movs	r2, r0
   290b8:	1dfb      	adds	r3, r7, #7
   290ba:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   290bc:	2300      	movs	r3, #0
   290be:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   290c0:	1dfb      	adds	r3, r7, #7
   290c2:	781b      	ldrb	r3, [r3, #0]
   290c4:	2b08      	cmp	r3, #8
   290c6:	d821      	bhi.n	2910c <system_clock_source_is_ready+0x5c>
   290c8:	009a      	lsls	r2, r3, #2
   290ca:	4b18      	ldr	r3, [pc, #96]	; (2912c <system_clock_source_is_ready+0x7c>)
   290cc:	18d3      	adds	r3, r2, r3
   290ce:	681b      	ldr	r3, [r3, #0]
   290d0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   290d2:	2308      	movs	r3, #8
   290d4:	60fb      	str	r3, [r7, #12]
		break;
   290d6:	e01b      	b.n	29110 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   290d8:	2304      	movs	r3, #4
   290da:	60fb      	str	r3, [r7, #12]
		break;
   290dc:	e018      	b.n	29110 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   290de:	2301      	movs	r3, #1
   290e0:	60fb      	str	r3, [r7, #12]
		break;
   290e2:	e015      	b.n	29110 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   290e4:	2302      	movs	r3, #2
   290e6:	60fb      	str	r3, [r7, #12]
		break;
   290e8:	e012      	b.n	29110 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   290ea:	2310      	movs	r3, #16
   290ec:	60fb      	str	r3, [r7, #12]
		}
		break;
   290ee:	e00f      	b.n	29110 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   290f0:	4a0f      	ldr	r2, [pc, #60]	; (29130 <system_clock_source_is_ready+0x80>)
   290f2:	2350      	movs	r3, #80	; 0x50
   290f4:	5cd3      	ldrb	r3, [r2, r3]
   290f6:	b2db      	uxtb	r3, r3
   290f8:	001a      	movs	r2, r3
   290fa:	2303      	movs	r3, #3
   290fc:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   290fe:	3b03      	subs	r3, #3
   29100:	425a      	negs	r2, r3
   29102:	4153      	adcs	r3, r2
   29104:	b2db      	uxtb	r3, r3
   29106:	e00c      	b.n	29122 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29108:	2301      	movs	r3, #1
   2910a:	e00a      	b.n	29122 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2910c:	2300      	movs	r3, #0
   2910e:	e008      	b.n	29122 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29110:	4b07      	ldr	r3, [pc, #28]	; (29130 <system_clock_source_is_ready+0x80>)
   29112:	68db      	ldr	r3, [r3, #12]
   29114:	68fa      	ldr	r2, [r7, #12]
   29116:	401a      	ands	r2, r3
   29118:	68fb      	ldr	r3, [r7, #12]
   2911a:	1ad3      	subs	r3, r2, r3
   2911c:	425a      	negs	r2, r3
   2911e:	4153      	adcs	r3, r2
   29120:	b2db      	uxtb	r3, r3
}
   29122:	0018      	movs	r0, r3
   29124:	46bd      	mov	sp, r7
   29126:	b004      	add	sp, #16
   29128:	bd80      	pop	{r7, pc}
   2912a:	46c0      	nop			; (mov r8, r8)
   2912c:	00038e14 	.word	0x00038e14
   29130:	40000800 	.word	0x40000800

00029134 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29134:	b580      	push	{r7, lr}
   29136:	b082      	sub	sp, #8
   29138:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2913a:	003b      	movs	r3, r7
   2913c:	2203      	movs	r2, #3
   2913e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29140:	2300      	movs	r3, #0
   29142:	607b      	str	r3, [r7, #4]
   29144:	e009      	b.n	2915a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   29146:	687b      	ldr	r3, [r7, #4]
   29148:	b2db      	uxtb	r3, r3
   2914a:	003a      	movs	r2, r7
   2914c:	0011      	movs	r1, r2
   2914e:	0018      	movs	r0, r3
   29150:	4b05      	ldr	r3, [pc, #20]	; (29168 <_switch_peripheral_gclk+0x34>)
   29152:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29154:	687b      	ldr	r3, [r7, #4]
   29156:	3301      	adds	r3, #1
   29158:	607b      	str	r3, [r7, #4]
   2915a:	687b      	ldr	r3, [r7, #4]
   2915c:	2b24      	cmp	r3, #36	; 0x24
   2915e:	d9f2      	bls.n	29146 <_switch_peripheral_gclk+0x12>
	}
}
   29160:	46c0      	nop			; (mov r8, r8)
   29162:	46bd      	mov	sp, r7
   29164:	b002      	add	sp, #8
   29166:	bd80      	pop	{r7, pc}
   29168:	00029739 	.word	0x00029739

0002916c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2916c:	b580      	push	{r7, lr}
   2916e:	b0a6      	sub	sp, #152	; 0x98
   29170:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29172:	4b92      	ldr	r3, [pc, #584]	; (293bc <system_clock_init+0x250>)
   29174:	22c2      	movs	r2, #194	; 0xc2
   29176:	00d2      	lsls	r2, r2, #3
   29178:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2917a:	2003      	movs	r0, #3
   2917c:	4b90      	ldr	r3, [pc, #576]	; (293c0 <system_clock_init+0x254>)
   2917e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29180:	4b90      	ldr	r3, [pc, #576]	; (293c4 <system_clock_init+0x258>)
   29182:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29184:	2394      	movs	r3, #148	; 0x94
   29186:	18fb      	adds	r3, r7, r3
   29188:	0018      	movs	r0, r3
   2918a:	4b8f      	ldr	r3, [pc, #572]	; (293c8 <system_clock_init+0x25c>)
   2918c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2918e:	2394      	movs	r3, #148	; 0x94
   29190:	18fb      	adds	r3, r7, r3
   29192:	2200      	movs	r2, #0
   29194:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29196:	2394      	movs	r3, #148	; 0x94
   29198:	18fb      	adds	r3, r7, r3
   2919a:	2201      	movs	r2, #1
   2919c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2919e:	2394      	movs	r3, #148	; 0x94
   291a0:	18fb      	adds	r3, r7, r3
   291a2:	2200      	movs	r2, #0
   291a4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   291a6:	2394      	movs	r3, #148	; 0x94
   291a8:	18fb      	adds	r3, r7, r3
   291aa:	0018      	movs	r0, r3
   291ac:	4b87      	ldr	r3, [pc, #540]	; (293cc <system_clock_init+0x260>)
   291ae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   291b0:	2006      	movs	r0, #6
   291b2:	4b87      	ldr	r3, [pc, #540]	; (293d0 <system_clock_init+0x264>)
   291b4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   291b6:	4b87      	ldr	r3, [pc, #540]	; (293d4 <system_clock_init+0x268>)
   291b8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   291ba:	2360      	movs	r3, #96	; 0x60
   291bc:	18fb      	adds	r3, r7, r3
   291be:	0018      	movs	r0, r3
   291c0:	4b85      	ldr	r3, [pc, #532]	; (293d8 <system_clock_init+0x26c>)
   291c2:	4798      	blx	r3
   291c4:	2360      	movs	r3, #96	; 0x60
   291c6:	18fb      	adds	r3, r7, r3
   291c8:	2206      	movs	r2, #6
   291ca:	701a      	strb	r2, [r3, #0]
   291cc:	2360      	movs	r3, #96	; 0x60
   291ce:	18fb      	adds	r3, r7, r3
   291d0:	2208      	movs	r2, #8
   291d2:	605a      	str	r2, [r3, #4]
   291d4:	2360      	movs	r3, #96	; 0x60
   291d6:	18fb      	adds	r3, r7, r3
   291d8:	2200      	movs	r2, #0
   291da:	721a      	strb	r2, [r3, #8]
   291dc:	2360      	movs	r3, #96	; 0x60
   291de:	18fb      	adds	r3, r7, r3
   291e0:	2200      	movs	r2, #0
   291e2:	725a      	strb	r2, [r3, #9]
   291e4:	2360      	movs	r3, #96	; 0x60
   291e6:	18fb      	adds	r3, r7, r3
   291e8:	0019      	movs	r1, r3
   291ea:	2001      	movs	r0, #1
   291ec:	4b7b      	ldr	r3, [pc, #492]	; (293dc <system_clock_init+0x270>)
   291ee:	4798      	blx	r3
   291f0:	2001      	movs	r0, #1
   291f2:	4b7b      	ldr	r3, [pc, #492]	; (293e0 <system_clock_init+0x274>)
   291f4:	4798      	blx	r3
   291f6:	2354      	movs	r3, #84	; 0x54
   291f8:	18fb      	adds	r3, r7, r3
   291fa:	0018      	movs	r0, r3
   291fc:	4b76      	ldr	r3, [pc, #472]	; (293d8 <system_clock_init+0x26c>)
   291fe:	4798      	blx	r3
   29200:	2354      	movs	r3, #84	; 0x54
   29202:	18fb      	adds	r3, r7, r3
   29204:	2203      	movs	r2, #3
   29206:	701a      	strb	r2, [r3, #0]
   29208:	2354      	movs	r3, #84	; 0x54
   2920a:	18fb      	adds	r3, r7, r3
   2920c:	2201      	movs	r2, #1
   2920e:	605a      	str	r2, [r3, #4]
   29210:	2354      	movs	r3, #84	; 0x54
   29212:	18fb      	adds	r3, r7, r3
   29214:	2201      	movs	r2, #1
   29216:	721a      	strb	r2, [r3, #8]
   29218:	2354      	movs	r3, #84	; 0x54
   2921a:	18fb      	adds	r3, r7, r3
   2921c:	2200      	movs	r2, #0
   2921e:	725a      	strb	r2, [r3, #9]
   29220:	2354      	movs	r3, #84	; 0x54
   29222:	18fb      	adds	r3, r7, r3
   29224:	0019      	movs	r1, r3
   29226:	2002      	movs	r0, #2
   29228:	4b6c      	ldr	r3, [pc, #432]	; (293dc <system_clock_init+0x270>)
   2922a:	4798      	blx	r3
   2922c:	2002      	movs	r0, #2
   2922e:	4b6c      	ldr	r3, [pc, #432]	; (293e0 <system_clock_init+0x274>)
   29230:	4798      	blx	r3
   29232:	233c      	movs	r3, #60	; 0x3c
   29234:	18fb      	adds	r3, r7, r3
   29236:	0018      	movs	r0, r3
   29238:	4b67      	ldr	r3, [pc, #412]	; (293d8 <system_clock_init+0x26c>)
   2923a:	4798      	blx	r3
   2923c:	233c      	movs	r3, #60	; 0x3c
   2923e:	18fb      	adds	r3, r7, r3
   29240:	2203      	movs	r2, #3
   29242:	701a      	strb	r2, [r3, #0]
   29244:	233c      	movs	r3, #60	; 0x3c
   29246:	18fb      	adds	r3, r7, r3
   29248:	2220      	movs	r2, #32
   2924a:	605a      	str	r2, [r3, #4]
   2924c:	233c      	movs	r3, #60	; 0x3c
   2924e:	18fb      	adds	r3, r7, r3
   29250:	2200      	movs	r2, #0
   29252:	721a      	strb	r2, [r3, #8]
   29254:	233c      	movs	r3, #60	; 0x3c
   29256:	18fb      	adds	r3, r7, r3
   29258:	2200      	movs	r2, #0
   2925a:	725a      	strb	r2, [r3, #9]
   2925c:	233c      	movs	r3, #60	; 0x3c
   2925e:	18fb      	adds	r3, r7, r3
   29260:	0019      	movs	r1, r3
   29262:	2004      	movs	r0, #4
   29264:	4b5d      	ldr	r3, [pc, #372]	; (293dc <system_clock_init+0x270>)
   29266:	4798      	blx	r3
   29268:	2004      	movs	r0, #4
   2926a:	4b5d      	ldr	r3, [pc, #372]	; (293e0 <system_clock_init+0x274>)
   2926c:	4798      	blx	r3
   2926e:	2330      	movs	r3, #48	; 0x30
   29270:	18fb      	adds	r3, r7, r3
   29272:	0018      	movs	r0, r3
   29274:	4b58      	ldr	r3, [pc, #352]	; (293d8 <system_clock_init+0x26c>)
   29276:	4798      	blx	r3
   29278:	2330      	movs	r3, #48	; 0x30
   2927a:	18fb      	adds	r3, r7, r3
   2927c:	2206      	movs	r2, #6
   2927e:	701a      	strb	r2, [r3, #0]
   29280:	2330      	movs	r3, #48	; 0x30
   29282:	18fb      	adds	r3, r7, r3
   29284:	2201      	movs	r2, #1
   29286:	605a      	str	r2, [r3, #4]
   29288:	2330      	movs	r3, #48	; 0x30
   2928a:	18fb      	adds	r3, r7, r3
   2928c:	2200      	movs	r2, #0
   2928e:	721a      	strb	r2, [r3, #8]
   29290:	2330      	movs	r3, #48	; 0x30
   29292:	18fb      	adds	r3, r7, r3
   29294:	2200      	movs	r2, #0
   29296:	725a      	strb	r2, [r3, #9]
   29298:	2330      	movs	r3, #48	; 0x30
   2929a:	18fb      	adds	r3, r7, r3
   2929c:	0019      	movs	r1, r3
   2929e:	2005      	movs	r0, #5
   292a0:	4b4e      	ldr	r3, [pc, #312]	; (293dc <system_clock_init+0x270>)
   292a2:	4798      	blx	r3
   292a4:	2005      	movs	r0, #5
   292a6:	4b4e      	ldr	r3, [pc, #312]	; (293e0 <system_clock_init+0x274>)
   292a8:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   292aa:	2390      	movs	r3, #144	; 0x90
   292ac:	18fb      	adds	r3, r7, r3
   292ae:	0018      	movs	r0, r3
   292b0:	4b4c      	ldr	r3, [pc, #304]	; (293e4 <system_clock_init+0x278>)
   292b2:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   292b4:	2390      	movs	r3, #144	; 0x90
   292b6:	18fb      	adds	r3, r7, r3
   292b8:	2201      	movs	r2, #1
   292ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   292bc:	2390      	movs	r3, #144	; 0x90
   292be:	18fb      	adds	r3, r7, r3
   292c0:	0019      	movs	r1, r3
   292c2:	2001      	movs	r0, #1
   292c4:	4b48      	ldr	r3, [pc, #288]	; (293e8 <system_clock_init+0x27c>)
   292c6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   292c8:	2001      	movs	r0, #1
   292ca:	4b48      	ldr	r3, [pc, #288]	; (293ec <system_clock_init+0x280>)
   292cc:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   292ce:	2378      	movs	r3, #120	; 0x78
   292d0:	18fb      	adds	r3, r7, r3
   292d2:	0018      	movs	r0, r3
   292d4:	4b46      	ldr	r3, [pc, #280]	; (293f0 <system_clock_init+0x284>)
   292d6:	4798      	blx	r3

	dpll_config.on_demand        = false;
   292d8:	2378      	movs	r3, #120	; 0x78
   292da:	18fb      	adds	r3, r7, r3
   292dc:	2200      	movs	r2, #0
   292de:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   292e0:	2378      	movs	r3, #120	; 0x78
   292e2:	18fb      	adds	r3, r7, r3
   292e4:	2200      	movs	r2, #0
   292e6:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   292e8:	2378      	movs	r3, #120	; 0x78
   292ea:	18fb      	adds	r3, r7, r3
   292ec:	2200      	movs	r2, #0
   292ee:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   292f0:	2378      	movs	r3, #120	; 0x78
   292f2:	18fb      	adds	r3, r7, r3
   292f4:	2200      	movs	r2, #0
   292f6:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   292f8:	2378      	movs	r3, #120	; 0x78
   292fa:	18fb      	adds	r3, r7, r3
   292fc:	2200      	movs	r2, #0
   292fe:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29300:	2378      	movs	r3, #120	; 0x78
   29302:	18fb      	adds	r3, r7, r3
   29304:	2200      	movs	r2, #0
   29306:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29308:	2378      	movs	r3, #120	; 0x78
   2930a:	18fb      	adds	r3, r7, r3
   2930c:	2200      	movs	r2, #0
   2930e:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29310:	2378      	movs	r3, #120	; 0x78
   29312:	18fb      	adds	r3, r7, r3
   29314:	2202      	movs	r2, #2
   29316:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29318:	2378      	movs	r3, #120	; 0x78
   2931a:	18fb      	adds	r3, r7, r3
   2931c:	4a35      	ldr	r2, [pc, #212]	; (293f4 <system_clock_init+0x288>)
   2931e:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29320:	2378      	movs	r3, #120	; 0x78
   29322:	18fb      	adds	r3, r7, r3
   29324:	2201      	movs	r2, #1
   29326:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   29328:	2378      	movs	r3, #120	; 0x78
   2932a:	18fb      	adds	r3, r7, r3
   2932c:	4a32      	ldr	r2, [pc, #200]	; (293f8 <system_clock_init+0x28c>)
   2932e:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29330:	2378      	movs	r3, #120	; 0x78
   29332:	18fb      	adds	r3, r7, r3
   29334:	0018      	movs	r0, r3
   29336:	4b31      	ldr	r3, [pc, #196]	; (293fc <system_clock_init+0x290>)
   29338:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2933a:	2008      	movs	r0, #8
   2933c:	4b24      	ldr	r3, [pc, #144]	; (293d0 <system_clock_init+0x264>)
   2933e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29340:	46c0      	nop			; (mov r8, r8)
   29342:	2008      	movs	r0, #8
   29344:	4b2e      	ldr	r3, [pc, #184]	; (29400 <system_clock_init+0x294>)
   29346:	4798      	blx	r3
   29348:	0003      	movs	r3, r0
   2934a:	001a      	movs	r2, r3
   2934c:	2301      	movs	r3, #1
   2934e:	4053      	eors	r3, r2
   29350:	b2db      	uxtb	r3, r3
   29352:	2b00      	cmp	r3, #0
   29354:	d1f5      	bne.n	29342 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   29356:	4919      	ldr	r1, [pc, #100]	; (293bc <system_clock_init+0x250>)
   29358:	2244      	movs	r2, #68	; 0x44
   2935a:	5c8b      	ldrb	r3, [r1, r2]
   2935c:	2080      	movs	r0, #128	; 0x80
   2935e:	4240      	negs	r0, r0
   29360:	4303      	orrs	r3, r0
   29362:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29364:	2000      	movs	r0, #0
   29366:	4b27      	ldr	r3, [pc, #156]	; (29404 <system_clock_init+0x298>)
   29368:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2936a:	2100      	movs	r1, #0
   2936c:	2000      	movs	r0, #0
   2936e:	4b26      	ldr	r3, [pc, #152]	; (29408 <system_clock_init+0x29c>)
   29370:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   29372:	2100      	movs	r1, #0
   29374:	2001      	movs	r0, #1
   29376:	4b24      	ldr	r3, [pc, #144]	; (29408 <system_clock_init+0x29c>)
   29378:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2937a:	2100      	movs	r1, #0
   2937c:	2002      	movs	r0, #2
   2937e:	4b22      	ldr	r3, [pc, #136]	; (29408 <system_clock_init+0x29c>)
   29380:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   29382:	003b      	movs	r3, r7
   29384:	0018      	movs	r0, r3
   29386:	4b14      	ldr	r3, [pc, #80]	; (293d8 <system_clock_init+0x26c>)
   29388:	4798      	blx	r3
   2938a:	003b      	movs	r3, r7
   2938c:	2208      	movs	r2, #8
   2938e:	701a      	strb	r2, [r3, #0]
   29390:	003b      	movs	r3, r7
   29392:	2201      	movs	r2, #1
   29394:	605a      	str	r2, [r3, #4]
   29396:	003b      	movs	r3, r7
   29398:	2200      	movs	r2, #0
   2939a:	721a      	strb	r2, [r3, #8]
   2939c:	003b      	movs	r3, r7
   2939e:	2201      	movs	r2, #1
   293a0:	725a      	strb	r2, [r3, #9]
   293a2:	003b      	movs	r3, r7
   293a4:	0019      	movs	r1, r3
   293a6:	2000      	movs	r0, #0
   293a8:	4b0c      	ldr	r3, [pc, #48]	; (293dc <system_clock_init+0x270>)
   293aa:	4798      	blx	r3
   293ac:	2000      	movs	r0, #0
   293ae:	4b0c      	ldr	r3, [pc, #48]	; (293e0 <system_clock_init+0x274>)
   293b0:	4798      	blx	r3
#endif
}
   293b2:	46c0      	nop			; (mov r8, r8)
   293b4:	46bd      	mov	sp, r7
   293b6:	b026      	add	sp, #152	; 0x98
   293b8:	bd80      	pop	{r7, pc}
   293ba:	46c0      	nop			; (mov r8, r8)
   293bc:	40000800 	.word	0x40000800
   293c0:	00028d2d 	.word	0x00028d2d
   293c4:	00029135 	.word	0x00029135
   293c8:	00028c3d 	.word	0x00028c3d
   293cc:	00028e81 	.word	0x00028e81
   293d0:	00029005 	.word	0x00029005
   293d4:	000294b1 	.word	0x000294b1
   293d8:	00028bf9 	.word	0x00028bf9
   293dc:	000294e1 	.word	0x000294e1
   293e0:	00029605 	.word	0x00029605
   293e4:	00028c27 	.word	0x00028c27
   293e8:	00029739 	.word	0x00029739
   293ec:	0002977d 	.word	0x0002977d
   293f0:	00028cd5 	.word	0x00028cd5
   293f4:	000f4240 	.word	0x000f4240
   293f8:	02dc6c00 	.word	0x02dc6c00
   293fc:	00028ef9 	.word	0x00028ef9
   29400:	000290b1 	.word	0x000290b1
   29404:	00028c61 	.word	0x00028c61
   29408:	00028c81 	.word	0x00028c81

0002940c <system_apb_clock_set_mask>:
{
   2940c:	b580      	push	{r7, lr}
   2940e:	b082      	sub	sp, #8
   29410:	af00      	add	r7, sp, #0
   29412:	0002      	movs	r2, r0
   29414:	6039      	str	r1, [r7, #0]
   29416:	1dfb      	adds	r3, r7, #7
   29418:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2941a:	1dfb      	adds	r3, r7, #7
   2941c:	781b      	ldrb	r3, [r3, #0]
   2941e:	2b01      	cmp	r3, #1
   29420:	d00a      	beq.n	29438 <system_apb_clock_set_mask+0x2c>
   29422:	2b02      	cmp	r3, #2
   29424:	d00f      	beq.n	29446 <system_apb_clock_set_mask+0x3a>
   29426:	2b00      	cmp	r3, #0
   29428:	d114      	bne.n	29454 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2942a:	4b0e      	ldr	r3, [pc, #56]	; (29464 <system_apb_clock_set_mask+0x58>)
   2942c:	4a0d      	ldr	r2, [pc, #52]	; (29464 <system_apb_clock_set_mask+0x58>)
   2942e:	6991      	ldr	r1, [r2, #24]
   29430:	683a      	ldr	r2, [r7, #0]
   29432:	430a      	orrs	r2, r1
   29434:	619a      	str	r2, [r3, #24]
			break;
   29436:	e00f      	b.n	29458 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29438:	4b0a      	ldr	r3, [pc, #40]	; (29464 <system_apb_clock_set_mask+0x58>)
   2943a:	4a0a      	ldr	r2, [pc, #40]	; (29464 <system_apb_clock_set_mask+0x58>)
   2943c:	69d1      	ldr	r1, [r2, #28]
   2943e:	683a      	ldr	r2, [r7, #0]
   29440:	430a      	orrs	r2, r1
   29442:	61da      	str	r2, [r3, #28]
			break;
   29444:	e008      	b.n	29458 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29446:	4b07      	ldr	r3, [pc, #28]	; (29464 <system_apb_clock_set_mask+0x58>)
   29448:	4a06      	ldr	r2, [pc, #24]	; (29464 <system_apb_clock_set_mask+0x58>)
   2944a:	6a11      	ldr	r1, [r2, #32]
   2944c:	683a      	ldr	r2, [r7, #0]
   2944e:	430a      	orrs	r2, r1
   29450:	621a      	str	r2, [r3, #32]
			break;
   29452:	e001      	b.n	29458 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29454:	2317      	movs	r3, #23
   29456:	e000      	b.n	2945a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29458:	2300      	movs	r3, #0
}
   2945a:	0018      	movs	r0, r3
   2945c:	46bd      	mov	sp, r7
   2945e:	b002      	add	sp, #8
   29460:	bd80      	pop	{r7, pc}
   29462:	46c0      	nop			; (mov r8, r8)
   29464:	40000400 	.word	0x40000400

00029468 <system_interrupt_enter_critical_section>:
{
   29468:	b580      	push	{r7, lr}
   2946a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2946c:	4b02      	ldr	r3, [pc, #8]	; (29478 <system_interrupt_enter_critical_section+0x10>)
   2946e:	4798      	blx	r3
}
   29470:	46c0      	nop			; (mov r8, r8)
   29472:	46bd      	mov	sp, r7
   29474:	bd80      	pop	{r7, pc}
   29476:	46c0      	nop			; (mov r8, r8)
   29478:	00025aa5 	.word	0x00025aa5

0002947c <system_interrupt_leave_critical_section>:
{
   2947c:	b580      	push	{r7, lr}
   2947e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29480:	4b02      	ldr	r3, [pc, #8]	; (2948c <system_interrupt_leave_critical_section+0x10>)
   29482:	4798      	blx	r3
}
   29484:	46c0      	nop			; (mov r8, r8)
   29486:	46bd      	mov	sp, r7
   29488:	bd80      	pop	{r7, pc}
   2948a:	46c0      	nop			; (mov r8, r8)
   2948c:	00025af9 	.word	0x00025af9

00029490 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29490:	b580      	push	{r7, lr}
   29492:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29494:	4b05      	ldr	r3, [pc, #20]	; (294ac <system_gclk_is_syncing+0x1c>)
   29496:	785b      	ldrb	r3, [r3, #1]
   29498:	b2db      	uxtb	r3, r3
   2949a:	b25b      	sxtb	r3, r3
   2949c:	2b00      	cmp	r3, #0
   2949e:	da01      	bge.n	294a4 <system_gclk_is_syncing+0x14>
		return true;
   294a0:	2301      	movs	r3, #1
   294a2:	e000      	b.n	294a6 <system_gclk_is_syncing+0x16>
	}

	return false;
   294a4:	2300      	movs	r3, #0
}
   294a6:	0018      	movs	r0, r3
   294a8:	46bd      	mov	sp, r7
   294aa:	bd80      	pop	{r7, pc}
   294ac:	40000c00 	.word	0x40000c00

000294b0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   294b0:	b580      	push	{r7, lr}
   294b2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   294b4:	2108      	movs	r1, #8
   294b6:	2000      	movs	r0, #0
   294b8:	4b07      	ldr	r3, [pc, #28]	; (294d8 <system_gclk_init+0x28>)
   294ba:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   294bc:	4b07      	ldr	r3, [pc, #28]	; (294dc <system_gclk_init+0x2c>)
   294be:	2201      	movs	r2, #1
   294c0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   294c2:	46c0      	nop			; (mov r8, r8)
   294c4:	4b05      	ldr	r3, [pc, #20]	; (294dc <system_gclk_init+0x2c>)
   294c6:	781b      	ldrb	r3, [r3, #0]
   294c8:	b2db      	uxtb	r3, r3
   294ca:	001a      	movs	r2, r3
   294cc:	2301      	movs	r3, #1
   294ce:	4013      	ands	r3, r2
   294d0:	d1f8      	bne.n	294c4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   294d2:	46c0      	nop			; (mov r8, r8)
   294d4:	46bd      	mov	sp, r7
   294d6:	bd80      	pop	{r7, pc}
   294d8:	0002940d 	.word	0x0002940d
   294dc:	40000c00 	.word	0x40000c00

000294e0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   294e0:	b580      	push	{r7, lr}
   294e2:	b086      	sub	sp, #24
   294e4:	af00      	add	r7, sp, #0
   294e6:	0002      	movs	r2, r0
   294e8:	6039      	str	r1, [r7, #0]
   294ea:	1dfb      	adds	r3, r7, #7
   294ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   294ee:	1dfb      	adds	r3, r7, #7
   294f0:	781b      	ldrb	r3, [r3, #0]
   294f2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   294f4:	1dfb      	adds	r3, r7, #7
   294f6:	781b      	ldrb	r3, [r3, #0]
   294f8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   294fa:	683b      	ldr	r3, [r7, #0]
   294fc:	781b      	ldrb	r3, [r3, #0]
   294fe:	021b      	lsls	r3, r3, #8
   29500:	001a      	movs	r2, r3
   29502:	697b      	ldr	r3, [r7, #20]
   29504:	4313      	orrs	r3, r2
   29506:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29508:	683b      	ldr	r3, [r7, #0]
   2950a:	785b      	ldrb	r3, [r3, #1]
   2950c:	2b00      	cmp	r3, #0
   2950e:	d004      	beq.n	2951a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29510:	697b      	ldr	r3, [r7, #20]
   29512:	2280      	movs	r2, #128	; 0x80
   29514:	02d2      	lsls	r2, r2, #11
   29516:	4313      	orrs	r3, r2
   29518:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2951a:	683b      	ldr	r3, [r7, #0]
   2951c:	7a5b      	ldrb	r3, [r3, #9]
   2951e:	2b00      	cmp	r3, #0
   29520:	d004      	beq.n	2952c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29522:	697b      	ldr	r3, [r7, #20]
   29524:	2280      	movs	r2, #128	; 0x80
   29526:	0312      	lsls	r2, r2, #12
   29528:	4313      	orrs	r3, r2
   2952a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2952c:	683b      	ldr	r3, [r7, #0]
   2952e:	685b      	ldr	r3, [r3, #4]
   29530:	2b01      	cmp	r3, #1
   29532:	d92c      	bls.n	2958e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29534:	683b      	ldr	r3, [r7, #0]
   29536:	685a      	ldr	r2, [r3, #4]
   29538:	683b      	ldr	r3, [r7, #0]
   2953a:	685b      	ldr	r3, [r3, #4]
   2953c:	3b01      	subs	r3, #1
   2953e:	4013      	ands	r3, r2
   29540:	d11a      	bne.n	29578 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29542:	2300      	movs	r3, #0
   29544:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29546:	2302      	movs	r3, #2
   29548:	60bb      	str	r3, [r7, #8]
   2954a:	e005      	b.n	29558 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2954c:	68fb      	ldr	r3, [r7, #12]
   2954e:	3301      	adds	r3, #1
   29550:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29552:	68bb      	ldr	r3, [r7, #8]
   29554:	005b      	lsls	r3, r3, #1
   29556:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29558:	683b      	ldr	r3, [r7, #0]
   2955a:	685a      	ldr	r2, [r3, #4]
   2955c:	68bb      	ldr	r3, [r7, #8]
   2955e:	429a      	cmp	r2, r3
   29560:	d8f4      	bhi.n	2954c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29562:	68fb      	ldr	r3, [r7, #12]
   29564:	021b      	lsls	r3, r3, #8
   29566:	693a      	ldr	r2, [r7, #16]
   29568:	4313      	orrs	r3, r2
   2956a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2956c:	697b      	ldr	r3, [r7, #20]
   2956e:	2280      	movs	r2, #128	; 0x80
   29570:	0352      	lsls	r2, r2, #13
   29572:	4313      	orrs	r3, r2
   29574:	617b      	str	r3, [r7, #20]
   29576:	e00a      	b.n	2958e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   29578:	683b      	ldr	r3, [r7, #0]
   2957a:	685b      	ldr	r3, [r3, #4]
   2957c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2957e:	693a      	ldr	r2, [r7, #16]
   29580:	4313      	orrs	r3, r2
   29582:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29584:	697b      	ldr	r3, [r7, #20]
   29586:	2280      	movs	r2, #128	; 0x80
   29588:	0292      	lsls	r2, r2, #10
   2958a:	4313      	orrs	r3, r2
   2958c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2958e:	683b      	ldr	r3, [r7, #0]
   29590:	7a1b      	ldrb	r3, [r3, #8]
   29592:	2b00      	cmp	r3, #0
   29594:	d004      	beq.n	295a0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29596:	697b      	ldr	r3, [r7, #20]
   29598:	2280      	movs	r2, #128	; 0x80
   2959a:	0392      	lsls	r2, r2, #14
   2959c:	4313      	orrs	r3, r2
   2959e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   295a0:	46c0      	nop			; (mov r8, r8)
   295a2:	4b13      	ldr	r3, [pc, #76]	; (295f0 <system_gclk_gen_set_config+0x110>)
   295a4:	4798      	blx	r3
   295a6:	1e03      	subs	r3, r0, #0
   295a8:	d1fb      	bne.n	295a2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   295aa:	4b12      	ldr	r3, [pc, #72]	; (295f4 <system_gclk_gen_set_config+0x114>)
   295ac:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   295ae:	4a12      	ldr	r2, [pc, #72]	; (295f8 <system_gclk_gen_set_config+0x118>)
   295b0:	1dfb      	adds	r3, r7, #7
   295b2:	781b      	ldrb	r3, [r3, #0]
   295b4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   295b6:	46c0      	nop			; (mov r8, r8)
   295b8:	4b0d      	ldr	r3, [pc, #52]	; (295f0 <system_gclk_gen_set_config+0x110>)
   295ba:	4798      	blx	r3
   295bc:	1e03      	subs	r3, r0, #0
   295be:	d1fb      	bne.n	295b8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   295c0:	4b0e      	ldr	r3, [pc, #56]	; (295fc <system_gclk_gen_set_config+0x11c>)
   295c2:	693a      	ldr	r2, [r7, #16]
   295c4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   295c6:	46c0      	nop			; (mov r8, r8)
   295c8:	4b09      	ldr	r3, [pc, #36]	; (295f0 <system_gclk_gen_set_config+0x110>)
   295ca:	4798      	blx	r3
   295cc:	1e03      	subs	r3, r0, #0
   295ce:	d1fb      	bne.n	295c8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   295d0:	4b0a      	ldr	r3, [pc, #40]	; (295fc <system_gclk_gen_set_config+0x11c>)
   295d2:	4a0a      	ldr	r2, [pc, #40]	; (295fc <system_gclk_gen_set_config+0x11c>)
   295d4:	6851      	ldr	r1, [r2, #4]
   295d6:	2280      	movs	r2, #128	; 0x80
   295d8:	0252      	lsls	r2, r2, #9
   295da:	4011      	ands	r1, r2
   295dc:	697a      	ldr	r2, [r7, #20]
   295de:	430a      	orrs	r2, r1
   295e0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   295e2:	4b07      	ldr	r3, [pc, #28]	; (29600 <system_gclk_gen_set_config+0x120>)
   295e4:	4798      	blx	r3
}
   295e6:	46c0      	nop			; (mov r8, r8)
   295e8:	46bd      	mov	sp, r7
   295ea:	b006      	add	sp, #24
   295ec:	bd80      	pop	{r7, pc}
   295ee:	46c0      	nop			; (mov r8, r8)
   295f0:	00029491 	.word	0x00029491
   295f4:	00029469 	.word	0x00029469
   295f8:	40000c08 	.word	0x40000c08
   295fc:	40000c00 	.word	0x40000c00
   29600:	0002947d 	.word	0x0002947d

00029604 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29604:	b580      	push	{r7, lr}
   29606:	b082      	sub	sp, #8
   29608:	af00      	add	r7, sp, #0
   2960a:	0002      	movs	r2, r0
   2960c:	1dfb      	adds	r3, r7, #7
   2960e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29610:	46c0      	nop			; (mov r8, r8)
   29612:	4b0e      	ldr	r3, [pc, #56]	; (2964c <system_gclk_gen_enable+0x48>)
   29614:	4798      	blx	r3
   29616:	1e03      	subs	r3, r0, #0
   29618:	d1fb      	bne.n	29612 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2961a:	4b0d      	ldr	r3, [pc, #52]	; (29650 <system_gclk_gen_enable+0x4c>)
   2961c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2961e:	4a0d      	ldr	r2, [pc, #52]	; (29654 <system_gclk_gen_enable+0x50>)
   29620:	1dfb      	adds	r3, r7, #7
   29622:	781b      	ldrb	r3, [r3, #0]
   29624:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29626:	46c0      	nop			; (mov r8, r8)
   29628:	4b08      	ldr	r3, [pc, #32]	; (2964c <system_gclk_gen_enable+0x48>)
   2962a:	4798      	blx	r3
   2962c:	1e03      	subs	r3, r0, #0
   2962e:	d1fb      	bne.n	29628 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29630:	4b09      	ldr	r3, [pc, #36]	; (29658 <system_gclk_gen_enable+0x54>)
   29632:	4a09      	ldr	r2, [pc, #36]	; (29658 <system_gclk_gen_enable+0x54>)
   29634:	6852      	ldr	r2, [r2, #4]
   29636:	2180      	movs	r1, #128	; 0x80
   29638:	0249      	lsls	r1, r1, #9
   2963a:	430a      	orrs	r2, r1
   2963c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2963e:	4b07      	ldr	r3, [pc, #28]	; (2965c <system_gclk_gen_enable+0x58>)
   29640:	4798      	blx	r3
}
   29642:	46c0      	nop			; (mov r8, r8)
   29644:	46bd      	mov	sp, r7
   29646:	b002      	add	sp, #8
   29648:	bd80      	pop	{r7, pc}
   2964a:	46c0      	nop			; (mov r8, r8)
   2964c:	00029491 	.word	0x00029491
   29650:	00029469 	.word	0x00029469
   29654:	40000c04 	.word	0x40000c04
   29658:	40000c00 	.word	0x40000c00
   2965c:	0002947d 	.word	0x0002947d

00029660 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   29660:	b580      	push	{r7, lr}
   29662:	b086      	sub	sp, #24
   29664:	af00      	add	r7, sp, #0
   29666:	0002      	movs	r2, r0
   29668:	1dfb      	adds	r3, r7, #7
   2966a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2966c:	46c0      	nop			; (mov r8, r8)
   2966e:	4b2a      	ldr	r3, [pc, #168]	; (29718 <system_gclk_gen_get_hz+0xb8>)
   29670:	4798      	blx	r3
   29672:	1e03      	subs	r3, r0, #0
   29674:	d1fb      	bne.n	2966e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29676:	4b29      	ldr	r3, [pc, #164]	; (2971c <system_gclk_gen_get_hz+0xbc>)
   29678:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2967a:	4a29      	ldr	r2, [pc, #164]	; (29720 <system_gclk_gen_get_hz+0xc0>)
   2967c:	1dfb      	adds	r3, r7, #7
   2967e:	781b      	ldrb	r3, [r3, #0]
   29680:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29682:	46c0      	nop			; (mov r8, r8)
   29684:	4b24      	ldr	r3, [pc, #144]	; (29718 <system_gclk_gen_get_hz+0xb8>)
   29686:	4798      	blx	r3
   29688:	1e03      	subs	r3, r0, #0
   2968a:	d1fb      	bne.n	29684 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2968c:	4b25      	ldr	r3, [pc, #148]	; (29724 <system_gclk_gen_get_hz+0xc4>)
   2968e:	685b      	ldr	r3, [r3, #4]
   29690:	04db      	lsls	r3, r3, #19
   29692:	0edb      	lsrs	r3, r3, #27
   29694:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29696:	0018      	movs	r0, r3
   29698:	4b23      	ldr	r3, [pc, #140]	; (29728 <system_gclk_gen_get_hz+0xc8>)
   2969a:	4798      	blx	r3
   2969c:	0003      	movs	r3, r0
   2969e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   296a0:	4a1f      	ldr	r2, [pc, #124]	; (29720 <system_gclk_gen_get_hz+0xc0>)
   296a2:	1dfb      	adds	r3, r7, #7
   296a4:	781b      	ldrb	r3, [r3, #0]
   296a6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   296a8:	4b1e      	ldr	r3, [pc, #120]	; (29724 <system_gclk_gen_get_hz+0xc4>)
   296aa:	685b      	ldr	r3, [r3, #4]
   296ac:	02db      	lsls	r3, r3, #11
   296ae:	0fdb      	lsrs	r3, r3, #31
   296b0:	b2da      	uxtb	r2, r3
   296b2:	2313      	movs	r3, #19
   296b4:	18fb      	adds	r3, r7, r3
   296b6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   296b8:	4a1c      	ldr	r2, [pc, #112]	; (2972c <system_gclk_gen_get_hz+0xcc>)
   296ba:	1dfb      	adds	r3, r7, #7
   296bc:	781b      	ldrb	r3, [r3, #0]
   296be:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   296c0:	46c0      	nop			; (mov r8, r8)
   296c2:	4b15      	ldr	r3, [pc, #84]	; (29718 <system_gclk_gen_get_hz+0xb8>)
   296c4:	4798      	blx	r3
   296c6:	1e03      	subs	r3, r0, #0
   296c8:	d1fb      	bne.n	296c2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   296ca:	4b16      	ldr	r3, [pc, #88]	; (29724 <system_gclk_gen_get_hz+0xc4>)
   296cc:	689b      	ldr	r3, [r3, #8]
   296ce:	021b      	lsls	r3, r3, #8
   296d0:	0c1b      	lsrs	r3, r3, #16
   296d2:	b29b      	uxth	r3, r3
   296d4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   296d6:	4b16      	ldr	r3, [pc, #88]	; (29730 <system_gclk_gen_get_hz+0xd0>)
   296d8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   296da:	2313      	movs	r3, #19
   296dc:	18fb      	adds	r3, r7, r3
   296de:	781b      	ldrb	r3, [r3, #0]
   296e0:	2b00      	cmp	r3, #0
   296e2:	d109      	bne.n	296f8 <system_gclk_gen_get_hz+0x98>
   296e4:	68fb      	ldr	r3, [r7, #12]
   296e6:	2b01      	cmp	r3, #1
   296e8:	d906      	bls.n	296f8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   296ea:	4b12      	ldr	r3, [pc, #72]	; (29734 <system_gclk_gen_get_hz+0xd4>)
   296ec:	68f9      	ldr	r1, [r7, #12]
   296ee:	6978      	ldr	r0, [r7, #20]
   296f0:	4798      	blx	r3
   296f2:	0003      	movs	r3, r0
   296f4:	617b      	str	r3, [r7, #20]
   296f6:	e00a      	b.n	2970e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   296f8:	2313      	movs	r3, #19
   296fa:	18fb      	adds	r3, r7, r3
   296fc:	781b      	ldrb	r3, [r3, #0]
   296fe:	2b00      	cmp	r3, #0
   29700:	d005      	beq.n	2970e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29702:	68fb      	ldr	r3, [r7, #12]
   29704:	3301      	adds	r3, #1
   29706:	697a      	ldr	r2, [r7, #20]
   29708:	40da      	lsrs	r2, r3
   2970a:	0013      	movs	r3, r2
   2970c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2970e:	697b      	ldr	r3, [r7, #20]
}
   29710:	0018      	movs	r0, r3
   29712:	46bd      	mov	sp, r7
   29714:	b006      	add	sp, #24
   29716:	bd80      	pop	{r7, pc}
   29718:	00029491 	.word	0x00029491
   2971c:	00029469 	.word	0x00029469
   29720:	40000c04 	.word	0x40000c04
   29724:	40000c00 	.word	0x40000c00
   29728:	00028dc1 	.word	0x00028dc1
   2972c:	40000c08 	.word	0x40000c08
   29730:	0002947d 	.word	0x0002947d
   29734:	00032245 	.word	0x00032245

00029738 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29738:	b580      	push	{r7, lr}
   2973a:	b084      	sub	sp, #16
   2973c:	af00      	add	r7, sp, #0
   2973e:	0002      	movs	r2, r0
   29740:	6039      	str	r1, [r7, #0]
   29742:	1dfb      	adds	r3, r7, #7
   29744:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29746:	1dfb      	adds	r3, r7, #7
   29748:	781b      	ldrb	r3, [r3, #0]
   2974a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2974c:	683b      	ldr	r3, [r7, #0]
   2974e:	781b      	ldrb	r3, [r3, #0]
   29750:	021b      	lsls	r3, r3, #8
   29752:	001a      	movs	r2, r3
   29754:	68fb      	ldr	r3, [r7, #12]
   29756:	4313      	orrs	r3, r2
   29758:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2975a:	1dfb      	adds	r3, r7, #7
   2975c:	781b      	ldrb	r3, [r3, #0]
   2975e:	0018      	movs	r0, r3
   29760:	4b04      	ldr	r3, [pc, #16]	; (29774 <system_gclk_chan_set_config+0x3c>)
   29762:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29764:	4b04      	ldr	r3, [pc, #16]	; (29778 <system_gclk_chan_set_config+0x40>)
   29766:	68fa      	ldr	r2, [r7, #12]
   29768:	b292      	uxth	r2, r2
   2976a:	805a      	strh	r2, [r3, #2]
}
   2976c:	46c0      	nop			; (mov r8, r8)
   2976e:	46bd      	mov	sp, r7
   29770:	b004      	add	sp, #16
   29772:	bd80      	pop	{r7, pc}
   29774:	000297c5 	.word	0x000297c5
   29778:	40000c00 	.word	0x40000c00

0002977c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2977c:	b580      	push	{r7, lr}
   2977e:	b082      	sub	sp, #8
   29780:	af00      	add	r7, sp, #0
   29782:	0002      	movs	r2, r0
   29784:	1dfb      	adds	r3, r7, #7
   29786:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29788:	4b0a      	ldr	r3, [pc, #40]	; (297b4 <system_gclk_chan_enable+0x38>)
   2978a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2978c:	4a0a      	ldr	r2, [pc, #40]	; (297b8 <system_gclk_chan_enable+0x3c>)
   2978e:	1dfb      	adds	r3, r7, #7
   29790:	781b      	ldrb	r3, [r3, #0]
   29792:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29794:	4909      	ldr	r1, [pc, #36]	; (297bc <system_gclk_chan_enable+0x40>)
   29796:	4b09      	ldr	r3, [pc, #36]	; (297bc <system_gclk_chan_enable+0x40>)
   29798:	885b      	ldrh	r3, [r3, #2]
   2979a:	b29b      	uxth	r3, r3
   2979c:	2280      	movs	r2, #128	; 0x80
   2979e:	01d2      	lsls	r2, r2, #7
   297a0:	4313      	orrs	r3, r2
   297a2:	b29b      	uxth	r3, r3
   297a4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   297a6:	4b06      	ldr	r3, [pc, #24]	; (297c0 <system_gclk_chan_enable+0x44>)
   297a8:	4798      	blx	r3
}
   297aa:	46c0      	nop			; (mov r8, r8)
   297ac:	46bd      	mov	sp, r7
   297ae:	b002      	add	sp, #8
   297b0:	bd80      	pop	{r7, pc}
   297b2:	46c0      	nop			; (mov r8, r8)
   297b4:	00029469 	.word	0x00029469
   297b8:	40000c02 	.word	0x40000c02
   297bc:	40000c00 	.word	0x40000c00
   297c0:	0002947d 	.word	0x0002947d

000297c4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   297c4:	b580      	push	{r7, lr}
   297c6:	b084      	sub	sp, #16
   297c8:	af00      	add	r7, sp, #0
   297ca:	0002      	movs	r2, r0
   297cc:	1dfb      	adds	r3, r7, #7
   297ce:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   297d0:	4b1c      	ldr	r3, [pc, #112]	; (29844 <system_gclk_chan_disable+0x80>)
   297d2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   297d4:	4a1c      	ldr	r2, [pc, #112]	; (29848 <system_gclk_chan_disable+0x84>)
   297d6:	1dfb      	adds	r3, r7, #7
   297d8:	781b      	ldrb	r3, [r3, #0]
   297da:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   297dc:	4b1b      	ldr	r3, [pc, #108]	; (2984c <system_gclk_chan_disable+0x88>)
   297de:	885b      	ldrh	r3, [r3, #2]
   297e0:	051b      	lsls	r3, r3, #20
   297e2:	0f1b      	lsrs	r3, r3, #28
   297e4:	b2db      	uxtb	r3, r3
   297e6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   297e8:	4a18      	ldr	r2, [pc, #96]	; (2984c <system_gclk_chan_disable+0x88>)
   297ea:	8853      	ldrh	r3, [r2, #2]
   297ec:	4918      	ldr	r1, [pc, #96]	; (29850 <system_gclk_chan_disable+0x8c>)
   297ee:	400b      	ands	r3, r1
   297f0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   297f2:	4a16      	ldr	r2, [pc, #88]	; (2984c <system_gclk_chan_disable+0x88>)
   297f4:	4b15      	ldr	r3, [pc, #84]	; (2984c <system_gclk_chan_disable+0x88>)
   297f6:	885b      	ldrh	r3, [r3, #2]
   297f8:	b29b      	uxth	r3, r3
   297fa:	4916      	ldr	r1, [pc, #88]	; (29854 <system_gclk_chan_disable+0x90>)
   297fc:	400b      	ands	r3, r1
   297fe:	b29b      	uxth	r3, r3
   29800:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29802:	46c0      	nop			; (mov r8, r8)
   29804:	4b11      	ldr	r3, [pc, #68]	; (2984c <system_gclk_chan_disable+0x88>)
   29806:	885b      	ldrh	r3, [r3, #2]
   29808:	b29b      	uxth	r3, r3
   2980a:	001a      	movs	r2, r3
   2980c:	2380      	movs	r3, #128	; 0x80
   2980e:	01db      	lsls	r3, r3, #7
   29810:	4013      	ands	r3, r2
   29812:	d1f7      	bne.n	29804 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29814:	4a0d      	ldr	r2, [pc, #52]	; (2984c <system_gclk_chan_disable+0x88>)
   29816:	68fb      	ldr	r3, [r7, #12]
   29818:	b2db      	uxtb	r3, r3
   2981a:	1c19      	adds	r1, r3, #0
   2981c:	230f      	movs	r3, #15
   2981e:	400b      	ands	r3, r1
   29820:	b2d9      	uxtb	r1, r3
   29822:	8853      	ldrh	r3, [r2, #2]
   29824:	1c08      	adds	r0, r1, #0
   29826:	210f      	movs	r1, #15
   29828:	4001      	ands	r1, r0
   2982a:	0208      	lsls	r0, r1, #8
   2982c:	4908      	ldr	r1, [pc, #32]	; (29850 <system_gclk_chan_disable+0x8c>)
   2982e:	400b      	ands	r3, r1
   29830:	1c19      	adds	r1, r3, #0
   29832:	1c03      	adds	r3, r0, #0
   29834:	430b      	orrs	r3, r1
   29836:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29838:	4b07      	ldr	r3, [pc, #28]	; (29858 <system_gclk_chan_disable+0x94>)
   2983a:	4798      	blx	r3
}
   2983c:	46c0      	nop			; (mov r8, r8)
   2983e:	46bd      	mov	sp, r7
   29840:	b004      	add	sp, #16
   29842:	bd80      	pop	{r7, pc}
   29844:	00029469 	.word	0x00029469
   29848:	40000c02 	.word	0x40000c02
   2984c:	40000c00 	.word	0x40000c00
   29850:	fffff0ff 	.word	0xfffff0ff
   29854:	ffffbfff 	.word	0xffffbfff
   29858:	0002947d 	.word	0x0002947d

0002985c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2985c:	b580      	push	{r7, lr}
   2985e:	b084      	sub	sp, #16
   29860:	af00      	add	r7, sp, #0
   29862:	0002      	movs	r2, r0
   29864:	1dfb      	adds	r3, r7, #7
   29866:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   29868:	4b0d      	ldr	r3, [pc, #52]	; (298a0 <system_gclk_chan_get_hz+0x44>)
   2986a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2986c:	4a0d      	ldr	r2, [pc, #52]	; (298a4 <system_gclk_chan_get_hz+0x48>)
   2986e:	1dfb      	adds	r3, r7, #7
   29870:	781b      	ldrb	r3, [r3, #0]
   29872:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29874:	4b0c      	ldr	r3, [pc, #48]	; (298a8 <system_gclk_chan_get_hz+0x4c>)
   29876:	885b      	ldrh	r3, [r3, #2]
   29878:	051b      	lsls	r3, r3, #20
   2987a:	0f1b      	lsrs	r3, r3, #28
   2987c:	b2da      	uxtb	r2, r3
   2987e:	230f      	movs	r3, #15
   29880:	18fb      	adds	r3, r7, r3
   29882:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29884:	4b09      	ldr	r3, [pc, #36]	; (298ac <system_gclk_chan_get_hz+0x50>)
   29886:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   29888:	230f      	movs	r3, #15
   2988a:	18fb      	adds	r3, r7, r3
   2988c:	781b      	ldrb	r3, [r3, #0]
   2988e:	0018      	movs	r0, r3
   29890:	4b07      	ldr	r3, [pc, #28]	; (298b0 <system_gclk_chan_get_hz+0x54>)
   29892:	4798      	blx	r3
   29894:	0003      	movs	r3, r0
}
   29896:	0018      	movs	r0, r3
   29898:	46bd      	mov	sp, r7
   2989a:	b004      	add	sp, #16
   2989c:	bd80      	pop	{r7, pc}
   2989e:	46c0      	nop			; (mov r8, r8)
   298a0:	00029469 	.word	0x00029469
   298a4:	40000c02 	.word	0x40000c02
   298a8:	40000c00 	.word	0x40000c00
   298ac:	0002947d 	.word	0x0002947d
   298b0:	00029661 	.word	0x00029661

000298b4 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   298b4:	b580      	push	{r7, lr}
   298b6:	b084      	sub	sp, #16
   298b8:	af00      	add	r7, sp, #0
   298ba:	0002      	movs	r2, r0
   298bc:	1dfb      	adds	r3, r7, #7
   298be:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   298c0:	230f      	movs	r3, #15
   298c2:	18fb      	adds	r3, r7, r3
   298c4:	2200      	movs	r2, #0
   298c6:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   298c8:	1dfb      	adds	r3, r7, #7
   298ca:	781b      	ldrb	r3, [r3, #0]
   298cc:	2b7f      	cmp	r3, #127	; 0x7f
   298ce:	d80b      	bhi.n	298e8 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   298d0:	4a13      	ldr	r2, [pc, #76]	; (29920 <system_interrupt_clear_pending+0x6c>)
   298d2:	1dfb      	adds	r3, r7, #7
   298d4:	781b      	ldrb	r3, [r3, #0]
   298d6:	b25b      	sxtb	r3, r3
   298d8:	2101      	movs	r1, #1
   298da:	4099      	lsls	r1, r3
   298dc:	000b      	movs	r3, r1
   298de:	0019      	movs	r1, r3
   298e0:	23c0      	movs	r3, #192	; 0xc0
   298e2:	005b      	lsls	r3, r3, #1
   298e4:	50d1      	str	r1, [r2, r3]
   298e6:	e014      	b.n	29912 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   298e8:	1dfb      	adds	r3, r7, #7
   298ea:	781b      	ldrb	r3, [r3, #0]
   298ec:	b25b      	sxtb	r3, r3
   298ee:	330e      	adds	r3, #14
   298f0:	d101      	bne.n	298f6 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   298f2:	2317      	movs	r3, #23
   298f4:	e010      	b.n	29918 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   298f6:	1dfb      	adds	r3, r7, #7
   298f8:	781b      	ldrb	r3, [r3, #0]
   298fa:	b25b      	sxtb	r3, r3
   298fc:	3301      	adds	r3, #1
   298fe:	d104      	bne.n	2990a <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29900:	4b08      	ldr	r3, [pc, #32]	; (29924 <system_interrupt_clear_pending+0x70>)
   29902:	2280      	movs	r2, #128	; 0x80
   29904:	0492      	lsls	r2, r2, #18
   29906:	605a      	str	r2, [r3, #4]
   29908:	e003      	b.n	29912 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2990a:	230f      	movs	r3, #15
   2990c:	18fb      	adds	r3, r7, r3
   2990e:	2217      	movs	r2, #23
   29910:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29912:	230f      	movs	r3, #15
   29914:	18fb      	adds	r3, r7, r3
   29916:	781b      	ldrb	r3, [r3, #0]
}
   29918:	0018      	movs	r0, r3
   2991a:	46bd      	mov	sp, r7
   2991c:	b004      	add	sp, #16
   2991e:	bd80      	pop	{r7, pc}
   29920:	e000e100 	.word	0xe000e100
   29924:	e000ed00 	.word	0xe000ed00

00029928 <system_pinmux_get_group_from_gpio_pin>:
{
   29928:	b580      	push	{r7, lr}
   2992a:	b084      	sub	sp, #16
   2992c:	af00      	add	r7, sp, #0
   2992e:	0002      	movs	r2, r0
   29930:	1dfb      	adds	r3, r7, #7
   29932:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29934:	230f      	movs	r3, #15
   29936:	18fb      	adds	r3, r7, r3
   29938:	1dfa      	adds	r2, r7, #7
   2993a:	7812      	ldrb	r2, [r2, #0]
   2993c:	09d2      	lsrs	r2, r2, #7
   2993e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29940:	230e      	movs	r3, #14
   29942:	18fb      	adds	r3, r7, r3
   29944:	1dfa      	adds	r2, r7, #7
   29946:	7812      	ldrb	r2, [r2, #0]
   29948:	0952      	lsrs	r2, r2, #5
   2994a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2994c:	4b0d      	ldr	r3, [pc, #52]	; (29984 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2994e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29950:	230f      	movs	r3, #15
   29952:	18fb      	adds	r3, r7, r3
   29954:	781b      	ldrb	r3, [r3, #0]
   29956:	2b00      	cmp	r3, #0
   29958:	d10f      	bne.n	2997a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2995a:	230f      	movs	r3, #15
   2995c:	18fb      	adds	r3, r7, r3
   2995e:	781b      	ldrb	r3, [r3, #0]
   29960:	009b      	lsls	r3, r3, #2
   29962:	2210      	movs	r2, #16
   29964:	4694      	mov	ip, r2
   29966:	44bc      	add	ip, r7
   29968:	4463      	add	r3, ip
   2996a:	3b08      	subs	r3, #8
   2996c:	681a      	ldr	r2, [r3, #0]
   2996e:	230e      	movs	r3, #14
   29970:	18fb      	adds	r3, r7, r3
   29972:	781b      	ldrb	r3, [r3, #0]
   29974:	01db      	lsls	r3, r3, #7
   29976:	18d3      	adds	r3, r2, r3
   29978:	e000      	b.n	2997c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2997a:	2300      	movs	r3, #0
}
   2997c:	0018      	movs	r0, r3
   2997e:	46bd      	mov	sp, r7
   29980:	b004      	add	sp, #16
   29982:	bd80      	pop	{r7, pc}
   29984:	41004400 	.word	0x41004400

00029988 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29988:	b580      	push	{r7, lr}
   2998a:	b088      	sub	sp, #32
   2998c:	af00      	add	r7, sp, #0
   2998e:	60f8      	str	r0, [r7, #12]
   29990:	60b9      	str	r1, [r7, #8]
   29992:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29994:	2300      	movs	r3, #0
   29996:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29998:	687b      	ldr	r3, [r7, #4]
   2999a:	78db      	ldrb	r3, [r3, #3]
   2999c:	2201      	movs	r2, #1
   2999e:	4053      	eors	r3, r2
   299a0:	b2db      	uxtb	r3, r3
   299a2:	2b00      	cmp	r3, #0
   299a4:	d035      	beq.n	29a12 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   299a6:	687b      	ldr	r3, [r7, #4]
   299a8:	781b      	ldrb	r3, [r3, #0]
   299aa:	2b80      	cmp	r3, #128	; 0x80
   299ac:	d00b      	beq.n	299c6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   299ae:	69fb      	ldr	r3, [r7, #28]
   299b0:	2280      	movs	r2, #128	; 0x80
   299b2:	0252      	lsls	r2, r2, #9
   299b4:	4313      	orrs	r3, r2
   299b6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   299b8:	687b      	ldr	r3, [r7, #4]
   299ba:	781b      	ldrb	r3, [r3, #0]
   299bc:	061b      	lsls	r3, r3, #24
   299be:	001a      	movs	r2, r3
   299c0:	69fb      	ldr	r3, [r7, #28]
   299c2:	4313      	orrs	r3, r2
   299c4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   299c6:	687b      	ldr	r3, [r7, #4]
   299c8:	785b      	ldrb	r3, [r3, #1]
   299ca:	2b00      	cmp	r3, #0
   299cc:	d003      	beq.n	299d6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   299ce:	687b      	ldr	r3, [r7, #4]
   299d0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   299d2:	2b02      	cmp	r3, #2
   299d4:	d110      	bne.n	299f8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   299d6:	69fb      	ldr	r3, [r7, #28]
   299d8:	2280      	movs	r2, #128	; 0x80
   299da:	0292      	lsls	r2, r2, #10
   299dc:	4313      	orrs	r3, r2
   299de:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   299e0:	687b      	ldr	r3, [r7, #4]
   299e2:	789b      	ldrb	r3, [r3, #2]
   299e4:	2b00      	cmp	r3, #0
   299e6:	d004      	beq.n	299f2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   299e8:	69fb      	ldr	r3, [r7, #28]
   299ea:	2280      	movs	r2, #128	; 0x80
   299ec:	02d2      	lsls	r2, r2, #11
   299ee:	4313      	orrs	r3, r2
   299f0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   299f2:	68fb      	ldr	r3, [r7, #12]
   299f4:	68ba      	ldr	r2, [r7, #8]
   299f6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   299f8:	687b      	ldr	r3, [r7, #4]
   299fa:	785b      	ldrb	r3, [r3, #1]
   299fc:	2b01      	cmp	r3, #1
   299fe:	d003      	beq.n	29a08 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29a00:	687b      	ldr	r3, [r7, #4]
   29a02:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29a04:	2b02      	cmp	r3, #2
   29a06:	d107      	bne.n	29a18 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29a08:	69fb      	ldr	r3, [r7, #28]
   29a0a:	4a22      	ldr	r2, [pc, #136]	; (29a94 <_system_pinmux_config+0x10c>)
   29a0c:	4013      	ands	r3, r2
   29a0e:	61fb      	str	r3, [r7, #28]
   29a10:	e002      	b.n	29a18 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29a12:	68fb      	ldr	r3, [r7, #12]
   29a14:	68ba      	ldr	r2, [r7, #8]
   29a16:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29a18:	68bb      	ldr	r3, [r7, #8]
   29a1a:	041b      	lsls	r3, r3, #16
   29a1c:	0c1b      	lsrs	r3, r3, #16
   29a1e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29a20:	68bb      	ldr	r3, [r7, #8]
   29a22:	0c1b      	lsrs	r3, r3, #16
   29a24:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29a26:	69ba      	ldr	r2, [r7, #24]
   29a28:	69fb      	ldr	r3, [r7, #28]
   29a2a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29a2c:	22a0      	movs	r2, #160	; 0xa0
   29a2e:	05d2      	lsls	r2, r2, #23
   29a30:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29a32:	68fb      	ldr	r3, [r7, #12]
   29a34:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29a36:	697a      	ldr	r2, [r7, #20]
   29a38:	69fb      	ldr	r3, [r7, #28]
   29a3a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29a3c:	22d0      	movs	r2, #208	; 0xd0
   29a3e:	0612      	lsls	r2, r2, #24
   29a40:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29a42:	68fb      	ldr	r3, [r7, #12]
   29a44:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29a46:	687b      	ldr	r3, [r7, #4]
   29a48:	78db      	ldrb	r3, [r3, #3]
   29a4a:	2201      	movs	r2, #1
   29a4c:	4053      	eors	r3, r2
   29a4e:	b2db      	uxtb	r3, r3
   29a50:	2b00      	cmp	r3, #0
   29a52:	d01a      	beq.n	29a8a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29a54:	69fa      	ldr	r2, [r7, #28]
   29a56:	2380      	movs	r3, #128	; 0x80
   29a58:	02db      	lsls	r3, r3, #11
   29a5a:	4013      	ands	r3, r2
   29a5c:	d00a      	beq.n	29a74 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29a5e:	687b      	ldr	r3, [r7, #4]
   29a60:	789b      	ldrb	r3, [r3, #2]
   29a62:	2b01      	cmp	r3, #1
   29a64:	d103      	bne.n	29a6e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   29a66:	68fb      	ldr	r3, [r7, #12]
   29a68:	68ba      	ldr	r2, [r7, #8]
   29a6a:	619a      	str	r2, [r3, #24]
   29a6c:	e002      	b.n	29a74 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29a6e:	68fb      	ldr	r3, [r7, #12]
   29a70:	68ba      	ldr	r2, [r7, #8]
   29a72:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29a74:	687b      	ldr	r3, [r7, #4]
   29a76:	785b      	ldrb	r3, [r3, #1]
   29a78:	2b01      	cmp	r3, #1
   29a7a:	d003      	beq.n	29a84 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29a7c:	687b      	ldr	r3, [r7, #4]
   29a7e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29a80:	2b02      	cmp	r3, #2
   29a82:	d102      	bne.n	29a8a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29a84:	68fb      	ldr	r3, [r7, #12]
   29a86:	68ba      	ldr	r2, [r7, #8]
   29a88:	609a      	str	r2, [r3, #8]
		}
	}
}
   29a8a:	46c0      	nop			; (mov r8, r8)
   29a8c:	46bd      	mov	sp, r7
   29a8e:	b008      	add	sp, #32
   29a90:	bd80      	pop	{r7, pc}
   29a92:	46c0      	nop			; (mov r8, r8)
   29a94:	fffbffff 	.word	0xfffbffff

00029a98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   29a98:	b580      	push	{r7, lr}
   29a9a:	b084      	sub	sp, #16
   29a9c:	af00      	add	r7, sp, #0
   29a9e:	0002      	movs	r2, r0
   29aa0:	6039      	str	r1, [r7, #0]
   29aa2:	1dfb      	adds	r3, r7, #7
   29aa4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29aa6:	1dfb      	adds	r3, r7, #7
   29aa8:	781b      	ldrb	r3, [r3, #0]
   29aaa:	0018      	movs	r0, r3
   29aac:	4b0a      	ldr	r3, [pc, #40]	; (29ad8 <system_pinmux_pin_set_config+0x40>)
   29aae:	4798      	blx	r3
   29ab0:	0003      	movs	r3, r0
   29ab2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29ab4:	1dfb      	adds	r3, r7, #7
   29ab6:	781b      	ldrb	r3, [r3, #0]
   29ab8:	221f      	movs	r2, #31
   29aba:	4013      	ands	r3, r2
   29abc:	2201      	movs	r2, #1
   29abe:	409a      	lsls	r2, r3
   29ac0:	0013      	movs	r3, r2
   29ac2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29ac4:	683a      	ldr	r2, [r7, #0]
   29ac6:	68b9      	ldr	r1, [r7, #8]
   29ac8:	68fb      	ldr	r3, [r7, #12]
   29aca:	0018      	movs	r0, r3
   29acc:	4b03      	ldr	r3, [pc, #12]	; (29adc <system_pinmux_pin_set_config+0x44>)
   29ace:	4798      	blx	r3
}
   29ad0:	46c0      	nop			; (mov r8, r8)
   29ad2:	46bd      	mov	sp, r7
   29ad4:	b004      	add	sp, #16
   29ad6:	bd80      	pop	{r7, pc}
   29ad8:	00029929 	.word	0x00029929
   29adc:	00029989 	.word	0x00029989

00029ae0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29ae0:	b580      	push	{r7, lr}
   29ae2:	af00      	add	r7, sp, #0
	return;
   29ae4:	46c0      	nop			; (mov r8, r8)
}
   29ae6:	46bd      	mov	sp, r7
   29ae8:	bd80      	pop	{r7, pc}
	...

00029aec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29aec:	b580      	push	{r7, lr}
   29aee:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29af0:	4b06      	ldr	r3, [pc, #24]	; (29b0c <system_init+0x20>)
   29af2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29af4:	4b06      	ldr	r3, [pc, #24]	; (29b10 <system_init+0x24>)
   29af6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   29af8:	4b06      	ldr	r3, [pc, #24]	; (29b14 <system_init+0x28>)
   29afa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29afc:	4b06      	ldr	r3, [pc, #24]	; (29b18 <system_init+0x2c>)
   29afe:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29b00:	4b06      	ldr	r3, [pc, #24]	; (29b1c <system_init+0x30>)
   29b02:	4798      	blx	r3
}
   29b04:	46c0      	nop			; (mov r8, r8)
   29b06:	46bd      	mov	sp, r7
   29b08:	bd80      	pop	{r7, pc}
   29b0a:	46c0      	nop			; (mov r8, r8)
   29b0c:	0002916d 	.word	0x0002916d
   29b10:	00025c35 	.word	0x00025c35
   29b14:	00012eb1 	.word	0x00012eb1
   29b18:	0002600d 	.word	0x0002600d
   29b1c:	00029ae1 	.word	0x00029ae1

00029b20 <system_gclk_chan_get_config_defaults>:
{
   29b20:	b580      	push	{r7, lr}
   29b22:	b082      	sub	sp, #8
   29b24:	af00      	add	r7, sp, #0
   29b26:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29b28:	687b      	ldr	r3, [r7, #4]
   29b2a:	2200      	movs	r2, #0
   29b2c:	701a      	strb	r2, [r3, #0]
}
   29b2e:	46c0      	nop			; (mov r8, r8)
   29b30:	46bd      	mov	sp, r7
   29b32:	b002      	add	sp, #8
   29b34:	bd80      	pop	{r7, pc}
	...

00029b38 <system_apb_clock_set_mask>:
{
   29b38:	b580      	push	{r7, lr}
   29b3a:	b082      	sub	sp, #8
   29b3c:	af00      	add	r7, sp, #0
   29b3e:	0002      	movs	r2, r0
   29b40:	6039      	str	r1, [r7, #0]
   29b42:	1dfb      	adds	r3, r7, #7
   29b44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29b46:	1dfb      	adds	r3, r7, #7
   29b48:	781b      	ldrb	r3, [r3, #0]
   29b4a:	2b01      	cmp	r3, #1
   29b4c:	d00a      	beq.n	29b64 <system_apb_clock_set_mask+0x2c>
   29b4e:	2b02      	cmp	r3, #2
   29b50:	d00f      	beq.n	29b72 <system_apb_clock_set_mask+0x3a>
   29b52:	2b00      	cmp	r3, #0
   29b54:	d114      	bne.n	29b80 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29b56:	4b0e      	ldr	r3, [pc, #56]	; (29b90 <system_apb_clock_set_mask+0x58>)
   29b58:	4a0d      	ldr	r2, [pc, #52]	; (29b90 <system_apb_clock_set_mask+0x58>)
   29b5a:	6991      	ldr	r1, [r2, #24]
   29b5c:	683a      	ldr	r2, [r7, #0]
   29b5e:	430a      	orrs	r2, r1
   29b60:	619a      	str	r2, [r3, #24]
			break;
   29b62:	e00f      	b.n	29b84 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29b64:	4b0a      	ldr	r3, [pc, #40]	; (29b90 <system_apb_clock_set_mask+0x58>)
   29b66:	4a0a      	ldr	r2, [pc, #40]	; (29b90 <system_apb_clock_set_mask+0x58>)
   29b68:	69d1      	ldr	r1, [r2, #28]
   29b6a:	683a      	ldr	r2, [r7, #0]
   29b6c:	430a      	orrs	r2, r1
   29b6e:	61da      	str	r2, [r3, #28]
			break;
   29b70:	e008      	b.n	29b84 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29b72:	4b07      	ldr	r3, [pc, #28]	; (29b90 <system_apb_clock_set_mask+0x58>)
   29b74:	4a06      	ldr	r2, [pc, #24]	; (29b90 <system_apb_clock_set_mask+0x58>)
   29b76:	6a11      	ldr	r1, [r2, #32]
   29b78:	683a      	ldr	r2, [r7, #0]
   29b7a:	430a      	orrs	r2, r1
   29b7c:	621a      	str	r2, [r3, #32]
			break;
   29b7e:	e001      	b.n	29b84 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29b80:	2317      	movs	r3, #23
   29b82:	e000      	b.n	29b86 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29b84:	2300      	movs	r3, #0
}
   29b86:	0018      	movs	r0, r3
   29b88:	46bd      	mov	sp, r7
   29b8a:	b002      	add	sp, #8
   29b8c:	bd80      	pop	{r7, pc}
   29b8e:	46c0      	nop			; (mov r8, r8)
   29b90:	40000400 	.word	0x40000400

00029b94 <system_pinmux_get_config_defaults>:
{
   29b94:	b580      	push	{r7, lr}
   29b96:	b082      	sub	sp, #8
   29b98:	af00      	add	r7, sp, #0
   29b9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29b9c:	687b      	ldr	r3, [r7, #4]
   29b9e:	2280      	movs	r2, #128	; 0x80
   29ba0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29ba2:	687b      	ldr	r3, [r7, #4]
   29ba4:	2200      	movs	r2, #0
   29ba6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29ba8:	687b      	ldr	r3, [r7, #4]
   29baa:	2201      	movs	r2, #1
   29bac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29bae:	687b      	ldr	r3, [r7, #4]
   29bb0:	2200      	movs	r2, #0
   29bb2:	70da      	strb	r2, [r3, #3]
}
   29bb4:	46c0      	nop			; (mov r8, r8)
   29bb6:	46bd      	mov	sp, r7
   29bb8:	b002      	add	sp, #8
   29bba:	bd80      	pop	{r7, pc}

00029bbc <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29bbc:	b580      	push	{r7, lr}
   29bbe:	b084      	sub	sp, #16
   29bc0:	af00      	add	r7, sp, #0
   29bc2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29bc4:	2300      	movs	r3, #0
   29bc6:	60fb      	str	r3, [r7, #12]
   29bc8:	e00c      	b.n	29be4 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   29bca:	4b0a      	ldr	r3, [pc, #40]	; (29bf4 <_tcc_get_inst_index+0x38>)
   29bcc:	68fa      	ldr	r2, [r7, #12]
   29bce:	0092      	lsls	r2, r2, #2
   29bd0:	58d2      	ldr	r2, [r2, r3]
   29bd2:	687b      	ldr	r3, [r7, #4]
   29bd4:	429a      	cmp	r2, r3
   29bd6:	d102      	bne.n	29bde <_tcc_get_inst_index+0x22>
			return i;
   29bd8:	68fb      	ldr	r3, [r7, #12]
   29bda:	b2db      	uxtb	r3, r3
   29bdc:	e006      	b.n	29bec <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29bde:	68fb      	ldr	r3, [r7, #12]
   29be0:	3301      	adds	r3, #1
   29be2:	60fb      	str	r3, [r7, #12]
   29be4:	68fb      	ldr	r3, [r7, #12]
   29be6:	2b02      	cmp	r3, #2
   29be8:	d9ef      	bls.n	29bca <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   29bea:	2300      	movs	r3, #0
}
   29bec:	0018      	movs	r0, r3
   29bee:	46bd      	mov	sp, r7
   29bf0:	b004      	add	sp, #16
   29bf2:	bd80      	pop	{r7, pc}
   29bf4:	00038e38 	.word	0x00038e38

00029bf8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   29bf8:	b590      	push	{r4, r7, lr}
   29bfa:	b085      	sub	sp, #20
   29bfc:	af00      	add	r7, sp, #0
   29bfe:	6078      	str	r0, [r7, #4]
   29c00:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29c02:	230f      	movs	r3, #15
   29c04:	18fc      	adds	r4, r7, r3
   29c06:	683b      	ldr	r3, [r7, #0]
   29c08:	0018      	movs	r0, r3
   29c0a:	4bad      	ldr	r3, [pc, #692]	; (29ec0 <tcc_get_config_defaults+0x2c8>)
   29c0c:	4798      	blx	r3
   29c0e:	0003      	movs	r3, r0
   29c10:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29c12:	687b      	ldr	r3, [r7, #4]
   29c14:	2200      	movs	r2, #0
   29c16:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   29c18:	230f      	movs	r3, #15
   29c1a:	18fb      	adds	r3, r7, r3
   29c1c:	781a      	ldrb	r2, [r3, #0]
   29c1e:	4ba9      	ldr	r3, [pc, #676]	; (29ec4 <tcc_get_config_defaults+0x2cc>)
   29c20:	0092      	lsls	r2, r2, #2
   29c22:	58d2      	ldr	r2, [r2, r3]
   29c24:	687b      	ldr	r3, [r7, #4]
   29c26:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   29c28:	687b      	ldr	r3, [r7, #4]
   29c2a:	2200      	movs	r2, #0
   29c2c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   29c2e:	687b      	ldr	r3, [r7, #4]
   29c30:	2200      	movs	r2, #0
   29c32:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29c34:	687b      	ldr	r3, [r7, #4]
   29c36:	2200      	movs	r2, #0
   29c38:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   29c3a:	687b      	ldr	r3, [r7, #4]
   29c3c:	2200      	movs	r2, #0
   29c3e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29c40:	687b      	ldr	r3, [r7, #4]
   29c42:	2200      	movs	r2, #0
   29c44:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29c46:	687b      	ldr	r3, [r7, #4]
   29c48:	2200      	movs	r2, #0
   29c4a:	61da      	str	r2, [r3, #28]
   29c4c:	687b      	ldr	r3, [r7, #4]
   29c4e:	2200      	movs	r2, #0
   29c50:	621a      	str	r2, [r3, #32]
   29c52:	687b      	ldr	r3, [r7, #4]
   29c54:	2200      	movs	r2, #0
   29c56:	625a      	str	r2, [r3, #36]	; 0x24
   29c58:	687b      	ldr	r3, [r7, #4]
   29c5a:	2200      	movs	r2, #0
   29c5c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29c5e:	687b      	ldr	r3, [r7, #4]
   29c60:	2200      	movs	r2, #0
   29c62:	751a      	strb	r2, [r3, #20]
   29c64:	687b      	ldr	r3, [r7, #4]
   29c66:	2200      	movs	r2, #0
   29c68:	755a      	strb	r2, [r3, #21]
   29c6a:	687b      	ldr	r3, [r7, #4]
   29c6c:	2200      	movs	r2, #0
   29c6e:	759a      	strb	r2, [r3, #22]
   29c70:	687b      	ldr	r3, [r7, #4]
   29c72:	2200      	movs	r2, #0
   29c74:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   29c76:	687b      	ldr	r3, [r7, #4]
   29c78:	2200      	movs	r2, #0
   29c7a:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29c7c:	687b      	ldr	r3, [r7, #4]
   29c7e:	2200      	movs	r2, #0
   29c80:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29c82:	687b      	ldr	r3, [r7, #4]
   29c84:	2200      	movs	r2, #0
   29c86:	741a      	strb	r2, [r3, #16]
   29c88:	687b      	ldr	r3, [r7, #4]
   29c8a:	2200      	movs	r2, #0
   29c8c:	745a      	strb	r2, [r3, #17]
   29c8e:	687b      	ldr	r3, [r7, #4]
   29c90:	2200      	movs	r2, #0
   29c92:	749a      	strb	r2, [r3, #18]
   29c94:	687b      	ldr	r3, [r7, #4]
   29c96:	2200      	movs	r2, #0
   29c98:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   29c9a:	687b      	ldr	r3, [r7, #4]
   29c9c:	222c      	movs	r2, #44	; 0x2c
   29c9e:	2100      	movs	r1, #0
   29ca0:	5499      	strb	r1, [r3, r2]
   29ca2:	687b      	ldr	r3, [r7, #4]
   29ca4:	222d      	movs	r2, #45	; 0x2d
   29ca6:	2100      	movs	r1, #0
   29ca8:	5499      	strb	r1, [r3, r2]
   29caa:	687b      	ldr	r3, [r7, #4]
   29cac:	222e      	movs	r2, #46	; 0x2e
   29cae:	2100      	movs	r1, #0
   29cb0:	5499      	strb	r1, [r3, r2]
   29cb2:	687b      	ldr	r3, [r7, #4]
   29cb4:	222f      	movs	r2, #47	; 0x2f
   29cb6:	2100      	movs	r1, #0
   29cb8:	5499      	strb	r1, [r3, r2]
   29cba:	687b      	ldr	r3, [r7, #4]
   29cbc:	2230      	movs	r2, #48	; 0x30
   29cbe:	2100      	movs	r1, #0
   29cc0:	5499      	strb	r1, [r3, r2]
   29cc2:	687b      	ldr	r3, [r7, #4]
   29cc4:	2231      	movs	r2, #49	; 0x31
   29cc6:	2100      	movs	r1, #0
   29cc8:	5499      	strb	r1, [r3, r2]
   29cca:	687b      	ldr	r3, [r7, #4]
   29ccc:	2232      	movs	r2, #50	; 0x32
   29cce:	2100      	movs	r1, #0
   29cd0:	5499      	strb	r1, [r3, r2]
   29cd2:	687b      	ldr	r3, [r7, #4]
   29cd4:	2233      	movs	r2, #51	; 0x33
   29cd6:	2100      	movs	r1, #0
   29cd8:	5499      	strb	r1, [r3, r2]
   29cda:	687b      	ldr	r3, [r7, #4]
   29cdc:	2234      	movs	r2, #52	; 0x34
   29cde:	2100      	movs	r1, #0
   29ce0:	5499      	strb	r1, [r3, r2]
   29ce2:	687b      	ldr	r3, [r7, #4]
   29ce4:	2235      	movs	r2, #53	; 0x35
   29ce6:	2100      	movs	r1, #0
   29ce8:	5499      	strb	r1, [r3, r2]
   29cea:	687b      	ldr	r3, [r7, #4]
   29cec:	2236      	movs	r2, #54	; 0x36
   29cee:	2100      	movs	r1, #0
   29cf0:	5499      	strb	r1, [r3, r2]
   29cf2:	687b      	ldr	r3, [r7, #4]
   29cf4:	2237      	movs	r2, #55	; 0x37
   29cf6:	2100      	movs	r1, #0
   29cf8:	5499      	strb	r1, [r3, r2]
   29cfa:	687b      	ldr	r3, [r7, #4]
   29cfc:	2238      	movs	r2, #56	; 0x38
   29cfe:	2100      	movs	r1, #0
   29d00:	5499      	strb	r1, [r3, r2]
   29d02:	687b      	ldr	r3, [r7, #4]
   29d04:	2239      	movs	r2, #57	; 0x39
   29d06:	2100      	movs	r1, #0
   29d08:	5499      	strb	r1, [r3, r2]
   29d0a:	687b      	ldr	r3, [r7, #4]
   29d0c:	223a      	movs	r2, #58	; 0x3a
   29d0e:	2100      	movs	r1, #0
   29d10:	5499      	strb	r1, [r3, r2]
   29d12:	687b      	ldr	r3, [r7, #4]
   29d14:	223b      	movs	r2, #59	; 0x3b
   29d16:	2100      	movs	r1, #0
   29d18:	5499      	strb	r1, [r3, r2]
   29d1a:	687b      	ldr	r3, [r7, #4]
   29d1c:	223c      	movs	r2, #60	; 0x3c
   29d1e:	2100      	movs	r1, #0
   29d20:	5499      	strb	r1, [r3, r2]
   29d22:	687b      	ldr	r3, [r7, #4]
   29d24:	223d      	movs	r2, #61	; 0x3d
   29d26:	2100      	movs	r1, #0
   29d28:	5499      	strb	r1, [r3, r2]
   29d2a:	687b      	ldr	r3, [r7, #4]
   29d2c:	223e      	movs	r2, #62	; 0x3e
   29d2e:	2100      	movs	r1, #0
   29d30:	5499      	strb	r1, [r3, r2]
   29d32:	687b      	ldr	r3, [r7, #4]
   29d34:	223f      	movs	r2, #63	; 0x3f
   29d36:	2100      	movs	r1, #0
   29d38:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   29d3a:	687b      	ldr	r3, [r7, #4]
   29d3c:	2240      	movs	r2, #64	; 0x40
   29d3e:	2100      	movs	r1, #0
   29d40:	5499      	strb	r1, [r3, r2]
   29d42:	687b      	ldr	r3, [r7, #4]
   29d44:	2241      	movs	r2, #65	; 0x41
   29d46:	2100      	movs	r1, #0
   29d48:	5499      	strb	r1, [r3, r2]
   29d4a:	687b      	ldr	r3, [r7, #4]
   29d4c:	2242      	movs	r2, #66	; 0x42
   29d4e:	2100      	movs	r1, #0
   29d50:	5499      	strb	r1, [r3, r2]
   29d52:	687b      	ldr	r3, [r7, #4]
   29d54:	2243      	movs	r2, #67	; 0x43
   29d56:	2100      	movs	r1, #0
   29d58:	5499      	strb	r1, [r3, r2]
   29d5a:	687b      	ldr	r3, [r7, #4]
   29d5c:	2244      	movs	r2, #68	; 0x44
   29d5e:	2100      	movs	r1, #0
   29d60:	5499      	strb	r1, [r3, r2]
   29d62:	687b      	ldr	r3, [r7, #4]
   29d64:	2245      	movs	r2, #69	; 0x45
   29d66:	2100      	movs	r1, #0
   29d68:	5499      	strb	r1, [r3, r2]
   29d6a:	687b      	ldr	r3, [r7, #4]
   29d6c:	2246      	movs	r2, #70	; 0x46
   29d6e:	2100      	movs	r1, #0
   29d70:	5499      	strb	r1, [r3, r2]
   29d72:	687b      	ldr	r3, [r7, #4]
   29d74:	2247      	movs	r2, #71	; 0x47
   29d76:	2100      	movs	r1, #0
   29d78:	5499      	strb	r1, [r3, r2]
   29d7a:	687b      	ldr	r3, [r7, #4]
   29d7c:	2248      	movs	r2, #72	; 0x48
   29d7e:	2100      	movs	r1, #0
   29d80:	5499      	strb	r1, [r3, r2]
   29d82:	687b      	ldr	r3, [r7, #4]
   29d84:	2249      	movs	r2, #73	; 0x49
   29d86:	2100      	movs	r1, #0
   29d88:	5499      	strb	r1, [r3, r2]
   29d8a:	687b      	ldr	r3, [r7, #4]
   29d8c:	224a      	movs	r2, #74	; 0x4a
   29d8e:	2100      	movs	r1, #0
   29d90:	5499      	strb	r1, [r3, r2]
   29d92:	687b      	ldr	r3, [r7, #4]
   29d94:	224b      	movs	r2, #75	; 0x4b
   29d96:	2100      	movs	r1, #0
   29d98:	5499      	strb	r1, [r3, r2]
   29d9a:	687b      	ldr	r3, [r7, #4]
   29d9c:	224c      	movs	r2, #76	; 0x4c
   29d9e:	2100      	movs	r1, #0
   29da0:	5499      	strb	r1, [r3, r2]
   29da2:	687b      	ldr	r3, [r7, #4]
   29da4:	224d      	movs	r2, #77	; 0x4d
   29da6:	2100      	movs	r1, #0
   29da8:	5499      	strb	r1, [r3, r2]
   29daa:	687b      	ldr	r3, [r7, #4]
   29dac:	224e      	movs	r2, #78	; 0x4e
   29dae:	2100      	movs	r1, #0
   29db0:	5499      	strb	r1, [r3, r2]
   29db2:	687b      	ldr	r3, [r7, #4]
   29db4:	224f      	movs	r2, #79	; 0x4f
   29db6:	2100      	movs	r1, #0
   29db8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   29dba:	687b      	ldr	r3, [r7, #4]
   29dbc:	2250      	movs	r2, #80	; 0x50
   29dbe:	2100      	movs	r1, #0
   29dc0:	5499      	strb	r1, [r3, r2]
   29dc2:	687b      	ldr	r3, [r7, #4]
   29dc4:	2251      	movs	r2, #81	; 0x51
   29dc6:	2100      	movs	r1, #0
   29dc8:	5499      	strb	r1, [r3, r2]
   29dca:	687b      	ldr	r3, [r7, #4]
   29dcc:	2252      	movs	r2, #82	; 0x52
   29dce:	2100      	movs	r1, #0
   29dd0:	5499      	strb	r1, [r3, r2]
   29dd2:	687b      	ldr	r3, [r7, #4]
   29dd4:	2253      	movs	r2, #83	; 0x53
   29dd6:	2100      	movs	r1, #0
   29dd8:	5499      	strb	r1, [r3, r2]
   29dda:	687b      	ldr	r3, [r7, #4]
   29ddc:	2254      	movs	r2, #84	; 0x54
   29dde:	2100      	movs	r1, #0
   29de0:	5499      	strb	r1, [r3, r2]
   29de2:	687b      	ldr	r3, [r7, #4]
   29de4:	2255      	movs	r2, #85	; 0x55
   29de6:	2100      	movs	r1, #0
   29de8:	5499      	strb	r1, [r3, r2]
   29dea:	687b      	ldr	r3, [r7, #4]
   29dec:	2256      	movs	r2, #86	; 0x56
   29dee:	2100      	movs	r1, #0
   29df0:	5499      	strb	r1, [r3, r2]
   29df2:	687b      	ldr	r3, [r7, #4]
   29df4:	2257      	movs	r2, #87	; 0x57
   29df6:	2100      	movs	r1, #0
   29df8:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   29dfa:	687b      	ldr	r3, [r7, #4]
   29dfc:	2298      	movs	r2, #152	; 0x98
   29dfe:	2100      	movs	r1, #0
   29e00:	5499      	strb	r1, [r3, r2]
   29e02:	687b      	ldr	r3, [r7, #4]
   29e04:	2200      	movs	r2, #0
   29e06:	659a      	str	r2, [r3, #88]	; 0x58
   29e08:	687b      	ldr	r3, [r7, #4]
   29e0a:	2200      	movs	r2, #0
   29e0c:	679a      	str	r2, [r3, #120]	; 0x78
   29e0e:	687b      	ldr	r3, [r7, #4]
   29e10:	2299      	movs	r2, #153	; 0x99
   29e12:	2100      	movs	r1, #0
   29e14:	5499      	strb	r1, [r3, r2]
   29e16:	687b      	ldr	r3, [r7, #4]
   29e18:	2200      	movs	r2, #0
   29e1a:	65da      	str	r2, [r3, #92]	; 0x5c
   29e1c:	687b      	ldr	r3, [r7, #4]
   29e1e:	2200      	movs	r2, #0
   29e20:	67da      	str	r2, [r3, #124]	; 0x7c
   29e22:	687b      	ldr	r3, [r7, #4]
   29e24:	229a      	movs	r2, #154	; 0x9a
   29e26:	2100      	movs	r1, #0
   29e28:	5499      	strb	r1, [r3, r2]
   29e2a:	687b      	ldr	r3, [r7, #4]
   29e2c:	2200      	movs	r2, #0
   29e2e:	661a      	str	r2, [r3, #96]	; 0x60
   29e30:	687b      	ldr	r3, [r7, #4]
   29e32:	2280      	movs	r2, #128	; 0x80
   29e34:	2100      	movs	r1, #0
   29e36:	5099      	str	r1, [r3, r2]
   29e38:	687b      	ldr	r3, [r7, #4]
   29e3a:	229b      	movs	r2, #155	; 0x9b
   29e3c:	2100      	movs	r1, #0
   29e3e:	5499      	strb	r1, [r3, r2]
   29e40:	687b      	ldr	r3, [r7, #4]
   29e42:	2200      	movs	r2, #0
   29e44:	665a      	str	r2, [r3, #100]	; 0x64
   29e46:	687b      	ldr	r3, [r7, #4]
   29e48:	2284      	movs	r2, #132	; 0x84
   29e4a:	2100      	movs	r1, #0
   29e4c:	5099      	str	r1, [r3, r2]
   29e4e:	687b      	ldr	r3, [r7, #4]
   29e50:	229c      	movs	r2, #156	; 0x9c
   29e52:	2100      	movs	r1, #0
   29e54:	5499      	strb	r1, [r3, r2]
   29e56:	687b      	ldr	r3, [r7, #4]
   29e58:	2200      	movs	r2, #0
   29e5a:	669a      	str	r2, [r3, #104]	; 0x68
   29e5c:	687b      	ldr	r3, [r7, #4]
   29e5e:	2288      	movs	r2, #136	; 0x88
   29e60:	2100      	movs	r1, #0
   29e62:	5099      	str	r1, [r3, r2]
   29e64:	687b      	ldr	r3, [r7, #4]
   29e66:	229d      	movs	r2, #157	; 0x9d
   29e68:	2100      	movs	r1, #0
   29e6a:	5499      	strb	r1, [r3, r2]
   29e6c:	687b      	ldr	r3, [r7, #4]
   29e6e:	2200      	movs	r2, #0
   29e70:	66da      	str	r2, [r3, #108]	; 0x6c
   29e72:	687b      	ldr	r3, [r7, #4]
   29e74:	228c      	movs	r2, #140	; 0x8c
   29e76:	2100      	movs	r1, #0
   29e78:	5099      	str	r1, [r3, r2]
   29e7a:	687b      	ldr	r3, [r7, #4]
   29e7c:	229e      	movs	r2, #158	; 0x9e
   29e7e:	2100      	movs	r1, #0
   29e80:	5499      	strb	r1, [r3, r2]
   29e82:	687b      	ldr	r3, [r7, #4]
   29e84:	2200      	movs	r2, #0
   29e86:	671a      	str	r2, [r3, #112]	; 0x70
   29e88:	687b      	ldr	r3, [r7, #4]
   29e8a:	2290      	movs	r2, #144	; 0x90
   29e8c:	2100      	movs	r1, #0
   29e8e:	5099      	str	r1, [r3, r2]
   29e90:	687b      	ldr	r3, [r7, #4]
   29e92:	229f      	movs	r2, #159	; 0x9f
   29e94:	2100      	movs	r1, #0
   29e96:	5499      	strb	r1, [r3, r2]
   29e98:	687b      	ldr	r3, [r7, #4]
   29e9a:	2200      	movs	r2, #0
   29e9c:	675a      	str	r2, [r3, #116]	; 0x74
   29e9e:	687b      	ldr	r3, [r7, #4]
   29ea0:	2294      	movs	r2, #148	; 0x94
   29ea2:	2100      	movs	r1, #0
   29ea4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   29ea6:	687b      	ldr	r3, [r7, #4]
   29ea8:	22a0      	movs	r2, #160	; 0xa0
   29eaa:	2101      	movs	r1, #1
   29eac:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   29eae:	687b      	ldr	r3, [r7, #4]
   29eb0:	22a1      	movs	r2, #161	; 0xa1
   29eb2:	2100      	movs	r1, #0
   29eb4:	5499      	strb	r1, [r3, r2]
}
   29eb6:	46c0      	nop			; (mov r8, r8)
   29eb8:	46bd      	mov	sp, r7
   29eba:	b005      	add	sp, #20
   29ebc:	bd90      	pop	{r4, r7, pc}
   29ebe:	46c0      	nop			; (mov r8, r8)
   29ec0:	00029bbd 	.word	0x00029bbd
   29ec4:	00038e54 	.word	0x00038e54

00029ec8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29ec8:	b580      	push	{r7, lr}
   29eca:	b086      	sub	sp, #24
   29ecc:	af00      	add	r7, sp, #0
   29ece:	60b9      	str	r1, [r7, #8]
   29ed0:	607a      	str	r2, [r7, #4]
   29ed2:	230f      	movs	r3, #15
   29ed4:	18fb      	adds	r3, r7, r3
   29ed6:	1c02      	adds	r2, r0, #0
   29ed8:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   29eda:	2300      	movs	r3, #0
   29edc:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29ede:	2300      	movs	r3, #0
   29ee0:	613b      	str	r3, [r7, #16]
   29ee2:	e01d      	b.n	29f20 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   29ee4:	68ba      	ldr	r2, [r7, #8]
   29ee6:	693b      	ldr	r3, [r7, #16]
   29ee8:	18d3      	adds	r3, r2, r3
   29eea:	3310      	adds	r3, #16
   29eec:	781b      	ldrb	r3, [r3, #0]
   29eee:	2b01      	cmp	r3, #1
   29ef0:	d113      	bne.n	29f1a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   29ef2:	230f      	movs	r3, #15
   29ef4:	18fb      	adds	r3, r7, r3
   29ef6:	781b      	ldrb	r3, [r3, #0]
   29ef8:	4a1b      	ldr	r2, [pc, #108]	; (29f68 <_tcc_build_ctrla+0xa0>)
   29efa:	5cd3      	ldrb	r3, [r2, r3]
   29efc:	001a      	movs	r2, r3
   29efe:	693b      	ldr	r3, [r7, #16]
   29f00:	429a      	cmp	r2, r3
   29f02:	da01      	bge.n	29f08 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   29f04:	2317      	movs	r3, #23
   29f06:	e02a      	b.n	29f5e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   29f08:	2380      	movs	r3, #128	; 0x80
   29f0a:	045a      	lsls	r2, r3, #17
   29f0c:	693b      	ldr	r3, [r7, #16]
   29f0e:	409a      	lsls	r2, r3
   29f10:	0013      	movs	r3, r2
   29f12:	001a      	movs	r2, r3
   29f14:	697b      	ldr	r3, [r7, #20]
   29f16:	4313      	orrs	r3, r2
   29f18:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29f1a:	693b      	ldr	r3, [r7, #16]
   29f1c:	3301      	adds	r3, #1
   29f1e:	613b      	str	r3, [r7, #16]
   29f20:	693b      	ldr	r3, [r7, #16]
   29f22:	2b03      	cmp	r3, #3
   29f24:	ddde      	ble.n	29ee4 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   29f26:	68bb      	ldr	r3, [r7, #8]
   29f28:	22a1      	movs	r2, #161	; 0xa1
   29f2a:	5c9b      	ldrb	r3, [r3, r2]
   29f2c:	2b00      	cmp	r3, #0
   29f2e:	d004      	beq.n	29f3a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   29f30:	697b      	ldr	r3, [r7, #20]
   29f32:	2280      	movs	r2, #128	; 0x80
   29f34:	0112      	lsls	r2, r2, #4
   29f36:	4313      	orrs	r3, r2
   29f38:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   29f3a:	68bb      	ldr	r3, [r7, #8]
   29f3c:	7b1b      	ldrb	r3, [r3, #12]
   29f3e:	031b      	lsls	r3, r3, #12
   29f40:	001a      	movs	r2, r3
   29f42:	697b      	ldr	r3, [r7, #20]
   29f44:	4313      	orrs	r3, r2
   29f46:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   29f48:	68bb      	ldr	r3, [r7, #8]
   29f4a:	7adb      	ldrb	r3, [r3, #11]
   29f4c:	021b      	lsls	r3, r3, #8
   29f4e:	001a      	movs	r2, r3
   29f50:	697b      	ldr	r3, [r7, #20]
   29f52:	4313      	orrs	r3, r2
   29f54:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   29f56:	687b      	ldr	r3, [r7, #4]
   29f58:	697a      	ldr	r2, [r7, #20]
   29f5a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29f5c:	2300      	movs	r3, #0
}
   29f5e:	0018      	movs	r0, r3
   29f60:	46bd      	mov	sp, r7
   29f62:	b006      	add	sp, #24
   29f64:	bd80      	pop	{r7, pc}
   29f66:	46c0      	nop			; (mov r8, r8)
   29f68:	00038e60 	.word	0x00038e60

00029f6c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   29f6c:	b580      	push	{r7, lr}
   29f6e:	b086      	sub	sp, #24
   29f70:	af00      	add	r7, sp, #0
   29f72:	60b9      	str	r1, [r7, #8]
   29f74:	607a      	str	r2, [r7, #4]
   29f76:	230f      	movs	r3, #15
   29f78:	18fb      	adds	r3, r7, r3
   29f7a:	1c02      	adds	r2, r0, #0
   29f7c:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   29f7e:	2317      	movs	r3, #23
   29f80:	18fb      	adds	r3, r7, r3
   29f82:	2200      	movs	r2, #0
   29f84:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   29f86:	68bb      	ldr	r3, [r7, #8]
   29f88:	7a1b      	ldrb	r3, [r3, #8]
   29f8a:	2b00      	cmp	r3, #0
   29f8c:	d007      	beq.n	29f9e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   29f8e:	2317      	movs	r3, #23
   29f90:	18fb      	adds	r3, r7, r3
   29f92:	2217      	movs	r2, #23
   29f94:	18ba      	adds	r2, r7, r2
   29f96:	7812      	ldrb	r2, [r2, #0]
   29f98:	2104      	movs	r1, #4
   29f9a:	430a      	orrs	r2, r1
   29f9c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   29f9e:	68bb      	ldr	r3, [r7, #8]
   29fa0:	7a5b      	ldrb	r3, [r3, #9]
   29fa2:	2b01      	cmp	r3, #1
   29fa4:	d107      	bne.n	29fb6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   29fa6:	2317      	movs	r3, #23
   29fa8:	18fb      	adds	r3, r7, r3
   29faa:	2217      	movs	r2, #23
   29fac:	18ba      	adds	r2, r7, r2
   29fae:	7812      	ldrb	r2, [r2, #0]
   29fb0:	2101      	movs	r1, #1
   29fb2:	430a      	orrs	r2, r1
   29fb4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   29fb6:	687b      	ldr	r3, [r7, #4]
   29fb8:	2217      	movs	r2, #23
   29fba:	18ba      	adds	r2, r7, r2
   29fbc:	7812      	ldrb	r2, [r2, #0]
   29fbe:	701a      	strb	r2, [r3, #0]
}
   29fc0:	46c0      	nop			; (mov r8, r8)
   29fc2:	46bd      	mov	sp, r7
   29fc4:	b006      	add	sp, #24
   29fc6:	bd80      	pop	{r7, pc}

00029fc8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29fc8:	b580      	push	{r7, lr}
   29fca:	b088      	sub	sp, #32
   29fcc:	af00      	add	r7, sp, #0
   29fce:	60b9      	str	r1, [r7, #8]
   29fd0:	607a      	str	r2, [r7, #4]
   29fd2:	230f      	movs	r3, #15
   29fd4:	18fb      	adds	r3, r7, r3
   29fd6:	1c02      	adds	r2, r0, #0
   29fd8:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   29fda:	230f      	movs	r3, #15
   29fdc:	18fb      	adds	r3, r7, r3
   29fde:	781a      	ldrb	r2, [r3, #0]
   29fe0:	231b      	movs	r3, #27
   29fe2:	18fb      	adds	r3, r7, r3
   29fe4:	493e      	ldr	r1, [pc, #248]	; (2a0e0 <_tcc_build_faults+0x118>)
   29fe6:	5c8a      	ldrb	r2, [r1, r2]
   29fe8:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   29fea:	2300      	movs	r3, #0
   29fec:	61fb      	str	r3, [r7, #28]
   29fee:	e06e      	b.n	2a0ce <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   29ff0:	69fa      	ldr	r2, [r7, #28]
   29ff2:	0013      	movs	r3, r2
   29ff4:	009b      	lsls	r3, r3, #2
   29ff6:	189b      	adds	r3, r3, r2
   29ff8:	005b      	lsls	r3, r3, #1
   29ffa:	3328      	adds	r3, #40	; 0x28
   29ffc:	68ba      	ldr	r2, [r7, #8]
   29ffe:	18d3      	adds	r3, r2, r3
   2a000:	3304      	adds	r3, #4
   2a002:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a004:	697b      	ldr	r3, [r7, #20]
   2a006:	7a5b      	ldrb	r3, [r3, #9]
   2a008:	221b      	movs	r2, #27
   2a00a:	18ba      	adds	r2, r7, r2
   2a00c:	7812      	ldrb	r2, [r2, #0]
   2a00e:	429a      	cmp	r2, r3
   2a010:	d801      	bhi.n	2a016 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a012:	2317      	movs	r3, #23
   2a014:	e05f      	b.n	2a0d6 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a016:	697b      	ldr	r3, [r7, #20]
   2a018:	781b      	ldrb	r3, [r3, #0]
   2a01a:	2b0f      	cmp	r3, #15
   2a01c:	d901      	bls.n	2a022 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a01e:	2317      	movs	r3, #23
   2a020:	e059      	b.n	2a0d6 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a022:	697b      	ldr	r3, [r7, #20]
   2a024:	781b      	ldrb	r3, [r3, #0]
   2a026:	061b      	lsls	r3, r3, #24
   2a028:	001a      	movs	r2, r3
   2a02a:	23f0      	movs	r3, #240	; 0xf0
   2a02c:	051b      	lsls	r3, r3, #20
   2a02e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a030:	697b      	ldr	r3, [r7, #20]
   2a032:	785b      	ldrb	r3, [r3, #1]
   2a034:	041b      	lsls	r3, r3, #16
   2a036:	0019      	movs	r1, r3
   2a038:	23ff      	movs	r3, #255	; 0xff
   2a03a:	041b      	lsls	r3, r3, #16
   2a03c:	400b      	ands	r3, r1
   2a03e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a040:	697b      	ldr	r3, [r7, #20]
   2a042:	789b      	ldrb	r3, [r3, #2]
   2a044:	2b00      	cmp	r3, #0
   2a046:	d001      	beq.n	2a04c <_tcc_build_faults+0x84>
   2a048:	2380      	movs	r3, #128	; 0x80
   2a04a:	e000      	b.n	2a04e <_tcc_build_faults+0x86>
   2a04c:	2300      	movs	r3, #0
   2a04e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a050:	697b      	ldr	r3, [r7, #20]
   2a052:	78db      	ldrb	r3, [r3, #3]
   2a054:	2b00      	cmp	r3, #0
   2a056:	d001      	beq.n	2a05c <_tcc_build_faults+0x94>
   2a058:	2308      	movs	r3, #8
   2a05a:	e000      	b.n	2a05e <_tcc_build_faults+0x96>
   2a05c:	2300      	movs	r3, #0
   2a05e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a060:	697b      	ldr	r3, [r7, #20]
   2a062:	791b      	ldrb	r3, [r3, #4]
   2a064:	2b00      	cmp	r3, #0
   2a066:	d001      	beq.n	2a06c <_tcc_build_faults+0xa4>
   2a068:	2310      	movs	r3, #16
   2a06a:	e000      	b.n	2a06e <_tcc_build_faults+0xa6>
   2a06c:	2300      	movs	r3, #0
   2a06e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a070:	697b      	ldr	r3, [r7, #20]
   2a072:	795b      	ldrb	r3, [r3, #5]
   2a074:	0019      	movs	r1, r3
   2a076:	2303      	movs	r3, #3
   2a078:	400b      	ands	r3, r1
   2a07a:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a07c:	697b      	ldr	r3, [r7, #20]
   2a07e:	799b      	ldrb	r3, [r3, #6]
   2a080:	015b      	lsls	r3, r3, #5
   2a082:	0019      	movs	r1, r3
   2a084:	2360      	movs	r3, #96	; 0x60
   2a086:	400b      	ands	r3, r1
   2a088:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a08a:	697b      	ldr	r3, [r7, #20]
   2a08c:	79db      	ldrb	r3, [r3, #7]
   2a08e:	021b      	lsls	r3, r3, #8
   2a090:	0019      	movs	r1, r3
   2a092:	23c0      	movs	r3, #192	; 0xc0
   2a094:	009b      	lsls	r3, r3, #2
   2a096:	400b      	ands	r3, r1
   2a098:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a09a:	697b      	ldr	r3, [r7, #20]
   2a09c:	7a1b      	ldrb	r3, [r3, #8]
   2a09e:	031b      	lsls	r3, r3, #12
   2a0a0:	0019      	movs	r1, r3
   2a0a2:	23e0      	movs	r3, #224	; 0xe0
   2a0a4:	01db      	lsls	r3, r3, #7
   2a0a6:	400b      	ands	r3, r1
   2a0a8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a0aa:	697b      	ldr	r3, [r7, #20]
   2a0ac:	7a5b      	ldrb	r3, [r3, #9]
   2a0ae:	029b      	lsls	r3, r3, #10
   2a0b0:	0019      	movs	r1, r3
   2a0b2:	23c0      	movs	r3, #192	; 0xc0
   2a0b4:	011b      	lsls	r3, r3, #4
   2a0b6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a0b8:	4313      	orrs	r3, r2
   2a0ba:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a0bc:	69fb      	ldr	r3, [r7, #28]
   2a0be:	009b      	lsls	r3, r3, #2
   2a0c0:	687a      	ldr	r2, [r7, #4]
   2a0c2:	18d3      	adds	r3, r2, r3
   2a0c4:	693a      	ldr	r2, [r7, #16]
   2a0c6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a0c8:	69fb      	ldr	r3, [r7, #28]
   2a0ca:	3301      	adds	r3, #1
   2a0cc:	61fb      	str	r3, [r7, #28]
   2a0ce:	69fb      	ldr	r3, [r7, #28]
   2a0d0:	2b01      	cmp	r3, #1
   2a0d2:	dd8d      	ble.n	29ff0 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a0d4:	2300      	movs	r3, #0
}
   2a0d6:	0018      	movs	r0, r3
   2a0d8:	46bd      	mov	sp, r7
   2a0da:	b008      	add	sp, #32
   2a0dc:	bd80      	pop	{r7, pc}
   2a0de:	46c0      	nop			; (mov r8, r8)
   2a0e0:	00038e60 	.word	0x00038e60

0002a0e4 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a0e4:	b580      	push	{r7, lr}
   2a0e6:	b088      	sub	sp, #32
   2a0e8:	af00      	add	r7, sp, #0
   2a0ea:	60b9      	str	r1, [r7, #8]
   2a0ec:	607a      	str	r2, [r7, #4]
   2a0ee:	230f      	movs	r3, #15
   2a0f0:	18fb      	adds	r3, r7, r3
   2a0f2:	1c02      	adds	r2, r0, #0
   2a0f4:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a0f6:	230f      	movs	r3, #15
   2a0f8:	18fb      	adds	r3, r7, r3
   2a0fa:	781a      	ldrb	r2, [r3, #0]
   2a0fc:	2317      	movs	r3, #23
   2a0fe:	18fb      	adds	r3, r7, r3
   2a100:	492d      	ldr	r1, [pc, #180]	; (2a1b8 <_tcc_build_drvctrl+0xd4>)
   2a102:	5c8a      	ldrb	r2, [r1, r2]
   2a104:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a106:	2300      	movs	r3, #0
   2a108:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a10a:	2300      	movs	r3, #0
   2a10c:	61fb      	str	r3, [r7, #28]
   2a10e:	e048      	b.n	2a1a2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a110:	68ba      	ldr	r2, [r7, #8]
   2a112:	2150      	movs	r1, #80	; 0x50
   2a114:	69fb      	ldr	r3, [r7, #28]
   2a116:	18d3      	adds	r3, r2, r3
   2a118:	185b      	adds	r3, r3, r1
   2a11a:	781b      	ldrb	r3, [r3, #0]
   2a11c:	2b00      	cmp	r3, #0
   2a11e:	d010      	beq.n	2a142 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a120:	2317      	movs	r3, #23
   2a122:	18fb      	adds	r3, r7, r3
   2a124:	781a      	ldrb	r2, [r3, #0]
   2a126:	69fb      	ldr	r3, [r7, #28]
   2a128:	429a      	cmp	r2, r3
   2a12a:	d801      	bhi.n	2a130 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a12c:	2317      	movs	r3, #23
   2a12e:	e03f      	b.n	2a1b0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a130:	2380      	movs	r3, #128	; 0x80
   2a132:	025a      	lsls	r2, r3, #9
   2a134:	69fb      	ldr	r3, [r7, #28]
   2a136:	409a      	lsls	r2, r3
   2a138:	0013      	movs	r3, r2
   2a13a:	001a      	movs	r2, r3
   2a13c:	69bb      	ldr	r3, [r7, #24]
   2a13e:	4313      	orrs	r3, r2
   2a140:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a142:	68ba      	ldr	r2, [r7, #8]
   2a144:	69fb      	ldr	r3, [r7, #28]
   2a146:	331c      	adds	r3, #28
   2a148:	005b      	lsls	r3, r3, #1
   2a14a:	18d3      	adds	r3, r2, r3
   2a14c:	3309      	adds	r3, #9
   2a14e:	781b      	ldrb	r3, [r3, #0]
   2a150:	2b00      	cmp	r3, #0
   2a152:	d023      	beq.n	2a19c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a154:	2317      	movs	r3, #23
   2a156:	18fb      	adds	r3, r7, r3
   2a158:	781a      	ldrb	r2, [r3, #0]
   2a15a:	69fb      	ldr	r3, [r7, #28]
   2a15c:	429a      	cmp	r2, r3
   2a15e:	d801      	bhi.n	2a164 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a160:	2317      	movs	r3, #23
   2a162:	e025      	b.n	2a1b0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a164:	68ba      	ldr	r2, [r7, #8]
   2a166:	69fb      	ldr	r3, [r7, #28]
   2a168:	331c      	adds	r3, #28
   2a16a:	005b      	lsls	r3, r3, #1
   2a16c:	18d3      	adds	r3, r2, r3
   2a16e:	3309      	adds	r3, #9
   2a170:	781b      	ldrb	r3, [r3, #0]
   2a172:	2b02      	cmp	r3, #2
   2a174:	d10a      	bne.n	2a18c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a176:	2302      	movs	r3, #2
   2a178:	33ff      	adds	r3, #255	; 0xff
   2a17a:	001a      	movs	r2, r3
   2a17c:	69fb      	ldr	r3, [r7, #28]
   2a17e:	409a      	lsls	r2, r3
   2a180:	0013      	movs	r3, r2
   2a182:	001a      	movs	r2, r3
   2a184:	69bb      	ldr	r3, [r7, #24]
   2a186:	4313      	orrs	r3, r2
   2a188:	61bb      	str	r3, [r7, #24]
   2a18a:	e007      	b.n	2a19c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a18c:	2201      	movs	r2, #1
   2a18e:	69fb      	ldr	r3, [r7, #28]
   2a190:	409a      	lsls	r2, r3
   2a192:	0013      	movs	r3, r2
   2a194:	001a      	movs	r2, r3
   2a196:	69bb      	ldr	r3, [r7, #24]
   2a198:	4313      	orrs	r3, r2
   2a19a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a19c:	69fb      	ldr	r3, [r7, #28]
   2a19e:	3301      	adds	r3, #1
   2a1a0:	61fb      	str	r3, [r7, #28]
   2a1a2:	69fb      	ldr	r3, [r7, #28]
   2a1a4:	2b07      	cmp	r3, #7
   2a1a6:	d9b3      	bls.n	2a110 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a1a8:	687b      	ldr	r3, [r7, #4]
   2a1aa:	69ba      	ldr	r2, [r7, #24]
   2a1ac:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a1ae:	2300      	movs	r3, #0
}
   2a1b0:	0018      	movs	r0, r3
   2a1b2:	46bd      	mov	sp, r7
   2a1b4:	b008      	add	sp, #32
   2a1b6:	bd80      	pop	{r7, pc}
   2a1b8:	00038e64 	.word	0x00038e64

0002a1bc <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a1bc:	b580      	push	{r7, lr}
   2a1be:	b088      	sub	sp, #32
   2a1c0:	af00      	add	r7, sp, #0
   2a1c2:	60b9      	str	r1, [r7, #8]
   2a1c4:	607a      	str	r2, [r7, #4]
   2a1c6:	230f      	movs	r3, #15
   2a1c8:	18fb      	adds	r3, r7, r3
   2a1ca:	1c02      	adds	r2, r0, #0
   2a1cc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a1ce:	230f      	movs	r3, #15
   2a1d0:	18fb      	adds	r3, r7, r3
   2a1d2:	781a      	ldrb	r2, [r3, #0]
   2a1d4:	2317      	movs	r3, #23
   2a1d6:	18fb      	adds	r3, r7, r3
   2a1d8:	491d      	ldr	r1, [pc, #116]	; (2a250 <_tcc_build_waves+0x94>)
   2a1da:	5c8a      	ldrb	r2, [r1, r2]
   2a1dc:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a1de:	68bb      	ldr	r3, [r7, #8]
   2a1e0:	3310      	adds	r3, #16
   2a1e2:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a1e4:	693b      	ldr	r3, [r7, #16]
   2a1e6:	7a5b      	ldrb	r3, [r3, #9]
   2a1e8:	011b      	lsls	r3, r3, #4
   2a1ea:	001a      	movs	r2, r3
   2a1ec:	2330      	movs	r3, #48	; 0x30
   2a1ee:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a1f0:	693b      	ldr	r3, [r7, #16]
   2a1f2:	7a1b      	ldrb	r3, [r3, #8]
   2a1f4:	0019      	movs	r1, r3
   2a1f6:	2307      	movs	r3, #7
   2a1f8:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a1fa:	4313      	orrs	r3, r2
   2a1fc:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a1fe:	2300      	movs	r3, #0
   2a200:	61fb      	str	r3, [r7, #28]
   2a202:	e01a      	b.n	2a23a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a204:	693a      	ldr	r2, [r7, #16]
   2a206:	69fb      	ldr	r3, [r7, #28]
   2a208:	18d3      	adds	r3, r2, r3
   2a20a:	3304      	adds	r3, #4
   2a20c:	781b      	ldrb	r3, [r3, #0]
   2a20e:	2b00      	cmp	r3, #0
   2a210:	d010      	beq.n	2a234 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a212:	2317      	movs	r3, #23
   2a214:	18fb      	adds	r3, r7, r3
   2a216:	781a      	ldrb	r2, [r3, #0]
   2a218:	69fb      	ldr	r3, [r7, #28]
   2a21a:	429a      	cmp	r2, r3
   2a21c:	dc01      	bgt.n	2a222 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a21e:	2317      	movs	r3, #23
   2a220:	e012      	b.n	2a248 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a222:	2380      	movs	r3, #128	; 0x80
   2a224:	025a      	lsls	r2, r3, #9
   2a226:	69fb      	ldr	r3, [r7, #28]
   2a228:	409a      	lsls	r2, r3
   2a22a:	0013      	movs	r3, r2
   2a22c:	001a      	movs	r2, r3
   2a22e:	69bb      	ldr	r3, [r7, #24]
   2a230:	4313      	orrs	r3, r2
   2a232:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a234:	69fb      	ldr	r3, [r7, #28]
   2a236:	3301      	adds	r3, #1
   2a238:	61fb      	str	r3, [r7, #28]
   2a23a:	69fb      	ldr	r3, [r7, #28]
   2a23c:	2b03      	cmp	r3, #3
   2a23e:	dde1      	ble.n	2a204 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a240:	687b      	ldr	r3, [r7, #4]
   2a242:	69ba      	ldr	r2, [r7, #24]
   2a244:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a246:	2300      	movs	r3, #0
}
   2a248:	0018      	movs	r0, r3
   2a24a:	46bd      	mov	sp, r7
   2a24c:	b008      	add	sp, #32
   2a24e:	bd80      	pop	{r7, pc}
   2a250:	00038e60 	.word	0x00038e60

0002a254 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a254:	b590      	push	{r4, r7, lr}
   2a256:	b091      	sub	sp, #68	; 0x44
   2a258:	af00      	add	r7, sp, #0
   2a25a:	60f8      	str	r0, [r7, #12]
   2a25c:	60b9      	str	r1, [r7, #8]
   2a25e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a260:	233b      	movs	r3, #59	; 0x3b
   2a262:	18fc      	adds	r4, r7, r3
   2a264:	68bb      	ldr	r3, [r7, #8]
   2a266:	0018      	movs	r0, r3
   2a268:	4bc4      	ldr	r3, [pc, #784]	; (2a57c <tcc_init+0x328>)
   2a26a:	4798      	blx	r3
   2a26c:	0003      	movs	r3, r0
   2a26e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a270:	233b      	movs	r3, #59	; 0x3b
   2a272:	18fb      	adds	r3, r7, r3
   2a274:	781a      	ldrb	r2, [r3, #0]
   2a276:	4bc2      	ldr	r3, [pc, #776]	; (2a580 <tcc_init+0x32c>)
   2a278:	0092      	lsls	r2, r2, #2
   2a27a:	58d3      	ldr	r3, [r2, r3]
   2a27c:	0019      	movs	r1, r3
   2a27e:	2002      	movs	r0, #2
   2a280:	4bc0      	ldr	r3, [pc, #768]	; (2a584 <tcc_init+0x330>)
   2a282:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a284:	68bb      	ldr	r3, [r7, #8]
   2a286:	681b      	ldr	r3, [r3, #0]
   2a288:	2202      	movs	r2, #2
   2a28a:	4013      	ands	r3, r2
   2a28c:	d001      	beq.n	2a292 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a28e:	231c      	movs	r3, #28
   2a290:	e1be      	b.n	2a610 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a292:	68bb      	ldr	r3, [r7, #8]
   2a294:	681b      	ldr	r3, [r3, #0]
   2a296:	2201      	movs	r2, #1
   2a298:	4013      	ands	r3, r2
   2a29a:	d001      	beq.n	2a2a0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a29c:	231c      	movs	r3, #28
   2a29e:	e1b7      	b.n	2a610 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a2a0:	233b      	movs	r3, #59	; 0x3b
   2a2a2:	18fb      	adds	r3, r7, r3
   2a2a4:	781a      	ldrb	r2, [r3, #0]
   2a2a6:	4bb8      	ldr	r3, [pc, #736]	; (2a588 <tcc_init+0x334>)
   2a2a8:	0092      	lsls	r2, r2, #2
   2a2aa:	58d3      	ldr	r3, [r2, r3]
   2a2ac:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a2ae:	687b      	ldr	r3, [r7, #4]
   2a2b0:	681a      	ldr	r2, [r3, #0]
   2a2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a2b4:	429a      	cmp	r2, r3
   2a2b6:	d804      	bhi.n	2a2c2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a2b8:	687b      	ldr	r3, [r7, #4]
   2a2ba:	685a      	ldr	r2, [r3, #4]
   2a2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a2be:	429a      	cmp	r2, r3
   2a2c0:	d901      	bls.n	2a2c6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a2c2:	2317      	movs	r3, #23
   2a2c4:	e1a4      	b.n	2a610 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a2c6:	2300      	movs	r3, #0
   2a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a2ca:	e00e      	b.n	2a2ea <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a2cc:	687a      	ldr	r2, [r7, #4]
   2a2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a2d0:	3306      	adds	r3, #6
   2a2d2:	009b      	lsls	r3, r3, #2
   2a2d4:	18d3      	adds	r3, r2, r3
   2a2d6:	3304      	adds	r3, #4
   2a2d8:	681a      	ldr	r2, [r3, #0]
   2a2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a2dc:	429a      	cmp	r2, r3
   2a2de:	d901      	bls.n	2a2e4 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a2e0:	2317      	movs	r3, #23
   2a2e2:	e195      	b.n	2a610 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a2e6:	3301      	adds	r3, #1
   2a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a2ec:	2b03      	cmp	r3, #3
   2a2ee:	dded      	ble.n	2a2cc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a2f0:	2300      	movs	r3, #0
   2a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a2f4:	e019      	b.n	2a32a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a2f6:	687a      	ldr	r2, [r7, #4]
   2a2f8:	2198      	movs	r1, #152	; 0x98
   2a2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a2fc:	18d3      	adds	r3, r2, r3
   2a2fe:	185b      	adds	r3, r3, r1
   2a300:	781b      	ldrb	r3, [r3, #0]
   2a302:	2201      	movs	r2, #1
   2a304:	4053      	eors	r3, r2
   2a306:	b2db      	uxtb	r3, r3
   2a308:	2b00      	cmp	r3, #0
   2a30a:	d10a      	bne.n	2a322 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a30c:	233b      	movs	r3, #59	; 0x3b
   2a30e:	18fb      	adds	r3, r7, r3
   2a310:	781b      	ldrb	r3, [r3, #0]
   2a312:	4a9e      	ldr	r2, [pc, #632]	; (2a58c <tcc_init+0x338>)
   2a314:	5cd3      	ldrb	r3, [r2, r3]
   2a316:	001a      	movs	r2, r3
   2a318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a31a:	429a      	cmp	r2, r3
   2a31c:	dc02      	bgt.n	2a324 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a31e:	2317      	movs	r3, #23
   2a320:	e176      	b.n	2a610 <tcc_init+0x3bc>
			continue;
   2a322:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a326:	3301      	adds	r3, #1
   2a328:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a32c:	2b07      	cmp	r3, #7
   2a32e:	dde2      	ble.n	2a2f6 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a330:	2300      	movs	r3, #0
   2a332:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a334:	2333      	movs	r3, #51	; 0x33
   2a336:	18fc      	adds	r4, r7, r3
   2a338:	232c      	movs	r3, #44	; 0x2c
   2a33a:	18fa      	adds	r2, r7, r3
   2a33c:	6879      	ldr	r1, [r7, #4]
   2a33e:	233b      	movs	r3, #59	; 0x3b
   2a340:	18fb      	adds	r3, r7, r3
   2a342:	781b      	ldrb	r3, [r3, #0]
   2a344:	0018      	movs	r0, r3
   2a346:	4b92      	ldr	r3, [pc, #584]	; (2a590 <tcc_init+0x33c>)
   2a348:	4798      	blx	r3
   2a34a:	0003      	movs	r3, r0
   2a34c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a34e:	2333      	movs	r3, #51	; 0x33
   2a350:	18fb      	adds	r3, r7, r3
   2a352:	781b      	ldrb	r3, [r3, #0]
   2a354:	2b00      	cmp	r3, #0
   2a356:	d003      	beq.n	2a360 <tcc_init+0x10c>
		return status;
   2a358:	2333      	movs	r3, #51	; 0x33
   2a35a:	18fb      	adds	r3, r7, r3
   2a35c:	781b      	ldrb	r3, [r3, #0]
   2a35e:	e157      	b.n	2a610 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a360:	232b      	movs	r3, #43	; 0x2b
   2a362:	18fa      	adds	r2, r7, r3
   2a364:	6879      	ldr	r1, [r7, #4]
   2a366:	233b      	movs	r3, #59	; 0x3b
   2a368:	18fb      	adds	r3, r7, r3
   2a36a:	781b      	ldrb	r3, [r3, #0]
   2a36c:	0018      	movs	r0, r3
   2a36e:	4b89      	ldr	r3, [pc, #548]	; (2a594 <tcc_init+0x340>)
   2a370:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a372:	2333      	movs	r3, #51	; 0x33
   2a374:	18fc      	adds	r4, r7, r3
   2a376:	2320      	movs	r3, #32
   2a378:	18fa      	adds	r2, r7, r3
   2a37a:	6879      	ldr	r1, [r7, #4]
   2a37c:	233b      	movs	r3, #59	; 0x3b
   2a37e:	18fb      	adds	r3, r7, r3
   2a380:	781b      	ldrb	r3, [r3, #0]
   2a382:	0018      	movs	r0, r3
   2a384:	4b84      	ldr	r3, [pc, #528]	; (2a598 <tcc_init+0x344>)
   2a386:	4798      	blx	r3
   2a388:	0003      	movs	r3, r0
   2a38a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a38c:	2333      	movs	r3, #51	; 0x33
   2a38e:	18fb      	adds	r3, r7, r3
   2a390:	781b      	ldrb	r3, [r3, #0]
   2a392:	2b00      	cmp	r3, #0
   2a394:	d003      	beq.n	2a39e <tcc_init+0x14a>
		return status;
   2a396:	2333      	movs	r3, #51	; 0x33
   2a398:	18fb      	adds	r3, r7, r3
   2a39a:	781b      	ldrb	r3, [r3, #0]
   2a39c:	e138      	b.n	2a610 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a39e:	2300      	movs	r3, #0
   2a3a0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a3a2:	2333      	movs	r3, #51	; 0x33
   2a3a4:	18fc      	adds	r4, r7, r3
   2a3a6:	231c      	movs	r3, #28
   2a3a8:	18fa      	adds	r2, r7, r3
   2a3aa:	6879      	ldr	r1, [r7, #4]
   2a3ac:	233b      	movs	r3, #59	; 0x3b
   2a3ae:	18fb      	adds	r3, r7, r3
   2a3b0:	781b      	ldrb	r3, [r3, #0]
   2a3b2:	0018      	movs	r0, r3
   2a3b4:	4b79      	ldr	r3, [pc, #484]	; (2a59c <tcc_init+0x348>)
   2a3b6:	4798      	blx	r3
   2a3b8:	0003      	movs	r3, r0
   2a3ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a3bc:	2333      	movs	r3, #51	; 0x33
   2a3be:	18fb      	adds	r3, r7, r3
   2a3c0:	781b      	ldrb	r3, [r3, #0]
   2a3c2:	2b00      	cmp	r3, #0
   2a3c4:	d003      	beq.n	2a3ce <tcc_init+0x17a>
		return status;
   2a3c6:	2333      	movs	r3, #51	; 0x33
   2a3c8:	18fb      	adds	r3, r7, r3
   2a3ca:	781b      	ldrb	r3, [r3, #0]
   2a3cc:	e120      	b.n	2a610 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a3ce:	2333      	movs	r3, #51	; 0x33
   2a3d0:	18fc      	adds	r4, r7, r3
   2a3d2:	2318      	movs	r3, #24
   2a3d4:	18fa      	adds	r2, r7, r3
   2a3d6:	6879      	ldr	r1, [r7, #4]
   2a3d8:	233b      	movs	r3, #59	; 0x3b
   2a3da:	18fb      	adds	r3, r7, r3
   2a3dc:	781b      	ldrb	r3, [r3, #0]
   2a3de:	0018      	movs	r0, r3
   2a3e0:	4b6f      	ldr	r3, [pc, #444]	; (2a5a0 <tcc_init+0x34c>)
   2a3e2:	4798      	blx	r3
   2a3e4:	0003      	movs	r3, r0
   2a3e6:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a3e8:	2333      	movs	r3, #51	; 0x33
   2a3ea:	18fb      	adds	r3, r7, r3
   2a3ec:	781b      	ldrb	r3, [r3, #0]
   2a3ee:	2b00      	cmp	r3, #0
   2a3f0:	d003      	beq.n	2a3fa <tcc_init+0x1a6>
		return status;
   2a3f2:	2333      	movs	r3, #51	; 0x33
   2a3f4:	18fb      	adds	r3, r7, r3
   2a3f6:	781b      	ldrb	r3, [r3, #0]
   2a3f8:	e10a      	b.n	2a610 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a3fa:	2300      	movs	r3, #0
   2a3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a3fe:	e009      	b.n	2a414 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2a400:	68fa      	ldr	r2, [r7, #12]
   2a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a404:	009b      	lsls	r3, r3, #2
   2a406:	18d3      	adds	r3, r2, r3
   2a408:	3304      	adds	r3, #4
   2a40a:	2200      	movs	r2, #0
   2a40c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a410:	3301      	adds	r3, #1
   2a412:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a416:	2b0b      	cmp	r3, #11
   2a418:	ddf2      	ble.n	2a400 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2a41a:	68fb      	ldr	r3, [r7, #12]
   2a41c:	2200      	movs	r2, #0
   2a41e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2a420:	68fb      	ldr	r3, [r7, #12]
   2a422:	2200      	movs	r2, #0
   2a424:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2a426:	233b      	movs	r3, #59	; 0x3b
   2a428:	18fb      	adds	r3, r7, r3
   2a42a:	781a      	ldrb	r2, [r3, #0]
   2a42c:	4b5d      	ldr	r3, [pc, #372]	; (2a5a4 <tcc_init+0x350>)
   2a42e:	0092      	lsls	r2, r2, #2
   2a430:	68f9      	ldr	r1, [r7, #12]
   2a432:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2a434:	68fb      	ldr	r3, [r7, #12]
   2a436:	68ba      	ldr	r2, [r7, #8]
   2a438:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2a43a:	687b      	ldr	r3, [r7, #4]
   2a43c:	22a0      	movs	r2, #160	; 0xa0
   2a43e:	5c99      	ldrb	r1, [r3, r2]
   2a440:	68fb      	ldr	r3, [r7, #12]
   2a442:	223c      	movs	r2, #60	; 0x3c
   2a444:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2a446:	2314      	movs	r3, #20
   2a448:	18fb      	adds	r3, r7, r3
   2a44a:	0018      	movs	r0, r3
   2a44c:	4b56      	ldr	r3, [pc, #344]	; (2a5a8 <tcc_init+0x354>)
   2a44e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2a450:	687b      	ldr	r3, [r7, #4]
   2a452:	7a9a      	ldrb	r2, [r3, #10]
   2a454:	2314      	movs	r3, #20
   2a456:	18fb      	adds	r3, r7, r3
   2a458:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2a45a:	233b      	movs	r3, #59	; 0x3b
   2a45c:	18fb      	adds	r3, r7, r3
   2a45e:	781b      	ldrb	r3, [r3, #0]
   2a460:	4a52      	ldr	r2, [pc, #328]	; (2a5ac <tcc_init+0x358>)
   2a462:	5cd3      	ldrb	r3, [r2, r3]
   2a464:	2214      	movs	r2, #20
   2a466:	18ba      	adds	r2, r7, r2
   2a468:	0011      	movs	r1, r2
   2a46a:	0018      	movs	r0, r3
   2a46c:	4b50      	ldr	r3, [pc, #320]	; (2a5b0 <tcc_init+0x35c>)
   2a46e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2a470:	233b      	movs	r3, #59	; 0x3b
   2a472:	18fb      	adds	r3, r7, r3
   2a474:	781b      	ldrb	r3, [r3, #0]
   2a476:	4a4d      	ldr	r2, [pc, #308]	; (2a5ac <tcc_init+0x358>)
   2a478:	5cd3      	ldrb	r3, [r2, r3]
   2a47a:	0018      	movs	r0, r3
   2a47c:	4b4d      	ldr	r3, [pc, #308]	; (2a5b4 <tcc_init+0x360>)
   2a47e:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a480:	2300      	movs	r3, #0
   2a482:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a484:	e02d      	b.n	2a4e2 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a486:	687a      	ldr	r2, [r7, #4]
   2a488:	2198      	movs	r1, #152	; 0x98
   2a48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a48c:	18d3      	adds	r3, r2, r3
   2a48e:	185b      	adds	r3, r3, r1
   2a490:	781b      	ldrb	r3, [r3, #0]
   2a492:	2201      	movs	r2, #1
   2a494:	4053      	eors	r3, r2
   2a496:	b2db      	uxtb	r3, r3
   2a498:	2b00      	cmp	r3, #0
   2a49a:	d11e      	bne.n	2a4da <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2a49c:	2310      	movs	r3, #16
   2a49e:	18fb      	adds	r3, r7, r3
   2a4a0:	0018      	movs	r0, r3
   2a4a2:	4b45      	ldr	r3, [pc, #276]	; (2a5b8 <tcc_init+0x364>)
   2a4a4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2a4a6:	687b      	ldr	r3, [r7, #4]
   2a4a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a4aa:	321e      	adds	r2, #30
   2a4ac:	0092      	lsls	r2, r2, #2
   2a4ae:	58d3      	ldr	r3, [r2, r3]
   2a4b0:	b2da      	uxtb	r2, r3
   2a4b2:	2310      	movs	r3, #16
   2a4b4:	18fb      	adds	r3, r7, r3
   2a4b6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2a4b8:	2310      	movs	r3, #16
   2a4ba:	18fb      	adds	r3, r7, r3
   2a4bc:	2201      	movs	r2, #1
   2a4be:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2a4c0:	687b      	ldr	r3, [r7, #4]
   2a4c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a4c4:	3216      	adds	r2, #22
   2a4c6:	0092      	lsls	r2, r2, #2
   2a4c8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2a4ca:	b2db      	uxtb	r3, r3
   2a4cc:	2210      	movs	r2, #16
   2a4ce:	18ba      	adds	r2, r7, r2
   2a4d0:	0011      	movs	r1, r2
   2a4d2:	0018      	movs	r0, r3
   2a4d4:	4b39      	ldr	r3, [pc, #228]	; (2a5bc <tcc_init+0x368>)
   2a4d6:	4798      	blx	r3
   2a4d8:	e000      	b.n	2a4dc <tcc_init+0x288>
			continue;
   2a4da:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a4de:	3301      	adds	r3, #1
   2a4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a4e2:	233b      	movs	r3, #59	; 0x3b
   2a4e4:	18fb      	adds	r3, r7, r3
   2a4e6:	781b      	ldrb	r3, [r3, #0]
   2a4e8:	4a28      	ldr	r2, [pc, #160]	; (2a58c <tcc_init+0x338>)
   2a4ea:	5cd3      	ldrb	r3, [r2, r3]
   2a4ec:	001a      	movs	r2, r3
   2a4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a4f0:	429a      	cmp	r2, r3
   2a4f2:	dcc8      	bgt.n	2a486 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2a4f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a4f6:	68bb      	ldr	r3, [r7, #8]
   2a4f8:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a4fa:	46c0      	nop			; (mov r8, r8)
   2a4fc:	68bb      	ldr	r3, [r7, #8]
   2a4fe:	689b      	ldr	r3, [r3, #8]
   2a500:	2204      	movs	r2, #4
   2a502:	4013      	ands	r3, r2
   2a504:	d1fa      	bne.n	2a4fc <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2a506:	68bb      	ldr	r3, [r7, #8]
   2a508:	22ff      	movs	r2, #255	; 0xff
   2a50a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a50c:	46c0      	nop			; (mov r8, r8)
   2a50e:	68bb      	ldr	r3, [r7, #8]
   2a510:	689b      	ldr	r3, [r3, #8]
   2a512:	2204      	movs	r2, #4
   2a514:	4013      	ands	r3, r2
   2a516:	d1fa      	bne.n	2a50e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2a518:	232b      	movs	r3, #43	; 0x2b
   2a51a:	18fb      	adds	r3, r7, r3
   2a51c:	781a      	ldrb	r2, [r3, #0]
   2a51e:	68bb      	ldr	r3, [r7, #8]
   2a520:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2a522:	2320      	movs	r3, #32
   2a524:	18fb      	adds	r3, r7, r3
   2a526:	681a      	ldr	r2, [r3, #0]
   2a528:	68bb      	ldr	r3, [r7, #8]
   2a52a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a52c:	2320      	movs	r3, #32
   2a52e:	18fb      	adds	r3, r7, r3
   2a530:	685a      	ldr	r2, [r3, #4]
   2a532:	68bb      	ldr	r3, [r7, #8]
   2a534:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a536:	69fa      	ldr	r2, [r7, #28]
   2a538:	68bb      	ldr	r3, [r7, #8]
   2a53a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a53c:	46c0      	nop			; (mov r8, r8)
   2a53e:	68bb      	ldr	r3, [r7, #8]
   2a540:	689b      	ldr	r3, [r3, #8]
   2a542:	4a1f      	ldr	r2, [pc, #124]	; (2a5c0 <tcc_init+0x36c>)
   2a544:	4013      	ands	r3, r2
   2a546:	d1fa      	bne.n	2a53e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a548:	69ba      	ldr	r2, [r7, #24]
   2a54a:	68bb      	ldr	r3, [r7, #8]
   2a54c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a54e:	46c0      	nop			; (mov r8, r8)
   2a550:	68bb      	ldr	r3, [r7, #8]
   2a552:	689b      	ldr	r3, [r3, #8]
   2a554:	2210      	movs	r2, #16
   2a556:	4013      	ands	r3, r2
   2a558:	d1fa      	bne.n	2a550 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a55a:	687b      	ldr	r3, [r7, #4]
   2a55c:	681a      	ldr	r2, [r3, #0]
   2a55e:	68bb      	ldr	r3, [r7, #8]
   2a560:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a562:	46c0      	nop			; (mov r8, r8)
   2a564:	68bb      	ldr	r3, [r7, #8]
   2a566:	689b      	ldr	r3, [r3, #8]
   2a568:	4a16      	ldr	r2, [pc, #88]	; (2a5c4 <tcc_init+0x370>)
   2a56a:	4013      	ands	r3, r2
   2a56c:	d1fa      	bne.n	2a564 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a56e:	687b      	ldr	r3, [r7, #4]
   2a570:	685a      	ldr	r2, [r3, #4]
   2a572:	68bb      	ldr	r3, [r7, #8]
   2a574:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a576:	2300      	movs	r3, #0
   2a578:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a57a:	e03f      	b.n	2a5fc <tcc_init+0x3a8>
   2a57c:	00029bbd 	.word	0x00029bbd
   2a580:	00038e48 	.word	0x00038e48
   2a584:	00029b39 	.word	0x00029b39
   2a588:	00038e54 	.word	0x00038e54
   2a58c:	00038e64 	.word	0x00038e64
   2a590:	00029ec9 	.word	0x00029ec9
   2a594:	00029f6d 	.word	0x00029f6d
   2a598:	00029fc9 	.word	0x00029fc9
   2a59c:	0002a0e5 	.word	0x0002a0e5
   2a5a0:	0002a1bd 	.word	0x0002a1bd
   2a5a4:	20005a28 	.word	0x20005a28
   2a5a8:	00029b21 	.word	0x00029b21
   2a5ac:	00038e44 	.word	0x00038e44
   2a5b0:	00029739 	.word	0x00029739
   2a5b4:	0002977d 	.word	0x0002977d
   2a5b8:	00029b95 	.word	0x00029b95
   2a5bc:	00029a99 	.word	0x00029a99
   2a5c0:	00020040 	.word	0x00020040
   2a5c4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a5c8:	46c0      	nop			; (mov r8, r8)
   2a5ca:	68bb      	ldr	r3, [r7, #8]
   2a5cc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a5ce:	4912      	ldr	r1, [pc, #72]	; (2a618 <tcc_init+0x3c4>)
   2a5d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a5d2:	4091      	lsls	r1, r2
   2a5d4:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2a5d6:	4013      	ands	r3, r2
   2a5d8:	d1f7      	bne.n	2a5ca <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2a5da:	687a      	ldr	r2, [r7, #4]
   2a5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5de:	3306      	adds	r3, #6
   2a5e0:	009b      	lsls	r3, r3, #2
   2a5e2:	18d3      	adds	r3, r2, r3
   2a5e4:	3304      	adds	r3, #4
   2a5e6:	681a      	ldr	r2, [r3, #0]
   2a5e8:	68b9      	ldr	r1, [r7, #8]
   2a5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5ec:	3310      	adds	r3, #16
   2a5ee:	009b      	lsls	r3, r3, #2
   2a5f0:	18cb      	adds	r3, r1, r3
   2a5f2:	3304      	adds	r3, #4
   2a5f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5f8:	3301      	adds	r3, #1
   2a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a5fc:	233b      	movs	r3, #59	; 0x3b
   2a5fe:	18fb      	adds	r3, r7, r3
   2a600:	781b      	ldrb	r3, [r3, #0]
   2a602:	4a06      	ldr	r2, [pc, #24]	; (2a61c <tcc_init+0x3c8>)
   2a604:	5cd3      	ldrb	r3, [r2, r3]
   2a606:	001a      	movs	r2, r3
   2a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a60a:	429a      	cmp	r2, r3
   2a60c:	dcdc      	bgt.n	2a5c8 <tcc_init+0x374>
	}

	return STATUS_OK;
   2a60e:	2300      	movs	r3, #0
}
   2a610:	0018      	movs	r0, r3
   2a612:	46bd      	mov	sp, r7
   2a614:	b011      	add	sp, #68	; 0x44
   2a616:	bd90      	pop	{r4, r7, pc}
   2a618:	00080100 	.word	0x00080100
   2a61c:	00038e60 	.word	0x00038e60

0002a620 <system_interrupt_enable>:
{
   2a620:	b580      	push	{r7, lr}
   2a622:	b082      	sub	sp, #8
   2a624:	af00      	add	r7, sp, #0
   2a626:	0002      	movs	r2, r0
   2a628:	1dfb      	adds	r3, r7, #7
   2a62a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a62c:	4b06      	ldr	r3, [pc, #24]	; (2a648 <system_interrupt_enable+0x28>)
   2a62e:	1dfa      	adds	r2, r7, #7
   2a630:	7812      	ldrb	r2, [r2, #0]
   2a632:	0011      	movs	r1, r2
   2a634:	221f      	movs	r2, #31
   2a636:	400a      	ands	r2, r1
   2a638:	2101      	movs	r1, #1
   2a63a:	4091      	lsls	r1, r2
   2a63c:	000a      	movs	r2, r1
   2a63e:	601a      	str	r2, [r3, #0]
}
   2a640:	46c0      	nop			; (mov r8, r8)
   2a642:	46bd      	mov	sp, r7
   2a644:	b002      	add	sp, #8
   2a646:	bd80      	pop	{r7, pc}
   2a648:	e000e100 	.word	0xe000e100

0002a64c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2a64c:	b580      	push	{r7, lr}
   2a64e:	b082      	sub	sp, #8
   2a650:	af00      	add	r7, sp, #0
   2a652:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2a654:	4a04      	ldr	r2, [pc, #16]	; (2a668 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2a656:	687b      	ldr	r3, [r7, #4]
   2a658:	18d3      	adds	r3, r2, r3
   2a65a:	781b      	ldrb	r3, [r3, #0]
   2a65c:	b25b      	sxtb	r3, r3
}
   2a65e:	0018      	movs	r0, r3
   2a660:	46bd      	mov	sp, r7
   2a662:	b002      	add	sp, #8
   2a664:	bd80      	pop	{r7, pc}
   2a666:	46c0      	nop			; (mov r8, r8)
   2a668:	20000120 	.word	0x20000120

0002a66c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2a66c:	b580      	push	{r7, lr}
   2a66e:	b084      	sub	sp, #16
   2a670:	af00      	add	r7, sp, #0
   2a672:	60f8      	str	r0, [r7, #12]
   2a674:	60b9      	str	r1, [r7, #8]
   2a676:	1dfb      	adds	r3, r7, #7
   2a678:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2a67a:	1dfb      	adds	r3, r7, #7
   2a67c:	781b      	ldrb	r3, [r3, #0]
   2a67e:	68fa      	ldr	r2, [r7, #12]
   2a680:	009b      	lsls	r3, r3, #2
   2a682:	18d3      	adds	r3, r2, r3
   2a684:	3304      	adds	r3, #4
   2a686:	68ba      	ldr	r2, [r7, #8]
   2a688:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2a68a:	68fb      	ldr	r3, [r7, #12]
   2a68c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2a68e:	1dfb      	adds	r3, r7, #7
   2a690:	7819      	ldrb	r1, [r3, #0]
   2a692:	4b05      	ldr	r3, [pc, #20]	; (2a6a8 <tcc_register_callback+0x3c>)
   2a694:	0089      	lsls	r1, r1, #2
   2a696:	58cb      	ldr	r3, [r1, r3]
   2a698:	431a      	orrs	r2, r3
   2a69a:	68fb      	ldr	r3, [r7, #12]
   2a69c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2a69e:	2300      	movs	r3, #0
}
   2a6a0:	0018      	movs	r0, r3
   2a6a2:	46bd      	mov	sp, r7
   2a6a4:	b004      	add	sp, #16
   2a6a6:	bd80      	pop	{r7, pc}
   2a6a8:	00038e68 	.word	0x00038e68

0002a6ac <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2a6ac:	b580      	push	{r7, lr}
   2a6ae:	b082      	sub	sp, #8
   2a6b0:	af00      	add	r7, sp, #0
   2a6b2:	6078      	str	r0, [r7, #4]
   2a6b4:	000a      	movs	r2, r1
   2a6b6:	1cfb      	adds	r3, r7, #3
   2a6b8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2a6ba:	687b      	ldr	r3, [r7, #4]
   2a6bc:	681b      	ldr	r3, [r3, #0]
   2a6be:	0018      	movs	r0, r3
   2a6c0:	4b0f      	ldr	r3, [pc, #60]	; (2a700 <tcc_enable_callback+0x54>)
   2a6c2:	4798      	blx	r3
   2a6c4:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2a6c6:	0018      	movs	r0, r3
   2a6c8:	4b0e      	ldr	r3, [pc, #56]	; (2a704 <tcc_enable_callback+0x58>)
   2a6ca:	4798      	blx	r3
   2a6cc:	0003      	movs	r3, r0
   2a6ce:	0018      	movs	r0, r3
   2a6d0:	4b0d      	ldr	r3, [pc, #52]	; (2a708 <tcc_enable_callback+0x5c>)
   2a6d2:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a6d4:	687b      	ldr	r3, [r7, #4]
   2a6d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a6d8:	1cfb      	adds	r3, r7, #3
   2a6da:	7819      	ldrb	r1, [r3, #0]
   2a6dc:	4b0b      	ldr	r3, [pc, #44]	; (2a70c <tcc_enable_callback+0x60>)
   2a6de:	0089      	lsls	r1, r1, #2
   2a6e0:	58cb      	ldr	r3, [r1, r3]
   2a6e2:	431a      	orrs	r2, r3
   2a6e4:	687b      	ldr	r3, [r7, #4]
   2a6e6:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a6e8:	687b      	ldr	r3, [r7, #4]
   2a6ea:	681b      	ldr	r3, [r3, #0]
   2a6ec:	1cfa      	adds	r2, r7, #3
   2a6ee:	7811      	ldrb	r1, [r2, #0]
   2a6f0:	4a06      	ldr	r2, [pc, #24]	; (2a70c <tcc_enable_callback+0x60>)
   2a6f2:	0089      	lsls	r1, r1, #2
   2a6f4:	588a      	ldr	r2, [r1, r2]
   2a6f6:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a6f8:	46c0      	nop			; (mov r8, r8)
   2a6fa:	46bd      	mov	sp, r7
   2a6fc:	b002      	add	sp, #8
   2a6fe:	bd80      	pop	{r7, pc}
   2a700:	00029bbd 	.word	0x00029bbd
   2a704:	0002a64d 	.word	0x0002a64d
   2a708:	0002a621 	.word	0x0002a621
   2a70c:	00038e68 	.word	0x00038e68

0002a710 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a710:	b580      	push	{r7, lr}
   2a712:	af00      	add	r7, sp, #0
   2a714:	2000      	movs	r0, #0
   2a716:	4b02      	ldr	r3, [pc, #8]	; (2a720 <TCC0_Handler+0x10>)
   2a718:	4798      	blx	r3
   2a71a:	46c0      	nop			; (mov r8, r8)
   2a71c:	46bd      	mov	sp, r7
   2a71e:	bd80      	pop	{r7, pc}
   2a720:	0002a74d 	.word	0x0002a74d

0002a724 <TCC1_Handler>:
   2a724:	b580      	push	{r7, lr}
   2a726:	af00      	add	r7, sp, #0
   2a728:	2001      	movs	r0, #1
   2a72a:	4b02      	ldr	r3, [pc, #8]	; (2a734 <TCC1_Handler+0x10>)
   2a72c:	4798      	blx	r3
   2a72e:	46c0      	nop			; (mov r8, r8)
   2a730:	46bd      	mov	sp, r7
   2a732:	bd80      	pop	{r7, pc}
   2a734:	0002a74d 	.word	0x0002a74d

0002a738 <TCC2_Handler>:
   2a738:	b580      	push	{r7, lr}
   2a73a:	af00      	add	r7, sp, #0
   2a73c:	2002      	movs	r0, #2
   2a73e:	4b02      	ldr	r3, [pc, #8]	; (2a748 <TCC2_Handler+0x10>)
   2a740:	4798      	blx	r3
   2a742:	46c0      	nop			; (mov r8, r8)
   2a744:	46bd      	mov	sp, r7
   2a746:	bd80      	pop	{r7, pc}
   2a748:	0002a74d 	.word	0x0002a74d

0002a74c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a74c:	b580      	push	{r7, lr}
   2a74e:	b086      	sub	sp, #24
   2a750:	af00      	add	r7, sp, #0
   2a752:	0002      	movs	r2, r0
   2a754:	1dfb      	adds	r3, r7, #7
   2a756:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a758:	1dfb      	adds	r3, r7, #7
   2a75a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a75c:	4b18      	ldr	r3, [pc, #96]	; (2a7c0 <_tcc_interrupt_handler+0x74>)
   2a75e:	0092      	lsls	r2, r2, #2
   2a760:	58d3      	ldr	r3, [r2, r3]
   2a762:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a764:	693b      	ldr	r3, [r7, #16]
   2a766:	681b      	ldr	r3, [r3, #0]
   2a768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a76a:	693b      	ldr	r3, [r7, #16]
   2a76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a76e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a770:	693b      	ldr	r3, [r7, #16]
   2a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a774:	4013      	ands	r3, r2
   2a776:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a778:	2300      	movs	r3, #0
   2a77a:	617b      	str	r3, [r7, #20]
   2a77c:	e019      	b.n	2a7b2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a77e:	4b11      	ldr	r3, [pc, #68]	; (2a7c4 <_tcc_interrupt_handler+0x78>)
   2a780:	697a      	ldr	r2, [r7, #20]
   2a782:	0092      	lsls	r2, r2, #2
   2a784:	58d3      	ldr	r3, [r2, r3]
   2a786:	68fa      	ldr	r2, [r7, #12]
   2a788:	4013      	ands	r3, r2
   2a78a:	d00f      	beq.n	2a7ac <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a78c:	693a      	ldr	r2, [r7, #16]
   2a78e:	697b      	ldr	r3, [r7, #20]
   2a790:	009b      	lsls	r3, r3, #2
   2a792:	18d3      	adds	r3, r2, r3
   2a794:	3304      	adds	r3, #4
   2a796:	681b      	ldr	r3, [r3, #0]
   2a798:	693a      	ldr	r2, [r7, #16]
   2a79a:	0010      	movs	r0, r2
   2a79c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a79e:	693b      	ldr	r3, [r7, #16]
   2a7a0:	681b      	ldr	r3, [r3, #0]
   2a7a2:	4a08      	ldr	r2, [pc, #32]	; (2a7c4 <_tcc_interrupt_handler+0x78>)
   2a7a4:	6979      	ldr	r1, [r7, #20]
   2a7a6:	0089      	lsls	r1, r1, #2
   2a7a8:	588a      	ldr	r2, [r1, r2]
   2a7aa:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a7ac:	697b      	ldr	r3, [r7, #20]
   2a7ae:	3301      	adds	r3, #1
   2a7b0:	617b      	str	r3, [r7, #20]
   2a7b2:	697b      	ldr	r3, [r7, #20]
   2a7b4:	2b0b      	cmp	r3, #11
   2a7b6:	dde2      	ble.n	2a77e <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a7b8:	46c0      	nop			; (mov r8, r8)
   2a7ba:	46bd      	mov	sp, r7
   2a7bc:	b006      	add	sp, #24
   2a7be:	bd80      	pop	{r7, pc}
   2a7c0:	20005a28 	.word	0x20005a28
   2a7c4:	00038e68 	.word	0x00038e68

0002a7c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a7c8:	b580      	push	{r7, lr}
   2a7ca:	b082      	sub	sp, #8
   2a7cc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a7ce:	4b2f      	ldr	r3, [pc, #188]	; (2a88c <Reset_Handler+0xc4>)
   2a7d0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a7d2:	4b2f      	ldr	r3, [pc, #188]	; (2a890 <Reset_Handler+0xc8>)
   2a7d4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a7d6:	687a      	ldr	r2, [r7, #4]
   2a7d8:	683b      	ldr	r3, [r7, #0]
   2a7da:	429a      	cmp	r2, r3
   2a7dc:	d00c      	beq.n	2a7f8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a7de:	e007      	b.n	2a7f0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a7e0:	683b      	ldr	r3, [r7, #0]
   2a7e2:	1d1a      	adds	r2, r3, #4
   2a7e4:	603a      	str	r2, [r7, #0]
   2a7e6:	687a      	ldr	r2, [r7, #4]
   2a7e8:	1d11      	adds	r1, r2, #4
   2a7ea:	6079      	str	r1, [r7, #4]
   2a7ec:	6812      	ldr	r2, [r2, #0]
   2a7ee:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a7f0:	683a      	ldr	r2, [r7, #0]
   2a7f2:	4b28      	ldr	r3, [pc, #160]	; (2a894 <Reset_Handler+0xcc>)
   2a7f4:	429a      	cmp	r2, r3
   2a7f6:	d3f3      	bcc.n	2a7e0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a7f8:	4b27      	ldr	r3, [pc, #156]	; (2a898 <Reset_Handler+0xd0>)
   2a7fa:	603b      	str	r3, [r7, #0]
   2a7fc:	e004      	b.n	2a808 <Reset_Handler+0x40>
                *pDest++ = 0;
   2a7fe:	683b      	ldr	r3, [r7, #0]
   2a800:	1d1a      	adds	r2, r3, #4
   2a802:	603a      	str	r2, [r7, #0]
   2a804:	2200      	movs	r2, #0
   2a806:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a808:	683a      	ldr	r2, [r7, #0]
   2a80a:	4b24      	ldr	r3, [pc, #144]	; (2a89c <Reset_Handler+0xd4>)
   2a80c:	429a      	cmp	r2, r3
   2a80e:	d3f6      	bcc.n	2a7fe <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a810:	4b23      	ldr	r3, [pc, #140]	; (2a8a0 <Reset_Handler+0xd8>)
   2a812:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a814:	4b23      	ldr	r3, [pc, #140]	; (2a8a4 <Reset_Handler+0xdc>)
   2a816:	687a      	ldr	r2, [r7, #4]
   2a818:	21ff      	movs	r1, #255	; 0xff
   2a81a:	438a      	bics	r2, r1
   2a81c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a81e:	4a22      	ldr	r2, [pc, #136]	; (2a8a8 <Reset_Handler+0xe0>)
   2a820:	2390      	movs	r3, #144	; 0x90
   2a822:	005b      	lsls	r3, r3, #1
   2a824:	2102      	movs	r1, #2
   2a826:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a828:	4a20      	ldr	r2, [pc, #128]	; (2a8ac <Reset_Handler+0xe4>)
   2a82a:	78d3      	ldrb	r3, [r2, #3]
   2a82c:	2103      	movs	r1, #3
   2a82e:	438b      	bics	r3, r1
   2a830:	1c19      	adds	r1, r3, #0
   2a832:	2302      	movs	r3, #2
   2a834:	430b      	orrs	r3, r1
   2a836:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a838:	4a1c      	ldr	r2, [pc, #112]	; (2a8ac <Reset_Handler+0xe4>)
   2a83a:	78d3      	ldrb	r3, [r2, #3]
   2a83c:	210c      	movs	r1, #12
   2a83e:	438b      	bics	r3, r1
   2a840:	1c19      	adds	r1, r3, #0
   2a842:	2308      	movs	r3, #8
   2a844:	430b      	orrs	r3, r1
   2a846:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a848:	4a19      	ldr	r2, [pc, #100]	; (2a8b0 <Reset_Handler+0xe8>)
   2a84a:	7b93      	ldrb	r3, [r2, #14]
   2a84c:	2130      	movs	r1, #48	; 0x30
   2a84e:	438b      	bics	r3, r1
   2a850:	1c19      	adds	r1, r3, #0
   2a852:	2320      	movs	r3, #32
   2a854:	430b      	orrs	r3, r1
   2a856:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a858:	4a15      	ldr	r2, [pc, #84]	; (2a8b0 <Reset_Handler+0xe8>)
   2a85a:	7b93      	ldrb	r3, [r2, #14]
   2a85c:	210c      	movs	r1, #12
   2a85e:	438b      	bics	r3, r1
   2a860:	1c19      	adds	r1, r3, #0
   2a862:	2308      	movs	r3, #8
   2a864:	430b      	orrs	r3, r1
   2a866:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a868:	4a11      	ldr	r2, [pc, #68]	; (2a8b0 <Reset_Handler+0xe8>)
   2a86a:	7b93      	ldrb	r3, [r2, #14]
   2a86c:	2103      	movs	r1, #3
   2a86e:	438b      	bics	r3, r1
   2a870:	1c19      	adds	r1, r3, #0
   2a872:	2302      	movs	r3, #2
   2a874:	430b      	orrs	r3, r1
   2a876:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a878:	4a0e      	ldr	r2, [pc, #56]	; (2a8b4 <Reset_Handler+0xec>)
   2a87a:	6853      	ldr	r3, [r2, #4]
   2a87c:	2180      	movs	r1, #128	; 0x80
   2a87e:	430b      	orrs	r3, r1
   2a880:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a882:	4b0d      	ldr	r3, [pc, #52]	; (2a8b8 <Reset_Handler+0xf0>)
   2a884:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a886:	4b0d      	ldr	r3, [pc, #52]	; (2a8bc <Reset_Handler+0xf4>)
   2a888:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a88a:	e7fe      	b.n	2a88a <Reset_Handler+0xc2>
   2a88c:	00039bac 	.word	0x00039bac
   2a890:	20000000 	.word	0x20000000
   2a894:	200002f8 	.word	0x200002f8
   2a898:	20000300 	.word	0x20000300
   2a89c:	20005a98 	.word	0x20005a98
   2a8a0:	00012000 	.word	0x00012000
   2a8a4:	e000ed00 	.word	0xe000ed00
   2a8a8:	41007000 	.word	0x41007000
   2a8ac:	41005000 	.word	0x41005000
   2a8b0:	41004800 	.word	0x41004800
   2a8b4:	41004000 	.word	0x41004000
   2a8b8:	00034271 	.word	0x00034271
   2a8bc:	00031ffd 	.word	0x00031ffd

0002a8c0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a8c0:	b580      	push	{r7, lr}
   2a8c2:	af00      	add	r7, sp, #0
  __asm volatile (
   2a8c4:	2004      	movs	r0, #4
   2a8c6:	4671      	mov	r1, lr
   2a8c8:	4208      	tst	r0, r1
   2a8ca:	d002      	beq.n	2a8d2 <_MSP>
   2a8cc:	f3ef 8009 	mrs	r0, PSP
   2a8d0:	e001      	b.n	2a8d6 <_HALT>

0002a8d2 <_MSP>:
   2a8d2:	f3ef 8008 	mrs	r0, MSP

0002a8d6 <_HALT>:
   2a8d6:	6941      	ldr	r1, [r0, #20]
   2a8d8:	e004      	b.n	2a8e4 <HardFault_HandlerC>
   2a8da:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2a8dc:	46c0      	nop			; (mov r8, r8)
   2a8de:	46bd      	mov	sp, r7
   2a8e0:	bd80      	pop	{r7, pc}
	...

0002a8e4 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2a8e4:	b580      	push	{r7, lr}
   2a8e6:	b090      	sub	sp, #64	; 0x40
   2a8e8:	af00      	add	r7, sp, #0
   2a8ea:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2a8ec:	687b      	ldr	r3, [r7, #4]
   2a8ee:	681b      	ldr	r3, [r3, #0]
   2a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2a8f2:	687b      	ldr	r3, [r7, #4]
   2a8f4:	685b      	ldr	r3, [r3, #4]
   2a8f6:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2a8f8:	687b      	ldr	r3, [r7, #4]
   2a8fa:	689b      	ldr	r3, [r3, #8]
   2a8fc:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2a8fe:	687b      	ldr	r3, [r7, #4]
   2a900:	68db      	ldr	r3, [r3, #12]
   2a902:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2a904:	687b      	ldr	r3, [r7, #4]
   2a906:	691b      	ldr	r3, [r3, #16]
   2a908:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2a90a:	687b      	ldr	r3, [r7, #4]
   2a90c:	695b      	ldr	r3, [r3, #20]
   2a90e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2a910:	687b      	ldr	r3, [r7, #4]
   2a912:	699b      	ldr	r3, [r3, #24]
   2a914:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2a916:	687b      	ldr	r3, [r7, #4]
   2a918:	69db      	ldr	r3, [r3, #28]
   2a91a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2a91c:	4b0b      	ldr	r3, [pc, #44]	; (2a94c <HardFault_HandlerC+0x68>)
   2a91e:	681b      	ldr	r3, [r3, #0]
   2a920:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2a922:	4b0b      	ldr	r3, [pc, #44]	; (2a950 <HardFault_HandlerC+0x6c>)
   2a924:	681b      	ldr	r3, [r3, #0]
   2a926:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2a928:	4b0a      	ldr	r3, [pc, #40]	; (2a954 <HardFault_HandlerC+0x70>)
   2a92a:	681b      	ldr	r3, [r3, #0]
   2a92c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2a92e:	4b0a      	ldr	r3, [pc, #40]	; (2a958 <HardFault_HandlerC+0x74>)
   2a930:	681b      	ldr	r3, [r3, #0]
   2a932:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2a934:	4b09      	ldr	r3, [pc, #36]	; (2a95c <HardFault_HandlerC+0x78>)
   2a936:	681b      	ldr	r3, [r3, #0]
   2a938:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2a93a:	4b09      	ldr	r3, [pc, #36]	; (2a960 <HardFault_HandlerC+0x7c>)
   2a93c:	681b      	ldr	r3, [r3, #0]
   2a93e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2a940:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2a942:	46c0      	nop			; (mov r8, r8)
   2a944:	46bd      	mov	sp, r7
   2a946:	b010      	add	sp, #64	; 0x40
   2a948:	bd80      	pop	{r7, pc}
   2a94a:	46c0      	nop			; (mov r8, r8)
   2a94c:	e000ed28 	.word	0xe000ed28
   2a950:	e000ed2c 	.word	0xe000ed2c
   2a954:	e000ed30 	.word	0xe000ed30
   2a958:	e000ed3c 	.word	0xe000ed3c
   2a95c:	e000ed34 	.word	0xe000ed34
   2a960:	e000ed38 	.word	0xe000ed38

0002a964 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2a964:	b580      	push	{r7, lr}
   2a966:	b086      	sub	sp, #24
   2a968:	af00      	add	r7, sp, #0
   2a96a:	60f8      	str	r0, [r7, #12]
   2a96c:	60b9      	str	r1, [r7, #8]
   2a96e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a970:	2300      	movs	r3, #0
   2a972:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2a974:	68fb      	ldr	r3, [r7, #12]
   2a976:	2b00      	cmp	r3, #0
   2a978:	d012      	beq.n	2a9a0 <_read+0x3c>
		return -1;
   2a97a:	2301      	movs	r3, #1
   2a97c:	425b      	negs	r3, r3
   2a97e:	e013      	b.n	2a9a8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2a980:	4b0b      	ldr	r3, [pc, #44]	; (2a9b0 <_read+0x4c>)
   2a982:	681a      	ldr	r2, [r3, #0]
   2a984:	4b0b      	ldr	r3, [pc, #44]	; (2a9b4 <_read+0x50>)
   2a986:	681b      	ldr	r3, [r3, #0]
   2a988:	68b9      	ldr	r1, [r7, #8]
   2a98a:	0018      	movs	r0, r3
   2a98c:	4790      	blx	r2
		ptr++;
   2a98e:	68bb      	ldr	r3, [r7, #8]
   2a990:	3301      	adds	r3, #1
   2a992:	60bb      	str	r3, [r7, #8]
		nChars++;
   2a994:	697b      	ldr	r3, [r7, #20]
   2a996:	3301      	adds	r3, #1
   2a998:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2a99a:	687b      	ldr	r3, [r7, #4]
   2a99c:	3b01      	subs	r3, #1
   2a99e:	607b      	str	r3, [r7, #4]
   2a9a0:	687b      	ldr	r3, [r7, #4]
   2a9a2:	2b00      	cmp	r3, #0
   2a9a4:	dcec      	bgt.n	2a980 <_read+0x1c>
	}
	return nChars;
   2a9a6:	697b      	ldr	r3, [r7, #20]
}
   2a9a8:	0018      	movs	r0, r3
   2a9aa:	46bd      	mov	sp, r7
   2a9ac:	b006      	add	sp, #24
   2a9ae:	bd80      	pop	{r7, pc}
   2a9b0:	20005a34 	.word	0x20005a34
   2a9b4:	20005a3c 	.word	0x20005a3c

0002a9b8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2a9b8:	b580      	push	{r7, lr}
   2a9ba:	b086      	sub	sp, #24
   2a9bc:	af00      	add	r7, sp, #0
   2a9be:	60f8      	str	r0, [r7, #12]
   2a9c0:	60b9      	str	r1, [r7, #8]
   2a9c2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a9c4:	2300      	movs	r3, #0
   2a9c6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2a9c8:	68fb      	ldr	r3, [r7, #12]
   2a9ca:	2b01      	cmp	r3, #1
   2a9cc:	d01d      	beq.n	2aa0a <_write+0x52>
   2a9ce:	68fb      	ldr	r3, [r7, #12]
   2a9d0:	2b02      	cmp	r3, #2
   2a9d2:	d01a      	beq.n	2aa0a <_write+0x52>
   2a9d4:	68fb      	ldr	r3, [r7, #12]
   2a9d6:	2b03      	cmp	r3, #3
   2a9d8:	d017      	beq.n	2aa0a <_write+0x52>
		return -1;
   2a9da:	2301      	movs	r3, #1
   2a9dc:	425b      	negs	r3, r3
   2a9de:	e018      	b.n	2aa12 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2a9e0:	4b0e      	ldr	r3, [pc, #56]	; (2aa1c <_write+0x64>)
   2a9e2:	681a      	ldr	r2, [r3, #0]
   2a9e4:	4b0e      	ldr	r3, [pc, #56]	; (2aa20 <_write+0x68>)
   2a9e6:	6818      	ldr	r0, [r3, #0]
   2a9e8:	68bb      	ldr	r3, [r7, #8]
   2a9ea:	1c59      	adds	r1, r3, #1
   2a9ec:	60b9      	str	r1, [r7, #8]
   2a9ee:	781b      	ldrb	r3, [r3, #0]
   2a9f0:	0019      	movs	r1, r3
   2a9f2:	4790      	blx	r2
   2a9f4:	1e03      	subs	r3, r0, #0
   2a9f6:	da02      	bge.n	2a9fe <_write+0x46>
			return -1;
   2a9f8:	2301      	movs	r3, #1
   2a9fa:	425b      	negs	r3, r3
   2a9fc:	e009      	b.n	2aa12 <_write+0x5a>
		}
		++nChars;
   2a9fe:	697b      	ldr	r3, [r7, #20]
   2aa00:	3301      	adds	r3, #1
   2aa02:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2aa04:	687b      	ldr	r3, [r7, #4]
   2aa06:	3b01      	subs	r3, #1
   2aa08:	607b      	str	r3, [r7, #4]
   2aa0a:	687b      	ldr	r3, [r7, #4]
   2aa0c:	2b00      	cmp	r3, #0
   2aa0e:	d1e7      	bne.n	2a9e0 <_write+0x28>
	}
	return nChars;
   2aa10:	697b      	ldr	r3, [r7, #20]
}
   2aa12:	0018      	movs	r0, r3
   2aa14:	46bd      	mov	sp, r7
   2aa16:	b006      	add	sp, #24
   2aa18:	bd80      	pop	{r7, pc}
   2aa1a:	46c0      	nop			; (mov r8, r8)
   2aa1c:	20005a38 	.word	0x20005a38
   2aa20:	20005a3c 	.word	0x20005a3c

0002aa24 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2aa24:	b580      	push	{r7, lr}
   2aa26:	b084      	sub	sp, #16
   2aa28:	af00      	add	r7, sp, #0
   2aa2a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2aa2c:	4b0a      	ldr	r3, [pc, #40]	; (2aa58 <_sbrk+0x34>)
   2aa2e:	681b      	ldr	r3, [r3, #0]
   2aa30:	2b00      	cmp	r3, #0
   2aa32:	d102      	bne.n	2aa3a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2aa34:	4b08      	ldr	r3, [pc, #32]	; (2aa58 <_sbrk+0x34>)
   2aa36:	4a09      	ldr	r2, [pc, #36]	; (2aa5c <_sbrk+0x38>)
   2aa38:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2aa3a:	4b07      	ldr	r3, [pc, #28]	; (2aa58 <_sbrk+0x34>)
   2aa3c:	681b      	ldr	r3, [r3, #0]
   2aa3e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2aa40:	4b05      	ldr	r3, [pc, #20]	; (2aa58 <_sbrk+0x34>)
   2aa42:	681a      	ldr	r2, [r3, #0]
   2aa44:	687b      	ldr	r3, [r7, #4]
   2aa46:	18d2      	adds	r2, r2, r3
   2aa48:	4b03      	ldr	r3, [pc, #12]	; (2aa58 <_sbrk+0x34>)
   2aa4a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2aa4c:	68fb      	ldr	r3, [r7, #12]
}
   2aa4e:	0018      	movs	r0, r3
   2aa50:	46bd      	mov	sp, r7
   2aa52:	b004      	add	sp, #16
   2aa54:	bd80      	pop	{r7, pc}
   2aa56:	46c0      	nop			; (mov r8, r8)
   2aa58:	20004170 	.word	0x20004170
   2aa5c:	20007a98 	.word	0x20007a98

0002aa60 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2aa60:	b580      	push	{r7, lr}
   2aa62:	b082      	sub	sp, #8
   2aa64:	af00      	add	r7, sp, #0
   2aa66:	6078      	str	r0, [r7, #4]
	return -1;
   2aa68:	2301      	movs	r3, #1
   2aa6a:	425b      	negs	r3, r3
}
   2aa6c:	0018      	movs	r0, r3
   2aa6e:	46bd      	mov	sp, r7
   2aa70:	b002      	add	sp, #8
   2aa72:	bd80      	pop	{r7, pc}

0002aa74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2aa74:	b580      	push	{r7, lr}
   2aa76:	b082      	sub	sp, #8
   2aa78:	af00      	add	r7, sp, #0
   2aa7a:	6078      	str	r0, [r7, #4]
   2aa7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2aa7e:	683b      	ldr	r3, [r7, #0]
   2aa80:	2280      	movs	r2, #128	; 0x80
   2aa82:	0192      	lsls	r2, r2, #6
   2aa84:	605a      	str	r2, [r3, #4]

	return 0;
   2aa86:	2300      	movs	r3, #0
}
   2aa88:	0018      	movs	r0, r3
   2aa8a:	46bd      	mov	sp, r7
   2aa8c:	b002      	add	sp, #8
   2aa8e:	bd80      	pop	{r7, pc}

0002aa90 <_isatty>:

extern int _isatty(int file)
{
   2aa90:	b580      	push	{r7, lr}
   2aa92:	b082      	sub	sp, #8
   2aa94:	af00      	add	r7, sp, #0
   2aa96:	6078      	str	r0, [r7, #4]
	return 1;
   2aa98:	2301      	movs	r3, #1
}
   2aa9a:	0018      	movs	r0, r3
   2aa9c:	46bd      	mov	sp, r7
   2aa9e:	b002      	add	sp, #8
   2aaa0:	bd80      	pop	{r7, pc}

0002aaa2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2aaa2:	b580      	push	{r7, lr}
   2aaa4:	b084      	sub	sp, #16
   2aaa6:	af00      	add	r7, sp, #0
   2aaa8:	60f8      	str	r0, [r7, #12]
   2aaaa:	60b9      	str	r1, [r7, #8]
   2aaac:	607a      	str	r2, [r7, #4]
	return 0;
   2aaae:	2300      	movs	r3, #0
}
   2aab0:	0018      	movs	r0, r3
   2aab2:	46bd      	mov	sp, r7
   2aab4:	b004      	add	sp, #16
   2aab6:	bd80      	pop	{r7, pc}

0002aab8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2aab8:	b580      	push	{r7, lr}
   2aaba:	b082      	sub	sp, #8
   2aabc:	af00      	add	r7, sp, #0
   2aabe:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2aac0:	687b      	ldr	r3, [r7, #4]
   2aac2:	2200      	movs	r2, #0
   2aac4:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2aac6:	687b      	ldr	r3, [r7, #4]
   2aac8:	2200      	movs	r2, #0
   2aaca:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2aacc:	687b      	ldr	r3, [r7, #4]
   2aace:	2200      	movs	r2, #0
   2aad0:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2aad2:	687b      	ldr	r3, [r7, #4]
   2aad4:	2200      	movs	r2, #0
   2aad6:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2aad8:	687b      	ldr	r3, [r7, #4]
   2aada:	2201      	movs	r2, #1
   2aadc:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2aade:	687b      	ldr	r3, [r7, #4]
   2aae0:	2201      	movs	r2, #1
   2aae2:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2aae4:	687b      	ldr	r3, [r7, #4]
   2aae6:	22fa      	movs	r2, #250	; 0xfa
   2aae8:	00d2      	lsls	r2, r2, #3
   2aaea:	80da      	strh	r2, [r3, #6]
}
   2aaec:	46c0      	nop			; (mov r8, r8)
   2aaee:	46bd      	mov	sp, r7
   2aaf0:	b002      	add	sp, #8
   2aaf2:	bd80      	pop	{r7, pc}

0002aaf4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2aaf4:	b580      	push	{r7, lr}
   2aaf6:	b086      	sub	sp, #24
   2aaf8:	af00      	add	r7, sp, #0
   2aafa:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2aafc:	230c      	movs	r3, #12
   2aafe:	18fb      	adds	r3, r7, r3
   2ab00:	0018      	movs	r0, r3
   2ab02:	4b23      	ldr	r3, [pc, #140]	; (2ab90 <rtc_calendar_get_config_defaults+0x9c>)
   2ab04:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2ab06:	687b      	ldr	r3, [r7, #4]
   2ab08:	22a0      	movs	r2, #160	; 0xa0
   2ab0a:	0112      	lsls	r2, r2, #4
   2ab0c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2ab0e:	687b      	ldr	r3, [r7, #4]
   2ab10:	2200      	movs	r2, #0
   2ab12:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2ab14:	687b      	ldr	r3, [r7, #4]
   2ab16:	2200      	movs	r2, #0
   2ab18:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2ab1a:	687b      	ldr	r3, [r7, #4]
   2ab1c:	2200      	movs	r2, #0
   2ab1e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2ab20:	687b      	ldr	r3, [r7, #4]
   2ab22:	22fa      	movs	r2, #250	; 0xfa
   2ab24:	00d2      	lsls	r2, r2, #3
   2ab26:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2ab28:	2317      	movs	r3, #23
   2ab2a:	18fb      	adds	r3, r7, r3
   2ab2c:	2200      	movs	r2, #0
   2ab2e:	701a      	strb	r2, [r3, #0]
   2ab30:	e025      	b.n	2ab7e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2ab32:	2317      	movs	r3, #23
   2ab34:	18fb      	adds	r3, r7, r3
   2ab36:	781a      	ldrb	r2, [r3, #0]
   2ab38:	6879      	ldr	r1, [r7, #4]
   2ab3a:	2008      	movs	r0, #8
   2ab3c:	0013      	movs	r3, r2
   2ab3e:	009b      	lsls	r3, r3, #2
   2ab40:	189b      	adds	r3, r3, r2
   2ab42:	005b      	lsls	r3, r3, #1
   2ab44:	18cb      	adds	r3, r1, r3
   2ab46:	181a      	adds	r2, r3, r0
   2ab48:	230c      	movs	r3, #12
   2ab4a:	18fb      	adds	r3, r7, r3
   2ab4c:	0010      	movs	r0, r2
   2ab4e:	0019      	movs	r1, r3
   2ab50:	2308      	movs	r3, #8
   2ab52:	001a      	movs	r2, r3
   2ab54:	4b0f      	ldr	r3, [pc, #60]	; (2ab94 <rtc_calendar_get_config_defaults+0xa0>)
   2ab56:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2ab58:	2317      	movs	r3, #23
   2ab5a:	18fb      	adds	r3, r7, r3
   2ab5c:	781a      	ldrb	r2, [r3, #0]
   2ab5e:	6879      	ldr	r1, [r7, #4]
   2ab60:	0013      	movs	r3, r2
   2ab62:	009b      	lsls	r3, r3, #2
   2ab64:	189b      	adds	r3, r3, r2
   2ab66:	005b      	lsls	r3, r3, #1
   2ab68:	18cb      	adds	r3, r1, r3
   2ab6a:	3310      	adds	r3, #16
   2ab6c:	2206      	movs	r2, #6
   2ab6e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2ab70:	2317      	movs	r3, #23
   2ab72:	18fb      	adds	r3, r7, r3
   2ab74:	781a      	ldrb	r2, [r3, #0]
   2ab76:	2317      	movs	r3, #23
   2ab78:	18fb      	adds	r3, r7, r3
   2ab7a:	3201      	adds	r2, #1
   2ab7c:	701a      	strb	r2, [r3, #0]
   2ab7e:	2317      	movs	r3, #23
   2ab80:	18fb      	adds	r3, r7, r3
   2ab82:	781b      	ldrb	r3, [r3, #0]
   2ab84:	2b00      	cmp	r3, #0
   2ab86:	d0d4      	beq.n	2ab32 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2ab88:	46c0      	nop			; (mov r8, r8)
   2ab8a:	46bd      	mov	sp, r7
   2ab8c:	b006      	add	sp, #24
   2ab8e:	bd80      	pop	{r7, pc}
   2ab90:	0002aab9 	.word	0x0002aab9
   2ab94:	000342e1 	.word	0x000342e1

0002ab98 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2ab98:	b580      	push	{r7, lr}
   2ab9a:	b088      	sub	sp, #32
   2ab9c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2ab9e:	230c      	movs	r3, #12
   2aba0:	18fb      	adds	r3, r7, r3
   2aba2:	0018      	movs	r0, r3
   2aba4:	4b1a      	ldr	r3, [pc, #104]	; (2ac10 <configure_rtc_calendar+0x78>)
   2aba6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2aba8:	1d3b      	adds	r3, r7, #4
   2abaa:	0018      	movs	r0, r3
   2abac:	4b19      	ldr	r3, [pc, #100]	; (2ac14 <configure_rtc_calendar+0x7c>)
   2abae:	4798      	blx	r3
	init_time.year   = 2014;
   2abb0:	1d3b      	adds	r3, r7, #4
   2abb2:	4a19      	ldr	r2, [pc, #100]	; (2ac18 <configure_rtc_calendar+0x80>)
   2abb4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2abb6:	1d3b      	adds	r3, r7, #4
   2abb8:	2201      	movs	r2, #1
   2abba:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2abbc:	1d3b      	adds	r3, r7, #4
   2abbe:	2201      	movs	r2, #1
   2abc0:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2abc2:	1d3b      	adds	r3, r7, #4
   2abc4:	2200      	movs	r2, #0
   2abc6:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2abc8:	1d3b      	adds	r3, r7, #4
   2abca:	2200      	movs	r2, #0
   2abcc:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2abce:	1d3b      	adds	r3, r7, #4
   2abd0:	2204      	movs	r2, #4
   2abd2:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2abd4:	230c      	movs	r3, #12
   2abd6:	18fb      	adds	r3, r7, r3
   2abd8:	2201      	movs	r2, #1
   2abda:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2abdc:	230c      	movs	r3, #12
   2abde:	18fb      	adds	r3, r7, r3
   2abe0:	1d3a      	adds	r2, r7, #4
   2abe2:	3308      	adds	r3, #8
   2abe4:	ca03      	ldmia	r2!, {r0, r1}
   2abe6:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2abe8:	230c      	movs	r3, #12
   2abea:	18fb      	adds	r3, r7, r3
   2abec:	2206      	movs	r2, #6
   2abee:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2abf0:	230c      	movs	r3, #12
   2abf2:	18fa      	adds	r2, r7, r3
   2abf4:	4909      	ldr	r1, [pc, #36]	; (2ac1c <configure_rtc_calendar+0x84>)
   2abf6:	4b0a      	ldr	r3, [pc, #40]	; (2ac20 <configure_rtc_calendar+0x88>)
   2abf8:	0018      	movs	r0, r3
   2abfa:	4b0a      	ldr	r3, [pc, #40]	; (2ac24 <configure_rtc_calendar+0x8c>)
   2abfc:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2abfe:	4b08      	ldr	r3, [pc, #32]	; (2ac20 <configure_rtc_calendar+0x88>)
   2ac00:	0018      	movs	r0, r3
   2ac02:	4b09      	ldr	r3, [pc, #36]	; (2ac28 <configure_rtc_calendar+0x90>)
   2ac04:	4798      	blx	r3
}
   2ac06:	46c0      	nop			; (mov r8, r8)
   2ac08:	46bd      	mov	sp, r7
   2ac0a:	b008      	add	sp, #32
   2ac0c:	bd80      	pop	{r7, pc}
   2ac0e:	46c0      	nop			; (mov r8, r8)
   2ac10:	0002aaf5 	.word	0x0002aaf5
   2ac14:	0002aab9 	.word	0x0002aab9
   2ac18:	000007de 	.word	0x000007de
   2ac1c:	40001400 	.word	0x40001400
   2ac20:	20005a40 	.word	0x20005a40
   2ac24:	000266d5 	.word	0x000266d5
   2ac28:	00026401 	.word	0x00026401

0002ac2c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2ac2c:	b590      	push	{r4, r7, lr}
   2ac2e:	b085      	sub	sp, #20
   2ac30:	af00      	add	r7, sp, #0
   2ac32:	0002      	movs	r2, r0
   2ac34:	1dfb      	adds	r3, r7, #7
   2ac36:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2ac38:	4b1a      	ldr	r3, [pc, #104]	; (2aca4 <disk_initialize+0x78>)
   2ac3a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2ac3c:	1dfb      	adds	r3, r7, #7
   2ac3e:	781b      	ldrb	r3, [r3, #0]
   2ac40:	2b01      	cmp	r3, #1
   2ac42:	d901      	bls.n	2ac48 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2ac44:	2301      	movs	r3, #1
   2ac46:	e029      	b.n	2ac9c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2ac48:	2300      	movs	r3, #0
   2ac4a:	60fb      	str	r3, [r7, #12]
   2ac4c:	e010      	b.n	2ac70 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2ac4e:	230b      	movs	r3, #11
   2ac50:	18fc      	adds	r4, r7, r3
   2ac52:	1dfb      	adds	r3, r7, #7
   2ac54:	781b      	ldrb	r3, [r3, #0]
   2ac56:	0018      	movs	r0, r3
   2ac58:	4b13      	ldr	r3, [pc, #76]	; (2aca8 <disk_initialize+0x7c>)
   2ac5a:	4798      	blx	r3
   2ac5c:	0003      	movs	r3, r0
   2ac5e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2ac60:	230b      	movs	r3, #11
   2ac62:	18fb      	adds	r3, r7, r3
   2ac64:	781b      	ldrb	r3, [r3, #0]
   2ac66:	2b03      	cmp	r3, #3
   2ac68:	d106      	bne.n	2ac78 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2ac6a:	68fb      	ldr	r3, [r7, #12]
   2ac6c:	3301      	adds	r3, #1
   2ac6e:	60fb      	str	r3, [r7, #12]
   2ac70:	68fb      	ldr	r3, [r7, #12]
   2ac72:	2b01      	cmp	r3, #1
   2ac74:	ddeb      	ble.n	2ac4e <disk_initialize+0x22>
   2ac76:	e000      	b.n	2ac7a <disk_initialize+0x4e>
			break;
   2ac78:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2ac7a:	230b      	movs	r3, #11
   2ac7c:	18fb      	adds	r3, r7, r3
   2ac7e:	781b      	ldrb	r3, [r3, #0]
   2ac80:	2b00      	cmp	r3, #0
   2ac82:	d001      	beq.n	2ac88 <disk_initialize+0x5c>
		return STA_NOINIT;
   2ac84:	2301      	movs	r3, #1
   2ac86:	e009      	b.n	2ac9c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2ac88:	1dfb      	adds	r3, r7, #7
   2ac8a:	781b      	ldrb	r3, [r3, #0]
   2ac8c:	0018      	movs	r0, r3
   2ac8e:	4b07      	ldr	r3, [pc, #28]	; (2acac <disk_initialize+0x80>)
   2ac90:	4798      	blx	r3
   2ac92:	1e03      	subs	r3, r0, #0
   2ac94:	d001      	beq.n	2ac9a <disk_initialize+0x6e>
		return STA_PROTECT;
   2ac96:	2304      	movs	r3, #4
   2ac98:	e000      	b.n	2ac9c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2ac9a:	2300      	movs	r3, #0
}
   2ac9c:	0018      	movs	r0, r3
   2ac9e:	46bd      	mov	sp, r7
   2aca0:	b005      	add	sp, #20
   2aca2:	bd90      	pop	{r4, r7, pc}
   2aca4:	0002ab99 	.word	0x0002ab99
   2aca8:	000258fd 	.word	0x000258fd
   2acac:	000259b5 	.word	0x000259b5

0002acb0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2acb0:	b580      	push	{r7, lr}
   2acb2:	b082      	sub	sp, #8
   2acb4:	af00      	add	r7, sp, #0
   2acb6:	0002      	movs	r2, r0
   2acb8:	1dfb      	adds	r3, r7, #7
   2acba:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2acbc:	1dfb      	adds	r3, r7, #7
   2acbe:	781b      	ldrb	r3, [r3, #0]
   2acc0:	0018      	movs	r0, r3
   2acc2:	4b08      	ldr	r3, [pc, #32]	; (2ace4 <disk_status+0x34>)
   2acc4:	4798      	blx	r3
   2acc6:	1e03      	subs	r3, r0, #0
   2acc8:	d002      	beq.n	2acd0 <disk_status+0x20>
   2acca:	2b02      	cmp	r3, #2
   2accc:	d002      	beq.n	2acd4 <disk_status+0x24>
   2acce:	e003      	b.n	2acd8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2acd0:	2300      	movs	r3, #0
   2acd2:	e002      	b.n	2acda <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2acd4:	2303      	movs	r3, #3
   2acd6:	e000      	b.n	2acda <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2acd8:	2301      	movs	r3, #1
	}
}
   2acda:	0018      	movs	r0, r3
   2acdc:	46bd      	mov	sp, r7
   2acde:	b002      	add	sp, #8
   2ace0:	bd80      	pop	{r7, pc}
   2ace2:	46c0      	nop			; (mov r8, r8)
   2ace4:	000258fd 	.word	0x000258fd

0002ace8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2ace8:	b590      	push	{r4, r7, lr}
   2acea:	b089      	sub	sp, #36	; 0x24
   2acec:	af00      	add	r7, sp, #0
   2acee:	60b9      	str	r1, [r7, #8]
   2acf0:	607a      	str	r2, [r7, #4]
   2acf2:	0019      	movs	r1, r3
   2acf4:	230f      	movs	r3, #15
   2acf6:	18fb      	adds	r3, r7, r3
   2acf8:	1c02      	adds	r2, r0, #0
   2acfa:	701a      	strb	r2, [r3, #0]
   2acfc:	230e      	movs	r3, #14
   2acfe:	18fb      	adds	r3, r7, r3
   2ad00:	1c0a      	adds	r2, r1, #0
   2ad02:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2ad04:	231b      	movs	r3, #27
   2ad06:	18fc      	adds	r4, r7, r3
   2ad08:	230f      	movs	r3, #15
   2ad0a:	18fb      	adds	r3, r7, r3
   2ad0c:	781b      	ldrb	r3, [r3, #0]
   2ad0e:	0018      	movs	r0, r3
   2ad10:	4b28      	ldr	r3, [pc, #160]	; (2adb4 <disk_read+0xcc>)
   2ad12:	4798      	blx	r3
   2ad14:	0003      	movs	r3, r0
   2ad16:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2ad18:	231b      	movs	r3, #27
   2ad1a:	18fb      	adds	r3, r7, r3
   2ad1c:	781b      	ldrb	r3, [r3, #0]
   2ad1e:	2b00      	cmp	r3, #0
   2ad20:	d101      	bne.n	2ad26 <disk_read+0x3e>
		return RES_ERROR;
   2ad22:	2301      	movs	r3, #1
   2ad24:	e042      	b.n	2adac <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2ad26:	2314      	movs	r3, #20
   2ad28:	18fa      	adds	r2, r7, r3
   2ad2a:	230f      	movs	r3, #15
   2ad2c:	18fb      	adds	r3, r7, r3
   2ad2e:	781b      	ldrb	r3, [r3, #0]
   2ad30:	0011      	movs	r1, r2
   2ad32:	0018      	movs	r0, r3
   2ad34:	4b20      	ldr	r3, [pc, #128]	; (2adb8 <disk_read+0xd0>)
   2ad36:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2ad38:	230e      	movs	r3, #14
   2ad3a:	18fb      	adds	r3, r7, r3
   2ad3c:	781b      	ldrb	r3, [r3, #0]
   2ad3e:	221b      	movs	r2, #27
   2ad40:	18ba      	adds	r2, r7, r2
   2ad42:	7812      	ldrb	r2, [r2, #0]
   2ad44:	4353      	muls	r3, r2
   2ad46:	001a      	movs	r2, r3
   2ad48:	687b      	ldr	r3, [r7, #4]
   2ad4a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2ad4c:	697b      	ldr	r3, [r7, #20]
   2ad4e:	3301      	adds	r3, #1
   2ad50:	211b      	movs	r1, #27
   2ad52:	1879      	adds	r1, r7, r1
   2ad54:	7809      	ldrb	r1, [r1, #0]
   2ad56:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2ad58:	429a      	cmp	r2, r3
   2ad5a:	d901      	bls.n	2ad60 <disk_read+0x78>
		return RES_PARERR;
   2ad5c:	2304      	movs	r3, #4
   2ad5e:	e025      	b.n	2adac <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2ad60:	2300      	movs	r3, #0
   2ad62:	61fb      	str	r3, [r7, #28]
   2ad64:	e01b      	b.n	2ad9e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2ad66:	231b      	movs	r3, #27
   2ad68:	18fb      	adds	r3, r7, r3
   2ad6a:	781b      	ldrb	r3, [r3, #0]
   2ad6c:	69fa      	ldr	r2, [r7, #28]
   2ad6e:	435a      	muls	r2, r3
   2ad70:	687b      	ldr	r3, [r7, #4]
   2ad72:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2ad74:	231b      	movs	r3, #27
   2ad76:	18fb      	adds	r3, r7, r3
   2ad78:	781b      	ldrb	r3, [r3, #0]
   2ad7a:	69fa      	ldr	r2, [r7, #28]
   2ad7c:	4353      	muls	r3, r2
   2ad7e:	025b      	lsls	r3, r3, #9
   2ad80:	68ba      	ldr	r2, [r7, #8]
   2ad82:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2ad84:	230f      	movs	r3, #15
   2ad86:	18fb      	adds	r3, r7, r3
   2ad88:	781b      	ldrb	r3, [r3, #0]
   2ad8a:	0018      	movs	r0, r3
   2ad8c:	4b0b      	ldr	r3, [pc, #44]	; (2adbc <disk_read+0xd4>)
   2ad8e:	4798      	blx	r3
   2ad90:	1e03      	subs	r3, r0, #0
   2ad92:	d001      	beq.n	2ad98 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2ad94:	2301      	movs	r3, #1
   2ad96:	e009      	b.n	2adac <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2ad98:	69fb      	ldr	r3, [r7, #28]
   2ad9a:	3301      	adds	r3, #1
   2ad9c:	61fb      	str	r3, [r7, #28]
   2ad9e:	230e      	movs	r3, #14
   2ada0:	18fb      	adds	r3, r7, r3
   2ada2:	781a      	ldrb	r2, [r3, #0]
   2ada4:	69fb      	ldr	r3, [r7, #28]
   2ada6:	429a      	cmp	r2, r3
   2ada8:	d8dd      	bhi.n	2ad66 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2adaa:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2adac:	0018      	movs	r0, r3
   2adae:	46bd      	mov	sp, r7
   2adb0:	b009      	add	sp, #36	; 0x24
   2adb2:	bd90      	pop	{r4, r7, pc}
   2adb4:	00025989 	.word	0x00025989
   2adb8:	0002593d 	.word	0x0002593d
   2adbc:	000259fd 	.word	0x000259fd

0002adc0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2adc0:	b590      	push	{r4, r7, lr}
   2adc2:	b089      	sub	sp, #36	; 0x24
   2adc4:	af00      	add	r7, sp, #0
   2adc6:	60b9      	str	r1, [r7, #8]
   2adc8:	607a      	str	r2, [r7, #4]
   2adca:	0019      	movs	r1, r3
   2adcc:	230f      	movs	r3, #15
   2adce:	18fb      	adds	r3, r7, r3
   2add0:	1c02      	adds	r2, r0, #0
   2add2:	701a      	strb	r2, [r3, #0]
   2add4:	230e      	movs	r3, #14
   2add6:	18fb      	adds	r3, r7, r3
   2add8:	1c0a      	adds	r2, r1, #0
   2adda:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2addc:	231b      	movs	r3, #27
   2adde:	18fc      	adds	r4, r7, r3
   2ade0:	230f      	movs	r3, #15
   2ade2:	18fb      	adds	r3, r7, r3
   2ade4:	781b      	ldrb	r3, [r3, #0]
   2ade6:	0018      	movs	r0, r3
   2ade8:	4b28      	ldr	r3, [pc, #160]	; (2ae8c <disk_write+0xcc>)
   2adea:	4798      	blx	r3
   2adec:	0003      	movs	r3, r0
   2adee:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2adf0:	231b      	movs	r3, #27
   2adf2:	18fb      	adds	r3, r7, r3
   2adf4:	781b      	ldrb	r3, [r3, #0]
   2adf6:	2b00      	cmp	r3, #0
   2adf8:	d101      	bne.n	2adfe <disk_write+0x3e>
		return RES_ERROR;
   2adfa:	2301      	movs	r3, #1
   2adfc:	e042      	b.n	2ae84 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2adfe:	2314      	movs	r3, #20
   2ae00:	18fa      	adds	r2, r7, r3
   2ae02:	230f      	movs	r3, #15
   2ae04:	18fb      	adds	r3, r7, r3
   2ae06:	781b      	ldrb	r3, [r3, #0]
   2ae08:	0011      	movs	r1, r2
   2ae0a:	0018      	movs	r0, r3
   2ae0c:	4b20      	ldr	r3, [pc, #128]	; (2ae90 <disk_write+0xd0>)
   2ae0e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2ae10:	230e      	movs	r3, #14
   2ae12:	18fb      	adds	r3, r7, r3
   2ae14:	781b      	ldrb	r3, [r3, #0]
   2ae16:	221b      	movs	r2, #27
   2ae18:	18ba      	adds	r2, r7, r2
   2ae1a:	7812      	ldrb	r2, [r2, #0]
   2ae1c:	4353      	muls	r3, r2
   2ae1e:	001a      	movs	r2, r3
   2ae20:	687b      	ldr	r3, [r7, #4]
   2ae22:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2ae24:	697b      	ldr	r3, [r7, #20]
   2ae26:	3301      	adds	r3, #1
   2ae28:	211b      	movs	r1, #27
   2ae2a:	1879      	adds	r1, r7, r1
   2ae2c:	7809      	ldrb	r1, [r1, #0]
   2ae2e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2ae30:	429a      	cmp	r2, r3
   2ae32:	d901      	bls.n	2ae38 <disk_write+0x78>
		return RES_PARERR;
   2ae34:	2304      	movs	r3, #4
   2ae36:	e025      	b.n	2ae84 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2ae38:	2300      	movs	r3, #0
   2ae3a:	61fb      	str	r3, [r7, #28]
   2ae3c:	e01b      	b.n	2ae76 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2ae3e:	231b      	movs	r3, #27
   2ae40:	18fb      	adds	r3, r7, r3
   2ae42:	781b      	ldrb	r3, [r3, #0]
   2ae44:	69fa      	ldr	r2, [r7, #28]
   2ae46:	435a      	muls	r2, r3
   2ae48:	687b      	ldr	r3, [r7, #4]
   2ae4a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2ae4c:	231b      	movs	r3, #27
   2ae4e:	18fb      	adds	r3, r7, r3
   2ae50:	781b      	ldrb	r3, [r3, #0]
   2ae52:	69fa      	ldr	r2, [r7, #28]
   2ae54:	4353      	muls	r3, r2
   2ae56:	025b      	lsls	r3, r3, #9
   2ae58:	68ba      	ldr	r2, [r7, #8]
   2ae5a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2ae5c:	230f      	movs	r3, #15
   2ae5e:	18fb      	adds	r3, r7, r3
   2ae60:	781b      	ldrb	r3, [r3, #0]
   2ae62:	0018      	movs	r0, r3
   2ae64:	4b0b      	ldr	r3, [pc, #44]	; (2ae94 <disk_write+0xd4>)
   2ae66:	4798      	blx	r3
   2ae68:	1e03      	subs	r3, r0, #0
   2ae6a:	d001      	beq.n	2ae70 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2ae6c:	2301      	movs	r3, #1
   2ae6e:	e009      	b.n	2ae84 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2ae70:	69fb      	ldr	r3, [r7, #28]
   2ae72:	3301      	adds	r3, #1
   2ae74:	61fb      	str	r3, [r7, #28]
   2ae76:	230e      	movs	r3, #14
   2ae78:	18fb      	adds	r3, r7, r3
   2ae7a:	781a      	ldrb	r2, [r3, #0]
   2ae7c:	69fb      	ldr	r3, [r7, #28]
   2ae7e:	429a      	cmp	r2, r3
   2ae80:	d8dd      	bhi.n	2ae3e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2ae82:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2ae84:	0018      	movs	r0, r3
   2ae86:	46bd      	mov	sp, r7
   2ae88:	b009      	add	sp, #36	; 0x24
   2ae8a:	bd90      	pop	{r4, r7, pc}
   2ae8c:	00025989 	.word	0x00025989
   2ae90:	0002593d 	.word	0x0002593d
   2ae94:	00025a51 	.word	0x00025a51

0002ae98 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2ae98:	b590      	push	{r4, r7, lr}
   2ae9a:	b085      	sub	sp, #20
   2ae9c:	af00      	add	r7, sp, #0
   2ae9e:	603a      	str	r2, [r7, #0]
   2aea0:	1dfb      	adds	r3, r7, #7
   2aea2:	1c02      	adds	r2, r0, #0
   2aea4:	701a      	strb	r2, [r3, #0]
   2aea6:	1dbb      	adds	r3, r7, #6
   2aea8:	1c0a      	adds	r2, r1, #0
   2aeaa:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2aeac:	230f      	movs	r3, #15
   2aeae:	18fb      	adds	r3, r7, r3
   2aeb0:	2204      	movs	r2, #4
   2aeb2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2aeb4:	1dbb      	adds	r3, r7, #6
   2aeb6:	781b      	ldrb	r3, [r3, #0]
   2aeb8:	2b01      	cmp	r3, #1
   2aeba:	d00f      	beq.n	2aedc <disk_ioctl+0x44>
   2aebc:	dc02      	bgt.n	2aec4 <disk_ioctl+0x2c>
   2aebe:	2b00      	cmp	r3, #0
   2aec0:	d044      	beq.n	2af4c <disk_ioctl+0xb4>
   2aec2:	e054      	b.n	2af6e <disk_ioctl+0xd6>
   2aec4:	2b02      	cmp	r3, #2
   2aec6:	d01a      	beq.n	2aefe <disk_ioctl+0x66>
   2aec8:	2b03      	cmp	r3, #3
   2aeca:	d150      	bne.n	2af6e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2aecc:	683b      	ldr	r3, [r7, #0]
   2aece:	2201      	movs	r2, #1
   2aed0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2aed2:	230f      	movs	r3, #15
   2aed4:	18fb      	adds	r3, r7, r3
   2aed6:	2200      	movs	r2, #0
   2aed8:	701a      	strb	r2, [r3, #0]
		break;
   2aeda:	e04c      	b.n	2af76 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2aedc:	2308      	movs	r3, #8
   2aede:	18fa      	adds	r2, r7, r3
   2aee0:	1dfb      	adds	r3, r7, #7
   2aee2:	781b      	ldrb	r3, [r3, #0]
   2aee4:	0011      	movs	r1, r2
   2aee6:	0018      	movs	r0, r3
   2aee8:	4b26      	ldr	r3, [pc, #152]	; (2af84 <disk_ioctl+0xec>)
   2aeea:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2aeec:	68bb      	ldr	r3, [r7, #8]
   2aeee:	1c5a      	adds	r2, r3, #1
   2aef0:	683b      	ldr	r3, [r7, #0]
   2aef2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2aef4:	230f      	movs	r3, #15
   2aef6:	18fb      	adds	r3, r7, r3
   2aef8:	2200      	movs	r2, #0
   2aefa:	701a      	strb	r2, [r3, #0]
	}
	break;
   2aefc:	e03b      	b.n	2af76 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2aefe:	230e      	movs	r3, #14
   2af00:	18fc      	adds	r4, r7, r3
   2af02:	1dfb      	adds	r3, r7, #7
   2af04:	781b      	ldrb	r3, [r3, #0]
   2af06:	0018      	movs	r0, r3
   2af08:	4b1f      	ldr	r3, [pc, #124]	; (2af88 <disk_ioctl+0xf0>)
   2af0a:	4798      	blx	r3
   2af0c:	0003      	movs	r3, r0
   2af0e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2af10:	230e      	movs	r3, #14
   2af12:	18fb      	adds	r3, r7, r3
   2af14:	781b      	ldrb	r3, [r3, #0]
   2af16:	2b01      	cmp	r3, #1
   2af18:	d010      	beq.n	2af3c <disk_ioctl+0xa4>
   2af1a:	230e      	movs	r3, #14
   2af1c:	18fb      	adds	r3, r7, r3
   2af1e:	781b      	ldrb	r3, [r3, #0]
   2af20:	2b02      	cmp	r3, #2
   2af22:	d00b      	beq.n	2af3c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2af24:	230e      	movs	r3, #14
   2af26:	18fb      	adds	r3, r7, r3
   2af28:	781b      	ldrb	r3, [r3, #0]
   2af2a:	2b04      	cmp	r3, #4
   2af2c:	d006      	beq.n	2af3c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2af2e:	230e      	movs	r3, #14
   2af30:	18fb      	adds	r3, r7, r3
   2af32:	781b      	ldrb	r3, [r3, #0]
   2af34:	2b08      	cmp	r3, #8
   2af36:	d001      	beq.n	2af3c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2af38:	2301      	movs	r3, #1
   2af3a:	e01f      	b.n	2af7c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2af3c:	683b      	ldr	r3, [r7, #0]
   2af3e:	2200      	movs	r2, #0
   2af40:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2af42:	230f      	movs	r3, #15
   2af44:	18fb      	adds	r3, r7, r3
   2af46:	2200      	movs	r2, #0
   2af48:	701a      	strb	r2, [r3, #0]
	}
	break;
   2af4a:	e014      	b.n	2af76 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2af4c:	1dfb      	adds	r3, r7, #7
   2af4e:	781b      	ldrb	r3, [r3, #0]
   2af50:	0018      	movs	r0, r3
   2af52:	4b0e      	ldr	r3, [pc, #56]	; (2af8c <disk_ioctl+0xf4>)
   2af54:	4798      	blx	r3
   2af56:	1e03      	subs	r3, r0, #0
   2af58:	d104      	bne.n	2af64 <disk_ioctl+0xcc>
			res = RES_OK;
   2af5a:	230f      	movs	r3, #15
   2af5c:	18fb      	adds	r3, r7, r3
   2af5e:	2200      	movs	r2, #0
   2af60:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2af62:	e008      	b.n	2af76 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2af64:	230f      	movs	r3, #15
   2af66:	18fb      	adds	r3, r7, r3
   2af68:	2203      	movs	r2, #3
   2af6a:	701a      	strb	r2, [r3, #0]
		break;
   2af6c:	e003      	b.n	2af76 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2af6e:	230f      	movs	r3, #15
   2af70:	18fb      	adds	r3, r7, r3
   2af72:	2204      	movs	r2, #4
   2af74:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2af76:	230f      	movs	r3, #15
   2af78:	18fb      	adds	r3, r7, r3
   2af7a:	781b      	ldrb	r3, [r3, #0]
}
   2af7c:	0018      	movs	r0, r3
   2af7e:	46bd      	mov	sp, r7
   2af80:	b005      	add	sp, #20
   2af82:	bd90      	pop	{r4, r7, pc}
   2af84:	0002593d 	.word	0x0002593d
   2af88:	00025989 	.word	0x00025989
   2af8c:	000258fd 	.word	0x000258fd

0002af90 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2af90:	b580      	push	{r7, lr}
   2af92:	b084      	sub	sp, #16
   2af94:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2af96:	1d3a      	adds	r2, r7, #4
   2af98:	4b12      	ldr	r3, [pc, #72]	; (2afe4 <get_fattime+0x54>)
   2af9a:	0011      	movs	r1, r2
   2af9c:	0018      	movs	r0, r3
   2af9e:	4b12      	ldr	r3, [pc, #72]	; (2afe8 <get_fattime+0x58>)
   2afa0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2afa2:	1d3b      	adds	r3, r7, #4
   2afa4:	88db      	ldrh	r3, [r3, #6]
   2afa6:	4a11      	ldr	r2, [pc, #68]	; (2afec <get_fattime+0x5c>)
   2afa8:	4694      	mov	ip, r2
   2afaa:	4463      	add	r3, ip
   2afac:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2afae:	1d3b      	adds	r3, r7, #4
   2afb0:	795b      	ldrb	r3, [r3, #5]
   2afb2:	055b      	lsls	r3, r3, #21
   2afb4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2afb6:	1d3b      	adds	r3, r7, #4
   2afb8:	791b      	ldrb	r3, [r3, #4]
   2afba:	041b      	lsls	r3, r3, #16
   2afbc:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2afbe:	1d3b      	adds	r3, r7, #4
   2afc0:	789b      	ldrb	r3, [r3, #2]
   2afc2:	02db      	lsls	r3, r3, #11
   2afc4:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2afc6:	1d3b      	adds	r3, r7, #4
   2afc8:	785b      	ldrb	r3, [r3, #1]
   2afca:	015b      	lsls	r3, r3, #5
   2afcc:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2afce:	1d3a      	adds	r2, r7, #4
   2afd0:	7812      	ldrb	r2, [r2, #0]
   2afd2:	0852      	lsrs	r2, r2, #1
   2afd4:	b2d2      	uxtb	r2, r2
   2afd6:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2afd8:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2afda:	68fb      	ldr	r3, [r7, #12]
}
   2afdc:	0018      	movs	r0, r3
   2afde:	46bd      	mov	sp, r7
   2afe0:	b004      	add	sp, #16
   2afe2:	bd80      	pop	{r7, pc}
   2afe4:	20005a40 	.word	0x20005a40
   2afe8:	00026769 	.word	0x00026769
   2afec:	fffff844 	.word	0xfffff844

0002aff0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2aff0:	b580      	push	{r7, lr}
   2aff2:	b086      	sub	sp, #24
   2aff4:	af00      	add	r7, sp, #0
   2aff6:	60f8      	str	r0, [r7, #12]
   2aff8:	60b9      	str	r1, [r7, #8]
   2affa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2affc:	68fb      	ldr	r3, [r7, #12]
   2affe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b000:	68bb      	ldr	r3, [r7, #8]
   2b002:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b004:	e007      	b.n	2b016 <mem_cpy+0x26>
		*d++ = *s++;
   2b006:	697b      	ldr	r3, [r7, #20]
   2b008:	1c5a      	adds	r2, r3, #1
   2b00a:	617a      	str	r2, [r7, #20]
   2b00c:	693a      	ldr	r2, [r7, #16]
   2b00e:	1c51      	adds	r1, r2, #1
   2b010:	6139      	str	r1, [r7, #16]
   2b012:	7812      	ldrb	r2, [r2, #0]
   2b014:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b016:	687b      	ldr	r3, [r7, #4]
   2b018:	1e5a      	subs	r2, r3, #1
   2b01a:	607a      	str	r2, [r7, #4]
   2b01c:	2b00      	cmp	r3, #0
   2b01e:	d1f2      	bne.n	2b006 <mem_cpy+0x16>
}
   2b020:	46c0      	nop			; (mov r8, r8)
   2b022:	46bd      	mov	sp, r7
   2b024:	b006      	add	sp, #24
   2b026:	bd80      	pop	{r7, pc}

0002b028 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b028:	b580      	push	{r7, lr}
   2b02a:	b086      	sub	sp, #24
   2b02c:	af00      	add	r7, sp, #0
   2b02e:	60f8      	str	r0, [r7, #12]
   2b030:	60b9      	str	r1, [r7, #8]
   2b032:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b034:	68fb      	ldr	r3, [r7, #12]
   2b036:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b038:	e005      	b.n	2b046 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b03a:	697b      	ldr	r3, [r7, #20]
   2b03c:	1c5a      	adds	r2, r3, #1
   2b03e:	617a      	str	r2, [r7, #20]
   2b040:	68ba      	ldr	r2, [r7, #8]
   2b042:	b2d2      	uxtb	r2, r2
   2b044:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b046:	687b      	ldr	r3, [r7, #4]
   2b048:	1e5a      	subs	r2, r3, #1
   2b04a:	607a      	str	r2, [r7, #4]
   2b04c:	2b00      	cmp	r3, #0
   2b04e:	d1f4      	bne.n	2b03a <mem_set+0x12>
}
   2b050:	46c0      	nop			; (mov r8, r8)
   2b052:	46bd      	mov	sp, r7
   2b054:	b006      	add	sp, #24
   2b056:	bd80      	pop	{r7, pc}

0002b058 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b058:	b580      	push	{r7, lr}
   2b05a:	b088      	sub	sp, #32
   2b05c:	af00      	add	r7, sp, #0
   2b05e:	60f8      	str	r0, [r7, #12]
   2b060:	60b9      	str	r1, [r7, #8]
   2b062:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b064:	68fb      	ldr	r3, [r7, #12]
   2b066:	61fb      	str	r3, [r7, #28]
   2b068:	68bb      	ldr	r3, [r7, #8]
   2b06a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b06c:	2300      	movs	r3, #0
   2b06e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b070:	46c0      	nop			; (mov r8, r8)
   2b072:	687b      	ldr	r3, [r7, #4]
   2b074:	1e5a      	subs	r2, r3, #1
   2b076:	607a      	str	r2, [r7, #4]
   2b078:	2b00      	cmp	r3, #0
   2b07a:	d00d      	beq.n	2b098 <mem_cmp+0x40>
   2b07c:	69fb      	ldr	r3, [r7, #28]
   2b07e:	1c5a      	adds	r2, r3, #1
   2b080:	61fa      	str	r2, [r7, #28]
   2b082:	781b      	ldrb	r3, [r3, #0]
   2b084:	0019      	movs	r1, r3
   2b086:	69bb      	ldr	r3, [r7, #24]
   2b088:	1c5a      	adds	r2, r3, #1
   2b08a:	61ba      	str	r2, [r7, #24]
   2b08c:	781b      	ldrb	r3, [r3, #0]
   2b08e:	1acb      	subs	r3, r1, r3
   2b090:	617b      	str	r3, [r7, #20]
   2b092:	697b      	ldr	r3, [r7, #20]
   2b094:	2b00      	cmp	r3, #0
   2b096:	d0ec      	beq.n	2b072 <mem_cmp+0x1a>
	return r;
   2b098:	697b      	ldr	r3, [r7, #20]
}
   2b09a:	0018      	movs	r0, r3
   2b09c:	46bd      	mov	sp, r7
   2b09e:	b008      	add	sp, #32
   2b0a0:	bd80      	pop	{r7, pc}

0002b0a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b0a2:	b580      	push	{r7, lr}
   2b0a4:	b082      	sub	sp, #8
   2b0a6:	af00      	add	r7, sp, #0
   2b0a8:	6078      	str	r0, [r7, #4]
   2b0aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b0ac:	e002      	b.n	2b0b4 <chk_chr+0x12>
   2b0ae:	687b      	ldr	r3, [r7, #4]
   2b0b0:	3301      	adds	r3, #1
   2b0b2:	607b      	str	r3, [r7, #4]
   2b0b4:	687b      	ldr	r3, [r7, #4]
   2b0b6:	781b      	ldrb	r3, [r3, #0]
   2b0b8:	2b00      	cmp	r3, #0
   2b0ba:	d005      	beq.n	2b0c8 <chk_chr+0x26>
   2b0bc:	687b      	ldr	r3, [r7, #4]
   2b0be:	781b      	ldrb	r3, [r3, #0]
   2b0c0:	001a      	movs	r2, r3
   2b0c2:	683b      	ldr	r3, [r7, #0]
   2b0c4:	429a      	cmp	r2, r3
   2b0c6:	d1f2      	bne.n	2b0ae <chk_chr+0xc>
	return *str;
   2b0c8:	687b      	ldr	r3, [r7, #4]
   2b0ca:	781b      	ldrb	r3, [r3, #0]
}
   2b0cc:	0018      	movs	r0, r3
   2b0ce:	46bd      	mov	sp, r7
   2b0d0:	b002      	add	sp, #8
   2b0d2:	bd80      	pop	{r7, pc}

0002b0d4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b0d4:	b590      	push	{r4, r7, lr}
   2b0d6:	b085      	sub	sp, #20
   2b0d8:	af00      	add	r7, sp, #0
   2b0da:	6078      	str	r0, [r7, #4]
   2b0dc:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b0de:	687b      	ldr	r3, [r7, #4]
   2b0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b0e2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b0e4:	68fa      	ldr	r2, [r7, #12]
   2b0e6:	683b      	ldr	r3, [r7, #0]
   2b0e8:	429a      	cmp	r2, r3
   2b0ea:	d04e      	beq.n	2b18a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b0ec:	687b      	ldr	r3, [r7, #4]
   2b0ee:	791b      	ldrb	r3, [r3, #4]
   2b0f0:	2b00      	cmp	r3, #0
   2b0f2:	d037      	beq.n	2b164 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b0f4:	687b      	ldr	r3, [r7, #4]
   2b0f6:	7858      	ldrb	r0, [r3, #1]
   2b0f8:	687b      	ldr	r3, [r7, #4]
   2b0fa:	3330      	adds	r3, #48	; 0x30
   2b0fc:	0019      	movs	r1, r3
   2b0fe:	68fa      	ldr	r2, [r7, #12]
   2b100:	2301      	movs	r3, #1
   2b102:	4c24      	ldr	r4, [pc, #144]	; (2b194 <move_window+0xc0>)
   2b104:	47a0      	blx	r4
   2b106:	1e03      	subs	r3, r0, #0
   2b108:	d001      	beq.n	2b10e <move_window+0x3a>
				return FR_DISK_ERR;
   2b10a:	2301      	movs	r3, #1
   2b10c:	e03e      	b.n	2b18c <move_window+0xb8>
			fs->wflag = 0;
   2b10e:	687b      	ldr	r3, [r7, #4]
   2b110:	2200      	movs	r2, #0
   2b112:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b114:	687b      	ldr	r3, [r7, #4]
   2b116:	6a1a      	ldr	r2, [r3, #32]
   2b118:	687b      	ldr	r3, [r7, #4]
   2b11a:	69db      	ldr	r3, [r3, #28]
   2b11c:	18d2      	adds	r2, r2, r3
   2b11e:	68fb      	ldr	r3, [r7, #12]
   2b120:	429a      	cmp	r2, r3
   2b122:	d91f      	bls.n	2b164 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b124:	230b      	movs	r3, #11
   2b126:	18fb      	adds	r3, r7, r3
   2b128:	687a      	ldr	r2, [r7, #4]
   2b12a:	78d2      	ldrb	r2, [r2, #3]
   2b12c:	701a      	strb	r2, [r3, #0]
   2b12e:	e014      	b.n	2b15a <move_window+0x86>
					wsect += fs->fsize;
   2b130:	687b      	ldr	r3, [r7, #4]
   2b132:	69db      	ldr	r3, [r3, #28]
   2b134:	68fa      	ldr	r2, [r7, #12]
   2b136:	18d3      	adds	r3, r2, r3
   2b138:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b13a:	687b      	ldr	r3, [r7, #4]
   2b13c:	7858      	ldrb	r0, [r3, #1]
   2b13e:	687b      	ldr	r3, [r7, #4]
   2b140:	3330      	adds	r3, #48	; 0x30
   2b142:	0019      	movs	r1, r3
   2b144:	68fa      	ldr	r2, [r7, #12]
   2b146:	2301      	movs	r3, #1
   2b148:	4c12      	ldr	r4, [pc, #72]	; (2b194 <move_window+0xc0>)
   2b14a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b14c:	230b      	movs	r3, #11
   2b14e:	18fb      	adds	r3, r7, r3
   2b150:	781a      	ldrb	r2, [r3, #0]
   2b152:	230b      	movs	r3, #11
   2b154:	18fb      	adds	r3, r7, r3
   2b156:	3a01      	subs	r2, #1
   2b158:	701a      	strb	r2, [r3, #0]
   2b15a:	230b      	movs	r3, #11
   2b15c:	18fb      	adds	r3, r7, r3
   2b15e:	781b      	ldrb	r3, [r3, #0]
   2b160:	2b01      	cmp	r3, #1
   2b162:	d8e5      	bhi.n	2b130 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b164:	683b      	ldr	r3, [r7, #0]
   2b166:	2b00      	cmp	r3, #0
   2b168:	d00f      	beq.n	2b18a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b16a:	687b      	ldr	r3, [r7, #4]
   2b16c:	7858      	ldrb	r0, [r3, #1]
   2b16e:	687b      	ldr	r3, [r7, #4]
   2b170:	3330      	adds	r3, #48	; 0x30
   2b172:	0019      	movs	r1, r3
   2b174:	683a      	ldr	r2, [r7, #0]
   2b176:	2301      	movs	r3, #1
   2b178:	4c07      	ldr	r4, [pc, #28]	; (2b198 <move_window+0xc4>)
   2b17a:	47a0      	blx	r4
   2b17c:	1e03      	subs	r3, r0, #0
   2b17e:	d001      	beq.n	2b184 <move_window+0xb0>
				return FR_DISK_ERR;
   2b180:	2301      	movs	r3, #1
   2b182:	e003      	b.n	2b18c <move_window+0xb8>
			fs->winsect = sector;
   2b184:	687b      	ldr	r3, [r7, #4]
   2b186:	683a      	ldr	r2, [r7, #0]
   2b188:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b18a:	2300      	movs	r3, #0
}
   2b18c:	0018      	movs	r0, r3
   2b18e:	46bd      	mov	sp, r7
   2b190:	b005      	add	sp, #20
   2b192:	bd90      	pop	{r4, r7, pc}
   2b194:	0002adc1 	.word	0x0002adc1
   2b198:	0002ace9 	.word	0x0002ace9

0002b19c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b19c:	b590      	push	{r4, r7, lr}
   2b19e:	b085      	sub	sp, #20
   2b1a0:	af00      	add	r7, sp, #0
   2b1a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b1a4:	230f      	movs	r3, #15
   2b1a6:	18fc      	adds	r4, r7, r3
   2b1a8:	687b      	ldr	r3, [r7, #4]
   2b1aa:	2100      	movs	r1, #0
   2b1ac:	0018      	movs	r0, r3
   2b1ae:	4b52      	ldr	r3, [pc, #328]	; (2b2f8 <sync+0x15c>)
   2b1b0:	4798      	blx	r3
   2b1b2:	0003      	movs	r3, r0
   2b1b4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b1b6:	230f      	movs	r3, #15
   2b1b8:	18fb      	adds	r3, r7, r3
   2b1ba:	781b      	ldrb	r3, [r3, #0]
   2b1bc:	2b00      	cmp	r3, #0
   2b1be:	d000      	beq.n	2b1c2 <sync+0x26>
   2b1c0:	e093      	b.n	2b2ea <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b1c2:	687b      	ldr	r3, [r7, #4]
   2b1c4:	781b      	ldrb	r3, [r3, #0]
   2b1c6:	2b03      	cmp	r3, #3
   2b1c8:	d000      	beq.n	2b1cc <sync+0x30>
   2b1ca:	e081      	b.n	2b2d0 <sync+0x134>
   2b1cc:	687b      	ldr	r3, [r7, #4]
   2b1ce:	795b      	ldrb	r3, [r3, #5]
   2b1d0:	2b00      	cmp	r3, #0
   2b1d2:	d07d      	beq.n	2b2d0 <sync+0x134>
			fs->winsect = 0;
   2b1d4:	687b      	ldr	r3, [r7, #4]
   2b1d6:	2200      	movs	r2, #0
   2b1d8:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b1da:	687b      	ldr	r3, [r7, #4]
   2b1dc:	3330      	adds	r3, #48	; 0x30
   2b1de:	0018      	movs	r0, r3
   2b1e0:	2380      	movs	r3, #128	; 0x80
   2b1e2:	009b      	lsls	r3, r3, #2
   2b1e4:	001a      	movs	r2, r3
   2b1e6:	2100      	movs	r1, #0
   2b1e8:	4b44      	ldr	r3, [pc, #272]	; (2b2fc <sync+0x160>)
   2b1ea:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b1ec:	687b      	ldr	r3, [r7, #4]
   2b1ee:	4a44      	ldr	r2, [pc, #272]	; (2b300 <sync+0x164>)
   2b1f0:	2155      	movs	r1, #85	; 0x55
   2b1f2:	5499      	strb	r1, [r3, r2]
   2b1f4:	687b      	ldr	r3, [r7, #4]
   2b1f6:	4a43      	ldr	r2, [pc, #268]	; (2b304 <sync+0x168>)
   2b1f8:	21aa      	movs	r1, #170	; 0xaa
   2b1fa:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b1fc:	687b      	ldr	r3, [r7, #4]
   2b1fe:	2230      	movs	r2, #48	; 0x30
   2b200:	2152      	movs	r1, #82	; 0x52
   2b202:	5499      	strb	r1, [r3, r2]
   2b204:	687b      	ldr	r3, [r7, #4]
   2b206:	2231      	movs	r2, #49	; 0x31
   2b208:	2152      	movs	r1, #82	; 0x52
   2b20a:	5499      	strb	r1, [r3, r2]
   2b20c:	687b      	ldr	r3, [r7, #4]
   2b20e:	2232      	movs	r2, #50	; 0x32
   2b210:	2161      	movs	r1, #97	; 0x61
   2b212:	5499      	strb	r1, [r3, r2]
   2b214:	687b      	ldr	r3, [r7, #4]
   2b216:	2233      	movs	r2, #51	; 0x33
   2b218:	2141      	movs	r1, #65	; 0x41
   2b21a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b21c:	687a      	ldr	r2, [r7, #4]
   2b21e:	2385      	movs	r3, #133	; 0x85
   2b220:	009b      	lsls	r3, r3, #2
   2b222:	2172      	movs	r1, #114	; 0x72
   2b224:	54d1      	strb	r1, [r2, r3]
   2b226:	687b      	ldr	r3, [r7, #4]
   2b228:	4a37      	ldr	r2, [pc, #220]	; (2b308 <sync+0x16c>)
   2b22a:	2172      	movs	r1, #114	; 0x72
   2b22c:	5499      	strb	r1, [r3, r2]
   2b22e:	687b      	ldr	r3, [r7, #4]
   2b230:	4a36      	ldr	r2, [pc, #216]	; (2b30c <sync+0x170>)
   2b232:	2141      	movs	r1, #65	; 0x41
   2b234:	5499      	strb	r1, [r3, r2]
   2b236:	687b      	ldr	r3, [r7, #4]
   2b238:	4a35      	ldr	r2, [pc, #212]	; (2b310 <sync+0x174>)
   2b23a:	2161      	movs	r1, #97	; 0x61
   2b23c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b23e:	687b      	ldr	r3, [r7, #4]
   2b240:	691b      	ldr	r3, [r3, #16]
   2b242:	b2d9      	uxtb	r1, r3
   2b244:	687a      	ldr	r2, [r7, #4]
   2b246:	2386      	movs	r3, #134	; 0x86
   2b248:	009b      	lsls	r3, r3, #2
   2b24a:	54d1      	strb	r1, [r2, r3]
   2b24c:	687b      	ldr	r3, [r7, #4]
   2b24e:	691b      	ldr	r3, [r3, #16]
   2b250:	b29b      	uxth	r3, r3
   2b252:	0a1b      	lsrs	r3, r3, #8
   2b254:	b29b      	uxth	r3, r3
   2b256:	b2d9      	uxtb	r1, r3
   2b258:	687b      	ldr	r3, [r7, #4]
   2b25a:	4a2e      	ldr	r2, [pc, #184]	; (2b314 <sync+0x178>)
   2b25c:	5499      	strb	r1, [r3, r2]
   2b25e:	687b      	ldr	r3, [r7, #4]
   2b260:	691b      	ldr	r3, [r3, #16]
   2b262:	0c1b      	lsrs	r3, r3, #16
   2b264:	b2d9      	uxtb	r1, r3
   2b266:	687b      	ldr	r3, [r7, #4]
   2b268:	4a2b      	ldr	r2, [pc, #172]	; (2b318 <sync+0x17c>)
   2b26a:	5499      	strb	r1, [r3, r2]
   2b26c:	687b      	ldr	r3, [r7, #4]
   2b26e:	691b      	ldr	r3, [r3, #16]
   2b270:	0e1b      	lsrs	r3, r3, #24
   2b272:	b2d9      	uxtb	r1, r3
   2b274:	687b      	ldr	r3, [r7, #4]
   2b276:	4a29      	ldr	r2, [pc, #164]	; (2b31c <sync+0x180>)
   2b278:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b27a:	687b      	ldr	r3, [r7, #4]
   2b27c:	68db      	ldr	r3, [r3, #12]
   2b27e:	b2d9      	uxtb	r1, r3
   2b280:	687a      	ldr	r2, [r7, #4]
   2b282:	2387      	movs	r3, #135	; 0x87
   2b284:	009b      	lsls	r3, r3, #2
   2b286:	54d1      	strb	r1, [r2, r3]
   2b288:	687b      	ldr	r3, [r7, #4]
   2b28a:	68db      	ldr	r3, [r3, #12]
   2b28c:	b29b      	uxth	r3, r3
   2b28e:	0a1b      	lsrs	r3, r3, #8
   2b290:	b29b      	uxth	r3, r3
   2b292:	b2d9      	uxtb	r1, r3
   2b294:	687b      	ldr	r3, [r7, #4]
   2b296:	4a22      	ldr	r2, [pc, #136]	; (2b320 <sync+0x184>)
   2b298:	5499      	strb	r1, [r3, r2]
   2b29a:	687b      	ldr	r3, [r7, #4]
   2b29c:	68db      	ldr	r3, [r3, #12]
   2b29e:	0c1b      	lsrs	r3, r3, #16
   2b2a0:	b2d9      	uxtb	r1, r3
   2b2a2:	687b      	ldr	r3, [r7, #4]
   2b2a4:	4a1f      	ldr	r2, [pc, #124]	; (2b324 <sync+0x188>)
   2b2a6:	5499      	strb	r1, [r3, r2]
   2b2a8:	687b      	ldr	r3, [r7, #4]
   2b2aa:	68db      	ldr	r3, [r3, #12]
   2b2ac:	0e1b      	lsrs	r3, r3, #24
   2b2ae:	b2d9      	uxtb	r1, r3
   2b2b0:	687b      	ldr	r3, [r7, #4]
   2b2b2:	4a1d      	ldr	r2, [pc, #116]	; (2b328 <sync+0x18c>)
   2b2b4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b2b6:	687b      	ldr	r3, [r7, #4]
   2b2b8:	7858      	ldrb	r0, [r3, #1]
   2b2ba:	687b      	ldr	r3, [r7, #4]
   2b2bc:	3330      	adds	r3, #48	; 0x30
   2b2be:	0019      	movs	r1, r3
   2b2c0:	687b      	ldr	r3, [r7, #4]
   2b2c2:	695a      	ldr	r2, [r3, #20]
   2b2c4:	2301      	movs	r3, #1
   2b2c6:	4c19      	ldr	r4, [pc, #100]	; (2b32c <sync+0x190>)
   2b2c8:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b2ca:	687b      	ldr	r3, [r7, #4]
   2b2cc:	2200      	movs	r2, #0
   2b2ce:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b2d0:	687b      	ldr	r3, [r7, #4]
   2b2d2:	785b      	ldrb	r3, [r3, #1]
   2b2d4:	2200      	movs	r2, #0
   2b2d6:	2100      	movs	r1, #0
   2b2d8:	0018      	movs	r0, r3
   2b2da:	4b15      	ldr	r3, [pc, #84]	; (2b330 <sync+0x194>)
   2b2dc:	4798      	blx	r3
   2b2de:	1e03      	subs	r3, r0, #0
   2b2e0:	d003      	beq.n	2b2ea <sync+0x14e>
			res = FR_DISK_ERR;
   2b2e2:	230f      	movs	r3, #15
   2b2e4:	18fb      	adds	r3, r7, r3
   2b2e6:	2201      	movs	r2, #1
   2b2e8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b2ea:	230f      	movs	r3, #15
   2b2ec:	18fb      	adds	r3, r7, r3
   2b2ee:	781b      	ldrb	r3, [r3, #0]
}
   2b2f0:	0018      	movs	r0, r3
   2b2f2:	46bd      	mov	sp, r7
   2b2f4:	b005      	add	sp, #20
   2b2f6:	bd90      	pop	{r4, r7, pc}
   2b2f8:	0002b0d5 	.word	0x0002b0d5
   2b2fc:	0002b029 	.word	0x0002b029
   2b300:	0000022e 	.word	0x0000022e
   2b304:	0000022f 	.word	0x0000022f
   2b308:	00000215 	.word	0x00000215
   2b30c:	00000216 	.word	0x00000216
   2b310:	00000217 	.word	0x00000217
   2b314:	00000219 	.word	0x00000219
   2b318:	0000021a 	.word	0x0000021a
   2b31c:	0000021b 	.word	0x0000021b
   2b320:	0000021d 	.word	0x0000021d
   2b324:	0000021e 	.word	0x0000021e
   2b328:	0000021f 	.word	0x0000021f
   2b32c:	0002adc1 	.word	0x0002adc1
   2b330:	0002ae99 	.word	0x0002ae99

0002b334 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b334:	b580      	push	{r7, lr}
   2b336:	b082      	sub	sp, #8
   2b338:	af00      	add	r7, sp, #0
   2b33a:	6078      	str	r0, [r7, #4]
   2b33c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b33e:	683b      	ldr	r3, [r7, #0]
   2b340:	3b02      	subs	r3, #2
   2b342:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b344:	687b      	ldr	r3, [r7, #4]
   2b346:	699b      	ldr	r3, [r3, #24]
   2b348:	1e9a      	subs	r2, r3, #2
   2b34a:	683b      	ldr	r3, [r7, #0]
   2b34c:	429a      	cmp	r2, r3
   2b34e:	d801      	bhi.n	2b354 <clust2sect+0x20>
   2b350:	2300      	movs	r3, #0
   2b352:	e007      	b.n	2b364 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b354:	687b      	ldr	r3, [r7, #4]
   2b356:	789b      	ldrb	r3, [r3, #2]
   2b358:	001a      	movs	r2, r3
   2b35a:	683b      	ldr	r3, [r7, #0]
   2b35c:	435a      	muls	r2, r3
   2b35e:	687b      	ldr	r3, [r7, #4]
   2b360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b362:	18d3      	adds	r3, r2, r3
}
   2b364:	0018      	movs	r0, r3
   2b366:	46bd      	mov	sp, r7
   2b368:	b002      	add	sp, #8
   2b36a:	bd80      	pop	{r7, pc}

0002b36c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b36c:	b580      	push	{r7, lr}
   2b36e:	b086      	sub	sp, #24
   2b370:	af00      	add	r7, sp, #0
   2b372:	6078      	str	r0, [r7, #4]
   2b374:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b376:	683b      	ldr	r3, [r7, #0]
   2b378:	2b01      	cmp	r3, #1
   2b37a:	d904      	bls.n	2b386 <get_fat+0x1a>
   2b37c:	687b      	ldr	r3, [r7, #4]
   2b37e:	699a      	ldr	r2, [r3, #24]
   2b380:	683b      	ldr	r3, [r7, #0]
   2b382:	429a      	cmp	r2, r3
   2b384:	d801      	bhi.n	2b38a <get_fat+0x1e>
		return 1;
   2b386:	2301      	movs	r3, #1
   2b388:	e09f      	b.n	2b4ca <get_fat+0x15e>

	switch (fs->fs_type) {
   2b38a:	687b      	ldr	r3, [r7, #4]
   2b38c:	781b      	ldrb	r3, [r3, #0]
   2b38e:	2b02      	cmp	r3, #2
   2b390:	d048      	beq.n	2b424 <get_fat+0xb8>
   2b392:	2b03      	cmp	r3, #3
   2b394:	d067      	beq.n	2b466 <get_fat+0xfa>
   2b396:	2b01      	cmp	r3, #1
   2b398:	d000      	beq.n	2b39c <get_fat+0x30>
   2b39a:	e094      	b.n	2b4c6 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b39c:	683b      	ldr	r3, [r7, #0]
   2b39e:	617b      	str	r3, [r7, #20]
   2b3a0:	697b      	ldr	r3, [r7, #20]
   2b3a2:	085b      	lsrs	r3, r3, #1
   2b3a4:	697a      	ldr	r2, [r7, #20]
   2b3a6:	18d3      	adds	r3, r2, r3
   2b3a8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b3aa:	687b      	ldr	r3, [r7, #4]
   2b3ac:	6a1a      	ldr	r2, [r3, #32]
   2b3ae:	697b      	ldr	r3, [r7, #20]
   2b3b0:	0a5b      	lsrs	r3, r3, #9
   2b3b2:	18d2      	adds	r2, r2, r3
   2b3b4:	687b      	ldr	r3, [r7, #4]
   2b3b6:	0011      	movs	r1, r2
   2b3b8:	0018      	movs	r0, r3
   2b3ba:	4b46      	ldr	r3, [pc, #280]	; (2b4d4 <get_fat+0x168>)
   2b3bc:	4798      	blx	r3
   2b3be:	1e03      	subs	r3, r0, #0
   2b3c0:	d000      	beq.n	2b3c4 <get_fat+0x58>
   2b3c2:	e079      	b.n	2b4b8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b3c4:	697b      	ldr	r3, [r7, #20]
   2b3c6:	05db      	lsls	r3, r3, #23
   2b3c8:	0ddb      	lsrs	r3, r3, #23
   2b3ca:	687a      	ldr	r2, [r7, #4]
   2b3cc:	2130      	movs	r1, #48	; 0x30
   2b3ce:	18d3      	adds	r3, r2, r3
   2b3d0:	185b      	adds	r3, r3, r1
   2b3d2:	781b      	ldrb	r3, [r3, #0]
   2b3d4:	613b      	str	r3, [r7, #16]
   2b3d6:	697b      	ldr	r3, [r7, #20]
   2b3d8:	3301      	adds	r3, #1
   2b3da:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b3dc:	687b      	ldr	r3, [r7, #4]
   2b3de:	6a1a      	ldr	r2, [r3, #32]
   2b3e0:	697b      	ldr	r3, [r7, #20]
   2b3e2:	0a5b      	lsrs	r3, r3, #9
   2b3e4:	18d2      	adds	r2, r2, r3
   2b3e6:	687b      	ldr	r3, [r7, #4]
   2b3e8:	0011      	movs	r1, r2
   2b3ea:	0018      	movs	r0, r3
   2b3ec:	4b39      	ldr	r3, [pc, #228]	; (2b4d4 <get_fat+0x168>)
   2b3ee:	4798      	blx	r3
   2b3f0:	1e03      	subs	r3, r0, #0
   2b3f2:	d163      	bne.n	2b4bc <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2b3f4:	697b      	ldr	r3, [r7, #20]
   2b3f6:	05db      	lsls	r3, r3, #23
   2b3f8:	0ddb      	lsrs	r3, r3, #23
   2b3fa:	687a      	ldr	r2, [r7, #4]
   2b3fc:	2130      	movs	r1, #48	; 0x30
   2b3fe:	18d3      	adds	r3, r2, r3
   2b400:	185b      	adds	r3, r3, r1
   2b402:	781b      	ldrb	r3, [r3, #0]
   2b404:	021b      	lsls	r3, r3, #8
   2b406:	001a      	movs	r2, r3
   2b408:	693b      	ldr	r3, [r7, #16]
   2b40a:	4313      	orrs	r3, r2
   2b40c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2b40e:	683b      	ldr	r3, [r7, #0]
   2b410:	2201      	movs	r2, #1
   2b412:	4013      	ands	r3, r2
   2b414:	d002      	beq.n	2b41c <get_fat+0xb0>
   2b416:	693b      	ldr	r3, [r7, #16]
   2b418:	091b      	lsrs	r3, r3, #4
   2b41a:	e056      	b.n	2b4ca <get_fat+0x15e>
   2b41c:	693b      	ldr	r3, [r7, #16]
   2b41e:	051b      	lsls	r3, r3, #20
   2b420:	0d1b      	lsrs	r3, r3, #20
   2b422:	e052      	b.n	2b4ca <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b424:	687b      	ldr	r3, [r7, #4]
   2b426:	6a1a      	ldr	r2, [r3, #32]
   2b428:	683b      	ldr	r3, [r7, #0]
   2b42a:	0a1b      	lsrs	r3, r3, #8
   2b42c:	18d2      	adds	r2, r2, r3
   2b42e:	687b      	ldr	r3, [r7, #4]
   2b430:	0011      	movs	r1, r2
   2b432:	0018      	movs	r0, r3
   2b434:	4b27      	ldr	r3, [pc, #156]	; (2b4d4 <get_fat+0x168>)
   2b436:	4798      	blx	r3
   2b438:	1e03      	subs	r3, r0, #0
   2b43a:	d141      	bne.n	2b4c0 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2b43c:	683b      	ldr	r3, [r7, #0]
   2b43e:	005a      	lsls	r2, r3, #1
   2b440:	23ff      	movs	r3, #255	; 0xff
   2b442:	005b      	lsls	r3, r3, #1
   2b444:	4013      	ands	r3, r2
   2b446:	3330      	adds	r3, #48	; 0x30
   2b448:	687a      	ldr	r2, [r7, #4]
   2b44a:	18d3      	adds	r3, r2, r3
   2b44c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2b44e:	68fb      	ldr	r3, [r7, #12]
   2b450:	3301      	adds	r3, #1
   2b452:	781b      	ldrb	r3, [r3, #0]
   2b454:	021b      	lsls	r3, r3, #8
   2b456:	b21a      	sxth	r2, r3
   2b458:	68fb      	ldr	r3, [r7, #12]
   2b45a:	781b      	ldrb	r3, [r3, #0]
   2b45c:	b21b      	sxth	r3, r3
   2b45e:	4313      	orrs	r3, r2
   2b460:	b21b      	sxth	r3, r3
   2b462:	b29b      	uxth	r3, r3
   2b464:	e031      	b.n	2b4ca <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b466:	687b      	ldr	r3, [r7, #4]
   2b468:	6a1a      	ldr	r2, [r3, #32]
   2b46a:	683b      	ldr	r3, [r7, #0]
   2b46c:	09db      	lsrs	r3, r3, #7
   2b46e:	18d2      	adds	r2, r2, r3
   2b470:	687b      	ldr	r3, [r7, #4]
   2b472:	0011      	movs	r1, r2
   2b474:	0018      	movs	r0, r3
   2b476:	4b17      	ldr	r3, [pc, #92]	; (2b4d4 <get_fat+0x168>)
   2b478:	4798      	blx	r3
   2b47a:	1e03      	subs	r3, r0, #0
   2b47c:	d122      	bne.n	2b4c4 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2b47e:	683b      	ldr	r3, [r7, #0]
   2b480:	009a      	lsls	r2, r3, #2
   2b482:	23fe      	movs	r3, #254	; 0xfe
   2b484:	005b      	lsls	r3, r3, #1
   2b486:	4013      	ands	r3, r2
   2b488:	3330      	adds	r3, #48	; 0x30
   2b48a:	687a      	ldr	r2, [r7, #4]
   2b48c:	18d3      	adds	r3, r2, r3
   2b48e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2b490:	68fb      	ldr	r3, [r7, #12]
   2b492:	3303      	adds	r3, #3
   2b494:	781b      	ldrb	r3, [r3, #0]
   2b496:	061a      	lsls	r2, r3, #24
   2b498:	68fb      	ldr	r3, [r7, #12]
   2b49a:	3302      	adds	r3, #2
   2b49c:	781b      	ldrb	r3, [r3, #0]
   2b49e:	041b      	lsls	r3, r3, #16
   2b4a0:	4313      	orrs	r3, r2
   2b4a2:	68fa      	ldr	r2, [r7, #12]
   2b4a4:	3201      	adds	r2, #1
   2b4a6:	7812      	ldrb	r2, [r2, #0]
   2b4a8:	0212      	lsls	r2, r2, #8
   2b4aa:	4313      	orrs	r3, r2
   2b4ac:	68fa      	ldr	r2, [r7, #12]
   2b4ae:	7812      	ldrb	r2, [r2, #0]
   2b4b0:	4313      	orrs	r3, r2
   2b4b2:	011b      	lsls	r3, r3, #4
   2b4b4:	091b      	lsrs	r3, r3, #4
   2b4b6:	e008      	b.n	2b4ca <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b4b8:	46c0      	nop			; (mov r8, r8)
   2b4ba:	e004      	b.n	2b4c6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b4bc:	46c0      	nop			; (mov r8, r8)
   2b4be:	e002      	b.n	2b4c6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b4c0:	46c0      	nop			; (mov r8, r8)
   2b4c2:	e000      	b.n	2b4c6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b4c4:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2b4c6:	2301      	movs	r3, #1
   2b4c8:	425b      	negs	r3, r3
}
   2b4ca:	0018      	movs	r0, r3
   2b4cc:	46bd      	mov	sp, r7
   2b4ce:	b006      	add	sp, #24
   2b4d0:	bd80      	pop	{r7, pc}
   2b4d2:	46c0      	nop			; (mov r8, r8)
   2b4d4:	0002b0d5 	.word	0x0002b0d5

0002b4d8 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2b4d8:	b590      	push	{r4, r7, lr}
   2b4da:	b089      	sub	sp, #36	; 0x24
   2b4dc:	af00      	add	r7, sp, #0
   2b4de:	60f8      	str	r0, [r7, #12]
   2b4e0:	60b9      	str	r1, [r7, #8]
   2b4e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b4e4:	68bb      	ldr	r3, [r7, #8]
   2b4e6:	2b01      	cmp	r3, #1
   2b4e8:	d904      	bls.n	2b4f4 <put_fat+0x1c>
   2b4ea:	68fb      	ldr	r3, [r7, #12]
   2b4ec:	699a      	ldr	r2, [r3, #24]
   2b4ee:	68bb      	ldr	r3, [r7, #8]
   2b4f0:	429a      	cmp	r2, r3
   2b4f2:	d804      	bhi.n	2b4fe <put_fat+0x26>
		res = FR_INT_ERR;
   2b4f4:	231f      	movs	r3, #31
   2b4f6:	18fb      	adds	r3, r7, r3
   2b4f8:	2202      	movs	r2, #2
   2b4fa:	701a      	strb	r2, [r3, #0]
   2b4fc:	e100      	b.n	2b700 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2b4fe:	68fb      	ldr	r3, [r7, #12]
   2b500:	781b      	ldrb	r3, [r3, #0]
   2b502:	2b02      	cmp	r3, #2
   2b504:	d100      	bne.n	2b508 <put_fat+0x30>
   2b506:	e078      	b.n	2b5fa <put_fat+0x122>
   2b508:	2b03      	cmp	r3, #3
   2b50a:	d100      	bne.n	2b50e <put_fat+0x36>
   2b50c:	e09e      	b.n	2b64c <put_fat+0x174>
   2b50e:	2b01      	cmp	r3, #1
   2b510:	d000      	beq.n	2b514 <put_fat+0x3c>
   2b512:	e0e6      	b.n	2b6e2 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2b514:	68bb      	ldr	r3, [r7, #8]
   2b516:	61bb      	str	r3, [r7, #24]
   2b518:	69bb      	ldr	r3, [r7, #24]
   2b51a:	085b      	lsrs	r3, r3, #1
   2b51c:	69ba      	ldr	r2, [r7, #24]
   2b51e:	18d3      	adds	r3, r2, r3
   2b520:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b522:	68fb      	ldr	r3, [r7, #12]
   2b524:	6a1a      	ldr	r2, [r3, #32]
   2b526:	69bb      	ldr	r3, [r7, #24]
   2b528:	0a5b      	lsrs	r3, r3, #9
   2b52a:	18d2      	adds	r2, r2, r3
   2b52c:	231f      	movs	r3, #31
   2b52e:	18fc      	adds	r4, r7, r3
   2b530:	68fb      	ldr	r3, [r7, #12]
   2b532:	0011      	movs	r1, r2
   2b534:	0018      	movs	r0, r3
   2b536:	4b76      	ldr	r3, [pc, #472]	; (2b710 <put_fat+0x238>)
   2b538:	4798      	blx	r3
   2b53a:	0003      	movs	r3, r0
   2b53c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b53e:	231f      	movs	r3, #31
   2b540:	18fb      	adds	r3, r7, r3
   2b542:	781b      	ldrb	r3, [r3, #0]
   2b544:	2b00      	cmp	r3, #0
   2b546:	d000      	beq.n	2b54a <put_fat+0x72>
   2b548:	e0d0      	b.n	2b6ec <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b54a:	69bb      	ldr	r3, [r7, #24]
   2b54c:	05db      	lsls	r3, r3, #23
   2b54e:	0ddb      	lsrs	r3, r3, #23
   2b550:	3330      	adds	r3, #48	; 0x30
   2b552:	68fa      	ldr	r2, [r7, #12]
   2b554:	18d3      	adds	r3, r2, r3
   2b556:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b558:	68bb      	ldr	r3, [r7, #8]
   2b55a:	2201      	movs	r2, #1
   2b55c:	4013      	ands	r3, r2
   2b55e:	d00d      	beq.n	2b57c <put_fat+0xa4>
   2b560:	697b      	ldr	r3, [r7, #20]
   2b562:	781b      	ldrb	r3, [r3, #0]
   2b564:	b25b      	sxtb	r3, r3
   2b566:	220f      	movs	r2, #15
   2b568:	4013      	ands	r3, r2
   2b56a:	b25a      	sxtb	r2, r3
   2b56c:	687b      	ldr	r3, [r7, #4]
   2b56e:	b2db      	uxtb	r3, r3
   2b570:	011b      	lsls	r3, r3, #4
   2b572:	b25b      	sxtb	r3, r3
   2b574:	4313      	orrs	r3, r2
   2b576:	b25b      	sxtb	r3, r3
   2b578:	b2db      	uxtb	r3, r3
   2b57a:	e001      	b.n	2b580 <put_fat+0xa8>
   2b57c:	687b      	ldr	r3, [r7, #4]
   2b57e:	b2db      	uxtb	r3, r3
   2b580:	697a      	ldr	r2, [r7, #20]
   2b582:	7013      	strb	r3, [r2, #0]
			bc++;
   2b584:	69bb      	ldr	r3, [r7, #24]
   2b586:	3301      	adds	r3, #1
   2b588:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b58a:	68fb      	ldr	r3, [r7, #12]
   2b58c:	2201      	movs	r2, #1
   2b58e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b590:	68fb      	ldr	r3, [r7, #12]
   2b592:	6a1a      	ldr	r2, [r3, #32]
   2b594:	69bb      	ldr	r3, [r7, #24]
   2b596:	0a5b      	lsrs	r3, r3, #9
   2b598:	18d2      	adds	r2, r2, r3
   2b59a:	231f      	movs	r3, #31
   2b59c:	18fc      	adds	r4, r7, r3
   2b59e:	68fb      	ldr	r3, [r7, #12]
   2b5a0:	0011      	movs	r1, r2
   2b5a2:	0018      	movs	r0, r3
   2b5a4:	4b5a      	ldr	r3, [pc, #360]	; (2b710 <put_fat+0x238>)
   2b5a6:	4798      	blx	r3
   2b5a8:	0003      	movs	r3, r0
   2b5aa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b5ac:	231f      	movs	r3, #31
   2b5ae:	18fb      	adds	r3, r7, r3
   2b5b0:	781b      	ldrb	r3, [r3, #0]
   2b5b2:	2b00      	cmp	r3, #0
   2b5b4:	d000      	beq.n	2b5b8 <put_fat+0xe0>
   2b5b6:	e09b      	b.n	2b6f0 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b5b8:	69bb      	ldr	r3, [r7, #24]
   2b5ba:	05db      	lsls	r3, r3, #23
   2b5bc:	0ddb      	lsrs	r3, r3, #23
   2b5be:	3330      	adds	r3, #48	; 0x30
   2b5c0:	68fa      	ldr	r2, [r7, #12]
   2b5c2:	18d3      	adds	r3, r2, r3
   2b5c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b5c6:	68bb      	ldr	r3, [r7, #8]
   2b5c8:	2201      	movs	r2, #1
   2b5ca:	4013      	ands	r3, r2
   2b5cc:	d003      	beq.n	2b5d6 <put_fat+0xfe>
   2b5ce:	687b      	ldr	r3, [r7, #4]
   2b5d0:	091b      	lsrs	r3, r3, #4
   2b5d2:	b2db      	uxtb	r3, r3
   2b5d4:	e00e      	b.n	2b5f4 <put_fat+0x11c>
   2b5d6:	697b      	ldr	r3, [r7, #20]
   2b5d8:	781b      	ldrb	r3, [r3, #0]
   2b5da:	b25b      	sxtb	r3, r3
   2b5dc:	220f      	movs	r2, #15
   2b5de:	4393      	bics	r3, r2
   2b5e0:	b25a      	sxtb	r2, r3
   2b5e2:	687b      	ldr	r3, [r7, #4]
   2b5e4:	0a1b      	lsrs	r3, r3, #8
   2b5e6:	b25b      	sxtb	r3, r3
   2b5e8:	210f      	movs	r1, #15
   2b5ea:	400b      	ands	r3, r1
   2b5ec:	b25b      	sxtb	r3, r3
   2b5ee:	4313      	orrs	r3, r2
   2b5f0:	b25b      	sxtb	r3, r3
   2b5f2:	b2db      	uxtb	r3, r3
   2b5f4:	697a      	ldr	r2, [r7, #20]
   2b5f6:	7013      	strb	r3, [r2, #0]
			break;
   2b5f8:	e07f      	b.n	2b6fa <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2b5fa:	68fb      	ldr	r3, [r7, #12]
   2b5fc:	6a1a      	ldr	r2, [r3, #32]
   2b5fe:	68bb      	ldr	r3, [r7, #8]
   2b600:	0a1b      	lsrs	r3, r3, #8
   2b602:	18d2      	adds	r2, r2, r3
   2b604:	231f      	movs	r3, #31
   2b606:	18fc      	adds	r4, r7, r3
   2b608:	68fb      	ldr	r3, [r7, #12]
   2b60a:	0011      	movs	r1, r2
   2b60c:	0018      	movs	r0, r3
   2b60e:	4b40      	ldr	r3, [pc, #256]	; (2b710 <put_fat+0x238>)
   2b610:	4798      	blx	r3
   2b612:	0003      	movs	r3, r0
   2b614:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b616:	231f      	movs	r3, #31
   2b618:	18fb      	adds	r3, r7, r3
   2b61a:	781b      	ldrb	r3, [r3, #0]
   2b61c:	2b00      	cmp	r3, #0
   2b61e:	d169      	bne.n	2b6f4 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2b620:	68bb      	ldr	r3, [r7, #8]
   2b622:	005a      	lsls	r2, r3, #1
   2b624:	23ff      	movs	r3, #255	; 0xff
   2b626:	005b      	lsls	r3, r3, #1
   2b628:	4013      	ands	r3, r2
   2b62a:	3330      	adds	r3, #48	; 0x30
   2b62c:	68fa      	ldr	r2, [r7, #12]
   2b62e:	18d3      	adds	r3, r2, r3
   2b630:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2b632:	687b      	ldr	r3, [r7, #4]
   2b634:	b2da      	uxtb	r2, r3
   2b636:	697b      	ldr	r3, [r7, #20]
   2b638:	701a      	strb	r2, [r3, #0]
   2b63a:	697b      	ldr	r3, [r7, #20]
   2b63c:	3301      	adds	r3, #1
   2b63e:	687a      	ldr	r2, [r7, #4]
   2b640:	b292      	uxth	r2, r2
   2b642:	0a12      	lsrs	r2, r2, #8
   2b644:	b292      	uxth	r2, r2
   2b646:	b2d2      	uxtb	r2, r2
   2b648:	701a      	strb	r2, [r3, #0]
			break;
   2b64a:	e056      	b.n	2b6fa <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2b64c:	68fb      	ldr	r3, [r7, #12]
   2b64e:	6a1a      	ldr	r2, [r3, #32]
   2b650:	68bb      	ldr	r3, [r7, #8]
   2b652:	09db      	lsrs	r3, r3, #7
   2b654:	18d2      	adds	r2, r2, r3
   2b656:	231f      	movs	r3, #31
   2b658:	18fc      	adds	r4, r7, r3
   2b65a:	68fb      	ldr	r3, [r7, #12]
   2b65c:	0011      	movs	r1, r2
   2b65e:	0018      	movs	r0, r3
   2b660:	4b2b      	ldr	r3, [pc, #172]	; (2b710 <put_fat+0x238>)
   2b662:	4798      	blx	r3
   2b664:	0003      	movs	r3, r0
   2b666:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b668:	231f      	movs	r3, #31
   2b66a:	18fb      	adds	r3, r7, r3
   2b66c:	781b      	ldrb	r3, [r3, #0]
   2b66e:	2b00      	cmp	r3, #0
   2b670:	d142      	bne.n	2b6f8 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2b672:	68bb      	ldr	r3, [r7, #8]
   2b674:	009a      	lsls	r2, r3, #2
   2b676:	23fe      	movs	r3, #254	; 0xfe
   2b678:	005b      	lsls	r3, r3, #1
   2b67a:	4013      	ands	r3, r2
   2b67c:	3330      	adds	r3, #48	; 0x30
   2b67e:	68fa      	ldr	r2, [r7, #12]
   2b680:	18d3      	adds	r3, r2, r3
   2b682:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2b684:	697b      	ldr	r3, [r7, #20]
   2b686:	3303      	adds	r3, #3
   2b688:	781b      	ldrb	r3, [r3, #0]
   2b68a:	061a      	lsls	r2, r3, #24
   2b68c:	697b      	ldr	r3, [r7, #20]
   2b68e:	3302      	adds	r3, #2
   2b690:	781b      	ldrb	r3, [r3, #0]
   2b692:	041b      	lsls	r3, r3, #16
   2b694:	4313      	orrs	r3, r2
   2b696:	697a      	ldr	r2, [r7, #20]
   2b698:	3201      	adds	r2, #1
   2b69a:	7812      	ldrb	r2, [r2, #0]
   2b69c:	0212      	lsls	r2, r2, #8
   2b69e:	4313      	orrs	r3, r2
   2b6a0:	697a      	ldr	r2, [r7, #20]
   2b6a2:	7812      	ldrb	r2, [r2, #0]
   2b6a4:	4313      	orrs	r3, r2
   2b6a6:	0f1b      	lsrs	r3, r3, #28
   2b6a8:	071b      	lsls	r3, r3, #28
   2b6aa:	687a      	ldr	r2, [r7, #4]
   2b6ac:	4313      	orrs	r3, r2
   2b6ae:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2b6b0:	687b      	ldr	r3, [r7, #4]
   2b6b2:	b2da      	uxtb	r2, r3
   2b6b4:	697b      	ldr	r3, [r7, #20]
   2b6b6:	701a      	strb	r2, [r3, #0]
   2b6b8:	697b      	ldr	r3, [r7, #20]
   2b6ba:	3301      	adds	r3, #1
   2b6bc:	687a      	ldr	r2, [r7, #4]
   2b6be:	b292      	uxth	r2, r2
   2b6c0:	0a12      	lsrs	r2, r2, #8
   2b6c2:	b292      	uxth	r2, r2
   2b6c4:	b2d2      	uxtb	r2, r2
   2b6c6:	701a      	strb	r2, [r3, #0]
   2b6c8:	697b      	ldr	r3, [r7, #20]
   2b6ca:	3302      	adds	r3, #2
   2b6cc:	687a      	ldr	r2, [r7, #4]
   2b6ce:	0c12      	lsrs	r2, r2, #16
   2b6d0:	b2d2      	uxtb	r2, r2
   2b6d2:	701a      	strb	r2, [r3, #0]
   2b6d4:	697b      	ldr	r3, [r7, #20]
   2b6d6:	3303      	adds	r3, #3
   2b6d8:	687a      	ldr	r2, [r7, #4]
   2b6da:	0e12      	lsrs	r2, r2, #24
   2b6dc:	b2d2      	uxtb	r2, r2
   2b6de:	701a      	strb	r2, [r3, #0]
			break;
   2b6e0:	e00b      	b.n	2b6fa <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b6e2:	231f      	movs	r3, #31
   2b6e4:	18fb      	adds	r3, r7, r3
   2b6e6:	2202      	movs	r2, #2
   2b6e8:	701a      	strb	r2, [r3, #0]
   2b6ea:	e006      	b.n	2b6fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b6ec:	46c0      	nop			; (mov r8, r8)
   2b6ee:	e004      	b.n	2b6fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b6f0:	46c0      	nop			; (mov r8, r8)
   2b6f2:	e002      	b.n	2b6fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b6f4:	46c0      	nop			; (mov r8, r8)
   2b6f6:	e000      	b.n	2b6fa <put_fat+0x222>
			if (res != FR_OK) break;
   2b6f8:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b6fa:	68fb      	ldr	r3, [r7, #12]
   2b6fc:	2201      	movs	r2, #1
   2b6fe:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b700:	231f      	movs	r3, #31
   2b702:	18fb      	adds	r3, r7, r3
   2b704:	781b      	ldrb	r3, [r3, #0]
}
   2b706:	0018      	movs	r0, r3
   2b708:	46bd      	mov	sp, r7
   2b70a:	b009      	add	sp, #36	; 0x24
   2b70c:	bd90      	pop	{r4, r7, pc}
   2b70e:	46c0      	nop			; (mov r8, r8)
   2b710:	0002b0d5 	.word	0x0002b0d5

0002b714 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b714:	b590      	push	{r4, r7, lr}
   2b716:	b085      	sub	sp, #20
   2b718:	af00      	add	r7, sp, #0
   2b71a:	6078      	str	r0, [r7, #4]
   2b71c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b71e:	683b      	ldr	r3, [r7, #0]
   2b720:	2b01      	cmp	r3, #1
   2b722:	d904      	bls.n	2b72e <remove_chain+0x1a>
   2b724:	687b      	ldr	r3, [r7, #4]
   2b726:	699a      	ldr	r2, [r3, #24]
   2b728:	683b      	ldr	r3, [r7, #0]
   2b72a:	429a      	cmp	r2, r3
   2b72c:	d804      	bhi.n	2b738 <remove_chain+0x24>
		res = FR_INT_ERR;
   2b72e:	230f      	movs	r3, #15
   2b730:	18fb      	adds	r3, r7, r3
   2b732:	2202      	movs	r2, #2
   2b734:	701a      	strb	r2, [r3, #0]
   2b736:	e045      	b.n	2b7c4 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b738:	230f      	movs	r3, #15
   2b73a:	18fb      	adds	r3, r7, r3
   2b73c:	2200      	movs	r2, #0
   2b73e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b740:	e037      	b.n	2b7b2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b742:	683a      	ldr	r2, [r7, #0]
   2b744:	687b      	ldr	r3, [r7, #4]
   2b746:	0011      	movs	r1, r2
   2b748:	0018      	movs	r0, r3
   2b74a:	4b22      	ldr	r3, [pc, #136]	; (2b7d4 <remove_chain+0xc0>)
   2b74c:	4798      	blx	r3
   2b74e:	0003      	movs	r3, r0
   2b750:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b752:	68bb      	ldr	r3, [r7, #8]
   2b754:	2b00      	cmp	r3, #0
   2b756:	d032      	beq.n	2b7be <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b758:	68bb      	ldr	r3, [r7, #8]
   2b75a:	2b01      	cmp	r3, #1
   2b75c:	d104      	bne.n	2b768 <remove_chain+0x54>
   2b75e:	230f      	movs	r3, #15
   2b760:	18fb      	adds	r3, r7, r3
   2b762:	2202      	movs	r2, #2
   2b764:	701a      	strb	r2, [r3, #0]
   2b766:	e02d      	b.n	2b7c4 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b768:	68bb      	ldr	r3, [r7, #8]
   2b76a:	3301      	adds	r3, #1
   2b76c:	d104      	bne.n	2b778 <remove_chain+0x64>
   2b76e:	230f      	movs	r3, #15
   2b770:	18fb      	adds	r3, r7, r3
   2b772:	2201      	movs	r2, #1
   2b774:	701a      	strb	r2, [r3, #0]
   2b776:	e025      	b.n	2b7c4 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b778:	230f      	movs	r3, #15
   2b77a:	18fc      	adds	r4, r7, r3
   2b77c:	6839      	ldr	r1, [r7, #0]
   2b77e:	687b      	ldr	r3, [r7, #4]
   2b780:	2200      	movs	r2, #0
   2b782:	0018      	movs	r0, r3
   2b784:	4b14      	ldr	r3, [pc, #80]	; (2b7d8 <remove_chain+0xc4>)
   2b786:	4798      	blx	r3
   2b788:	0003      	movs	r3, r0
   2b78a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b78c:	230f      	movs	r3, #15
   2b78e:	18fb      	adds	r3, r7, r3
   2b790:	781b      	ldrb	r3, [r3, #0]
   2b792:	2b00      	cmp	r3, #0
   2b794:	d115      	bne.n	2b7c2 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b796:	687b      	ldr	r3, [r7, #4]
   2b798:	691b      	ldr	r3, [r3, #16]
   2b79a:	3301      	adds	r3, #1
   2b79c:	d007      	beq.n	2b7ae <remove_chain+0x9a>
				fs->free_clust++;
   2b79e:	687b      	ldr	r3, [r7, #4]
   2b7a0:	691b      	ldr	r3, [r3, #16]
   2b7a2:	1c5a      	adds	r2, r3, #1
   2b7a4:	687b      	ldr	r3, [r7, #4]
   2b7a6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b7a8:	687b      	ldr	r3, [r7, #4]
   2b7aa:	2201      	movs	r2, #1
   2b7ac:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b7ae:	68bb      	ldr	r3, [r7, #8]
   2b7b0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b7b2:	687b      	ldr	r3, [r7, #4]
   2b7b4:	699a      	ldr	r2, [r3, #24]
   2b7b6:	683b      	ldr	r3, [r7, #0]
   2b7b8:	429a      	cmp	r2, r3
   2b7ba:	d8c2      	bhi.n	2b742 <remove_chain+0x2e>
   2b7bc:	e002      	b.n	2b7c4 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b7be:	46c0      	nop			; (mov r8, r8)
   2b7c0:	e000      	b.n	2b7c4 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b7c2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b7c4:	230f      	movs	r3, #15
   2b7c6:	18fb      	adds	r3, r7, r3
   2b7c8:	781b      	ldrb	r3, [r3, #0]
}
   2b7ca:	0018      	movs	r0, r3
   2b7cc:	46bd      	mov	sp, r7
   2b7ce:	b005      	add	sp, #20
   2b7d0:	bd90      	pop	{r4, r7, pc}
   2b7d2:	46c0      	nop			; (mov r8, r8)
   2b7d4:	0002b36d 	.word	0x0002b36d
   2b7d8:	0002b4d9 	.word	0x0002b4d9

0002b7dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b7dc:	b590      	push	{r4, r7, lr}
   2b7de:	b087      	sub	sp, #28
   2b7e0:	af00      	add	r7, sp, #0
   2b7e2:	6078      	str	r0, [r7, #4]
   2b7e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b7e6:	683b      	ldr	r3, [r7, #0]
   2b7e8:	2b00      	cmp	r3, #0
   2b7ea:	d10d      	bne.n	2b808 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b7ec:	687b      	ldr	r3, [r7, #4]
   2b7ee:	68db      	ldr	r3, [r3, #12]
   2b7f0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b7f2:	693b      	ldr	r3, [r7, #16]
   2b7f4:	2b00      	cmp	r3, #0
   2b7f6:	d004      	beq.n	2b802 <create_chain+0x26>
   2b7f8:	687b      	ldr	r3, [r7, #4]
   2b7fa:	699a      	ldr	r2, [r3, #24]
   2b7fc:	693b      	ldr	r3, [r7, #16]
   2b7fe:	429a      	cmp	r2, r3
   2b800:	d818      	bhi.n	2b834 <create_chain+0x58>
   2b802:	2301      	movs	r3, #1
   2b804:	613b      	str	r3, [r7, #16]
   2b806:	e015      	b.n	2b834 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b808:	683a      	ldr	r2, [r7, #0]
   2b80a:	687b      	ldr	r3, [r7, #4]
   2b80c:	0011      	movs	r1, r2
   2b80e:	0018      	movs	r0, r3
   2b810:	4b3e      	ldr	r3, [pc, #248]	; (2b90c <create_chain+0x130>)
   2b812:	4798      	blx	r3
   2b814:	0003      	movs	r3, r0
   2b816:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b818:	68bb      	ldr	r3, [r7, #8]
   2b81a:	2b01      	cmp	r3, #1
   2b81c:	d801      	bhi.n	2b822 <create_chain+0x46>
   2b81e:	2301      	movs	r3, #1
   2b820:	e070      	b.n	2b904 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b822:	687b      	ldr	r3, [r7, #4]
   2b824:	699a      	ldr	r2, [r3, #24]
   2b826:	68bb      	ldr	r3, [r7, #8]
   2b828:	429a      	cmp	r2, r3
   2b82a:	d901      	bls.n	2b830 <create_chain+0x54>
   2b82c:	68bb      	ldr	r3, [r7, #8]
   2b82e:	e069      	b.n	2b904 <create_chain+0x128>
		scl = clst;
   2b830:	683b      	ldr	r3, [r7, #0]
   2b832:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b834:	693b      	ldr	r3, [r7, #16]
   2b836:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b838:	697b      	ldr	r3, [r7, #20]
   2b83a:	3301      	adds	r3, #1
   2b83c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b83e:	687b      	ldr	r3, [r7, #4]
   2b840:	699a      	ldr	r2, [r3, #24]
   2b842:	697b      	ldr	r3, [r7, #20]
   2b844:	429a      	cmp	r2, r3
   2b846:	d807      	bhi.n	2b858 <create_chain+0x7c>
			ncl = 2;
   2b848:	2302      	movs	r3, #2
   2b84a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b84c:	697a      	ldr	r2, [r7, #20]
   2b84e:	693b      	ldr	r3, [r7, #16]
   2b850:	429a      	cmp	r2, r3
   2b852:	d901      	bls.n	2b858 <create_chain+0x7c>
   2b854:	2300      	movs	r3, #0
   2b856:	e055      	b.n	2b904 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b858:	697a      	ldr	r2, [r7, #20]
   2b85a:	687b      	ldr	r3, [r7, #4]
   2b85c:	0011      	movs	r1, r2
   2b85e:	0018      	movs	r0, r3
   2b860:	4b2a      	ldr	r3, [pc, #168]	; (2b90c <create_chain+0x130>)
   2b862:	4798      	blx	r3
   2b864:	0003      	movs	r3, r0
   2b866:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b868:	68bb      	ldr	r3, [r7, #8]
   2b86a:	2b00      	cmp	r3, #0
   2b86c:	d00d      	beq.n	2b88a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b86e:	68bb      	ldr	r3, [r7, #8]
   2b870:	3301      	adds	r3, #1
   2b872:	d002      	beq.n	2b87a <create_chain+0x9e>
   2b874:	68bb      	ldr	r3, [r7, #8]
   2b876:	2b01      	cmp	r3, #1
   2b878:	d101      	bne.n	2b87e <create_chain+0xa2>
			return cs;
   2b87a:	68bb      	ldr	r3, [r7, #8]
   2b87c:	e042      	b.n	2b904 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b87e:	697a      	ldr	r2, [r7, #20]
   2b880:	693b      	ldr	r3, [r7, #16]
   2b882:	429a      	cmp	r2, r3
   2b884:	d1d8      	bne.n	2b838 <create_chain+0x5c>
   2b886:	2300      	movs	r3, #0
   2b888:	e03c      	b.n	2b904 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b88a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b88c:	230f      	movs	r3, #15
   2b88e:	18fc      	adds	r4, r7, r3
   2b890:	4a1f      	ldr	r2, [pc, #124]	; (2b910 <create_chain+0x134>)
   2b892:	6979      	ldr	r1, [r7, #20]
   2b894:	687b      	ldr	r3, [r7, #4]
   2b896:	0018      	movs	r0, r3
   2b898:	4b1e      	ldr	r3, [pc, #120]	; (2b914 <create_chain+0x138>)
   2b89a:	4798      	blx	r3
   2b89c:	0003      	movs	r3, r0
   2b89e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b8a0:	230f      	movs	r3, #15
   2b8a2:	18fb      	adds	r3, r7, r3
   2b8a4:	781b      	ldrb	r3, [r3, #0]
   2b8a6:	2b00      	cmp	r3, #0
   2b8a8:	d10c      	bne.n	2b8c4 <create_chain+0xe8>
   2b8aa:	683b      	ldr	r3, [r7, #0]
   2b8ac:	2b00      	cmp	r3, #0
   2b8ae:	d009      	beq.n	2b8c4 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b8b0:	230f      	movs	r3, #15
   2b8b2:	18fc      	adds	r4, r7, r3
   2b8b4:	697a      	ldr	r2, [r7, #20]
   2b8b6:	6839      	ldr	r1, [r7, #0]
   2b8b8:	687b      	ldr	r3, [r7, #4]
   2b8ba:	0018      	movs	r0, r3
   2b8bc:	4b15      	ldr	r3, [pc, #84]	; (2b914 <create_chain+0x138>)
   2b8be:	4798      	blx	r3
   2b8c0:	0003      	movs	r3, r0
   2b8c2:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b8c4:	230f      	movs	r3, #15
   2b8c6:	18fb      	adds	r3, r7, r3
   2b8c8:	781b      	ldrb	r3, [r3, #0]
   2b8ca:	2b00      	cmp	r3, #0
   2b8cc:	d10f      	bne.n	2b8ee <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2b8ce:	687b      	ldr	r3, [r7, #4]
   2b8d0:	697a      	ldr	r2, [r7, #20]
   2b8d2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2b8d4:	687b      	ldr	r3, [r7, #4]
   2b8d6:	691b      	ldr	r3, [r3, #16]
   2b8d8:	3301      	adds	r3, #1
   2b8da:	d012      	beq.n	2b902 <create_chain+0x126>
			fs->free_clust--;
   2b8dc:	687b      	ldr	r3, [r7, #4]
   2b8de:	691b      	ldr	r3, [r3, #16]
   2b8e0:	1e5a      	subs	r2, r3, #1
   2b8e2:	687b      	ldr	r3, [r7, #4]
   2b8e4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2b8e6:	687b      	ldr	r3, [r7, #4]
   2b8e8:	2201      	movs	r2, #1
   2b8ea:	715a      	strb	r2, [r3, #5]
   2b8ec:	e009      	b.n	2b902 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2b8ee:	230f      	movs	r3, #15
   2b8f0:	18fb      	adds	r3, r7, r3
   2b8f2:	781b      	ldrb	r3, [r3, #0]
   2b8f4:	2b01      	cmp	r3, #1
   2b8f6:	d102      	bne.n	2b8fe <create_chain+0x122>
   2b8f8:	2301      	movs	r3, #1
   2b8fa:	425b      	negs	r3, r3
   2b8fc:	e000      	b.n	2b900 <create_chain+0x124>
   2b8fe:	2301      	movs	r3, #1
   2b900:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2b902:	697b      	ldr	r3, [r7, #20]
}
   2b904:	0018      	movs	r0, r3
   2b906:	46bd      	mov	sp, r7
   2b908:	b007      	add	sp, #28
   2b90a:	bd90      	pop	{r4, r7, pc}
   2b90c:	0002b36d 	.word	0x0002b36d
   2b910:	0fffffff 	.word	0x0fffffff
   2b914:	0002b4d9 	.word	0x0002b4d9

0002b918 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2b918:	b580      	push	{r7, lr}
   2b91a:	b084      	sub	sp, #16
   2b91c:	af00      	add	r7, sp, #0
   2b91e:	6078      	str	r0, [r7, #4]
   2b920:	000a      	movs	r2, r1
   2b922:	1cbb      	adds	r3, r7, #2
   2b924:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2b926:	687b      	ldr	r3, [r7, #4]
   2b928:	1cba      	adds	r2, r7, #2
   2b92a:	8812      	ldrh	r2, [r2, #0]
   2b92c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2b92e:	687b      	ldr	r3, [r7, #4]
   2b930:	689b      	ldr	r3, [r3, #8]
   2b932:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2b934:	68fb      	ldr	r3, [r7, #12]
   2b936:	2b01      	cmp	r3, #1
   2b938:	d005      	beq.n	2b946 <dir_sdi+0x2e>
   2b93a:	687b      	ldr	r3, [r7, #4]
   2b93c:	681b      	ldr	r3, [r3, #0]
   2b93e:	699a      	ldr	r2, [r3, #24]
   2b940:	68fb      	ldr	r3, [r7, #12]
   2b942:	429a      	cmp	r2, r3
   2b944:	d801      	bhi.n	2b94a <dir_sdi+0x32>
		return FR_INT_ERR;
   2b946:	2302      	movs	r3, #2
   2b948:	e075      	b.n	2ba36 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2b94a:	68fb      	ldr	r3, [r7, #12]
   2b94c:	2b00      	cmp	r3, #0
   2b94e:	d108      	bne.n	2b962 <dir_sdi+0x4a>
   2b950:	687b      	ldr	r3, [r7, #4]
   2b952:	681b      	ldr	r3, [r3, #0]
   2b954:	781b      	ldrb	r3, [r3, #0]
   2b956:	2b03      	cmp	r3, #3
   2b958:	d103      	bne.n	2b962 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2b95a:	687b      	ldr	r3, [r7, #4]
   2b95c:	681b      	ldr	r3, [r3, #0]
   2b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b960:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2b962:	68fb      	ldr	r3, [r7, #12]
   2b964:	2b00      	cmp	r3, #0
   2b966:	d116      	bne.n	2b996 <dir_sdi+0x7e>
		dj->clust = clst;
   2b968:	687b      	ldr	r3, [r7, #4]
   2b96a:	68fa      	ldr	r2, [r7, #12]
   2b96c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2b96e:	687b      	ldr	r3, [r7, #4]
   2b970:	681b      	ldr	r3, [r3, #0]
   2b972:	891b      	ldrh	r3, [r3, #8]
   2b974:	1cba      	adds	r2, r7, #2
   2b976:	8812      	ldrh	r2, [r2, #0]
   2b978:	429a      	cmp	r2, r3
   2b97a:	d301      	bcc.n	2b980 <dir_sdi+0x68>
			return FR_INT_ERR;
   2b97c:	2302      	movs	r3, #2
   2b97e:	e05a      	b.n	2ba36 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b980:	687b      	ldr	r3, [r7, #4]
   2b982:	681b      	ldr	r3, [r3, #0]
   2b984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b986:	1cba      	adds	r2, r7, #2
   2b988:	8812      	ldrh	r2, [r2, #0]
   2b98a:	0912      	lsrs	r2, r2, #4
   2b98c:	b292      	uxth	r2, r2
   2b98e:	189a      	adds	r2, r3, r2
   2b990:	687b      	ldr	r3, [r7, #4]
   2b992:	611a      	str	r2, [r3, #16]
   2b994:	e042      	b.n	2ba1c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2b996:	687b      	ldr	r3, [r7, #4]
   2b998:	681b      	ldr	r3, [r3, #0]
   2b99a:	789b      	ldrb	r3, [r3, #2]
   2b99c:	b29a      	uxth	r2, r3
   2b99e:	230a      	movs	r3, #10
   2b9a0:	18fb      	adds	r3, r7, r3
   2b9a2:	0112      	lsls	r2, r2, #4
   2b9a4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b9a6:	e020      	b.n	2b9ea <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2b9a8:	687b      	ldr	r3, [r7, #4]
   2b9aa:	681b      	ldr	r3, [r3, #0]
   2b9ac:	68fa      	ldr	r2, [r7, #12]
   2b9ae:	0011      	movs	r1, r2
   2b9b0:	0018      	movs	r0, r3
   2b9b2:	4b23      	ldr	r3, [pc, #140]	; (2ba40 <dir_sdi+0x128>)
   2b9b4:	4798      	blx	r3
   2b9b6:	0003      	movs	r3, r0
   2b9b8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2b9ba:	68fb      	ldr	r3, [r7, #12]
   2b9bc:	3301      	adds	r3, #1
   2b9be:	d101      	bne.n	2b9c4 <dir_sdi+0xac>
   2b9c0:	2301      	movs	r3, #1
   2b9c2:	e038      	b.n	2ba36 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2b9c4:	68fb      	ldr	r3, [r7, #12]
   2b9c6:	2b01      	cmp	r3, #1
   2b9c8:	d905      	bls.n	2b9d6 <dir_sdi+0xbe>
   2b9ca:	687b      	ldr	r3, [r7, #4]
   2b9cc:	681b      	ldr	r3, [r3, #0]
   2b9ce:	699a      	ldr	r2, [r3, #24]
   2b9d0:	68fb      	ldr	r3, [r7, #12]
   2b9d2:	429a      	cmp	r2, r3
   2b9d4:	d801      	bhi.n	2b9da <dir_sdi+0xc2>
				return FR_INT_ERR;
   2b9d6:	2302      	movs	r3, #2
   2b9d8:	e02d      	b.n	2ba36 <dir_sdi+0x11e>
			idx -= ic;
   2b9da:	1cbb      	adds	r3, r7, #2
   2b9dc:	1cb9      	adds	r1, r7, #2
   2b9de:	220a      	movs	r2, #10
   2b9e0:	18ba      	adds	r2, r7, r2
   2b9e2:	8809      	ldrh	r1, [r1, #0]
   2b9e4:	8812      	ldrh	r2, [r2, #0]
   2b9e6:	1a8a      	subs	r2, r1, r2
   2b9e8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b9ea:	1cba      	adds	r2, r7, #2
   2b9ec:	230a      	movs	r3, #10
   2b9ee:	18fb      	adds	r3, r7, r3
   2b9f0:	8812      	ldrh	r2, [r2, #0]
   2b9f2:	881b      	ldrh	r3, [r3, #0]
   2b9f4:	429a      	cmp	r2, r3
   2b9f6:	d2d7      	bcs.n	2b9a8 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2b9f8:	687b      	ldr	r3, [r7, #4]
   2b9fa:	68fa      	ldr	r2, [r7, #12]
   2b9fc:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b9fe:	687b      	ldr	r3, [r7, #4]
   2ba00:	681b      	ldr	r3, [r3, #0]
   2ba02:	68fa      	ldr	r2, [r7, #12]
   2ba04:	0011      	movs	r1, r2
   2ba06:	0018      	movs	r0, r3
   2ba08:	4b0e      	ldr	r3, [pc, #56]	; (2ba44 <dir_sdi+0x12c>)
   2ba0a:	4798      	blx	r3
   2ba0c:	0002      	movs	r2, r0
   2ba0e:	1cbb      	adds	r3, r7, #2
   2ba10:	881b      	ldrh	r3, [r3, #0]
   2ba12:	091b      	lsrs	r3, r3, #4
   2ba14:	b29b      	uxth	r3, r3
   2ba16:	18d2      	adds	r2, r2, r3
   2ba18:	687b      	ldr	r3, [r7, #4]
   2ba1a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2ba1c:	687b      	ldr	r3, [r7, #4]
   2ba1e:	681b      	ldr	r3, [r3, #0]
   2ba20:	3330      	adds	r3, #48	; 0x30
   2ba22:	001a      	movs	r2, r3
   2ba24:	1cbb      	adds	r3, r7, #2
   2ba26:	881b      	ldrh	r3, [r3, #0]
   2ba28:	210f      	movs	r1, #15
   2ba2a:	400b      	ands	r3, r1
   2ba2c:	015b      	lsls	r3, r3, #5
   2ba2e:	18d2      	adds	r2, r2, r3
   2ba30:	687b      	ldr	r3, [r7, #4]
   2ba32:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2ba34:	2300      	movs	r3, #0
}
   2ba36:	0018      	movs	r0, r3
   2ba38:	46bd      	mov	sp, r7
   2ba3a:	b004      	add	sp, #16
   2ba3c:	bd80      	pop	{r7, pc}
   2ba3e:	46c0      	nop			; (mov r8, r8)
   2ba40:	0002b36d 	.word	0x0002b36d
   2ba44:	0002b335 	.word	0x0002b335

0002ba48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2ba48:	b590      	push	{r4, r7, lr}
   2ba4a:	b085      	sub	sp, #20
   2ba4c:	af00      	add	r7, sp, #0
   2ba4e:	6078      	str	r0, [r7, #4]
   2ba50:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2ba52:	687b      	ldr	r3, [r7, #4]
   2ba54:	88da      	ldrh	r2, [r3, #6]
   2ba56:	2308      	movs	r3, #8
   2ba58:	18fb      	adds	r3, r7, r3
   2ba5a:	3201      	adds	r2, #1
   2ba5c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2ba5e:	2308      	movs	r3, #8
   2ba60:	18fb      	adds	r3, r7, r3
   2ba62:	881b      	ldrh	r3, [r3, #0]
   2ba64:	2b00      	cmp	r3, #0
   2ba66:	d003      	beq.n	2ba70 <dir_next+0x28>
   2ba68:	687b      	ldr	r3, [r7, #4]
   2ba6a:	691b      	ldr	r3, [r3, #16]
   2ba6c:	2b00      	cmp	r3, #0
   2ba6e:	d101      	bne.n	2ba74 <dir_next+0x2c>
		return FR_NO_FILE;
   2ba70:	2304      	movs	r3, #4
   2ba72:	e0d2      	b.n	2bc1a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2ba74:	2308      	movs	r3, #8
   2ba76:	18fb      	adds	r3, r7, r3
   2ba78:	881b      	ldrh	r3, [r3, #0]
   2ba7a:	220f      	movs	r2, #15
   2ba7c:	4013      	ands	r3, r2
   2ba7e:	b29b      	uxth	r3, r3
   2ba80:	2b00      	cmp	r3, #0
   2ba82:	d000      	beq.n	2ba86 <dir_next+0x3e>
   2ba84:	e0b6      	b.n	2bbf4 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2ba86:	687b      	ldr	r3, [r7, #4]
   2ba88:	691b      	ldr	r3, [r3, #16]
   2ba8a:	1c5a      	adds	r2, r3, #1
   2ba8c:	687b      	ldr	r3, [r7, #4]
   2ba8e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2ba90:	687b      	ldr	r3, [r7, #4]
   2ba92:	68db      	ldr	r3, [r3, #12]
   2ba94:	2b00      	cmp	r3, #0
   2ba96:	d10a      	bne.n	2baae <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2ba98:	687b      	ldr	r3, [r7, #4]
   2ba9a:	681b      	ldr	r3, [r3, #0]
   2ba9c:	891b      	ldrh	r3, [r3, #8]
   2ba9e:	2208      	movs	r2, #8
   2baa0:	18ba      	adds	r2, r7, r2
   2baa2:	8812      	ldrh	r2, [r2, #0]
   2baa4:	429a      	cmp	r2, r3
   2baa6:	d200      	bcs.n	2baaa <dir_next+0x62>
   2baa8:	e0a4      	b.n	2bbf4 <dir_next+0x1ac>
				return FR_NO_FILE;
   2baaa:	2304      	movs	r3, #4
   2baac:	e0b5      	b.n	2bc1a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2baae:	2308      	movs	r3, #8
   2bab0:	18fb      	adds	r3, r7, r3
   2bab2:	881b      	ldrh	r3, [r3, #0]
   2bab4:	091b      	lsrs	r3, r3, #4
   2bab6:	b29b      	uxth	r3, r3
   2bab8:	001a      	movs	r2, r3
   2baba:	687b      	ldr	r3, [r7, #4]
   2babc:	681b      	ldr	r3, [r3, #0]
   2babe:	789b      	ldrb	r3, [r3, #2]
   2bac0:	3b01      	subs	r3, #1
   2bac2:	4013      	ands	r3, r2
   2bac4:	d000      	beq.n	2bac8 <dir_next+0x80>
   2bac6:	e095      	b.n	2bbf4 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2bac8:	687b      	ldr	r3, [r7, #4]
   2baca:	681a      	ldr	r2, [r3, #0]
   2bacc:	687b      	ldr	r3, [r7, #4]
   2bace:	68db      	ldr	r3, [r3, #12]
   2bad0:	0019      	movs	r1, r3
   2bad2:	0010      	movs	r0, r2
   2bad4:	4b53      	ldr	r3, [pc, #332]	; (2bc24 <dir_next+0x1dc>)
   2bad6:	4798      	blx	r3
   2bad8:	0003      	movs	r3, r0
   2bada:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2badc:	68fb      	ldr	r3, [r7, #12]
   2bade:	2b01      	cmp	r3, #1
   2bae0:	d801      	bhi.n	2bae6 <dir_next+0x9e>
   2bae2:	2302      	movs	r3, #2
   2bae4:	e099      	b.n	2bc1a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bae6:	68fb      	ldr	r3, [r7, #12]
   2bae8:	3301      	adds	r3, #1
   2baea:	d101      	bne.n	2baf0 <dir_next+0xa8>
   2baec:	2301      	movs	r3, #1
   2baee:	e094      	b.n	2bc1a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2baf0:	687b      	ldr	r3, [r7, #4]
   2baf2:	681b      	ldr	r3, [r3, #0]
   2baf4:	699a      	ldr	r2, [r3, #24]
   2baf6:	68fb      	ldr	r3, [r7, #12]
   2baf8:	429a      	cmp	r2, r3
   2bafa:	d900      	bls.n	2bafe <dir_next+0xb6>
   2bafc:	e06d      	b.n	2bbda <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2bafe:	683b      	ldr	r3, [r7, #0]
   2bb00:	2b00      	cmp	r3, #0
   2bb02:	d101      	bne.n	2bb08 <dir_next+0xc0>
   2bb04:	2304      	movs	r3, #4
   2bb06:	e088      	b.n	2bc1a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2bb08:	687b      	ldr	r3, [r7, #4]
   2bb0a:	681a      	ldr	r2, [r3, #0]
   2bb0c:	687b      	ldr	r3, [r7, #4]
   2bb0e:	68db      	ldr	r3, [r3, #12]
   2bb10:	0019      	movs	r1, r3
   2bb12:	0010      	movs	r0, r2
   2bb14:	4b44      	ldr	r3, [pc, #272]	; (2bc28 <dir_next+0x1e0>)
   2bb16:	4798      	blx	r3
   2bb18:	0003      	movs	r3, r0
   2bb1a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2bb1c:	68fb      	ldr	r3, [r7, #12]
   2bb1e:	2b00      	cmp	r3, #0
   2bb20:	d101      	bne.n	2bb26 <dir_next+0xde>
   2bb22:	2307      	movs	r3, #7
   2bb24:	e079      	b.n	2bc1a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2bb26:	68fb      	ldr	r3, [r7, #12]
   2bb28:	2b01      	cmp	r3, #1
   2bb2a:	d101      	bne.n	2bb30 <dir_next+0xe8>
   2bb2c:	2302      	movs	r3, #2
   2bb2e:	e074      	b.n	2bc1a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bb30:	68fb      	ldr	r3, [r7, #12]
   2bb32:	3301      	adds	r3, #1
   2bb34:	d101      	bne.n	2bb3a <dir_next+0xf2>
   2bb36:	2301      	movs	r3, #1
   2bb38:	e06f      	b.n	2bc1a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2bb3a:	687b      	ldr	r3, [r7, #4]
   2bb3c:	681b      	ldr	r3, [r3, #0]
   2bb3e:	2100      	movs	r1, #0
   2bb40:	0018      	movs	r0, r3
   2bb42:	4b3a      	ldr	r3, [pc, #232]	; (2bc2c <dir_next+0x1e4>)
   2bb44:	4798      	blx	r3
   2bb46:	1e03      	subs	r3, r0, #0
   2bb48:	d001      	beq.n	2bb4e <dir_next+0x106>
   2bb4a:	2301      	movs	r3, #1
   2bb4c:	e065      	b.n	2bc1a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2bb4e:	687b      	ldr	r3, [r7, #4]
   2bb50:	681b      	ldr	r3, [r3, #0]
   2bb52:	3330      	adds	r3, #48	; 0x30
   2bb54:	0018      	movs	r0, r3
   2bb56:	2380      	movs	r3, #128	; 0x80
   2bb58:	009b      	lsls	r3, r3, #2
   2bb5a:	001a      	movs	r2, r3
   2bb5c:	2100      	movs	r1, #0
   2bb5e:	4b34      	ldr	r3, [pc, #208]	; (2bc30 <dir_next+0x1e8>)
   2bb60:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2bb62:	687b      	ldr	r3, [r7, #4]
   2bb64:	681c      	ldr	r4, [r3, #0]
   2bb66:	687b      	ldr	r3, [r7, #4]
   2bb68:	681b      	ldr	r3, [r3, #0]
   2bb6a:	68fa      	ldr	r2, [r7, #12]
   2bb6c:	0011      	movs	r1, r2
   2bb6e:	0018      	movs	r0, r3
   2bb70:	4b30      	ldr	r3, [pc, #192]	; (2bc34 <dir_next+0x1ec>)
   2bb72:	4798      	blx	r3
   2bb74:	0003      	movs	r3, r0
   2bb76:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bb78:	230b      	movs	r3, #11
   2bb7a:	18fb      	adds	r3, r7, r3
   2bb7c:	2200      	movs	r2, #0
   2bb7e:	701a      	strb	r2, [r3, #0]
   2bb80:	e019      	b.n	2bbb6 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2bb82:	687b      	ldr	r3, [r7, #4]
   2bb84:	681b      	ldr	r3, [r3, #0]
   2bb86:	2201      	movs	r2, #1
   2bb88:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2bb8a:	687b      	ldr	r3, [r7, #4]
   2bb8c:	681b      	ldr	r3, [r3, #0]
   2bb8e:	2100      	movs	r1, #0
   2bb90:	0018      	movs	r0, r3
   2bb92:	4b26      	ldr	r3, [pc, #152]	; (2bc2c <dir_next+0x1e4>)
   2bb94:	4798      	blx	r3
   2bb96:	1e03      	subs	r3, r0, #0
   2bb98:	d001      	beq.n	2bb9e <dir_next+0x156>
   2bb9a:	2301      	movs	r3, #1
   2bb9c:	e03d      	b.n	2bc1a <dir_next+0x1d2>
						dj->fs->winsect++;
   2bb9e:	687b      	ldr	r3, [r7, #4]
   2bba0:	681b      	ldr	r3, [r3, #0]
   2bba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bba4:	3201      	adds	r2, #1
   2bba6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bba8:	230b      	movs	r3, #11
   2bbaa:	18fb      	adds	r3, r7, r3
   2bbac:	781a      	ldrb	r2, [r3, #0]
   2bbae:	230b      	movs	r3, #11
   2bbb0:	18fb      	adds	r3, r7, r3
   2bbb2:	3201      	adds	r2, #1
   2bbb4:	701a      	strb	r2, [r3, #0]
   2bbb6:	687b      	ldr	r3, [r7, #4]
   2bbb8:	681b      	ldr	r3, [r3, #0]
   2bbba:	789b      	ldrb	r3, [r3, #2]
   2bbbc:	220b      	movs	r2, #11
   2bbbe:	18ba      	adds	r2, r7, r2
   2bbc0:	7812      	ldrb	r2, [r2, #0]
   2bbc2:	429a      	cmp	r2, r3
   2bbc4:	d3dd      	bcc.n	2bb82 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2bbc6:	687b      	ldr	r3, [r7, #4]
   2bbc8:	681b      	ldr	r3, [r3, #0]
   2bbca:	687a      	ldr	r2, [r7, #4]
   2bbcc:	6812      	ldr	r2, [r2, #0]
   2bbce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2bbd0:	220b      	movs	r2, #11
   2bbd2:	18ba      	adds	r2, r7, r2
   2bbd4:	7812      	ldrb	r2, [r2, #0]
   2bbd6:	1a8a      	subs	r2, r1, r2
   2bbd8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2bbda:	687b      	ldr	r3, [r7, #4]
   2bbdc:	68fa      	ldr	r2, [r7, #12]
   2bbde:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2bbe0:	687b      	ldr	r3, [r7, #4]
   2bbe2:	681b      	ldr	r3, [r3, #0]
   2bbe4:	68fa      	ldr	r2, [r7, #12]
   2bbe6:	0011      	movs	r1, r2
   2bbe8:	0018      	movs	r0, r3
   2bbea:	4b12      	ldr	r3, [pc, #72]	; (2bc34 <dir_next+0x1ec>)
   2bbec:	4798      	blx	r3
   2bbee:	0002      	movs	r2, r0
   2bbf0:	687b      	ldr	r3, [r7, #4]
   2bbf2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2bbf4:	687b      	ldr	r3, [r7, #4]
   2bbf6:	2208      	movs	r2, #8
   2bbf8:	18ba      	adds	r2, r7, r2
   2bbfa:	8812      	ldrh	r2, [r2, #0]
   2bbfc:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2bbfe:	687b      	ldr	r3, [r7, #4]
   2bc00:	681b      	ldr	r3, [r3, #0]
   2bc02:	3330      	adds	r3, #48	; 0x30
   2bc04:	001a      	movs	r2, r3
   2bc06:	2308      	movs	r3, #8
   2bc08:	18fb      	adds	r3, r7, r3
   2bc0a:	881b      	ldrh	r3, [r3, #0]
   2bc0c:	210f      	movs	r1, #15
   2bc0e:	400b      	ands	r3, r1
   2bc10:	015b      	lsls	r3, r3, #5
   2bc12:	18d2      	adds	r2, r2, r3
   2bc14:	687b      	ldr	r3, [r7, #4]
   2bc16:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2bc18:	2300      	movs	r3, #0
}
   2bc1a:	0018      	movs	r0, r3
   2bc1c:	46bd      	mov	sp, r7
   2bc1e:	b005      	add	sp, #20
   2bc20:	bd90      	pop	{r4, r7, pc}
   2bc22:	46c0      	nop			; (mov r8, r8)
   2bc24:	0002b36d 	.word	0x0002b36d
   2bc28:	0002b7dd 	.word	0x0002b7dd
   2bc2c:	0002b0d5 	.word	0x0002b0d5
   2bc30:	0002b029 	.word	0x0002b029
   2bc34:	0002b335 	.word	0x0002b335

0002bc38 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2bc38:	b590      	push	{r4, r7, lr}
   2bc3a:	b087      	sub	sp, #28
   2bc3c:	af00      	add	r7, sp, #0
   2bc3e:	6078      	str	r0, [r7, #4]
   2bc40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2bc42:	683b      	ldr	r3, [r7, #0]
   2bc44:	781b      	ldrb	r3, [r3, #0]
   2bc46:	001a      	movs	r2, r3
   2bc48:	2340      	movs	r3, #64	; 0x40
   2bc4a:	439a      	bics	r2, r3
   2bc4c:	0013      	movs	r3, r2
   2bc4e:	1e5a      	subs	r2, r3, #1
   2bc50:	0013      	movs	r3, r2
   2bc52:	005b      	lsls	r3, r3, #1
   2bc54:	189b      	adds	r3, r3, r2
   2bc56:	009b      	lsls	r3, r3, #2
   2bc58:	189b      	adds	r3, r3, r2
   2bc5a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2bc5c:	2300      	movs	r3, #0
   2bc5e:	613b      	str	r3, [r7, #16]
   2bc60:	230e      	movs	r3, #14
   2bc62:	18fb      	adds	r3, r7, r3
   2bc64:	2201      	movs	r2, #1
   2bc66:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2bc68:	4a31      	ldr	r2, [pc, #196]	; (2bd30 <cmp_lfn+0xf8>)
   2bc6a:	693b      	ldr	r3, [r7, #16]
   2bc6c:	18d3      	adds	r3, r2, r3
   2bc6e:	781b      	ldrb	r3, [r3, #0]
   2bc70:	3301      	adds	r3, #1
   2bc72:	683a      	ldr	r2, [r7, #0]
   2bc74:	18d3      	adds	r3, r2, r3
   2bc76:	781b      	ldrb	r3, [r3, #0]
   2bc78:	021b      	lsls	r3, r3, #8
   2bc7a:	b21a      	sxth	r2, r3
   2bc7c:	492c      	ldr	r1, [pc, #176]	; (2bd30 <cmp_lfn+0xf8>)
   2bc7e:	693b      	ldr	r3, [r7, #16]
   2bc80:	18cb      	adds	r3, r1, r3
   2bc82:	781b      	ldrb	r3, [r3, #0]
   2bc84:	0019      	movs	r1, r3
   2bc86:	683b      	ldr	r3, [r7, #0]
   2bc88:	185b      	adds	r3, r3, r1
   2bc8a:	781b      	ldrb	r3, [r3, #0]
   2bc8c:	b21b      	sxth	r3, r3
   2bc8e:	4313      	orrs	r3, r2
   2bc90:	b21a      	sxth	r2, r3
   2bc92:	230c      	movs	r3, #12
   2bc94:	18fb      	adds	r3, r7, r3
   2bc96:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2bc98:	230e      	movs	r3, #14
   2bc9a:	18fb      	adds	r3, r7, r3
   2bc9c:	881b      	ldrh	r3, [r3, #0]
   2bc9e:	2b00      	cmp	r3, #0
   2bca0:	d01f      	beq.n	2bce2 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2bca2:	230e      	movs	r3, #14
   2bca4:	18fc      	adds	r4, r7, r3
   2bca6:	230c      	movs	r3, #12
   2bca8:	18fb      	adds	r3, r7, r3
   2bcaa:	881b      	ldrh	r3, [r3, #0]
   2bcac:	0018      	movs	r0, r3
   2bcae:	4b21      	ldr	r3, [pc, #132]	; (2bd34 <cmp_lfn+0xfc>)
   2bcb0:	4798      	blx	r3
   2bcb2:	0003      	movs	r3, r0
   2bcb4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2bcb6:	697b      	ldr	r3, [r7, #20]
   2bcb8:	2bfe      	cmp	r3, #254	; 0xfe
   2bcba:	d810      	bhi.n	2bcde <cmp_lfn+0xa6>
   2bcbc:	697b      	ldr	r3, [r7, #20]
   2bcbe:	1c5a      	adds	r2, r3, #1
   2bcc0:	617a      	str	r2, [r7, #20]
   2bcc2:	005b      	lsls	r3, r3, #1
   2bcc4:	687a      	ldr	r2, [r7, #4]
   2bcc6:	18d3      	adds	r3, r2, r3
   2bcc8:	881b      	ldrh	r3, [r3, #0]
   2bcca:	0018      	movs	r0, r3
   2bccc:	4b19      	ldr	r3, [pc, #100]	; (2bd34 <cmp_lfn+0xfc>)
   2bcce:	4798      	blx	r3
   2bcd0:	0003      	movs	r3, r0
   2bcd2:	001a      	movs	r2, r3
   2bcd4:	230e      	movs	r3, #14
   2bcd6:	18fb      	adds	r3, r7, r3
   2bcd8:	881b      	ldrh	r3, [r3, #0]
   2bcda:	4293      	cmp	r3, r2
   2bcdc:	d009      	beq.n	2bcf2 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2bcde:	2300      	movs	r3, #0
   2bce0:	e022      	b.n	2bd28 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2bce2:	230c      	movs	r3, #12
   2bce4:	18fb      	adds	r3, r7, r3
   2bce6:	881b      	ldrh	r3, [r3, #0]
   2bce8:	4a13      	ldr	r2, [pc, #76]	; (2bd38 <cmp_lfn+0x100>)
   2bcea:	4293      	cmp	r3, r2
   2bcec:	d001      	beq.n	2bcf2 <cmp_lfn+0xba>
   2bcee:	2300      	movs	r3, #0
   2bcf0:	e01a      	b.n	2bd28 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2bcf2:	693b      	ldr	r3, [r7, #16]
   2bcf4:	3301      	adds	r3, #1
   2bcf6:	613b      	str	r3, [r7, #16]
   2bcf8:	693b      	ldr	r3, [r7, #16]
   2bcfa:	2b0c      	cmp	r3, #12
   2bcfc:	d9b4      	bls.n	2bc68 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2bcfe:	683b      	ldr	r3, [r7, #0]
   2bd00:	781b      	ldrb	r3, [r3, #0]
   2bd02:	001a      	movs	r2, r3
   2bd04:	2340      	movs	r3, #64	; 0x40
   2bd06:	4013      	ands	r3, r2
   2bd08:	d00d      	beq.n	2bd26 <cmp_lfn+0xee>
   2bd0a:	230e      	movs	r3, #14
   2bd0c:	18fb      	adds	r3, r7, r3
   2bd0e:	881b      	ldrh	r3, [r3, #0]
   2bd10:	2b00      	cmp	r3, #0
   2bd12:	d008      	beq.n	2bd26 <cmp_lfn+0xee>
   2bd14:	697b      	ldr	r3, [r7, #20]
   2bd16:	005b      	lsls	r3, r3, #1
   2bd18:	687a      	ldr	r2, [r7, #4]
   2bd1a:	18d3      	adds	r3, r2, r3
   2bd1c:	881b      	ldrh	r3, [r3, #0]
   2bd1e:	2b00      	cmp	r3, #0
   2bd20:	d001      	beq.n	2bd26 <cmp_lfn+0xee>
		return 0;
   2bd22:	2300      	movs	r3, #0
   2bd24:	e000      	b.n	2bd28 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2bd26:	2301      	movs	r3, #1
}
   2bd28:	0018      	movs	r0, r3
   2bd2a:	46bd      	mov	sp, r7
   2bd2c:	b007      	add	sp, #28
   2bd2e:	bd90      	pop	{r4, r7, pc}
   2bd30:	00038e98 	.word	0x00038e98
   2bd34:	0002dce5 	.word	0x0002dce5
   2bd38:	0000ffff 	.word	0x0000ffff

0002bd3c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2bd3c:	b580      	push	{r7, lr}
   2bd3e:	b088      	sub	sp, #32
   2bd40:	af00      	add	r7, sp, #0
   2bd42:	60f8      	str	r0, [r7, #12]
   2bd44:	60b9      	str	r1, [r7, #8]
   2bd46:	0019      	movs	r1, r3
   2bd48:	1dfb      	adds	r3, r7, #7
   2bd4a:	701a      	strb	r2, [r3, #0]
   2bd4c:	1dbb      	adds	r3, r7, #6
   2bd4e:	1c0a      	adds	r2, r1, #0
   2bd50:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2bd52:	68bb      	ldr	r3, [r7, #8]
   2bd54:	330d      	adds	r3, #13
   2bd56:	1dba      	adds	r2, r7, #6
   2bd58:	7812      	ldrb	r2, [r2, #0]
   2bd5a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2bd5c:	68bb      	ldr	r3, [r7, #8]
   2bd5e:	330b      	adds	r3, #11
   2bd60:	220f      	movs	r2, #15
   2bd62:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2bd64:	68bb      	ldr	r3, [r7, #8]
   2bd66:	330c      	adds	r3, #12
   2bd68:	2200      	movs	r2, #0
   2bd6a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2bd6c:	68bb      	ldr	r3, [r7, #8]
   2bd6e:	331a      	adds	r3, #26
   2bd70:	2200      	movs	r2, #0
   2bd72:	701a      	strb	r2, [r3, #0]
   2bd74:	68bb      	ldr	r3, [r7, #8]
   2bd76:	331b      	adds	r3, #27
   2bd78:	2200      	movs	r2, #0
   2bd7a:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2bd7c:	1dfb      	adds	r3, r7, #7
   2bd7e:	781b      	ldrb	r3, [r3, #0]
   2bd80:	1e5a      	subs	r2, r3, #1
   2bd82:	0013      	movs	r3, r2
   2bd84:	005b      	lsls	r3, r3, #1
   2bd86:	189b      	adds	r3, r3, r2
   2bd88:	009b      	lsls	r3, r3, #2
   2bd8a:	189b      	adds	r3, r3, r2
   2bd8c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2bd8e:	2316      	movs	r3, #22
   2bd90:	18fb      	adds	r3, r7, r3
   2bd92:	2200      	movs	r2, #0
   2bd94:	801a      	strh	r2, [r3, #0]
   2bd96:	2300      	movs	r3, #0
   2bd98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2bd9a:	2316      	movs	r3, #22
   2bd9c:	18fb      	adds	r3, r7, r3
   2bd9e:	881b      	ldrh	r3, [r3, #0]
   2bda0:	4a28      	ldr	r2, [pc, #160]	; (2be44 <fit_lfn+0x108>)
   2bda2:	4293      	cmp	r3, r2
   2bda4:	d009      	beq.n	2bdba <fit_lfn+0x7e>
   2bda6:	69fb      	ldr	r3, [r7, #28]
   2bda8:	1c5a      	adds	r2, r3, #1
   2bdaa:	61fa      	str	r2, [r7, #28]
   2bdac:	005b      	lsls	r3, r3, #1
   2bdae:	68fa      	ldr	r2, [r7, #12]
   2bdb0:	18d2      	adds	r2, r2, r3
   2bdb2:	2316      	movs	r3, #22
   2bdb4:	18fb      	adds	r3, r7, r3
   2bdb6:	8812      	ldrh	r2, [r2, #0]
   2bdb8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2bdba:	4a23      	ldr	r2, [pc, #140]	; (2be48 <fit_lfn+0x10c>)
   2bdbc:	69bb      	ldr	r3, [r7, #24]
   2bdbe:	18d3      	adds	r3, r2, r3
   2bdc0:	781b      	ldrb	r3, [r3, #0]
   2bdc2:	001a      	movs	r2, r3
   2bdc4:	68bb      	ldr	r3, [r7, #8]
   2bdc6:	189b      	adds	r3, r3, r2
   2bdc8:	2216      	movs	r2, #22
   2bdca:	18ba      	adds	r2, r7, r2
   2bdcc:	8812      	ldrh	r2, [r2, #0]
   2bdce:	b2d2      	uxtb	r2, r2
   2bdd0:	701a      	strb	r2, [r3, #0]
   2bdd2:	4a1d      	ldr	r2, [pc, #116]	; (2be48 <fit_lfn+0x10c>)
   2bdd4:	69bb      	ldr	r3, [r7, #24]
   2bdd6:	18d3      	adds	r3, r2, r3
   2bdd8:	781b      	ldrb	r3, [r3, #0]
   2bdda:	3301      	adds	r3, #1
   2bddc:	68ba      	ldr	r2, [r7, #8]
   2bdde:	18d3      	adds	r3, r2, r3
   2bde0:	2216      	movs	r2, #22
   2bde2:	18ba      	adds	r2, r7, r2
   2bde4:	8812      	ldrh	r2, [r2, #0]
   2bde6:	0a12      	lsrs	r2, r2, #8
   2bde8:	b292      	uxth	r2, r2
   2bdea:	b2d2      	uxtb	r2, r2
   2bdec:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2bdee:	2316      	movs	r3, #22
   2bdf0:	18fb      	adds	r3, r7, r3
   2bdf2:	881b      	ldrh	r3, [r3, #0]
   2bdf4:	2b00      	cmp	r3, #0
   2bdf6:	d104      	bne.n	2be02 <fit_lfn+0xc6>
   2bdf8:	2316      	movs	r3, #22
   2bdfa:	18fb      	adds	r3, r7, r3
   2bdfc:	2201      	movs	r2, #1
   2bdfe:	4252      	negs	r2, r2
   2be00:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2be02:	69bb      	ldr	r3, [r7, #24]
   2be04:	3301      	adds	r3, #1
   2be06:	61bb      	str	r3, [r7, #24]
   2be08:	69bb      	ldr	r3, [r7, #24]
   2be0a:	2b0c      	cmp	r3, #12
   2be0c:	d9c5      	bls.n	2bd9a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2be0e:	2316      	movs	r3, #22
   2be10:	18fb      	adds	r3, r7, r3
   2be12:	881b      	ldrh	r3, [r3, #0]
   2be14:	4a0b      	ldr	r2, [pc, #44]	; (2be44 <fit_lfn+0x108>)
   2be16:	4293      	cmp	r3, r2
   2be18:	d006      	beq.n	2be28 <fit_lfn+0xec>
   2be1a:	69fb      	ldr	r3, [r7, #28]
   2be1c:	005b      	lsls	r3, r3, #1
   2be1e:	68fa      	ldr	r2, [r7, #12]
   2be20:	18d3      	adds	r3, r2, r3
   2be22:	881b      	ldrh	r3, [r3, #0]
   2be24:	2b00      	cmp	r3, #0
   2be26:	d105      	bne.n	2be34 <fit_lfn+0xf8>
   2be28:	1dfb      	adds	r3, r7, #7
   2be2a:	1dfa      	adds	r2, r7, #7
   2be2c:	7812      	ldrb	r2, [r2, #0]
   2be2e:	2140      	movs	r1, #64	; 0x40
   2be30:	430a      	orrs	r2, r1
   2be32:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2be34:	68bb      	ldr	r3, [r7, #8]
   2be36:	1dfa      	adds	r2, r7, #7
   2be38:	7812      	ldrb	r2, [r2, #0]
   2be3a:	701a      	strb	r2, [r3, #0]
}
   2be3c:	46c0      	nop			; (mov r8, r8)
   2be3e:	46bd      	mov	sp, r7
   2be40:	b008      	add	sp, #32
   2be42:	bd80      	pop	{r7, pc}
   2be44:	0000ffff 	.word	0x0000ffff
   2be48:	00038e98 	.word	0x00038e98

0002be4c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2be4c:	b580      	push	{r7, lr}
   2be4e:	b08a      	sub	sp, #40	; 0x28
   2be50:	af00      	add	r7, sp, #0
   2be52:	60f8      	str	r0, [r7, #12]
   2be54:	60b9      	str	r1, [r7, #8]
   2be56:	607a      	str	r2, [r7, #4]
   2be58:	001a      	movs	r2, r3
   2be5a:	1cbb      	adds	r3, r7, #2
   2be5c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2be5e:	68b9      	ldr	r1, [r7, #8]
   2be60:	68fb      	ldr	r3, [r7, #12]
   2be62:	220b      	movs	r2, #11
   2be64:	0018      	movs	r0, r3
   2be66:	4b38      	ldr	r3, [pc, #224]	; (2bf48 <gen_numname+0xfc>)
   2be68:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2be6a:	1cbb      	adds	r3, r7, #2
   2be6c:	881b      	ldrh	r3, [r3, #0]
   2be6e:	2b05      	cmp	r3, #5
   2be70:	d911      	bls.n	2be96 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2be72:	1cbb      	adds	r3, r7, #2
   2be74:	881b      	ldrh	r3, [r3, #0]
   2be76:	b29a      	uxth	r2, r3
   2be78:	0852      	lsrs	r2, r2, #1
   2be7a:	03db      	lsls	r3, r3, #15
   2be7c:	4313      	orrs	r3, r2
   2be7e:	b299      	uxth	r1, r3
   2be80:	687b      	ldr	r3, [r7, #4]
   2be82:	1c9a      	adds	r2, r3, #2
   2be84:	607a      	str	r2, [r7, #4]
   2be86:	881a      	ldrh	r2, [r3, #0]
   2be88:	1cbb      	adds	r3, r7, #2
   2be8a:	188a      	adds	r2, r1, r2
   2be8c:	801a      	strh	r2, [r3, #0]
   2be8e:	687b      	ldr	r3, [r7, #4]
   2be90:	881b      	ldrh	r3, [r3, #0]
   2be92:	2b00      	cmp	r3, #0
   2be94:	d1ed      	bne.n	2be72 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2be96:	2307      	movs	r3, #7
   2be98:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2be9a:	1cbb      	adds	r3, r7, #2
   2be9c:	881b      	ldrh	r3, [r3, #0]
   2be9e:	b2db      	uxtb	r3, r3
   2bea0:	220f      	movs	r2, #15
   2bea2:	4013      	ands	r3, r2
   2bea4:	b2da      	uxtb	r2, r3
   2bea6:	2327      	movs	r3, #39	; 0x27
   2bea8:	18fb      	adds	r3, r7, r3
   2beaa:	3230      	adds	r2, #48	; 0x30
   2beac:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2beae:	2327      	movs	r3, #39	; 0x27
   2beb0:	18fb      	adds	r3, r7, r3
   2beb2:	781b      	ldrb	r3, [r3, #0]
   2beb4:	2b39      	cmp	r3, #57	; 0x39
   2beb6:	d906      	bls.n	2bec6 <gen_numname+0x7a>
   2beb8:	2327      	movs	r3, #39	; 0x27
   2beba:	18fb      	adds	r3, r7, r3
   2bebc:	2227      	movs	r2, #39	; 0x27
   2bebe:	18ba      	adds	r2, r7, r2
   2bec0:	7812      	ldrb	r2, [r2, #0]
   2bec2:	3207      	adds	r2, #7
   2bec4:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2bec6:	6a3b      	ldr	r3, [r7, #32]
   2bec8:	1e5a      	subs	r2, r3, #1
   2beca:	623a      	str	r2, [r7, #32]
   2becc:	2214      	movs	r2, #20
   2bece:	18ba      	adds	r2, r7, r2
   2bed0:	2127      	movs	r1, #39	; 0x27
   2bed2:	1879      	adds	r1, r7, r1
   2bed4:	7809      	ldrb	r1, [r1, #0]
   2bed6:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2bed8:	1cbb      	adds	r3, r7, #2
   2beda:	1cba      	adds	r2, r7, #2
   2bedc:	8812      	ldrh	r2, [r2, #0]
   2bede:	0912      	lsrs	r2, r2, #4
   2bee0:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2bee2:	1cbb      	adds	r3, r7, #2
   2bee4:	881b      	ldrh	r3, [r3, #0]
   2bee6:	2b00      	cmp	r3, #0
   2bee8:	d1d7      	bne.n	2be9a <gen_numname+0x4e>
	ns[i] = '~';
   2beea:	2314      	movs	r3, #20
   2beec:	18fa      	adds	r2, r7, r3
   2beee:	6a3b      	ldr	r3, [r7, #32]
   2bef0:	18d3      	adds	r3, r2, r3
   2bef2:	227e      	movs	r2, #126	; 0x7e
   2bef4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2bef6:	2300      	movs	r3, #0
   2bef8:	61fb      	str	r3, [r7, #28]
   2befa:	e002      	b.n	2bf02 <gen_numname+0xb6>
   2befc:	69fb      	ldr	r3, [r7, #28]
   2befe:	3301      	adds	r3, #1
   2bf00:	61fb      	str	r3, [r7, #28]
   2bf02:	69fa      	ldr	r2, [r7, #28]
   2bf04:	6a3b      	ldr	r3, [r7, #32]
   2bf06:	429a      	cmp	r2, r3
   2bf08:	d205      	bcs.n	2bf16 <gen_numname+0xca>
   2bf0a:	68fa      	ldr	r2, [r7, #12]
   2bf0c:	69fb      	ldr	r3, [r7, #28]
   2bf0e:	18d3      	adds	r3, r2, r3
   2bf10:	781b      	ldrb	r3, [r3, #0]
   2bf12:	2b20      	cmp	r3, #32
   2bf14:	d1f2      	bne.n	2befc <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2bf16:	69fb      	ldr	r3, [r7, #28]
   2bf18:	1c5a      	adds	r2, r3, #1
   2bf1a:	61fa      	str	r2, [r7, #28]
   2bf1c:	68fa      	ldr	r2, [r7, #12]
   2bf1e:	18d2      	adds	r2, r2, r3
   2bf20:	6a3b      	ldr	r3, [r7, #32]
   2bf22:	2b07      	cmp	r3, #7
   2bf24:	d806      	bhi.n	2bf34 <gen_numname+0xe8>
   2bf26:	6a3b      	ldr	r3, [r7, #32]
   2bf28:	1c59      	adds	r1, r3, #1
   2bf2a:	6239      	str	r1, [r7, #32]
   2bf2c:	2114      	movs	r1, #20
   2bf2e:	1879      	adds	r1, r7, r1
   2bf30:	5ccb      	ldrb	r3, [r1, r3]
   2bf32:	e000      	b.n	2bf36 <gen_numname+0xea>
   2bf34:	2320      	movs	r3, #32
   2bf36:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2bf38:	69fb      	ldr	r3, [r7, #28]
   2bf3a:	2b07      	cmp	r3, #7
   2bf3c:	d9eb      	bls.n	2bf16 <gen_numname+0xca>
}
   2bf3e:	46c0      	nop			; (mov r8, r8)
   2bf40:	46bd      	mov	sp, r7
   2bf42:	b00a      	add	sp, #40	; 0x28
   2bf44:	bd80      	pop	{r7, pc}
   2bf46:	46c0      	nop			; (mov r8, r8)
   2bf48:	0002aff1 	.word	0x0002aff1

0002bf4c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2bf4c:	b580      	push	{r7, lr}
   2bf4e:	b084      	sub	sp, #16
   2bf50:	af00      	add	r7, sp, #0
   2bf52:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2bf54:	230f      	movs	r3, #15
   2bf56:	18fb      	adds	r3, r7, r3
   2bf58:	2200      	movs	r2, #0
   2bf5a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2bf5c:	230b      	movs	r3, #11
   2bf5e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2bf60:	230f      	movs	r3, #15
   2bf62:	18fb      	adds	r3, r7, r3
   2bf64:	781b      	ldrb	r3, [r3, #0]
   2bf66:	b2da      	uxtb	r2, r3
   2bf68:	0852      	lsrs	r2, r2, #1
   2bf6a:	01db      	lsls	r3, r3, #7
   2bf6c:	4313      	orrs	r3, r2
   2bf6e:	b2d9      	uxtb	r1, r3
   2bf70:	687b      	ldr	r3, [r7, #4]
   2bf72:	1c5a      	adds	r2, r3, #1
   2bf74:	607a      	str	r2, [r7, #4]
   2bf76:	781a      	ldrb	r2, [r3, #0]
   2bf78:	230f      	movs	r3, #15
   2bf7a:	18fb      	adds	r3, r7, r3
   2bf7c:	188a      	adds	r2, r1, r2
   2bf7e:	701a      	strb	r2, [r3, #0]
   2bf80:	68bb      	ldr	r3, [r7, #8]
   2bf82:	3b01      	subs	r3, #1
   2bf84:	60bb      	str	r3, [r7, #8]
   2bf86:	68bb      	ldr	r3, [r7, #8]
   2bf88:	2b00      	cmp	r3, #0
   2bf8a:	d1e9      	bne.n	2bf60 <sum_sfn+0x14>
	return sum;
   2bf8c:	230f      	movs	r3, #15
   2bf8e:	18fb      	adds	r3, r7, r3
   2bf90:	781b      	ldrb	r3, [r3, #0]
}
   2bf92:	0018      	movs	r0, r3
   2bf94:	46bd      	mov	sp, r7
   2bf96:	b004      	add	sp, #16
   2bf98:	bd80      	pop	{r7, pc}
	...

0002bf9c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2bf9c:	b590      	push	{r4, r7, lr}
   2bf9e:	b087      	sub	sp, #28
   2bfa0:	af00      	add	r7, sp, #0
   2bfa2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2bfa4:	2317      	movs	r3, #23
   2bfa6:	18fc      	adds	r4, r7, r3
   2bfa8:	687b      	ldr	r3, [r7, #4]
   2bfaa:	2100      	movs	r1, #0
   2bfac:	0018      	movs	r0, r3
   2bfae:	4b74      	ldr	r3, [pc, #464]	; (2c180 <dir_find+0x1e4>)
   2bfb0:	4798      	blx	r3
   2bfb2:	0003      	movs	r3, r0
   2bfb4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2bfb6:	2317      	movs	r3, #23
   2bfb8:	18fb      	adds	r3, r7, r3
   2bfba:	781b      	ldrb	r3, [r3, #0]
   2bfbc:	2b00      	cmp	r3, #0
   2bfbe:	d003      	beq.n	2bfc8 <dir_find+0x2c>
   2bfc0:	2317      	movs	r3, #23
   2bfc2:	18fb      	adds	r3, r7, r3
   2bfc4:	781b      	ldrb	r3, [r3, #0]
   2bfc6:	e0d6      	b.n	2c176 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2bfc8:	2314      	movs	r3, #20
   2bfca:	18fb      	adds	r3, r7, r3
   2bfcc:	22ff      	movs	r2, #255	; 0xff
   2bfce:	701a      	strb	r2, [r3, #0]
   2bfd0:	2315      	movs	r3, #21
   2bfd2:	18fb      	adds	r3, r7, r3
   2bfd4:	2214      	movs	r2, #20
   2bfd6:	18ba      	adds	r2, r7, r2
   2bfd8:	7812      	ldrb	r2, [r2, #0]
   2bfda:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2bfdc:	687b      	ldr	r3, [r7, #4]
   2bfde:	681a      	ldr	r2, [r3, #0]
   2bfe0:	687b      	ldr	r3, [r7, #4]
   2bfe2:	691b      	ldr	r3, [r3, #16]
   2bfe4:	2117      	movs	r1, #23
   2bfe6:	187c      	adds	r4, r7, r1
   2bfe8:	0019      	movs	r1, r3
   2bfea:	0010      	movs	r0, r2
   2bfec:	4b65      	ldr	r3, [pc, #404]	; (2c184 <dir_find+0x1e8>)
   2bfee:	4798      	blx	r3
   2bff0:	0003      	movs	r3, r0
   2bff2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2bff4:	2317      	movs	r3, #23
   2bff6:	18fb      	adds	r3, r7, r3
   2bff8:	781b      	ldrb	r3, [r3, #0]
   2bffa:	2b00      	cmp	r3, #0
   2bffc:	d000      	beq.n	2c000 <dir_find+0x64>
   2bffe:	e0b2      	b.n	2c166 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c000:	687b      	ldr	r3, [r7, #4]
   2c002:	695b      	ldr	r3, [r3, #20]
   2c004:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c006:	2316      	movs	r3, #22
   2c008:	18fb      	adds	r3, r7, r3
   2c00a:	693a      	ldr	r2, [r7, #16]
   2c00c:	7812      	ldrb	r2, [r2, #0]
   2c00e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c010:	2316      	movs	r3, #22
   2c012:	18fb      	adds	r3, r7, r3
   2c014:	781b      	ldrb	r3, [r3, #0]
   2c016:	2b00      	cmp	r3, #0
   2c018:	d104      	bne.n	2c024 <dir_find+0x88>
   2c01a:	2317      	movs	r3, #23
   2c01c:	18fb      	adds	r3, r7, r3
   2c01e:	2204      	movs	r2, #4
   2c020:	701a      	strb	r2, [r3, #0]
   2c022:	e0a5      	b.n	2c170 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c024:	693b      	ldr	r3, [r7, #16]
   2c026:	330b      	adds	r3, #11
   2c028:	781a      	ldrb	r2, [r3, #0]
   2c02a:	230f      	movs	r3, #15
   2c02c:	18fb      	adds	r3, r7, r3
   2c02e:	213f      	movs	r1, #63	; 0x3f
   2c030:	400a      	ands	r2, r1
   2c032:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c034:	2316      	movs	r3, #22
   2c036:	18fb      	adds	r3, r7, r3
   2c038:	781b      	ldrb	r3, [r3, #0]
   2c03a:	2be5      	cmp	r3, #229	; 0xe5
   2c03c:	d00a      	beq.n	2c054 <dir_find+0xb8>
   2c03e:	230f      	movs	r3, #15
   2c040:	18fb      	adds	r3, r7, r3
   2c042:	781b      	ldrb	r3, [r3, #0]
   2c044:	2208      	movs	r2, #8
   2c046:	4013      	ands	r3, r2
   2c048:	d009      	beq.n	2c05e <dir_find+0xc2>
   2c04a:	230f      	movs	r3, #15
   2c04c:	18fb      	adds	r3, r7, r3
   2c04e:	781b      	ldrb	r3, [r3, #0]
   2c050:	2b0f      	cmp	r3, #15
   2c052:	d004      	beq.n	2c05e <dir_find+0xc2>
			ord = 0xFF;
   2c054:	2315      	movs	r3, #21
   2c056:	18fb      	adds	r3, r7, r3
   2c058:	22ff      	movs	r2, #255	; 0xff
   2c05a:	701a      	strb	r2, [r3, #0]
   2c05c:	e073      	b.n	2c146 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c05e:	230f      	movs	r3, #15
   2c060:	18fb      	adds	r3, r7, r3
   2c062:	781b      	ldrb	r3, [r3, #0]
   2c064:	2b0f      	cmp	r3, #15
   2c066:	d145      	bne.n	2c0f4 <dir_find+0x158>
				if (dj->lfn) {
   2c068:	687b      	ldr	r3, [r7, #4]
   2c06a:	69db      	ldr	r3, [r3, #28]
   2c06c:	2b00      	cmp	r3, #0
   2c06e:	d100      	bne.n	2c072 <dir_find+0xd6>
   2c070:	e069      	b.n	2c146 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c072:	2316      	movs	r3, #22
   2c074:	18fb      	adds	r3, r7, r3
   2c076:	781b      	ldrb	r3, [r3, #0]
   2c078:	2240      	movs	r2, #64	; 0x40
   2c07a:	4013      	ands	r3, r2
   2c07c:	d016      	beq.n	2c0ac <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c07e:	2314      	movs	r3, #20
   2c080:	18fb      	adds	r3, r7, r3
   2c082:	693a      	ldr	r2, [r7, #16]
   2c084:	7b52      	ldrb	r2, [r2, #13]
   2c086:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c088:	2316      	movs	r3, #22
   2c08a:	18fb      	adds	r3, r7, r3
   2c08c:	2216      	movs	r2, #22
   2c08e:	18ba      	adds	r2, r7, r2
   2c090:	7812      	ldrb	r2, [r2, #0]
   2c092:	2140      	movs	r1, #64	; 0x40
   2c094:	438a      	bics	r2, r1
   2c096:	701a      	strb	r2, [r3, #0]
   2c098:	2315      	movs	r3, #21
   2c09a:	18fb      	adds	r3, r7, r3
   2c09c:	2216      	movs	r2, #22
   2c09e:	18ba      	adds	r2, r7, r2
   2c0a0:	7812      	ldrb	r2, [r2, #0]
   2c0a2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c0a4:	687b      	ldr	r3, [r7, #4]
   2c0a6:	88da      	ldrh	r2, [r3, #6]
   2c0a8:	687b      	ldr	r3, [r7, #4]
   2c0aa:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c0ac:	2316      	movs	r3, #22
   2c0ae:	18fa      	adds	r2, r7, r3
   2c0b0:	2315      	movs	r3, #21
   2c0b2:	18fb      	adds	r3, r7, r3
   2c0b4:	7812      	ldrb	r2, [r2, #0]
   2c0b6:	781b      	ldrb	r3, [r3, #0]
   2c0b8:	429a      	cmp	r2, r3
   2c0ba:	d116      	bne.n	2c0ea <dir_find+0x14e>
   2c0bc:	693b      	ldr	r3, [r7, #16]
   2c0be:	330d      	adds	r3, #13
   2c0c0:	781b      	ldrb	r3, [r3, #0]
   2c0c2:	2214      	movs	r2, #20
   2c0c4:	18ba      	adds	r2, r7, r2
   2c0c6:	7812      	ldrb	r2, [r2, #0]
   2c0c8:	429a      	cmp	r2, r3
   2c0ca:	d10e      	bne.n	2c0ea <dir_find+0x14e>
   2c0cc:	687b      	ldr	r3, [r7, #4]
   2c0ce:	69db      	ldr	r3, [r3, #28]
   2c0d0:	693a      	ldr	r2, [r7, #16]
   2c0d2:	0011      	movs	r1, r2
   2c0d4:	0018      	movs	r0, r3
   2c0d6:	4b2c      	ldr	r3, [pc, #176]	; (2c188 <dir_find+0x1ec>)
   2c0d8:	4798      	blx	r3
   2c0da:	1e03      	subs	r3, r0, #0
   2c0dc:	d005      	beq.n	2c0ea <dir_find+0x14e>
   2c0de:	2315      	movs	r3, #21
   2c0e0:	18fb      	adds	r3, r7, r3
   2c0e2:	781b      	ldrb	r3, [r3, #0]
   2c0e4:	3b01      	subs	r3, #1
   2c0e6:	b2da      	uxtb	r2, r3
   2c0e8:	e000      	b.n	2c0ec <dir_find+0x150>
   2c0ea:	22ff      	movs	r2, #255	; 0xff
   2c0ec:	2315      	movs	r3, #21
   2c0ee:	18fb      	adds	r3, r7, r3
   2c0f0:	701a      	strb	r2, [r3, #0]
   2c0f2:	e028      	b.n	2c146 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c0f4:	2315      	movs	r3, #21
   2c0f6:	18fb      	adds	r3, r7, r3
   2c0f8:	781b      	ldrb	r3, [r3, #0]
   2c0fa:	2b00      	cmp	r3, #0
   2c0fc:	d10a      	bne.n	2c114 <dir_find+0x178>
   2c0fe:	693b      	ldr	r3, [r7, #16]
   2c100:	0018      	movs	r0, r3
   2c102:	4b22      	ldr	r3, [pc, #136]	; (2c18c <dir_find+0x1f0>)
   2c104:	4798      	blx	r3
   2c106:	0003      	movs	r3, r0
   2c108:	001a      	movs	r2, r3
   2c10a:	2314      	movs	r3, #20
   2c10c:	18fb      	adds	r3, r7, r3
   2c10e:	781b      	ldrb	r3, [r3, #0]
   2c110:	4293      	cmp	r3, r2
   2c112:	d02a      	beq.n	2c16a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c114:	2315      	movs	r3, #21
   2c116:	18fb      	adds	r3, r7, r3
   2c118:	22ff      	movs	r2, #255	; 0xff
   2c11a:	701a      	strb	r2, [r3, #0]
   2c11c:	687b      	ldr	r3, [r7, #4]
   2c11e:	2201      	movs	r2, #1
   2c120:	4252      	negs	r2, r2
   2c122:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c124:	687b      	ldr	r3, [r7, #4]
   2c126:	699b      	ldr	r3, [r3, #24]
   2c128:	330b      	adds	r3, #11
   2c12a:	781b      	ldrb	r3, [r3, #0]
   2c12c:	001a      	movs	r2, r3
   2c12e:	2301      	movs	r3, #1
   2c130:	4013      	ands	r3, r2
   2c132:	d108      	bne.n	2c146 <dir_find+0x1aa>
   2c134:	687b      	ldr	r3, [r7, #4]
   2c136:	6999      	ldr	r1, [r3, #24]
   2c138:	693b      	ldr	r3, [r7, #16]
   2c13a:	220b      	movs	r2, #11
   2c13c:	0018      	movs	r0, r3
   2c13e:	4b14      	ldr	r3, [pc, #80]	; (2c190 <dir_find+0x1f4>)
   2c140:	4798      	blx	r3
   2c142:	1e03      	subs	r3, r0, #0
   2c144:	d013      	beq.n	2c16e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c146:	2317      	movs	r3, #23
   2c148:	18fc      	adds	r4, r7, r3
   2c14a:	687b      	ldr	r3, [r7, #4]
   2c14c:	2100      	movs	r1, #0
   2c14e:	0018      	movs	r0, r3
   2c150:	4b10      	ldr	r3, [pc, #64]	; (2c194 <dir_find+0x1f8>)
   2c152:	4798      	blx	r3
   2c154:	0003      	movs	r3, r0
   2c156:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c158:	2317      	movs	r3, #23
   2c15a:	18fb      	adds	r3, r7, r3
   2c15c:	781b      	ldrb	r3, [r3, #0]
   2c15e:	2b00      	cmp	r3, #0
   2c160:	d100      	bne.n	2c164 <dir_find+0x1c8>
   2c162:	e73b      	b.n	2bfdc <dir_find+0x40>
   2c164:	e004      	b.n	2c170 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c166:	46c0      	nop			; (mov r8, r8)
   2c168:	e002      	b.n	2c170 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c16a:	46c0      	nop			; (mov r8, r8)
   2c16c:	e000      	b.n	2c170 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c16e:	46c0      	nop			; (mov r8, r8)

	return res;
   2c170:	2317      	movs	r3, #23
   2c172:	18fb      	adds	r3, r7, r3
   2c174:	781b      	ldrb	r3, [r3, #0]
}
   2c176:	0018      	movs	r0, r3
   2c178:	46bd      	mov	sp, r7
   2c17a:	b007      	add	sp, #28
   2c17c:	bd90      	pop	{r4, r7, pc}
   2c17e:	46c0      	nop			; (mov r8, r8)
   2c180:	0002b919 	.word	0x0002b919
   2c184:	0002b0d5 	.word	0x0002b0d5
   2c188:	0002bc39 	.word	0x0002bc39
   2c18c:	0002bf4d 	.word	0x0002bf4d
   2c190:	0002b059 	.word	0x0002b059
   2c194:	0002ba49 	.word	0x0002ba49

0002c198 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c198:	b590      	push	{r4, r7, lr}
   2c19a:	b08d      	sub	sp, #52	; 0x34
   2c19c:	af00      	add	r7, sp, #0
   2c19e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c1a0:	687b      	ldr	r3, [r7, #4]
   2c1a2:	699b      	ldr	r3, [r3, #24]
   2c1a4:	627b      	str	r3, [r7, #36]	; 0x24
   2c1a6:	687b      	ldr	r3, [r7, #4]
   2c1a8:	69db      	ldr	r3, [r3, #28]
   2c1aa:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c1ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c1ae:	230c      	movs	r3, #12
   2c1b0:	18fb      	adds	r3, r7, r3
   2c1b2:	220c      	movs	r2, #12
   2c1b4:	0018      	movs	r0, r3
   2c1b6:	4bc8      	ldr	r3, [pc, #800]	; (2c4d8 <dir_register+0x340>)
   2c1b8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c1ba:	230c      	movs	r3, #12
   2c1bc:	18fb      	adds	r3, r7, r3
   2c1be:	7adb      	ldrb	r3, [r3, #11]
   2c1c0:	001a      	movs	r2, r3
   2c1c2:	2301      	movs	r3, #1
   2c1c4:	4013      	ands	r3, r2
   2c1c6:	d048      	beq.n	2c25a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c1ca:	330b      	adds	r3, #11
   2c1cc:	2200      	movs	r2, #0
   2c1ce:	701a      	strb	r2, [r3, #0]
   2c1d0:	687b      	ldr	r3, [r7, #4]
   2c1d2:	2200      	movs	r2, #0
   2c1d4:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c1d6:	232c      	movs	r3, #44	; 0x2c
   2c1d8:	18fb      	adds	r3, r7, r3
   2c1da:	2201      	movs	r2, #1
   2c1dc:	801a      	strh	r2, [r3, #0]
   2c1de:	e01c      	b.n	2c21a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c1e0:	232c      	movs	r3, #44	; 0x2c
   2c1e2:	18fb      	adds	r3, r7, r3
   2c1e4:	881b      	ldrh	r3, [r3, #0]
   2c1e6:	6a3a      	ldr	r2, [r7, #32]
   2c1e8:	210c      	movs	r1, #12
   2c1ea:	1879      	adds	r1, r7, r1
   2c1ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c1ee:	4cbb      	ldr	r4, [pc, #748]	; (2c4dc <dir_register+0x344>)
   2c1f0:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c1f2:	232f      	movs	r3, #47	; 0x2f
   2c1f4:	18fc      	adds	r4, r7, r3
   2c1f6:	687b      	ldr	r3, [r7, #4]
   2c1f8:	0018      	movs	r0, r3
   2c1fa:	4bb9      	ldr	r3, [pc, #740]	; (2c4e0 <dir_register+0x348>)
   2c1fc:	4798      	blx	r3
   2c1fe:	0003      	movs	r3, r0
   2c200:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c202:	232f      	movs	r3, #47	; 0x2f
   2c204:	18fb      	adds	r3, r7, r3
   2c206:	781b      	ldrb	r3, [r3, #0]
   2c208:	2b00      	cmp	r3, #0
   2c20a:	d10c      	bne.n	2c226 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c20c:	232c      	movs	r3, #44	; 0x2c
   2c20e:	18fb      	adds	r3, r7, r3
   2c210:	881a      	ldrh	r2, [r3, #0]
   2c212:	232c      	movs	r3, #44	; 0x2c
   2c214:	18fb      	adds	r3, r7, r3
   2c216:	3201      	adds	r2, #1
   2c218:	801a      	strh	r2, [r3, #0]
   2c21a:	232c      	movs	r3, #44	; 0x2c
   2c21c:	18fb      	adds	r3, r7, r3
   2c21e:	881b      	ldrh	r3, [r3, #0]
   2c220:	2b63      	cmp	r3, #99	; 0x63
   2c222:	d9dd      	bls.n	2c1e0 <dir_register+0x48>
   2c224:	e000      	b.n	2c228 <dir_register+0x90>
			if (res != FR_OK) break;
   2c226:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c228:	232c      	movs	r3, #44	; 0x2c
   2c22a:	18fb      	adds	r3, r7, r3
   2c22c:	881b      	ldrh	r3, [r3, #0]
   2c22e:	2b64      	cmp	r3, #100	; 0x64
   2c230:	d101      	bne.n	2c236 <dir_register+0x9e>
   2c232:	2307      	movs	r3, #7
   2c234:	e14c      	b.n	2c4d0 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c236:	232f      	movs	r3, #47	; 0x2f
   2c238:	18fb      	adds	r3, r7, r3
   2c23a:	781b      	ldrb	r3, [r3, #0]
   2c23c:	2b04      	cmp	r3, #4
   2c23e:	d003      	beq.n	2c248 <dir_register+0xb0>
   2c240:	232f      	movs	r3, #47	; 0x2f
   2c242:	18fb      	adds	r3, r7, r3
   2c244:	781b      	ldrb	r3, [r3, #0]
   2c246:	e143      	b.n	2c4d0 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c24a:	330b      	adds	r3, #11
   2c24c:	220c      	movs	r2, #12
   2c24e:	18ba      	adds	r2, r7, r2
   2c250:	7ad2      	ldrb	r2, [r2, #11]
   2c252:	701a      	strb	r2, [r3, #0]
   2c254:	687b      	ldr	r3, [r7, #4]
   2c256:	6a3a      	ldr	r2, [r7, #32]
   2c258:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c25a:	230c      	movs	r3, #12
   2c25c:	18fb      	adds	r3, r7, r3
   2c25e:	7adb      	ldrb	r3, [r3, #11]
   2c260:	001a      	movs	r2, r3
   2c262:	2302      	movs	r3, #2
   2c264:	4013      	ands	r3, r2
   2c266:	d023      	beq.n	2c2b0 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c268:	232a      	movs	r3, #42	; 0x2a
   2c26a:	18fb      	adds	r3, r7, r3
   2c26c:	2200      	movs	r2, #0
   2c26e:	801a      	strh	r2, [r3, #0]
   2c270:	e006      	b.n	2c280 <dir_register+0xe8>
   2c272:	232a      	movs	r3, #42	; 0x2a
   2c274:	18fb      	adds	r3, r7, r3
   2c276:	881a      	ldrh	r2, [r3, #0]
   2c278:	232a      	movs	r3, #42	; 0x2a
   2c27a:	18fb      	adds	r3, r7, r3
   2c27c:	3201      	adds	r2, #1
   2c27e:	801a      	strh	r2, [r3, #0]
   2c280:	232a      	movs	r3, #42	; 0x2a
   2c282:	18fb      	adds	r3, r7, r3
   2c284:	881b      	ldrh	r3, [r3, #0]
   2c286:	005b      	lsls	r3, r3, #1
   2c288:	6a3a      	ldr	r2, [r7, #32]
   2c28a:	18d3      	adds	r3, r2, r3
   2c28c:	881b      	ldrh	r3, [r3, #0]
   2c28e:	2b00      	cmp	r3, #0
   2c290:	d1ef      	bne.n	2c272 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c292:	232a      	movs	r3, #42	; 0x2a
   2c294:	18fb      	adds	r3, r7, r3
   2c296:	881b      	ldrh	r3, [r3, #0]
   2c298:	3319      	adds	r3, #25
   2c29a:	001a      	movs	r2, r3
   2c29c:	4b91      	ldr	r3, [pc, #580]	; (2c4e4 <dir_register+0x34c>)
   2c29e:	210d      	movs	r1, #13
   2c2a0:	0010      	movs	r0, r2
   2c2a2:	4798      	blx	r3
   2c2a4:	0003      	movs	r3, r0
   2c2a6:	001a      	movs	r2, r3
   2c2a8:	232a      	movs	r3, #42	; 0x2a
   2c2aa:	18fb      	adds	r3, r7, r3
   2c2ac:	801a      	strh	r2, [r3, #0]
   2c2ae:	e003      	b.n	2c2b8 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c2b0:	232a      	movs	r3, #42	; 0x2a
   2c2b2:	18fb      	adds	r3, r7, r3
   2c2b4:	2201      	movs	r2, #1
   2c2b6:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c2b8:	232f      	movs	r3, #47	; 0x2f
   2c2ba:	18fc      	adds	r4, r7, r3
   2c2bc:	687b      	ldr	r3, [r7, #4]
   2c2be:	2100      	movs	r1, #0
   2c2c0:	0018      	movs	r0, r3
   2c2c2:	4b89      	ldr	r3, [pc, #548]	; (2c4e8 <dir_register+0x350>)
   2c2c4:	4798      	blx	r3
   2c2c6:	0003      	movs	r3, r0
   2c2c8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c2ca:	232f      	movs	r3, #47	; 0x2f
   2c2cc:	18fb      	adds	r3, r7, r3
   2c2ce:	781b      	ldrb	r3, [r3, #0]
   2c2d0:	2b00      	cmp	r3, #0
   2c2d2:	d003      	beq.n	2c2dc <dir_register+0x144>
   2c2d4:	232f      	movs	r3, #47	; 0x2f
   2c2d6:	18fb      	adds	r3, r7, r3
   2c2d8:	781b      	ldrb	r3, [r3, #0]
   2c2da:	e0f9      	b.n	2c4d0 <dir_register+0x338>
	n = is = 0;
   2c2dc:	2328      	movs	r3, #40	; 0x28
   2c2de:	18fb      	adds	r3, r7, r3
   2c2e0:	2200      	movs	r2, #0
   2c2e2:	801a      	strh	r2, [r3, #0]
   2c2e4:	232c      	movs	r3, #44	; 0x2c
   2c2e6:	18fb      	adds	r3, r7, r3
   2c2e8:	2228      	movs	r2, #40	; 0x28
   2c2ea:	18ba      	adds	r2, r7, r2
   2c2ec:	8812      	ldrh	r2, [r2, #0]
   2c2ee:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c2f0:	687b      	ldr	r3, [r7, #4]
   2c2f2:	681a      	ldr	r2, [r3, #0]
   2c2f4:	687b      	ldr	r3, [r7, #4]
   2c2f6:	691b      	ldr	r3, [r3, #16]
   2c2f8:	212f      	movs	r1, #47	; 0x2f
   2c2fa:	187c      	adds	r4, r7, r1
   2c2fc:	0019      	movs	r1, r3
   2c2fe:	0010      	movs	r0, r2
   2c300:	4b7a      	ldr	r3, [pc, #488]	; (2c4ec <dir_register+0x354>)
   2c302:	4798      	blx	r3
   2c304:	0003      	movs	r3, r0
   2c306:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c308:	232f      	movs	r3, #47	; 0x2f
   2c30a:	18fb      	adds	r3, r7, r3
   2c30c:	781b      	ldrb	r3, [r3, #0]
   2c30e:	2b00      	cmp	r3, #0
   2c310:	d13c      	bne.n	2c38c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c312:	687b      	ldr	r3, [r7, #4]
   2c314:	695a      	ldr	r2, [r3, #20]
   2c316:	231f      	movs	r3, #31
   2c318:	18fb      	adds	r3, r7, r3
   2c31a:	7812      	ldrb	r2, [r2, #0]
   2c31c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c31e:	231f      	movs	r3, #31
   2c320:	18fb      	adds	r3, r7, r3
   2c322:	781b      	ldrb	r3, [r3, #0]
   2c324:	2be5      	cmp	r3, #229	; 0xe5
   2c326:	d004      	beq.n	2c332 <dir_register+0x19a>
   2c328:	231f      	movs	r3, #31
   2c32a:	18fb      	adds	r3, r7, r3
   2c32c:	781b      	ldrb	r3, [r3, #0]
   2c32e:	2b00      	cmp	r3, #0
   2c330:	d119      	bne.n	2c366 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c332:	232c      	movs	r3, #44	; 0x2c
   2c334:	18fb      	adds	r3, r7, r3
   2c336:	881b      	ldrh	r3, [r3, #0]
   2c338:	2b00      	cmp	r3, #0
   2c33a:	d104      	bne.n	2c346 <dir_register+0x1ae>
   2c33c:	2328      	movs	r3, #40	; 0x28
   2c33e:	18fb      	adds	r3, r7, r3
   2c340:	687a      	ldr	r2, [r7, #4]
   2c342:	88d2      	ldrh	r2, [r2, #6]
   2c344:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c346:	232c      	movs	r3, #44	; 0x2c
   2c348:	18fb      	adds	r3, r7, r3
   2c34a:	222c      	movs	r2, #44	; 0x2c
   2c34c:	18ba      	adds	r2, r7, r2
   2c34e:	8812      	ldrh	r2, [r2, #0]
   2c350:	3201      	adds	r2, #1
   2c352:	801a      	strh	r2, [r3, #0]
   2c354:	232c      	movs	r3, #44	; 0x2c
   2c356:	18fa      	adds	r2, r7, r3
   2c358:	232a      	movs	r3, #42	; 0x2a
   2c35a:	18fb      	adds	r3, r7, r3
   2c35c:	8812      	ldrh	r2, [r2, #0]
   2c35e:	881b      	ldrh	r3, [r3, #0]
   2c360:	429a      	cmp	r2, r3
   2c362:	d104      	bne.n	2c36e <dir_register+0x1d6>
   2c364:	e013      	b.n	2c38e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c366:	232c      	movs	r3, #44	; 0x2c
   2c368:	18fb      	adds	r3, r7, r3
   2c36a:	2200      	movs	r2, #0
   2c36c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c36e:	232f      	movs	r3, #47	; 0x2f
   2c370:	18fc      	adds	r4, r7, r3
   2c372:	687b      	ldr	r3, [r7, #4]
   2c374:	2101      	movs	r1, #1
   2c376:	0018      	movs	r0, r3
   2c378:	4b5d      	ldr	r3, [pc, #372]	; (2c4f0 <dir_register+0x358>)
   2c37a:	4798      	blx	r3
   2c37c:	0003      	movs	r3, r0
   2c37e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c380:	232f      	movs	r3, #47	; 0x2f
   2c382:	18fb      	adds	r3, r7, r3
   2c384:	781b      	ldrb	r3, [r3, #0]
   2c386:	2b00      	cmp	r3, #0
   2c388:	d0b2      	beq.n	2c2f0 <dir_register+0x158>
   2c38a:	e000      	b.n	2c38e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c38c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c38e:	232f      	movs	r3, #47	; 0x2f
   2c390:	18fb      	adds	r3, r7, r3
   2c392:	781b      	ldrb	r3, [r3, #0]
   2c394:	2b00      	cmp	r3, #0
   2c396:	d163      	bne.n	2c460 <dir_register+0x2c8>
   2c398:	232a      	movs	r3, #42	; 0x2a
   2c39a:	18fb      	adds	r3, r7, r3
   2c39c:	881b      	ldrh	r3, [r3, #0]
   2c39e:	2b01      	cmp	r3, #1
   2c3a0:	d95e      	bls.n	2c460 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c3a2:	232f      	movs	r3, #47	; 0x2f
   2c3a4:	18fc      	adds	r4, r7, r3
   2c3a6:	2328      	movs	r3, #40	; 0x28
   2c3a8:	18fb      	adds	r3, r7, r3
   2c3aa:	881a      	ldrh	r2, [r3, #0]
   2c3ac:	687b      	ldr	r3, [r7, #4]
   2c3ae:	0011      	movs	r1, r2
   2c3b0:	0018      	movs	r0, r3
   2c3b2:	4b4d      	ldr	r3, [pc, #308]	; (2c4e8 <dir_register+0x350>)
   2c3b4:	4798      	blx	r3
   2c3b6:	0003      	movs	r3, r0
   2c3b8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c3ba:	232f      	movs	r3, #47	; 0x2f
   2c3bc:	18fb      	adds	r3, r7, r3
   2c3be:	781b      	ldrb	r3, [r3, #0]
   2c3c0:	2b00      	cmp	r3, #0
   2c3c2:	d14d      	bne.n	2c460 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c3c4:	687b      	ldr	r3, [r7, #4]
   2c3c6:	699b      	ldr	r3, [r3, #24]
   2c3c8:	221e      	movs	r2, #30
   2c3ca:	18bc      	adds	r4, r7, r2
   2c3cc:	0018      	movs	r0, r3
   2c3ce:	4b49      	ldr	r3, [pc, #292]	; (2c4f4 <dir_register+0x35c>)
   2c3d0:	4798      	blx	r3
   2c3d2:	0003      	movs	r3, r0
   2c3d4:	7023      	strb	r3, [r4, #0]
			ne--;
   2c3d6:	232a      	movs	r3, #42	; 0x2a
   2c3d8:	18fb      	adds	r3, r7, r3
   2c3da:	881a      	ldrh	r2, [r3, #0]
   2c3dc:	232a      	movs	r3, #42	; 0x2a
   2c3de:	18fb      	adds	r3, r7, r3
   2c3e0:	3a01      	subs	r2, #1
   2c3e2:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2c3e4:	687b      	ldr	r3, [r7, #4]
   2c3e6:	681a      	ldr	r2, [r3, #0]
   2c3e8:	687b      	ldr	r3, [r7, #4]
   2c3ea:	691b      	ldr	r3, [r3, #16]
   2c3ec:	212f      	movs	r1, #47	; 0x2f
   2c3ee:	187c      	adds	r4, r7, r1
   2c3f0:	0019      	movs	r1, r3
   2c3f2:	0010      	movs	r0, r2
   2c3f4:	4b3d      	ldr	r3, [pc, #244]	; (2c4ec <dir_register+0x354>)
   2c3f6:	4798      	blx	r3
   2c3f8:	0003      	movs	r3, r0
   2c3fa:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2c3fc:	232f      	movs	r3, #47	; 0x2f
   2c3fe:	18fb      	adds	r3, r7, r3
   2c400:	781b      	ldrb	r3, [r3, #0]
   2c402:	2b00      	cmp	r3, #0
   2c404:	d12b      	bne.n	2c45e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2c406:	687b      	ldr	r3, [r7, #4]
   2c408:	69d8      	ldr	r0, [r3, #28]
   2c40a:	687b      	ldr	r3, [r7, #4]
   2c40c:	6959      	ldr	r1, [r3, #20]
   2c40e:	232a      	movs	r3, #42	; 0x2a
   2c410:	18fb      	adds	r3, r7, r3
   2c412:	881b      	ldrh	r3, [r3, #0]
   2c414:	b2da      	uxtb	r2, r3
   2c416:	231e      	movs	r3, #30
   2c418:	18fb      	adds	r3, r7, r3
   2c41a:	781b      	ldrb	r3, [r3, #0]
   2c41c:	4c36      	ldr	r4, [pc, #216]	; (2c4f8 <dir_register+0x360>)
   2c41e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2c420:	687b      	ldr	r3, [r7, #4]
   2c422:	681b      	ldr	r3, [r3, #0]
   2c424:	2201      	movs	r2, #1
   2c426:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2c428:	232f      	movs	r3, #47	; 0x2f
   2c42a:	18fc      	adds	r4, r7, r3
   2c42c:	687b      	ldr	r3, [r7, #4]
   2c42e:	2100      	movs	r1, #0
   2c430:	0018      	movs	r0, r3
   2c432:	4b2f      	ldr	r3, [pc, #188]	; (2c4f0 <dir_register+0x358>)
   2c434:	4798      	blx	r3
   2c436:	0003      	movs	r3, r0
   2c438:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2c43a:	232f      	movs	r3, #47	; 0x2f
   2c43c:	18fb      	adds	r3, r7, r3
   2c43e:	781b      	ldrb	r3, [r3, #0]
   2c440:	2b00      	cmp	r3, #0
   2c442:	d10d      	bne.n	2c460 <dir_register+0x2c8>
   2c444:	232a      	movs	r3, #42	; 0x2a
   2c446:	18fb      	adds	r3, r7, r3
   2c448:	222a      	movs	r2, #42	; 0x2a
   2c44a:	18ba      	adds	r2, r7, r2
   2c44c:	8812      	ldrh	r2, [r2, #0]
   2c44e:	3a01      	subs	r2, #1
   2c450:	801a      	strh	r2, [r3, #0]
   2c452:	232a      	movs	r3, #42	; 0x2a
   2c454:	18fb      	adds	r3, r7, r3
   2c456:	881b      	ldrh	r3, [r3, #0]
   2c458:	2b00      	cmp	r3, #0
   2c45a:	d1c3      	bne.n	2c3e4 <dir_register+0x24c>
   2c45c:	e000      	b.n	2c460 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2c45e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2c460:	232f      	movs	r3, #47	; 0x2f
   2c462:	18fb      	adds	r3, r7, r3
   2c464:	781b      	ldrb	r3, [r3, #0]
   2c466:	2b00      	cmp	r3, #0
   2c468:	d12f      	bne.n	2c4ca <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2c46a:	687b      	ldr	r3, [r7, #4]
   2c46c:	681a      	ldr	r2, [r3, #0]
   2c46e:	687b      	ldr	r3, [r7, #4]
   2c470:	691b      	ldr	r3, [r3, #16]
   2c472:	212f      	movs	r1, #47	; 0x2f
   2c474:	187c      	adds	r4, r7, r1
   2c476:	0019      	movs	r1, r3
   2c478:	0010      	movs	r0, r2
   2c47a:	4b1c      	ldr	r3, [pc, #112]	; (2c4ec <dir_register+0x354>)
   2c47c:	4798      	blx	r3
   2c47e:	0003      	movs	r3, r0
   2c480:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c482:	232f      	movs	r3, #47	; 0x2f
   2c484:	18fb      	adds	r3, r7, r3
   2c486:	781b      	ldrb	r3, [r3, #0]
   2c488:	2b00      	cmp	r3, #0
   2c48a:	d11e      	bne.n	2c4ca <dir_register+0x332>
			dir = dj->dir;
   2c48c:	687b      	ldr	r3, [r7, #4]
   2c48e:	695b      	ldr	r3, [r3, #20]
   2c490:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2c492:	69bb      	ldr	r3, [r7, #24]
   2c494:	2220      	movs	r2, #32
   2c496:	2100      	movs	r1, #0
   2c498:	0018      	movs	r0, r3
   2c49a:	4b18      	ldr	r3, [pc, #96]	; (2c4fc <dir_register+0x364>)
   2c49c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2c49e:	687b      	ldr	r3, [r7, #4]
   2c4a0:	6999      	ldr	r1, [r3, #24]
   2c4a2:	69bb      	ldr	r3, [r7, #24]
   2c4a4:	220b      	movs	r2, #11
   2c4a6:	0018      	movs	r0, r3
   2c4a8:	4b0b      	ldr	r3, [pc, #44]	; (2c4d8 <dir_register+0x340>)
   2c4aa:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2c4ac:	69bb      	ldr	r3, [r7, #24]
   2c4ae:	330c      	adds	r3, #12
   2c4b0:	001a      	movs	r2, r3
   2c4b2:	687b      	ldr	r3, [r7, #4]
   2c4b4:	699b      	ldr	r3, [r3, #24]
   2c4b6:	330b      	adds	r3, #11
   2c4b8:	781b      	ldrb	r3, [r3, #0]
   2c4ba:	2118      	movs	r1, #24
   2c4bc:	400b      	ands	r3, r1
   2c4be:	b2db      	uxtb	r3, r3
   2c4c0:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2c4c2:	687b      	ldr	r3, [r7, #4]
   2c4c4:	681b      	ldr	r3, [r3, #0]
   2c4c6:	2201      	movs	r2, #1
   2c4c8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2c4ca:	232f      	movs	r3, #47	; 0x2f
   2c4cc:	18fb      	adds	r3, r7, r3
   2c4ce:	781b      	ldrb	r3, [r3, #0]
}
   2c4d0:	0018      	movs	r0, r3
   2c4d2:	46bd      	mov	sp, r7
   2c4d4:	b00d      	add	sp, #52	; 0x34
   2c4d6:	bd90      	pop	{r4, r7, pc}
   2c4d8:	0002aff1 	.word	0x0002aff1
   2c4dc:	0002be4d 	.word	0x0002be4d
   2c4e0:	0002bf9d 	.word	0x0002bf9d
   2c4e4:	00032359 	.word	0x00032359
   2c4e8:	0002b919 	.word	0x0002b919
   2c4ec:	0002b0d5 	.word	0x0002b0d5
   2c4f0:	0002ba49 	.word	0x0002ba49
   2c4f4:	0002bf4d 	.word	0x0002bf4d
   2c4f8:	0002bd3d 	.word	0x0002bd3d
   2c4fc:	0002b029 	.word	0x0002b029

0002c500 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2c500:	b590      	push	{r4, r7, lr}
   2c502:	b08b      	sub	sp, #44	; 0x2c
   2c504:	af00      	add	r7, sp, #0
   2c506:	6078      	str	r0, [r7, #4]
   2c508:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2c50a:	683b      	ldr	r3, [r7, #0]
   2c50c:	681b      	ldr	r3, [r3, #0]
   2c50e:	613b      	str	r3, [r7, #16]
   2c510:	e002      	b.n	2c518 <create_name+0x18>
   2c512:	693b      	ldr	r3, [r7, #16]
   2c514:	3301      	adds	r3, #1
   2c516:	613b      	str	r3, [r7, #16]
   2c518:	693b      	ldr	r3, [r7, #16]
   2c51a:	781b      	ldrb	r3, [r3, #0]
   2c51c:	2b2f      	cmp	r3, #47	; 0x2f
   2c51e:	d0f8      	beq.n	2c512 <create_name+0x12>
   2c520:	693b      	ldr	r3, [r7, #16]
   2c522:	781b      	ldrb	r3, [r3, #0]
   2c524:	2b5c      	cmp	r3, #92	; 0x5c
   2c526:	d0f4      	beq.n	2c512 <create_name+0x12>
	lfn = dj->lfn;
   2c528:	687b      	ldr	r3, [r7, #4]
   2c52a:	69db      	ldr	r3, [r3, #28]
   2c52c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c52e:	2300      	movs	r3, #0
   2c530:	617b      	str	r3, [r7, #20]
   2c532:	697b      	ldr	r3, [r7, #20]
   2c534:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c536:	69bb      	ldr	r3, [r7, #24]
   2c538:	1c5a      	adds	r2, r3, #1
   2c53a:	61ba      	str	r2, [r7, #24]
   2c53c:	693a      	ldr	r2, [r7, #16]
   2c53e:	18d3      	adds	r3, r2, r3
   2c540:	781a      	ldrb	r2, [r3, #0]
   2c542:	2324      	movs	r3, #36	; 0x24
   2c544:	18fb      	adds	r3, r7, r3
   2c546:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c548:	2324      	movs	r3, #36	; 0x24
   2c54a:	18fb      	adds	r3, r7, r3
   2c54c:	881b      	ldrh	r3, [r3, #0]
   2c54e:	2b1f      	cmp	r3, #31
   2c550:	d944      	bls.n	2c5dc <create_name+0xdc>
   2c552:	2324      	movs	r3, #36	; 0x24
   2c554:	18fb      	adds	r3, r7, r3
   2c556:	881b      	ldrh	r3, [r3, #0]
   2c558:	2b2f      	cmp	r3, #47	; 0x2f
   2c55a:	d03f      	beq.n	2c5dc <create_name+0xdc>
   2c55c:	2324      	movs	r3, #36	; 0x24
   2c55e:	18fb      	adds	r3, r7, r3
   2c560:	881b      	ldrh	r3, [r3, #0]
   2c562:	2b5c      	cmp	r3, #92	; 0x5c
   2c564:	d03a      	beq.n	2c5dc <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c566:	697b      	ldr	r3, [r7, #20]
   2c568:	2bfe      	cmp	r3, #254	; 0xfe
   2c56a:	d901      	bls.n	2c570 <create_name+0x70>
			return FR_INVALID_NAME;
   2c56c:	2306      	movs	r3, #6
   2c56e:	e1e7      	b.n	2c940 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c570:	2324      	movs	r3, #36	; 0x24
   2c572:	18fb      	adds	r3, r7, r3
   2c574:	2224      	movs	r2, #36	; 0x24
   2c576:	18ba      	adds	r2, r7, r2
   2c578:	8812      	ldrh	r2, [r2, #0]
   2c57a:	21ff      	movs	r1, #255	; 0xff
   2c57c:	400a      	ands	r2, r1
   2c57e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c580:	2324      	movs	r3, #36	; 0x24
   2c582:	18fc      	adds	r4, r7, r3
   2c584:	2324      	movs	r3, #36	; 0x24
   2c586:	18fb      	adds	r3, r7, r3
   2c588:	881b      	ldrh	r3, [r3, #0]
   2c58a:	2101      	movs	r1, #1
   2c58c:	0018      	movs	r0, r3
   2c58e:	4bba      	ldr	r3, [pc, #744]	; (2c878 <create_name+0x378>)
   2c590:	4798      	blx	r3
   2c592:	0003      	movs	r3, r0
   2c594:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c596:	2324      	movs	r3, #36	; 0x24
   2c598:	18fb      	adds	r3, r7, r3
   2c59a:	881b      	ldrh	r3, [r3, #0]
   2c59c:	2b00      	cmp	r3, #0
   2c59e:	d101      	bne.n	2c5a4 <create_name+0xa4>
   2c5a0:	2306      	movs	r3, #6
   2c5a2:	e1cd      	b.n	2c940 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c5a4:	2324      	movs	r3, #36	; 0x24
   2c5a6:	18fb      	adds	r3, r7, r3
   2c5a8:	881b      	ldrh	r3, [r3, #0]
   2c5aa:	2b7f      	cmp	r3, #127	; 0x7f
   2c5ac:	d80b      	bhi.n	2c5c6 <create_name+0xc6>
   2c5ae:	2324      	movs	r3, #36	; 0x24
   2c5b0:	18fb      	adds	r3, r7, r3
   2c5b2:	881a      	ldrh	r2, [r3, #0]
   2c5b4:	4bb1      	ldr	r3, [pc, #708]	; (2c87c <create_name+0x37c>)
   2c5b6:	0011      	movs	r1, r2
   2c5b8:	0018      	movs	r0, r3
   2c5ba:	4bb1      	ldr	r3, [pc, #708]	; (2c880 <create_name+0x380>)
   2c5bc:	4798      	blx	r3
   2c5be:	1e03      	subs	r3, r0, #0
   2c5c0:	d001      	beq.n	2c5c6 <create_name+0xc6>
			return FR_INVALID_NAME;
   2c5c2:	2306      	movs	r3, #6
   2c5c4:	e1bc      	b.n	2c940 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c5c6:	697b      	ldr	r3, [r7, #20]
   2c5c8:	1c5a      	adds	r2, r3, #1
   2c5ca:	617a      	str	r2, [r7, #20]
   2c5cc:	005b      	lsls	r3, r3, #1
   2c5ce:	68fa      	ldr	r2, [r7, #12]
   2c5d0:	18d3      	adds	r3, r2, r3
   2c5d2:	2224      	movs	r2, #36	; 0x24
   2c5d4:	18ba      	adds	r2, r7, r2
   2c5d6:	8812      	ldrh	r2, [r2, #0]
   2c5d8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2c5da:	e7ac      	b.n	2c536 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2c5dc:	693a      	ldr	r2, [r7, #16]
   2c5de:	69bb      	ldr	r3, [r7, #24]
   2c5e0:	18d2      	adds	r2, r2, r3
   2c5e2:	683b      	ldr	r3, [r7, #0]
   2c5e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2c5e6:	2324      	movs	r3, #36	; 0x24
   2c5e8:	18fb      	adds	r3, r7, r3
   2c5ea:	881b      	ldrh	r3, [r3, #0]
   2c5ec:	2b1f      	cmp	r3, #31
   2c5ee:	d801      	bhi.n	2c5f4 <create_name+0xf4>
   2c5f0:	2204      	movs	r2, #4
   2c5f2:	e000      	b.n	2c5f6 <create_name+0xf6>
   2c5f4:	2200      	movs	r2, #0
   2c5f6:	2326      	movs	r3, #38	; 0x26
   2c5f8:	18fb      	adds	r3, r7, r3
   2c5fa:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2c5fc:	e017      	b.n	2c62e <create_name+0x12e>
		w = lfn[di-1];
   2c5fe:	697b      	ldr	r3, [r7, #20]
   2c600:	4aa0      	ldr	r2, [pc, #640]	; (2c884 <create_name+0x384>)
   2c602:	4694      	mov	ip, r2
   2c604:	4463      	add	r3, ip
   2c606:	005b      	lsls	r3, r3, #1
   2c608:	68fa      	ldr	r2, [r7, #12]
   2c60a:	18d2      	adds	r2, r2, r3
   2c60c:	2324      	movs	r3, #36	; 0x24
   2c60e:	18fb      	adds	r3, r7, r3
   2c610:	8812      	ldrh	r2, [r2, #0]
   2c612:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2c614:	2324      	movs	r3, #36	; 0x24
   2c616:	18fb      	adds	r3, r7, r3
   2c618:	881b      	ldrh	r3, [r3, #0]
   2c61a:	2b20      	cmp	r3, #32
   2c61c:	d004      	beq.n	2c628 <create_name+0x128>
   2c61e:	2324      	movs	r3, #36	; 0x24
   2c620:	18fb      	adds	r3, r7, r3
   2c622:	881b      	ldrh	r3, [r3, #0]
   2c624:	2b2e      	cmp	r3, #46	; 0x2e
   2c626:	d106      	bne.n	2c636 <create_name+0x136>
		di--;
   2c628:	697b      	ldr	r3, [r7, #20]
   2c62a:	3b01      	subs	r3, #1
   2c62c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2c62e:	697b      	ldr	r3, [r7, #20]
   2c630:	2b00      	cmp	r3, #0
   2c632:	d1e4      	bne.n	2c5fe <create_name+0xfe>
   2c634:	e000      	b.n	2c638 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2c636:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2c638:	697b      	ldr	r3, [r7, #20]
   2c63a:	2b00      	cmp	r3, #0
   2c63c:	d101      	bne.n	2c642 <create_name+0x142>
   2c63e:	2306      	movs	r3, #6
   2c640:	e17e      	b.n	2c940 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2c642:	697b      	ldr	r3, [r7, #20]
   2c644:	005b      	lsls	r3, r3, #1
   2c646:	68fa      	ldr	r2, [r7, #12]
   2c648:	18d3      	adds	r3, r2, r3
   2c64a:	2200      	movs	r2, #0
   2c64c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2c64e:	687b      	ldr	r3, [r7, #4]
   2c650:	699b      	ldr	r3, [r3, #24]
   2c652:	220b      	movs	r2, #11
   2c654:	2120      	movs	r1, #32
   2c656:	0018      	movs	r0, r3
   2c658:	4b8b      	ldr	r3, [pc, #556]	; (2c888 <create_name+0x388>)
   2c65a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2c65c:	2300      	movs	r3, #0
   2c65e:	61bb      	str	r3, [r7, #24]
   2c660:	e002      	b.n	2c668 <create_name+0x168>
   2c662:	69bb      	ldr	r3, [r7, #24]
   2c664:	3301      	adds	r3, #1
   2c666:	61bb      	str	r3, [r7, #24]
   2c668:	69bb      	ldr	r3, [r7, #24]
   2c66a:	005b      	lsls	r3, r3, #1
   2c66c:	68fa      	ldr	r2, [r7, #12]
   2c66e:	18d3      	adds	r3, r2, r3
   2c670:	881b      	ldrh	r3, [r3, #0]
   2c672:	2b20      	cmp	r3, #32
   2c674:	d0f5      	beq.n	2c662 <create_name+0x162>
   2c676:	69bb      	ldr	r3, [r7, #24]
   2c678:	005b      	lsls	r3, r3, #1
   2c67a:	68fa      	ldr	r2, [r7, #12]
   2c67c:	18d3      	adds	r3, r2, r3
   2c67e:	881b      	ldrh	r3, [r3, #0]
   2c680:	2b2e      	cmp	r3, #46	; 0x2e
   2c682:	d0ee      	beq.n	2c662 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2c684:	69bb      	ldr	r3, [r7, #24]
   2c686:	2b00      	cmp	r3, #0
   2c688:	d00b      	beq.n	2c6a2 <create_name+0x1a2>
   2c68a:	2326      	movs	r3, #38	; 0x26
   2c68c:	18fb      	adds	r3, r7, r3
   2c68e:	2226      	movs	r2, #38	; 0x26
   2c690:	18ba      	adds	r2, r7, r2
   2c692:	7812      	ldrb	r2, [r2, #0]
   2c694:	2103      	movs	r1, #3
   2c696:	430a      	orrs	r2, r1
   2c698:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2c69a:	e002      	b.n	2c6a2 <create_name+0x1a2>
   2c69c:	697b      	ldr	r3, [r7, #20]
   2c69e:	3b01      	subs	r3, #1
   2c6a0:	617b      	str	r3, [r7, #20]
   2c6a2:	697b      	ldr	r3, [r7, #20]
   2c6a4:	2b00      	cmp	r3, #0
   2c6a6:	d009      	beq.n	2c6bc <create_name+0x1bc>
   2c6a8:	697b      	ldr	r3, [r7, #20]
   2c6aa:	4a76      	ldr	r2, [pc, #472]	; (2c884 <create_name+0x384>)
   2c6ac:	4694      	mov	ip, r2
   2c6ae:	4463      	add	r3, ip
   2c6b0:	005b      	lsls	r3, r3, #1
   2c6b2:	68fa      	ldr	r2, [r7, #12]
   2c6b4:	18d3      	adds	r3, r2, r3
   2c6b6:	881b      	ldrh	r3, [r3, #0]
   2c6b8:	2b2e      	cmp	r3, #46	; 0x2e
   2c6ba:	d1ef      	bne.n	2c69c <create_name+0x19c>

	b = i = 0; ni = 8;
   2c6bc:	2300      	movs	r3, #0
   2c6be:	623b      	str	r3, [r7, #32]
   2c6c0:	2327      	movs	r3, #39	; 0x27
   2c6c2:	18fb      	adds	r3, r7, r3
   2c6c4:	2200      	movs	r2, #0
   2c6c6:	701a      	strb	r2, [r3, #0]
   2c6c8:	2308      	movs	r3, #8
   2c6ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2c6cc:	69bb      	ldr	r3, [r7, #24]
   2c6ce:	1c5a      	adds	r2, r3, #1
   2c6d0:	61ba      	str	r2, [r7, #24]
   2c6d2:	005b      	lsls	r3, r3, #1
   2c6d4:	68fa      	ldr	r2, [r7, #12]
   2c6d6:	18d2      	adds	r2, r2, r3
   2c6d8:	2324      	movs	r3, #36	; 0x24
   2c6da:	18fb      	adds	r3, r7, r3
   2c6dc:	8812      	ldrh	r2, [r2, #0]
   2c6de:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c6e0:	2324      	movs	r3, #36	; 0x24
   2c6e2:	18fb      	adds	r3, r7, r3
   2c6e4:	881b      	ldrh	r3, [r3, #0]
   2c6e6:	2b00      	cmp	r3, #0
   2c6e8:	d100      	bne.n	2c6ec <create_name+0x1ec>
   2c6ea:	e0c3      	b.n	2c874 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c6ec:	2324      	movs	r3, #36	; 0x24
   2c6ee:	18fb      	adds	r3, r7, r3
   2c6f0:	881b      	ldrh	r3, [r3, #0]
   2c6f2:	2b20      	cmp	r3, #32
   2c6f4:	d008      	beq.n	2c708 <create_name+0x208>
   2c6f6:	2324      	movs	r3, #36	; 0x24
   2c6f8:	18fb      	adds	r3, r7, r3
   2c6fa:	881b      	ldrh	r3, [r3, #0]
   2c6fc:	2b2e      	cmp	r3, #46	; 0x2e
   2c6fe:	d10c      	bne.n	2c71a <create_name+0x21a>
   2c700:	69ba      	ldr	r2, [r7, #24]
   2c702:	697b      	ldr	r3, [r7, #20]
   2c704:	429a      	cmp	r2, r3
   2c706:	d008      	beq.n	2c71a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c708:	2326      	movs	r3, #38	; 0x26
   2c70a:	18fb      	adds	r3, r7, r3
   2c70c:	2226      	movs	r2, #38	; 0x26
   2c70e:	18ba      	adds	r2, r7, r2
   2c710:	7812      	ldrb	r2, [r2, #0]
   2c712:	2103      	movs	r1, #3
   2c714:	430a      	orrs	r2, r1
   2c716:	701a      	strb	r2, [r3, #0]
   2c718:	e0ab      	b.n	2c872 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c71a:	6a3a      	ldr	r2, [r7, #32]
   2c71c:	69fb      	ldr	r3, [r7, #28]
   2c71e:	429a      	cmp	r2, r3
   2c720:	d203      	bcs.n	2c72a <create_name+0x22a>
   2c722:	69ba      	ldr	r2, [r7, #24]
   2c724:	697b      	ldr	r3, [r7, #20]
   2c726:	429a      	cmp	r2, r3
   2c728:	d12a      	bne.n	2c780 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c72a:	69fb      	ldr	r3, [r7, #28]
   2c72c:	2b0b      	cmp	r3, #11
   2c72e:	d108      	bne.n	2c742 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c730:	2326      	movs	r3, #38	; 0x26
   2c732:	18fb      	adds	r3, r7, r3
   2c734:	2226      	movs	r2, #38	; 0x26
   2c736:	18ba      	adds	r2, r7, r2
   2c738:	7812      	ldrb	r2, [r2, #0]
   2c73a:	2103      	movs	r1, #3
   2c73c:	430a      	orrs	r2, r1
   2c73e:	701a      	strb	r2, [r3, #0]
   2c740:	e0a9      	b.n	2c896 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c742:	69ba      	ldr	r2, [r7, #24]
   2c744:	697b      	ldr	r3, [r7, #20]
   2c746:	429a      	cmp	r2, r3
   2c748:	d007      	beq.n	2c75a <create_name+0x25a>
   2c74a:	2326      	movs	r3, #38	; 0x26
   2c74c:	18fb      	adds	r3, r7, r3
   2c74e:	2226      	movs	r2, #38	; 0x26
   2c750:	18ba      	adds	r2, r7, r2
   2c752:	7812      	ldrb	r2, [r2, #0]
   2c754:	2103      	movs	r1, #3
   2c756:	430a      	orrs	r2, r1
   2c758:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c75a:	69ba      	ldr	r2, [r7, #24]
   2c75c:	697b      	ldr	r3, [r7, #20]
   2c75e:	429a      	cmp	r2, r3
   2c760:	d900      	bls.n	2c764 <create_name+0x264>
   2c762:	e097      	b.n	2c894 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c764:	697b      	ldr	r3, [r7, #20]
   2c766:	61bb      	str	r3, [r7, #24]
   2c768:	2308      	movs	r3, #8
   2c76a:	623b      	str	r3, [r7, #32]
   2c76c:	230b      	movs	r3, #11
   2c76e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c770:	2327      	movs	r3, #39	; 0x27
   2c772:	18fb      	adds	r3, r7, r3
   2c774:	2227      	movs	r2, #39	; 0x27
   2c776:	18ba      	adds	r2, r7, r2
   2c778:	7812      	ldrb	r2, [r2, #0]
   2c77a:	0092      	lsls	r2, r2, #2
   2c77c:	701a      	strb	r2, [r3, #0]
   2c77e:	e078      	b.n	2c872 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c780:	2324      	movs	r3, #36	; 0x24
   2c782:	18fb      	adds	r3, r7, r3
   2c784:	881b      	ldrh	r3, [r3, #0]
   2c786:	2b7f      	cmp	r3, #127	; 0x7f
   2c788:	d920      	bls.n	2c7cc <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c78a:	2324      	movs	r3, #36	; 0x24
   2c78c:	18fc      	adds	r4, r7, r3
   2c78e:	2324      	movs	r3, #36	; 0x24
   2c790:	18fb      	adds	r3, r7, r3
   2c792:	881b      	ldrh	r3, [r3, #0]
   2c794:	2100      	movs	r1, #0
   2c796:	0018      	movs	r0, r3
   2c798:	4b37      	ldr	r3, [pc, #220]	; (2c878 <create_name+0x378>)
   2c79a:	4798      	blx	r3
   2c79c:	0003      	movs	r3, r0
   2c79e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c7a0:	2324      	movs	r3, #36	; 0x24
   2c7a2:	18fb      	adds	r3, r7, r3
   2c7a4:	881b      	ldrh	r3, [r3, #0]
   2c7a6:	2b00      	cmp	r3, #0
   2c7a8:	d008      	beq.n	2c7bc <create_name+0x2bc>
   2c7aa:	2324      	movs	r3, #36	; 0x24
   2c7ac:	18fb      	adds	r3, r7, r3
   2c7ae:	881b      	ldrh	r3, [r3, #0]
   2c7b0:	3b80      	subs	r3, #128	; 0x80
   2c7b2:	4a36      	ldr	r2, [pc, #216]	; (2c88c <create_name+0x38c>)
   2c7b4:	5cd2      	ldrb	r2, [r2, r3]
   2c7b6:	2324      	movs	r3, #36	; 0x24
   2c7b8:	18fb      	adds	r3, r7, r3
   2c7ba:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c7bc:	2326      	movs	r3, #38	; 0x26
   2c7be:	18fb      	adds	r3, r7, r3
   2c7c0:	2226      	movs	r2, #38	; 0x26
   2c7c2:	18ba      	adds	r2, r7, r2
   2c7c4:	7812      	ldrb	r2, [r2, #0]
   2c7c6:	2102      	movs	r1, #2
   2c7c8:	430a      	orrs	r2, r1
   2c7ca:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c7cc:	2324      	movs	r3, #36	; 0x24
   2c7ce:	18fb      	adds	r3, r7, r3
   2c7d0:	881b      	ldrh	r3, [r3, #0]
   2c7d2:	2b00      	cmp	r3, #0
   2c7d4:	d009      	beq.n	2c7ea <create_name+0x2ea>
   2c7d6:	2324      	movs	r3, #36	; 0x24
   2c7d8:	18fb      	adds	r3, r7, r3
   2c7da:	881a      	ldrh	r2, [r3, #0]
   2c7dc:	4b2c      	ldr	r3, [pc, #176]	; (2c890 <create_name+0x390>)
   2c7de:	0011      	movs	r1, r2
   2c7e0:	0018      	movs	r0, r3
   2c7e2:	4b27      	ldr	r3, [pc, #156]	; (2c880 <create_name+0x380>)
   2c7e4:	4798      	blx	r3
   2c7e6:	1e03      	subs	r3, r0, #0
   2c7e8:	d00c      	beq.n	2c804 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c7ea:	2324      	movs	r3, #36	; 0x24
   2c7ec:	18fb      	adds	r3, r7, r3
   2c7ee:	225f      	movs	r2, #95	; 0x5f
   2c7f0:	801a      	strh	r2, [r3, #0]
   2c7f2:	2326      	movs	r3, #38	; 0x26
   2c7f4:	18fb      	adds	r3, r7, r3
   2c7f6:	2226      	movs	r2, #38	; 0x26
   2c7f8:	18ba      	adds	r2, r7, r2
   2c7fa:	7812      	ldrb	r2, [r2, #0]
   2c7fc:	2103      	movs	r1, #3
   2c7fe:	430a      	orrs	r2, r1
   2c800:	701a      	strb	r2, [r3, #0]
   2c802:	e02b      	b.n	2c85c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c804:	2324      	movs	r3, #36	; 0x24
   2c806:	18fb      	adds	r3, r7, r3
   2c808:	881b      	ldrh	r3, [r3, #0]
   2c80a:	2b40      	cmp	r3, #64	; 0x40
   2c80c:	d90d      	bls.n	2c82a <create_name+0x32a>
   2c80e:	2324      	movs	r3, #36	; 0x24
   2c810:	18fb      	adds	r3, r7, r3
   2c812:	881b      	ldrh	r3, [r3, #0]
   2c814:	2b5a      	cmp	r3, #90	; 0x5a
   2c816:	d808      	bhi.n	2c82a <create_name+0x32a>
					b |= 2;
   2c818:	2327      	movs	r3, #39	; 0x27
   2c81a:	18fb      	adds	r3, r7, r3
   2c81c:	2227      	movs	r2, #39	; 0x27
   2c81e:	18ba      	adds	r2, r7, r2
   2c820:	7812      	ldrb	r2, [r2, #0]
   2c822:	2102      	movs	r1, #2
   2c824:	430a      	orrs	r2, r1
   2c826:	701a      	strb	r2, [r3, #0]
   2c828:	e018      	b.n	2c85c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c82a:	2324      	movs	r3, #36	; 0x24
   2c82c:	18fb      	adds	r3, r7, r3
   2c82e:	881b      	ldrh	r3, [r3, #0]
   2c830:	2b60      	cmp	r3, #96	; 0x60
   2c832:	d913      	bls.n	2c85c <create_name+0x35c>
   2c834:	2324      	movs	r3, #36	; 0x24
   2c836:	18fb      	adds	r3, r7, r3
   2c838:	881b      	ldrh	r3, [r3, #0]
   2c83a:	2b7a      	cmp	r3, #122	; 0x7a
   2c83c:	d80e      	bhi.n	2c85c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c83e:	2327      	movs	r3, #39	; 0x27
   2c840:	18fb      	adds	r3, r7, r3
   2c842:	2227      	movs	r2, #39	; 0x27
   2c844:	18ba      	adds	r2, r7, r2
   2c846:	7812      	ldrb	r2, [r2, #0]
   2c848:	2101      	movs	r1, #1
   2c84a:	430a      	orrs	r2, r1
   2c84c:	701a      	strb	r2, [r3, #0]
   2c84e:	2324      	movs	r3, #36	; 0x24
   2c850:	18fb      	adds	r3, r7, r3
   2c852:	2224      	movs	r2, #36	; 0x24
   2c854:	18ba      	adds	r2, r7, r2
   2c856:	8812      	ldrh	r2, [r2, #0]
   2c858:	3a20      	subs	r2, #32
   2c85a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c85c:	687b      	ldr	r3, [r7, #4]
   2c85e:	699a      	ldr	r2, [r3, #24]
   2c860:	6a3b      	ldr	r3, [r7, #32]
   2c862:	1c59      	adds	r1, r3, #1
   2c864:	6239      	str	r1, [r7, #32]
   2c866:	18d3      	adds	r3, r2, r3
   2c868:	2224      	movs	r2, #36	; 0x24
   2c86a:	18ba      	adds	r2, r7, r2
   2c86c:	8812      	ldrh	r2, [r2, #0]
   2c86e:	b2d2      	uxtb	r2, r2
   2c870:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c872:	e72b      	b.n	2c6cc <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c874:	46c0      	nop			; (mov r8, r8)
   2c876:	e00e      	b.n	2c896 <create_name+0x396>
   2c878:	0002dc39 	.word	0x0002dc39
   2c87c:	00038ea8 	.word	0x00038ea8
   2c880:	0002b0a3 	.word	0x0002b0a3
   2c884:	7fffffff 	.word	0x7fffffff
   2c888:	0002b029 	.word	0x0002b029
   2c88c:	00038ef0 	.word	0x00038ef0
   2c890:	00038eb4 	.word	0x00038eb4
			if (si > di) break;			/* No extension */
   2c894:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c896:	687b      	ldr	r3, [r7, #4]
   2c898:	699b      	ldr	r3, [r3, #24]
   2c89a:	781b      	ldrb	r3, [r3, #0]
   2c89c:	2be5      	cmp	r3, #229	; 0xe5
   2c89e:	d103      	bne.n	2c8a8 <create_name+0x3a8>
   2c8a0:	687b      	ldr	r3, [r7, #4]
   2c8a2:	699b      	ldr	r3, [r3, #24]
   2c8a4:	2205      	movs	r2, #5
   2c8a6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c8a8:	69fb      	ldr	r3, [r7, #28]
   2c8aa:	2b08      	cmp	r3, #8
   2c8ac:	d106      	bne.n	2c8bc <create_name+0x3bc>
   2c8ae:	2327      	movs	r3, #39	; 0x27
   2c8b0:	18fb      	adds	r3, r7, r3
   2c8b2:	2227      	movs	r2, #39	; 0x27
   2c8b4:	18ba      	adds	r2, r7, r2
   2c8b6:	7812      	ldrb	r2, [r2, #0]
   2c8b8:	0092      	lsls	r2, r2, #2
   2c8ba:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c8bc:	2327      	movs	r3, #39	; 0x27
   2c8be:	18fb      	adds	r3, r7, r3
   2c8c0:	781b      	ldrb	r3, [r3, #0]
   2c8c2:	220c      	movs	r2, #12
   2c8c4:	4013      	ands	r3, r2
   2c8c6:	2b0c      	cmp	r3, #12
   2c8c8:	d006      	beq.n	2c8d8 <create_name+0x3d8>
   2c8ca:	2327      	movs	r3, #39	; 0x27
   2c8cc:	18fb      	adds	r3, r7, r3
   2c8ce:	781b      	ldrb	r3, [r3, #0]
   2c8d0:	2203      	movs	r2, #3
   2c8d2:	4013      	ands	r3, r2
   2c8d4:	2b03      	cmp	r3, #3
   2c8d6:	d107      	bne.n	2c8e8 <create_name+0x3e8>
		cf |= NS_LFN;
   2c8d8:	2326      	movs	r3, #38	; 0x26
   2c8da:	18fb      	adds	r3, r7, r3
   2c8dc:	2226      	movs	r2, #38	; 0x26
   2c8de:	18ba      	adds	r2, r7, r2
   2c8e0:	7812      	ldrb	r2, [r2, #0]
   2c8e2:	2102      	movs	r1, #2
   2c8e4:	430a      	orrs	r2, r1
   2c8e6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2c8e8:	2326      	movs	r3, #38	; 0x26
   2c8ea:	18fb      	adds	r3, r7, r3
   2c8ec:	781b      	ldrb	r3, [r3, #0]
   2c8ee:	2202      	movs	r2, #2
   2c8f0:	4013      	ands	r3, r2
   2c8f2:	d11d      	bne.n	2c930 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2c8f4:	2327      	movs	r3, #39	; 0x27
   2c8f6:	18fb      	adds	r3, r7, r3
   2c8f8:	781b      	ldrb	r3, [r3, #0]
   2c8fa:	2203      	movs	r2, #3
   2c8fc:	4013      	ands	r3, r2
   2c8fe:	2b01      	cmp	r3, #1
   2c900:	d107      	bne.n	2c912 <create_name+0x412>
   2c902:	2326      	movs	r3, #38	; 0x26
   2c904:	18fb      	adds	r3, r7, r3
   2c906:	2226      	movs	r2, #38	; 0x26
   2c908:	18ba      	adds	r2, r7, r2
   2c90a:	7812      	ldrb	r2, [r2, #0]
   2c90c:	2110      	movs	r1, #16
   2c90e:	430a      	orrs	r2, r1
   2c910:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2c912:	2327      	movs	r3, #39	; 0x27
   2c914:	18fb      	adds	r3, r7, r3
   2c916:	781b      	ldrb	r3, [r3, #0]
   2c918:	220c      	movs	r2, #12
   2c91a:	4013      	ands	r3, r2
   2c91c:	2b04      	cmp	r3, #4
   2c91e:	d107      	bne.n	2c930 <create_name+0x430>
   2c920:	2326      	movs	r3, #38	; 0x26
   2c922:	18fb      	adds	r3, r7, r3
   2c924:	2226      	movs	r2, #38	; 0x26
   2c926:	18ba      	adds	r2, r7, r2
   2c928:	7812      	ldrb	r2, [r2, #0]
   2c92a:	2108      	movs	r1, #8
   2c92c:	430a      	orrs	r2, r1
   2c92e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2c930:	687b      	ldr	r3, [r7, #4]
   2c932:	699b      	ldr	r3, [r3, #24]
   2c934:	330b      	adds	r3, #11
   2c936:	2226      	movs	r2, #38	; 0x26
   2c938:	18ba      	adds	r2, r7, r2
   2c93a:	7812      	ldrb	r2, [r2, #0]
   2c93c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2c93e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2c940:	0018      	movs	r0, r3
   2c942:	46bd      	mov	sp, r7
   2c944:	b00b      	add	sp, #44	; 0x2c
   2c946:	bd90      	pop	{r4, r7, pc}

0002c948 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2c948:	b590      	push	{r4, r7, lr}
   2c94a:	b085      	sub	sp, #20
   2c94c:	af00      	add	r7, sp, #0
   2c94e:	6078      	str	r0, [r7, #4]
   2c950:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2c952:	683b      	ldr	r3, [r7, #0]
   2c954:	781b      	ldrb	r3, [r3, #0]
   2c956:	2b2f      	cmp	r3, #47	; 0x2f
   2c958:	d003      	beq.n	2c962 <follow_path+0x1a>
   2c95a:	683b      	ldr	r3, [r7, #0]
   2c95c:	781b      	ldrb	r3, [r3, #0]
   2c95e:	2b5c      	cmp	r3, #92	; 0x5c
   2c960:	d102      	bne.n	2c968 <follow_path+0x20>
		path++;
   2c962:	683b      	ldr	r3, [r7, #0]
   2c964:	3301      	adds	r3, #1
   2c966:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2c968:	687b      	ldr	r3, [r7, #4]
   2c96a:	2200      	movs	r2, #0
   2c96c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2c96e:	683b      	ldr	r3, [r7, #0]
   2c970:	781b      	ldrb	r3, [r3, #0]
   2c972:	2b1f      	cmp	r3, #31
   2c974:	d80c      	bhi.n	2c990 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2c976:	230f      	movs	r3, #15
   2c978:	18fc      	adds	r4, r7, r3
   2c97a:	687b      	ldr	r3, [r7, #4]
   2c97c:	2100      	movs	r1, #0
   2c97e:	0018      	movs	r0, r3
   2c980:	4b3c      	ldr	r3, [pc, #240]	; (2ca74 <follow_path+0x12c>)
   2c982:	4798      	blx	r3
   2c984:	0003      	movs	r3, r0
   2c986:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2c988:	687b      	ldr	r3, [r7, #4]
   2c98a:	2200      	movs	r2, #0
   2c98c:	615a      	str	r2, [r3, #20]
   2c98e:	e06a      	b.n	2ca66 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2c990:	230f      	movs	r3, #15
   2c992:	18fc      	adds	r4, r7, r3
   2c994:	003a      	movs	r2, r7
   2c996:	687b      	ldr	r3, [r7, #4]
   2c998:	0011      	movs	r1, r2
   2c99a:	0018      	movs	r0, r3
   2c99c:	4b36      	ldr	r3, [pc, #216]	; (2ca78 <follow_path+0x130>)
   2c99e:	4798      	blx	r3
   2c9a0:	0003      	movs	r3, r0
   2c9a2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c9a4:	230f      	movs	r3, #15
   2c9a6:	18fb      	adds	r3, r7, r3
   2c9a8:	781b      	ldrb	r3, [r3, #0]
   2c9aa:	2b00      	cmp	r3, #0
   2c9ac:	d154      	bne.n	2ca58 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2c9ae:	230f      	movs	r3, #15
   2c9b0:	18fc      	adds	r4, r7, r3
   2c9b2:	687b      	ldr	r3, [r7, #4]
   2c9b4:	0018      	movs	r0, r3
   2c9b6:	4b31      	ldr	r3, [pc, #196]	; (2ca7c <follow_path+0x134>)
   2c9b8:	4798      	blx	r3
   2c9ba:	0003      	movs	r3, r0
   2c9bc:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2c9be:	687b      	ldr	r3, [r7, #4]
   2c9c0:	699a      	ldr	r2, [r3, #24]
   2c9c2:	230e      	movs	r3, #14
   2c9c4:	18fb      	adds	r3, r7, r3
   2c9c6:	7ad2      	ldrb	r2, [r2, #11]
   2c9c8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2c9ca:	230f      	movs	r3, #15
   2c9cc:	18fb      	adds	r3, r7, r3
   2c9ce:	781b      	ldrb	r3, [r3, #0]
   2c9d0:	2b00      	cmp	r3, #0
   2c9d2:	d00f      	beq.n	2c9f4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c9d4:	230f      	movs	r3, #15
   2c9d6:	18fb      	adds	r3, r7, r3
   2c9d8:	781b      	ldrb	r3, [r3, #0]
   2c9da:	2b04      	cmp	r3, #4
   2c9dc:	d13e      	bne.n	2ca5c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2c9de:	230e      	movs	r3, #14
   2c9e0:	18fb      	adds	r3, r7, r3
   2c9e2:	781b      	ldrb	r3, [r3, #0]
   2c9e4:	2204      	movs	r2, #4
   2c9e6:	4013      	ands	r3, r2
   2c9e8:	d13a      	bne.n	2ca60 <follow_path+0x118>
   2c9ea:	230f      	movs	r3, #15
   2c9ec:	18fb      	adds	r3, r7, r3
   2c9ee:	2205      	movs	r2, #5
   2c9f0:	701a      	strb	r2, [r3, #0]
				}
				break;
   2c9f2:	e035      	b.n	2ca60 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c9f4:	230e      	movs	r3, #14
   2c9f6:	18fb      	adds	r3, r7, r3
   2c9f8:	781b      	ldrb	r3, [r3, #0]
   2c9fa:	2204      	movs	r2, #4
   2c9fc:	4013      	ands	r3, r2
   2c9fe:	d131      	bne.n	2ca64 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2ca00:	687b      	ldr	r3, [r7, #4]
   2ca02:	695b      	ldr	r3, [r3, #20]
   2ca04:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2ca06:	68bb      	ldr	r3, [r7, #8]
   2ca08:	330b      	adds	r3, #11
   2ca0a:	781b      	ldrb	r3, [r3, #0]
   2ca0c:	001a      	movs	r2, r3
   2ca0e:	2310      	movs	r3, #16
   2ca10:	4013      	ands	r3, r2
   2ca12:	d104      	bne.n	2ca1e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2ca14:	230f      	movs	r3, #15
   2ca16:	18fb      	adds	r3, r7, r3
   2ca18:	2205      	movs	r2, #5
   2ca1a:	701a      	strb	r2, [r3, #0]
   2ca1c:	e023      	b.n	2ca66 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2ca1e:	68bb      	ldr	r3, [r7, #8]
   2ca20:	3315      	adds	r3, #21
   2ca22:	781b      	ldrb	r3, [r3, #0]
   2ca24:	021b      	lsls	r3, r3, #8
   2ca26:	b21a      	sxth	r2, r3
   2ca28:	68bb      	ldr	r3, [r7, #8]
   2ca2a:	3314      	adds	r3, #20
   2ca2c:	781b      	ldrb	r3, [r3, #0]
   2ca2e:	b21b      	sxth	r3, r3
   2ca30:	4313      	orrs	r3, r2
   2ca32:	b21b      	sxth	r3, r3
   2ca34:	b29b      	uxth	r3, r3
   2ca36:	041b      	lsls	r3, r3, #16
   2ca38:	68ba      	ldr	r2, [r7, #8]
   2ca3a:	321b      	adds	r2, #27
   2ca3c:	7812      	ldrb	r2, [r2, #0]
   2ca3e:	0212      	lsls	r2, r2, #8
   2ca40:	b211      	sxth	r1, r2
   2ca42:	68ba      	ldr	r2, [r7, #8]
   2ca44:	321a      	adds	r2, #26
   2ca46:	7812      	ldrb	r2, [r2, #0]
   2ca48:	b212      	sxth	r2, r2
   2ca4a:	430a      	orrs	r2, r1
   2ca4c:	b212      	sxth	r2, r2
   2ca4e:	b292      	uxth	r2, r2
   2ca50:	431a      	orrs	r2, r3
   2ca52:	687b      	ldr	r3, [r7, #4]
   2ca54:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2ca56:	e79b      	b.n	2c990 <follow_path+0x48>
			if (res != FR_OK) break;
   2ca58:	46c0      	nop			; (mov r8, r8)
   2ca5a:	e004      	b.n	2ca66 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2ca5c:	46c0      	nop			; (mov r8, r8)
   2ca5e:	e002      	b.n	2ca66 <follow_path+0x11e>
				break;
   2ca60:	46c0      	nop			; (mov r8, r8)
   2ca62:	e000      	b.n	2ca66 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ca64:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2ca66:	230f      	movs	r3, #15
   2ca68:	18fb      	adds	r3, r7, r3
   2ca6a:	781b      	ldrb	r3, [r3, #0]
}
   2ca6c:	0018      	movs	r0, r3
   2ca6e:	46bd      	mov	sp, r7
   2ca70:	b005      	add	sp, #20
   2ca72:	bd90      	pop	{r4, r7, pc}
   2ca74:	0002b919 	.word	0x0002b919
   2ca78:	0002c501 	.word	0x0002c501
   2ca7c:	0002bf9d 	.word	0x0002bf9d

0002ca80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2ca80:	b590      	push	{r4, r7, lr}
   2ca82:	b083      	sub	sp, #12
   2ca84:	af00      	add	r7, sp, #0
   2ca86:	6078      	str	r0, [r7, #4]
   2ca88:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2ca8a:	687b      	ldr	r3, [r7, #4]
   2ca8c:	7858      	ldrb	r0, [r3, #1]
   2ca8e:	687b      	ldr	r3, [r7, #4]
   2ca90:	3330      	adds	r3, #48	; 0x30
   2ca92:	0019      	movs	r1, r3
   2ca94:	683a      	ldr	r2, [r7, #0]
   2ca96:	2301      	movs	r3, #1
   2ca98:	4c2a      	ldr	r4, [pc, #168]	; (2cb44 <check_fs+0xc4>)
   2ca9a:	47a0      	blx	r4
   2ca9c:	1e03      	subs	r3, r0, #0
   2ca9e:	d001      	beq.n	2caa4 <check_fs+0x24>
		return 3;
   2caa0:	2303      	movs	r3, #3
   2caa2:	e04b      	b.n	2cb3c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2caa4:	687b      	ldr	r3, [r7, #4]
   2caa6:	4a28      	ldr	r2, [pc, #160]	; (2cb48 <check_fs+0xc8>)
   2caa8:	4694      	mov	ip, r2
   2caaa:	4463      	add	r3, ip
   2caac:	3301      	adds	r3, #1
   2caae:	781b      	ldrb	r3, [r3, #0]
   2cab0:	021b      	lsls	r3, r3, #8
   2cab2:	b21a      	sxth	r2, r3
   2cab4:	687b      	ldr	r3, [r7, #4]
   2cab6:	4924      	ldr	r1, [pc, #144]	; (2cb48 <check_fs+0xc8>)
   2cab8:	5c5b      	ldrb	r3, [r3, r1]
   2caba:	b21b      	sxth	r3, r3
   2cabc:	4313      	orrs	r3, r2
   2cabe:	b21b      	sxth	r3, r3
   2cac0:	4a22      	ldr	r2, [pc, #136]	; (2cb4c <check_fs+0xcc>)
   2cac2:	4293      	cmp	r3, r2
   2cac4:	d001      	beq.n	2caca <check_fs+0x4a>
		return 2;
   2cac6:	2302      	movs	r3, #2
   2cac8:	e038      	b.n	2cb3c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2caca:	687b      	ldr	r3, [r7, #4]
   2cacc:	3366      	adds	r3, #102	; 0x66
   2cace:	3303      	adds	r3, #3
   2cad0:	781b      	ldrb	r3, [r3, #0]
   2cad2:	061a      	lsls	r2, r3, #24
   2cad4:	687b      	ldr	r3, [r7, #4]
   2cad6:	3366      	adds	r3, #102	; 0x66
   2cad8:	3302      	adds	r3, #2
   2cada:	781b      	ldrb	r3, [r3, #0]
   2cadc:	041b      	lsls	r3, r3, #16
   2cade:	4313      	orrs	r3, r2
   2cae0:	687a      	ldr	r2, [r7, #4]
   2cae2:	3266      	adds	r2, #102	; 0x66
   2cae4:	3201      	adds	r2, #1
   2cae6:	7812      	ldrb	r2, [r2, #0]
   2cae8:	0212      	lsls	r2, r2, #8
   2caea:	4313      	orrs	r3, r2
   2caec:	687a      	ldr	r2, [r7, #4]
   2caee:	2166      	movs	r1, #102	; 0x66
   2caf0:	5c52      	ldrb	r2, [r2, r1]
   2caf2:	4313      	orrs	r3, r2
   2caf4:	021b      	lsls	r3, r3, #8
   2caf6:	0a1b      	lsrs	r3, r3, #8
   2caf8:	4a15      	ldr	r2, [pc, #84]	; (2cb50 <check_fs+0xd0>)
   2cafa:	4293      	cmp	r3, r2
   2cafc:	d101      	bne.n	2cb02 <check_fs+0x82>
		return 0;
   2cafe:	2300      	movs	r3, #0
   2cb00:	e01c      	b.n	2cb3c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2cb02:	687b      	ldr	r3, [r7, #4]
   2cb04:	3382      	adds	r3, #130	; 0x82
   2cb06:	3303      	adds	r3, #3
   2cb08:	781b      	ldrb	r3, [r3, #0]
   2cb0a:	061a      	lsls	r2, r3, #24
   2cb0c:	687b      	ldr	r3, [r7, #4]
   2cb0e:	3382      	adds	r3, #130	; 0x82
   2cb10:	3302      	adds	r3, #2
   2cb12:	781b      	ldrb	r3, [r3, #0]
   2cb14:	041b      	lsls	r3, r3, #16
   2cb16:	4313      	orrs	r3, r2
   2cb18:	687a      	ldr	r2, [r7, #4]
   2cb1a:	3282      	adds	r2, #130	; 0x82
   2cb1c:	3201      	adds	r2, #1
   2cb1e:	7812      	ldrb	r2, [r2, #0]
   2cb20:	0212      	lsls	r2, r2, #8
   2cb22:	4313      	orrs	r3, r2
   2cb24:	687a      	ldr	r2, [r7, #4]
   2cb26:	2182      	movs	r1, #130	; 0x82
   2cb28:	5c52      	ldrb	r2, [r2, r1]
   2cb2a:	4313      	orrs	r3, r2
   2cb2c:	021b      	lsls	r3, r3, #8
   2cb2e:	0a1b      	lsrs	r3, r3, #8
   2cb30:	4a07      	ldr	r2, [pc, #28]	; (2cb50 <check_fs+0xd0>)
   2cb32:	4293      	cmp	r3, r2
   2cb34:	d101      	bne.n	2cb3a <check_fs+0xba>
		return 0;
   2cb36:	2300      	movs	r3, #0
   2cb38:	e000      	b.n	2cb3c <check_fs+0xbc>

	return 1;
   2cb3a:	2301      	movs	r3, #1
}
   2cb3c:	0018      	movs	r0, r3
   2cb3e:	46bd      	mov	sp, r7
   2cb40:	b003      	add	sp, #12
   2cb42:	bd90      	pop	{r4, r7, pc}
   2cb44:	0002ace9 	.word	0x0002ace9
   2cb48:	0000022e 	.word	0x0000022e
   2cb4c:	ffffaa55 	.word	0xffffaa55
   2cb50:	00544146 	.word	0x00544146

0002cb54 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2cb54:	b590      	push	{r4, r7, lr}
   2cb56:	b093      	sub	sp, #76	; 0x4c
   2cb58:	af00      	add	r7, sp, #0
   2cb5a:	60f8      	str	r0, [r7, #12]
   2cb5c:	60b9      	str	r1, [r7, #8]
   2cb5e:	1dfb      	adds	r3, r7, #7
   2cb60:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2cb62:	68fb      	ldr	r3, [r7, #12]
   2cb64:	681b      	ldr	r3, [r3, #0]
   2cb66:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cb6a:	781b      	ldrb	r3, [r3, #0]
   2cb6c:	3b30      	subs	r3, #48	; 0x30
   2cb6e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2cb70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb72:	2b09      	cmp	r3, #9
   2cb74:	d80b      	bhi.n	2cb8e <chk_mounted+0x3a>
   2cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cb78:	3301      	adds	r3, #1
   2cb7a:	781b      	ldrb	r3, [r3, #0]
   2cb7c:	2b3a      	cmp	r3, #58	; 0x3a
   2cb7e:	d106      	bne.n	2cb8e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2cb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cb82:	3302      	adds	r3, #2
   2cb84:	62fb      	str	r3, [r7, #44]	; 0x2c
   2cb86:	68fb      	ldr	r3, [r7, #12]
   2cb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2cb8a:	601a      	str	r2, [r3, #0]
   2cb8c:	e001      	b.n	2cb92 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2cb8e:	2300      	movs	r3, #0
   2cb90:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2cb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb94:	2b07      	cmp	r3, #7
   2cb96:	d901      	bls.n	2cb9c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2cb98:	230b      	movs	r3, #11
   2cb9a:	e2af      	b.n	2d0fc <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2cb9c:	4bc5      	ldr	r3, [pc, #788]	; (2ceb4 <chk_mounted+0x360>)
   2cb9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2cba0:	0092      	lsls	r2, r2, #2
   2cba2:	58d3      	ldr	r3, [r2, r3]
   2cba4:	62bb      	str	r3, [r7, #40]	; 0x28
   2cba6:	68bb      	ldr	r3, [r7, #8]
   2cba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cbaa:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbae:	2b00      	cmp	r3, #0
   2cbb0:	d101      	bne.n	2cbb6 <chk_mounted+0x62>
   2cbb2:	230c      	movs	r3, #12
   2cbb4:	e2a2      	b.n	2d0fc <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbb8:	781b      	ldrb	r3, [r3, #0]
   2cbba:	2b00      	cmp	r3, #0
   2cbbc:	d01c      	beq.n	2cbf8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbc0:	785b      	ldrb	r3, [r3, #1]
   2cbc2:	2227      	movs	r2, #39	; 0x27
   2cbc4:	18bc      	adds	r4, r7, r2
   2cbc6:	0018      	movs	r0, r3
   2cbc8:	4bbb      	ldr	r3, [pc, #748]	; (2ceb8 <chk_mounted+0x364>)
   2cbca:	4798      	blx	r3
   2cbcc:	0003      	movs	r3, r0
   2cbce:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2cbd0:	2327      	movs	r3, #39	; 0x27
   2cbd2:	18fb      	adds	r3, r7, r3
   2cbd4:	781b      	ldrb	r3, [r3, #0]
   2cbd6:	2201      	movs	r2, #1
   2cbd8:	4013      	ands	r3, r2
   2cbda:	d10d      	bne.n	2cbf8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2cbdc:	1dfb      	adds	r3, r7, #7
   2cbde:	781b      	ldrb	r3, [r3, #0]
   2cbe0:	2b00      	cmp	r3, #0
   2cbe2:	d007      	beq.n	2cbf4 <chk_mounted+0xa0>
   2cbe4:	2327      	movs	r3, #39	; 0x27
   2cbe6:	18fb      	adds	r3, r7, r3
   2cbe8:	781b      	ldrb	r3, [r3, #0]
   2cbea:	2204      	movs	r2, #4
   2cbec:	4013      	ands	r3, r2
   2cbee:	d001      	beq.n	2cbf4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2cbf0:	230a      	movs	r3, #10
   2cbf2:	e283      	b.n	2d0fc <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2cbf4:	2300      	movs	r3, #0
   2cbf6:	e281      	b.n	2d0fc <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbfa:	2200      	movs	r2, #0
   2cbfc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2cbfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cc00:	b2da      	uxtb	r2, r3
   2cc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc04:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2cc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc08:	785b      	ldrb	r3, [r3, #1]
   2cc0a:	2227      	movs	r2, #39	; 0x27
   2cc0c:	18bc      	adds	r4, r7, r2
   2cc0e:	0018      	movs	r0, r3
   2cc10:	4baa      	ldr	r3, [pc, #680]	; (2cebc <chk_mounted+0x368>)
   2cc12:	4798      	blx	r3
   2cc14:	0003      	movs	r3, r0
   2cc16:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2cc18:	2327      	movs	r3, #39	; 0x27
   2cc1a:	18fb      	adds	r3, r7, r3
   2cc1c:	781b      	ldrb	r3, [r3, #0]
   2cc1e:	2201      	movs	r2, #1
   2cc20:	4013      	ands	r3, r2
   2cc22:	d001      	beq.n	2cc28 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2cc24:	2303      	movs	r3, #3
   2cc26:	e269      	b.n	2d0fc <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2cc28:	1dfb      	adds	r3, r7, #7
   2cc2a:	781b      	ldrb	r3, [r3, #0]
   2cc2c:	2b00      	cmp	r3, #0
   2cc2e:	d007      	beq.n	2cc40 <chk_mounted+0xec>
   2cc30:	2327      	movs	r3, #39	; 0x27
   2cc32:	18fb      	adds	r3, r7, r3
   2cc34:	781b      	ldrb	r3, [r3, #0]
   2cc36:	2204      	movs	r2, #4
   2cc38:	4013      	ands	r3, r2
   2cc3a:	d001      	beq.n	2cc40 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2cc3c:	230a      	movs	r3, #10
   2cc3e:	e25d      	b.n	2d0fc <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2cc40:	2300      	movs	r3, #0
   2cc42:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cc44:	2347      	movs	r3, #71	; 0x47
   2cc46:	18fc      	adds	r4, r7, r3
   2cc48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc4c:	0011      	movs	r1, r2
   2cc4e:	0018      	movs	r0, r3
   2cc50:	4b9b      	ldr	r3, [pc, #620]	; (2cec0 <chk_mounted+0x36c>)
   2cc52:	4798      	blx	r3
   2cc54:	0003      	movs	r3, r0
   2cc56:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2cc58:	2347      	movs	r3, #71	; 0x47
   2cc5a:	18fb      	adds	r3, r7, r3
   2cc5c:	781b      	ldrb	r3, [r3, #0]
   2cc5e:	2b01      	cmp	r3, #1
   2cc60:	d13b      	bne.n	2ccda <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2cc62:	2346      	movs	r3, #70	; 0x46
   2cc64:	18fb      	adds	r3, r7, r3
   2cc66:	2200      	movs	r2, #0
   2cc68:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2cc6a:	2346      	movs	r3, #70	; 0x46
   2cc6c:	18fb      	adds	r3, r7, r3
   2cc6e:	781b      	ldrb	r3, [r3, #0]
   2cc70:	2b00      	cmp	r3, #0
   2cc72:	d006      	beq.n	2cc82 <chk_mounted+0x12e>
   2cc74:	2346      	movs	r3, #70	; 0x46
   2cc76:	18fb      	adds	r3, r7, r3
   2cc78:	781a      	ldrb	r2, [r3, #0]
   2cc7a:	2346      	movs	r3, #70	; 0x46
   2cc7c:	18fb      	adds	r3, r7, r3
   2cc7e:	3a01      	subs	r2, #1
   2cc80:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2cc82:	2346      	movs	r3, #70	; 0x46
   2cc84:	18fb      	adds	r3, r7, r3
   2cc86:	781b      	ldrb	r3, [r3, #0]
   2cc88:	011b      	lsls	r3, r3, #4
   2cc8a:	33bf      	adds	r3, #191	; 0xbf
   2cc8c:	33ff      	adds	r3, #255	; 0xff
   2cc8e:	3330      	adds	r3, #48	; 0x30
   2cc90:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cc92:	18d3      	adds	r3, r2, r3
   2cc94:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2cc96:	6a3b      	ldr	r3, [r7, #32]
   2cc98:	3304      	adds	r3, #4
   2cc9a:	781b      	ldrb	r3, [r3, #0]
   2cc9c:	2b00      	cmp	r3, #0
   2cc9e:	d01c      	beq.n	2ccda <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2cca0:	6a3b      	ldr	r3, [r7, #32]
   2cca2:	330b      	adds	r3, #11
   2cca4:	781b      	ldrb	r3, [r3, #0]
   2cca6:	061a      	lsls	r2, r3, #24
   2cca8:	6a3b      	ldr	r3, [r7, #32]
   2ccaa:	330a      	adds	r3, #10
   2ccac:	781b      	ldrb	r3, [r3, #0]
   2ccae:	041b      	lsls	r3, r3, #16
   2ccb0:	4313      	orrs	r3, r2
   2ccb2:	6a3a      	ldr	r2, [r7, #32]
   2ccb4:	3209      	adds	r2, #9
   2ccb6:	7812      	ldrb	r2, [r2, #0]
   2ccb8:	0212      	lsls	r2, r2, #8
   2ccba:	4313      	orrs	r3, r2
   2ccbc:	6a3a      	ldr	r2, [r7, #32]
   2ccbe:	3208      	adds	r2, #8
   2ccc0:	7812      	ldrb	r2, [r2, #0]
   2ccc2:	4313      	orrs	r3, r2
   2ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2ccc6:	2347      	movs	r3, #71	; 0x47
   2ccc8:	18fc      	adds	r4, r7, r3
   2ccca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccce:	0011      	movs	r1, r2
   2ccd0:	0018      	movs	r0, r3
   2ccd2:	4b7b      	ldr	r3, [pc, #492]	; (2cec0 <chk_mounted+0x36c>)
   2ccd4:	4798      	blx	r3
   2ccd6:	0003      	movs	r3, r0
   2ccd8:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2ccda:	2347      	movs	r3, #71	; 0x47
   2ccdc:	18fb      	adds	r3, r7, r3
   2ccde:	781b      	ldrb	r3, [r3, #0]
   2cce0:	2b03      	cmp	r3, #3
   2cce2:	d101      	bne.n	2cce8 <chk_mounted+0x194>
   2cce4:	2301      	movs	r3, #1
   2cce6:	e209      	b.n	2d0fc <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2cce8:	2347      	movs	r3, #71	; 0x47
   2ccea:	18fb      	adds	r3, r7, r3
   2ccec:	781b      	ldrb	r3, [r3, #0]
   2ccee:	2b00      	cmp	r3, #0
   2ccf0:	d001      	beq.n	2ccf6 <chk_mounted+0x1a2>
   2ccf2:	230d      	movs	r3, #13
   2ccf4:	e202      	b.n	2d0fc <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccf8:	223c      	movs	r2, #60	; 0x3c
   2ccfa:	5c9b      	ldrb	r3, [r3, r2]
   2ccfc:	021b      	lsls	r3, r3, #8
   2ccfe:	b21a      	sxth	r2, r3
   2cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd02:	213b      	movs	r1, #59	; 0x3b
   2cd04:	5c5b      	ldrb	r3, [r3, r1]
   2cd06:	b21b      	sxth	r3, r3
   2cd08:	4313      	orrs	r3, r2
   2cd0a:	b21a      	sxth	r2, r3
   2cd0c:	2380      	movs	r3, #128	; 0x80
   2cd0e:	009b      	lsls	r3, r3, #2
   2cd10:	429a      	cmp	r2, r3
   2cd12:	d001      	beq.n	2cd18 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2cd14:	230d      	movs	r3, #13
   2cd16:	e1f1      	b.n	2d0fc <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd1a:	2247      	movs	r2, #71	; 0x47
   2cd1c:	5c9b      	ldrb	r3, [r3, r2]
   2cd1e:	021b      	lsls	r3, r3, #8
   2cd20:	b21a      	sxth	r2, r3
   2cd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd24:	2146      	movs	r1, #70	; 0x46
   2cd26:	5c5b      	ldrb	r3, [r3, r1]
   2cd28:	b21b      	sxth	r3, r3
   2cd2a:	4313      	orrs	r3, r2
   2cd2c:	b21b      	sxth	r3, r3
   2cd2e:	b29b      	uxth	r3, r3
   2cd30:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2cd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cd34:	2b00      	cmp	r3, #0
   2cd36:	d112      	bne.n	2cd5e <chk_mounted+0x20a>
   2cd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd3a:	2257      	movs	r2, #87	; 0x57
   2cd3c:	5c9b      	ldrb	r3, [r3, r2]
   2cd3e:	061a      	lsls	r2, r3, #24
   2cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd42:	2156      	movs	r1, #86	; 0x56
   2cd44:	5c5b      	ldrb	r3, [r3, r1]
   2cd46:	041b      	lsls	r3, r3, #16
   2cd48:	4313      	orrs	r3, r2
   2cd4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cd4c:	2155      	movs	r1, #85	; 0x55
   2cd4e:	5c52      	ldrb	r2, [r2, r1]
   2cd50:	0212      	lsls	r2, r2, #8
   2cd52:	4313      	orrs	r3, r2
   2cd54:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cd56:	2154      	movs	r1, #84	; 0x54
   2cd58:	5c52      	ldrb	r2, [r2, r1]
   2cd5a:	4313      	orrs	r3, r2
   2cd5c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd60:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2cd62:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2cd64:	231f      	movs	r3, #31
   2cd66:	18fb      	adds	r3, r7, r3
   2cd68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cd6a:	2140      	movs	r1, #64	; 0x40
   2cd6c:	5c52      	ldrb	r2, [r2, r1]
   2cd6e:	701a      	strb	r2, [r3, #0]
   2cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd72:	221f      	movs	r2, #31
   2cd74:	18ba      	adds	r2, r7, r2
   2cd76:	7812      	ldrb	r2, [r2, #0]
   2cd78:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2cd7a:	231f      	movs	r3, #31
   2cd7c:	18fb      	adds	r3, r7, r3
   2cd7e:	781b      	ldrb	r3, [r3, #0]
   2cd80:	2b01      	cmp	r3, #1
   2cd82:	d006      	beq.n	2cd92 <chk_mounted+0x23e>
   2cd84:	231f      	movs	r3, #31
   2cd86:	18fb      	adds	r3, r7, r3
   2cd88:	781b      	ldrb	r3, [r3, #0]
   2cd8a:	2b02      	cmp	r3, #2
   2cd8c:	d001      	beq.n	2cd92 <chk_mounted+0x23e>
   2cd8e:	230d      	movs	r3, #13
   2cd90:	e1b4      	b.n	2d0fc <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2cd92:	231f      	movs	r3, #31
   2cd94:	18fb      	adds	r3, r7, r3
   2cd96:	781a      	ldrb	r2, [r3, #0]
   2cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cd9a:	4353      	muls	r3, r2
   2cd9c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2cd9e:	231f      	movs	r3, #31
   2cda0:	18fb      	adds	r3, r7, r3
   2cda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cda4:	213d      	movs	r1, #61	; 0x3d
   2cda6:	5c52      	ldrb	r2, [r2, r1]
   2cda8:	701a      	strb	r2, [r3, #0]
   2cdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cdac:	221f      	movs	r2, #31
   2cdae:	18ba      	adds	r2, r7, r2
   2cdb0:	7812      	ldrb	r2, [r2, #0]
   2cdb2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2cdb4:	231f      	movs	r3, #31
   2cdb6:	18fb      	adds	r3, r7, r3
   2cdb8:	781b      	ldrb	r3, [r3, #0]
   2cdba:	2b00      	cmp	r3, #0
   2cdbc:	d008      	beq.n	2cdd0 <chk_mounted+0x27c>
   2cdbe:	231f      	movs	r3, #31
   2cdc0:	18fb      	adds	r3, r7, r3
   2cdc2:	781b      	ldrb	r3, [r3, #0]
   2cdc4:	221f      	movs	r2, #31
   2cdc6:	18ba      	adds	r2, r7, r2
   2cdc8:	7812      	ldrb	r2, [r2, #0]
   2cdca:	3a01      	subs	r2, #1
   2cdcc:	4013      	ands	r3, r2
   2cdce:	d001      	beq.n	2cdd4 <chk_mounted+0x280>
   2cdd0:	230d      	movs	r3, #13
   2cdd2:	e193      	b.n	2d0fc <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2cdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cdd6:	2242      	movs	r2, #66	; 0x42
   2cdd8:	5c9b      	ldrb	r3, [r3, r2]
   2cdda:	021b      	lsls	r3, r3, #8
   2cddc:	b21a      	sxth	r2, r3
   2cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cde0:	2141      	movs	r1, #65	; 0x41
   2cde2:	5c5b      	ldrb	r3, [r3, r1]
   2cde4:	b21b      	sxth	r3, r3
   2cde6:	4313      	orrs	r3, r2
   2cde8:	b21b      	sxth	r3, r3
   2cdea:	b29a      	uxth	r2, r3
   2cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cdee:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cdf2:	891b      	ldrh	r3, [r3, #8]
   2cdf4:	220f      	movs	r2, #15
   2cdf6:	4013      	ands	r3, r2
   2cdf8:	b29b      	uxth	r3, r3
   2cdfa:	2b00      	cmp	r3, #0
   2cdfc:	d001      	beq.n	2ce02 <chk_mounted+0x2ae>
   2cdfe:	230d      	movs	r3, #13
   2ce00:	e17c      	b.n	2d0fc <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce04:	2244      	movs	r2, #68	; 0x44
   2ce06:	5c9b      	ldrb	r3, [r3, r2]
   2ce08:	021b      	lsls	r3, r3, #8
   2ce0a:	b21a      	sxth	r2, r3
   2ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce0e:	2143      	movs	r1, #67	; 0x43
   2ce10:	5c5b      	ldrb	r3, [r3, r1]
   2ce12:	b21b      	sxth	r3, r3
   2ce14:	4313      	orrs	r3, r2
   2ce16:	b21b      	sxth	r3, r3
   2ce18:	b29b      	uxth	r3, r3
   2ce1a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2ce1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ce1e:	2b00      	cmp	r3, #0
   2ce20:	d112      	bne.n	2ce48 <chk_mounted+0x2f4>
   2ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce24:	2253      	movs	r2, #83	; 0x53
   2ce26:	5c9b      	ldrb	r3, [r3, r2]
   2ce28:	061a      	lsls	r2, r3, #24
   2ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce2c:	2152      	movs	r1, #82	; 0x52
   2ce2e:	5c5b      	ldrb	r3, [r3, r1]
   2ce30:	041b      	lsls	r3, r3, #16
   2ce32:	4313      	orrs	r3, r2
   2ce34:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce36:	2151      	movs	r1, #81	; 0x51
   2ce38:	5c52      	ldrb	r2, [r2, r1]
   2ce3a:	0212      	lsls	r2, r2, #8
   2ce3c:	4313      	orrs	r3, r2
   2ce3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce40:	2150      	movs	r1, #80	; 0x50
   2ce42:	5c52      	ldrb	r2, [r2, r1]
   2ce44:	4313      	orrs	r3, r2
   2ce46:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce4a:	223f      	movs	r2, #63	; 0x3f
   2ce4c:	5c9b      	ldrb	r3, [r3, r2]
   2ce4e:	021b      	lsls	r3, r3, #8
   2ce50:	b21a      	sxth	r2, r3
   2ce52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce54:	213e      	movs	r1, #62	; 0x3e
   2ce56:	5c5b      	ldrb	r3, [r3, r1]
   2ce58:	b21b      	sxth	r3, r3
   2ce5a:	4313      	orrs	r3, r2
   2ce5c:	b21a      	sxth	r2, r3
   2ce5e:	231c      	movs	r3, #28
   2ce60:	18fb      	adds	r3, r7, r3
   2ce62:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2ce64:	231c      	movs	r3, #28
   2ce66:	18fb      	adds	r3, r7, r3
   2ce68:	881b      	ldrh	r3, [r3, #0]
   2ce6a:	2b00      	cmp	r3, #0
   2ce6c:	d101      	bne.n	2ce72 <chk_mounted+0x31e>
   2ce6e:	230d      	movs	r3, #13
   2ce70:	e144      	b.n	2d0fc <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2ce72:	231c      	movs	r3, #28
   2ce74:	18fb      	adds	r3, r7, r3
   2ce76:	881a      	ldrh	r2, [r3, #0]
   2ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ce7a:	18d3      	adds	r3, r2, r3
   2ce7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce7e:	8912      	ldrh	r2, [r2, #8]
   2ce80:	0912      	lsrs	r2, r2, #4
   2ce82:	b292      	uxth	r2, r2
   2ce84:	189b      	adds	r3, r3, r2
   2ce86:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2ce88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2ce8a:	69bb      	ldr	r3, [r7, #24]
   2ce8c:	429a      	cmp	r2, r3
   2ce8e:	d201      	bcs.n	2ce94 <chk_mounted+0x340>
   2ce90:	230d      	movs	r3, #13
   2ce92:	e133      	b.n	2d0fc <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2ce94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2ce96:	69bb      	ldr	r3, [r7, #24]
   2ce98:	1ad2      	subs	r2, r2, r3
   2ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce9c:	789b      	ldrb	r3, [r3, #2]
   2ce9e:	0019      	movs	r1, r3
   2cea0:	4b08      	ldr	r3, [pc, #32]	; (2cec4 <chk_mounted+0x370>)
   2cea2:	0010      	movs	r0, r2
   2cea4:	4798      	blx	r3
   2cea6:	0003      	movs	r3, r0
   2cea8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2ceaa:	697b      	ldr	r3, [r7, #20]
   2ceac:	2b00      	cmp	r3, #0
   2ceae:	d10b      	bne.n	2cec8 <chk_mounted+0x374>
   2ceb0:	230d      	movs	r3, #13
   2ceb2:	e123      	b.n	2d0fc <chk_mounted+0x5a8>
   2ceb4:	20004174 	.word	0x20004174
   2ceb8:	0002acb1 	.word	0x0002acb1
   2cebc:	0002ac2d 	.word	0x0002ac2d
   2cec0:	0002ca81 	.word	0x0002ca81
   2cec4:	00032245 	.word	0x00032245
	fmt = FS_FAT12;
   2cec8:	2347      	movs	r3, #71	; 0x47
   2ceca:	18fb      	adds	r3, r7, r3
   2cecc:	2201      	movs	r2, #1
   2cece:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2ced0:	697b      	ldr	r3, [r7, #20]
   2ced2:	4a8c      	ldr	r2, [pc, #560]	; (2d104 <chk_mounted+0x5b0>)
   2ced4:	4293      	cmp	r3, r2
   2ced6:	d903      	bls.n	2cee0 <chk_mounted+0x38c>
   2ced8:	2347      	movs	r3, #71	; 0x47
   2ceda:	18fb      	adds	r3, r7, r3
   2cedc:	2202      	movs	r2, #2
   2cede:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2cee0:	697b      	ldr	r3, [r7, #20]
   2cee2:	4a89      	ldr	r2, [pc, #548]	; (2d108 <chk_mounted+0x5b4>)
   2cee4:	4293      	cmp	r3, r2
   2cee6:	d903      	bls.n	2cef0 <chk_mounted+0x39c>
   2cee8:	2347      	movs	r3, #71	; 0x47
   2ceea:	18fb      	adds	r3, r7, r3
   2ceec:	2203      	movs	r2, #3
   2ceee:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2cef0:	697b      	ldr	r3, [r7, #20]
   2cef2:	1c9a      	adds	r2, r3, #2
   2cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cef6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2cef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cefa:	69bb      	ldr	r3, [r7, #24]
   2cefc:	18d2      	adds	r2, r2, r3
   2cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf00:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2cf02:	231c      	movs	r3, #28
   2cf04:	18fb      	adds	r3, r7, r3
   2cf06:	881a      	ldrh	r2, [r3, #0]
   2cf08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf0a:	18d2      	adds	r2, r2, r3
   2cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf0e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2cf10:	2347      	movs	r3, #71	; 0x47
   2cf12:	18fb      	adds	r3, r7, r3
   2cf14:	781b      	ldrb	r3, [r3, #0]
   2cf16:	2b03      	cmp	r3, #3
   2cf18:	d11e      	bne.n	2cf58 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf1c:	891b      	ldrh	r3, [r3, #8]
   2cf1e:	2b00      	cmp	r3, #0
   2cf20:	d001      	beq.n	2cf26 <chk_mounted+0x3d2>
   2cf22:	230d      	movs	r3, #13
   2cf24:	e0ea      	b.n	2d0fc <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf28:	225f      	movs	r2, #95	; 0x5f
   2cf2a:	5c9b      	ldrb	r3, [r3, r2]
   2cf2c:	061a      	lsls	r2, r3, #24
   2cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf30:	215e      	movs	r1, #94	; 0x5e
   2cf32:	5c5b      	ldrb	r3, [r3, r1]
   2cf34:	041b      	lsls	r3, r3, #16
   2cf36:	4313      	orrs	r3, r2
   2cf38:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf3a:	215d      	movs	r1, #93	; 0x5d
   2cf3c:	5c52      	ldrb	r2, [r2, r1]
   2cf3e:	0212      	lsls	r2, r2, #8
   2cf40:	4313      	orrs	r3, r2
   2cf42:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf44:	215c      	movs	r1, #92	; 0x5c
   2cf46:	5c52      	ldrb	r2, [r2, r1]
   2cf48:	431a      	orrs	r2, r3
   2cf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf4c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2cf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf50:	699b      	ldr	r3, [r3, #24]
   2cf52:	009b      	lsls	r3, r3, #2
   2cf54:	633b      	str	r3, [r7, #48]	; 0x30
   2cf56:	e020      	b.n	2cf9a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf5a:	891b      	ldrh	r3, [r3, #8]
   2cf5c:	2b00      	cmp	r3, #0
   2cf5e:	d101      	bne.n	2cf64 <chk_mounted+0x410>
   2cf60:	230d      	movs	r3, #13
   2cf62:	e0cb      	b.n	2d0fc <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2cf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf66:	6a1a      	ldr	r2, [r3, #32]
   2cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cf6a:	18d2      	adds	r2, r2, r3
   2cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf6e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2cf70:	2347      	movs	r3, #71	; 0x47
   2cf72:	18fb      	adds	r3, r7, r3
   2cf74:	781b      	ldrb	r3, [r3, #0]
   2cf76:	2b02      	cmp	r3, #2
   2cf78:	d103      	bne.n	2cf82 <chk_mounted+0x42e>
   2cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf7c:	699b      	ldr	r3, [r3, #24]
   2cf7e:	005b      	lsls	r3, r3, #1
   2cf80:	e00a      	b.n	2cf98 <chk_mounted+0x444>
   2cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf84:	699a      	ldr	r2, [r3, #24]
   2cf86:	0013      	movs	r3, r2
   2cf88:	005b      	lsls	r3, r3, #1
   2cf8a:	189b      	adds	r3, r3, r2
   2cf8c:	085a      	lsrs	r2, r3, #1
   2cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf90:	699b      	ldr	r3, [r3, #24]
   2cf92:	2101      	movs	r1, #1
   2cf94:	400b      	ands	r3, r1
   2cf96:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2cf98:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf9c:	69da      	ldr	r2, [r3, #28]
   2cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2cfa0:	495a      	ldr	r1, [pc, #360]	; (2d10c <chk_mounted+0x5b8>)
   2cfa2:	468c      	mov	ip, r1
   2cfa4:	4463      	add	r3, ip
   2cfa6:	0a5b      	lsrs	r3, r3, #9
   2cfa8:	429a      	cmp	r2, r3
   2cfaa:	d201      	bcs.n	2cfb0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2cfac:	230d      	movs	r3, #13
   2cfae:	e0a5      	b.n	2d0fc <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfb2:	2201      	movs	r2, #1
   2cfb4:	4252      	negs	r2, r2
   2cfb6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfba:	2200      	movs	r2, #0
   2cfbc:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2cfbe:	2347      	movs	r3, #71	; 0x47
   2cfc0:	18fb      	adds	r3, r7, r3
   2cfc2:	781b      	ldrb	r3, [r3, #0]
   2cfc4:	2b03      	cmp	r3, #3
   2cfc6:	d000      	beq.n	2cfca <chk_mounted+0x476>
   2cfc8:	e082      	b.n	2d0d0 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfcc:	2200      	movs	r2, #0
   2cfce:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfd2:	2261      	movs	r2, #97	; 0x61
   2cfd4:	5c9b      	ldrb	r3, [r3, r2]
   2cfd6:	021b      	lsls	r3, r3, #8
   2cfd8:	b21a      	sxth	r2, r3
   2cfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfdc:	2160      	movs	r1, #96	; 0x60
   2cfde:	5c5b      	ldrb	r3, [r3, r1]
   2cfe0:	b21b      	sxth	r3, r3
   2cfe2:	4313      	orrs	r3, r2
   2cfe4:	b21b      	sxth	r3, r3
   2cfe6:	b29b      	uxth	r3, r3
   2cfe8:	001a      	movs	r2, r3
   2cfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cfec:	18d2      	adds	r2, r2, r3
   2cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cff0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cff4:	7858      	ldrb	r0, [r3, #1]
   2cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cff8:	3330      	adds	r3, #48	; 0x30
   2cffa:	0019      	movs	r1, r3
   2cffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cffe:	695a      	ldr	r2, [r3, #20]
   2d000:	2301      	movs	r3, #1
   2d002:	4c43      	ldr	r4, [pc, #268]	; (2d110 <chk_mounted+0x5bc>)
   2d004:	47a0      	blx	r4
   2d006:	1e03      	subs	r3, r0, #0
   2d008:	d162      	bne.n	2d0d0 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d00c:	4a41      	ldr	r2, [pc, #260]	; (2d114 <chk_mounted+0x5c0>)
   2d00e:	5c9b      	ldrb	r3, [r3, r2]
   2d010:	021b      	lsls	r3, r3, #8
   2d012:	b21a      	sxth	r2, r3
   2d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d016:	4940      	ldr	r1, [pc, #256]	; (2d118 <chk_mounted+0x5c4>)
   2d018:	5c5b      	ldrb	r3, [r3, r1]
   2d01a:	b21b      	sxth	r3, r3
   2d01c:	4313      	orrs	r3, r2
   2d01e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d020:	4a3e      	ldr	r2, [pc, #248]	; (2d11c <chk_mounted+0x5c8>)
   2d022:	4293      	cmp	r3, r2
   2d024:	d154      	bne.n	2d0d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d028:	2233      	movs	r2, #51	; 0x33
   2d02a:	5c9b      	ldrb	r3, [r3, r2]
   2d02c:	061a      	lsls	r2, r3, #24
   2d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d030:	2132      	movs	r1, #50	; 0x32
   2d032:	5c5b      	ldrb	r3, [r3, r1]
   2d034:	041b      	lsls	r3, r3, #16
   2d036:	4313      	orrs	r3, r2
   2d038:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d03a:	2131      	movs	r1, #49	; 0x31
   2d03c:	5c52      	ldrb	r2, [r2, r1]
   2d03e:	0212      	lsls	r2, r2, #8
   2d040:	4313      	orrs	r3, r2
   2d042:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d044:	2130      	movs	r1, #48	; 0x30
   2d046:	5c52      	ldrb	r2, [r2, r1]
   2d048:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d04a:	4a35      	ldr	r2, [pc, #212]	; (2d120 <chk_mounted+0x5cc>)
   2d04c:	4293      	cmp	r3, r2
   2d04e:	d13f      	bne.n	2d0d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d052:	4a34      	ldr	r2, [pc, #208]	; (2d124 <chk_mounted+0x5d0>)
   2d054:	5c9b      	ldrb	r3, [r3, r2]
   2d056:	061a      	lsls	r2, r3, #24
   2d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d05a:	4933      	ldr	r1, [pc, #204]	; (2d128 <chk_mounted+0x5d4>)
   2d05c:	5c5b      	ldrb	r3, [r3, r1]
   2d05e:	041b      	lsls	r3, r3, #16
   2d060:	4313      	orrs	r3, r2
   2d062:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d064:	4931      	ldr	r1, [pc, #196]	; (2d12c <chk_mounted+0x5d8>)
   2d066:	5c52      	ldrb	r2, [r2, r1]
   2d068:	0212      	lsls	r2, r2, #8
   2d06a:	4313      	orrs	r3, r2
   2d06c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d06e:	2285      	movs	r2, #133	; 0x85
   2d070:	0092      	lsls	r2, r2, #2
   2d072:	5c8a      	ldrb	r2, [r1, r2]
   2d074:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d076:	4a2e      	ldr	r2, [pc, #184]	; (2d130 <chk_mounted+0x5dc>)
   2d078:	4293      	cmp	r3, r2
   2d07a:	d129      	bne.n	2d0d0 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d07e:	4a2d      	ldr	r2, [pc, #180]	; (2d134 <chk_mounted+0x5e0>)
   2d080:	5c9b      	ldrb	r3, [r3, r2]
   2d082:	061a      	lsls	r2, r3, #24
   2d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d086:	492c      	ldr	r1, [pc, #176]	; (2d138 <chk_mounted+0x5e4>)
   2d088:	5c5b      	ldrb	r3, [r3, r1]
   2d08a:	041b      	lsls	r3, r3, #16
   2d08c:	4313      	orrs	r3, r2
   2d08e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d090:	492a      	ldr	r1, [pc, #168]	; (2d13c <chk_mounted+0x5e8>)
   2d092:	5c52      	ldrb	r2, [r2, r1]
   2d094:	0212      	lsls	r2, r2, #8
   2d096:	4313      	orrs	r3, r2
   2d098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d09a:	2287      	movs	r2, #135	; 0x87
   2d09c:	0092      	lsls	r2, r2, #2
   2d09e:	5c8a      	ldrb	r2, [r1, r2]
   2d0a0:	431a      	orrs	r2, r3
   2d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0a4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0a8:	4a25      	ldr	r2, [pc, #148]	; (2d140 <chk_mounted+0x5ec>)
   2d0aa:	5c9b      	ldrb	r3, [r3, r2]
   2d0ac:	061a      	lsls	r2, r3, #24
   2d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0b0:	4924      	ldr	r1, [pc, #144]	; (2d144 <chk_mounted+0x5f0>)
   2d0b2:	5c5b      	ldrb	r3, [r3, r1]
   2d0b4:	041b      	lsls	r3, r3, #16
   2d0b6:	4313      	orrs	r3, r2
   2d0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d0ba:	4923      	ldr	r1, [pc, #140]	; (2d148 <chk_mounted+0x5f4>)
   2d0bc:	5c52      	ldrb	r2, [r2, r1]
   2d0be:	0212      	lsls	r2, r2, #8
   2d0c0:	4313      	orrs	r3, r2
   2d0c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d0c4:	2286      	movs	r2, #134	; 0x86
   2d0c6:	0092      	lsls	r2, r2, #2
   2d0c8:	5c8a      	ldrb	r2, [r1, r2]
   2d0ca:	431a      	orrs	r2, r3
   2d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0ce:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0d2:	2247      	movs	r2, #71	; 0x47
   2d0d4:	18ba      	adds	r2, r7, r2
   2d0d6:	7812      	ldrb	r2, [r2, #0]
   2d0d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d0da:	4b1c      	ldr	r3, [pc, #112]	; (2d14c <chk_mounted+0x5f8>)
   2d0dc:	881b      	ldrh	r3, [r3, #0]
   2d0de:	3301      	adds	r3, #1
   2d0e0:	b29a      	uxth	r2, r3
   2d0e2:	4b1a      	ldr	r3, [pc, #104]	; (2d14c <chk_mounted+0x5f8>)
   2d0e4:	801a      	strh	r2, [r3, #0]
   2d0e6:	4b19      	ldr	r3, [pc, #100]	; (2d14c <chk_mounted+0x5f8>)
   2d0e8:	881a      	ldrh	r2, [r3, #0]
   2d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0ec:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0f0:	2200      	movs	r2, #0
   2d0f2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0f6:	2200      	movs	r2, #0
   2d0f8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d0fa:	2300      	movs	r3, #0
}
   2d0fc:	0018      	movs	r0, r3
   2d0fe:	46bd      	mov	sp, r7
   2d100:	b013      	add	sp, #76	; 0x4c
   2d102:	bd90      	pop	{r4, r7, pc}
   2d104:	00000ff5 	.word	0x00000ff5
   2d108:	0000fff5 	.word	0x0000fff5
   2d10c:	000001ff 	.word	0x000001ff
   2d110:	0002ace9 	.word	0x0002ace9
   2d114:	0000022f 	.word	0x0000022f
   2d118:	0000022e 	.word	0x0000022e
   2d11c:	ffffaa55 	.word	0xffffaa55
   2d120:	41615252 	.word	0x41615252
   2d124:	00000217 	.word	0x00000217
   2d128:	00000216 	.word	0x00000216
   2d12c:	00000215 	.word	0x00000215
   2d130:	61417272 	.word	0x61417272
   2d134:	0000021f 	.word	0x0000021f
   2d138:	0000021e 	.word	0x0000021e
   2d13c:	0000021d 	.word	0x0000021d
   2d140:	0000021b 	.word	0x0000021b
   2d144:	0000021a 	.word	0x0000021a
   2d148:	00000219 	.word	0x00000219
   2d14c:	20004194 	.word	0x20004194

0002d150 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d150:	b580      	push	{r7, lr}
   2d152:	b082      	sub	sp, #8
   2d154:	af00      	add	r7, sp, #0
   2d156:	6078      	str	r0, [r7, #4]
   2d158:	000a      	movs	r2, r1
   2d15a:	1cbb      	adds	r3, r7, #2
   2d15c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d15e:	687b      	ldr	r3, [r7, #4]
   2d160:	2b00      	cmp	r3, #0
   2d162:	d009      	beq.n	2d178 <validate+0x28>
   2d164:	687b      	ldr	r3, [r7, #4]
   2d166:	781b      	ldrb	r3, [r3, #0]
   2d168:	2b00      	cmp	r3, #0
   2d16a:	d005      	beq.n	2d178 <validate+0x28>
   2d16c:	687b      	ldr	r3, [r7, #4]
   2d16e:	88db      	ldrh	r3, [r3, #6]
   2d170:	1cba      	adds	r2, r7, #2
   2d172:	8812      	ldrh	r2, [r2, #0]
   2d174:	429a      	cmp	r2, r3
   2d176:	d001      	beq.n	2d17c <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d178:	2309      	movs	r3, #9
   2d17a:	e00c      	b.n	2d196 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d17c:	687b      	ldr	r3, [r7, #4]
   2d17e:	785b      	ldrb	r3, [r3, #1]
   2d180:	0018      	movs	r0, r3
   2d182:	4b07      	ldr	r3, [pc, #28]	; (2d1a0 <validate+0x50>)
   2d184:	4798      	blx	r3
   2d186:	0003      	movs	r3, r0
   2d188:	001a      	movs	r2, r3
   2d18a:	2301      	movs	r3, #1
   2d18c:	4013      	ands	r3, r2
   2d18e:	d001      	beq.n	2d194 <validate+0x44>
		return FR_NOT_READY;
   2d190:	2303      	movs	r3, #3
   2d192:	e000      	b.n	2d196 <validate+0x46>

	return FR_OK;
   2d194:	2300      	movs	r3, #0
}
   2d196:	0018      	movs	r0, r3
   2d198:	46bd      	mov	sp, r7
   2d19a:	b002      	add	sp, #8
   2d19c:	bd80      	pop	{r7, pc}
   2d19e:	46c0      	nop			; (mov r8, r8)
   2d1a0:	0002acb1 	.word	0x0002acb1

0002d1a4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2d1a4:	b580      	push	{r7, lr}
   2d1a6:	b084      	sub	sp, #16
   2d1a8:	af00      	add	r7, sp, #0
   2d1aa:	0002      	movs	r2, r0
   2d1ac:	6039      	str	r1, [r7, #0]
   2d1ae:	1dfb      	adds	r3, r7, #7
   2d1b0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2d1b2:	1dfb      	adds	r3, r7, #7
   2d1b4:	781b      	ldrb	r3, [r3, #0]
   2d1b6:	2b07      	cmp	r3, #7
   2d1b8:	d901      	bls.n	2d1be <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2d1ba:	230b      	movs	r3, #11
   2d1bc:	e018      	b.n	2d1f0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2d1be:	1dfb      	adds	r3, r7, #7
   2d1c0:	781a      	ldrb	r2, [r3, #0]
   2d1c2:	4b0d      	ldr	r3, [pc, #52]	; (2d1f8 <f_mount+0x54>)
   2d1c4:	0092      	lsls	r2, r2, #2
   2d1c6:	58d3      	ldr	r3, [r2, r3]
   2d1c8:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2d1ca:	68fb      	ldr	r3, [r7, #12]
   2d1cc:	2b00      	cmp	r3, #0
   2d1ce:	d002      	beq.n	2d1d6 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2d1d0:	68fb      	ldr	r3, [r7, #12]
   2d1d2:	2200      	movs	r2, #0
   2d1d4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2d1d6:	683b      	ldr	r3, [r7, #0]
   2d1d8:	2b00      	cmp	r3, #0
   2d1da:	d002      	beq.n	2d1e2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2d1dc:	683b      	ldr	r3, [r7, #0]
   2d1de:	2200      	movs	r2, #0
   2d1e0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2d1e2:	1dfb      	adds	r3, r7, #7
   2d1e4:	781a      	ldrb	r2, [r3, #0]
   2d1e6:	4b04      	ldr	r3, [pc, #16]	; (2d1f8 <f_mount+0x54>)
   2d1e8:	0092      	lsls	r2, r2, #2
   2d1ea:	6839      	ldr	r1, [r7, #0]
   2d1ec:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2d1ee:	2300      	movs	r3, #0
}
   2d1f0:	0018      	movs	r0, r3
   2d1f2:	46bd      	mov	sp, r7
   2d1f4:	b004      	add	sp, #16
   2d1f6:	bd80      	pop	{r7, pc}
   2d1f8:	20004174 	.word	0x20004174

0002d1fc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d1fc:	b590      	push	{r4, r7, lr}
   2d1fe:	4ce5      	ldr	r4, [pc, #916]	; (2d594 <f_open+0x398>)
   2d200:	44a5      	add	sp, r4
   2d202:	af00      	add	r7, sp, #0
   2d204:	60f8      	str	r0, [r7, #12]
   2d206:	60b9      	str	r1, [r7, #8]
   2d208:	4be3      	ldr	r3, [pc, #908]	; (2d598 <f_open+0x39c>)
   2d20a:	2194      	movs	r1, #148	; 0x94
   2d20c:	0089      	lsls	r1, r1, #2
   2d20e:	468c      	mov	ip, r1
   2d210:	44bc      	add	ip, r7
   2d212:	4463      	add	r3, ip
   2d214:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d216:	68fb      	ldr	r3, [r7, #12]
   2d218:	2200      	movs	r2, #0
   2d21a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d21c:	4bde      	ldr	r3, [pc, #888]	; (2d598 <f_open+0x39c>)
   2d21e:	2294      	movs	r2, #148	; 0x94
   2d220:	0092      	lsls	r2, r2, #2
   2d222:	4694      	mov	ip, r2
   2d224:	44bc      	add	ip, r7
   2d226:	4463      	add	r3, ip
   2d228:	4adb      	ldr	r2, [pc, #876]	; (2d598 <f_open+0x39c>)
   2d22a:	2194      	movs	r1, #148	; 0x94
   2d22c:	0089      	lsls	r1, r1, #2
   2d22e:	468c      	mov	ip, r1
   2d230:	44bc      	add	ip, r7
   2d232:	4462      	add	r2, ip
   2d234:	7812      	ldrb	r2, [r2, #0]
   2d236:	211f      	movs	r1, #31
   2d238:	400a      	ands	r2, r1
   2d23a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d23c:	4bd6      	ldr	r3, [pc, #856]	; (2d598 <f_open+0x39c>)
   2d23e:	2294      	movs	r2, #148	; 0x94
   2d240:	0092      	lsls	r2, r2, #2
   2d242:	4694      	mov	ip, r2
   2d244:	44bc      	add	ip, r7
   2d246:	4463      	add	r3, ip
   2d248:	781b      	ldrb	r3, [r3, #0]
   2d24a:	2201      	movs	r2, #1
   2d24c:	4393      	bics	r3, r2
   2d24e:	b2da      	uxtb	r2, r3
   2d250:	4bd2      	ldr	r3, [pc, #840]	; (2d59c <f_open+0x3a0>)
   2d252:	18fc      	adds	r4, r7, r3
   2d254:	2387      	movs	r3, #135	; 0x87
   2d256:	009b      	lsls	r3, r3, #2
   2d258:	18f9      	adds	r1, r7, r3
   2d25a:	2308      	movs	r3, #8
   2d25c:	18fb      	adds	r3, r7, r3
   2d25e:	0018      	movs	r0, r3
   2d260:	4bcf      	ldr	r3, [pc, #828]	; (2d5a0 <f_open+0x3a4>)
   2d262:	4798      	blx	r3
   2d264:	0003      	movs	r3, r0
   2d266:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d268:	2387      	movs	r3, #135	; 0x87
   2d26a:	009b      	lsls	r3, r3, #2
   2d26c:	18fb      	adds	r3, r7, r3
   2d26e:	2284      	movs	r2, #132	; 0x84
   2d270:	0092      	lsls	r2, r2, #2
   2d272:	18ba      	adds	r2, r7, r2
   2d274:	619a      	str	r2, [r3, #24]
   2d276:	2387      	movs	r3, #135	; 0x87
   2d278:	009b      	lsls	r3, r3, #2
   2d27a:	18fb      	adds	r3, r7, r3
   2d27c:	2210      	movs	r2, #16
   2d27e:	18ba      	adds	r2, r7, r2
   2d280:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d282:	4bc6      	ldr	r3, [pc, #792]	; (2d59c <f_open+0x3a0>)
   2d284:	18fb      	adds	r3, r7, r3
   2d286:	781b      	ldrb	r3, [r3, #0]
   2d288:	2b00      	cmp	r3, #0
   2d28a:	d10b      	bne.n	2d2a4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d28c:	68ba      	ldr	r2, [r7, #8]
   2d28e:	4bc3      	ldr	r3, [pc, #780]	; (2d59c <f_open+0x3a0>)
   2d290:	18fc      	adds	r4, r7, r3
   2d292:	2387      	movs	r3, #135	; 0x87
   2d294:	009b      	lsls	r3, r3, #2
   2d296:	18fb      	adds	r3, r7, r3
   2d298:	0011      	movs	r1, r2
   2d29a:	0018      	movs	r0, r3
   2d29c:	4bc1      	ldr	r3, [pc, #772]	; (2d5a4 <f_open+0x3a8>)
   2d29e:	4798      	blx	r3
   2d2a0:	0003      	movs	r3, r0
   2d2a2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d2a4:	2387      	movs	r3, #135	; 0x87
   2d2a6:	009b      	lsls	r3, r3, #2
   2d2a8:	18fb      	adds	r3, r7, r3
   2d2aa:	695b      	ldr	r3, [r3, #20]
   2d2ac:	2292      	movs	r2, #146	; 0x92
   2d2ae:	0092      	lsls	r2, r2, #2
   2d2b0:	18ba      	adds	r2, r7, r2
   2d2b2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d2b4:	4bb9      	ldr	r3, [pc, #740]	; (2d59c <f_open+0x3a0>)
   2d2b6:	18fb      	adds	r3, r7, r3
   2d2b8:	781b      	ldrb	r3, [r3, #0]
   2d2ba:	2b00      	cmp	r3, #0
   2d2bc:	d109      	bne.n	2d2d2 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d2be:	2392      	movs	r3, #146	; 0x92
   2d2c0:	009b      	lsls	r3, r3, #2
   2d2c2:	18fb      	adds	r3, r7, r3
   2d2c4:	681b      	ldr	r3, [r3, #0]
   2d2c6:	2b00      	cmp	r3, #0
   2d2c8:	d103      	bne.n	2d2d2 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d2ca:	4bb4      	ldr	r3, [pc, #720]	; (2d59c <f_open+0x3a0>)
   2d2cc:	18fb      	adds	r3, r7, r3
   2d2ce:	2206      	movs	r2, #6
   2d2d0:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d2d2:	4bb1      	ldr	r3, [pc, #708]	; (2d598 <f_open+0x39c>)
   2d2d4:	2294      	movs	r2, #148	; 0x94
   2d2d6:	0092      	lsls	r2, r2, #2
   2d2d8:	4694      	mov	ip, r2
   2d2da:	44bc      	add	ip, r7
   2d2dc:	4463      	add	r3, ip
   2d2de:	781b      	ldrb	r3, [r3, #0]
   2d2e0:	221c      	movs	r2, #28
   2d2e2:	4013      	ands	r3, r2
   2d2e4:	d100      	bne.n	2d2e8 <f_open+0xec>
   2d2e6:	e141      	b.n	2d56c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d2e8:	4bac      	ldr	r3, [pc, #688]	; (2d59c <f_open+0x3a0>)
   2d2ea:	18fb      	adds	r3, r7, r3
   2d2ec:	781b      	ldrb	r3, [r3, #0]
   2d2ee:	2b00      	cmp	r3, #0
   2d2f0:	d027      	beq.n	2d342 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d2f2:	4baa      	ldr	r3, [pc, #680]	; (2d59c <f_open+0x3a0>)
   2d2f4:	18fb      	adds	r3, r7, r3
   2d2f6:	781b      	ldrb	r3, [r3, #0]
   2d2f8:	2b04      	cmp	r3, #4
   2d2fa:	d109      	bne.n	2d310 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d2fc:	4ba7      	ldr	r3, [pc, #668]	; (2d59c <f_open+0x3a0>)
   2d2fe:	18fc      	adds	r4, r7, r3
   2d300:	2387      	movs	r3, #135	; 0x87
   2d302:	009b      	lsls	r3, r3, #2
   2d304:	18fb      	adds	r3, r7, r3
   2d306:	0018      	movs	r0, r3
   2d308:	4ba7      	ldr	r3, [pc, #668]	; (2d5a8 <f_open+0x3ac>)
   2d30a:	4798      	blx	r3
   2d30c:	0003      	movs	r3, r0
   2d30e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d310:	4ba1      	ldr	r3, [pc, #644]	; (2d598 <f_open+0x39c>)
   2d312:	2294      	movs	r2, #148	; 0x94
   2d314:	0092      	lsls	r2, r2, #2
   2d316:	4694      	mov	ip, r2
   2d318:	44bc      	add	ip, r7
   2d31a:	4463      	add	r3, ip
   2d31c:	4a9e      	ldr	r2, [pc, #632]	; (2d598 <f_open+0x39c>)
   2d31e:	2194      	movs	r1, #148	; 0x94
   2d320:	0089      	lsls	r1, r1, #2
   2d322:	468c      	mov	ip, r1
   2d324:	44bc      	add	ip, r7
   2d326:	4462      	add	r2, ip
   2d328:	7812      	ldrb	r2, [r2, #0]
   2d32a:	2108      	movs	r1, #8
   2d32c:	430a      	orrs	r2, r1
   2d32e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d330:	2387      	movs	r3, #135	; 0x87
   2d332:	009b      	lsls	r3, r3, #2
   2d334:	18fb      	adds	r3, r7, r3
   2d336:	695b      	ldr	r3, [r3, #20]
   2d338:	2292      	movs	r2, #146	; 0x92
   2d33a:	0092      	lsls	r2, r2, #2
   2d33c:	18ba      	adds	r2, r7, r2
   2d33e:	6013      	str	r3, [r2, #0]
   2d340:	e01c      	b.n	2d37c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d342:	2392      	movs	r3, #146	; 0x92
   2d344:	009b      	lsls	r3, r3, #2
   2d346:	18fb      	adds	r3, r7, r3
   2d348:	681b      	ldr	r3, [r3, #0]
   2d34a:	330b      	adds	r3, #11
   2d34c:	781b      	ldrb	r3, [r3, #0]
   2d34e:	001a      	movs	r2, r3
   2d350:	2311      	movs	r3, #17
   2d352:	4013      	ands	r3, r2
   2d354:	d004      	beq.n	2d360 <f_open+0x164>
				res = FR_DENIED;
   2d356:	4b91      	ldr	r3, [pc, #580]	; (2d59c <f_open+0x3a0>)
   2d358:	18fb      	adds	r3, r7, r3
   2d35a:	2207      	movs	r2, #7
   2d35c:	701a      	strb	r2, [r3, #0]
   2d35e:	e00d      	b.n	2d37c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d360:	4b8d      	ldr	r3, [pc, #564]	; (2d598 <f_open+0x39c>)
   2d362:	2294      	movs	r2, #148	; 0x94
   2d364:	0092      	lsls	r2, r2, #2
   2d366:	4694      	mov	ip, r2
   2d368:	44bc      	add	ip, r7
   2d36a:	4463      	add	r3, ip
   2d36c:	781b      	ldrb	r3, [r3, #0]
   2d36e:	2204      	movs	r2, #4
   2d370:	4013      	ands	r3, r2
   2d372:	d003      	beq.n	2d37c <f_open+0x180>
					res = FR_EXIST;
   2d374:	4b89      	ldr	r3, [pc, #548]	; (2d59c <f_open+0x3a0>)
   2d376:	18fb      	adds	r3, r7, r3
   2d378:	2208      	movs	r2, #8
   2d37a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d37c:	4b87      	ldr	r3, [pc, #540]	; (2d59c <f_open+0x3a0>)
   2d37e:	18fb      	adds	r3, r7, r3
   2d380:	781b      	ldrb	r3, [r3, #0]
   2d382:	2b00      	cmp	r3, #0
   2d384:	d000      	beq.n	2d388 <f_open+0x18c>
   2d386:	e12f      	b.n	2d5e8 <f_open+0x3ec>
   2d388:	4b83      	ldr	r3, [pc, #524]	; (2d598 <f_open+0x39c>)
   2d38a:	2294      	movs	r2, #148	; 0x94
   2d38c:	0092      	lsls	r2, r2, #2
   2d38e:	4694      	mov	ip, r2
   2d390:	44bc      	add	ip, r7
   2d392:	4463      	add	r3, ip
   2d394:	781b      	ldrb	r3, [r3, #0]
   2d396:	2208      	movs	r2, #8
   2d398:	4013      	ands	r3, r2
   2d39a:	d100      	bne.n	2d39e <f_open+0x1a2>
   2d39c:	e124      	b.n	2d5e8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d39e:	4b83      	ldr	r3, [pc, #524]	; (2d5ac <f_open+0x3b0>)
   2d3a0:	4798      	blx	r3
   2d3a2:	0003      	movs	r3, r0
   2d3a4:	2291      	movs	r2, #145	; 0x91
   2d3a6:	0092      	lsls	r2, r2, #2
   2d3a8:	18ba      	adds	r2, r7, r2
   2d3aa:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d3ac:	2392      	movs	r3, #146	; 0x92
   2d3ae:	009b      	lsls	r3, r3, #2
   2d3b0:	18fb      	adds	r3, r7, r3
   2d3b2:	681b      	ldr	r3, [r3, #0]
   2d3b4:	330e      	adds	r3, #14
   2d3b6:	2291      	movs	r2, #145	; 0x91
   2d3b8:	0092      	lsls	r2, r2, #2
   2d3ba:	18ba      	adds	r2, r7, r2
   2d3bc:	6812      	ldr	r2, [r2, #0]
   2d3be:	b2d2      	uxtb	r2, r2
   2d3c0:	701a      	strb	r2, [r3, #0]
   2d3c2:	2392      	movs	r3, #146	; 0x92
   2d3c4:	009b      	lsls	r3, r3, #2
   2d3c6:	18fb      	adds	r3, r7, r3
   2d3c8:	681b      	ldr	r3, [r3, #0]
   2d3ca:	330f      	adds	r3, #15
   2d3cc:	2291      	movs	r2, #145	; 0x91
   2d3ce:	0092      	lsls	r2, r2, #2
   2d3d0:	18ba      	adds	r2, r7, r2
   2d3d2:	6812      	ldr	r2, [r2, #0]
   2d3d4:	b292      	uxth	r2, r2
   2d3d6:	0a12      	lsrs	r2, r2, #8
   2d3d8:	b292      	uxth	r2, r2
   2d3da:	b2d2      	uxtb	r2, r2
   2d3dc:	701a      	strb	r2, [r3, #0]
   2d3de:	2392      	movs	r3, #146	; 0x92
   2d3e0:	009b      	lsls	r3, r3, #2
   2d3e2:	18fb      	adds	r3, r7, r3
   2d3e4:	681b      	ldr	r3, [r3, #0]
   2d3e6:	3310      	adds	r3, #16
   2d3e8:	2291      	movs	r2, #145	; 0x91
   2d3ea:	0092      	lsls	r2, r2, #2
   2d3ec:	18ba      	adds	r2, r7, r2
   2d3ee:	6812      	ldr	r2, [r2, #0]
   2d3f0:	0c12      	lsrs	r2, r2, #16
   2d3f2:	b2d2      	uxtb	r2, r2
   2d3f4:	701a      	strb	r2, [r3, #0]
   2d3f6:	2392      	movs	r3, #146	; 0x92
   2d3f8:	009b      	lsls	r3, r3, #2
   2d3fa:	18fb      	adds	r3, r7, r3
   2d3fc:	681b      	ldr	r3, [r3, #0]
   2d3fe:	3311      	adds	r3, #17
   2d400:	2291      	movs	r2, #145	; 0x91
   2d402:	0092      	lsls	r2, r2, #2
   2d404:	18ba      	adds	r2, r7, r2
   2d406:	6812      	ldr	r2, [r2, #0]
   2d408:	0e12      	lsrs	r2, r2, #24
   2d40a:	b2d2      	uxtb	r2, r2
   2d40c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d40e:	2392      	movs	r3, #146	; 0x92
   2d410:	009b      	lsls	r3, r3, #2
   2d412:	18fb      	adds	r3, r7, r3
   2d414:	681b      	ldr	r3, [r3, #0]
   2d416:	330b      	adds	r3, #11
   2d418:	2200      	movs	r2, #0
   2d41a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d41c:	2392      	movs	r3, #146	; 0x92
   2d41e:	009b      	lsls	r3, r3, #2
   2d420:	18fb      	adds	r3, r7, r3
   2d422:	681b      	ldr	r3, [r3, #0]
   2d424:	331c      	adds	r3, #28
   2d426:	2200      	movs	r2, #0
   2d428:	701a      	strb	r2, [r3, #0]
   2d42a:	2392      	movs	r3, #146	; 0x92
   2d42c:	009b      	lsls	r3, r3, #2
   2d42e:	18fb      	adds	r3, r7, r3
   2d430:	681b      	ldr	r3, [r3, #0]
   2d432:	331d      	adds	r3, #29
   2d434:	2200      	movs	r2, #0
   2d436:	701a      	strb	r2, [r3, #0]
   2d438:	2392      	movs	r3, #146	; 0x92
   2d43a:	009b      	lsls	r3, r3, #2
   2d43c:	18fb      	adds	r3, r7, r3
   2d43e:	681b      	ldr	r3, [r3, #0]
   2d440:	331e      	adds	r3, #30
   2d442:	2200      	movs	r2, #0
   2d444:	701a      	strb	r2, [r3, #0]
   2d446:	2392      	movs	r3, #146	; 0x92
   2d448:	009b      	lsls	r3, r3, #2
   2d44a:	18fb      	adds	r3, r7, r3
   2d44c:	681b      	ldr	r3, [r3, #0]
   2d44e:	331f      	adds	r3, #31
   2d450:	2200      	movs	r2, #0
   2d452:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2d454:	2392      	movs	r3, #146	; 0x92
   2d456:	009b      	lsls	r3, r3, #2
   2d458:	18fb      	adds	r3, r7, r3
   2d45a:	681b      	ldr	r3, [r3, #0]
   2d45c:	3315      	adds	r3, #21
   2d45e:	781b      	ldrb	r3, [r3, #0]
   2d460:	021b      	lsls	r3, r3, #8
   2d462:	b21a      	sxth	r2, r3
   2d464:	2392      	movs	r3, #146	; 0x92
   2d466:	009b      	lsls	r3, r3, #2
   2d468:	18fb      	adds	r3, r7, r3
   2d46a:	681b      	ldr	r3, [r3, #0]
   2d46c:	3314      	adds	r3, #20
   2d46e:	781b      	ldrb	r3, [r3, #0]
   2d470:	b21b      	sxth	r3, r3
   2d472:	4313      	orrs	r3, r2
   2d474:	b21b      	sxth	r3, r3
   2d476:	b29b      	uxth	r3, r3
   2d478:	041b      	lsls	r3, r3, #16
   2d47a:	2292      	movs	r2, #146	; 0x92
   2d47c:	0092      	lsls	r2, r2, #2
   2d47e:	18ba      	adds	r2, r7, r2
   2d480:	6812      	ldr	r2, [r2, #0]
   2d482:	321b      	adds	r2, #27
   2d484:	7812      	ldrb	r2, [r2, #0]
   2d486:	0212      	lsls	r2, r2, #8
   2d488:	b211      	sxth	r1, r2
   2d48a:	2292      	movs	r2, #146	; 0x92
   2d48c:	0092      	lsls	r2, r2, #2
   2d48e:	18ba      	adds	r2, r7, r2
   2d490:	6812      	ldr	r2, [r2, #0]
   2d492:	321a      	adds	r2, #26
   2d494:	7812      	ldrb	r2, [r2, #0]
   2d496:	b212      	sxth	r2, r2
   2d498:	430a      	orrs	r2, r1
   2d49a:	b212      	sxth	r2, r2
   2d49c:	b292      	uxth	r2, r2
   2d49e:	4313      	orrs	r3, r2
   2d4a0:	2290      	movs	r2, #144	; 0x90
   2d4a2:	0092      	lsls	r2, r2, #2
   2d4a4:	18ba      	adds	r2, r7, r2
   2d4a6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2d4a8:	2392      	movs	r3, #146	; 0x92
   2d4aa:	009b      	lsls	r3, r3, #2
   2d4ac:	18fb      	adds	r3, r7, r3
   2d4ae:	681b      	ldr	r3, [r3, #0]
   2d4b0:	331a      	adds	r3, #26
   2d4b2:	2200      	movs	r2, #0
   2d4b4:	701a      	strb	r2, [r3, #0]
   2d4b6:	2392      	movs	r3, #146	; 0x92
   2d4b8:	009b      	lsls	r3, r3, #2
   2d4ba:	18fb      	adds	r3, r7, r3
   2d4bc:	681b      	ldr	r3, [r3, #0]
   2d4be:	331b      	adds	r3, #27
   2d4c0:	2200      	movs	r2, #0
   2d4c2:	701a      	strb	r2, [r3, #0]
   2d4c4:	2392      	movs	r3, #146	; 0x92
   2d4c6:	009b      	lsls	r3, r3, #2
   2d4c8:	18fb      	adds	r3, r7, r3
   2d4ca:	681b      	ldr	r3, [r3, #0]
   2d4cc:	3314      	adds	r3, #20
   2d4ce:	2200      	movs	r2, #0
   2d4d0:	701a      	strb	r2, [r3, #0]
   2d4d2:	2392      	movs	r3, #146	; 0x92
   2d4d4:	009b      	lsls	r3, r3, #2
   2d4d6:	18fb      	adds	r3, r7, r3
   2d4d8:	681b      	ldr	r3, [r3, #0]
   2d4da:	3315      	adds	r3, #21
   2d4dc:	2200      	movs	r2, #0
   2d4de:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2d4e0:	2387      	movs	r3, #135	; 0x87
   2d4e2:	009b      	lsls	r3, r3, #2
   2d4e4:	18fb      	adds	r3, r7, r3
   2d4e6:	681b      	ldr	r3, [r3, #0]
   2d4e8:	2201      	movs	r2, #1
   2d4ea:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2d4ec:	2390      	movs	r3, #144	; 0x90
   2d4ee:	009b      	lsls	r3, r3, #2
   2d4f0:	18fb      	adds	r3, r7, r3
   2d4f2:	681b      	ldr	r3, [r3, #0]
   2d4f4:	2b00      	cmp	r3, #0
   2d4f6:	d100      	bne.n	2d4fa <f_open+0x2fe>
   2d4f8:	e076      	b.n	2d5e8 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2d4fa:	2387      	movs	r3, #135	; 0x87
   2d4fc:	009b      	lsls	r3, r3, #2
   2d4fe:	18fb      	adds	r3, r7, r3
   2d500:	681b      	ldr	r3, [r3, #0]
   2d502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d504:	2291      	movs	r2, #145	; 0x91
   2d506:	0092      	lsls	r2, r2, #2
   2d508:	18ba      	adds	r2, r7, r2
   2d50a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2d50c:	2387      	movs	r3, #135	; 0x87
   2d50e:	009b      	lsls	r3, r3, #2
   2d510:	18fb      	adds	r3, r7, r3
   2d512:	681b      	ldr	r3, [r3, #0]
   2d514:	4a21      	ldr	r2, [pc, #132]	; (2d59c <f_open+0x3a0>)
   2d516:	18bc      	adds	r4, r7, r2
   2d518:	2290      	movs	r2, #144	; 0x90
   2d51a:	0092      	lsls	r2, r2, #2
   2d51c:	18ba      	adds	r2, r7, r2
   2d51e:	6812      	ldr	r2, [r2, #0]
   2d520:	0011      	movs	r1, r2
   2d522:	0018      	movs	r0, r3
   2d524:	4b22      	ldr	r3, [pc, #136]	; (2d5b0 <f_open+0x3b4>)
   2d526:	4798      	blx	r3
   2d528:	0003      	movs	r3, r0
   2d52a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d52c:	4b1b      	ldr	r3, [pc, #108]	; (2d59c <f_open+0x3a0>)
   2d52e:	18fb      	adds	r3, r7, r3
   2d530:	781b      	ldrb	r3, [r3, #0]
   2d532:	2b00      	cmp	r3, #0
   2d534:	d158      	bne.n	2d5e8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d536:	2387      	movs	r3, #135	; 0x87
   2d538:	009b      	lsls	r3, r3, #2
   2d53a:	18fb      	adds	r3, r7, r3
   2d53c:	681b      	ldr	r3, [r3, #0]
   2d53e:	2290      	movs	r2, #144	; 0x90
   2d540:	0092      	lsls	r2, r2, #2
   2d542:	18ba      	adds	r2, r7, r2
   2d544:	6812      	ldr	r2, [r2, #0]
   2d546:	3a01      	subs	r2, #1
   2d548:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d54a:	2387      	movs	r3, #135	; 0x87
   2d54c:	009b      	lsls	r3, r3, #2
   2d54e:	18fb      	adds	r3, r7, r3
   2d550:	681b      	ldr	r3, [r3, #0]
   2d552:	4a12      	ldr	r2, [pc, #72]	; (2d59c <f_open+0x3a0>)
   2d554:	18bc      	adds	r4, r7, r2
   2d556:	2291      	movs	r2, #145	; 0x91
   2d558:	0092      	lsls	r2, r2, #2
   2d55a:	18ba      	adds	r2, r7, r2
   2d55c:	6812      	ldr	r2, [r2, #0]
   2d55e:	0011      	movs	r1, r2
   2d560:	0018      	movs	r0, r3
   2d562:	4b14      	ldr	r3, [pc, #80]	; (2d5b4 <f_open+0x3b8>)
   2d564:	4798      	blx	r3
   2d566:	0003      	movs	r3, r0
   2d568:	7023      	strb	r3, [r4, #0]
   2d56a:	e03d      	b.n	2d5e8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d56c:	4b0b      	ldr	r3, [pc, #44]	; (2d59c <f_open+0x3a0>)
   2d56e:	18fb      	adds	r3, r7, r3
   2d570:	781b      	ldrb	r3, [r3, #0]
   2d572:	2b00      	cmp	r3, #0
   2d574:	d138      	bne.n	2d5e8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d576:	2392      	movs	r3, #146	; 0x92
   2d578:	009b      	lsls	r3, r3, #2
   2d57a:	18fb      	adds	r3, r7, r3
   2d57c:	681b      	ldr	r3, [r3, #0]
   2d57e:	330b      	adds	r3, #11
   2d580:	781b      	ldrb	r3, [r3, #0]
   2d582:	001a      	movs	r2, r3
   2d584:	2310      	movs	r3, #16
   2d586:	4013      	ands	r3, r2
   2d588:	d016      	beq.n	2d5b8 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d58a:	4b04      	ldr	r3, [pc, #16]	; (2d59c <f_open+0x3a0>)
   2d58c:	18fb      	adds	r3, r7, r3
   2d58e:	2204      	movs	r2, #4
   2d590:	701a      	strb	r2, [r3, #0]
   2d592:	e029      	b.n	2d5e8 <f_open+0x3ec>
   2d594:	fffffdac 	.word	0xfffffdac
   2d598:	fffffdb7 	.word	0xfffffdb7
   2d59c:	0000024f 	.word	0x0000024f
   2d5a0:	0002cb55 	.word	0x0002cb55
   2d5a4:	0002c949 	.word	0x0002c949
   2d5a8:	0002c199 	.word	0x0002c199
   2d5ac:	0002af91 	.word	0x0002af91
   2d5b0:	0002b715 	.word	0x0002b715
   2d5b4:	0002b0d5 	.word	0x0002b0d5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d5b8:	4b5a      	ldr	r3, [pc, #360]	; (2d724 <f_open+0x528>)
   2d5ba:	2294      	movs	r2, #148	; 0x94
   2d5bc:	0092      	lsls	r2, r2, #2
   2d5be:	4694      	mov	ip, r2
   2d5c0:	44bc      	add	ip, r7
   2d5c2:	4463      	add	r3, ip
   2d5c4:	781b      	ldrb	r3, [r3, #0]
   2d5c6:	2202      	movs	r2, #2
   2d5c8:	4013      	ands	r3, r2
   2d5ca:	d00d      	beq.n	2d5e8 <f_open+0x3ec>
   2d5cc:	2392      	movs	r3, #146	; 0x92
   2d5ce:	009b      	lsls	r3, r3, #2
   2d5d0:	18fb      	adds	r3, r7, r3
   2d5d2:	681b      	ldr	r3, [r3, #0]
   2d5d4:	330b      	adds	r3, #11
   2d5d6:	781b      	ldrb	r3, [r3, #0]
   2d5d8:	001a      	movs	r2, r3
   2d5da:	2301      	movs	r3, #1
   2d5dc:	4013      	ands	r3, r2
   2d5de:	d003      	beq.n	2d5e8 <f_open+0x3ec>
					res = FR_DENIED;
   2d5e0:	4b51      	ldr	r3, [pc, #324]	; (2d728 <f_open+0x52c>)
   2d5e2:	18fb      	adds	r3, r7, r3
   2d5e4:	2207      	movs	r2, #7
   2d5e6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2d5e8:	4b4f      	ldr	r3, [pc, #316]	; (2d728 <f_open+0x52c>)
   2d5ea:	18fb      	adds	r3, r7, r3
   2d5ec:	781b      	ldrb	r3, [r3, #0]
   2d5ee:	2b00      	cmp	r3, #0
   2d5f0:	d126      	bne.n	2d640 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2d5f2:	4b4c      	ldr	r3, [pc, #304]	; (2d724 <f_open+0x528>)
   2d5f4:	2294      	movs	r2, #148	; 0x94
   2d5f6:	0092      	lsls	r2, r2, #2
   2d5f8:	4694      	mov	ip, r2
   2d5fa:	44bc      	add	ip, r7
   2d5fc:	4463      	add	r3, ip
   2d5fe:	781b      	ldrb	r3, [r3, #0]
   2d600:	2208      	movs	r2, #8
   2d602:	4013      	ands	r3, r2
   2d604:	d00f      	beq.n	2d626 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2d606:	4b47      	ldr	r3, [pc, #284]	; (2d724 <f_open+0x528>)
   2d608:	2294      	movs	r2, #148	; 0x94
   2d60a:	0092      	lsls	r2, r2, #2
   2d60c:	4694      	mov	ip, r2
   2d60e:	44bc      	add	ip, r7
   2d610:	4463      	add	r3, ip
   2d612:	4a44      	ldr	r2, [pc, #272]	; (2d724 <f_open+0x528>)
   2d614:	2194      	movs	r1, #148	; 0x94
   2d616:	0089      	lsls	r1, r1, #2
   2d618:	468c      	mov	ip, r1
   2d61a:	44bc      	add	ip, r7
   2d61c:	4462      	add	r2, ip
   2d61e:	7812      	ldrb	r2, [r2, #0]
   2d620:	2120      	movs	r1, #32
   2d622:	430a      	orrs	r2, r1
   2d624:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2d626:	2387      	movs	r3, #135	; 0x87
   2d628:	009b      	lsls	r3, r3, #2
   2d62a:	18fb      	adds	r3, r7, r3
   2d62c:	681b      	ldr	r3, [r3, #0]
   2d62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d630:	68fb      	ldr	r3, [r7, #12]
   2d632:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2d634:	68fb      	ldr	r3, [r7, #12]
   2d636:	2292      	movs	r2, #146	; 0x92
   2d638:	0092      	lsls	r2, r2, #2
   2d63a:	18ba      	adds	r2, r7, r2
   2d63c:	6812      	ldr	r2, [r2, #0]
   2d63e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2d640:	4b39      	ldr	r3, [pc, #228]	; (2d728 <f_open+0x52c>)
   2d642:	18fb      	adds	r3, r7, r3
   2d644:	781b      	ldrb	r3, [r3, #0]
   2d646:	2b00      	cmp	r3, #0
   2d648:	d163      	bne.n	2d712 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2d64a:	68fb      	ldr	r3, [r7, #12]
   2d64c:	4a35      	ldr	r2, [pc, #212]	; (2d724 <f_open+0x528>)
   2d64e:	2194      	movs	r1, #148	; 0x94
   2d650:	0089      	lsls	r1, r1, #2
   2d652:	468c      	mov	ip, r1
   2d654:	44bc      	add	ip, r7
   2d656:	4462      	add	r2, ip
   2d658:	7812      	ldrb	r2, [r2, #0]
   2d65a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2d65c:	2392      	movs	r3, #146	; 0x92
   2d65e:	009b      	lsls	r3, r3, #2
   2d660:	18fb      	adds	r3, r7, r3
   2d662:	681b      	ldr	r3, [r3, #0]
   2d664:	3315      	adds	r3, #21
   2d666:	781b      	ldrb	r3, [r3, #0]
   2d668:	021b      	lsls	r3, r3, #8
   2d66a:	b21a      	sxth	r2, r3
   2d66c:	2392      	movs	r3, #146	; 0x92
   2d66e:	009b      	lsls	r3, r3, #2
   2d670:	18fb      	adds	r3, r7, r3
   2d672:	681b      	ldr	r3, [r3, #0]
   2d674:	3314      	adds	r3, #20
   2d676:	781b      	ldrb	r3, [r3, #0]
   2d678:	b21b      	sxth	r3, r3
   2d67a:	4313      	orrs	r3, r2
   2d67c:	b21b      	sxth	r3, r3
   2d67e:	b29b      	uxth	r3, r3
   2d680:	041b      	lsls	r3, r3, #16
   2d682:	2292      	movs	r2, #146	; 0x92
   2d684:	0092      	lsls	r2, r2, #2
   2d686:	18ba      	adds	r2, r7, r2
   2d688:	6812      	ldr	r2, [r2, #0]
   2d68a:	321b      	adds	r2, #27
   2d68c:	7812      	ldrb	r2, [r2, #0]
   2d68e:	0212      	lsls	r2, r2, #8
   2d690:	b211      	sxth	r1, r2
   2d692:	2292      	movs	r2, #146	; 0x92
   2d694:	0092      	lsls	r2, r2, #2
   2d696:	18ba      	adds	r2, r7, r2
   2d698:	6812      	ldr	r2, [r2, #0]
   2d69a:	321a      	adds	r2, #26
   2d69c:	7812      	ldrb	r2, [r2, #0]
   2d69e:	b212      	sxth	r2, r2
   2d6a0:	430a      	orrs	r2, r1
   2d6a2:	b212      	sxth	r2, r2
   2d6a4:	b292      	uxth	r2, r2
   2d6a6:	431a      	orrs	r2, r3
   2d6a8:	68fb      	ldr	r3, [r7, #12]
   2d6aa:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2d6ac:	2392      	movs	r3, #146	; 0x92
   2d6ae:	009b      	lsls	r3, r3, #2
   2d6b0:	18fb      	adds	r3, r7, r3
   2d6b2:	681b      	ldr	r3, [r3, #0]
   2d6b4:	331f      	adds	r3, #31
   2d6b6:	781b      	ldrb	r3, [r3, #0]
   2d6b8:	061a      	lsls	r2, r3, #24
   2d6ba:	2392      	movs	r3, #146	; 0x92
   2d6bc:	009b      	lsls	r3, r3, #2
   2d6be:	18fb      	adds	r3, r7, r3
   2d6c0:	681b      	ldr	r3, [r3, #0]
   2d6c2:	331e      	adds	r3, #30
   2d6c4:	781b      	ldrb	r3, [r3, #0]
   2d6c6:	041b      	lsls	r3, r3, #16
   2d6c8:	4313      	orrs	r3, r2
   2d6ca:	2292      	movs	r2, #146	; 0x92
   2d6cc:	0092      	lsls	r2, r2, #2
   2d6ce:	18ba      	adds	r2, r7, r2
   2d6d0:	6812      	ldr	r2, [r2, #0]
   2d6d2:	321d      	adds	r2, #29
   2d6d4:	7812      	ldrb	r2, [r2, #0]
   2d6d6:	0212      	lsls	r2, r2, #8
   2d6d8:	4313      	orrs	r3, r2
   2d6da:	2292      	movs	r2, #146	; 0x92
   2d6dc:	0092      	lsls	r2, r2, #2
   2d6de:	18ba      	adds	r2, r7, r2
   2d6e0:	6812      	ldr	r2, [r2, #0]
   2d6e2:	321c      	adds	r2, #28
   2d6e4:	7812      	ldrb	r2, [r2, #0]
   2d6e6:	431a      	orrs	r2, r3
   2d6e8:	68fb      	ldr	r3, [r7, #12]
   2d6ea:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d6ec:	68fb      	ldr	r3, [r7, #12]
   2d6ee:	2200      	movs	r2, #0
   2d6f0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d6f2:	68fb      	ldr	r3, [r7, #12]
   2d6f4:	2200      	movs	r2, #0
   2d6f6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d6f8:	2387      	movs	r3, #135	; 0x87
   2d6fa:	009b      	lsls	r3, r3, #2
   2d6fc:	18fb      	adds	r3, r7, r3
   2d6fe:	681a      	ldr	r2, [r3, #0]
   2d700:	68fb      	ldr	r3, [r7, #12]
   2d702:	601a      	str	r2, [r3, #0]
   2d704:	2387      	movs	r3, #135	; 0x87
   2d706:	009b      	lsls	r3, r3, #2
   2d708:	18fb      	adds	r3, r7, r3
   2d70a:	681b      	ldr	r3, [r3, #0]
   2d70c:	88da      	ldrh	r2, [r3, #6]
   2d70e:	68fb      	ldr	r3, [r7, #12]
   2d710:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d712:	4b05      	ldr	r3, [pc, #20]	; (2d728 <f_open+0x52c>)
   2d714:	18fb      	adds	r3, r7, r3
   2d716:	781b      	ldrb	r3, [r3, #0]
}
   2d718:	0018      	movs	r0, r3
   2d71a:	46bd      	mov	sp, r7
   2d71c:	2395      	movs	r3, #149	; 0x95
   2d71e:	009b      	lsls	r3, r3, #2
   2d720:	449d      	add	sp, r3
   2d722:	bd90      	pop	{r4, r7, pc}
   2d724:	fffffdb7 	.word	0xfffffdb7
   2d728:	0000024f 	.word	0x0000024f

0002d72c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d72c:	b590      	push	{r4, r7, lr}
   2d72e:	b08b      	sub	sp, #44	; 0x2c
   2d730:	af00      	add	r7, sp, #0
   2d732:	60f8      	str	r0, [r7, #12]
   2d734:	60b9      	str	r1, [r7, #8]
   2d736:	607a      	str	r2, [r7, #4]
   2d738:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d73a:	68bb      	ldr	r3, [r7, #8]
   2d73c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d73e:	683b      	ldr	r3, [r7, #0]
   2d740:	2200      	movs	r2, #0
   2d742:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d744:	68fb      	ldr	r3, [r7, #12]
   2d746:	681a      	ldr	r2, [r3, #0]
   2d748:	68fb      	ldr	r3, [r7, #12]
   2d74a:	889b      	ldrh	r3, [r3, #4]
   2d74c:	2117      	movs	r1, #23
   2d74e:	187c      	adds	r4, r7, r1
   2d750:	0019      	movs	r1, r3
   2d752:	0010      	movs	r0, r2
   2d754:	4bc3      	ldr	r3, [pc, #780]	; (2da64 <f_write+0x338>)
   2d756:	4798      	blx	r3
   2d758:	0003      	movs	r3, r0
   2d75a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d75c:	2317      	movs	r3, #23
   2d75e:	18fb      	adds	r3, r7, r3
   2d760:	781b      	ldrb	r3, [r3, #0]
   2d762:	2b00      	cmp	r3, #0
   2d764:	d003      	beq.n	2d76e <f_write+0x42>
   2d766:	2317      	movs	r3, #23
   2d768:	18fb      	adds	r3, r7, r3
   2d76a:	781b      	ldrb	r3, [r3, #0]
   2d76c:	e176      	b.n	2da5c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d76e:	68fb      	ldr	r3, [r7, #12]
   2d770:	799b      	ldrb	r3, [r3, #6]
   2d772:	b25b      	sxtb	r3, r3
   2d774:	2b00      	cmp	r3, #0
   2d776:	da01      	bge.n	2d77c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d778:	2302      	movs	r3, #2
   2d77a:	e16f      	b.n	2da5c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d77c:	68fb      	ldr	r3, [r7, #12]
   2d77e:	799b      	ldrb	r3, [r3, #6]
   2d780:	001a      	movs	r2, r3
   2d782:	2302      	movs	r3, #2
   2d784:	4013      	ands	r3, r2
   2d786:	d101      	bne.n	2d78c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d788:	2307      	movs	r3, #7
   2d78a:	e167      	b.n	2da5c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d78c:	68fb      	ldr	r3, [r7, #12]
   2d78e:	68da      	ldr	r2, [r3, #12]
   2d790:	687b      	ldr	r3, [r7, #4]
   2d792:	18d2      	adds	r2, r2, r3
   2d794:	68fb      	ldr	r3, [r7, #12]
   2d796:	68db      	ldr	r3, [r3, #12]
   2d798:	429a      	cmp	r2, r3
   2d79a:	d300      	bcc.n	2d79e <f_write+0x72>
   2d79c:	e146      	b.n	2da2c <f_write+0x300>
   2d79e:	2300      	movs	r3, #0
   2d7a0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d7a2:	e143      	b.n	2da2c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d7a4:	68fb      	ldr	r3, [r7, #12]
   2d7a6:	689b      	ldr	r3, [r3, #8]
   2d7a8:	05db      	lsls	r3, r3, #23
   2d7aa:	0ddb      	lsrs	r3, r3, #23
   2d7ac:	d000      	beq.n	2d7b0 <f_write+0x84>
   2d7ae:	e0f6      	b.n	2d99e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d7b0:	68fb      	ldr	r3, [r7, #12]
   2d7b2:	689b      	ldr	r3, [r3, #8]
   2d7b4:	0a5b      	lsrs	r3, r3, #9
   2d7b6:	b2da      	uxtb	r2, r3
   2d7b8:	68fb      	ldr	r3, [r7, #12]
   2d7ba:	681b      	ldr	r3, [r3, #0]
   2d7bc:	789b      	ldrb	r3, [r3, #2]
   2d7be:	3b01      	subs	r3, #1
   2d7c0:	b2d9      	uxtb	r1, r3
   2d7c2:	2316      	movs	r3, #22
   2d7c4:	18fb      	adds	r3, r7, r3
   2d7c6:	400a      	ands	r2, r1
   2d7c8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d7ca:	2316      	movs	r3, #22
   2d7cc:	18fb      	adds	r3, r7, r3
   2d7ce:	781b      	ldrb	r3, [r3, #0]
   2d7d0:	2b00      	cmp	r3, #0
   2d7d2:	d140      	bne.n	2d856 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d7d4:	68fb      	ldr	r3, [r7, #12]
   2d7d6:	689b      	ldr	r3, [r3, #8]
   2d7d8:	2b00      	cmp	r3, #0
   2d7da:	d111      	bne.n	2d800 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d7dc:	68fb      	ldr	r3, [r7, #12]
   2d7de:	691b      	ldr	r3, [r3, #16]
   2d7e0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d7e4:	2b00      	cmp	r3, #0
   2d7e6:	d115      	bne.n	2d814 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d7e8:	68fb      	ldr	r3, [r7, #12]
   2d7ea:	681b      	ldr	r3, [r3, #0]
   2d7ec:	2100      	movs	r1, #0
   2d7ee:	0018      	movs	r0, r3
   2d7f0:	4b9d      	ldr	r3, [pc, #628]	; (2da68 <f_write+0x33c>)
   2d7f2:	4798      	blx	r3
   2d7f4:	0003      	movs	r3, r0
   2d7f6:	627b      	str	r3, [r7, #36]	; 0x24
   2d7f8:	68fb      	ldr	r3, [r7, #12]
   2d7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d7fc:	611a      	str	r2, [r3, #16]
   2d7fe:	e009      	b.n	2d814 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d800:	68fb      	ldr	r3, [r7, #12]
   2d802:	681a      	ldr	r2, [r3, #0]
   2d804:	68fb      	ldr	r3, [r7, #12]
   2d806:	695b      	ldr	r3, [r3, #20]
   2d808:	0019      	movs	r1, r3
   2d80a:	0010      	movs	r0, r2
   2d80c:	4b96      	ldr	r3, [pc, #600]	; (2da68 <f_write+0x33c>)
   2d80e:	4798      	blx	r3
   2d810:	0003      	movs	r3, r0
   2d812:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d816:	2b00      	cmp	r3, #0
   2d818:	d100      	bne.n	2d81c <f_write+0xf0>
   2d81a:	e10c      	b.n	2da36 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d81e:	2b01      	cmp	r3, #1
   2d820:	d109      	bne.n	2d836 <f_write+0x10a>
   2d822:	68fb      	ldr	r3, [r7, #12]
   2d824:	799b      	ldrb	r3, [r3, #6]
   2d826:	2280      	movs	r2, #128	; 0x80
   2d828:	4252      	negs	r2, r2
   2d82a:	4313      	orrs	r3, r2
   2d82c:	b2da      	uxtb	r2, r3
   2d82e:	68fb      	ldr	r3, [r7, #12]
   2d830:	719a      	strb	r2, [r3, #6]
   2d832:	2302      	movs	r3, #2
   2d834:	e112      	b.n	2da5c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d838:	3301      	adds	r3, #1
   2d83a:	d109      	bne.n	2d850 <f_write+0x124>
   2d83c:	68fb      	ldr	r3, [r7, #12]
   2d83e:	799b      	ldrb	r3, [r3, #6]
   2d840:	2280      	movs	r2, #128	; 0x80
   2d842:	4252      	negs	r2, r2
   2d844:	4313      	orrs	r3, r2
   2d846:	b2da      	uxtb	r2, r3
   2d848:	68fb      	ldr	r3, [r7, #12]
   2d84a:	719a      	strb	r2, [r3, #6]
   2d84c:	2301      	movs	r3, #1
   2d84e:	e105      	b.n	2da5c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d850:	68fb      	ldr	r3, [r7, #12]
   2d852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d854:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d856:	68fb      	ldr	r3, [r7, #12]
   2d858:	681b      	ldr	r3, [r3, #0]
   2d85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d85c:	68fb      	ldr	r3, [r7, #12]
   2d85e:	699b      	ldr	r3, [r3, #24]
   2d860:	429a      	cmp	r2, r3
   2d862:	d111      	bne.n	2d888 <f_write+0x15c>
   2d864:	68fb      	ldr	r3, [r7, #12]
   2d866:	681b      	ldr	r3, [r3, #0]
   2d868:	2100      	movs	r1, #0
   2d86a:	0018      	movs	r0, r3
   2d86c:	4b7f      	ldr	r3, [pc, #508]	; (2da6c <f_write+0x340>)
   2d86e:	4798      	blx	r3
   2d870:	1e03      	subs	r3, r0, #0
   2d872:	d009      	beq.n	2d888 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d874:	68fb      	ldr	r3, [r7, #12]
   2d876:	799b      	ldrb	r3, [r3, #6]
   2d878:	2280      	movs	r2, #128	; 0x80
   2d87a:	4252      	negs	r2, r2
   2d87c:	4313      	orrs	r3, r2
   2d87e:	b2da      	uxtb	r2, r3
   2d880:	68fb      	ldr	r3, [r7, #12]
   2d882:	719a      	strb	r2, [r3, #6]
   2d884:	2301      	movs	r3, #1
   2d886:	e0e9      	b.n	2da5c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d888:	68fb      	ldr	r3, [r7, #12]
   2d88a:	681a      	ldr	r2, [r3, #0]
   2d88c:	68fb      	ldr	r3, [r7, #12]
   2d88e:	695b      	ldr	r3, [r3, #20]
   2d890:	0019      	movs	r1, r3
   2d892:	0010      	movs	r0, r2
   2d894:	4b76      	ldr	r3, [pc, #472]	; (2da70 <f_write+0x344>)
   2d896:	4798      	blx	r3
   2d898:	0003      	movs	r3, r0
   2d89a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d89c:	693b      	ldr	r3, [r7, #16]
   2d89e:	2b00      	cmp	r3, #0
   2d8a0:	d109      	bne.n	2d8b6 <f_write+0x18a>
   2d8a2:	68fb      	ldr	r3, [r7, #12]
   2d8a4:	799b      	ldrb	r3, [r3, #6]
   2d8a6:	2280      	movs	r2, #128	; 0x80
   2d8a8:	4252      	negs	r2, r2
   2d8aa:	4313      	orrs	r3, r2
   2d8ac:	b2da      	uxtb	r2, r3
   2d8ae:	68fb      	ldr	r3, [r7, #12]
   2d8b0:	719a      	strb	r2, [r3, #6]
   2d8b2:	2302      	movs	r3, #2
   2d8b4:	e0d2      	b.n	2da5c <f_write+0x330>
			sect += csect;
   2d8b6:	2316      	movs	r3, #22
   2d8b8:	18fb      	adds	r3, r7, r3
   2d8ba:	781b      	ldrb	r3, [r3, #0]
   2d8bc:	693a      	ldr	r2, [r7, #16]
   2d8be:	18d3      	adds	r3, r2, r3
   2d8c0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d8c2:	687b      	ldr	r3, [r7, #4]
   2d8c4:	0a5b      	lsrs	r3, r3, #9
   2d8c6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d8c8:	69fb      	ldr	r3, [r7, #28]
   2d8ca:	2b00      	cmp	r3, #0
   2d8cc:	d048      	beq.n	2d960 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d8ce:	2316      	movs	r3, #22
   2d8d0:	18fb      	adds	r3, r7, r3
   2d8d2:	781a      	ldrb	r2, [r3, #0]
   2d8d4:	69fb      	ldr	r3, [r7, #28]
   2d8d6:	18d2      	adds	r2, r2, r3
   2d8d8:	68fb      	ldr	r3, [r7, #12]
   2d8da:	681b      	ldr	r3, [r3, #0]
   2d8dc:	789b      	ldrb	r3, [r3, #2]
   2d8de:	429a      	cmp	r2, r3
   2d8e0:	d908      	bls.n	2d8f4 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d8e2:	68fb      	ldr	r3, [r7, #12]
   2d8e4:	681b      	ldr	r3, [r3, #0]
   2d8e6:	789b      	ldrb	r3, [r3, #2]
   2d8e8:	001a      	movs	r2, r3
   2d8ea:	2316      	movs	r3, #22
   2d8ec:	18fb      	adds	r3, r7, r3
   2d8ee:	781b      	ldrb	r3, [r3, #0]
   2d8f0:	1ad3      	subs	r3, r2, r3
   2d8f2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d8f4:	68fb      	ldr	r3, [r7, #12]
   2d8f6:	681b      	ldr	r3, [r3, #0]
   2d8f8:	7858      	ldrb	r0, [r3, #1]
   2d8fa:	69fb      	ldr	r3, [r7, #28]
   2d8fc:	b2db      	uxtb	r3, r3
   2d8fe:	693a      	ldr	r2, [r7, #16]
   2d900:	69b9      	ldr	r1, [r7, #24]
   2d902:	4c5c      	ldr	r4, [pc, #368]	; (2da74 <f_write+0x348>)
   2d904:	47a0      	blx	r4
   2d906:	1e03      	subs	r3, r0, #0
   2d908:	d009      	beq.n	2d91e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d90a:	68fb      	ldr	r3, [r7, #12]
   2d90c:	799b      	ldrb	r3, [r3, #6]
   2d90e:	2280      	movs	r2, #128	; 0x80
   2d910:	4252      	negs	r2, r2
   2d912:	4313      	orrs	r3, r2
   2d914:	b2da      	uxtb	r2, r3
   2d916:	68fb      	ldr	r3, [r7, #12]
   2d918:	719a      	strb	r2, [r3, #6]
   2d91a:	2301      	movs	r3, #1
   2d91c:	e09e      	b.n	2da5c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2d91e:	68fb      	ldr	r3, [r7, #12]
   2d920:	681b      	ldr	r3, [r3, #0]
   2d922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d924:	693b      	ldr	r3, [r7, #16]
   2d926:	1ad2      	subs	r2, r2, r3
   2d928:	69fb      	ldr	r3, [r7, #28]
   2d92a:	429a      	cmp	r2, r3
   2d92c:	d214      	bcs.n	2d958 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2d92e:	68fb      	ldr	r3, [r7, #12]
   2d930:	681b      	ldr	r3, [r3, #0]
   2d932:	3330      	adds	r3, #48	; 0x30
   2d934:	0018      	movs	r0, r3
   2d936:	68fb      	ldr	r3, [r7, #12]
   2d938:	681b      	ldr	r3, [r3, #0]
   2d93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d93c:	693b      	ldr	r3, [r7, #16]
   2d93e:	1ad3      	subs	r3, r2, r3
   2d940:	025b      	lsls	r3, r3, #9
   2d942:	69ba      	ldr	r2, [r7, #24]
   2d944:	18d1      	adds	r1, r2, r3
   2d946:	2380      	movs	r3, #128	; 0x80
   2d948:	009b      	lsls	r3, r3, #2
   2d94a:	001a      	movs	r2, r3
   2d94c:	4b4a      	ldr	r3, [pc, #296]	; (2da78 <f_write+0x34c>)
   2d94e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2d950:	68fb      	ldr	r3, [r7, #12]
   2d952:	681b      	ldr	r3, [r3, #0]
   2d954:	2200      	movs	r2, #0
   2d956:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2d958:	69fb      	ldr	r3, [r7, #28]
   2d95a:	025b      	lsls	r3, r3, #9
   2d95c:	623b      	str	r3, [r7, #32]
				continue;
   2d95e:	e051      	b.n	2da04 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2d960:	68fb      	ldr	r3, [r7, #12]
   2d962:	689a      	ldr	r2, [r3, #8]
   2d964:	68fb      	ldr	r3, [r7, #12]
   2d966:	68db      	ldr	r3, [r3, #12]
   2d968:	429a      	cmp	r2, r3
   2d96a:	d315      	bcc.n	2d998 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2d96c:	68fb      	ldr	r3, [r7, #12]
   2d96e:	681b      	ldr	r3, [r3, #0]
   2d970:	2100      	movs	r1, #0
   2d972:	0018      	movs	r0, r3
   2d974:	4b3d      	ldr	r3, [pc, #244]	; (2da6c <f_write+0x340>)
   2d976:	4798      	blx	r3
   2d978:	1e03      	subs	r3, r0, #0
   2d97a:	d009      	beq.n	2d990 <f_write+0x264>
   2d97c:	68fb      	ldr	r3, [r7, #12]
   2d97e:	799b      	ldrb	r3, [r3, #6]
   2d980:	2280      	movs	r2, #128	; 0x80
   2d982:	4252      	negs	r2, r2
   2d984:	4313      	orrs	r3, r2
   2d986:	b2da      	uxtb	r2, r3
   2d988:	68fb      	ldr	r3, [r7, #12]
   2d98a:	719a      	strb	r2, [r3, #6]
   2d98c:	2301      	movs	r3, #1
   2d98e:	e065      	b.n	2da5c <f_write+0x330>
				fp->fs->winsect = sect;
   2d990:	68fb      	ldr	r3, [r7, #12]
   2d992:	681b      	ldr	r3, [r3, #0]
   2d994:	693a      	ldr	r2, [r7, #16]
   2d996:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2d998:	68fb      	ldr	r3, [r7, #12]
   2d99a:	693a      	ldr	r2, [r7, #16]
   2d99c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2d99e:	68fb      	ldr	r3, [r7, #12]
   2d9a0:	689b      	ldr	r3, [r3, #8]
   2d9a2:	05db      	lsls	r3, r3, #23
   2d9a4:	0ddb      	lsrs	r3, r3, #23
   2d9a6:	2280      	movs	r2, #128	; 0x80
   2d9a8:	0092      	lsls	r2, r2, #2
   2d9aa:	1ad3      	subs	r3, r2, r3
   2d9ac:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2d9ae:	6a3a      	ldr	r2, [r7, #32]
   2d9b0:	687b      	ldr	r3, [r7, #4]
   2d9b2:	429a      	cmp	r2, r3
   2d9b4:	d901      	bls.n	2d9ba <f_write+0x28e>
   2d9b6:	687b      	ldr	r3, [r7, #4]
   2d9b8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2d9ba:	68fb      	ldr	r3, [r7, #12]
   2d9bc:	681a      	ldr	r2, [r3, #0]
   2d9be:	68fb      	ldr	r3, [r7, #12]
   2d9c0:	699b      	ldr	r3, [r3, #24]
   2d9c2:	0019      	movs	r1, r3
   2d9c4:	0010      	movs	r0, r2
   2d9c6:	4b29      	ldr	r3, [pc, #164]	; (2da6c <f_write+0x340>)
   2d9c8:	4798      	blx	r3
   2d9ca:	1e03      	subs	r3, r0, #0
   2d9cc:	d009      	beq.n	2d9e2 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2d9ce:	68fb      	ldr	r3, [r7, #12]
   2d9d0:	799b      	ldrb	r3, [r3, #6]
   2d9d2:	2280      	movs	r2, #128	; 0x80
   2d9d4:	4252      	negs	r2, r2
   2d9d6:	4313      	orrs	r3, r2
   2d9d8:	b2da      	uxtb	r2, r3
   2d9da:	68fb      	ldr	r3, [r7, #12]
   2d9dc:	719a      	strb	r2, [r3, #6]
   2d9de:	2301      	movs	r3, #1
   2d9e0:	e03c      	b.n	2da5c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2d9e2:	68fb      	ldr	r3, [r7, #12]
   2d9e4:	681a      	ldr	r2, [r3, #0]
   2d9e6:	68fb      	ldr	r3, [r7, #12]
   2d9e8:	689b      	ldr	r3, [r3, #8]
   2d9ea:	05db      	lsls	r3, r3, #23
   2d9ec:	0ddb      	lsrs	r3, r3, #23
   2d9ee:	3330      	adds	r3, #48	; 0x30
   2d9f0:	18d3      	adds	r3, r2, r3
   2d9f2:	6a3a      	ldr	r2, [r7, #32]
   2d9f4:	69b9      	ldr	r1, [r7, #24]
   2d9f6:	0018      	movs	r0, r3
   2d9f8:	4b1f      	ldr	r3, [pc, #124]	; (2da78 <f_write+0x34c>)
   2d9fa:	4798      	blx	r3
		fp->fs->wflag = 1;
   2d9fc:	68fb      	ldr	r3, [r7, #12]
   2d9fe:	681b      	ldr	r3, [r3, #0]
   2da00:	2201      	movs	r2, #1
   2da02:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2da04:	69ba      	ldr	r2, [r7, #24]
   2da06:	6a3b      	ldr	r3, [r7, #32]
   2da08:	18d3      	adds	r3, r2, r3
   2da0a:	61bb      	str	r3, [r7, #24]
   2da0c:	68fb      	ldr	r3, [r7, #12]
   2da0e:	689a      	ldr	r2, [r3, #8]
   2da10:	6a3b      	ldr	r3, [r7, #32]
   2da12:	18d2      	adds	r2, r2, r3
   2da14:	68fb      	ldr	r3, [r7, #12]
   2da16:	609a      	str	r2, [r3, #8]
   2da18:	683b      	ldr	r3, [r7, #0]
   2da1a:	681a      	ldr	r2, [r3, #0]
   2da1c:	6a3b      	ldr	r3, [r7, #32]
   2da1e:	18d2      	adds	r2, r2, r3
   2da20:	683b      	ldr	r3, [r7, #0]
   2da22:	601a      	str	r2, [r3, #0]
   2da24:	687a      	ldr	r2, [r7, #4]
   2da26:	6a3b      	ldr	r3, [r7, #32]
   2da28:	1ad3      	subs	r3, r2, r3
   2da2a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2da2c:	687b      	ldr	r3, [r7, #4]
   2da2e:	2b00      	cmp	r3, #0
   2da30:	d000      	beq.n	2da34 <f_write+0x308>
   2da32:	e6b7      	b.n	2d7a4 <f_write+0x78>
   2da34:	e000      	b.n	2da38 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2da36:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2da38:	68fb      	ldr	r3, [r7, #12]
   2da3a:	689a      	ldr	r2, [r3, #8]
   2da3c:	68fb      	ldr	r3, [r7, #12]
   2da3e:	68db      	ldr	r3, [r3, #12]
   2da40:	429a      	cmp	r2, r3
   2da42:	d903      	bls.n	2da4c <f_write+0x320>
   2da44:	68fb      	ldr	r3, [r7, #12]
   2da46:	689a      	ldr	r2, [r3, #8]
   2da48:	68fb      	ldr	r3, [r7, #12]
   2da4a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2da4c:	68fb      	ldr	r3, [r7, #12]
   2da4e:	799b      	ldrb	r3, [r3, #6]
   2da50:	2220      	movs	r2, #32
   2da52:	4313      	orrs	r3, r2
   2da54:	b2da      	uxtb	r2, r3
   2da56:	68fb      	ldr	r3, [r7, #12]
   2da58:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2da5a:	2300      	movs	r3, #0
}
   2da5c:	0018      	movs	r0, r3
   2da5e:	46bd      	mov	sp, r7
   2da60:	b00b      	add	sp, #44	; 0x2c
   2da62:	bd90      	pop	{r4, r7, pc}
   2da64:	0002d151 	.word	0x0002d151
   2da68:	0002b7dd 	.word	0x0002b7dd
   2da6c:	0002b0d5 	.word	0x0002b0d5
   2da70:	0002b335 	.word	0x0002b335
   2da74:	0002adc1 	.word	0x0002adc1
   2da78:	0002aff1 	.word	0x0002aff1

0002da7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2da7c:	b590      	push	{r4, r7, lr}
   2da7e:	b087      	sub	sp, #28
   2da80:	af00      	add	r7, sp, #0
   2da82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2da84:	687b      	ldr	r3, [r7, #4]
   2da86:	681a      	ldr	r2, [r3, #0]
   2da88:	687b      	ldr	r3, [r7, #4]
   2da8a:	889b      	ldrh	r3, [r3, #4]
   2da8c:	2117      	movs	r1, #23
   2da8e:	187c      	adds	r4, r7, r1
   2da90:	0019      	movs	r1, r3
   2da92:	0010      	movs	r0, r2
   2da94:	4b55      	ldr	r3, [pc, #340]	; (2dbec <f_sync+0x170>)
   2da96:	4798      	blx	r3
   2da98:	0003      	movs	r3, r0
   2da9a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2da9c:	2317      	movs	r3, #23
   2da9e:	18fb      	adds	r3, r7, r3
   2daa0:	781b      	ldrb	r3, [r3, #0]
   2daa2:	2b00      	cmp	r3, #0
   2daa4:	d000      	beq.n	2daa8 <f_sync+0x2c>
   2daa6:	e09a      	b.n	2dbde <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2daa8:	687b      	ldr	r3, [r7, #4]
   2daaa:	799b      	ldrb	r3, [r3, #6]
   2daac:	001a      	movs	r2, r3
   2daae:	2320      	movs	r3, #32
   2dab0:	4013      	ands	r3, r2
   2dab2:	d100      	bne.n	2dab6 <f_sync+0x3a>
   2dab4:	e093      	b.n	2dbde <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2dab6:	687b      	ldr	r3, [r7, #4]
   2dab8:	681a      	ldr	r2, [r3, #0]
   2daba:	687b      	ldr	r3, [r7, #4]
   2dabc:	69db      	ldr	r3, [r3, #28]
   2dabe:	2117      	movs	r1, #23
   2dac0:	187c      	adds	r4, r7, r1
   2dac2:	0019      	movs	r1, r3
   2dac4:	0010      	movs	r0, r2
   2dac6:	4b4a      	ldr	r3, [pc, #296]	; (2dbf0 <f_sync+0x174>)
   2dac8:	4798      	blx	r3
   2daca:	0003      	movs	r3, r0
   2dacc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2dace:	2317      	movs	r3, #23
   2dad0:	18fb      	adds	r3, r7, r3
   2dad2:	781b      	ldrb	r3, [r3, #0]
   2dad4:	2b00      	cmp	r3, #0
   2dad6:	d000      	beq.n	2dada <f_sync+0x5e>
   2dad8:	e081      	b.n	2dbde <f_sync+0x162>
				dir = fp->dir_ptr;
   2dada:	687b      	ldr	r3, [r7, #4]
   2dadc:	6a1b      	ldr	r3, [r3, #32]
   2dade:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2dae0:	693b      	ldr	r3, [r7, #16]
   2dae2:	330b      	adds	r3, #11
   2dae4:	693a      	ldr	r2, [r7, #16]
   2dae6:	320b      	adds	r2, #11
   2dae8:	7812      	ldrb	r2, [r2, #0]
   2daea:	2120      	movs	r1, #32
   2daec:	430a      	orrs	r2, r1
   2daee:	b2d2      	uxtb	r2, r2
   2daf0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2daf2:	693b      	ldr	r3, [r7, #16]
   2daf4:	331c      	adds	r3, #28
   2daf6:	001a      	movs	r2, r3
   2daf8:	687b      	ldr	r3, [r7, #4]
   2dafa:	68db      	ldr	r3, [r3, #12]
   2dafc:	b2db      	uxtb	r3, r3
   2dafe:	7013      	strb	r3, [r2, #0]
   2db00:	693b      	ldr	r3, [r7, #16]
   2db02:	331d      	adds	r3, #29
   2db04:	001a      	movs	r2, r3
   2db06:	687b      	ldr	r3, [r7, #4]
   2db08:	68db      	ldr	r3, [r3, #12]
   2db0a:	b29b      	uxth	r3, r3
   2db0c:	0a1b      	lsrs	r3, r3, #8
   2db0e:	b29b      	uxth	r3, r3
   2db10:	b2db      	uxtb	r3, r3
   2db12:	7013      	strb	r3, [r2, #0]
   2db14:	693b      	ldr	r3, [r7, #16]
   2db16:	331e      	adds	r3, #30
   2db18:	001a      	movs	r2, r3
   2db1a:	687b      	ldr	r3, [r7, #4]
   2db1c:	68db      	ldr	r3, [r3, #12]
   2db1e:	0c1b      	lsrs	r3, r3, #16
   2db20:	b2db      	uxtb	r3, r3
   2db22:	7013      	strb	r3, [r2, #0]
   2db24:	693b      	ldr	r3, [r7, #16]
   2db26:	331f      	adds	r3, #31
   2db28:	001a      	movs	r2, r3
   2db2a:	687b      	ldr	r3, [r7, #4]
   2db2c:	68db      	ldr	r3, [r3, #12]
   2db2e:	0e1b      	lsrs	r3, r3, #24
   2db30:	b2db      	uxtb	r3, r3
   2db32:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2db34:	693b      	ldr	r3, [r7, #16]
   2db36:	331a      	adds	r3, #26
   2db38:	001a      	movs	r2, r3
   2db3a:	687b      	ldr	r3, [r7, #4]
   2db3c:	691b      	ldr	r3, [r3, #16]
   2db3e:	b2db      	uxtb	r3, r3
   2db40:	7013      	strb	r3, [r2, #0]
   2db42:	693b      	ldr	r3, [r7, #16]
   2db44:	331b      	adds	r3, #27
   2db46:	001a      	movs	r2, r3
   2db48:	687b      	ldr	r3, [r7, #4]
   2db4a:	691b      	ldr	r3, [r3, #16]
   2db4c:	b29b      	uxth	r3, r3
   2db4e:	0a1b      	lsrs	r3, r3, #8
   2db50:	b29b      	uxth	r3, r3
   2db52:	b2db      	uxtb	r3, r3
   2db54:	7013      	strb	r3, [r2, #0]
   2db56:	693b      	ldr	r3, [r7, #16]
   2db58:	3314      	adds	r3, #20
   2db5a:	001a      	movs	r2, r3
   2db5c:	687b      	ldr	r3, [r7, #4]
   2db5e:	691b      	ldr	r3, [r3, #16]
   2db60:	0c1b      	lsrs	r3, r3, #16
   2db62:	b2db      	uxtb	r3, r3
   2db64:	7013      	strb	r3, [r2, #0]
   2db66:	693b      	ldr	r3, [r7, #16]
   2db68:	3315      	adds	r3, #21
   2db6a:	001a      	movs	r2, r3
   2db6c:	687b      	ldr	r3, [r7, #4]
   2db6e:	691b      	ldr	r3, [r3, #16]
   2db70:	0c1b      	lsrs	r3, r3, #16
   2db72:	b29b      	uxth	r3, r3
   2db74:	0a1b      	lsrs	r3, r3, #8
   2db76:	b29b      	uxth	r3, r3
   2db78:	b2db      	uxtb	r3, r3
   2db7a:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2db7c:	4b1d      	ldr	r3, [pc, #116]	; (2dbf4 <f_sync+0x178>)
   2db7e:	4798      	blx	r3
   2db80:	0003      	movs	r3, r0
   2db82:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2db84:	693b      	ldr	r3, [r7, #16]
   2db86:	3316      	adds	r3, #22
   2db88:	68fa      	ldr	r2, [r7, #12]
   2db8a:	b2d2      	uxtb	r2, r2
   2db8c:	701a      	strb	r2, [r3, #0]
   2db8e:	693b      	ldr	r3, [r7, #16]
   2db90:	3317      	adds	r3, #23
   2db92:	68fa      	ldr	r2, [r7, #12]
   2db94:	b292      	uxth	r2, r2
   2db96:	0a12      	lsrs	r2, r2, #8
   2db98:	b292      	uxth	r2, r2
   2db9a:	b2d2      	uxtb	r2, r2
   2db9c:	701a      	strb	r2, [r3, #0]
   2db9e:	693b      	ldr	r3, [r7, #16]
   2dba0:	3318      	adds	r3, #24
   2dba2:	68fa      	ldr	r2, [r7, #12]
   2dba4:	0c12      	lsrs	r2, r2, #16
   2dba6:	b2d2      	uxtb	r2, r2
   2dba8:	701a      	strb	r2, [r3, #0]
   2dbaa:	693b      	ldr	r3, [r7, #16]
   2dbac:	3319      	adds	r3, #25
   2dbae:	68fa      	ldr	r2, [r7, #12]
   2dbb0:	0e12      	lsrs	r2, r2, #24
   2dbb2:	b2d2      	uxtb	r2, r2
   2dbb4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2dbb6:	687b      	ldr	r3, [r7, #4]
   2dbb8:	799b      	ldrb	r3, [r3, #6]
   2dbba:	2220      	movs	r2, #32
   2dbbc:	4393      	bics	r3, r2
   2dbbe:	b2da      	uxtb	r2, r3
   2dbc0:	687b      	ldr	r3, [r7, #4]
   2dbc2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2dbc4:	687b      	ldr	r3, [r7, #4]
   2dbc6:	681b      	ldr	r3, [r3, #0]
   2dbc8:	2201      	movs	r2, #1
   2dbca:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2dbcc:	687b      	ldr	r3, [r7, #4]
   2dbce:	681b      	ldr	r3, [r3, #0]
   2dbd0:	2217      	movs	r2, #23
   2dbd2:	18bc      	adds	r4, r7, r2
   2dbd4:	0018      	movs	r0, r3
   2dbd6:	4b08      	ldr	r3, [pc, #32]	; (2dbf8 <f_sync+0x17c>)
   2dbd8:	4798      	blx	r3
   2dbda:	0003      	movs	r3, r0
   2dbdc:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2dbde:	2317      	movs	r3, #23
   2dbe0:	18fb      	adds	r3, r7, r3
   2dbe2:	781b      	ldrb	r3, [r3, #0]
}
   2dbe4:	0018      	movs	r0, r3
   2dbe6:	46bd      	mov	sp, r7
   2dbe8:	b007      	add	sp, #28
   2dbea:	bd90      	pop	{r4, r7, pc}
   2dbec:	0002d151 	.word	0x0002d151
   2dbf0:	0002b0d5 	.word	0x0002b0d5
   2dbf4:	0002af91 	.word	0x0002af91
   2dbf8:	0002b19d 	.word	0x0002b19d

0002dbfc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2dbfc:	b590      	push	{r4, r7, lr}
   2dbfe:	b085      	sub	sp, #20
   2dc00:	af00      	add	r7, sp, #0
   2dc02:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2dc04:	230f      	movs	r3, #15
   2dc06:	18fc      	adds	r4, r7, r3
   2dc08:	687b      	ldr	r3, [r7, #4]
   2dc0a:	0018      	movs	r0, r3
   2dc0c:	4b09      	ldr	r3, [pc, #36]	; (2dc34 <f_close+0x38>)
   2dc0e:	4798      	blx	r3
   2dc10:	0003      	movs	r3, r0
   2dc12:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2dc14:	230f      	movs	r3, #15
   2dc16:	18fb      	adds	r3, r7, r3
   2dc18:	781b      	ldrb	r3, [r3, #0]
   2dc1a:	2b00      	cmp	r3, #0
   2dc1c:	d102      	bne.n	2dc24 <f_close+0x28>
   2dc1e:	687b      	ldr	r3, [r7, #4]
   2dc20:	2200      	movs	r2, #0
   2dc22:	601a      	str	r2, [r3, #0]
	return res;
   2dc24:	230f      	movs	r3, #15
   2dc26:	18fb      	adds	r3, r7, r3
   2dc28:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2dc2a:	0018      	movs	r0, r3
   2dc2c:	46bd      	mov	sp, r7
   2dc2e:	b005      	add	sp, #20
   2dc30:	bd90      	pop	{r4, r7, pc}
   2dc32:	46c0      	nop			; (mov r8, r8)
   2dc34:	0002da7d 	.word	0x0002da7d

0002dc38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2dc38:	b580      	push	{r7, lr}
   2dc3a:	b084      	sub	sp, #16
   2dc3c:	af00      	add	r7, sp, #0
   2dc3e:	0002      	movs	r2, r0
   2dc40:	6039      	str	r1, [r7, #0]
   2dc42:	1dbb      	adds	r3, r7, #6
   2dc44:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2dc46:	1dbb      	adds	r3, r7, #6
   2dc48:	881b      	ldrh	r3, [r3, #0]
   2dc4a:	2b7f      	cmp	r3, #127	; 0x7f
   2dc4c:	d805      	bhi.n	2dc5a <ff_convert+0x22>
		c = src;
   2dc4e:	230e      	movs	r3, #14
   2dc50:	18fb      	adds	r3, r7, r3
   2dc52:	1dba      	adds	r2, r7, #6
   2dc54:	8812      	ldrh	r2, [r2, #0]
   2dc56:	801a      	strh	r2, [r3, #0]
   2dc58:	e03a      	b.n	2dcd0 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2dc5a:	683b      	ldr	r3, [r7, #0]
   2dc5c:	2b00      	cmp	r3, #0
   2dc5e:	d010      	beq.n	2dc82 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2dc60:	1dbb      	adds	r3, r7, #6
   2dc62:	881b      	ldrh	r3, [r3, #0]
   2dc64:	2bff      	cmp	r3, #255	; 0xff
   2dc66:	d807      	bhi.n	2dc78 <ff_convert+0x40>
   2dc68:	1dbb      	adds	r3, r7, #6
   2dc6a:	881b      	ldrh	r3, [r3, #0]
   2dc6c:	3b80      	subs	r3, #128	; 0x80
   2dc6e:	001a      	movs	r2, r3
   2dc70:	4b1b      	ldr	r3, [pc, #108]	; (2dce0 <ff_convert+0xa8>)
   2dc72:	0052      	lsls	r2, r2, #1
   2dc74:	5ad2      	ldrh	r2, [r2, r3]
   2dc76:	e000      	b.n	2dc7a <ff_convert+0x42>
   2dc78:	2200      	movs	r2, #0
   2dc7a:	230e      	movs	r3, #14
   2dc7c:	18fb      	adds	r3, r7, r3
   2dc7e:	801a      	strh	r2, [r3, #0]
   2dc80:	e026      	b.n	2dcd0 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2dc82:	230e      	movs	r3, #14
   2dc84:	18fb      	adds	r3, r7, r3
   2dc86:	2200      	movs	r2, #0
   2dc88:	801a      	strh	r2, [r3, #0]
   2dc8a:	e010      	b.n	2dcae <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2dc8c:	230e      	movs	r3, #14
   2dc8e:	18fb      	adds	r3, r7, r3
   2dc90:	881a      	ldrh	r2, [r3, #0]
   2dc92:	4b13      	ldr	r3, [pc, #76]	; (2dce0 <ff_convert+0xa8>)
   2dc94:	0052      	lsls	r2, r2, #1
   2dc96:	5ad3      	ldrh	r3, [r2, r3]
   2dc98:	1dba      	adds	r2, r7, #6
   2dc9a:	8812      	ldrh	r2, [r2, #0]
   2dc9c:	429a      	cmp	r2, r3
   2dc9e:	d00c      	beq.n	2dcba <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2dca0:	230e      	movs	r3, #14
   2dca2:	18fb      	adds	r3, r7, r3
   2dca4:	881a      	ldrh	r2, [r3, #0]
   2dca6:	230e      	movs	r3, #14
   2dca8:	18fb      	adds	r3, r7, r3
   2dcaa:	3201      	adds	r2, #1
   2dcac:	801a      	strh	r2, [r3, #0]
   2dcae:	230e      	movs	r3, #14
   2dcb0:	18fb      	adds	r3, r7, r3
   2dcb2:	881b      	ldrh	r3, [r3, #0]
   2dcb4:	2b7f      	cmp	r3, #127	; 0x7f
   2dcb6:	d9e9      	bls.n	2dc8c <ff_convert+0x54>
   2dcb8:	e000      	b.n	2dcbc <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2dcba:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2dcbc:	230e      	movs	r3, #14
   2dcbe:	18fb      	adds	r3, r7, r3
   2dcc0:	881b      	ldrh	r3, [r3, #0]
   2dcc2:	3380      	adds	r3, #128	; 0x80
   2dcc4:	b29a      	uxth	r2, r3
   2dcc6:	230e      	movs	r3, #14
   2dcc8:	18fb      	adds	r3, r7, r3
   2dcca:	21ff      	movs	r1, #255	; 0xff
   2dccc:	400a      	ands	r2, r1
   2dcce:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2dcd0:	230e      	movs	r3, #14
   2dcd2:	18fb      	adds	r3, r7, r3
   2dcd4:	881b      	ldrh	r3, [r3, #0]
}
   2dcd6:	0018      	movs	r0, r3
   2dcd8:	46bd      	mov	sp, r7
   2dcda:	b004      	add	sp, #16
   2dcdc:	bd80      	pop	{r7, pc}
   2dcde:	46c0      	nop			; (mov r8, r8)
   2dce0:	00038f70 	.word	0x00038f70

0002dce4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2dce4:	b580      	push	{r7, lr}
   2dce6:	b084      	sub	sp, #16
   2dce8:	af00      	add	r7, sp, #0
   2dcea:	0002      	movs	r2, r0
   2dcec:	1dbb      	adds	r3, r7, #6
   2dcee:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2dcf0:	2300      	movs	r3, #0
   2dcf2:	60fb      	str	r3, [r7, #12]
   2dcf4:	e002      	b.n	2dcfc <ff_wtoupper+0x18>
   2dcf6:	68fb      	ldr	r3, [r7, #12]
   2dcf8:	3301      	adds	r3, #1
   2dcfa:	60fb      	str	r3, [r7, #12]
   2dcfc:	4b0f      	ldr	r3, [pc, #60]	; (2dd3c <ff_wtoupper+0x58>)
   2dcfe:	68fa      	ldr	r2, [r7, #12]
   2dd00:	0052      	lsls	r2, r2, #1
   2dd02:	5ad3      	ldrh	r3, [r2, r3]
   2dd04:	2b00      	cmp	r3, #0
   2dd06:	d007      	beq.n	2dd18 <ff_wtoupper+0x34>
   2dd08:	4b0c      	ldr	r3, [pc, #48]	; (2dd3c <ff_wtoupper+0x58>)
   2dd0a:	68fa      	ldr	r2, [r7, #12]
   2dd0c:	0052      	lsls	r2, r2, #1
   2dd0e:	5ad3      	ldrh	r3, [r2, r3]
   2dd10:	1dba      	adds	r2, r7, #6
   2dd12:	8812      	ldrh	r2, [r2, #0]
   2dd14:	429a      	cmp	r2, r3
   2dd16:	d1ee      	bne.n	2dcf6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2dd18:	4b08      	ldr	r3, [pc, #32]	; (2dd3c <ff_wtoupper+0x58>)
   2dd1a:	68fa      	ldr	r2, [r7, #12]
   2dd1c:	0052      	lsls	r2, r2, #1
   2dd1e:	5ad3      	ldrh	r3, [r2, r3]
   2dd20:	2b00      	cmp	r3, #0
   2dd22:	d004      	beq.n	2dd2e <ff_wtoupper+0x4a>
   2dd24:	4b06      	ldr	r3, [pc, #24]	; (2dd40 <ff_wtoupper+0x5c>)
   2dd26:	68fa      	ldr	r2, [r7, #12]
   2dd28:	0052      	lsls	r2, r2, #1
   2dd2a:	5ad3      	ldrh	r3, [r2, r3]
   2dd2c:	e001      	b.n	2dd32 <ff_wtoupper+0x4e>
   2dd2e:	1dbb      	adds	r3, r7, #6
   2dd30:	881b      	ldrh	r3, [r3, #0]
}
   2dd32:	0018      	movs	r0, r3
   2dd34:	46bd      	mov	sp, r7
   2dd36:	b004      	add	sp, #16
   2dd38:	bd80      	pop	{r7, pc}
   2dd3a:	46c0      	nop			; (mov r8, r8)
   2dd3c:	00039070 	.word	0x00039070
   2dd40:	00039250 	.word	0x00039250

0002dd44 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2dd44:	b580      	push	{r7, lr}
   2dd46:	b084      	sub	sp, #16
   2dd48:	af00      	add	r7, sp, #0
   2dd4a:	60f8      	str	r0, [r7, #12]
   2dd4c:	60b9      	str	r1, [r7, #8]
   2dd4e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2dd50:	68fb      	ldr	r3, [r7, #12]
   2dd52:	68ba      	ldr	r2, [r7, #8]
   2dd54:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2dd56:	68fb      	ldr	r3, [r7, #12]
   2dd58:	687a      	ldr	r2, [r7, #4]
   2dd5a:	601a      	str	r2, [r3, #0]
}
   2dd5c:	46c0      	nop			; (mov r8, r8)
   2dd5e:	46bd      	mov	sp, r7
   2dd60:	b004      	add	sp, #16
   2dd62:	bd80      	pop	{r7, pc}

0002dd64 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2dd64:	b580      	push	{r7, lr}
   2dd66:	b082      	sub	sp, #8
   2dd68:	af00      	add	r7, sp, #0
   2dd6a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2dd6c:	687b      	ldr	r3, [r7, #4]
   2dd6e:	681b      	ldr	r3, [r3, #0]
   2dd70:	4a07      	ldr	r2, [pc, #28]	; (2dd90 <getNextPacketId+0x2c>)
   2dd72:	4293      	cmp	r3, r2
   2dd74:	d003      	beq.n	2dd7e <getNextPacketId+0x1a>
   2dd76:	687b      	ldr	r3, [r7, #4]
   2dd78:	681b      	ldr	r3, [r3, #0]
   2dd7a:	1c5a      	adds	r2, r3, #1
   2dd7c:	e000      	b.n	2dd80 <getNextPacketId+0x1c>
   2dd7e:	2201      	movs	r2, #1
   2dd80:	687b      	ldr	r3, [r7, #4]
   2dd82:	601a      	str	r2, [r3, #0]
   2dd84:	687b      	ldr	r3, [r7, #4]
   2dd86:	681b      	ldr	r3, [r3, #0]
}
   2dd88:	0018      	movs	r0, r3
   2dd8a:	46bd      	mov	sp, r7
   2dd8c:	b002      	add	sp, #8
   2dd8e:	bd80      	pop	{r7, pc}
   2dd90:	0000ffff 	.word	0x0000ffff

0002dd94 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2dd94:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd96:	b087      	sub	sp, #28
   2dd98:	af00      	add	r7, sp, #0
   2dd9a:	60f8      	str	r0, [r7, #12]
   2dd9c:	60b9      	str	r1, [r7, #8]
   2dd9e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2dda0:	2301      	movs	r3, #1
   2dda2:	425b      	negs	r3, r3
   2dda4:	617b      	str	r3, [r7, #20]
        sent = 0;
   2dda6:	2300      	movs	r3, #0
   2dda8:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2ddaa:	e01a      	b.n	2dde2 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2ddac:	68fb      	ldr	r3, [r7, #12]
   2ddae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ddb0:	68dc      	ldr	r4, [r3, #12]
   2ddb2:	68fb      	ldr	r3, [r7, #12]
   2ddb4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ddb6:	68fb      	ldr	r3, [r7, #12]
   2ddb8:	691a      	ldr	r2, [r3, #16]
   2ddba:	693b      	ldr	r3, [r7, #16]
   2ddbc:	18d6      	adds	r6, r2, r3
   2ddbe:	687b      	ldr	r3, [r7, #4]
   2ddc0:	0018      	movs	r0, r3
   2ddc2:	4b1a      	ldr	r3, [pc, #104]	; (2de2c <sendPacket+0x98>)
   2ddc4:	4798      	blx	r3
   2ddc6:	0003      	movs	r3, r0
   2ddc8:	68ba      	ldr	r2, [r7, #8]
   2ddca:	0031      	movs	r1, r6
   2ddcc:	0028      	movs	r0, r5
   2ddce:	47a0      	blx	r4
   2ddd0:	0003      	movs	r3, r0
   2ddd2:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2ddd4:	697b      	ldr	r3, [r7, #20]
   2ddd6:	2b00      	cmp	r3, #0
   2ddd8:	db0e      	blt.n	2ddf8 <sendPacket+0x64>
            break;
        sent += rc;
   2ddda:	693a      	ldr	r2, [r7, #16]
   2dddc:	697b      	ldr	r3, [r7, #20]
   2ddde:	18d3      	adds	r3, r2, r3
   2dde0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2dde2:	693a      	ldr	r2, [r7, #16]
   2dde4:	68bb      	ldr	r3, [r7, #8]
   2dde6:	429a      	cmp	r2, r3
   2dde8:	da07      	bge.n	2ddfa <sendPacket+0x66>
   2ddea:	687b      	ldr	r3, [r7, #4]
   2ddec:	0018      	movs	r0, r3
   2ddee:	4b10      	ldr	r3, [pc, #64]	; (2de30 <sendPacket+0x9c>)
   2ddf0:	4798      	blx	r3
   2ddf2:	1e03      	subs	r3, r0, #0
   2ddf4:	d0da      	beq.n	2ddac <sendPacket+0x18>
   2ddf6:	e000      	b.n	2ddfa <sendPacket+0x66>
            break;
   2ddf8:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2ddfa:	693a      	ldr	r2, [r7, #16]
   2ddfc:	68bb      	ldr	r3, [r7, #8]
   2ddfe:	429a      	cmp	r2, r3
   2de00:	d10b      	bne.n	2de1a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2de02:	68fb      	ldr	r3, [r7, #12]
   2de04:	3354      	adds	r3, #84	; 0x54
   2de06:	001a      	movs	r2, r3
   2de08:	68fb      	ldr	r3, [r7, #12]
   2de0a:	699b      	ldr	r3, [r3, #24]
   2de0c:	0019      	movs	r1, r3
   2de0e:	0010      	movs	r0, r2
   2de10:	4b08      	ldr	r3, [pc, #32]	; (2de34 <sendPacket+0xa0>)
   2de12:	4798      	blx	r3
        rc = SUCCESS;
   2de14:	2300      	movs	r3, #0
   2de16:	617b      	str	r3, [r7, #20]
   2de18:	e002      	b.n	2de20 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2de1a:	2301      	movs	r3, #1
   2de1c:	425b      	negs	r3, r3
   2de1e:	617b      	str	r3, [r7, #20]
    return rc;
   2de20:	697b      	ldr	r3, [r7, #20]
}
   2de22:	0018      	movs	r0, r3
   2de24:	46bd      	mov	sp, r7
   2de26:	b007      	add	sp, #28
   2de28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2de2a:	46c0      	nop			; (mov r8, r8)
   2de2c:	0002ebf5 	.word	0x0002ebf5
   2de30:	0002eb79 	.word	0x0002eb79
   2de34:	0002ebcd 	.word	0x0002ebcd

0002de38 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2de38:	b580      	push	{r7, lr}
   2de3a:	b086      	sub	sp, #24
   2de3c:	af00      	add	r7, sp, #0
   2de3e:	60f8      	str	r0, [r7, #12]
   2de40:	60b9      	str	r1, [r7, #8]
   2de42:	607a      	str	r2, [r7, #4]
   2de44:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2de46:	68fb      	ldr	r3, [r7, #12]
   2de48:	68ba      	ldr	r2, [r7, #8]
   2de4a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2de4c:	2300      	movs	r3, #0
   2de4e:	617b      	str	r3, [r7, #20]
   2de50:	e00a      	b.n	2de68 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2de52:	68fa      	ldr	r2, [r7, #12]
   2de54:	697b      	ldr	r3, [r7, #20]
   2de56:	3304      	adds	r3, #4
   2de58:	00db      	lsls	r3, r3, #3
   2de5a:	18d3      	adds	r3, r2, r3
   2de5c:	3304      	adds	r3, #4
   2de5e:	2200      	movs	r2, #0
   2de60:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2de62:	697b      	ldr	r3, [r7, #20]
   2de64:	3301      	adds	r3, #1
   2de66:	617b      	str	r3, [r7, #20]
   2de68:	697b      	ldr	r3, [r7, #20]
   2de6a:	2b04      	cmp	r3, #4
   2de6c:	ddf1      	ble.n	2de52 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2de6e:	68fb      	ldr	r3, [r7, #12]
   2de70:	687a      	ldr	r2, [r7, #4]
   2de72:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2de74:	68fb      	ldr	r3, [r7, #12]
   2de76:	683a      	ldr	r2, [r7, #0]
   2de78:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2de7a:	68fb      	ldr	r3, [r7, #12]
   2de7c:	6a3a      	ldr	r2, [r7, #32]
   2de7e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2de80:	68fb      	ldr	r3, [r7, #12]
   2de82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2de84:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2de86:	68fb      	ldr	r3, [r7, #12]
   2de88:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2de8a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2de8c:	68fb      	ldr	r3, [r7, #12]
   2de8e:	2200      	movs	r2, #0
   2de90:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2de92:	68fb      	ldr	r3, [r7, #12]
   2de94:	2200      	movs	r2, #0
   2de96:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2de98:	68fb      	ldr	r3, [r7, #12]
   2de9a:	2200      	movs	r2, #0
   2de9c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2de9e:	68fb      	ldr	r3, [r7, #12]
   2dea0:	2201      	movs	r2, #1
   2dea2:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2dea4:	68fb      	ldr	r3, [r7, #12]
   2dea6:	3354      	adds	r3, #84	; 0x54
   2dea8:	0018      	movs	r0, r3
   2deaa:	4b03      	ldr	r3, [pc, #12]	; (2deb8 <MQTTClientInit+0x80>)
   2deac:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2deae:	46c0      	nop			; (mov r8, r8)
   2deb0:	46bd      	mov	sp, r7
   2deb2:	b006      	add	sp, #24
   2deb4:	bd80      	pop	{r7, pc}
   2deb6:	46c0      	nop			; (mov r8, r8)
   2deb8:	0002ec1d 	.word	0x0002ec1d

0002debc <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2debc:	b590      	push	{r4, r7, lr}
   2debe:	b08b      	sub	sp, #44	; 0x2c
   2dec0:	af00      	add	r7, sp, #0
   2dec2:	60f8      	str	r0, [r7, #12]
   2dec4:	60b9      	str	r1, [r7, #8]
   2dec6:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2dec8:	2301      	movs	r3, #1
   2deca:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2decc:	2300      	movs	r3, #0
   2dece:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2ded0:	2304      	movs	r3, #4
   2ded2:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2ded4:	68bb      	ldr	r3, [r7, #8]
   2ded6:	2200      	movs	r2, #0
   2ded8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2deda:	2301      	movs	r3, #1
   2dedc:	425b      	negs	r3, r3
   2dede:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2dee0:	6a3b      	ldr	r3, [r7, #32]
   2dee2:	3301      	adds	r3, #1
   2dee4:	623b      	str	r3, [r7, #32]
   2dee6:	6a3a      	ldr	r2, [r7, #32]
   2dee8:	69fb      	ldr	r3, [r7, #28]
   2deea:	429a      	cmp	r2, r3
   2deec:	dd03      	ble.n	2def6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2deee:	2301      	movs	r3, #1
   2def0:	425b      	negs	r3, r3
   2def2:	61bb      	str	r3, [r7, #24]
            goto exit;
   2def4:	e026      	b.n	2df44 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2def6:	68fb      	ldr	r3, [r7, #12]
   2def8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2defa:	689c      	ldr	r4, [r3, #8]
   2defc:	68fb      	ldr	r3, [r7, #12]
   2defe:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2df00:	687b      	ldr	r3, [r7, #4]
   2df02:	2217      	movs	r2, #23
   2df04:	18b9      	adds	r1, r7, r2
   2df06:	2201      	movs	r2, #1
   2df08:	47a0      	blx	r4
   2df0a:	0003      	movs	r3, r0
   2df0c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2df0e:	69bb      	ldr	r3, [r7, #24]
   2df10:	2b01      	cmp	r3, #1
   2df12:	d116      	bne.n	2df42 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2df14:	68bb      	ldr	r3, [r7, #8]
   2df16:	681a      	ldr	r2, [r3, #0]
   2df18:	2317      	movs	r3, #23
   2df1a:	18fb      	adds	r3, r7, r3
   2df1c:	781b      	ldrb	r3, [r3, #0]
   2df1e:	0019      	movs	r1, r3
   2df20:	237f      	movs	r3, #127	; 0x7f
   2df22:	400b      	ands	r3, r1
   2df24:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2df26:	434b      	muls	r3, r1
   2df28:	18d2      	adds	r2, r2, r3
   2df2a:	68bb      	ldr	r3, [r7, #8]
   2df2c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2df30:	01db      	lsls	r3, r3, #7
   2df32:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2df34:	2317      	movs	r3, #23
   2df36:	18fb      	adds	r3, r7, r3
   2df38:	781b      	ldrb	r3, [r3, #0]
   2df3a:	b25b      	sxtb	r3, r3
   2df3c:	2b00      	cmp	r3, #0
   2df3e:	dbcc      	blt.n	2deda <decodePacket+0x1e>
   2df40:	e000      	b.n	2df44 <decodePacket+0x88>
            goto exit;
   2df42:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2df44:	6a3b      	ldr	r3, [r7, #32]
}
   2df46:	0018      	movs	r0, r3
   2df48:	46bd      	mov	sp, r7
   2df4a:	b00b      	add	sp, #44	; 0x2c
   2df4c:	bd90      	pop	{r4, r7, pc}
	...

0002df50 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2df50:	b5f0      	push	{r4, r5, r6, r7, lr}
   2df52:	46c6      	mov	lr, r8
   2df54:	b500      	push	{lr}
   2df56:	b086      	sub	sp, #24
   2df58:	af00      	add	r7, sp, #0
   2df5a:	6078      	str	r0, [r7, #4]
   2df5c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2df5e:	2301      	movs	r3, #1
   2df60:	425b      	negs	r3, r3
   2df62:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2df64:	2300      	movs	r3, #0
   2df66:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2df68:	2300      	movs	r3, #0
   2df6a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2df6c:	2300      	movs	r3, #0
   2df6e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2df70:	687b      	ldr	r3, [r7, #4]
   2df72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2df74:	689c      	ldr	r4, [r3, #8]
   2df76:	687b      	ldr	r3, [r7, #4]
   2df78:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2df7a:	687b      	ldr	r3, [r7, #4]
   2df7c:	695e      	ldr	r6, [r3, #20]
   2df7e:	683b      	ldr	r3, [r7, #0]
   2df80:	0018      	movs	r0, r3
   2df82:	4b2b      	ldr	r3, [pc, #172]	; (2e030 <readPacket+0xe0>)
   2df84:	4798      	blx	r3
   2df86:	0003      	movs	r3, r0
   2df88:	2201      	movs	r2, #1
   2df8a:	0031      	movs	r1, r6
   2df8c:	0028      	movs	r0, r5
   2df8e:	47a0      	blx	r4
   2df90:	0003      	movs	r3, r0
   2df92:	2b01      	cmp	r3, #1
   2df94:	d141      	bne.n	2e01a <readPacket+0xca>
        goto exit;

    len = 1;
   2df96:	2301      	movs	r3, #1
   2df98:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2df9a:	683b      	ldr	r3, [r7, #0]
   2df9c:	0018      	movs	r0, r3
   2df9e:	4b24      	ldr	r3, [pc, #144]	; (2e030 <readPacket+0xe0>)
   2dfa0:	4798      	blx	r3
   2dfa2:	0002      	movs	r2, r0
   2dfa4:	2308      	movs	r3, #8
   2dfa6:	18f9      	adds	r1, r7, r3
   2dfa8:	687b      	ldr	r3, [r7, #4]
   2dfaa:	0018      	movs	r0, r3
   2dfac:	4b21      	ldr	r3, [pc, #132]	; (2e034 <readPacket+0xe4>)
   2dfae:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2dfb0:	687b      	ldr	r3, [r7, #4]
   2dfb2:	695b      	ldr	r3, [r3, #20]
   2dfb4:	3301      	adds	r3, #1
   2dfb6:	68ba      	ldr	r2, [r7, #8]
   2dfb8:	0011      	movs	r1, r2
   2dfba:	0018      	movs	r0, r3
   2dfbc:	4b1e      	ldr	r3, [pc, #120]	; (2e038 <readPacket+0xe8>)
   2dfbe:	4798      	blx	r3
   2dfc0:	0002      	movs	r2, r0
   2dfc2:	693b      	ldr	r3, [r7, #16]
   2dfc4:	189b      	adds	r3, r3, r2
   2dfc6:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2dfc8:	68bb      	ldr	r3, [r7, #8]
   2dfca:	2b00      	cmp	r3, #0
   2dfcc:	dd17      	ble.n	2dffe <readPacket+0xae>
   2dfce:	687b      	ldr	r3, [r7, #4]
   2dfd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2dfd2:	689c      	ldr	r4, [r3, #8]
   2dfd4:	687b      	ldr	r3, [r7, #4]
   2dfd6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2dfd8:	687b      	ldr	r3, [r7, #4]
   2dfda:	695a      	ldr	r2, [r3, #20]
   2dfdc:	693b      	ldr	r3, [r7, #16]
   2dfde:	18d6      	adds	r6, r2, r3
   2dfe0:	68bb      	ldr	r3, [r7, #8]
   2dfe2:	4698      	mov	r8, r3
   2dfe4:	683b      	ldr	r3, [r7, #0]
   2dfe6:	0018      	movs	r0, r3
   2dfe8:	4b11      	ldr	r3, [pc, #68]	; (2e030 <readPacket+0xe0>)
   2dfea:	4798      	blx	r3
   2dfec:	0003      	movs	r3, r0
   2dfee:	4642      	mov	r2, r8
   2dff0:	0031      	movs	r1, r6
   2dff2:	0028      	movs	r0, r5
   2dff4:	47a0      	blx	r4
   2dff6:	0002      	movs	r2, r0
   2dff8:	68bb      	ldr	r3, [r7, #8]
   2dffa:	429a      	cmp	r2, r3
   2dffc:	d10f      	bne.n	2e01e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2dffe:	687b      	ldr	r3, [r7, #4]
   2e000:	695b      	ldr	r3, [r3, #20]
   2e002:	781a      	ldrb	r2, [r3, #0]
   2e004:	230c      	movs	r3, #12
   2e006:	18fb      	adds	r3, r7, r3
   2e008:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e00a:	230c      	movs	r3, #12
   2e00c:	18fb      	adds	r3, r7, r3
   2e00e:	781b      	ldrb	r3, [r3, #0]
   2e010:	061b      	lsls	r3, r3, #24
   2e012:	0f1b      	lsrs	r3, r3, #28
   2e014:	b2db      	uxtb	r3, r3
   2e016:	617b      	str	r3, [r7, #20]
   2e018:	e002      	b.n	2e020 <readPacket+0xd0>
        goto exit;
   2e01a:	46c0      	nop			; (mov r8, r8)
   2e01c:	e000      	b.n	2e020 <readPacket+0xd0>
        goto exit;
   2e01e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e020:	697b      	ldr	r3, [r7, #20]
}
   2e022:	0018      	movs	r0, r3
   2e024:	46bd      	mov	sp, r7
   2e026:	b006      	add	sp, #24
   2e028:	bc04      	pop	{r2}
   2e02a:	4690      	mov	r8, r2
   2e02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e02e:	46c0      	nop			; (mov r8, r8)
   2e030:	0002ebf5 	.word	0x0002ebf5
   2e034:	0002debd 	.word	0x0002debd
   2e038:	0002f9cd 	.word	0x0002f9cd

0002e03c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e03c:	b580      	push	{r7, lr}
   2e03e:	b086      	sub	sp, #24
   2e040:	af00      	add	r7, sp, #0
   2e042:	6078      	str	r0, [r7, #4]
   2e044:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e046:	687b      	ldr	r3, [r7, #4]
   2e048:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e04a:	683b      	ldr	r3, [r7, #0]
   2e04c:	689b      	ldr	r3, [r3, #8]
   2e04e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e050:	683b      	ldr	r3, [r7, #0]
   2e052:	685b      	ldr	r3, [r3, #4]
   2e054:	001a      	movs	r2, r3
   2e056:	693b      	ldr	r3, [r7, #16]
   2e058:	189b      	adds	r3, r3, r2
   2e05a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e05c:	e039      	b.n	2e0d2 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e05e:	693b      	ldr	r3, [r7, #16]
   2e060:	781b      	ldrb	r3, [r3, #0]
   2e062:	2b2f      	cmp	r3, #47	; 0x2f
   2e064:	d103      	bne.n	2e06e <isTopicMatched+0x32>
   2e066:	697b      	ldr	r3, [r7, #20]
   2e068:	781b      	ldrb	r3, [r3, #0]
   2e06a:	2b2f      	cmp	r3, #47	; 0x2f
   2e06c:	d13a      	bne.n	2e0e4 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e06e:	697b      	ldr	r3, [r7, #20]
   2e070:	781b      	ldrb	r3, [r3, #0]
   2e072:	2b2b      	cmp	r3, #43	; 0x2b
   2e074:	d009      	beq.n	2e08a <isTopicMatched+0x4e>
   2e076:	697b      	ldr	r3, [r7, #20]
   2e078:	781b      	ldrb	r3, [r3, #0]
   2e07a:	2b23      	cmp	r3, #35	; 0x23
   2e07c:	d005      	beq.n	2e08a <isTopicMatched+0x4e>
   2e07e:	697b      	ldr	r3, [r7, #20]
   2e080:	781a      	ldrb	r2, [r3, #0]
   2e082:	693b      	ldr	r3, [r7, #16]
   2e084:	781b      	ldrb	r3, [r3, #0]
   2e086:	429a      	cmp	r2, r3
   2e088:	d12e      	bne.n	2e0e8 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e08a:	697b      	ldr	r3, [r7, #20]
   2e08c:	781b      	ldrb	r3, [r3, #0]
   2e08e:	2b2b      	cmp	r3, #43	; 0x2b
   2e090:	d112      	bne.n	2e0b8 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e092:	693b      	ldr	r3, [r7, #16]
   2e094:	3301      	adds	r3, #1
   2e096:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e098:	e005      	b.n	2e0a6 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e09a:	693b      	ldr	r3, [r7, #16]
   2e09c:	3301      	adds	r3, #1
   2e09e:	613b      	str	r3, [r7, #16]
   2e0a0:	693b      	ldr	r3, [r7, #16]
   2e0a2:	3301      	adds	r3, #1
   2e0a4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e0a6:	68fa      	ldr	r2, [r7, #12]
   2e0a8:	68bb      	ldr	r3, [r7, #8]
   2e0aa:	429a      	cmp	r2, r3
   2e0ac:	d20b      	bcs.n	2e0c6 <isTopicMatched+0x8a>
   2e0ae:	68fb      	ldr	r3, [r7, #12]
   2e0b0:	781b      	ldrb	r3, [r3, #0]
   2e0b2:	2b2f      	cmp	r3, #47	; 0x2f
   2e0b4:	d1f1      	bne.n	2e09a <isTopicMatched+0x5e>
   2e0b6:	e006      	b.n	2e0c6 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e0b8:	697b      	ldr	r3, [r7, #20]
   2e0ba:	781b      	ldrb	r3, [r3, #0]
   2e0bc:	2b23      	cmp	r3, #35	; 0x23
   2e0be:	d102      	bne.n	2e0c6 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e0c0:	68bb      	ldr	r3, [r7, #8]
   2e0c2:	3b01      	subs	r3, #1
   2e0c4:	613b      	str	r3, [r7, #16]
        curf++;
   2e0c6:	697b      	ldr	r3, [r7, #20]
   2e0c8:	3301      	adds	r3, #1
   2e0ca:	617b      	str	r3, [r7, #20]
        curn++;
   2e0cc:	693b      	ldr	r3, [r7, #16]
   2e0ce:	3301      	adds	r3, #1
   2e0d0:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e0d2:	697b      	ldr	r3, [r7, #20]
   2e0d4:	781b      	ldrb	r3, [r3, #0]
   2e0d6:	2b00      	cmp	r3, #0
   2e0d8:	d007      	beq.n	2e0ea <isTopicMatched+0xae>
   2e0da:	693a      	ldr	r2, [r7, #16]
   2e0dc:	68bb      	ldr	r3, [r7, #8]
   2e0de:	429a      	cmp	r2, r3
   2e0e0:	d3bd      	bcc.n	2e05e <isTopicMatched+0x22>
   2e0e2:	e002      	b.n	2e0ea <isTopicMatched+0xae>
            break;
   2e0e4:	46c0      	nop			; (mov r8, r8)
   2e0e6:	e000      	b.n	2e0ea <isTopicMatched+0xae>
            break;
   2e0e8:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e0ea:	693a      	ldr	r2, [r7, #16]
   2e0ec:	68bb      	ldr	r3, [r7, #8]
   2e0ee:	429a      	cmp	r2, r3
   2e0f0:	d105      	bne.n	2e0fe <isTopicMatched+0xc2>
   2e0f2:	697b      	ldr	r3, [r7, #20]
   2e0f4:	781b      	ldrb	r3, [r3, #0]
   2e0f6:	2b00      	cmp	r3, #0
   2e0f8:	d101      	bne.n	2e0fe <isTopicMatched+0xc2>
   2e0fa:	2301      	movs	r3, #1
   2e0fc:	e000      	b.n	2e100 <isTopicMatched+0xc4>
   2e0fe:	2300      	movs	r3, #0
   2e100:	b2db      	uxtb	r3, r3
}
   2e102:	0018      	movs	r0, r3
   2e104:	46bd      	mov	sp, r7
   2e106:	b006      	add	sp, #24
   2e108:	bd80      	pop	{r7, pc}
	...

0002e10c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e10c:	b580      	push	{r7, lr}
   2e10e:	b08a      	sub	sp, #40	; 0x28
   2e110:	af00      	add	r7, sp, #0
   2e112:	60f8      	str	r0, [r7, #12]
   2e114:	60b9      	str	r1, [r7, #8]
   2e116:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e118:	2301      	movs	r3, #1
   2e11a:	425b      	negs	r3, r3
   2e11c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e11e:	2300      	movs	r3, #0
   2e120:	627b      	str	r3, [r7, #36]	; 0x24
   2e122:	e044      	b.n	2e1ae <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e124:	68fa      	ldr	r2, [r7, #12]
   2e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e128:	3304      	adds	r3, #4
   2e12a:	00db      	lsls	r3, r3, #3
   2e12c:	18d3      	adds	r3, r2, r3
   2e12e:	3304      	adds	r3, #4
   2e130:	681b      	ldr	r3, [r3, #0]
   2e132:	2b00      	cmp	r3, #0
   2e134:	d038      	beq.n	2e1a8 <deliverMessage+0x9c>
   2e136:	68fa      	ldr	r2, [r7, #12]
   2e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e13a:	3304      	adds	r3, #4
   2e13c:	00db      	lsls	r3, r3, #3
   2e13e:	18d3      	adds	r3, r2, r3
   2e140:	3304      	adds	r3, #4
   2e142:	681a      	ldr	r2, [r3, #0]
   2e144:	68bb      	ldr	r3, [r7, #8]
   2e146:	0011      	movs	r1, r2
   2e148:	0018      	movs	r0, r3
   2e14a:	4b28      	ldr	r3, [pc, #160]	; (2e1ec <deliverMessage+0xe0>)
   2e14c:	4798      	blx	r3
   2e14e:	1e03      	subs	r3, r0, #0
   2e150:	d10d      	bne.n	2e16e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e152:	68fa      	ldr	r2, [r7, #12]
   2e154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e156:	3304      	adds	r3, #4
   2e158:	00db      	lsls	r3, r3, #3
   2e15a:	18d3      	adds	r3, r2, r3
   2e15c:	3304      	adds	r3, #4
   2e15e:	681b      	ldr	r3, [r3, #0]
   2e160:	68ba      	ldr	r2, [r7, #8]
   2e162:	0011      	movs	r1, r2
   2e164:	0018      	movs	r0, r3
   2e166:	4b22      	ldr	r3, [pc, #136]	; (2e1f0 <deliverMessage+0xe4>)
   2e168:	4798      	blx	r3
   2e16a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e16c:	d01c      	beq.n	2e1a8 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e16e:	68fa      	ldr	r2, [r7, #12]
   2e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e172:	3304      	adds	r3, #4
   2e174:	00db      	lsls	r3, r3, #3
   2e176:	18d3      	adds	r3, r2, r3
   2e178:	3308      	adds	r3, #8
   2e17a:	681b      	ldr	r3, [r3, #0]
   2e17c:	2b00      	cmp	r3, #0
   2e17e:	d013      	beq.n	2e1a8 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e180:	687a      	ldr	r2, [r7, #4]
   2e182:	68b9      	ldr	r1, [r7, #8]
   2e184:	2318      	movs	r3, #24
   2e186:	18fb      	adds	r3, r7, r3
   2e188:	0018      	movs	r0, r3
   2e18a:	4b1a      	ldr	r3, [pc, #104]	; (2e1f4 <deliverMessage+0xe8>)
   2e18c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e18e:	68fa      	ldr	r2, [r7, #12]
   2e190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e192:	3304      	adds	r3, #4
   2e194:	00db      	lsls	r3, r3, #3
   2e196:	18d3      	adds	r3, r2, r3
   2e198:	3308      	adds	r3, #8
   2e19a:	681b      	ldr	r3, [r3, #0]
   2e19c:	2218      	movs	r2, #24
   2e19e:	18ba      	adds	r2, r7, r2
   2e1a0:	0010      	movs	r0, r2
   2e1a2:	4798      	blx	r3
                rc = SUCCESS;
   2e1a4:	2300      	movs	r3, #0
   2e1a6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e1aa:	3301      	adds	r3, #1
   2e1ac:	627b      	str	r3, [r7, #36]	; 0x24
   2e1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e1b0:	2b04      	cmp	r3, #4
   2e1b2:	ddb7      	ble.n	2e124 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e1b4:	6a3b      	ldr	r3, [r7, #32]
   2e1b6:	3301      	adds	r3, #1
   2e1b8:	d112      	bne.n	2e1e0 <deliverMessage+0xd4>
   2e1ba:	68fb      	ldr	r3, [r7, #12]
   2e1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e1be:	2b00      	cmp	r3, #0
   2e1c0:	d00e      	beq.n	2e1e0 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e1c2:	687a      	ldr	r2, [r7, #4]
   2e1c4:	68b9      	ldr	r1, [r7, #8]
   2e1c6:	2310      	movs	r3, #16
   2e1c8:	18fb      	adds	r3, r7, r3
   2e1ca:	0018      	movs	r0, r3
   2e1cc:	4b09      	ldr	r3, [pc, #36]	; (2e1f4 <deliverMessage+0xe8>)
   2e1ce:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e1d0:	68fb      	ldr	r3, [r7, #12]
   2e1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e1d4:	2210      	movs	r2, #16
   2e1d6:	18ba      	adds	r2, r7, r2
   2e1d8:	0010      	movs	r0, r2
   2e1da:	4798      	blx	r3
        rc = SUCCESS;
   2e1dc:	2300      	movs	r3, #0
   2e1de:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e1e0:	6a3b      	ldr	r3, [r7, #32]
}
   2e1e2:	0018      	movs	r0, r3
   2e1e4:	46bd      	mov	sp, r7
   2e1e6:	b00a      	add	sp, #40	; 0x28
   2e1e8:	bd80      	pop	{r7, pc}
   2e1ea:	46c0      	nop			; (mov r8, r8)
   2e1ec:	0002fde1 	.word	0x0002fde1
   2e1f0:	0002e03d 	.word	0x0002e03d
   2e1f4:	0002dd45 	.word	0x0002dd45

0002e1f8 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e1f8:	b580      	push	{r7, lr}
   2e1fa:	b088      	sub	sp, #32
   2e1fc:	af00      	add	r7, sp, #0
   2e1fe:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e200:	2301      	movs	r3, #1
   2e202:	425b      	negs	r3, r3
   2e204:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e206:	687b      	ldr	r3, [r7, #4]
   2e208:	699b      	ldr	r3, [r3, #24]
   2e20a:	2b00      	cmp	r3, #0
   2e20c:	d102      	bne.n	2e214 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e20e:	2300      	movs	r3, #0
   2e210:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e212:	e033      	b.n	2e27c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e214:	687b      	ldr	r3, [r7, #4]
   2e216:	3354      	adds	r3, #84	; 0x54
   2e218:	0018      	movs	r0, r3
   2e21a:	4b1b      	ldr	r3, [pc, #108]	; (2e288 <keepalive+0x90>)
   2e21c:	4798      	blx	r3
   2e21e:	1e03      	subs	r3, r0, #0
   2e220:	d02c      	beq.n	2e27c <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e222:	687b      	ldr	r3, [r7, #4]
   2e224:	7f1b      	ldrb	r3, [r3, #28]
   2e226:	2b00      	cmp	r3, #0
   2e228:	d128      	bne.n	2e27c <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e22a:	230c      	movs	r3, #12
   2e22c:	18fb      	adds	r3, r7, r3
   2e22e:	0018      	movs	r0, r3
   2e230:	4b16      	ldr	r3, [pc, #88]	; (2e28c <keepalive+0x94>)
   2e232:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e234:	23fa      	movs	r3, #250	; 0xfa
   2e236:	009a      	lsls	r2, r3, #2
   2e238:	230c      	movs	r3, #12
   2e23a:	18fb      	adds	r3, r7, r3
   2e23c:	0011      	movs	r1, r2
   2e23e:	0018      	movs	r0, r3
   2e240:	4b13      	ldr	r3, [pc, #76]	; (2e290 <keepalive+0x98>)
   2e242:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e244:	687b      	ldr	r3, [r7, #4]
   2e246:	691a      	ldr	r2, [r3, #16]
   2e248:	687b      	ldr	r3, [r7, #4]
   2e24a:	689b      	ldr	r3, [r3, #8]
   2e24c:	0019      	movs	r1, r3
   2e24e:	0010      	movs	r0, r2
   2e250:	4b10      	ldr	r3, [pc, #64]	; (2e294 <keepalive+0x9c>)
   2e252:	4798      	blx	r3
   2e254:	0003      	movs	r3, r0
   2e256:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e258:	69bb      	ldr	r3, [r7, #24]
   2e25a:	2b00      	cmp	r3, #0
   2e25c:	dd0e      	ble.n	2e27c <keepalive+0x84>
   2e25e:	230c      	movs	r3, #12
   2e260:	18fa      	adds	r2, r7, r3
   2e262:	69b9      	ldr	r1, [r7, #24]
   2e264:	687b      	ldr	r3, [r7, #4]
   2e266:	0018      	movs	r0, r3
   2e268:	4b0b      	ldr	r3, [pc, #44]	; (2e298 <keepalive+0xa0>)
   2e26a:	4798      	blx	r3
   2e26c:	0003      	movs	r3, r0
   2e26e:	61fb      	str	r3, [r7, #28]
   2e270:	69fb      	ldr	r3, [r7, #28]
   2e272:	2b00      	cmp	r3, #0
   2e274:	d102      	bne.n	2e27c <keepalive+0x84>
                c->ping_outstanding = 1;
   2e276:	687b      	ldr	r3, [r7, #4]
   2e278:	2201      	movs	r2, #1
   2e27a:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e27c:	69fb      	ldr	r3, [r7, #28]
}
   2e27e:	0018      	movs	r0, r3
   2e280:	46bd      	mov	sp, r7
   2e282:	b008      	add	sp, #32
   2e284:	bd80      	pop	{r7, pc}
   2e286:	46c0      	nop			; (mov r8, r8)
   2e288:	0002eb79 	.word	0x0002eb79
   2e28c:	0002ec1d 	.word	0x0002ec1d
   2e290:	0002eba5 	.word	0x0002eba5
   2e294:	0002f7f1 	.word	0x0002f7f1
   2e298:	0002dd95 	.word	0x0002dd95

0002e29c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e29c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e29e:	b095      	sub	sp, #84	; 0x54
   2e2a0:	af06      	add	r7, sp, #24
   2e2a2:	6078      	str	r0, [r7, #4]
   2e2a4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e2a6:	683a      	ldr	r2, [r7, #0]
   2e2a8:	687b      	ldr	r3, [r7, #4]
   2e2aa:	0011      	movs	r1, r2
   2e2ac:	0018      	movs	r0, r3
   2e2ae:	4b70      	ldr	r3, [pc, #448]	; (2e470 <cycle+0x1d4>)
   2e2b0:	4798      	blx	r3
   2e2b2:	0002      	movs	r2, r0
   2e2b4:	232e      	movs	r3, #46	; 0x2e
   2e2b6:	18fb      	adds	r3, r7, r3
   2e2b8:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e2ba:	2300      	movs	r3, #0
   2e2bc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e2be:	2300      	movs	r3, #0
   2e2c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e2c2:	232e      	movs	r3, #46	; 0x2e
   2e2c4:	18fb      	adds	r3, r7, r3
   2e2c6:	881b      	ldrh	r3, [r3, #0]
   2e2c8:	2b0d      	cmp	r3, #13
   2e2ca:	d900      	bls.n	2e2ce <cycle+0x32>
   2e2cc:	e0bd      	b.n	2e44a <cycle+0x1ae>
   2e2ce:	009a      	lsls	r2, r3, #2
   2e2d0:	4b68      	ldr	r3, [pc, #416]	; (2e474 <cycle+0x1d8>)
   2e2d2:	18d3      	adds	r3, r2, r3
   2e2d4:	681b      	ldr	r3, [r3, #0]
   2e2d6:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e2d8:	687b      	ldr	r3, [r7, #4]
   2e2da:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e2dc:	687b      	ldr	r3, [r7, #4]
   2e2de:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e2e0:	001e      	movs	r6, r3
   2e2e2:	2310      	movs	r3, #16
   2e2e4:	18fb      	adds	r3, r7, r3
   2e2e6:	1d1d      	adds	r5, r3, #4
   2e2e8:	2310      	movs	r3, #16
   2e2ea:	18fb      	adds	r3, r7, r3
   2e2ec:	1c5c      	adds	r4, r3, #1
   2e2ee:	230c      	movs	r3, #12
   2e2f0:	18f9      	adds	r1, r7, r3
   2e2f2:	2310      	movs	r3, #16
   2e2f4:	18fb      	adds	r3, r7, r3
   2e2f6:	1c98      	adds	r0, r3, #2
   2e2f8:	9604      	str	r6, [sp, #16]
   2e2fa:	9203      	str	r2, [sp, #12]
   2e2fc:	2310      	movs	r3, #16
   2e2fe:	18fb      	adds	r3, r7, r3
   2e300:	330c      	adds	r3, #12
   2e302:	9302      	str	r3, [sp, #8]
   2e304:	2310      	movs	r3, #16
   2e306:	18fb      	adds	r3, r7, r3
   2e308:	3308      	adds	r3, #8
   2e30a:	9301      	str	r3, [sp, #4]
   2e30c:	2320      	movs	r3, #32
   2e30e:	18fb      	adds	r3, r7, r3
   2e310:	9300      	str	r3, [sp, #0]
   2e312:	002b      	movs	r3, r5
   2e314:	0022      	movs	r2, r4
   2e316:	4c58      	ldr	r4, [pc, #352]	; (2e478 <cycle+0x1dc>)
   2e318:	47a0      	blx	r4
   2e31a:	0003      	movs	r3, r0
   2e31c:	2b01      	cmp	r3, #1
   2e31e:	d000      	beq.n	2e322 <cycle+0x86>
   2e320:	e098      	b.n	2e454 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e322:	68fb      	ldr	r3, [r7, #12]
   2e324:	b2da      	uxtb	r2, r3
   2e326:	2310      	movs	r3, #16
   2e328:	18fb      	adds	r3, r7, r3
   2e32a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e32c:	2310      	movs	r3, #16
   2e32e:	18fa      	adds	r2, r7, r3
   2e330:	2320      	movs	r3, #32
   2e332:	18f9      	adds	r1, r7, r3
   2e334:	687b      	ldr	r3, [r7, #4]
   2e336:	0018      	movs	r0, r3
   2e338:	4b50      	ldr	r3, [pc, #320]	; (2e47c <cycle+0x1e0>)
   2e33a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e33c:	2310      	movs	r3, #16
   2e33e:	18fb      	adds	r3, r7, r3
   2e340:	781b      	ldrb	r3, [r3, #0]
   2e342:	2b00      	cmp	r3, #0
   2e344:	d100      	bne.n	2e348 <cycle+0xac>
   2e346:	e07d      	b.n	2e444 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e348:	2310      	movs	r3, #16
   2e34a:	18fb      	adds	r3, r7, r3
   2e34c:	781b      	ldrb	r3, [r3, #0]
   2e34e:	2b01      	cmp	r3, #1
   2e350:	d10f      	bne.n	2e372 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e352:	687b      	ldr	r3, [r7, #4]
   2e354:	6918      	ldr	r0, [r3, #16]
   2e356:	687b      	ldr	r3, [r7, #4]
   2e358:	689b      	ldr	r3, [r3, #8]
   2e35a:	0019      	movs	r1, r3
   2e35c:	2310      	movs	r3, #16
   2e35e:	18fb      	adds	r3, r7, r3
   2e360:	889b      	ldrh	r3, [r3, #4]
   2e362:	9300      	str	r3, [sp, #0]
   2e364:	2300      	movs	r3, #0
   2e366:	2204      	movs	r2, #4
   2e368:	4c45      	ldr	r4, [pc, #276]	; (2e480 <cycle+0x1e4>)
   2e36a:	47a0      	blx	r4
   2e36c:	0003      	movs	r3, r0
   2e36e:	637b      	str	r3, [r7, #52]	; 0x34
   2e370:	e013      	b.n	2e39a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e372:	2310      	movs	r3, #16
   2e374:	18fb      	adds	r3, r7, r3
   2e376:	781b      	ldrb	r3, [r3, #0]
   2e378:	2b02      	cmp	r3, #2
   2e37a:	d10e      	bne.n	2e39a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e37c:	687b      	ldr	r3, [r7, #4]
   2e37e:	6918      	ldr	r0, [r3, #16]
   2e380:	687b      	ldr	r3, [r7, #4]
   2e382:	689b      	ldr	r3, [r3, #8]
   2e384:	0019      	movs	r1, r3
   2e386:	2310      	movs	r3, #16
   2e388:	18fb      	adds	r3, r7, r3
   2e38a:	889b      	ldrh	r3, [r3, #4]
   2e38c:	9300      	str	r3, [sp, #0]
   2e38e:	2300      	movs	r3, #0
   2e390:	2205      	movs	r2, #5
   2e392:	4c3b      	ldr	r4, [pc, #236]	; (2e480 <cycle+0x1e4>)
   2e394:	47a0      	blx	r4
   2e396:	0003      	movs	r3, r0
   2e398:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e39c:	2b00      	cmp	r3, #0
   2e39e:	dc03      	bgt.n	2e3a8 <cycle+0x10c>
                    rc = FAILURE;
   2e3a0:	2301      	movs	r3, #1
   2e3a2:	425b      	negs	r3, r3
   2e3a4:	633b      	str	r3, [r7, #48]	; 0x30
   2e3a6:	e007      	b.n	2e3b8 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e3a8:	683a      	ldr	r2, [r7, #0]
   2e3aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e3ac:	687b      	ldr	r3, [r7, #4]
   2e3ae:	0018      	movs	r0, r3
   2e3b0:	4b34      	ldr	r3, [pc, #208]	; (2e484 <cycle+0x1e8>)
   2e3b2:	4798      	blx	r3
   2e3b4:	0003      	movs	r3, r0
   2e3b6:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3ba:	3301      	adds	r3, #1
   2e3bc:	d142      	bne.n	2e444 <cycle+0x1a8>
                    goto exit; // there was a problem
   2e3be:	46c0      	nop			; (mov r8, r8)
   2e3c0:	e049      	b.n	2e456 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e3c2:	687b      	ldr	r3, [r7, #4]
   2e3c4:	695c      	ldr	r4, [r3, #20]
   2e3c6:	687b      	ldr	r3, [r7, #4]
   2e3c8:	68db      	ldr	r3, [r3, #12]
   2e3ca:	220a      	movs	r2, #10
   2e3cc:	18ba      	adds	r2, r7, r2
   2e3ce:	2109      	movs	r1, #9
   2e3d0:	1879      	adds	r1, r7, r1
   2e3d2:	2008      	movs	r0, #8
   2e3d4:	1838      	adds	r0, r7, r0
   2e3d6:	9300      	str	r3, [sp, #0]
   2e3d8:	0023      	movs	r3, r4
   2e3da:	4c2b      	ldr	r4, [pc, #172]	; (2e488 <cycle+0x1ec>)
   2e3dc:	47a0      	blx	r4
   2e3de:	0003      	movs	r3, r0
   2e3e0:	2b01      	cmp	r3, #1
   2e3e2:	d003      	beq.n	2e3ec <cycle+0x150>
                rc = FAILURE;
   2e3e4:	2301      	movs	r3, #1
   2e3e6:	425b      	negs	r3, r3
   2e3e8:	633b      	str	r3, [r7, #48]	; 0x30
   2e3ea:	e023      	b.n	2e434 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e3ec:	687b      	ldr	r3, [r7, #4]
   2e3ee:	6918      	ldr	r0, [r3, #16]
   2e3f0:	687b      	ldr	r3, [r7, #4]
   2e3f2:	689b      	ldr	r3, [r3, #8]
   2e3f4:	0019      	movs	r1, r3
   2e3f6:	230a      	movs	r3, #10
   2e3f8:	18fb      	adds	r3, r7, r3
   2e3fa:	881b      	ldrh	r3, [r3, #0]
   2e3fc:	9300      	str	r3, [sp, #0]
   2e3fe:	2300      	movs	r3, #0
   2e400:	2206      	movs	r2, #6
   2e402:	4c1f      	ldr	r4, [pc, #124]	; (2e480 <cycle+0x1e4>)
   2e404:	47a0      	blx	r4
   2e406:	0003      	movs	r3, r0
   2e408:	637b      	str	r3, [r7, #52]	; 0x34
   2e40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e40c:	2b00      	cmp	r3, #0
   2e40e:	dc03      	bgt.n	2e418 <cycle+0x17c>
                rc = FAILURE;
   2e410:	2301      	movs	r3, #1
   2e412:	425b      	negs	r3, r3
   2e414:	633b      	str	r3, [r7, #48]	; 0x30
   2e416:	e00d      	b.n	2e434 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e418:	683a      	ldr	r2, [r7, #0]
   2e41a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e41c:	687b      	ldr	r3, [r7, #4]
   2e41e:	0018      	movs	r0, r3
   2e420:	4b18      	ldr	r3, [pc, #96]	; (2e484 <cycle+0x1e8>)
   2e422:	4798      	blx	r3
   2e424:	0003      	movs	r3, r0
   2e426:	633b      	str	r3, [r7, #48]	; 0x30
   2e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e42a:	2b00      	cmp	r3, #0
   2e42c:	d002      	beq.n	2e434 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e42e:	2301      	movs	r3, #1
   2e430:	425b      	negs	r3, r3
   2e432:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2e434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e436:	3301      	adds	r3, #1
   2e438:	d106      	bne.n	2e448 <cycle+0x1ac>
                goto exit; // there was a problem
   2e43a:	e00c      	b.n	2e456 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2e43c:	687b      	ldr	r3, [r7, #4]
   2e43e:	2200      	movs	r2, #0
   2e440:	771a      	strb	r2, [r3, #28]
            break;
   2e442:	e002      	b.n	2e44a <cycle+0x1ae>
            break;
   2e444:	46c0      	nop			; (mov r8, r8)
   2e446:	e000      	b.n	2e44a <cycle+0x1ae>
            break;
   2e448:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2e44a:	687b      	ldr	r3, [r7, #4]
   2e44c:	0018      	movs	r0, r3
   2e44e:	4b0f      	ldr	r3, [pc, #60]	; (2e48c <cycle+0x1f0>)
   2e450:	4798      	blx	r3
   2e452:	e000      	b.n	2e456 <cycle+0x1ba>
                goto exit;
   2e454:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2e456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e458:	2b00      	cmp	r3, #0
   2e45a:	d103      	bne.n	2e464 <cycle+0x1c8>
        rc = packet_type;
   2e45c:	232e      	movs	r3, #46	; 0x2e
   2e45e:	18fb      	adds	r3, r7, r3
   2e460:	881b      	ldrh	r3, [r3, #0]
   2e462:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2e466:	0018      	movs	r0, r3
   2e468:	46bd      	mov	sp, r7
   2e46a:	b00f      	add	sp, #60	; 0x3c
   2e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e46e:	46c0      	nop			; (mov r8, r8)
   2e470:	0002df51 	.word	0x0002df51
   2e474:	00039430 	.word	0x00039430
   2e478:	0002f815 	.word	0x0002f815
   2e47c:	0002e10d 	.word	0x0002e10d
   2e480:	0003000d 	.word	0x0003000d
   2e484:	0002dd95 	.word	0x0002dd95
   2e488:	0002f919 	.word	0x0002f919
   2e48c:	0002e1f9 	.word	0x0002e1f9

0002e490 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2e490:	b580      	push	{r7, lr}
   2e492:	b086      	sub	sp, #24
   2e494:	af00      	add	r7, sp, #0
   2e496:	6078      	str	r0, [r7, #4]
   2e498:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2e49a:	2300      	movs	r3, #0
   2e49c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2e49e:	2308      	movs	r3, #8
   2e4a0:	18fb      	adds	r3, r7, r3
   2e4a2:	0018      	movs	r0, r3
   2e4a4:	4b11      	ldr	r3, [pc, #68]	; (2e4ec <MQTTYield+0x5c>)
   2e4a6:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2e4a8:	683a      	ldr	r2, [r7, #0]
   2e4aa:	2308      	movs	r3, #8
   2e4ac:	18fb      	adds	r3, r7, r3
   2e4ae:	0011      	movs	r1, r2
   2e4b0:	0018      	movs	r0, r3
   2e4b2:	4b0f      	ldr	r3, [pc, #60]	; (2e4f0 <MQTTYield+0x60>)
   2e4b4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2e4b6:	2308      	movs	r3, #8
   2e4b8:	18fa      	adds	r2, r7, r3
   2e4ba:	687b      	ldr	r3, [r7, #4]
   2e4bc:	0011      	movs	r1, r2
   2e4be:	0018      	movs	r0, r3
   2e4c0:	4b0c      	ldr	r3, [pc, #48]	; (2e4f4 <MQTTYield+0x64>)
   2e4c2:	4798      	blx	r3
   2e4c4:	0003      	movs	r3, r0
   2e4c6:	3301      	adds	r3, #1
   2e4c8:	d103      	bne.n	2e4d2 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2e4ca:	2301      	movs	r3, #1
   2e4cc:	425b      	negs	r3, r3
   2e4ce:	617b      	str	r3, [r7, #20]
            break;
   2e4d0:	e006      	b.n	2e4e0 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2e4d2:	2308      	movs	r3, #8
   2e4d4:	18fb      	adds	r3, r7, r3
   2e4d6:	0018      	movs	r0, r3
   2e4d8:	4b07      	ldr	r3, [pc, #28]	; (2e4f8 <MQTTYield+0x68>)
   2e4da:	4798      	blx	r3
   2e4dc:	1e03      	subs	r3, r0, #0
   2e4de:	d0ea      	beq.n	2e4b6 <MQTTYield+0x26>
        
    return rc;
   2e4e0:	697b      	ldr	r3, [r7, #20]
}
   2e4e2:	0018      	movs	r0, r3
   2e4e4:	46bd      	mov	sp, r7
   2e4e6:	b006      	add	sp, #24
   2e4e8:	bd80      	pop	{r7, pc}
   2e4ea:	46c0      	nop			; (mov r8, r8)
   2e4ec:	0002ec1d 	.word	0x0002ec1d
   2e4f0:	0002eba5 	.word	0x0002eba5
   2e4f4:	0002e29d 	.word	0x0002e29d
   2e4f8:	0002eb79 	.word	0x0002eb79

0002e4fc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2e4fc:	b580      	push	{r7, lr}
   2e4fe:	b086      	sub	sp, #24
   2e500:	af00      	add	r7, sp, #0
   2e502:	60f8      	str	r0, [r7, #12]
   2e504:	60b9      	str	r1, [r7, #8]
   2e506:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e508:	2301      	movs	r3, #1
   2e50a:	425b      	negs	r3, r3
   2e50c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2e50e:	687b      	ldr	r3, [r7, #4]
   2e510:	0018      	movs	r0, r3
   2e512:	4b0b      	ldr	r3, [pc, #44]	; (2e540 <waitfor+0x44>)
   2e514:	4798      	blx	r3
   2e516:	1e03      	subs	r3, r0, #0
   2e518:	d10c      	bne.n	2e534 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2e51a:	687a      	ldr	r2, [r7, #4]
   2e51c:	68fb      	ldr	r3, [r7, #12]
   2e51e:	0011      	movs	r1, r2
   2e520:	0018      	movs	r0, r3
   2e522:	4b08      	ldr	r3, [pc, #32]	; (2e544 <waitfor+0x48>)
   2e524:	4798      	blx	r3
   2e526:	0003      	movs	r3, r0
   2e528:	617b      	str	r3, [r7, #20]
   2e52a:	697a      	ldr	r2, [r7, #20]
   2e52c:	68bb      	ldr	r3, [r7, #8]
   2e52e:	429a      	cmp	r2, r3
   2e530:	d1ed      	bne.n	2e50e <waitfor+0x12>
   2e532:	e000      	b.n	2e536 <waitfor+0x3a>
            break; // we timed out
   2e534:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e536:	697b      	ldr	r3, [r7, #20]
}
   2e538:	0018      	movs	r0, r3
   2e53a:	46bd      	mov	sp, r7
   2e53c:	b006      	add	sp, #24
   2e53e:	bd80      	pop	{r7, pc}
   2e540:	0002eb79 	.word	0x0002eb79
   2e544:	0002e29d 	.word	0x0002e29d

0002e548 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e548:	b590      	push	{r4, r7, lr}
   2e54a:	b09f      	sub	sp, #124	; 0x7c
   2e54c:	af00      	add	r7, sp, #0
   2e54e:	6078      	str	r0, [r7, #4]
   2e550:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e552:	2301      	movs	r3, #1
   2e554:	425b      	negs	r3, r3
   2e556:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e558:	230c      	movs	r3, #12
   2e55a:	18fa      	adds	r2, r7, r3
   2e55c:	4b41      	ldr	r3, [pc, #260]	; (2e664 <MQTTConnect+0x11c>)
   2e55e:	0010      	movs	r0, r2
   2e560:	0019      	movs	r1, r3
   2e562:	2358      	movs	r3, #88	; 0x58
   2e564:	001a      	movs	r2, r3
   2e566:	4b40      	ldr	r3, [pc, #256]	; (2e668 <MQTTConnect+0x120>)
   2e568:	4798      	blx	r3
    int len = 0;
   2e56a:	2300      	movs	r3, #0
   2e56c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e56e:	687b      	ldr	r3, [r7, #4]
   2e570:	6a1b      	ldr	r3, [r3, #32]
   2e572:	2b00      	cmp	r3, #0
   2e574:	d166      	bne.n	2e644 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e576:	2364      	movs	r3, #100	; 0x64
   2e578:	18fb      	adds	r3, r7, r3
   2e57a:	0018      	movs	r0, r3
   2e57c:	4b3b      	ldr	r3, [pc, #236]	; (2e66c <MQTTConnect+0x124>)
   2e57e:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e580:	687b      	ldr	r3, [r7, #4]
   2e582:	685a      	ldr	r2, [r3, #4]
   2e584:	2364      	movs	r3, #100	; 0x64
   2e586:	18fb      	adds	r3, r7, r3
   2e588:	0011      	movs	r1, r2
   2e58a:	0018      	movs	r0, r3
   2e58c:	4b38      	ldr	r3, [pc, #224]	; (2e670 <MQTTConnect+0x128>)
   2e58e:	4798      	blx	r3

    if (options == 0)
   2e590:	683b      	ldr	r3, [r7, #0]
   2e592:	2b00      	cmp	r3, #0
   2e594:	d102      	bne.n	2e59c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e596:	230c      	movs	r3, #12
   2e598:	18fb      	adds	r3, r7, r3
   2e59a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e59c:	683b      	ldr	r3, [r7, #0]
   2e59e:	8b1b      	ldrh	r3, [r3, #24]
   2e5a0:	001a      	movs	r2, r3
   2e5a2:	687b      	ldr	r3, [r7, #4]
   2e5a4:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e5a6:	687b      	ldr	r3, [r7, #4]
   2e5a8:	3354      	adds	r3, #84	; 0x54
   2e5aa:	001a      	movs	r2, r3
   2e5ac:	687b      	ldr	r3, [r7, #4]
   2e5ae:	699b      	ldr	r3, [r3, #24]
   2e5b0:	0019      	movs	r1, r3
   2e5b2:	0010      	movs	r0, r2
   2e5b4:	4b2f      	ldr	r3, [pc, #188]	; (2e674 <MQTTConnect+0x12c>)
   2e5b6:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e5b8:	687b      	ldr	r3, [r7, #4]
   2e5ba:	6918      	ldr	r0, [r3, #16]
   2e5bc:	687b      	ldr	r3, [r7, #4]
   2e5be:	689b      	ldr	r3, [r3, #8]
   2e5c0:	0019      	movs	r1, r3
   2e5c2:	683b      	ldr	r3, [r7, #0]
   2e5c4:	001a      	movs	r2, r3
   2e5c6:	4b2c      	ldr	r3, [pc, #176]	; (2e678 <MQTTConnect+0x130>)
   2e5c8:	4798      	blx	r3
   2e5ca:	0003      	movs	r3, r0
   2e5cc:	673b      	str	r3, [r7, #112]	; 0x70
   2e5ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e5d0:	2b00      	cmp	r3, #0
   2e5d2:	dd39      	ble.n	2e648 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2e5d4:	2364      	movs	r3, #100	; 0x64
   2e5d6:	18fa      	adds	r2, r7, r3
   2e5d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2e5da:	687b      	ldr	r3, [r7, #4]
   2e5dc:	0018      	movs	r0, r3
   2e5de:	4b27      	ldr	r3, [pc, #156]	; (2e67c <MQTTConnect+0x134>)
   2e5e0:	4798      	blx	r3
   2e5e2:	0003      	movs	r3, r0
   2e5e4:	677b      	str	r3, [r7, #116]	; 0x74
   2e5e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e5e8:	2b00      	cmp	r3, #0
   2e5ea:	d12f      	bne.n	2e64c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2e5ec:	2364      	movs	r3, #100	; 0x64
   2e5ee:	18fa      	adds	r2, r7, r3
   2e5f0:	687b      	ldr	r3, [r7, #4]
   2e5f2:	2102      	movs	r1, #2
   2e5f4:	0018      	movs	r0, r3
   2e5f6:	4b22      	ldr	r3, [pc, #136]	; (2e680 <MQTTConnect+0x138>)
   2e5f8:	4798      	blx	r3
   2e5fa:	0003      	movs	r3, r0
   2e5fc:	2b02      	cmp	r3, #2
   2e5fe:	d11d      	bne.n	2e63c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2e600:	230b      	movs	r3, #11
   2e602:	18fb      	adds	r3, r7, r3
   2e604:	22ff      	movs	r2, #255	; 0xff
   2e606:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2e608:	230a      	movs	r3, #10
   2e60a:	18fb      	adds	r3, r7, r3
   2e60c:	2200      	movs	r2, #0
   2e60e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2e610:	687b      	ldr	r3, [r7, #4]
   2e612:	695a      	ldr	r2, [r3, #20]
   2e614:	687b      	ldr	r3, [r7, #4]
   2e616:	68db      	ldr	r3, [r3, #12]
   2e618:	210b      	movs	r1, #11
   2e61a:	1879      	adds	r1, r7, r1
   2e61c:	200a      	movs	r0, #10
   2e61e:	1838      	adds	r0, r7, r0
   2e620:	4c18      	ldr	r4, [pc, #96]	; (2e684 <MQTTConnect+0x13c>)
   2e622:	47a0      	blx	r4
   2e624:	0003      	movs	r3, r0
   2e626:	2b01      	cmp	r3, #1
   2e628:	d104      	bne.n	2e634 <MQTTConnect+0xec>
            rc = connack_rc;
   2e62a:	230b      	movs	r3, #11
   2e62c:	18fb      	adds	r3, r7, r3
   2e62e:	781b      	ldrb	r3, [r3, #0]
   2e630:	677b      	str	r3, [r7, #116]	; 0x74
   2e632:	e00c      	b.n	2e64e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2e634:	2301      	movs	r3, #1
   2e636:	425b      	negs	r3, r3
   2e638:	677b      	str	r3, [r7, #116]	; 0x74
   2e63a:	e008      	b.n	2e64e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2e63c:	2301      	movs	r3, #1
   2e63e:	425b      	negs	r3, r3
   2e640:	677b      	str	r3, [r7, #116]	; 0x74
   2e642:	e004      	b.n	2e64e <MQTTConnect+0x106>
		goto exit;
   2e644:	46c0      	nop			; (mov r8, r8)
   2e646:	e002      	b.n	2e64e <MQTTConnect+0x106>
        goto exit;
   2e648:	46c0      	nop			; (mov r8, r8)
   2e64a:	e000      	b.n	2e64e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2e64c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2e64e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e650:	2b00      	cmp	r3, #0
   2e652:	d102      	bne.n	2e65a <MQTTConnect+0x112>
        c->isconnected = 1;
   2e654:	687b      	ldr	r3, [r7, #4]
   2e656:	2201      	movs	r2, #1
   2e658:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2e65a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2e65c:	0018      	movs	r0, r3
   2e65e:	46bd      	mov	sp, r7
   2e660:	b01f      	add	sp, #124	; 0x7c
   2e662:	bd90      	pop	{r4, r7, pc}
   2e664:	00039468 	.word	0x00039468
   2e668:	000342e1 	.word	0x000342e1
   2e66c:	0002ec1d 	.word	0x0002ec1d
   2e670:	0002eba5 	.word	0x0002eba5
   2e674:	0002ebcd 	.word	0x0002ebcd
   2e678:	0002f3f9 	.word	0x0002f3f9
   2e67c:	0002dd95 	.word	0x0002dd95
   2e680:	0002e4fd 	.word	0x0002e4fd
   2e684:	0002f675 	.word	0x0002f675

0002e688 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2e688:	b5b0      	push	{r4, r5, r7, lr}
   2e68a:	b096      	sub	sp, #88	; 0x58
   2e68c:	af04      	add	r7, sp, #16
   2e68e:	60f8      	str	r0, [r7, #12]
   2e690:	60b9      	str	r1, [r7, #8]
   2e692:	603b      	str	r3, [r7, #0]
   2e694:	1dfb      	adds	r3, r7, #7
   2e696:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2e698:	2301      	movs	r3, #1
   2e69a:	425b      	negs	r3, r3
   2e69c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2e69e:	2300      	movs	r3, #0
   2e6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2e6a2:	2324      	movs	r3, #36	; 0x24
   2e6a4:	18fb      	adds	r3, r7, r3
   2e6a6:	2200      	movs	r2, #0
   2e6a8:	601a      	str	r2, [r3, #0]
   2e6aa:	2324      	movs	r3, #36	; 0x24
   2e6ac:	18fb      	adds	r3, r7, r3
   2e6ae:	2200      	movs	r2, #0
   2e6b0:	605a      	str	r2, [r3, #4]
   2e6b2:	2324      	movs	r3, #36	; 0x24
   2e6b4:	18fb      	adds	r3, r7, r3
   2e6b6:	2200      	movs	r2, #0
   2e6b8:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2e6ba:	1dfb      	adds	r3, r7, #7
   2e6bc:	781b      	ldrb	r3, [r3, #0]
   2e6be:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2e6c0:	2324      	movs	r3, #36	; 0x24
   2e6c2:	18fb      	adds	r3, r7, r3
   2e6c4:	68ba      	ldr	r2, [r7, #8]
   2e6c6:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e6c8:	68fb      	ldr	r3, [r7, #12]
   2e6ca:	6a1b      	ldr	r3, [r3, #32]
   2e6cc:	2b00      	cmp	r3, #0
   2e6ce:	d100      	bne.n	2e6d2 <MQTTSubscribe+0x4a>
   2e6d0:	e088      	b.n	2e7e4 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e6d2:	2330      	movs	r3, #48	; 0x30
   2e6d4:	18fb      	adds	r3, r7, r3
   2e6d6:	0018      	movs	r0, r3
   2e6d8:	4b47      	ldr	r3, [pc, #284]	; (2e7f8 <MQTTSubscribe+0x170>)
   2e6da:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e6dc:	68fb      	ldr	r3, [r7, #12]
   2e6de:	685a      	ldr	r2, [r3, #4]
   2e6e0:	2330      	movs	r3, #48	; 0x30
   2e6e2:	18fb      	adds	r3, r7, r3
   2e6e4:	0011      	movs	r1, r2
   2e6e6:	0018      	movs	r0, r3
   2e6e8:	4b44      	ldr	r3, [pc, #272]	; (2e7fc <MQTTSubscribe+0x174>)
   2e6ea:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e6ec:	68fb      	ldr	r3, [r7, #12]
   2e6ee:	691c      	ldr	r4, [r3, #16]
   2e6f0:	68fb      	ldr	r3, [r7, #12]
   2e6f2:	689b      	ldr	r3, [r3, #8]
   2e6f4:	001d      	movs	r5, r3
   2e6f6:	68fb      	ldr	r3, [r7, #12]
   2e6f8:	0018      	movs	r0, r3
   2e6fa:	4b41      	ldr	r3, [pc, #260]	; (2e800 <MQTTSubscribe+0x178>)
   2e6fc:	4798      	blx	r3
   2e6fe:	0003      	movs	r3, r0
   2e700:	b29a      	uxth	r2, r3
   2e702:	2320      	movs	r3, #32
   2e704:	18fb      	adds	r3, r7, r3
   2e706:	9302      	str	r3, [sp, #8]
   2e708:	2324      	movs	r3, #36	; 0x24
   2e70a:	18fb      	adds	r3, r7, r3
   2e70c:	9301      	str	r3, [sp, #4]
   2e70e:	2301      	movs	r3, #1
   2e710:	9300      	str	r3, [sp, #0]
   2e712:	0013      	movs	r3, r2
   2e714:	2200      	movs	r2, #0
   2e716:	0029      	movs	r1, r5
   2e718:	0020      	movs	r0, r4
   2e71a:	4c3a      	ldr	r4, [pc, #232]	; (2e804 <MQTTSubscribe+0x17c>)
   2e71c:	47a0      	blx	r4
   2e71e:	0003      	movs	r3, r0
   2e720:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e724:	2b00      	cmp	r3, #0
   2e726:	dd5f      	ble.n	2e7e8 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e728:	2330      	movs	r3, #48	; 0x30
   2e72a:	18fa      	adds	r2, r7, r3
   2e72c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e72e:	68fb      	ldr	r3, [r7, #12]
   2e730:	0018      	movs	r0, r3
   2e732:	4b35      	ldr	r3, [pc, #212]	; (2e808 <MQTTSubscribe+0x180>)
   2e734:	4798      	blx	r3
   2e736:	0003      	movs	r3, r0
   2e738:	647b      	str	r3, [r7, #68]	; 0x44
   2e73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e73c:	2b00      	cmp	r3, #0
   2e73e:	d155      	bne.n	2e7ec <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e740:	2330      	movs	r3, #48	; 0x30
   2e742:	18fa      	adds	r2, r7, r3
   2e744:	68fb      	ldr	r3, [r7, #12]
   2e746:	2109      	movs	r1, #9
   2e748:	0018      	movs	r0, r3
   2e74a:	4b30      	ldr	r3, [pc, #192]	; (2e80c <MQTTSubscribe+0x184>)
   2e74c:	4798      	blx	r3
   2e74e:	0003      	movs	r3, r0
   2e750:	2b09      	cmp	r3, #9
   2e752:	d143      	bne.n	2e7dc <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e754:	2300      	movs	r3, #0
   2e756:	61fb      	str	r3, [r7, #28]
   2e758:	2301      	movs	r3, #1
   2e75a:	425b      	negs	r3, r3
   2e75c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e75e:	68fb      	ldr	r3, [r7, #12]
   2e760:	695a      	ldr	r2, [r3, #20]
   2e762:	68fb      	ldr	r3, [r7, #12]
   2e764:	68db      	ldr	r3, [r3, #12]
   2e766:	001c      	movs	r4, r3
   2e768:	2318      	movs	r3, #24
   2e76a:	18fb      	adds	r3, r7, r3
   2e76c:	211c      	movs	r1, #28
   2e76e:	1879      	adds	r1, r7, r1
   2e770:	2016      	movs	r0, #22
   2e772:	1838      	adds	r0, r7, r0
   2e774:	9401      	str	r4, [sp, #4]
   2e776:	9200      	str	r2, [sp, #0]
   2e778:	000a      	movs	r2, r1
   2e77a:	2101      	movs	r1, #1
   2e77c:	4c24      	ldr	r4, [pc, #144]	; (2e810 <MQTTSubscribe+0x188>)
   2e77e:	47a0      	blx	r4
   2e780:	0003      	movs	r3, r0
   2e782:	2b01      	cmp	r3, #1
   2e784:	d101      	bne.n	2e78a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e786:	69bb      	ldr	r3, [r7, #24]
   2e788:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e78c:	2b80      	cmp	r3, #128	; 0x80
   2e78e:	d02e      	beq.n	2e7ee <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e790:	2300      	movs	r3, #0
   2e792:	643b      	str	r3, [r7, #64]	; 0x40
   2e794:	e01e      	b.n	2e7d4 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e796:	68fa      	ldr	r2, [r7, #12]
   2e798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e79a:	3304      	adds	r3, #4
   2e79c:	00db      	lsls	r3, r3, #3
   2e79e:	18d3      	adds	r3, r2, r3
   2e7a0:	3304      	adds	r3, #4
   2e7a2:	681b      	ldr	r3, [r3, #0]
   2e7a4:	2b00      	cmp	r3, #0
   2e7a6:	d112      	bne.n	2e7ce <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e7a8:	68fa      	ldr	r2, [r7, #12]
   2e7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e7ac:	3304      	adds	r3, #4
   2e7ae:	00db      	lsls	r3, r3, #3
   2e7b0:	18d3      	adds	r3, r2, r3
   2e7b2:	3304      	adds	r3, #4
   2e7b4:	68ba      	ldr	r2, [r7, #8]
   2e7b6:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e7b8:	68fa      	ldr	r2, [r7, #12]
   2e7ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e7bc:	3304      	adds	r3, #4
   2e7be:	00db      	lsls	r3, r3, #3
   2e7c0:	18d3      	adds	r3, r2, r3
   2e7c2:	3308      	adds	r3, #8
   2e7c4:	683a      	ldr	r2, [r7, #0]
   2e7c6:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e7c8:	2300      	movs	r3, #0
   2e7ca:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e7cc:	e00f      	b.n	2e7ee <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e7ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e7d0:	3301      	adds	r3, #1
   2e7d2:	643b      	str	r3, [r7, #64]	; 0x40
   2e7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e7d6:	2b04      	cmp	r3, #4
   2e7d8:	dddd      	ble.n	2e796 <MQTTSubscribe+0x10e>
   2e7da:	e008      	b.n	2e7ee <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e7dc:	2301      	movs	r3, #1
   2e7de:	425b      	negs	r3, r3
   2e7e0:	647b      	str	r3, [r7, #68]	; 0x44
   2e7e2:	e004      	b.n	2e7ee <MQTTSubscribe+0x166>
		goto exit;
   2e7e4:	46c0      	nop			; (mov r8, r8)
   2e7e6:	e002      	b.n	2e7ee <MQTTSubscribe+0x166>
        goto exit;
   2e7e8:	46c0      	nop			; (mov r8, r8)
   2e7ea:	e000      	b.n	2e7ee <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e7ec:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e7f0:	0018      	movs	r0, r3
   2e7f2:	46bd      	mov	sp, r7
   2e7f4:	b012      	add	sp, #72	; 0x48
   2e7f6:	bdb0      	pop	{r4, r5, r7, pc}
   2e7f8:	0002ec1d 	.word	0x0002ec1d
   2e7fc:	0002eba5 	.word	0x0002eba5
   2e800:	0002dd65 	.word	0x0002dd65
   2e804:	00030155 	.word	0x00030155
   2e808:	0002dd95 	.word	0x0002dd95
   2e80c:	0002e4fd 	.word	0x0002e4fd
   2e810:	000302a5 	.word	0x000302a5

0002e814 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e814:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e816:	46ce      	mov	lr, r9
   2e818:	4647      	mov	r7, r8
   2e81a:	b580      	push	{r7, lr}
   2e81c:	b097      	sub	sp, #92	; 0x5c
   2e81e:	af08      	add	r7, sp, #32
   2e820:	60f8      	str	r0, [r7, #12]
   2e822:	60b9      	str	r1, [r7, #8]
   2e824:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e826:	2301      	movs	r3, #1
   2e828:	425b      	negs	r3, r3
   2e82a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e82c:	2318      	movs	r3, #24
   2e82e:	18fb      	adds	r3, r7, r3
   2e830:	2200      	movs	r2, #0
   2e832:	601a      	str	r2, [r3, #0]
   2e834:	2318      	movs	r3, #24
   2e836:	18fb      	adds	r3, r7, r3
   2e838:	2200      	movs	r2, #0
   2e83a:	605a      	str	r2, [r3, #4]
   2e83c:	2318      	movs	r3, #24
   2e83e:	18fb      	adds	r3, r7, r3
   2e840:	2200      	movs	r2, #0
   2e842:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e844:	2318      	movs	r3, #24
   2e846:	18fb      	adds	r3, r7, r3
   2e848:	68ba      	ldr	r2, [r7, #8]
   2e84a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e84c:	2300      	movs	r3, #0
   2e84e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e850:	68fb      	ldr	r3, [r7, #12]
   2e852:	6a1b      	ldr	r3, [r3, #32]
   2e854:	2b00      	cmp	r3, #0
   2e856:	d100      	bne.n	2e85a <MQTTPublish+0x46>
   2e858:	e0a0      	b.n	2e99c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e85a:	2324      	movs	r3, #36	; 0x24
   2e85c:	18fb      	adds	r3, r7, r3
   2e85e:	0018      	movs	r0, r3
   2e860:	4b55      	ldr	r3, [pc, #340]	; (2e9b8 <MQTTPublish+0x1a4>)
   2e862:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e864:	68fb      	ldr	r3, [r7, #12]
   2e866:	685a      	ldr	r2, [r3, #4]
   2e868:	2324      	movs	r3, #36	; 0x24
   2e86a:	18fb      	adds	r3, r7, r3
   2e86c:	0011      	movs	r1, r2
   2e86e:	0018      	movs	r0, r3
   2e870:	4b52      	ldr	r3, [pc, #328]	; (2e9bc <MQTTPublish+0x1a8>)
   2e872:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e874:	687b      	ldr	r3, [r7, #4]
   2e876:	781b      	ldrb	r3, [r3, #0]
   2e878:	2b01      	cmp	r3, #1
   2e87a:	d003      	beq.n	2e884 <MQTTPublish+0x70>
   2e87c:	687b      	ldr	r3, [r7, #4]
   2e87e:	781b      	ldrb	r3, [r3, #0]
   2e880:	2b02      	cmp	r3, #2
   2e882:	d107      	bne.n	2e894 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e884:	68fb      	ldr	r3, [r7, #12]
   2e886:	0018      	movs	r0, r3
   2e888:	4b4d      	ldr	r3, [pc, #308]	; (2e9c0 <MQTTPublish+0x1ac>)
   2e88a:	4798      	blx	r3
   2e88c:	0003      	movs	r3, r0
   2e88e:	b29a      	uxth	r2, r3
   2e890:	687b      	ldr	r3, [r7, #4]
   2e892:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e894:	68fb      	ldr	r3, [r7, #12]
   2e896:	691b      	ldr	r3, [r3, #16]
   2e898:	469c      	mov	ip, r3
   2e89a:	68fb      	ldr	r3, [r7, #12]
   2e89c:	689b      	ldr	r3, [r3, #8]
   2e89e:	001d      	movs	r5, r3
   2e8a0:	687b      	ldr	r3, [r7, #4]
   2e8a2:	781b      	ldrb	r3, [r3, #0]
   2e8a4:	001e      	movs	r6, r3
   2e8a6:	687b      	ldr	r3, [r7, #4]
   2e8a8:	785b      	ldrb	r3, [r3, #1]
   2e8aa:	4698      	mov	r8, r3
   2e8ac:	687b      	ldr	r3, [r7, #4]
   2e8ae:	889b      	ldrh	r3, [r3, #4]
   2e8b0:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e8b2:	687b      	ldr	r3, [r7, #4]
   2e8b4:	689a      	ldr	r2, [r3, #8]
   2e8b6:	687b      	ldr	r3, [r7, #4]
   2e8b8:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e8ba:	9306      	str	r3, [sp, #24]
   2e8bc:	9205      	str	r2, [sp, #20]
   2e8be:	2318      	movs	r3, #24
   2e8c0:	18fa      	adds	r2, r7, r3
   2e8c2:	2308      	movs	r3, #8
   2e8c4:	446b      	add	r3, sp
   2e8c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e8c8:	c313      	stmia	r3!, {r0, r1, r4}
   2e8ca:	464b      	mov	r3, r9
   2e8cc:	9301      	str	r3, [sp, #4]
   2e8ce:	4643      	mov	r3, r8
   2e8d0:	9300      	str	r3, [sp, #0]
   2e8d2:	0033      	movs	r3, r6
   2e8d4:	2200      	movs	r2, #0
   2e8d6:	0029      	movs	r1, r5
   2e8d8:	4660      	mov	r0, ip
   2e8da:	4c3a      	ldr	r4, [pc, #232]	; (2e9c4 <MQTTPublish+0x1b0>)
   2e8dc:	47a0      	blx	r4
   2e8de:	0003      	movs	r3, r0
   2e8e0:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e8e4:	2b00      	cmp	r3, #0
   2e8e6:	dd5b      	ble.n	2e9a0 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e8e8:	2324      	movs	r3, #36	; 0x24
   2e8ea:	18fa      	adds	r2, r7, r3
   2e8ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e8ee:	68fb      	ldr	r3, [r7, #12]
   2e8f0:	0018      	movs	r0, r3
   2e8f2:	4b35      	ldr	r3, [pc, #212]	; (2e9c8 <MQTTPublish+0x1b4>)
   2e8f4:	4798      	blx	r3
   2e8f6:	0003      	movs	r3, r0
   2e8f8:	637b      	str	r3, [r7, #52]	; 0x34
   2e8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e8fc:	2b00      	cmp	r3, #0
   2e8fe:	d151      	bne.n	2e9a4 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e900:	687b      	ldr	r3, [r7, #4]
   2e902:	781b      	ldrb	r3, [r3, #0]
   2e904:	2b01      	cmp	r3, #1
   2e906:	d122      	bne.n	2e94e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e908:	2324      	movs	r3, #36	; 0x24
   2e90a:	18fa      	adds	r2, r7, r3
   2e90c:	68fb      	ldr	r3, [r7, #12]
   2e90e:	2104      	movs	r1, #4
   2e910:	0018      	movs	r0, r3
   2e912:	4b2e      	ldr	r3, [pc, #184]	; (2e9cc <MQTTPublish+0x1b8>)
   2e914:	4798      	blx	r3
   2e916:	0003      	movs	r3, r0
   2e918:	2b04      	cmp	r3, #4
   2e91a:	d114      	bne.n	2e946 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e91c:	68fb      	ldr	r3, [r7, #12]
   2e91e:	695c      	ldr	r4, [r3, #20]
   2e920:	68fb      	ldr	r3, [r7, #12]
   2e922:	68db      	ldr	r3, [r3, #12]
   2e924:	2216      	movs	r2, #22
   2e926:	18ba      	adds	r2, r7, r2
   2e928:	2115      	movs	r1, #21
   2e92a:	1879      	adds	r1, r7, r1
   2e92c:	2014      	movs	r0, #20
   2e92e:	1838      	adds	r0, r7, r0
   2e930:	9300      	str	r3, [sp, #0]
   2e932:	0023      	movs	r3, r4
   2e934:	4c26      	ldr	r4, [pc, #152]	; (2e9d0 <MQTTPublish+0x1bc>)
   2e936:	47a0      	blx	r4
   2e938:	0003      	movs	r3, r0
   2e93a:	2b01      	cmp	r3, #1
   2e93c:	d033      	beq.n	2e9a6 <MQTTPublish+0x192>
                rc = FAILURE;
   2e93e:	2301      	movs	r3, #1
   2e940:	425b      	negs	r3, r3
   2e942:	637b      	str	r3, [r7, #52]	; 0x34
   2e944:	e02f      	b.n	2e9a6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e946:	2301      	movs	r3, #1
   2e948:	425b      	negs	r3, r3
   2e94a:	637b      	str	r3, [r7, #52]	; 0x34
   2e94c:	e02b      	b.n	2e9a6 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2e94e:	687b      	ldr	r3, [r7, #4]
   2e950:	781b      	ldrb	r3, [r3, #0]
   2e952:	2b02      	cmp	r3, #2
   2e954:	d127      	bne.n	2e9a6 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2e956:	2324      	movs	r3, #36	; 0x24
   2e958:	18fa      	adds	r2, r7, r3
   2e95a:	68fb      	ldr	r3, [r7, #12]
   2e95c:	2107      	movs	r1, #7
   2e95e:	0018      	movs	r0, r3
   2e960:	4b1a      	ldr	r3, [pc, #104]	; (2e9cc <MQTTPublish+0x1b8>)
   2e962:	4798      	blx	r3
   2e964:	0003      	movs	r3, r0
   2e966:	2b07      	cmp	r3, #7
   2e968:	d114      	bne.n	2e994 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e96a:	68fb      	ldr	r3, [r7, #12]
   2e96c:	695c      	ldr	r4, [r3, #20]
   2e96e:	68fb      	ldr	r3, [r7, #12]
   2e970:	68db      	ldr	r3, [r3, #12]
   2e972:	2212      	movs	r2, #18
   2e974:	18ba      	adds	r2, r7, r2
   2e976:	2111      	movs	r1, #17
   2e978:	1879      	adds	r1, r7, r1
   2e97a:	2010      	movs	r0, #16
   2e97c:	1838      	adds	r0, r7, r0
   2e97e:	9300      	str	r3, [sp, #0]
   2e980:	0023      	movs	r3, r4
   2e982:	4c13      	ldr	r4, [pc, #76]	; (2e9d0 <MQTTPublish+0x1bc>)
   2e984:	47a0      	blx	r4
   2e986:	0003      	movs	r3, r0
   2e988:	2b01      	cmp	r3, #1
   2e98a:	d00c      	beq.n	2e9a6 <MQTTPublish+0x192>
                rc = FAILURE;
   2e98c:	2301      	movs	r3, #1
   2e98e:	425b      	negs	r3, r3
   2e990:	637b      	str	r3, [r7, #52]	; 0x34
   2e992:	e008      	b.n	2e9a6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e994:	2301      	movs	r3, #1
   2e996:	425b      	negs	r3, r3
   2e998:	637b      	str	r3, [r7, #52]	; 0x34
   2e99a:	e004      	b.n	2e9a6 <MQTTPublish+0x192>
		goto exit;
   2e99c:	46c0      	nop			; (mov r8, r8)
   2e99e:	e002      	b.n	2e9a6 <MQTTPublish+0x192>
        goto exit;
   2e9a0:	46c0      	nop			; (mov r8, r8)
   2e9a2:	e000      	b.n	2e9a6 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2e9a4:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2e9a8:	0018      	movs	r0, r3
   2e9aa:	46bd      	mov	sp, r7
   2e9ac:	b00f      	add	sp, #60	; 0x3c
   2e9ae:	bc0c      	pop	{r2, r3}
   2e9b0:	4690      	mov	r8, r2
   2e9b2:	4699      	mov	r9, r3
   2e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e9b6:	46c0      	nop			; (mov r8, r8)
   2e9b8:	0002ec1d 	.word	0x0002ec1d
   2e9bc:	0002eba5 	.word	0x0002eba5
   2e9c0:	0002dd65 	.word	0x0002dd65
   2e9c4:	0002fea1 	.word	0x0002fea1
   2e9c8:	0002dd95 	.word	0x0002dd95
   2e9cc:	0002e4fd 	.word	0x0002e4fd
   2e9d0:	0002f919 	.word	0x0002f919

0002e9d4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2e9d4:	b580      	push	{r7, lr}
   2e9d6:	b088      	sub	sp, #32
   2e9d8:	af00      	add	r7, sp, #0
   2e9da:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e9dc:	2301      	movs	r3, #1
   2e9de:	425b      	negs	r3, r3
   2e9e0:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2e9e2:	2300      	movs	r3, #0
   2e9e4:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2e9e6:	230c      	movs	r3, #12
   2e9e8:	18fb      	adds	r3, r7, r3
   2e9ea:	0018      	movs	r0, r3
   2e9ec:	4b13      	ldr	r3, [pc, #76]	; (2ea3c <MQTTDisconnect+0x68>)
   2e9ee:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e9f0:	687b      	ldr	r3, [r7, #4]
   2e9f2:	685a      	ldr	r2, [r3, #4]
   2e9f4:	230c      	movs	r3, #12
   2e9f6:	18fb      	adds	r3, r7, r3
   2e9f8:	0011      	movs	r1, r2
   2e9fa:	0018      	movs	r0, r3
   2e9fc:	4b10      	ldr	r3, [pc, #64]	; (2ea40 <MQTTDisconnect+0x6c>)
   2e9fe:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2ea00:	687b      	ldr	r3, [r7, #4]
   2ea02:	691a      	ldr	r2, [r3, #16]
   2ea04:	687b      	ldr	r3, [r7, #4]
   2ea06:	689b      	ldr	r3, [r3, #8]
   2ea08:	0019      	movs	r1, r3
   2ea0a:	0010      	movs	r0, r2
   2ea0c:	4b0d      	ldr	r3, [pc, #52]	; (2ea44 <MQTTDisconnect+0x70>)
   2ea0e:	4798      	blx	r3
   2ea10:	0003      	movs	r3, r0
   2ea12:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2ea14:	69bb      	ldr	r3, [r7, #24]
   2ea16:	2b00      	cmp	r3, #0
   2ea18:	dd08      	ble.n	2ea2c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2ea1a:	230c      	movs	r3, #12
   2ea1c:	18fa      	adds	r2, r7, r3
   2ea1e:	69b9      	ldr	r1, [r7, #24]
   2ea20:	687b      	ldr	r3, [r7, #4]
   2ea22:	0018      	movs	r0, r3
   2ea24:	4b08      	ldr	r3, [pc, #32]	; (2ea48 <MQTTDisconnect+0x74>)
   2ea26:	4798      	blx	r3
   2ea28:	0003      	movs	r3, r0
   2ea2a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2ea2c:	687b      	ldr	r3, [r7, #4]
   2ea2e:	2200      	movs	r2, #0
   2ea30:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ea32:	69fb      	ldr	r3, [r7, #28]
}
   2ea34:	0018      	movs	r0, r3
   2ea36:	46bd      	mov	sp, r7
   2ea38:	b008      	add	sp, #32
   2ea3a:	bd80      	pop	{r7, pc}
   2ea3c:	0002ec1d 	.word	0x0002ec1d
   2ea40:	0002eba5 	.word	0x0002eba5
   2ea44:	0002f7cd 	.word	0x0002f7cd
   2ea48:	0002dd95 	.word	0x0002dd95

0002ea4c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2ea4c:	b580      	push	{r7, lr}
   2ea4e:	b084      	sub	sp, #16
   2ea50:	af00      	add	r7, sp, #0
   2ea52:	0002      	movs	r2, r0
   2ea54:	1dfb      	adds	r3, r7, #7
   2ea56:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ea58:	2300      	movs	r3, #0
   2ea5a:	60fb      	str	r3, [r7, #12]
   2ea5c:	e01c      	b.n	2ea98 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2ea5e:	4a12      	ldr	r2, [pc, #72]	; (2eaa8 <isMQTTSocket+0x5c>)
   2ea60:	68fb      	ldr	r3, [r7, #12]
   2ea62:	2164      	movs	r1, #100	; 0x64
   2ea64:	434b      	muls	r3, r1
   2ea66:	18d3      	adds	r3, r2, r3
   2ea68:	3360      	adds	r3, #96	; 0x60
   2ea6a:	681b      	ldr	r3, [r3, #0]
   2ea6c:	2b00      	cmp	r3, #0
   2ea6e:	d010      	beq.n	2ea92 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2ea70:	4a0d      	ldr	r2, [pc, #52]	; (2eaa8 <isMQTTSocket+0x5c>)
   2ea72:	68fb      	ldr	r3, [r7, #12]
   2ea74:	2164      	movs	r1, #100	; 0x64
   2ea76:	434b      	muls	r3, r1
   2ea78:	18d3      	adds	r3, r2, r3
   2ea7a:	3360      	adds	r3, #96	; 0x60
   2ea7c:	681b      	ldr	r3, [r3, #0]
   2ea7e:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2ea80:	68bb      	ldr	r3, [r7, #8]
   2ea82:	6a1a      	ldr	r2, [r3, #32]
   2ea84:	1dfb      	adds	r3, r7, #7
   2ea86:	781b      	ldrb	r3, [r3, #0]
   2ea88:	b25b      	sxtb	r3, r3
   2ea8a:	429a      	cmp	r2, r3
   2ea8c:	d101      	bne.n	2ea92 <isMQTTSocket+0x46>
				return true;
   2ea8e:	2301      	movs	r3, #1
   2ea90:	e006      	b.n	2eaa0 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ea92:	68fb      	ldr	r3, [r7, #12]
   2ea94:	3301      	adds	r3, #1
   2ea96:	60fb      	str	r3, [r7, #12]
   2ea98:	68fb      	ldr	r3, [r7, #12]
   2ea9a:	2b06      	cmp	r3, #6
   2ea9c:	d9df      	bls.n	2ea5e <isMQTTSocket+0x12>
		}
	}
	return false;
   2ea9e:	2300      	movs	r3, #0
}
   2eaa0:	0018      	movs	r0, r3
   2eaa2:	46bd      	mov	sp, r7
   2eaa4:	b004      	add	sp, #16
   2eaa6:	bd80      	pop	{r7, pc}
   2eaa8:	200042b0 	.word	0x200042b0

0002eaac <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2eaac:	b580      	push	{r7, lr}
   2eaae:	b082      	sub	sp, #8
   2eab0:	af00      	add	r7, sp, #0
   2eab2:	6078      	str	r0, [r7, #4]
   2eab4:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2eab6:	4b0d      	ldr	r3, [pc, #52]	; (2eaec <dnsResolveCallback+0x40>)
   2eab8:	781b      	ldrb	r3, [r3, #0]
   2eaba:	2201      	movs	r2, #1
   2eabc:	4053      	eors	r3, r2
   2eabe:	b2db      	uxtb	r3, r3
   2eac0:	2b00      	cmp	r3, #0
   2eac2:	d00e      	beq.n	2eae2 <dnsResolveCallback+0x36>
   2eac4:	4b0a      	ldr	r3, [pc, #40]	; (2eaf0 <dnsResolveCallback+0x44>)
   2eac6:	681b      	ldr	r3, [r3, #0]
   2eac8:	687a      	ldr	r2, [r7, #4]
   2eaca:	0011      	movs	r1, r2
   2eacc:	0018      	movs	r0, r3
   2eace:	4b09      	ldr	r3, [pc, #36]	; (2eaf4 <dnsResolveCallback+0x48>)
   2ead0:	4798      	blx	r3
   2ead2:	1e03      	subs	r3, r0, #0
   2ead4:	d105      	bne.n	2eae2 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ead6:	683a      	ldr	r2, [r7, #0]
   2ead8:	4b07      	ldr	r3, [pc, #28]	; (2eaf8 <dnsResolveCallback+0x4c>)
   2eada:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2eadc:	4b03      	ldr	r3, [pc, #12]	; (2eaec <dnsResolveCallback+0x40>)
   2eade:	2201      	movs	r2, #1
   2eae0:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2eae2:	46c0      	nop			; (mov r8, r8)
   2eae4:	46bd      	mov	sp, r7
   2eae6:	b002      	add	sp, #8
   2eae8:	bd80      	pop	{r7, pc}
   2eaea:	46c0      	nop			; (mov r8, r8)
   2eaec:	200041a0 	.word	0x200041a0
   2eaf0:	200042ac 	.word	0x200042ac
   2eaf4:	0003466f 	.word	0x0003466f
   2eaf8:	20004198 	.word	0x20004198

0002eafc <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2eafc:	b580      	push	{r7, lr}
   2eafe:	b084      	sub	sp, #16
   2eb00:	af00      	add	r7, sp, #0
   2eb02:	603a      	str	r2, [r7, #0]
   2eb04:	1dfb      	adds	r3, r7, #7
   2eb06:	1c02      	adds	r2, r0, #0
   2eb08:	701a      	strb	r2, [r3, #0]
   2eb0a:	1dbb      	adds	r3, r7, #6
   2eb0c:	1c0a      	adds	r2, r1, #0
   2eb0e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2eb10:	1dfb      	adds	r3, r7, #7
   2eb12:	781b      	ldrb	r3, [r3, #0]
   2eb14:	b25b      	sxtb	r3, r3
   2eb16:	0018      	movs	r0, r3
   2eb18:	4b12      	ldr	r3, [pc, #72]	; (2eb64 <tcpClientSocketEventHandler+0x68>)
   2eb1a:	4798      	blx	r3
   2eb1c:	1e03      	subs	r3, r0, #0
   2eb1e:	d01c      	beq.n	2eb5a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2eb20:	1dbb      	adds	r3, r7, #6
   2eb22:	781b      	ldrb	r3, [r3, #0]
   2eb24:	2b06      	cmp	r3, #6
   2eb26:	d00c      	beq.n	2eb42 <tcpClientSocketEventHandler+0x46>
   2eb28:	2b07      	cmp	r3, #7
   2eb2a:	d006      	beq.n	2eb3a <tcpClientSocketEventHandler+0x3e>
   2eb2c:	2b05      	cmp	r3, #5
   2eb2e:	d000      	beq.n	2eb32 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2eb30:	e013      	b.n	2eb5a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2eb32:	4b0d      	ldr	r3, [pc, #52]	; (2eb68 <tcpClientSocketEventHandler+0x6c>)
   2eb34:	2201      	movs	r2, #1
   2eb36:	701a      	strb	r2, [r3, #0]
			break;
   2eb38:	e00f      	b.n	2eb5a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2eb3a:	4b0c      	ldr	r3, [pc, #48]	; (2eb6c <tcpClientSocketEventHandler+0x70>)
   2eb3c:	2201      	movs	r2, #1
   2eb3e:	701a      	strb	r2, [r3, #0]
			break;
   2eb40:	e00b      	b.n	2eb5a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2eb42:	683b      	ldr	r3, [r7, #0]
   2eb44:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2eb46:	68fb      	ldr	r3, [r7, #12]
   2eb48:	2204      	movs	r2, #4
   2eb4a:	5e9b      	ldrsh	r3, [r3, r2]
   2eb4c:	001a      	movs	r2, r3
   2eb4e:	4b08      	ldr	r3, [pc, #32]	; (2eb70 <tcpClientSocketEventHandler+0x74>)
   2eb50:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2eb52:	4b08      	ldr	r3, [pc, #32]	; (2eb74 <tcpClientSocketEventHandler+0x78>)
   2eb54:	2201      	movs	r2, #1
   2eb56:	701a      	strb	r2, [r3, #0]
			break;
   2eb58:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2eb5a:	46c0      	nop			; (mov r8, r8)
   2eb5c:	46bd      	mov	sp, r7
   2eb5e:	b004      	add	sp, #16
   2eb60:	bd80      	pop	{r7, pc}
   2eb62:	46c0      	nop			; (mov r8, r8)
   2eb64:	0002ea4d 	.word	0x0002ea4d
   2eb68:	200041a1 	.word	0x200041a1
   2eb6c:	200041a2 	.word	0x200041a2
   2eb70:	2000419c 	.word	0x2000419c
   2eb74:	200041a3 	.word	0x200041a3

0002eb78 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2eb78:	b580      	push	{r7, lr}
   2eb7a:	b082      	sub	sp, #8
   2eb7c:	af00      	add	r7, sp, #0
   2eb7e:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2eb80:	687b      	ldr	r3, [r7, #4]
   2eb82:	3304      	adds	r3, #4
   2eb84:	687a      	ldr	r2, [r7, #4]
   2eb86:	0011      	movs	r1, r2
   2eb88:	0018      	movs	r0, r3
   2eb8a:	4b05      	ldr	r3, [pc, #20]	; (2eba0 <TimerIsExpired+0x28>)
   2eb8c:	4798      	blx	r3
   2eb8e:	0003      	movs	r3, r0
   2eb90:	3b01      	subs	r3, #1
   2eb92:	425a      	negs	r2, r3
   2eb94:	4153      	adcs	r3, r2
   2eb96:	b2db      	uxtb	r3, r3
}
   2eb98:	0018      	movs	r0, r3
   2eb9a:	46bd      	mov	sp, r7
   2eb9c:	b002      	add	sp, #8
   2eb9e:	bd80      	pop	{r7, pc}
   2eba0:	0001c411 	.word	0x0001c411

0002eba4 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2eba4:	b580      	push	{r7, lr}
   2eba6:	b082      	sub	sp, #8
   2eba8:	af00      	add	r7, sp, #0
   2ebaa:	6078      	str	r0, [r7, #4]
   2ebac:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ebae:	687b      	ldr	r3, [r7, #4]
   2ebb0:	683a      	ldr	r2, [r7, #0]
   2ebb2:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2ebb4:	687b      	ldr	r3, [r7, #4]
   2ebb6:	3304      	adds	r3, #4
   2ebb8:	0018      	movs	r0, r3
   2ebba:	4b03      	ldr	r3, [pc, #12]	; (2ebc8 <TimerCountdownMS+0x24>)
   2ebbc:	4798      	blx	r3
}
   2ebbe:	46c0      	nop			; (mov r8, r8)
   2ebc0:	46bd      	mov	sp, r7
   2ebc2:	b002      	add	sp, #8
   2ebc4:	bd80      	pop	{r7, pc}
   2ebc6:	46c0      	nop			; (mov r8, r8)
   2ebc8:	0001c3a5 	.word	0x0001c3a5

0002ebcc <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2ebcc:	b580      	push	{r7, lr}
   2ebce:	b082      	sub	sp, #8
   2ebd0:	af00      	add	r7, sp, #0
   2ebd2:	6078      	str	r0, [r7, #4]
   2ebd4:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ebd6:	683b      	ldr	r3, [r7, #0]
   2ebd8:	22fa      	movs	r2, #250	; 0xfa
   2ebda:	0092      	lsls	r2, r2, #2
   2ebdc:	435a      	muls	r2, r3
   2ebde:	687b      	ldr	r3, [r7, #4]
   2ebe0:	0011      	movs	r1, r2
   2ebe2:	0018      	movs	r0, r3
   2ebe4:	4b02      	ldr	r3, [pc, #8]	; (2ebf0 <TimerCountdown+0x24>)
   2ebe6:	4798      	blx	r3
}
   2ebe8:	46c0      	nop			; (mov r8, r8)
   2ebea:	46bd      	mov	sp, r7
   2ebec:	b002      	add	sp, #8
   2ebee:	bd80      	pop	{r7, pc}
   2ebf0:	0002eba5 	.word	0x0002eba5

0002ebf4 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ebf4:	b580      	push	{r7, lr}
   2ebf6:	b082      	sub	sp, #8
   2ebf8:	af00      	add	r7, sp, #0
   2ebfa:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ebfc:	687b      	ldr	r3, [r7, #4]
   2ebfe:	3304      	adds	r3, #4
   2ec00:	687a      	ldr	r2, [r7, #4]
   2ec02:	0011      	movs	r1, r2
   2ec04:	0018      	movs	r0, r3
   2ec06:	4b04      	ldr	r3, [pc, #16]	; (2ec18 <TimerLeftMS+0x24>)
   2ec08:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ec0a:	687b      	ldr	r3, [r7, #4]
   2ec0c:	681b      	ldr	r3, [r3, #0]
}
   2ec0e:	0018      	movs	r0, r3
   2ec10:	46bd      	mov	sp, r7
   2ec12:	b002      	add	sp, #8
   2ec14:	bd80      	pop	{r7, pc}
   2ec16:	46c0      	nop			; (mov r8, r8)
   2ec18:	0001c411 	.word	0x0001c411

0002ec1c <TimerInit>:


void TimerInit(Timer* timer) {
   2ec1c:	b580      	push	{r7, lr}
   2ec1e:	b082      	sub	sp, #8
   2ec20:	af00      	add	r7, sp, #0
   2ec22:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2ec24:	687b      	ldr	r3, [r7, #4]
   2ec26:	2200      	movs	r2, #0
   2ec28:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2ec2a:	687b      	ldr	r3, [r7, #4]
   2ec2c:	3304      	adds	r3, #4
   2ec2e:	2208      	movs	r2, #8
   2ec30:	2100      	movs	r1, #0
   2ec32:	0018      	movs	r0, r3
   2ec34:	4b02      	ldr	r3, [pc, #8]	; (2ec40 <TimerInit+0x24>)
   2ec36:	4798      	blx	r3
}
   2ec38:	46c0      	nop			; (mov r8, r8)
   2ec3a:	46bd      	mov	sp, r7
   2ec3c:	b002      	add	sp, #8
   2ec3e:	bd80      	pop	{r7, pc}
   2ec40:	00034317 	.word	0x00034317

0002ec44 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2ec44:	b590      	push	{r4, r7, lr}
   2ec46:	b085      	sub	sp, #20
   2ec48:	af00      	add	r7, sp, #0
   2ec4a:	60f8      	str	r0, [r7, #12]
   2ec4c:	60b9      	str	r1, [r7, #8]
   2ec4e:	607a      	str	r2, [r7, #4]
   2ec50:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2ec52:	683b      	ldr	r3, [r7, #0]
   2ec54:	2b00      	cmp	r3, #0
   2ec56:	d101      	bne.n	2ec5c <WINC1500_read+0x18>
   2ec58:	230a      	movs	r3, #10
   2ec5a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2ec5c:	4b2c      	ldr	r3, [pc, #176]	; (2ed10 <WINC1500_read+0xcc>)
   2ec5e:	681b      	ldr	r3, [r3, #0]
   2ec60:	2b00      	cmp	r3, #0
   2ec62:	d131      	bne.n	2ecc8 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2ec64:	4b2b      	ldr	r3, [pc, #172]	; (2ed14 <WINC1500_read+0xd0>)
   2ec66:	2200      	movs	r2, #0
   2ec68:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2ec6a:	68fb      	ldr	r3, [r7, #12]
   2ec6c:	681b      	ldr	r3, [r3, #0]
   2ec6e:	b258      	sxtb	r0, r3
   2ec70:	683c      	ldr	r4, [r7, #0]
   2ec72:	2380      	movs	r3, #128	; 0x80
   2ec74:	005a      	lsls	r2, r3, #1
   2ec76:	4928      	ldr	r1, [pc, #160]	; (2ed18 <WINC1500_read+0xd4>)
   2ec78:	0023      	movs	r3, r4
   2ec7a:	4c28      	ldr	r4, [pc, #160]	; (2ed1c <WINC1500_read+0xd8>)
   2ec7c:	47a0      	blx	r4
   2ec7e:	1e03      	subs	r3, r0, #0
   2ec80:	d005      	beq.n	2ec8e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2ec82:	2301      	movs	r3, #1
   2ec84:	425b      	negs	r3, r3
   2ec86:	e03e      	b.n	2ed06 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2ec88:	2000      	movs	r0, #0
   2ec8a:	4b25      	ldr	r3, [pc, #148]	; (2ed20 <WINC1500_read+0xdc>)
   2ec8c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2ec8e:	4b21      	ldr	r3, [pc, #132]	; (2ed14 <WINC1500_read+0xd0>)
   2ec90:	781b      	ldrb	r3, [r3, #0]
   2ec92:	2201      	movs	r2, #1
   2ec94:	4053      	eors	r3, r2
   2ec96:	b2db      	uxtb	r3, r3
   2ec98:	2b00      	cmp	r3, #0
   2ec9a:	d1f5      	bne.n	2ec88 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2ec9c:	4b21      	ldr	r3, [pc, #132]	; (2ed24 <WINC1500_read+0xe0>)
   2ec9e:	681b      	ldr	r3, [r3, #0]
   2eca0:	2b00      	cmp	r3, #0
   2eca2:	dd08      	ble.n	2ecb6 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2eca4:	4b1f      	ldr	r3, [pc, #124]	; (2ed24 <WINC1500_read+0xe0>)
   2eca6:	681b      	ldr	r3, [r3, #0]
   2eca8:	001a      	movs	r2, r3
   2ecaa:	4b19      	ldr	r3, [pc, #100]	; (2ed10 <WINC1500_read+0xcc>)
   2ecac:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2ecae:	4b1e      	ldr	r3, [pc, #120]	; (2ed28 <WINC1500_read+0xe4>)
   2ecb0:	2200      	movs	r2, #0
   2ecb2:	601a      	str	r2, [r3, #0]
   2ecb4:	e008      	b.n	2ecc8 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2ecb6:	4b16      	ldr	r3, [pc, #88]	; (2ed10 <WINC1500_read+0xcc>)
   2ecb8:	2200      	movs	r2, #0
   2ecba:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2ecbc:	4b1a      	ldr	r3, [pc, #104]	; (2ed28 <WINC1500_read+0xe4>)
   2ecbe:	2200      	movs	r2, #0
   2ecc0:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2ecc2:	4b18      	ldr	r3, [pc, #96]	; (2ed24 <WINC1500_read+0xe0>)
   2ecc4:	681b      	ldr	r3, [r3, #0]
   2ecc6:	e01e      	b.n	2ed06 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2ecc8:	4b11      	ldr	r3, [pc, #68]	; (2ed10 <WINC1500_read+0xcc>)
   2ecca:	681b      	ldr	r3, [r3, #0]
   2eccc:	001a      	movs	r2, r3
   2ecce:	687b      	ldr	r3, [r7, #4]
   2ecd0:	4293      	cmp	r3, r2
   2ecd2:	dd02      	ble.n	2ecda <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2ecd4:	2301      	movs	r3, #1
   2ecd6:	425b      	negs	r3, r3
   2ecd8:	e015      	b.n	2ed06 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2ecda:	4b13      	ldr	r3, [pc, #76]	; (2ed28 <WINC1500_read+0xe4>)
   2ecdc:	681a      	ldr	r2, [r3, #0]
   2ecde:	4b0e      	ldr	r3, [pc, #56]	; (2ed18 <WINC1500_read+0xd4>)
   2ece0:	18d1      	adds	r1, r2, r3
   2ece2:	687a      	ldr	r2, [r7, #4]
   2ece4:	68bb      	ldr	r3, [r7, #8]
   2ece6:	0018      	movs	r0, r3
   2ece8:	4b10      	ldr	r3, [pc, #64]	; (2ed2c <WINC1500_read+0xe8>)
   2ecea:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2ecec:	4b08      	ldr	r3, [pc, #32]	; (2ed10 <WINC1500_read+0xcc>)
   2ecee:	681a      	ldr	r2, [r3, #0]
   2ecf0:	687b      	ldr	r3, [r7, #4]
   2ecf2:	1ad2      	subs	r2, r2, r3
   2ecf4:	4b06      	ldr	r3, [pc, #24]	; (2ed10 <WINC1500_read+0xcc>)
   2ecf6:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2ecf8:	4b0b      	ldr	r3, [pc, #44]	; (2ed28 <WINC1500_read+0xe4>)
   2ecfa:	681a      	ldr	r2, [r3, #0]
   2ecfc:	687b      	ldr	r3, [r7, #4]
   2ecfe:	18d2      	adds	r2, r2, r3
   2ed00:	4b09      	ldr	r3, [pc, #36]	; (2ed28 <WINC1500_read+0xe4>)
   2ed02:	601a      	str	r2, [r3, #0]
  
  return len;
   2ed04:	687b      	ldr	r3, [r7, #4]
}
   2ed06:	0018      	movs	r0, r3
   2ed08:	46bd      	mov	sp, r7
   2ed0a:	b005      	add	sp, #20
   2ed0c:	bd90      	pop	{r4, r7, pc}
   2ed0e:	46c0      	nop			; (mov r8, r8)
   2ed10:	200042a8 	.word	0x200042a8
   2ed14:	200041a3 	.word	0x200041a3
   2ed18:	200041a4 	.word	0x200041a4
   2ed1c:	000252f9 	.word	0x000252f9
   2ed20:	00021841 	.word	0x00021841
   2ed24:	2000419c 	.word	0x2000419c
   2ed28:	200042a4 	.word	0x200042a4
   2ed2c:	000342e1 	.word	0x000342e1

0002ed30 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2ed30:	b590      	push	{r4, r7, lr}
   2ed32:	b085      	sub	sp, #20
   2ed34:	af00      	add	r7, sp, #0
   2ed36:	60f8      	str	r0, [r7, #12]
   2ed38:	60b9      	str	r1, [r7, #8]
   2ed3a:	607a      	str	r2, [r7, #4]
   2ed3c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2ed3e:	4b10      	ldr	r3, [pc, #64]	; (2ed80 <WINC1500_write+0x50>)
   2ed40:	2200      	movs	r2, #0
   2ed42:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2ed44:	68fb      	ldr	r3, [r7, #12]
   2ed46:	681b      	ldr	r3, [r3, #0]
   2ed48:	b258      	sxtb	r0, r3
   2ed4a:	687b      	ldr	r3, [r7, #4]
   2ed4c:	b29a      	uxth	r2, r3
   2ed4e:	68b9      	ldr	r1, [r7, #8]
   2ed50:	2300      	movs	r3, #0
   2ed52:	4c0c      	ldr	r4, [pc, #48]	; (2ed84 <WINC1500_write+0x54>)
   2ed54:	47a0      	blx	r4
   2ed56:	1e03      	subs	r3, r0, #0
   2ed58:	d005      	beq.n	2ed66 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2ed5a:	2301      	movs	r3, #1
   2ed5c:	425b      	negs	r3, r3
   2ed5e:	e00a      	b.n	2ed76 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2ed60:	2000      	movs	r0, #0
   2ed62:	4b09      	ldr	r3, [pc, #36]	; (2ed88 <WINC1500_write+0x58>)
   2ed64:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2ed66:	4b06      	ldr	r3, [pc, #24]	; (2ed80 <WINC1500_write+0x50>)
   2ed68:	781b      	ldrb	r3, [r3, #0]
   2ed6a:	2201      	movs	r2, #1
   2ed6c:	4053      	eors	r3, r2
   2ed6e:	b2db      	uxtb	r3, r3
   2ed70:	2b00      	cmp	r3, #0
   2ed72:	d1f5      	bne.n	2ed60 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2ed74:	687b      	ldr	r3, [r7, #4]
}
   2ed76:	0018      	movs	r0, r3
   2ed78:	46bd      	mov	sp, r7
   2ed7a:	b005      	add	sp, #20
   2ed7c:	bd90      	pop	{r4, r7, pc}
   2ed7e:	46c0      	nop			; (mov r8, r8)
   2ed80:	200041a2 	.word	0x200041a2
   2ed84:	00025195 	.word	0x00025195
   2ed88:	00021841 	.word	0x00021841

0002ed8c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2ed8c:	b580      	push	{r7, lr}
   2ed8e:	b082      	sub	sp, #8
   2ed90:	af00      	add	r7, sp, #0
   2ed92:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2ed94:	687b      	ldr	r3, [r7, #4]
   2ed96:	681b      	ldr	r3, [r3, #0]
   2ed98:	b25b      	sxtb	r3, r3
   2ed9a:	0018      	movs	r0, r3
   2ed9c:	4b06      	ldr	r3, [pc, #24]	; (2edb8 <WINC1500_disconnect+0x2c>)
   2ed9e:	4798      	blx	r3
	n->socket=-1;
   2eda0:	687b      	ldr	r3, [r7, #4]
   2eda2:	2201      	movs	r2, #1
   2eda4:	4252      	negs	r2, r2
   2eda6:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2eda8:	4b04      	ldr	r3, [pc, #16]	; (2edbc <WINC1500_disconnect+0x30>)
   2edaa:	2200      	movs	r2, #0
   2edac:	701a      	strb	r2, [r3, #0]
}
   2edae:	46c0      	nop			; (mov r8, r8)
   2edb0:	46bd      	mov	sp, r7
   2edb2:	b002      	add	sp, #8
   2edb4:	bd80      	pop	{r7, pc}
   2edb6:	46c0      	nop			; (mov r8, r8)
   2edb8:	00025479 	.word	0x00025479
   2edbc:	200041a1 	.word	0x200041a1

0002edc0 <NetworkInit>:


void NetworkInit(Network* n) {
   2edc0:	b580      	push	{r7, lr}
   2edc2:	b082      	sub	sp, #8
   2edc4:	af00      	add	r7, sp, #0
   2edc6:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2edc8:	687b      	ldr	r3, [r7, #4]
   2edca:	2201      	movs	r2, #1
   2edcc:	4252      	negs	r2, r2
   2edce:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2edd0:	687b      	ldr	r3, [r7, #4]
   2edd2:	4a06      	ldr	r2, [pc, #24]	; (2edec <NetworkInit+0x2c>)
   2edd4:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2edd6:	687b      	ldr	r3, [r7, #4]
   2edd8:	4a05      	ldr	r2, [pc, #20]	; (2edf0 <NetworkInit+0x30>)
   2edda:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2eddc:	687b      	ldr	r3, [r7, #4]
   2edde:	4a05      	ldr	r2, [pc, #20]	; (2edf4 <NetworkInit+0x34>)
   2ede0:	611a      	str	r2, [r3, #16]
}
   2ede2:	46c0      	nop			; (mov r8, r8)
   2ede4:	46bd      	mov	sp, r7
   2ede6:	b002      	add	sp, #8
   2ede8:	bd80      	pop	{r7, pc}
   2edea:	46c0      	nop			; (mov r8, r8)
   2edec:	0002ec45 	.word	0x0002ec45
   2edf0:	0002ed31 	.word	0x0002ed31
   2edf4:	0002ed8d 	.word	0x0002ed8d

0002edf8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2edf8:	b580      	push	{r7, lr}
   2edfa:	b088      	sub	sp, #32
   2edfc:	af00      	add	r7, sp, #0
   2edfe:	60f8      	str	r0, [r7, #12]
   2ee00:	60b9      	str	r1, [r7, #8]
   2ee02:	607a      	str	r2, [r7, #4]
   2ee04:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2ee06:	4b37      	ldr	r3, [pc, #220]	; (2eee4 <ConnectNetwork+0xec>)
   2ee08:	2200      	movs	r2, #0
   2ee0a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2ee0c:	4b36      	ldr	r3, [pc, #216]	; (2eee8 <ConnectNetwork+0xf0>)
   2ee0e:	68ba      	ldr	r2, [r7, #8]
   2ee10:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2ee12:	68bb      	ldr	r3, [r7, #8]
   2ee14:	0018      	movs	r0, r3
   2ee16:	4b35      	ldr	r3, [pc, #212]	; (2eeec <ConnectNetwork+0xf4>)
   2ee18:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2ee1a:	e002      	b.n	2ee22 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2ee1c:	2000      	movs	r0, #0
   2ee1e:	4b34      	ldr	r3, [pc, #208]	; (2eef0 <ConnectNetwork+0xf8>)
   2ee20:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2ee22:	4b30      	ldr	r3, [pc, #192]	; (2eee4 <ConnectNetwork+0xec>)
   2ee24:	781b      	ldrb	r3, [r3, #0]
   2ee26:	2201      	movs	r2, #1
   2ee28:	4053      	eors	r3, r2
   2ee2a:	b2db      	uxtb	r3, r3
   2ee2c:	2b00      	cmp	r3, #0
   2ee2e:	d1f5      	bne.n	2ee1c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2ee30:	4b30      	ldr	r3, [pc, #192]	; (2eef4 <ConnectNetwork+0xfc>)
   2ee32:	681a      	ldr	r2, [r3, #0]
   2ee34:	68fb      	ldr	r3, [r7, #12]
   2ee36:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2ee38:	2310      	movs	r3, #16
   2ee3a:	18fb      	adds	r3, r7, r3
   2ee3c:	2202      	movs	r2, #2
   2ee3e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2ee40:	687b      	ldr	r3, [r7, #4]
   2ee42:	b29b      	uxth	r3, r3
   2ee44:	021b      	lsls	r3, r3, #8
   2ee46:	b21a      	sxth	r2, r3
   2ee48:	687b      	ldr	r3, [r7, #4]
   2ee4a:	b29b      	uxth	r3, r3
   2ee4c:	0a1b      	lsrs	r3, r3, #8
   2ee4e:	b29b      	uxth	r3, r3
   2ee50:	b21b      	sxth	r3, r3
   2ee52:	4313      	orrs	r3, r2
   2ee54:	b21b      	sxth	r3, r3
   2ee56:	b29a      	uxth	r2, r3
   2ee58:	2310      	movs	r3, #16
   2ee5a:	18fb      	adds	r3, r7, r3
   2ee5c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2ee5e:	4b25      	ldr	r3, [pc, #148]	; (2eef4 <ConnectNetwork+0xfc>)
   2ee60:	681b      	ldr	r3, [r3, #0]
   2ee62:	001a      	movs	r2, r3
   2ee64:	2310      	movs	r3, #16
   2ee66:	18fb      	adds	r3, r7, r3
   2ee68:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2ee6a:	68fb      	ldr	r3, [r7, #12]
   2ee6c:	681b      	ldr	r3, [r3, #0]
   2ee6e:	2b00      	cmp	r3, #0
   2ee70:	da0a      	bge.n	2ee88 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2ee72:	683b      	ldr	r3, [r7, #0]
   2ee74:	b2db      	uxtb	r3, r3
   2ee76:	001a      	movs	r2, r3
   2ee78:	2101      	movs	r1, #1
   2ee7a:	2002      	movs	r0, #2
   2ee7c:	4b1e      	ldr	r3, [pc, #120]	; (2eef8 <ConnectNetwork+0x100>)
   2ee7e:	4798      	blx	r3
   2ee80:	0003      	movs	r3, r0
   2ee82:	001a      	movs	r2, r3
   2ee84:	68fb      	ldr	r3, [r7, #12]
   2ee86:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2ee88:	68fb      	ldr	r3, [r7, #12]
   2ee8a:	681b      	ldr	r3, [r3, #0]
   2ee8c:	3301      	adds	r3, #1
   2ee8e:	d108      	bne.n	2eea2 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2ee90:	68fb      	ldr	r3, [r7, #12]
   2ee92:	681b      	ldr	r3, [r3, #0]
   2ee94:	b25b      	sxtb	r3, r3
   2ee96:	0018      	movs	r0, r3
   2ee98:	4b18      	ldr	r3, [pc, #96]	; (2eefc <ConnectNetwork+0x104>)
   2ee9a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2ee9c:	2309      	movs	r3, #9
   2ee9e:	425b      	negs	r3, r3
   2eea0:	e01c      	b.n	2eedc <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2eea2:	68fb      	ldr	r3, [r7, #12]
   2eea4:	681b      	ldr	r3, [r3, #0]
   2eea6:	b25b      	sxtb	r3, r3
   2eea8:	2210      	movs	r2, #16
   2eeaa:	18b9      	adds	r1, r7, r2
   2eeac:	2210      	movs	r2, #16
   2eeae:	0018      	movs	r0, r3
   2eeb0:	4b13      	ldr	r3, [pc, #76]	; (2ef00 <ConnectNetwork+0x108>)
   2eeb2:	4798      	blx	r3
   2eeb4:	1e03      	subs	r3, r0, #0
   2eeb6:	d002      	beq.n	2eebe <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2eeb8:	2309      	movs	r3, #9
   2eeba:	425b      	negs	r3, r3
   2eebc:	e00e      	b.n	2eedc <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2eebe:	4b11      	ldr	r3, [pc, #68]	; (2ef04 <ConnectNetwork+0x10c>)
   2eec0:	2200      	movs	r2, #0
   2eec2:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2eec4:	e002      	b.n	2eecc <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2eec6:	2000      	movs	r0, #0
   2eec8:	4b09      	ldr	r3, [pc, #36]	; (2eef0 <ConnectNetwork+0xf8>)
   2eeca:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2eecc:	4b0d      	ldr	r3, [pc, #52]	; (2ef04 <ConnectNetwork+0x10c>)
   2eece:	781b      	ldrb	r3, [r3, #0]
   2eed0:	2201      	movs	r2, #1
   2eed2:	4053      	eors	r3, r2
   2eed4:	b2db      	uxtb	r3, r3
   2eed6:	2b00      	cmp	r3, #0
   2eed8:	d1f5      	bne.n	2eec6 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2eeda:	2300      	movs	r3, #0
   2eedc:	0018      	movs	r0, r3
   2eede:	46bd      	mov	sp, r7
   2eee0:	b008      	add	sp, #32
   2eee2:	bd80      	pop	{r7, pc}
   2eee4:	200041a0 	.word	0x200041a0
   2eee8:	200042ac 	.word	0x200042ac
   2eeec:	000256c1 	.word	0x000256c1
   2eef0:	00021841 	.word	0x00021841
   2eef4:	20004198 	.word	0x20004198
   2eef8:	00024e6d 	.word	0x00024e6d
   2eefc:	00025479 	.word	0x00025479
   2ef00:	00025081 	.word	0x00025081
   2ef04:	200041a1 	.word	0x200041a1

0002ef08 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2ef08:	b580      	push	{r7, lr}
   2ef0a:	b084      	sub	sp, #16
   2ef0c:	af00      	add	r7, sp, #0
   2ef0e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2ef10:	687b      	ldr	r3, [r7, #4]
   2ef12:	2b00      	cmp	r3, #0
   2ef14:	d022      	beq.n	2ef5c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ef16:	2300      	movs	r3, #0
   2ef18:	60fb      	str	r3, [r7, #12]
   2ef1a:	e01b      	b.n	2ef54 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2ef1c:	4a11      	ldr	r2, [pc, #68]	; (2ef64 <allocateClient+0x5c>)
   2ef1e:	68fb      	ldr	r3, [r7, #12]
   2ef20:	2164      	movs	r1, #100	; 0x64
   2ef22:	434b      	muls	r3, r1
   2ef24:	18d3      	adds	r3, r2, r3
   2ef26:	3360      	adds	r3, #96	; 0x60
   2ef28:	681b      	ldr	r3, [r3, #0]
   2ef2a:	2b00      	cmp	r3, #0
   2ef2c:	d10f      	bne.n	2ef4e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2ef2e:	4a0d      	ldr	r2, [pc, #52]	; (2ef64 <allocateClient+0x5c>)
   2ef30:	68fb      	ldr	r3, [r7, #12]
   2ef32:	2164      	movs	r1, #100	; 0x64
   2ef34:	434b      	muls	r3, r1
   2ef36:	18d3      	adds	r3, r2, r3
   2ef38:	3360      	adds	r3, #96	; 0x60
   2ef3a:	687a      	ldr	r2, [r7, #4]
   2ef3c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2ef3e:	68fb      	ldr	r3, [r7, #12]
   2ef40:	2264      	movs	r2, #100	; 0x64
   2ef42:	435a      	muls	r2, r3
   2ef44:	4b07      	ldr	r3, [pc, #28]	; (2ef64 <allocateClient+0x5c>)
   2ef46:	18d2      	adds	r2, r2, r3
   2ef48:	687b      	ldr	r3, [r7, #4]
   2ef4a:	61da      	str	r2, [r3, #28]
			return;
   2ef4c:	e007      	b.n	2ef5e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ef4e:	68fb      	ldr	r3, [r7, #12]
   2ef50:	3301      	adds	r3, #1
   2ef52:	60fb      	str	r3, [r7, #12]
   2ef54:	68fb      	ldr	r3, [r7, #12]
   2ef56:	2b06      	cmp	r3, #6
   2ef58:	d9e0      	bls.n	2ef1c <allocateClient+0x14>
   2ef5a:	e000      	b.n	2ef5e <allocateClient+0x56>
		return;
   2ef5c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2ef5e:	46bd      	mov	sp, r7
   2ef60:	b004      	add	sp, #16
   2ef62:	bd80      	pop	{r7, pc}
   2ef64:	200042b0 	.word	0x200042b0

0002ef68 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2ef68:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ef6a:	b089      	sub	sp, #36	; 0x24
   2ef6c:	af04      	add	r7, sp, #16
   2ef6e:	6078      	str	r0, [r7, #4]
   2ef70:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2ef72:	687b      	ldr	r3, [r7, #4]
   2ef74:	2b00      	cmp	r3, #0
   2ef76:	d00a      	beq.n	2ef8e <mqtt_init+0x26>
   2ef78:	683b      	ldr	r3, [r7, #0]
   2ef7a:	2b00      	cmp	r3, #0
   2ef7c:	d007      	beq.n	2ef8e <mqtt_init+0x26>
   2ef7e:	683b      	ldr	r3, [r7, #0]
   2ef80:	691b      	ldr	r3, [r3, #16]
   2ef82:	2b00      	cmp	r3, #0
   2ef84:	d003      	beq.n	2ef8e <mqtt_init+0x26>
   2ef86:	683b      	ldr	r3, [r7, #0]
   2ef88:	689b      	ldr	r3, [r3, #8]
   2ef8a:	2b00      	cmp	r3, #0
   2ef8c:	d102      	bne.n	2ef94 <mqtt_init+0x2c>
		return FAILURE;
   2ef8e:	2301      	movs	r3, #1
   2ef90:	425b      	negs	r3, r3
   2ef92:	e034      	b.n	2effe <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2ef94:	683b      	ldr	r3, [r7, #0]
   2ef96:	889b      	ldrh	r3, [r3, #4]
   2ef98:	001a      	movs	r2, r3
   2ef9a:	23fa      	movs	r3, #250	; 0xfa
   2ef9c:	009b      	lsls	r3, r3, #2
   2ef9e:	4353      	muls	r3, r2
   2efa0:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2efa2:	687b      	ldr	r3, [r7, #4]
   2efa4:	3320      	adds	r3, #32
   2efa6:	0018      	movs	r0, r3
   2efa8:	4b17      	ldr	r3, [pc, #92]	; (2f008 <mqtt_init+0xa0>)
   2efaa:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2efac:	687b      	ldr	r3, [r7, #4]
   2efae:	3304      	adds	r3, #4
   2efb0:	6839      	ldr	r1, [r7, #0]
   2efb2:	2218      	movs	r2, #24
   2efb4:	0018      	movs	r0, r3
   2efb6:	4b15      	ldr	r3, [pc, #84]	; (2f00c <mqtt_init+0xa4>)
   2efb8:	4798      	blx	r3
	allocateClient(module);
   2efba:	687b      	ldr	r3, [r7, #4]
   2efbc:	0018      	movs	r0, r3
   2efbe:	4b14      	ldr	r3, [pc, #80]	; (2f010 <mqtt_init+0xa8>)
   2efc0:	4798      	blx	r3
	
	if(module->client)
   2efc2:	687b      	ldr	r3, [r7, #4]
   2efc4:	69db      	ldr	r3, [r3, #28]
   2efc6:	2b00      	cmp	r3, #0
   2efc8:	d017      	beq.n	2effa <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2efca:	687b      	ldr	r3, [r7, #4]
   2efcc:	69d8      	ldr	r0, [r3, #28]
   2efce:	687b      	ldr	r3, [r7, #4]
   2efd0:	3320      	adds	r3, #32
   2efd2:	001c      	movs	r4, r3
   2efd4:	683b      	ldr	r3, [r7, #0]
   2efd6:	691e      	ldr	r6, [r3, #16]
   2efd8:	683b      	ldr	r3, [r7, #0]
   2efda:	695a      	ldr	r2, [r3, #20]
   2efdc:	683b      	ldr	r3, [r7, #0]
   2efde:	6899      	ldr	r1, [r3, #8]
   2efe0:	683b      	ldr	r3, [r7, #0]
   2efe2:	68db      	ldr	r3, [r3, #12]
   2efe4:	68fd      	ldr	r5, [r7, #12]
   2efe6:	9302      	str	r3, [sp, #8]
   2efe8:	9101      	str	r1, [sp, #4]
   2efea:	9200      	str	r2, [sp, #0]
   2efec:	0033      	movs	r3, r6
   2efee:	002a      	movs	r2, r5
   2eff0:	0021      	movs	r1, r4
   2eff2:	4c08      	ldr	r4, [pc, #32]	; (2f014 <mqtt_init+0xac>)
   2eff4:	47a0      	blx	r4
		return SUCCESS;
   2eff6:	2300      	movs	r3, #0
   2eff8:	e001      	b.n	2effe <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2effa:	2301      	movs	r3, #1
   2effc:	425b      	negs	r3, r3
}
   2effe:	0018      	movs	r0, r3
   2f000:	46bd      	mov	sp, r7
   2f002:	b005      	add	sp, #20
   2f004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f006:	46c0      	nop			; (mov r8, r8)
   2f008:	0002edc1 	.word	0x0002edc1
   2f00c:	000342e1 	.word	0x000342e1
   2f010:	0002ef09 	.word	0x0002ef09
   2f014:	0002de39 	.word	0x0002de39

0002f018 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f018:	b580      	push	{r7, lr}
   2f01a:	b082      	sub	sp, #8
   2f01c:	af00      	add	r7, sp, #0
   2f01e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f020:	687b      	ldr	r3, [r7, #4]
   2f022:	4a0c      	ldr	r2, [pc, #48]	; (2f054 <mqtt_get_config_defaults+0x3c>)
   2f024:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f026:	687b      	ldr	r3, [r7, #4]
   2f028:	2200      	movs	r2, #0
   2f02a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f02c:	687b      	ldr	r3, [r7, #4]
   2f02e:	223c      	movs	r2, #60	; 0x3c
   2f030:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f032:	687b      	ldr	r3, [r7, #4]
   2f034:	2200      	movs	r2, #0
   2f036:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f038:	687b      	ldr	r3, [r7, #4]
   2f03a:	2200      	movs	r2, #0
   2f03c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f03e:	687b      	ldr	r3, [r7, #4]
   2f040:	2200      	movs	r2, #0
   2f042:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f044:	687b      	ldr	r3, [r7, #4]
   2f046:	2200      	movs	r2, #0
   2f048:	615a      	str	r2, [r3, #20]
}
   2f04a:	46c0      	nop			; (mov r8, r8)
   2f04c:	46bd      	mov	sp, r7
   2f04e:	b002      	add	sp, #8
   2f050:	bd80      	pop	{r7, pc}
   2f052:	46c0      	nop			; (mov r8, r8)
   2f054:	0000075b 	.word	0x0000075b

0002f058 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f058:	b580      	push	{r7, lr}
   2f05a:	b082      	sub	sp, #8
   2f05c:	af00      	add	r7, sp, #0
   2f05e:	6078      	str	r0, [r7, #4]
   2f060:	6039      	str	r1, [r7, #0]
	if(module)
   2f062:	687b      	ldr	r3, [r7, #4]
   2f064:	2b00      	cmp	r3, #0
   2f066:	d004      	beq.n	2f072 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f068:	687b      	ldr	r3, [r7, #4]
   2f06a:	683a      	ldr	r2, [r7, #0]
   2f06c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f06e:	2300      	movs	r3, #0
   2f070:	e001      	b.n	2f076 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f072:	2301      	movs	r3, #1
   2f074:	425b      	negs	r3, r3
}
   2f076:	0018      	movs	r0, r3
   2f078:	46bd      	mov	sp, r7
   2f07a:	b002      	add	sp, #8
   2f07c:	bd80      	pop	{r7, pc}
	...

0002f080 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f080:	b580      	push	{r7, lr}
   2f082:	b082      	sub	sp, #8
   2f084:	af00      	add	r7, sp, #0
   2f086:	603a      	str	r2, [r7, #0]
   2f088:	1dfb      	adds	r3, r7, #7
   2f08a:	1c02      	adds	r2, r0, #0
   2f08c:	701a      	strb	r2, [r3, #0]
   2f08e:	1dbb      	adds	r3, r7, #6
   2f090:	1c0a      	adds	r2, r1, #0
   2f092:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f094:	683a      	ldr	r2, [r7, #0]
   2f096:	1dbb      	adds	r3, r7, #6
   2f098:	7819      	ldrb	r1, [r3, #0]
   2f09a:	1dfb      	adds	r3, r7, #7
   2f09c:	781b      	ldrb	r3, [r3, #0]
   2f09e:	b25b      	sxtb	r3, r3
   2f0a0:	0018      	movs	r0, r3
   2f0a2:	4b03      	ldr	r3, [pc, #12]	; (2f0b0 <mqtt_socket_event_handler+0x30>)
   2f0a4:	4798      	blx	r3
}
   2f0a6:	46c0      	nop			; (mov r8, r8)
   2f0a8:	46bd      	mov	sp, r7
   2f0aa:	b002      	add	sp, #8
   2f0ac:	bd80      	pop	{r7, pc}
   2f0ae:	46c0      	nop			; (mov r8, r8)
   2f0b0:	0002eafd 	.word	0x0002eafd

0002f0b4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f0b4:	b580      	push	{r7, lr}
   2f0b6:	b082      	sub	sp, #8
   2f0b8:	af00      	add	r7, sp, #0
   2f0ba:	6078      	str	r0, [r7, #4]
   2f0bc:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f0be:	683a      	ldr	r2, [r7, #0]
   2f0c0:	687b      	ldr	r3, [r7, #4]
   2f0c2:	0011      	movs	r1, r2
   2f0c4:	0018      	movs	r0, r3
   2f0c6:	4b03      	ldr	r3, [pc, #12]	; (2f0d4 <mqtt_socket_resolve_handler+0x20>)
   2f0c8:	4798      	blx	r3
}
   2f0ca:	46c0      	nop			; (mov r8, r8)
   2f0cc:	46bd      	mov	sp, r7
   2f0ce:	b002      	add	sp, #8
   2f0d0:	bd80      	pop	{r7, pc}
   2f0d2:	46c0      	nop			; (mov r8, r8)
   2f0d4:	0002eaad 	.word	0x0002eaad

0002f0d8 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f0d8:	b590      	push	{r4, r7, lr}
   2f0da:	b085      	sub	sp, #20
   2f0dc:	af00      	add	r7, sp, #0
   2f0de:	6078      	str	r0, [r7, #4]
   2f0e0:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f0e2:	687b      	ldr	r3, [r7, #4]
   2f0e4:	3320      	adds	r3, #32
   2f0e6:	0018      	movs	r0, r3
   2f0e8:	687b      	ldr	r3, [r7, #4]
   2f0ea:	889b      	ldrh	r3, [r3, #4]
   2f0ec:	001a      	movs	r2, r3
   2f0ee:	687b      	ldr	r3, [r7, #4]
   2f0f0:	799b      	ldrb	r3, [r3, #6]
   2f0f2:	6839      	ldr	r1, [r7, #0]
   2f0f4:	4c09      	ldr	r4, [pc, #36]	; (2f11c <mqtt_connect+0x44>)
   2f0f6:	47a0      	blx	r4
   2f0f8:	0003      	movs	r3, r0
   2f0fa:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f0fc:	687b      	ldr	r3, [r7, #4]
   2f0fe:	681b      	ldr	r3, [r3, #0]
   2f100:	2b00      	cmp	r3, #0
   2f102:	d006      	beq.n	2f112 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f104:	687b      	ldr	r3, [r7, #4]
   2f106:	681b      	ldr	r3, [r3, #0]
   2f108:	220c      	movs	r2, #12
   2f10a:	18ba      	adds	r2, r7, r2
   2f10c:	6878      	ldr	r0, [r7, #4]
   2f10e:	2100      	movs	r1, #0
   2f110:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f112:	68fb      	ldr	r3, [r7, #12]
}
   2f114:	0018      	movs	r0, r3
   2f116:	46bd      	mov	sp, r7
   2f118:	b005      	add	sp, #20
   2f11a:	bd90      	pop	{r4, r7, pc}
   2f11c:	0002edf9 	.word	0x0002edf9

0002f120 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f120:	b580      	push	{r7, lr}
   2f122:	b09c      	sub	sp, #112	; 0x70
   2f124:	af00      	add	r7, sp, #0
   2f126:	60f8      	str	r0, [r7, #12]
   2f128:	607a      	str	r2, [r7, #4]
   2f12a:	603b      	str	r3, [r7, #0]
   2f12c:	230b      	movs	r3, #11
   2f12e:	18fb      	adds	r3, r7, r3
   2f130:	1c0a      	adds	r2, r1, #0
   2f132:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f134:	2310      	movs	r3, #16
   2f136:	18fa      	adds	r2, r7, r3
   2f138:	4b31      	ldr	r3, [pc, #196]	; (2f200 <mqtt_connect_broker+0xe0>)
   2f13a:	0010      	movs	r0, r2
   2f13c:	0019      	movs	r1, r3
   2f13e:	2358      	movs	r3, #88	; 0x58
   2f140:	001a      	movs	r2, r3
   2f142:	4b30      	ldr	r3, [pc, #192]	; (2f204 <mqtt_connect_broker+0xe4>)
   2f144:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f146:	2310      	movs	r3, #16
   2f148:	18fb      	adds	r3, r7, r3
   2f14a:	2204      	movs	r2, #4
   2f14c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f14e:	2310      	movs	r3, #16
   2f150:	18fb      	adds	r3, r7, r3
   2f152:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f154:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f156:	2310      	movs	r3, #16
   2f158:	18fb      	adds	r3, r7, r3
   2f15a:	687a      	ldr	r2, [r7, #4]
   2f15c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f15e:	2310      	movs	r3, #16
   2f160:	18fb      	adds	r3, r7, r3
   2f162:	683a      	ldr	r2, [r7, #0]
   2f164:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f166:	2310      	movs	r3, #16
   2f168:	18fb      	adds	r3, r7, r3
   2f16a:	220b      	movs	r2, #11
   2f16c:	18ba      	adds	r2, r7, r2
   2f16e:	7812      	ldrb	r2, [r2, #0]
   2f170:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f172:	2310      	movs	r3, #16
   2f174:	18fb      	adds	r3, r7, r3
   2f176:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f178:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f17a:	2310      	movs	r3, #16
   2f17c:	18fb      	adds	r3, r7, r3
   2f17e:	2280      	movs	r2, #128	; 0x80
   2f180:	18ba      	adds	r2, r7, r2
   2f182:	6812      	ldr	r2, [r2, #0]
   2f184:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f186:	2310      	movs	r3, #16
   2f188:	18fb      	adds	r3, r7, r3
   2f18a:	228c      	movs	r2, #140	; 0x8c
   2f18c:	18ba      	adds	r2, r7, r2
   2f18e:	213c      	movs	r1, #60	; 0x3c
   2f190:	7812      	ldrb	r2, [r2, #0]
   2f192:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f194:	2310      	movs	r3, #16
   2f196:	18fb      	adds	r3, r7, r3
   2f198:	2288      	movs	r2, #136	; 0x88
   2f19a:	18ba      	adds	r2, r7, r2
   2f19c:	213d      	movs	r1, #61	; 0x3d
   2f19e:	7812      	ldrb	r2, [r2, #0]
   2f1a0:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f1a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f1a4:	2b00      	cmp	r3, #0
   2f1a6:	d008      	beq.n	2f1ba <mqtt_connect_broker+0x9a>
   2f1a8:	2380      	movs	r3, #128	; 0x80
   2f1aa:	18fb      	adds	r3, r7, r3
   2f1ac:	681b      	ldr	r3, [r3, #0]
   2f1ae:	2b00      	cmp	r3, #0
   2f1b0:	d003      	beq.n	2f1ba <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f1b2:	2310      	movs	r3, #16
   2f1b4:	18fb      	adds	r3, r7, r3
   2f1b6:	2201      	movs	r2, #1
   2f1b8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f1ba:	68fb      	ldr	r3, [r7, #12]
   2f1bc:	69db      	ldr	r3, [r3, #28]
   2f1be:	2210      	movs	r2, #16
   2f1c0:	18ba      	adds	r2, r7, r2
   2f1c2:	0011      	movs	r1, r2
   2f1c4:	0018      	movs	r0, r3
   2f1c6:	4b10      	ldr	r3, [pc, #64]	; (2f208 <mqtt_connect_broker+0xe8>)
   2f1c8:	4798      	blx	r3
   2f1ca:	0003      	movs	r3, r0
   2f1cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f1d0:	b2da      	uxtb	r2, r3
   2f1d2:	2368      	movs	r3, #104	; 0x68
   2f1d4:	18fb      	adds	r3, r7, r3
   2f1d6:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f1d8:	68fb      	ldr	r3, [r7, #12]
   2f1da:	681b      	ldr	r3, [r3, #0]
   2f1dc:	2b00      	cmp	r3, #0
   2f1de:	d006      	beq.n	2f1ee <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f1e0:	68fb      	ldr	r3, [r7, #12]
   2f1e2:	681b      	ldr	r3, [r3, #0]
   2f1e4:	2268      	movs	r2, #104	; 0x68
   2f1e6:	18ba      	adds	r2, r7, r2
   2f1e8:	68f8      	ldr	r0, [r7, #12]
   2f1ea:	2101      	movs	r1, #1
   2f1ec:	4798      	blx	r3
	
	module->isConnected = true;
   2f1ee:	68fb      	ldr	r3, [r7, #12]
   2f1f0:	2234      	movs	r2, #52	; 0x34
   2f1f2:	2101      	movs	r1, #1
   2f1f4:	5499      	strb	r1, [r3, r2]
	return rc;
   2f1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f1f8:	0018      	movs	r0, r3
   2f1fa:	46bd      	mov	sp, r7
   2f1fc:	b01c      	add	sp, #112	; 0x70
   2f1fe:	bd80      	pop	{r7, pc}
   2f200:	000394c0 	.word	0x000394c0
   2f204:	000342e1 	.word	0x000342e1
   2f208:	0002e549 	.word	0x0002e549

0002f20c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f20c:	b580      	push	{r7, lr}
   2f20e:	b084      	sub	sp, #16
   2f210:	af00      	add	r7, sp, #0
   2f212:	6078      	str	r0, [r7, #4]
   2f214:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f216:	687b      	ldr	r3, [r7, #4]
   2f218:	69db      	ldr	r3, [r3, #28]
   2f21a:	0018      	movs	r0, r3
   2f21c:	4b0c      	ldr	r3, [pc, #48]	; (2f250 <mqtt_disconnect+0x44>)
   2f21e:	4798      	blx	r3
   2f220:	0003      	movs	r3, r0
   2f222:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f224:	68fb      	ldr	r3, [r7, #12]
   2f226:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f228:	687b      	ldr	r3, [r7, #4]
   2f22a:	681b      	ldr	r3, [r3, #0]
   2f22c:	2b00      	cmp	r3, #0
   2f22e:	d006      	beq.n	2f23e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f230:	687b      	ldr	r3, [r7, #4]
   2f232:	681b      	ldr	r3, [r3, #0]
   2f234:	2208      	movs	r2, #8
   2f236:	18ba      	adds	r2, r7, r2
   2f238:	6878      	ldr	r0, [r7, #4]
   2f23a:	2105      	movs	r1, #5
   2f23c:	4798      	blx	r3
	
	module->isConnected = false;
   2f23e:	687b      	ldr	r3, [r7, #4]
   2f240:	2234      	movs	r2, #52	; 0x34
   2f242:	2100      	movs	r1, #0
   2f244:	5499      	strb	r1, [r3, r2]
	return rc;
   2f246:	68fb      	ldr	r3, [r7, #12]
}
   2f248:	0018      	movs	r0, r3
   2f24a:	46bd      	mov	sp, r7
   2f24c:	b004      	add	sp, #16
   2f24e:	bd80      	pop	{r7, pc}
   2f250:	0002e9d5 	.word	0x0002e9d5

0002f254 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f254:	b580      	push	{r7, lr}
   2f256:	b08a      	sub	sp, #40	; 0x28
   2f258:	af00      	add	r7, sp, #0
   2f25a:	60f8      	str	r0, [r7, #12]
   2f25c:	60b9      	str	r1, [r7, #8]
   2f25e:	607a      	str	r2, [r7, #4]
   2f260:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f262:	2314      	movs	r3, #20
   2f264:	18fb      	adds	r3, r7, r3
   2f266:	2230      	movs	r2, #48	; 0x30
   2f268:	18ba      	adds	r2, r7, r2
   2f26a:	7812      	ldrb	r2, [r2, #0]
   2f26c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f26e:	2314      	movs	r3, #20
   2f270:	18fb      	adds	r3, r7, r3
   2f272:	687a      	ldr	r2, [r7, #4]
   2f274:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f276:	2314      	movs	r3, #20
   2f278:	18fb      	adds	r3, r7, r3
   2f27a:	683a      	ldr	r2, [r7, #0]
   2f27c:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f27e:	2314      	movs	r3, #20
   2f280:	18fb      	adds	r3, r7, r3
   2f282:	2234      	movs	r2, #52	; 0x34
   2f284:	18ba      	adds	r2, r7, r2
   2f286:	7812      	ldrb	r2, [r2, #0]
   2f288:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f28a:	68fb      	ldr	r3, [r7, #12]
   2f28c:	69db      	ldr	r3, [r3, #28]
   2f28e:	2214      	movs	r2, #20
   2f290:	18ba      	adds	r2, r7, r2
   2f292:	68b9      	ldr	r1, [r7, #8]
   2f294:	0018      	movs	r0, r3
   2f296:	4b09      	ldr	r3, [pc, #36]	; (2f2bc <mqtt_publish+0x68>)
   2f298:	4798      	blx	r3
   2f29a:	0003      	movs	r3, r0
   2f29c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f29e:	68fb      	ldr	r3, [r7, #12]
   2f2a0:	681b      	ldr	r3, [r3, #0]
   2f2a2:	2b00      	cmp	r3, #0
   2f2a4:	d005      	beq.n	2f2b2 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f2a6:	68fb      	ldr	r3, [r7, #12]
   2f2a8:	681b      	ldr	r3, [r3, #0]
   2f2aa:	68f8      	ldr	r0, [r7, #12]
   2f2ac:	2200      	movs	r2, #0
   2f2ae:	2102      	movs	r1, #2
   2f2b0:	4798      	blx	r3
	
	return rc;
   2f2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f2b4:	0018      	movs	r0, r3
   2f2b6:	46bd      	mov	sp, r7
   2f2b8:	b00a      	add	sp, #40	; 0x28
   2f2ba:	bd80      	pop	{r7, pc}
   2f2bc:	0002e815 	.word	0x0002e815

0002f2c0 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f2c0:	b590      	push	{r4, r7, lr}
   2f2c2:	b087      	sub	sp, #28
   2f2c4:	af00      	add	r7, sp, #0
   2f2c6:	60f8      	str	r0, [r7, #12]
   2f2c8:	60b9      	str	r1, [r7, #8]
   2f2ca:	603b      	str	r3, [r7, #0]
   2f2cc:	1dfb      	adds	r3, r7, #7
   2f2ce:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f2d0:	68fb      	ldr	r3, [r7, #12]
   2f2d2:	69d8      	ldr	r0, [r3, #28]
   2f2d4:	683c      	ldr	r4, [r7, #0]
   2f2d6:	1dfb      	adds	r3, r7, #7
   2f2d8:	781a      	ldrb	r2, [r3, #0]
   2f2da:	68b9      	ldr	r1, [r7, #8]
   2f2dc:	0023      	movs	r3, r4
   2f2de:	4c09      	ldr	r4, [pc, #36]	; (2f304 <mqtt_subscribe+0x44>)
   2f2e0:	47a0      	blx	r4
   2f2e2:	0003      	movs	r3, r0
   2f2e4:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f2e6:	68fb      	ldr	r3, [r7, #12]
   2f2e8:	681b      	ldr	r3, [r3, #0]
   2f2ea:	2b00      	cmp	r3, #0
   2f2ec:	d005      	beq.n	2f2fa <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f2ee:	68fb      	ldr	r3, [r7, #12]
   2f2f0:	681b      	ldr	r3, [r3, #0]
   2f2f2:	68f8      	ldr	r0, [r7, #12]
   2f2f4:	2200      	movs	r2, #0
   2f2f6:	2103      	movs	r1, #3
   2f2f8:	4798      	blx	r3
	
	return rc;
   2f2fa:	697b      	ldr	r3, [r7, #20]
}
   2f2fc:	0018      	movs	r0, r3
   2f2fe:	46bd      	mov	sp, r7
   2f300:	b007      	add	sp, #28
   2f302:	bd90      	pop	{r4, r7, pc}
   2f304:	0002e689 	.word	0x0002e689

0002f308 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f308:	b580      	push	{r7, lr}
   2f30a:	b082      	sub	sp, #8
   2f30c:	af00      	add	r7, sp, #0
   2f30e:	6078      	str	r0, [r7, #4]
   2f310:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f312:	687b      	ldr	r3, [r7, #4]
   2f314:	69db      	ldr	r3, [r3, #28]
   2f316:	683a      	ldr	r2, [r7, #0]
   2f318:	0011      	movs	r1, r2
   2f31a:	0018      	movs	r0, r3
   2f31c:	4b03      	ldr	r3, [pc, #12]	; (2f32c <mqtt_yield+0x24>)
   2f31e:	4798      	blx	r3
   2f320:	0003      	movs	r3, r0
   2f322:	0018      	movs	r0, r3
   2f324:	46bd      	mov	sp, r7
   2f326:	b002      	add	sp, #8
   2f328:	bd80      	pop	{r7, pc}
   2f32a:	46c0      	nop			; (mov r8, r8)
   2f32c:	0002e491 	.word	0x0002e491

0002f330 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f330:	b590      	push	{r4, r7, lr}
   2f332:	b085      	sub	sp, #20
   2f334:	af00      	add	r7, sp, #0
   2f336:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f338:	2300      	movs	r3, #0
   2f33a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f33c:	687b      	ldr	r3, [r7, #4]
   2f33e:	7a1b      	ldrb	r3, [r3, #8]
   2f340:	2b03      	cmp	r3, #3
   2f342:	d102      	bne.n	2f34a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f344:	230c      	movs	r3, #12
   2f346:	60fb      	str	r3, [r7, #12]
   2f348:	e005      	b.n	2f356 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f34a:	687b      	ldr	r3, [r7, #4]
   2f34c:	7a1b      	ldrb	r3, [r3, #8]
   2f34e:	2b04      	cmp	r3, #4
   2f350:	d101      	bne.n	2f356 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f352:	230a      	movs	r3, #10
   2f354:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f356:	687b      	ldr	r3, [r7, #4]
   2f358:	68d8      	ldr	r0, [r3, #12]
   2f35a:	6919      	ldr	r1, [r3, #16]
   2f35c:	695a      	ldr	r2, [r3, #20]
   2f35e:	4b25      	ldr	r3, [pc, #148]	; (2f3f4 <MQTTSerialize_connectLength+0xc4>)
   2f360:	4798      	blx	r3
   2f362:	0003      	movs	r3, r0
   2f364:	3302      	adds	r3, #2
   2f366:	68fa      	ldr	r2, [r7, #12]
   2f368:	18d3      	adds	r3, r2, r3
   2f36a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f36c:	687b      	ldr	r3, [r7, #4]
   2f36e:	7edb      	ldrb	r3, [r3, #27]
   2f370:	2b00      	cmp	r3, #0
   2f372:	d013      	beq.n	2f39c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f374:	687b      	ldr	r3, [r7, #4]
   2f376:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f378:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f37c:	4b1d      	ldr	r3, [pc, #116]	; (2f3f4 <MQTTSerialize_connectLength+0xc4>)
   2f37e:	4798      	blx	r3
   2f380:	0003      	movs	r3, r0
   2f382:	1c9c      	adds	r4, r3, #2
   2f384:	687b      	ldr	r3, [r7, #4]
   2f386:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f388:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f38c:	4b19      	ldr	r3, [pc, #100]	; (2f3f4 <MQTTSerialize_connectLength+0xc4>)
   2f38e:	4798      	blx	r3
   2f390:	0003      	movs	r3, r0
   2f392:	18e3      	adds	r3, r4, r3
   2f394:	3302      	adds	r3, #2
   2f396:	68fa      	ldr	r2, [r7, #12]
   2f398:	18d3      	adds	r3, r2, r3
   2f39a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f39c:	687b      	ldr	r3, [r7, #4]
   2f39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f3a0:	2b00      	cmp	r3, #0
   2f3a2:	d103      	bne.n	2f3ac <MQTTSerialize_connectLength+0x7c>
   2f3a4:	687b      	ldr	r3, [r7, #4]
   2f3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f3a8:	2b00      	cmp	r3, #0
   2f3aa:	d00a      	beq.n	2f3c2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f3ac:	687b      	ldr	r3, [r7, #4]
   2f3ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f3b0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f3b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f3b4:	4b0f      	ldr	r3, [pc, #60]	; (2f3f4 <MQTTSerialize_connectLength+0xc4>)
   2f3b6:	4798      	blx	r3
   2f3b8:	0003      	movs	r3, r0
   2f3ba:	3302      	adds	r3, #2
   2f3bc:	68fa      	ldr	r2, [r7, #12]
   2f3be:	18d3      	adds	r3, r2, r3
   2f3c0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f3c2:	687b      	ldr	r3, [r7, #4]
   2f3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f3c6:	2b00      	cmp	r3, #0
   2f3c8:	d103      	bne.n	2f3d2 <MQTTSerialize_connectLength+0xa2>
   2f3ca:	687b      	ldr	r3, [r7, #4]
   2f3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f3ce:	2b00      	cmp	r3, #0
   2f3d0:	d00a      	beq.n	2f3e8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f3d2:	687b      	ldr	r3, [r7, #4]
   2f3d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f3d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f3d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f3da:	4b06      	ldr	r3, [pc, #24]	; (2f3f4 <MQTTSerialize_connectLength+0xc4>)
   2f3dc:	4798      	blx	r3
   2f3de:	0003      	movs	r3, r0
   2f3e0:	3302      	adds	r3, #2
   2f3e2:	68fa      	ldr	r2, [r7, #12]
   2f3e4:	18d3      	adds	r3, r2, r3
   2f3e6:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f3e8:	68fb      	ldr	r3, [r7, #12]
}
   2f3ea:	0018      	movs	r0, r3
   2f3ec:	46bd      	mov	sp, r7
   2f3ee:	b005      	add	sp, #20
   2f3f0:	bd90      	pop	{r4, r7, pc}
   2f3f2:	46c0      	nop			; (mov r8, r8)
   2f3f4:	0002fda1 	.word	0x0002fda1

0002f3f8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f3f8:	b590      	push	{r4, r7, lr}
   2f3fa:	b08b      	sub	sp, #44	; 0x2c
   2f3fc:	af00      	add	r7, sp, #0
   2f3fe:	60f8      	str	r0, [r7, #12]
   2f400:	60b9      	str	r1, [r7, #8]
   2f402:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f404:	68fb      	ldr	r3, [r7, #12]
   2f406:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f408:	2300      	movs	r3, #0
   2f40a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f40c:	2300      	movs	r3, #0
   2f40e:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f410:	2300      	movs	r3, #0
   2f412:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f414:	2301      	movs	r3, #1
   2f416:	425b      	negs	r3, r3
   2f418:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f41a:	687b      	ldr	r3, [r7, #4]
   2f41c:	0018      	movs	r0, r3
   2f41e:	4b8c      	ldr	r3, [pc, #560]	; (2f650 <MQTTSerialize_connect+0x258>)
   2f420:	4798      	blx	r3
   2f422:	0003      	movs	r3, r0
   2f424:	623b      	str	r3, [r7, #32]
   2f426:	6a3b      	ldr	r3, [r7, #32]
   2f428:	0018      	movs	r0, r3
   2f42a:	4b8a      	ldr	r3, [pc, #552]	; (2f654 <MQTTSerialize_connect+0x25c>)
   2f42c:	4798      	blx	r3
   2f42e:	0002      	movs	r2, r0
   2f430:	68bb      	ldr	r3, [r7, #8]
   2f432:	429a      	cmp	r2, r3
   2f434:	dd03      	ble.n	2f43e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f436:	2302      	movs	r3, #2
   2f438:	425b      	negs	r3, r3
   2f43a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f43c:	e103      	b.n	2f646 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2f43e:	2318      	movs	r3, #24
   2f440:	18fb      	adds	r3, r7, r3
   2f442:	2200      	movs	r2, #0
   2f444:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2f446:	2318      	movs	r3, #24
   2f448:	18fb      	adds	r3, r7, r3
   2f44a:	781a      	ldrb	r2, [r3, #0]
   2f44c:	210f      	movs	r1, #15
   2f44e:	400a      	ands	r2, r1
   2f450:	1c11      	adds	r1, r2, #0
   2f452:	2210      	movs	r2, #16
   2f454:	430a      	orrs	r2, r1
   2f456:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f458:	2318      	movs	r3, #24
   2f45a:	18fb      	adds	r3, r7, r3
   2f45c:	781a      	ldrb	r2, [r3, #0]
   2f45e:	231c      	movs	r3, #28
   2f460:	18fb      	adds	r3, r7, r3
   2f462:	0011      	movs	r1, r2
   2f464:	0018      	movs	r0, r3
   2f466:	4b7c      	ldr	r3, [pc, #496]	; (2f658 <MQTTSerialize_connect+0x260>)
   2f468:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2f46a:	69fb      	ldr	r3, [r7, #28]
   2f46c:	6a3a      	ldr	r2, [r7, #32]
   2f46e:	0011      	movs	r1, r2
   2f470:	0018      	movs	r0, r3
   2f472:	4b7a      	ldr	r3, [pc, #488]	; (2f65c <MQTTSerialize_connect+0x264>)
   2f474:	4798      	blx	r3
   2f476:	0002      	movs	r2, r0
   2f478:	69fb      	ldr	r3, [r7, #28]
   2f47a:	189b      	adds	r3, r3, r2
   2f47c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2f47e:	687b      	ldr	r3, [r7, #4]
   2f480:	7a1b      	ldrb	r3, [r3, #8]
   2f482:	2b04      	cmp	r3, #4
   2f484:	d10d      	bne.n	2f4a2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2f486:	4a76      	ldr	r2, [pc, #472]	; (2f660 <MQTTSerialize_connect+0x268>)
   2f488:	231c      	movs	r3, #28
   2f48a:	18fb      	adds	r3, r7, r3
   2f48c:	0011      	movs	r1, r2
   2f48e:	0018      	movs	r0, r3
   2f490:	4b74      	ldr	r3, [pc, #464]	; (2f664 <MQTTSerialize_connect+0x26c>)
   2f492:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2f494:	231c      	movs	r3, #28
   2f496:	18fb      	adds	r3, r7, r3
   2f498:	2104      	movs	r1, #4
   2f49a:	0018      	movs	r0, r3
   2f49c:	4b6e      	ldr	r3, [pc, #440]	; (2f658 <MQTTSerialize_connect+0x260>)
   2f49e:	4798      	blx	r3
   2f4a0:	e00c      	b.n	2f4bc <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2f4a2:	4a71      	ldr	r2, [pc, #452]	; (2f668 <MQTTSerialize_connect+0x270>)
   2f4a4:	231c      	movs	r3, #28
   2f4a6:	18fb      	adds	r3, r7, r3
   2f4a8:	0011      	movs	r1, r2
   2f4aa:	0018      	movs	r0, r3
   2f4ac:	4b6d      	ldr	r3, [pc, #436]	; (2f664 <MQTTSerialize_connect+0x26c>)
   2f4ae:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2f4b0:	231c      	movs	r3, #28
   2f4b2:	18fb      	adds	r3, r7, r3
   2f4b4:	2103      	movs	r1, #3
   2f4b6:	0018      	movs	r0, r3
   2f4b8:	4b67      	ldr	r3, [pc, #412]	; (2f658 <MQTTSerialize_connect+0x260>)
   2f4ba:	4798      	blx	r3
	}

	flags.all = 0;
   2f4bc:	2314      	movs	r3, #20
   2f4be:	18fb      	adds	r3, r7, r3
   2f4c0:	2200      	movs	r2, #0
   2f4c2:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2f4c4:	687b      	ldr	r3, [r7, #4]
   2f4c6:	7e9b      	ldrb	r3, [r3, #26]
   2f4c8:	1c1a      	adds	r2, r3, #0
   2f4ca:	2301      	movs	r3, #1
   2f4cc:	4013      	ands	r3, r2
   2f4ce:	b2da      	uxtb	r2, r3
   2f4d0:	2314      	movs	r3, #20
   2f4d2:	18fb      	adds	r3, r7, r3
   2f4d4:	2101      	movs	r1, #1
   2f4d6:	400a      	ands	r2, r1
   2f4d8:	1890      	adds	r0, r2, r2
   2f4da:	781a      	ldrb	r2, [r3, #0]
   2f4dc:	2102      	movs	r1, #2
   2f4de:	438a      	bics	r2, r1
   2f4e0:	1c11      	adds	r1, r2, #0
   2f4e2:	1c02      	adds	r2, r0, #0
   2f4e4:	430a      	orrs	r2, r1
   2f4e6:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2f4e8:	687b      	ldr	r3, [r7, #4]
   2f4ea:	7edb      	ldrb	r3, [r3, #27]
   2f4ec:	1e5a      	subs	r2, r3, #1
   2f4ee:	4193      	sbcs	r3, r2
   2f4f0:	b2da      	uxtb	r2, r3
   2f4f2:	2314      	movs	r3, #20
   2f4f4:	18fb      	adds	r3, r7, r3
   2f4f6:	2101      	movs	r1, #1
   2f4f8:	400a      	ands	r2, r1
   2f4fa:	0090      	lsls	r0, r2, #2
   2f4fc:	781a      	ldrb	r2, [r3, #0]
   2f4fe:	2104      	movs	r1, #4
   2f500:	438a      	bics	r2, r1
   2f502:	1c11      	adds	r1, r2, #0
   2f504:	1c02      	adds	r2, r0, #0
   2f506:	430a      	orrs	r2, r1
   2f508:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2f50a:	2314      	movs	r3, #20
   2f50c:	18fb      	adds	r3, r7, r3
   2f50e:	781b      	ldrb	r3, [r3, #0]
   2f510:	2204      	movs	r2, #4
   2f512:	4013      	ands	r3, r2
   2f514:	b2db      	uxtb	r3, r3
   2f516:	2b00      	cmp	r3, #0
   2f518:	d025      	beq.n	2f566 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2f51a:	687b      	ldr	r3, [r7, #4]
   2f51c:	223d      	movs	r2, #61	; 0x3d
   2f51e:	5c9b      	ldrb	r3, [r3, r2]
   2f520:	1c1a      	adds	r2, r3, #0
   2f522:	2303      	movs	r3, #3
   2f524:	4013      	ands	r3, r2
   2f526:	b2da      	uxtb	r2, r3
   2f528:	2314      	movs	r3, #20
   2f52a:	18fb      	adds	r3, r7, r3
   2f52c:	2103      	movs	r1, #3
   2f52e:	400a      	ands	r2, r1
   2f530:	00d0      	lsls	r0, r2, #3
   2f532:	781a      	ldrb	r2, [r3, #0]
   2f534:	2118      	movs	r1, #24
   2f536:	438a      	bics	r2, r1
   2f538:	1c11      	adds	r1, r2, #0
   2f53a:	1c02      	adds	r2, r0, #0
   2f53c:	430a      	orrs	r2, r1
   2f53e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f540:	687b      	ldr	r3, [r7, #4]
   2f542:	223c      	movs	r2, #60	; 0x3c
   2f544:	5c9b      	ldrb	r3, [r3, r2]
   2f546:	1c1a      	adds	r2, r3, #0
   2f548:	2301      	movs	r3, #1
   2f54a:	4013      	ands	r3, r2
   2f54c:	b2da      	uxtb	r2, r3
   2f54e:	2314      	movs	r3, #20
   2f550:	18fb      	adds	r3, r7, r3
   2f552:	2101      	movs	r1, #1
   2f554:	400a      	ands	r2, r1
   2f556:	0150      	lsls	r0, r2, #5
   2f558:	781a      	ldrb	r2, [r3, #0]
   2f55a:	2120      	movs	r1, #32
   2f55c:	438a      	bics	r2, r1
   2f55e:	1c11      	adds	r1, r2, #0
   2f560:	1c02      	adds	r2, r0, #0
   2f562:	430a      	orrs	r2, r1
   2f564:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f566:	687b      	ldr	r3, [r7, #4]
   2f568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f56a:	2b00      	cmp	r3, #0
   2f56c:	d103      	bne.n	2f576 <MQTTSerialize_connect+0x17e>
   2f56e:	687b      	ldr	r3, [r7, #4]
   2f570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f572:	2b00      	cmp	r3, #0
   2f574:	d006      	beq.n	2f584 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f576:	2314      	movs	r3, #20
   2f578:	18fb      	adds	r3, r7, r3
   2f57a:	781a      	ldrb	r2, [r3, #0]
   2f57c:	2180      	movs	r1, #128	; 0x80
   2f57e:	4249      	negs	r1, r1
   2f580:	430a      	orrs	r2, r1
   2f582:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f584:	687b      	ldr	r3, [r7, #4]
   2f586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f588:	2b00      	cmp	r3, #0
   2f58a:	d103      	bne.n	2f594 <MQTTSerialize_connect+0x19c>
   2f58c:	687b      	ldr	r3, [r7, #4]
   2f58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f590:	2b00      	cmp	r3, #0
   2f592:	d005      	beq.n	2f5a0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f594:	2314      	movs	r3, #20
   2f596:	18fb      	adds	r3, r7, r3
   2f598:	781a      	ldrb	r2, [r3, #0]
   2f59a:	2140      	movs	r1, #64	; 0x40
   2f59c:	430a      	orrs	r2, r1
   2f59e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f5a0:	2314      	movs	r3, #20
   2f5a2:	18fb      	adds	r3, r7, r3
   2f5a4:	781a      	ldrb	r2, [r3, #0]
   2f5a6:	231c      	movs	r3, #28
   2f5a8:	18fb      	adds	r3, r7, r3
   2f5aa:	0011      	movs	r1, r2
   2f5ac:	0018      	movs	r0, r3
   2f5ae:	4b2a      	ldr	r3, [pc, #168]	; (2f658 <MQTTSerialize_connect+0x260>)
   2f5b0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f5b2:	687b      	ldr	r3, [r7, #4]
   2f5b4:	8b1b      	ldrh	r3, [r3, #24]
   2f5b6:	001a      	movs	r2, r3
   2f5b8:	231c      	movs	r3, #28
   2f5ba:	18fb      	adds	r3, r7, r3
   2f5bc:	0011      	movs	r1, r2
   2f5be:	0018      	movs	r0, r3
   2f5c0:	4b2a      	ldr	r3, [pc, #168]	; (2f66c <MQTTSerialize_connect+0x274>)
   2f5c2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f5c4:	687b      	ldr	r3, [r7, #4]
   2f5c6:	221c      	movs	r2, #28
   2f5c8:	18b8      	adds	r0, r7, r2
   2f5ca:	68d9      	ldr	r1, [r3, #12]
   2f5cc:	691a      	ldr	r2, [r3, #16]
   2f5ce:	695b      	ldr	r3, [r3, #20]
   2f5d0:	4c27      	ldr	r4, [pc, #156]	; (2f670 <MQTTSerialize_connect+0x278>)
   2f5d2:	47a0      	blx	r4
	if (options->willFlag)
   2f5d4:	687b      	ldr	r3, [r7, #4]
   2f5d6:	7edb      	ldrb	r3, [r3, #27]
   2f5d8:	2b00      	cmp	r3, #0
   2f5da:	d00f      	beq.n	2f5fc <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2f5dc:	687b      	ldr	r3, [r7, #4]
   2f5de:	221c      	movs	r2, #28
   2f5e0:	18b8      	adds	r0, r7, r2
   2f5e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2f5e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f5e8:	4c21      	ldr	r4, [pc, #132]	; (2f670 <MQTTSerialize_connect+0x278>)
   2f5ea:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2f5ec:	687b      	ldr	r3, [r7, #4]
   2f5ee:	221c      	movs	r2, #28
   2f5f0:	18b8      	adds	r0, r7, r2
   2f5f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2f5f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f5f8:	4c1d      	ldr	r4, [pc, #116]	; (2f670 <MQTTSerialize_connect+0x278>)
   2f5fa:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2f5fc:	2314      	movs	r3, #20
   2f5fe:	18fb      	adds	r3, r7, r3
   2f600:	781b      	ldrb	r3, [r3, #0]
   2f602:	227f      	movs	r2, #127	; 0x7f
   2f604:	4393      	bics	r3, r2
   2f606:	b2db      	uxtb	r3, r3
   2f608:	2b00      	cmp	r3, #0
   2f60a:	d007      	beq.n	2f61c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2f60c:	687b      	ldr	r3, [r7, #4]
   2f60e:	221c      	movs	r2, #28
   2f610:	18b8      	adds	r0, r7, r2
   2f612:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2f614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f618:	4c15      	ldr	r4, [pc, #84]	; (2f670 <MQTTSerialize_connect+0x278>)
   2f61a:	47a0      	blx	r4
	if (flags.bits.password)
   2f61c:	2314      	movs	r3, #20
   2f61e:	18fb      	adds	r3, r7, r3
   2f620:	781b      	ldrb	r3, [r3, #0]
   2f622:	2240      	movs	r2, #64	; 0x40
   2f624:	4013      	ands	r3, r2
   2f626:	b2db      	uxtb	r3, r3
   2f628:	2b00      	cmp	r3, #0
   2f62a:	d007      	beq.n	2f63c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2f62c:	687b      	ldr	r3, [r7, #4]
   2f62e:	221c      	movs	r2, #28
   2f630:	18b8      	adds	r0, r7, r2
   2f632:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2f634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f638:	4c0d      	ldr	r4, [pc, #52]	; (2f670 <MQTTSerialize_connect+0x278>)
   2f63a:	47a0      	blx	r4

	rc = ptr - buf;
   2f63c:	69fb      	ldr	r3, [r7, #28]
   2f63e:	001a      	movs	r2, r3
   2f640:	68fb      	ldr	r3, [r7, #12]
   2f642:	1ad3      	subs	r3, r2, r3
   2f644:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f648:	0018      	movs	r0, r3
   2f64a:	46bd      	mov	sp, r7
   2f64c:	b00b      	add	sp, #44	; 0x2c
   2f64e:	bd90      	pop	{r4, r7, pc}
   2f650:	0002f331 	.word	0x0002f331
   2f654:	0002fac5 	.word	0x0002fac5
   2f658:	0002fbe7 	.word	0x0002fbe7
   2f65c:	0002f9cd 	.word	0x0002f9cd
   2f660:	00039518 	.word	0x00039518
   2f664:	0002fc69 	.word	0x0002fc69
   2f668:	00039520 	.word	0x00039520
   2f66c:	0002fc11 	.word	0x0002fc11
   2f670:	0002fcb9 	.word	0x0002fcb9

0002f674 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2f674:	b580      	push	{r7, lr}
   2f676:	b08a      	sub	sp, #40	; 0x28
   2f678:	af00      	add	r7, sp, #0
   2f67a:	60f8      	str	r0, [r7, #12]
   2f67c:	60b9      	str	r1, [r7, #8]
   2f67e:	607a      	str	r2, [r7, #4]
   2f680:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f682:	2300      	movs	r3, #0
   2f684:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f686:	687b      	ldr	r3, [r7, #4]
   2f688:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f68a:	2300      	movs	r3, #0
   2f68c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f68e:	2300      	movs	r3, #0
   2f690:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2f692:	2300      	movs	r3, #0
   2f694:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f696:	2318      	movs	r3, #24
   2f698:	18fb      	adds	r3, r7, r3
   2f69a:	0018      	movs	r0, r3
   2f69c:	4b25      	ldr	r3, [pc, #148]	; (2f734 <MQTTDeserialize_connack+0xc0>)
   2f69e:	4798      	blx	r3
   2f6a0:	0003      	movs	r3, r0
   2f6a2:	001a      	movs	r2, r3
   2f6a4:	231c      	movs	r3, #28
   2f6a6:	18fb      	adds	r3, r7, r3
   2f6a8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2f6aa:	231c      	movs	r3, #28
   2f6ac:	18fb      	adds	r3, r7, r3
   2f6ae:	781b      	ldrb	r3, [r3, #0]
   2f6b0:	220f      	movs	r2, #15
   2f6b2:	4393      	bics	r3, r2
   2f6b4:	b2db      	uxtb	r3, r3
   2f6b6:	2b20      	cmp	r3, #32
   2f6b8:	d134      	bne.n	2f724 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f6ba:	69bb      	ldr	r3, [r7, #24]
   2f6bc:	2214      	movs	r2, #20
   2f6be:	18ba      	adds	r2, r7, r2
   2f6c0:	0011      	movs	r1, r2
   2f6c2:	0018      	movs	r0, r3
   2f6c4:	4b1c      	ldr	r3, [pc, #112]	; (2f738 <MQTTDeserialize_connack+0xc4>)
   2f6c6:	4798      	blx	r3
   2f6c8:	0003      	movs	r3, r0
   2f6ca:	627b      	str	r3, [r7, #36]	; 0x24
   2f6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f6ce:	69bb      	ldr	r3, [r7, #24]
   2f6d0:	189b      	adds	r3, r3, r2
   2f6d2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f6d4:	69bb      	ldr	r3, [r7, #24]
   2f6d6:	697a      	ldr	r2, [r7, #20]
   2f6d8:	189b      	adds	r3, r3, r2
   2f6da:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f6dc:	6a3b      	ldr	r3, [r7, #32]
   2f6de:	69ba      	ldr	r2, [r7, #24]
   2f6e0:	1a9b      	subs	r3, r3, r2
   2f6e2:	2b01      	cmp	r3, #1
   2f6e4:	dd20      	ble.n	2f728 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f6e6:	2318      	movs	r3, #24
   2f6e8:	18fb      	adds	r3, r7, r3
   2f6ea:	0018      	movs	r0, r3
   2f6ec:	4b11      	ldr	r3, [pc, #68]	; (2f734 <MQTTDeserialize_connack+0xc0>)
   2f6ee:	4798      	blx	r3
   2f6f0:	0003      	movs	r3, r0
   2f6f2:	001a      	movs	r2, r3
   2f6f4:	2310      	movs	r3, #16
   2f6f6:	18fb      	adds	r3, r7, r3
   2f6f8:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f6fa:	2310      	movs	r3, #16
   2f6fc:	18fb      	adds	r3, r7, r3
   2f6fe:	781b      	ldrb	r3, [r3, #0]
   2f700:	061b      	lsls	r3, r3, #24
   2f702:	0fdb      	lsrs	r3, r3, #31
   2f704:	b2db      	uxtb	r3, r3
   2f706:	001a      	movs	r2, r3
   2f708:	68fb      	ldr	r3, [r7, #12]
   2f70a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f70c:	2318      	movs	r3, #24
   2f70e:	18fb      	adds	r3, r7, r3
   2f710:	0018      	movs	r0, r3
   2f712:	4b08      	ldr	r3, [pc, #32]	; (2f734 <MQTTDeserialize_connack+0xc0>)
   2f714:	4798      	blx	r3
   2f716:	0003      	movs	r3, r0
   2f718:	001a      	movs	r2, r3
   2f71a:	68bb      	ldr	r3, [r7, #8]
   2f71c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f71e:	2301      	movs	r3, #1
   2f720:	627b      	str	r3, [r7, #36]	; 0x24
   2f722:	e002      	b.n	2f72a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f724:	46c0      	nop			; (mov r8, r8)
   2f726:	e000      	b.n	2f72a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f728:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f72c:	0018      	movs	r0, r3
   2f72e:	46bd      	mov	sp, r7
   2f730:	b00a      	add	sp, #40	; 0x28
   2f732:	bd80      	pop	{r7, pc}
   2f734:	0002fbbb 	.word	0x0002fbbb
   2f738:	0002fb55 	.word	0x0002fb55

0002f73c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f73c:	b580      	push	{r7, lr}
   2f73e:	b088      	sub	sp, #32
   2f740:	af00      	add	r7, sp, #0
   2f742:	60f8      	str	r0, [r7, #12]
   2f744:	60b9      	str	r1, [r7, #8]
   2f746:	1dfb      	adds	r3, r7, #7
   2f748:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f74a:	2300      	movs	r3, #0
   2f74c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f74e:	2301      	movs	r3, #1
   2f750:	425b      	negs	r3, r3
   2f752:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f754:	68fb      	ldr	r3, [r7, #12]
   2f756:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f758:	68bb      	ldr	r3, [r7, #8]
   2f75a:	2b01      	cmp	r3, #1
   2f75c:	dc03      	bgt.n	2f766 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f75e:	2302      	movs	r3, #2
   2f760:	425b      	negs	r3, r3
   2f762:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f764:	e029      	b.n	2f7ba <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f766:	2318      	movs	r3, #24
   2f768:	18fb      	adds	r3, r7, r3
   2f76a:	2200      	movs	r2, #0
   2f76c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f76e:	1dfb      	adds	r3, r7, #7
   2f770:	781b      	ldrb	r3, [r3, #0]
   2f772:	220f      	movs	r2, #15
   2f774:	4013      	ands	r3, r2
   2f776:	b2da      	uxtb	r2, r3
   2f778:	2318      	movs	r3, #24
   2f77a:	18fb      	adds	r3, r7, r3
   2f77c:	0110      	lsls	r0, r2, #4
   2f77e:	781a      	ldrb	r2, [r3, #0]
   2f780:	210f      	movs	r1, #15
   2f782:	400a      	ands	r2, r1
   2f784:	1c11      	adds	r1, r2, #0
   2f786:	1c02      	adds	r2, r0, #0
   2f788:	430a      	orrs	r2, r1
   2f78a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f78c:	2318      	movs	r3, #24
   2f78e:	18fb      	adds	r3, r7, r3
   2f790:	781a      	ldrb	r2, [r3, #0]
   2f792:	2314      	movs	r3, #20
   2f794:	18fb      	adds	r3, r7, r3
   2f796:	0011      	movs	r1, r2
   2f798:	0018      	movs	r0, r3
   2f79a:	4b0a      	ldr	r3, [pc, #40]	; (2f7c4 <MQTTSerialize_zero+0x88>)
   2f79c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f79e:	697b      	ldr	r3, [r7, #20]
   2f7a0:	2100      	movs	r1, #0
   2f7a2:	0018      	movs	r0, r3
   2f7a4:	4b08      	ldr	r3, [pc, #32]	; (2f7c8 <MQTTSerialize_zero+0x8c>)
   2f7a6:	4798      	blx	r3
   2f7a8:	0002      	movs	r2, r0
   2f7aa:	697b      	ldr	r3, [r7, #20]
   2f7ac:	189b      	adds	r3, r3, r2
   2f7ae:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f7b0:	697b      	ldr	r3, [r7, #20]
   2f7b2:	001a      	movs	r2, r3
   2f7b4:	68fb      	ldr	r3, [r7, #12]
   2f7b6:	1ad3      	subs	r3, r2, r3
   2f7b8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f7ba:	69fb      	ldr	r3, [r7, #28]
}
   2f7bc:	0018      	movs	r0, r3
   2f7be:	46bd      	mov	sp, r7
   2f7c0:	b008      	add	sp, #32
   2f7c2:	bd80      	pop	{r7, pc}
   2f7c4:	0002fbe7 	.word	0x0002fbe7
   2f7c8:	0002f9cd 	.word	0x0002f9cd

0002f7cc <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f7cc:	b580      	push	{r7, lr}
   2f7ce:	b082      	sub	sp, #8
   2f7d0:	af00      	add	r7, sp, #0
   2f7d2:	6078      	str	r0, [r7, #4]
   2f7d4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f7d6:	6839      	ldr	r1, [r7, #0]
   2f7d8:	687b      	ldr	r3, [r7, #4]
   2f7da:	220e      	movs	r2, #14
   2f7dc:	0018      	movs	r0, r3
   2f7de:	4b03      	ldr	r3, [pc, #12]	; (2f7ec <MQTTSerialize_disconnect+0x20>)
   2f7e0:	4798      	blx	r3
   2f7e2:	0003      	movs	r3, r0
}
   2f7e4:	0018      	movs	r0, r3
   2f7e6:	46bd      	mov	sp, r7
   2f7e8:	b002      	add	sp, #8
   2f7ea:	bd80      	pop	{r7, pc}
   2f7ec:	0002f73d 	.word	0x0002f73d

0002f7f0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f7f0:	b580      	push	{r7, lr}
   2f7f2:	b082      	sub	sp, #8
   2f7f4:	af00      	add	r7, sp, #0
   2f7f6:	6078      	str	r0, [r7, #4]
   2f7f8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f7fa:	6839      	ldr	r1, [r7, #0]
   2f7fc:	687b      	ldr	r3, [r7, #4]
   2f7fe:	220c      	movs	r2, #12
   2f800:	0018      	movs	r0, r3
   2f802:	4b03      	ldr	r3, [pc, #12]	; (2f810 <MQTTSerialize_pingreq+0x20>)
   2f804:	4798      	blx	r3
   2f806:	0003      	movs	r3, r0
}
   2f808:	0018      	movs	r0, r3
   2f80a:	46bd      	mov	sp, r7
   2f80c:	b002      	add	sp, #8
   2f80e:	bd80      	pop	{r7, pc}
   2f810:	0002f73d 	.word	0x0002f73d

0002f814 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f814:	b580      	push	{r7, lr}
   2f816:	b08a      	sub	sp, #40	; 0x28
   2f818:	af00      	add	r7, sp, #0
   2f81a:	60f8      	str	r0, [r7, #12]
   2f81c:	60b9      	str	r1, [r7, #8]
   2f81e:	607a      	str	r2, [r7, #4]
   2f820:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f822:	2300      	movs	r3, #0
   2f824:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f828:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f82a:	2300      	movs	r3, #0
   2f82c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f82e:	2300      	movs	r3, #0
   2f830:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f832:	2300      	movs	r3, #0
   2f834:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f836:	2318      	movs	r3, #24
   2f838:	18fb      	adds	r3, r7, r3
   2f83a:	0018      	movs	r0, r3
   2f83c:	4b32      	ldr	r3, [pc, #200]	; (2f908 <MQTTDeserialize_publish+0xf4>)
   2f83e:	4798      	blx	r3
   2f840:	0003      	movs	r3, r0
   2f842:	001a      	movs	r2, r3
   2f844:	231c      	movs	r3, #28
   2f846:	18fb      	adds	r3, r7, r3
   2f848:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f84a:	231c      	movs	r3, #28
   2f84c:	18fb      	adds	r3, r7, r3
   2f84e:	781b      	ldrb	r3, [r3, #0]
   2f850:	220f      	movs	r2, #15
   2f852:	4393      	bics	r3, r2
   2f854:	b2db      	uxtb	r3, r3
   2f856:	2b30      	cmp	r3, #48	; 0x30
   2f858:	d150      	bne.n	2f8fc <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f85a:	231c      	movs	r3, #28
   2f85c:	18fb      	adds	r3, r7, r3
   2f85e:	781b      	ldrb	r3, [r3, #0]
   2f860:	071b      	lsls	r3, r3, #28
   2f862:	0fdb      	lsrs	r3, r3, #31
   2f864:	b2db      	uxtb	r3, r3
   2f866:	001a      	movs	r2, r3
   2f868:	68fb      	ldr	r3, [r7, #12]
   2f86a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f86c:	231c      	movs	r3, #28
   2f86e:	18fb      	adds	r3, r7, r3
   2f870:	781b      	ldrb	r3, [r3, #0]
   2f872:	075b      	lsls	r3, r3, #29
   2f874:	0f9b      	lsrs	r3, r3, #30
   2f876:	b2db      	uxtb	r3, r3
   2f878:	001a      	movs	r2, r3
   2f87a:	68bb      	ldr	r3, [r7, #8]
   2f87c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f87e:	231c      	movs	r3, #28
   2f880:	18fb      	adds	r3, r7, r3
   2f882:	781b      	ldrb	r3, [r3, #0]
   2f884:	07db      	lsls	r3, r3, #31
   2f886:	0fdb      	lsrs	r3, r3, #31
   2f888:	b2db      	uxtb	r3, r3
   2f88a:	001a      	movs	r2, r3
   2f88c:	687b      	ldr	r3, [r7, #4]
   2f88e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f890:	69bb      	ldr	r3, [r7, #24]
   2f892:	2214      	movs	r2, #20
   2f894:	18ba      	adds	r2, r7, r2
   2f896:	0011      	movs	r1, r2
   2f898:	0018      	movs	r0, r3
   2f89a:	4b1c      	ldr	r3, [pc, #112]	; (2f90c <MQTTDeserialize_publish+0xf8>)
   2f89c:	4798      	blx	r3
   2f89e:	0003      	movs	r3, r0
   2f8a0:	627b      	str	r3, [r7, #36]	; 0x24
   2f8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f8a4:	69bb      	ldr	r3, [r7, #24]
   2f8a6:	189b      	adds	r3, r3, r2
   2f8a8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f8aa:	69bb      	ldr	r3, [r7, #24]
   2f8ac:	697a      	ldr	r2, [r7, #20]
   2f8ae:	189b      	adds	r3, r3, r2
   2f8b0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f8b2:	6a3a      	ldr	r2, [r7, #32]
   2f8b4:	2318      	movs	r3, #24
   2f8b6:	18f9      	adds	r1, r7, r3
   2f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f8ba:	0018      	movs	r0, r3
   2f8bc:	4b14      	ldr	r3, [pc, #80]	; (2f910 <MQTTDeserialize_publish+0xfc>)
   2f8be:	4798      	blx	r3
   2f8c0:	1e03      	subs	r3, r0, #0
   2f8c2:	d01c      	beq.n	2f8fe <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f8c4:	6a3b      	ldr	r3, [r7, #32]
   2f8c6:	69ba      	ldr	r2, [r7, #24]
   2f8c8:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f8ca:	d418      	bmi.n	2f8fe <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f8cc:	68bb      	ldr	r3, [r7, #8]
   2f8ce:	681b      	ldr	r3, [r3, #0]
   2f8d0:	2b00      	cmp	r3, #0
   2f8d2:	dd08      	ble.n	2f8e6 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f8d4:	2318      	movs	r3, #24
   2f8d6:	18fb      	adds	r3, r7, r3
   2f8d8:	0018      	movs	r0, r3
   2f8da:	4b0e      	ldr	r3, [pc, #56]	; (2f914 <MQTTDeserialize_publish+0x100>)
   2f8dc:	4798      	blx	r3
   2f8de:	0003      	movs	r3, r0
   2f8e0:	b29a      	uxth	r2, r3
   2f8e2:	683b      	ldr	r3, [r7, #0]
   2f8e4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f8e6:	6a3b      	ldr	r3, [r7, #32]
   2f8e8:	69ba      	ldr	r2, [r7, #24]
   2f8ea:	1a9a      	subs	r2, r3, r2
   2f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f8ee:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f8f0:	69ba      	ldr	r2, [r7, #24]
   2f8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f8f4:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f8f6:	2301      	movs	r3, #1
   2f8f8:	627b      	str	r3, [r7, #36]	; 0x24
   2f8fa:	e000      	b.n	2f8fe <MQTTDeserialize_publish+0xea>
		goto exit;
   2f8fc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f900:	0018      	movs	r0, r3
   2f902:	46bd      	mov	sp, r7
   2f904:	b00a      	add	sp, #40	; 0x28
   2f906:	bd80      	pop	{r7, pc}
   2f908:	0002fbbb 	.word	0x0002fbbb
   2f90c:	0002fb55 	.word	0x0002fb55
   2f910:	0002fd39 	.word	0x0002fd39
   2f914:	0002fb89 	.word	0x0002fb89

0002f918 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2f918:	b580      	push	{r7, lr}
   2f91a:	b08a      	sub	sp, #40	; 0x28
   2f91c:	af00      	add	r7, sp, #0
   2f91e:	60f8      	str	r0, [r7, #12]
   2f920:	60b9      	str	r1, [r7, #8]
   2f922:	607a      	str	r2, [r7, #4]
   2f924:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f926:	2300      	movs	r3, #0
   2f928:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f92a:	683b      	ldr	r3, [r7, #0]
   2f92c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f92e:	2300      	movs	r3, #0
   2f930:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f932:	2300      	movs	r3, #0
   2f934:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f936:	2318      	movs	r3, #24
   2f938:	18fb      	adds	r3, r7, r3
   2f93a:	0018      	movs	r0, r3
   2f93c:	4b20      	ldr	r3, [pc, #128]	; (2f9c0 <MQTTDeserialize_ack+0xa8>)
   2f93e:	4798      	blx	r3
   2f940:	0003      	movs	r3, r0
   2f942:	001a      	movs	r2, r3
   2f944:	231c      	movs	r3, #28
   2f946:	18fb      	adds	r3, r7, r3
   2f948:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2f94a:	231c      	movs	r3, #28
   2f94c:	18fb      	adds	r3, r7, r3
   2f94e:	781b      	ldrb	r3, [r3, #0]
   2f950:	071b      	lsls	r3, r3, #28
   2f952:	0fdb      	lsrs	r3, r3, #31
   2f954:	b2db      	uxtb	r3, r3
   2f956:	001a      	movs	r2, r3
   2f958:	68bb      	ldr	r3, [r7, #8]
   2f95a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2f95c:	231c      	movs	r3, #28
   2f95e:	18fb      	adds	r3, r7, r3
   2f960:	781b      	ldrb	r3, [r3, #0]
   2f962:	061b      	lsls	r3, r3, #24
   2f964:	0f1b      	lsrs	r3, r3, #28
   2f966:	b2db      	uxtb	r3, r3
   2f968:	001a      	movs	r2, r3
   2f96a:	68fb      	ldr	r3, [r7, #12]
   2f96c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f96e:	69bb      	ldr	r3, [r7, #24]
   2f970:	2214      	movs	r2, #20
   2f972:	18ba      	adds	r2, r7, r2
   2f974:	0011      	movs	r1, r2
   2f976:	0018      	movs	r0, r3
   2f978:	4b12      	ldr	r3, [pc, #72]	; (2f9c4 <MQTTDeserialize_ack+0xac>)
   2f97a:	4798      	blx	r3
   2f97c:	0003      	movs	r3, r0
   2f97e:	627b      	str	r3, [r7, #36]	; 0x24
   2f980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f982:	69bb      	ldr	r3, [r7, #24]
   2f984:	189b      	adds	r3, r3, r2
   2f986:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f988:	69bb      	ldr	r3, [r7, #24]
   2f98a:	697a      	ldr	r2, [r7, #20]
   2f98c:	189b      	adds	r3, r3, r2
   2f98e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2f990:	6a3b      	ldr	r3, [r7, #32]
   2f992:	69ba      	ldr	r2, [r7, #24]
   2f994:	1a9b      	subs	r3, r3, r2
   2f996:	2b01      	cmp	r3, #1
   2f998:	dd0b      	ble.n	2f9b2 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2f99a:	2318      	movs	r3, #24
   2f99c:	18fb      	adds	r3, r7, r3
   2f99e:	0018      	movs	r0, r3
   2f9a0:	4b09      	ldr	r3, [pc, #36]	; (2f9c8 <MQTTDeserialize_ack+0xb0>)
   2f9a2:	4798      	blx	r3
   2f9a4:	0003      	movs	r3, r0
   2f9a6:	b29a      	uxth	r2, r3
   2f9a8:	687b      	ldr	r3, [r7, #4]
   2f9aa:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2f9ac:	2301      	movs	r3, #1
   2f9ae:	627b      	str	r3, [r7, #36]	; 0x24
   2f9b0:	e000      	b.n	2f9b4 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2f9b2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f9b6:	0018      	movs	r0, r3
   2f9b8:	46bd      	mov	sp, r7
   2f9ba:	b00a      	add	sp, #40	; 0x28
   2f9bc:	bd80      	pop	{r7, pc}
   2f9be:	46c0      	nop			; (mov r8, r8)
   2f9c0:	0002fbbb 	.word	0x0002fbbb
   2f9c4:	0002fb55 	.word	0x0002fb55
   2f9c8:	0002fb89 	.word	0x0002fb89

0002f9cc <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2f9cc:	b580      	push	{r7, lr}
   2f9ce:	b084      	sub	sp, #16
   2f9d0:	af00      	add	r7, sp, #0
   2f9d2:	6078      	str	r0, [r7, #4]
   2f9d4:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2f9d6:	2300      	movs	r3, #0
   2f9d8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2f9da:	683b      	ldr	r3, [r7, #0]
   2f9dc:	4a17      	ldr	r2, [pc, #92]	; (2fa3c <MQTTPacket_encode+0x70>)
   2f9de:	4013      	ands	r3, r2
   2f9e0:	d504      	bpl.n	2f9ec <MQTTPacket_encode+0x20>
   2f9e2:	3b01      	subs	r3, #1
   2f9e4:	2280      	movs	r2, #128	; 0x80
   2f9e6:	4252      	negs	r2, r2
   2f9e8:	4313      	orrs	r3, r2
   2f9ea:	3301      	adds	r3, #1
   2f9ec:	001a      	movs	r2, r3
   2f9ee:	230b      	movs	r3, #11
   2f9f0:	18fb      	adds	r3, r7, r3
   2f9f2:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2f9f4:	683b      	ldr	r3, [r7, #0]
   2f9f6:	2b00      	cmp	r3, #0
   2f9f8:	da00      	bge.n	2f9fc <MQTTPacket_encode+0x30>
   2f9fa:	337f      	adds	r3, #127	; 0x7f
   2f9fc:	11db      	asrs	r3, r3, #7
   2f9fe:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2fa00:	683b      	ldr	r3, [r7, #0]
   2fa02:	2b00      	cmp	r3, #0
   2fa04:	dd08      	ble.n	2fa18 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2fa06:	230b      	movs	r3, #11
   2fa08:	18fb      	adds	r3, r7, r3
   2fa0a:	220b      	movs	r2, #11
   2fa0c:	18ba      	adds	r2, r7, r2
   2fa0e:	7812      	ldrb	r2, [r2, #0]
   2fa10:	2180      	movs	r1, #128	; 0x80
   2fa12:	4249      	negs	r1, r1
   2fa14:	430a      	orrs	r2, r1
   2fa16:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2fa18:	68fb      	ldr	r3, [r7, #12]
   2fa1a:	1c5a      	adds	r2, r3, #1
   2fa1c:	60fa      	str	r2, [r7, #12]
   2fa1e:	001a      	movs	r2, r3
   2fa20:	687b      	ldr	r3, [r7, #4]
   2fa22:	189b      	adds	r3, r3, r2
   2fa24:	220b      	movs	r2, #11
   2fa26:	18ba      	adds	r2, r7, r2
   2fa28:	7812      	ldrb	r2, [r2, #0]
   2fa2a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2fa2c:	683b      	ldr	r3, [r7, #0]
   2fa2e:	2b00      	cmp	r3, #0
   2fa30:	dcd3      	bgt.n	2f9da <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2fa32:	68fb      	ldr	r3, [r7, #12]
}
   2fa34:	0018      	movs	r0, r3
   2fa36:	46bd      	mov	sp, r7
   2fa38:	b004      	add	sp, #16
   2fa3a:	bd80      	pop	{r7, pc}
   2fa3c:	8000007f 	.word	0x8000007f

0002fa40 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2fa40:	b580      	push	{r7, lr}
   2fa42:	b086      	sub	sp, #24
   2fa44:	af00      	add	r7, sp, #0
   2fa46:	6078      	str	r0, [r7, #4]
   2fa48:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2fa4a:	2301      	movs	r3, #1
   2fa4c:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fa4e:	2300      	movs	r3, #0
   2fa50:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2fa52:	683b      	ldr	r3, [r7, #0]
   2fa54:	2200      	movs	r2, #0
   2fa56:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2fa58:	2301      	movs	r3, #1
   2fa5a:	425b      	negs	r3, r3
   2fa5c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2fa5e:	693b      	ldr	r3, [r7, #16]
   2fa60:	3301      	adds	r3, #1
   2fa62:	613b      	str	r3, [r7, #16]
   2fa64:	693b      	ldr	r3, [r7, #16]
   2fa66:	2b04      	cmp	r3, #4
   2fa68:	dd03      	ble.n	2fa72 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2fa6a:	2301      	movs	r3, #1
   2fa6c:	425b      	negs	r3, r3
   2fa6e:	60fb      	str	r3, [r7, #12]
			goto exit;
   2fa70:	e022      	b.n	2fab8 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2fa72:	230b      	movs	r3, #11
   2fa74:	18fa      	adds	r2, r7, r3
   2fa76:	687b      	ldr	r3, [r7, #4]
   2fa78:	2101      	movs	r1, #1
   2fa7a:	0010      	movs	r0, r2
   2fa7c:	4798      	blx	r3
   2fa7e:	0003      	movs	r3, r0
   2fa80:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2fa82:	68fb      	ldr	r3, [r7, #12]
   2fa84:	2b01      	cmp	r3, #1
   2fa86:	d116      	bne.n	2fab6 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2fa88:	683b      	ldr	r3, [r7, #0]
   2fa8a:	681a      	ldr	r2, [r3, #0]
   2fa8c:	230b      	movs	r3, #11
   2fa8e:	18fb      	adds	r3, r7, r3
   2fa90:	781b      	ldrb	r3, [r3, #0]
   2fa92:	0019      	movs	r1, r3
   2fa94:	237f      	movs	r3, #127	; 0x7f
   2fa96:	400b      	ands	r3, r1
   2fa98:	6979      	ldr	r1, [r7, #20]
   2fa9a:	434b      	muls	r3, r1
   2fa9c:	18d2      	adds	r2, r2, r3
   2fa9e:	683b      	ldr	r3, [r7, #0]
   2faa0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2faa2:	697b      	ldr	r3, [r7, #20]
   2faa4:	01db      	lsls	r3, r3, #7
   2faa6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2faa8:	230b      	movs	r3, #11
   2faaa:	18fb      	adds	r3, r7, r3
   2faac:	781b      	ldrb	r3, [r3, #0]
   2faae:	b25b      	sxtb	r3, r3
   2fab0:	2b00      	cmp	r3, #0
   2fab2:	dbd1      	blt.n	2fa58 <MQTTPacket_decode+0x18>
   2fab4:	e000      	b.n	2fab8 <MQTTPacket_decode+0x78>
			goto exit;
   2fab6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2fab8:	693b      	ldr	r3, [r7, #16]
}
   2faba:	0018      	movs	r0, r3
   2fabc:	46bd      	mov	sp, r7
   2fabe:	b006      	add	sp, #24
   2fac0:	bd80      	pop	{r7, pc}
	...

0002fac4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2fac4:	b580      	push	{r7, lr}
   2fac6:	b082      	sub	sp, #8
   2fac8:	af00      	add	r7, sp, #0
   2faca:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2facc:	687b      	ldr	r3, [r7, #4]
   2face:	3301      	adds	r3, #1
   2fad0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2fad2:	687b      	ldr	r3, [r7, #4]
   2fad4:	2b7f      	cmp	r3, #127	; 0x7f
   2fad6:	dc03      	bgt.n	2fae0 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2fad8:	687b      	ldr	r3, [r7, #4]
   2fada:	3301      	adds	r3, #1
   2fadc:	607b      	str	r3, [r7, #4]
   2fade:	e012      	b.n	2fb06 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2fae0:	687b      	ldr	r3, [r7, #4]
   2fae2:	4a0b      	ldr	r2, [pc, #44]	; (2fb10 <MQTTPacket_len+0x4c>)
   2fae4:	4293      	cmp	r3, r2
   2fae6:	dc03      	bgt.n	2faf0 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2fae8:	687b      	ldr	r3, [r7, #4]
   2faea:	3302      	adds	r3, #2
   2faec:	607b      	str	r3, [r7, #4]
   2faee:	e00a      	b.n	2fb06 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2faf0:	687b      	ldr	r3, [r7, #4]
   2faf2:	4a08      	ldr	r2, [pc, #32]	; (2fb14 <MQTTPacket_len+0x50>)
   2faf4:	4293      	cmp	r3, r2
   2faf6:	dc03      	bgt.n	2fb00 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2faf8:	687b      	ldr	r3, [r7, #4]
   2fafa:	3303      	adds	r3, #3
   2fafc:	607b      	str	r3, [r7, #4]
   2fafe:	e002      	b.n	2fb06 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2fb00:	687b      	ldr	r3, [r7, #4]
   2fb02:	3304      	adds	r3, #4
   2fb04:	607b      	str	r3, [r7, #4]
	return rem_len;
   2fb06:	687b      	ldr	r3, [r7, #4]
}
   2fb08:	0018      	movs	r0, r3
   2fb0a:	46bd      	mov	sp, r7
   2fb0c:	b002      	add	sp, #8
   2fb0e:	bd80      	pop	{r7, pc}
   2fb10:	00003fff 	.word	0x00003fff
   2fb14:	001ffffe 	.word	0x001ffffe

0002fb18 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2fb18:	b580      	push	{r7, lr}
   2fb1a:	b084      	sub	sp, #16
   2fb1c:	af00      	add	r7, sp, #0
   2fb1e:	6078      	str	r0, [r7, #4]
   2fb20:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2fb22:	2300      	movs	r3, #0
   2fb24:	60fb      	str	r3, [r7, #12]
   2fb26:	e00a      	b.n	2fb3e <bufchar+0x26>
		*c = *bufptr++;
   2fb28:	4b09      	ldr	r3, [pc, #36]	; (2fb50 <bufchar+0x38>)
   2fb2a:	681b      	ldr	r3, [r3, #0]
   2fb2c:	1c59      	adds	r1, r3, #1
   2fb2e:	4a08      	ldr	r2, [pc, #32]	; (2fb50 <bufchar+0x38>)
   2fb30:	6011      	str	r1, [r2, #0]
   2fb32:	781a      	ldrb	r2, [r3, #0]
   2fb34:	687b      	ldr	r3, [r7, #4]
   2fb36:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2fb38:	68fb      	ldr	r3, [r7, #12]
   2fb3a:	3301      	adds	r3, #1
   2fb3c:	60fb      	str	r3, [r7, #12]
   2fb3e:	68fa      	ldr	r2, [r7, #12]
   2fb40:	683b      	ldr	r3, [r7, #0]
   2fb42:	429a      	cmp	r2, r3
   2fb44:	dbf0      	blt.n	2fb28 <bufchar+0x10>
	return count;
   2fb46:	683b      	ldr	r3, [r7, #0]
}
   2fb48:	0018      	movs	r0, r3
   2fb4a:	46bd      	mov	sp, r7
   2fb4c:	b004      	add	sp, #16
   2fb4e:	bd80      	pop	{r7, pc}
   2fb50:	2000456c 	.word	0x2000456c

0002fb54 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2fb54:	b580      	push	{r7, lr}
   2fb56:	b082      	sub	sp, #8
   2fb58:	af00      	add	r7, sp, #0
   2fb5a:	6078      	str	r0, [r7, #4]
   2fb5c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2fb5e:	4b07      	ldr	r3, [pc, #28]	; (2fb7c <MQTTPacket_decodeBuf+0x28>)
   2fb60:	687a      	ldr	r2, [r7, #4]
   2fb62:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2fb64:	683a      	ldr	r2, [r7, #0]
   2fb66:	4b06      	ldr	r3, [pc, #24]	; (2fb80 <MQTTPacket_decodeBuf+0x2c>)
   2fb68:	0011      	movs	r1, r2
   2fb6a:	0018      	movs	r0, r3
   2fb6c:	4b05      	ldr	r3, [pc, #20]	; (2fb84 <MQTTPacket_decodeBuf+0x30>)
   2fb6e:	4798      	blx	r3
   2fb70:	0003      	movs	r3, r0
}
   2fb72:	0018      	movs	r0, r3
   2fb74:	46bd      	mov	sp, r7
   2fb76:	b002      	add	sp, #8
   2fb78:	bd80      	pop	{r7, pc}
   2fb7a:	46c0      	nop			; (mov r8, r8)
   2fb7c:	2000456c 	.word	0x2000456c
   2fb80:	0002fb19 	.word	0x0002fb19
   2fb84:	0002fa41 	.word	0x0002fa41

0002fb88 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2fb88:	b580      	push	{r7, lr}
   2fb8a:	b084      	sub	sp, #16
   2fb8c:	af00      	add	r7, sp, #0
   2fb8e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2fb90:	687b      	ldr	r3, [r7, #4]
   2fb92:	681b      	ldr	r3, [r3, #0]
   2fb94:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2fb96:	68fb      	ldr	r3, [r7, #12]
   2fb98:	781b      	ldrb	r3, [r3, #0]
   2fb9a:	021b      	lsls	r3, r3, #8
   2fb9c:	68fa      	ldr	r2, [r7, #12]
   2fb9e:	3201      	adds	r2, #1
   2fba0:	7812      	ldrb	r2, [r2, #0]
   2fba2:	189b      	adds	r3, r3, r2
   2fba4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2fba6:	687b      	ldr	r3, [r7, #4]
   2fba8:	681b      	ldr	r3, [r3, #0]
   2fbaa:	1c9a      	adds	r2, r3, #2
   2fbac:	687b      	ldr	r3, [r7, #4]
   2fbae:	601a      	str	r2, [r3, #0]
	return len;
   2fbb0:	68bb      	ldr	r3, [r7, #8]
}
   2fbb2:	0018      	movs	r0, r3
   2fbb4:	46bd      	mov	sp, r7
   2fbb6:	b004      	add	sp, #16
   2fbb8:	bd80      	pop	{r7, pc}

0002fbba <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2fbba:	b580      	push	{r7, lr}
   2fbbc:	b084      	sub	sp, #16
   2fbbe:	af00      	add	r7, sp, #0
   2fbc0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2fbc2:	687b      	ldr	r3, [r7, #4]
   2fbc4:	681a      	ldr	r2, [r3, #0]
   2fbc6:	230f      	movs	r3, #15
   2fbc8:	18fb      	adds	r3, r7, r3
   2fbca:	7812      	ldrb	r2, [r2, #0]
   2fbcc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fbce:	687b      	ldr	r3, [r7, #4]
   2fbd0:	681b      	ldr	r3, [r3, #0]
   2fbd2:	1c5a      	adds	r2, r3, #1
   2fbd4:	687b      	ldr	r3, [r7, #4]
   2fbd6:	601a      	str	r2, [r3, #0]
	return c;
   2fbd8:	230f      	movs	r3, #15
   2fbda:	18fb      	adds	r3, r7, r3
   2fbdc:	781b      	ldrb	r3, [r3, #0]
}
   2fbde:	0018      	movs	r0, r3
   2fbe0:	46bd      	mov	sp, r7
   2fbe2:	b004      	add	sp, #16
   2fbe4:	bd80      	pop	{r7, pc}

0002fbe6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2fbe6:	b580      	push	{r7, lr}
   2fbe8:	b082      	sub	sp, #8
   2fbea:	af00      	add	r7, sp, #0
   2fbec:	6078      	str	r0, [r7, #4]
   2fbee:	000a      	movs	r2, r1
   2fbf0:	1cfb      	adds	r3, r7, #3
   2fbf2:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2fbf4:	687b      	ldr	r3, [r7, #4]
   2fbf6:	681b      	ldr	r3, [r3, #0]
   2fbf8:	1cfa      	adds	r2, r7, #3
   2fbfa:	7812      	ldrb	r2, [r2, #0]
   2fbfc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fbfe:	687b      	ldr	r3, [r7, #4]
   2fc00:	681b      	ldr	r3, [r3, #0]
   2fc02:	1c5a      	adds	r2, r3, #1
   2fc04:	687b      	ldr	r3, [r7, #4]
   2fc06:	601a      	str	r2, [r3, #0]
}
   2fc08:	46c0      	nop			; (mov r8, r8)
   2fc0a:	46bd      	mov	sp, r7
   2fc0c:	b002      	add	sp, #8
   2fc0e:	bd80      	pop	{r7, pc}

0002fc10 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2fc10:	b580      	push	{r7, lr}
   2fc12:	b082      	sub	sp, #8
   2fc14:	af00      	add	r7, sp, #0
   2fc16:	6078      	str	r0, [r7, #4]
   2fc18:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2fc1a:	687b      	ldr	r3, [r7, #4]
   2fc1c:	681a      	ldr	r2, [r3, #0]
   2fc1e:	683b      	ldr	r3, [r7, #0]
   2fc20:	2b00      	cmp	r3, #0
   2fc22:	da00      	bge.n	2fc26 <writeInt+0x16>
   2fc24:	33ff      	adds	r3, #255	; 0xff
   2fc26:	121b      	asrs	r3, r3, #8
   2fc28:	b2db      	uxtb	r3, r3
   2fc2a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fc2c:	687b      	ldr	r3, [r7, #4]
   2fc2e:	681b      	ldr	r3, [r3, #0]
   2fc30:	1c5a      	adds	r2, r3, #1
   2fc32:	687b      	ldr	r3, [r7, #4]
   2fc34:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2fc36:	687b      	ldr	r3, [r7, #4]
   2fc38:	681a      	ldr	r2, [r3, #0]
   2fc3a:	683b      	ldr	r3, [r7, #0]
   2fc3c:	4908      	ldr	r1, [pc, #32]	; (2fc60 <writeInt+0x50>)
   2fc3e:	400b      	ands	r3, r1
   2fc40:	d503      	bpl.n	2fc4a <writeInt+0x3a>
   2fc42:	3b01      	subs	r3, #1
   2fc44:	4907      	ldr	r1, [pc, #28]	; (2fc64 <writeInt+0x54>)
   2fc46:	430b      	orrs	r3, r1
   2fc48:	3301      	adds	r3, #1
   2fc4a:	b2db      	uxtb	r3, r3
   2fc4c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fc4e:	687b      	ldr	r3, [r7, #4]
   2fc50:	681b      	ldr	r3, [r3, #0]
   2fc52:	1c5a      	adds	r2, r3, #1
   2fc54:	687b      	ldr	r3, [r7, #4]
   2fc56:	601a      	str	r2, [r3, #0]
}
   2fc58:	46c0      	nop			; (mov r8, r8)
   2fc5a:	46bd      	mov	sp, r7
   2fc5c:	b002      	add	sp, #8
   2fc5e:	bd80      	pop	{r7, pc}
   2fc60:	800000ff 	.word	0x800000ff
   2fc64:	ffffff00 	.word	0xffffff00

0002fc68 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2fc68:	b580      	push	{r7, lr}
   2fc6a:	b084      	sub	sp, #16
   2fc6c:	af00      	add	r7, sp, #0
   2fc6e:	6078      	str	r0, [r7, #4]
   2fc70:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2fc72:	683b      	ldr	r3, [r7, #0]
   2fc74:	0018      	movs	r0, r3
   2fc76:	4b0d      	ldr	r3, [pc, #52]	; (2fcac <writeCString+0x44>)
   2fc78:	4798      	blx	r3
   2fc7a:	0003      	movs	r3, r0
   2fc7c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2fc7e:	68fa      	ldr	r2, [r7, #12]
   2fc80:	687b      	ldr	r3, [r7, #4]
   2fc82:	0011      	movs	r1, r2
   2fc84:	0018      	movs	r0, r3
   2fc86:	4b0a      	ldr	r3, [pc, #40]	; (2fcb0 <writeCString+0x48>)
   2fc88:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2fc8a:	687b      	ldr	r3, [r7, #4]
   2fc8c:	681b      	ldr	r3, [r3, #0]
   2fc8e:	68fa      	ldr	r2, [r7, #12]
   2fc90:	6839      	ldr	r1, [r7, #0]
   2fc92:	0018      	movs	r0, r3
   2fc94:	4b07      	ldr	r3, [pc, #28]	; (2fcb4 <writeCString+0x4c>)
   2fc96:	4798      	blx	r3
	*pptr += len;
   2fc98:	687b      	ldr	r3, [r7, #4]
   2fc9a:	681a      	ldr	r2, [r3, #0]
   2fc9c:	68fb      	ldr	r3, [r7, #12]
   2fc9e:	18d2      	adds	r2, r2, r3
   2fca0:	687b      	ldr	r3, [r7, #4]
   2fca2:	601a      	str	r2, [r3, #0]
}
   2fca4:	46c0      	nop			; (mov r8, r8)
   2fca6:	46bd      	mov	sp, r7
   2fca8:	b004      	add	sp, #16
   2fcaa:	bd80      	pop	{r7, pc}
   2fcac:	000346cf 	.word	0x000346cf
   2fcb0:	0002fc11 	.word	0x0002fc11
   2fcb4:	000342e1 	.word	0x000342e1

0002fcb8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2fcb8:	b580      	push	{r7, lr}
   2fcba:	b084      	sub	sp, #16
   2fcbc:	af00      	add	r7, sp, #0
   2fcbe:	60f8      	str	r0, [r7, #12]
   2fcc0:	0038      	movs	r0, r7
   2fcc2:	6001      	str	r1, [r0, #0]
   2fcc4:	6042      	str	r2, [r0, #4]
   2fcc6:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2fcc8:	003b      	movs	r3, r7
   2fcca:	685b      	ldr	r3, [r3, #4]
   2fccc:	2b00      	cmp	r3, #0
   2fcce:	dd17      	ble.n	2fd00 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2fcd0:	003b      	movs	r3, r7
   2fcd2:	685a      	ldr	r2, [r3, #4]
   2fcd4:	68fb      	ldr	r3, [r7, #12]
   2fcd6:	0011      	movs	r1, r2
   2fcd8:	0018      	movs	r0, r3
   2fcda:	4b14      	ldr	r3, [pc, #80]	; (2fd2c <writeMQTTString+0x74>)
   2fcdc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2fcde:	68fb      	ldr	r3, [r7, #12]
   2fce0:	6818      	ldr	r0, [r3, #0]
   2fce2:	003b      	movs	r3, r7
   2fce4:	6899      	ldr	r1, [r3, #8]
   2fce6:	003b      	movs	r3, r7
   2fce8:	685b      	ldr	r3, [r3, #4]
   2fcea:	001a      	movs	r2, r3
   2fcec:	4b10      	ldr	r3, [pc, #64]	; (2fd30 <writeMQTTString+0x78>)
   2fcee:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2fcf0:	68fb      	ldr	r3, [r7, #12]
   2fcf2:	681a      	ldr	r2, [r3, #0]
   2fcf4:	003b      	movs	r3, r7
   2fcf6:	685b      	ldr	r3, [r3, #4]
   2fcf8:	18d2      	adds	r2, r2, r3
   2fcfa:	68fb      	ldr	r3, [r7, #12]
   2fcfc:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2fcfe:	e010      	b.n	2fd22 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2fd00:	003b      	movs	r3, r7
   2fd02:	681b      	ldr	r3, [r3, #0]
   2fd04:	2b00      	cmp	r3, #0
   2fd06:	d007      	beq.n	2fd18 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2fd08:	003b      	movs	r3, r7
   2fd0a:	681a      	ldr	r2, [r3, #0]
   2fd0c:	68fb      	ldr	r3, [r7, #12]
   2fd0e:	0011      	movs	r1, r2
   2fd10:	0018      	movs	r0, r3
   2fd12:	4b08      	ldr	r3, [pc, #32]	; (2fd34 <writeMQTTString+0x7c>)
   2fd14:	4798      	blx	r3
}
   2fd16:	e004      	b.n	2fd22 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2fd18:	68fb      	ldr	r3, [r7, #12]
   2fd1a:	2100      	movs	r1, #0
   2fd1c:	0018      	movs	r0, r3
   2fd1e:	4b03      	ldr	r3, [pc, #12]	; (2fd2c <writeMQTTString+0x74>)
   2fd20:	4798      	blx	r3
}
   2fd22:	46c0      	nop			; (mov r8, r8)
   2fd24:	46bd      	mov	sp, r7
   2fd26:	b004      	add	sp, #16
   2fd28:	bd80      	pop	{r7, pc}
   2fd2a:	46c0      	nop			; (mov r8, r8)
   2fd2c:	0002fc11 	.word	0x0002fc11
   2fd30:	000342e1 	.word	0x000342e1
   2fd34:	0002fc69 	.word	0x0002fc69

0002fd38 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2fd38:	b580      	push	{r7, lr}
   2fd3a:	b086      	sub	sp, #24
   2fd3c:	af00      	add	r7, sp, #0
   2fd3e:	60f8      	str	r0, [r7, #12]
   2fd40:	60b9      	str	r1, [r7, #8]
   2fd42:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2fd44:	2300      	movs	r3, #0
   2fd46:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2fd48:	687a      	ldr	r2, [r7, #4]
   2fd4a:	68bb      	ldr	r3, [r7, #8]
   2fd4c:	681b      	ldr	r3, [r3, #0]
   2fd4e:	1ad3      	subs	r3, r2, r3
   2fd50:	2b01      	cmp	r3, #1
   2fd52:	dd1b      	ble.n	2fd8c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2fd54:	68bb      	ldr	r3, [r7, #8]
   2fd56:	0018      	movs	r0, r3
   2fd58:	4b10      	ldr	r3, [pc, #64]	; (2fd9c <readMQTTLenString+0x64>)
   2fd5a:	4798      	blx	r3
   2fd5c:	0002      	movs	r2, r0
   2fd5e:	68fb      	ldr	r3, [r7, #12]
   2fd60:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2fd62:	68bb      	ldr	r3, [r7, #8]
   2fd64:	681a      	ldr	r2, [r3, #0]
   2fd66:	68fb      	ldr	r3, [r7, #12]
   2fd68:	685b      	ldr	r3, [r3, #4]
   2fd6a:	18d2      	adds	r2, r2, r3
   2fd6c:	687b      	ldr	r3, [r7, #4]
   2fd6e:	429a      	cmp	r2, r3
   2fd70:	d80c      	bhi.n	2fd8c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2fd72:	68bb      	ldr	r3, [r7, #8]
   2fd74:	681a      	ldr	r2, [r3, #0]
   2fd76:	68fb      	ldr	r3, [r7, #12]
   2fd78:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2fd7a:	68bb      	ldr	r3, [r7, #8]
   2fd7c:	681a      	ldr	r2, [r3, #0]
   2fd7e:	68fb      	ldr	r3, [r7, #12]
   2fd80:	685b      	ldr	r3, [r3, #4]
   2fd82:	18d2      	adds	r2, r2, r3
   2fd84:	68bb      	ldr	r3, [r7, #8]
   2fd86:	601a      	str	r2, [r3, #0]
			rc = 1;
   2fd88:	2301      	movs	r3, #1
   2fd8a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2fd8c:	68fb      	ldr	r3, [r7, #12]
   2fd8e:	2200      	movs	r2, #0
   2fd90:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2fd92:	697b      	ldr	r3, [r7, #20]
}
   2fd94:	0018      	movs	r0, r3
   2fd96:	46bd      	mov	sp, r7
   2fd98:	b006      	add	sp, #24
   2fd9a:	bd80      	pop	{r7, pc}
   2fd9c:	0002fb89 	.word	0x0002fb89

0002fda0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2fda0:	b580      	push	{r7, lr}
   2fda2:	b086      	sub	sp, #24
   2fda4:	af00      	add	r7, sp, #0
   2fda6:	1d3b      	adds	r3, r7, #4
   2fda8:	6018      	str	r0, [r3, #0]
   2fdaa:	6059      	str	r1, [r3, #4]
   2fdac:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2fdae:	2300      	movs	r3, #0
   2fdb0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2fdb2:	1d3b      	adds	r3, r7, #4
   2fdb4:	681b      	ldr	r3, [r3, #0]
   2fdb6:	2b00      	cmp	r3, #0
   2fdb8:	d007      	beq.n	2fdca <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2fdba:	1d3b      	adds	r3, r7, #4
   2fdbc:	681b      	ldr	r3, [r3, #0]
   2fdbe:	0018      	movs	r0, r3
   2fdc0:	4b06      	ldr	r3, [pc, #24]	; (2fddc <MQTTstrlen+0x3c>)
   2fdc2:	4798      	blx	r3
   2fdc4:	0003      	movs	r3, r0
   2fdc6:	617b      	str	r3, [r7, #20]
   2fdc8:	e002      	b.n	2fdd0 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2fdca:	1d3b      	adds	r3, r7, #4
   2fdcc:	685b      	ldr	r3, [r3, #4]
   2fdce:	617b      	str	r3, [r7, #20]
	return rc;
   2fdd0:	697b      	ldr	r3, [r7, #20]
}
   2fdd2:	0018      	movs	r0, r3
   2fdd4:	46bd      	mov	sp, r7
   2fdd6:	b006      	add	sp, #24
   2fdd8:	bd80      	pop	{r7, pc}
   2fdda:	46c0      	nop			; (mov r8, r8)
   2fddc:	000346cf 	.word	0x000346cf

0002fde0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2fde0:	b580      	push	{r7, lr}
   2fde2:	b086      	sub	sp, #24
   2fde4:	af00      	add	r7, sp, #0
   2fde6:	6078      	str	r0, [r7, #4]
   2fde8:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2fdea:	2300      	movs	r3, #0
   2fdec:	617b      	str	r3, [r7, #20]
		blen = 0;
   2fdee:	2300      	movs	r3, #0
   2fdf0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2fdf2:	687b      	ldr	r3, [r7, #4]
   2fdf4:	681b      	ldr	r3, [r3, #0]
   2fdf6:	2b00      	cmp	r3, #0
   2fdf8:	d00a      	beq.n	2fe10 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2fdfa:	687b      	ldr	r3, [r7, #4]
   2fdfc:	681b      	ldr	r3, [r3, #0]
   2fdfe:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2fe00:	687b      	ldr	r3, [r7, #4]
   2fe02:	681b      	ldr	r3, [r3, #0]
   2fe04:	0018      	movs	r0, r3
   2fe06:	4b12      	ldr	r3, [pc, #72]	; (2fe50 <MQTTPacket_equals+0x70>)
   2fe08:	4798      	blx	r3
   2fe0a:	0003      	movs	r3, r0
   2fe0c:	617b      	str	r3, [r7, #20]
   2fe0e:	e005      	b.n	2fe1c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2fe10:	687b      	ldr	r3, [r7, #4]
   2fe12:	689b      	ldr	r3, [r3, #8]
   2fe14:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2fe16:	687b      	ldr	r3, [r7, #4]
   2fe18:	685b      	ldr	r3, [r3, #4]
   2fe1a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2fe1c:	683b      	ldr	r3, [r7, #0]
   2fe1e:	0018      	movs	r0, r3
   2fe20:	4b0b      	ldr	r3, [pc, #44]	; (2fe50 <MQTTPacket_equals+0x70>)
   2fe22:	4798      	blx	r3
   2fe24:	0003      	movs	r3, r0
   2fe26:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2fe28:	697a      	ldr	r2, [r7, #20]
   2fe2a:	68fb      	ldr	r3, [r7, #12]
   2fe2c:	429a      	cmp	r2, r3
   2fe2e:	d109      	bne.n	2fe44 <MQTTPacket_equals+0x64>
   2fe30:	697a      	ldr	r2, [r7, #20]
   2fe32:	6839      	ldr	r1, [r7, #0]
   2fe34:	693b      	ldr	r3, [r7, #16]
   2fe36:	0018      	movs	r0, r3
   2fe38:	4b06      	ldr	r3, [pc, #24]	; (2fe54 <MQTTPacket_equals+0x74>)
   2fe3a:	4798      	blx	r3
   2fe3c:	1e03      	subs	r3, r0, #0
   2fe3e:	d101      	bne.n	2fe44 <MQTTPacket_equals+0x64>
   2fe40:	2301      	movs	r3, #1
   2fe42:	e000      	b.n	2fe46 <MQTTPacket_equals+0x66>
   2fe44:	2300      	movs	r3, #0
}
   2fe46:	0018      	movs	r0, r3
   2fe48:	46bd      	mov	sp, r7
   2fe4a:	b006      	add	sp, #24
   2fe4c:	bd80      	pop	{r7, pc}
   2fe4e:	46c0      	nop			; (mov r8, r8)
   2fe50:	000346cf 	.word	0x000346cf
   2fe54:	000346dd 	.word	0x000346dd

0002fe58 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2fe58:	b580      	push	{r7, lr}
   2fe5a:	b086      	sub	sp, #24
   2fe5c:	af00      	add	r7, sp, #0
   2fe5e:	60f8      	str	r0, [r7, #12]
   2fe60:	0038      	movs	r0, r7
   2fe62:	6001      	str	r1, [r0, #0]
   2fe64:	6042      	str	r2, [r0, #4]
   2fe66:	6083      	str	r3, [r0, #8]
	int len = 0;
   2fe68:	2300      	movs	r3, #0
   2fe6a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2fe6c:	003b      	movs	r3, r7
   2fe6e:	6818      	ldr	r0, [r3, #0]
   2fe70:	6859      	ldr	r1, [r3, #4]
   2fe72:	689a      	ldr	r2, [r3, #8]
   2fe74:	4b09      	ldr	r3, [pc, #36]	; (2fe9c <MQTTSerialize_publishLength+0x44>)
   2fe76:	4798      	blx	r3
   2fe78:	0003      	movs	r3, r0
   2fe7a:	1c9a      	adds	r2, r3, #2
   2fe7c:	6a3b      	ldr	r3, [r7, #32]
   2fe7e:	18d3      	adds	r3, r2, r3
   2fe80:	697a      	ldr	r2, [r7, #20]
   2fe82:	18d3      	adds	r3, r2, r3
   2fe84:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2fe86:	68fb      	ldr	r3, [r7, #12]
   2fe88:	2b00      	cmp	r3, #0
   2fe8a:	dd02      	ble.n	2fe92 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2fe8c:	697b      	ldr	r3, [r7, #20]
   2fe8e:	3302      	adds	r3, #2
   2fe90:	617b      	str	r3, [r7, #20]
	return len;
   2fe92:	697b      	ldr	r3, [r7, #20]
}
   2fe94:	0018      	movs	r0, r3
   2fe96:	46bd      	mov	sp, r7
   2fe98:	b006      	add	sp, #24
   2fe9a:	bd80      	pop	{r7, pc}
   2fe9c:	0002fda1 	.word	0x0002fda1

0002fea0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2fea0:	b590      	push	{r4, r7, lr}
   2fea2:	b08b      	sub	sp, #44	; 0x2c
   2fea4:	af02      	add	r7, sp, #8
   2fea6:	60f8      	str	r0, [r7, #12]
   2fea8:	60b9      	str	r1, [r7, #8]
   2feaa:	603b      	str	r3, [r7, #0]
   2feac:	1dfb      	adds	r3, r7, #7
   2feae:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2feb0:	68fb      	ldr	r3, [r7, #12]
   2feb2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2feb4:	2300      	movs	r3, #0
   2feb6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2feb8:	2300      	movs	r3, #0
   2feba:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2febc:	2300      	movs	r3, #0
   2febe:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2fec0:	2308      	movs	r3, #8
   2fec2:	2230      	movs	r2, #48	; 0x30
   2fec4:	4694      	mov	ip, r2
   2fec6:	44bc      	add	ip, r7
   2fec8:	4463      	add	r3, ip
   2feca:	6838      	ldr	r0, [r7, #0]
   2fecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2fece:	9200      	str	r2, [sp, #0]
   2fed0:	6819      	ldr	r1, [r3, #0]
   2fed2:	685a      	ldr	r2, [r3, #4]
   2fed4:	689b      	ldr	r3, [r3, #8]
   2fed6:	4c46      	ldr	r4, [pc, #280]	; (2fff0 <MQTTSerialize_publish+0x150>)
   2fed8:	47a0      	blx	r4
   2feda:	0003      	movs	r3, r0
   2fedc:	61bb      	str	r3, [r7, #24]
   2fede:	69bb      	ldr	r3, [r7, #24]
   2fee0:	0018      	movs	r0, r3
   2fee2:	4b44      	ldr	r3, [pc, #272]	; (2fff4 <MQTTSerialize_publish+0x154>)
   2fee4:	4798      	blx	r3
   2fee6:	0002      	movs	r2, r0
   2fee8:	68bb      	ldr	r3, [r7, #8]
   2feea:	429a      	cmp	r2, r3
   2feec:	dd03      	ble.n	2fef6 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2feee:	2302      	movs	r3, #2
   2fef0:	425b      	negs	r3, r3
   2fef2:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fef4:	e077      	b.n	2ffe6 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2fef6:	2310      	movs	r3, #16
   2fef8:	18fb      	adds	r3, r7, r3
   2fefa:	781a      	ldrb	r2, [r3, #0]
   2fefc:	210f      	movs	r1, #15
   2fefe:	400a      	ands	r2, r1
   2ff00:	1c11      	adds	r1, r2, #0
   2ff02:	2230      	movs	r2, #48	; 0x30
   2ff04:	430a      	orrs	r2, r1
   2ff06:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2ff08:	1dfb      	adds	r3, r7, #7
   2ff0a:	781b      	ldrb	r3, [r3, #0]
   2ff0c:	2201      	movs	r2, #1
   2ff0e:	4013      	ands	r3, r2
   2ff10:	b2da      	uxtb	r2, r3
   2ff12:	2310      	movs	r3, #16
   2ff14:	18fb      	adds	r3, r7, r3
   2ff16:	2101      	movs	r1, #1
   2ff18:	400a      	ands	r2, r1
   2ff1a:	00d0      	lsls	r0, r2, #3
   2ff1c:	781a      	ldrb	r2, [r3, #0]
   2ff1e:	2108      	movs	r1, #8
   2ff20:	438a      	bics	r2, r1
   2ff22:	1c11      	adds	r1, r2, #0
   2ff24:	1c02      	adds	r2, r0, #0
   2ff26:	430a      	orrs	r2, r1
   2ff28:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2ff2a:	683b      	ldr	r3, [r7, #0]
   2ff2c:	b2db      	uxtb	r3, r3
   2ff2e:	1c1a      	adds	r2, r3, #0
   2ff30:	2303      	movs	r3, #3
   2ff32:	4013      	ands	r3, r2
   2ff34:	b2da      	uxtb	r2, r3
   2ff36:	2310      	movs	r3, #16
   2ff38:	18fb      	adds	r3, r7, r3
   2ff3a:	2103      	movs	r1, #3
   2ff3c:	400a      	ands	r2, r1
   2ff3e:	1890      	adds	r0, r2, r2
   2ff40:	781a      	ldrb	r2, [r3, #0]
   2ff42:	2106      	movs	r1, #6
   2ff44:	438a      	bics	r2, r1
   2ff46:	1c11      	adds	r1, r2, #0
   2ff48:	1c02      	adds	r2, r0, #0
   2ff4a:	430a      	orrs	r2, r1
   2ff4c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2ff4e:	2330      	movs	r3, #48	; 0x30
   2ff50:	18fb      	adds	r3, r7, r3
   2ff52:	781b      	ldrb	r3, [r3, #0]
   2ff54:	2201      	movs	r2, #1
   2ff56:	4013      	ands	r3, r2
   2ff58:	b2da      	uxtb	r2, r3
   2ff5a:	2310      	movs	r3, #16
   2ff5c:	18fb      	adds	r3, r7, r3
   2ff5e:	2101      	movs	r1, #1
   2ff60:	400a      	ands	r2, r1
   2ff62:	0010      	movs	r0, r2
   2ff64:	781a      	ldrb	r2, [r3, #0]
   2ff66:	2101      	movs	r1, #1
   2ff68:	438a      	bics	r2, r1
   2ff6a:	1c11      	adds	r1, r2, #0
   2ff6c:	1c02      	adds	r2, r0, #0
   2ff6e:	430a      	orrs	r2, r1
   2ff70:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2ff72:	2310      	movs	r3, #16
   2ff74:	18fb      	adds	r3, r7, r3
   2ff76:	781a      	ldrb	r2, [r3, #0]
   2ff78:	2314      	movs	r3, #20
   2ff7a:	18fb      	adds	r3, r7, r3
   2ff7c:	0011      	movs	r1, r2
   2ff7e:	0018      	movs	r0, r3
   2ff80:	4b1d      	ldr	r3, [pc, #116]	; (2fff8 <MQTTSerialize_publish+0x158>)
   2ff82:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2ff84:	697b      	ldr	r3, [r7, #20]
   2ff86:	69ba      	ldr	r2, [r7, #24]
   2ff88:	0011      	movs	r1, r2
   2ff8a:	0018      	movs	r0, r3
   2ff8c:	4b1b      	ldr	r3, [pc, #108]	; (2fffc <MQTTSerialize_publish+0x15c>)
   2ff8e:	4798      	blx	r3
   2ff90:	0002      	movs	r2, r0
   2ff92:	697b      	ldr	r3, [r7, #20]
   2ff94:	189b      	adds	r3, r3, r2
   2ff96:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2ff98:	2308      	movs	r3, #8
   2ff9a:	2230      	movs	r2, #48	; 0x30
   2ff9c:	4694      	mov	ip, r2
   2ff9e:	44bc      	add	ip, r7
   2ffa0:	4463      	add	r3, ip
   2ffa2:	2214      	movs	r2, #20
   2ffa4:	18b8      	adds	r0, r7, r2
   2ffa6:	6819      	ldr	r1, [r3, #0]
   2ffa8:	685a      	ldr	r2, [r3, #4]
   2ffaa:	689b      	ldr	r3, [r3, #8]
   2ffac:	4c14      	ldr	r4, [pc, #80]	; (30000 <MQTTSerialize_publish+0x160>)
   2ffae:	47a0      	blx	r4

	if (qos > 0)
   2ffb0:	683b      	ldr	r3, [r7, #0]
   2ffb2:	2b00      	cmp	r3, #0
   2ffb4:	dd08      	ble.n	2ffc8 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2ffb6:	2334      	movs	r3, #52	; 0x34
   2ffb8:	18fb      	adds	r3, r7, r3
   2ffba:	881a      	ldrh	r2, [r3, #0]
   2ffbc:	2314      	movs	r3, #20
   2ffbe:	18fb      	adds	r3, r7, r3
   2ffc0:	0011      	movs	r1, r2
   2ffc2:	0018      	movs	r0, r3
   2ffc4:	4b0f      	ldr	r3, [pc, #60]	; (30004 <MQTTSerialize_publish+0x164>)
   2ffc6:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2ffc8:	697b      	ldr	r3, [r7, #20]
   2ffca:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2ffcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2ffce:	0018      	movs	r0, r3
   2ffd0:	4b0d      	ldr	r3, [pc, #52]	; (30008 <MQTTSerialize_publish+0x168>)
   2ffd2:	4798      	blx	r3
	ptr += payloadlen;
   2ffd4:	697a      	ldr	r2, [r7, #20]
   2ffd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2ffd8:	18d3      	adds	r3, r2, r3
   2ffda:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2ffdc:	697b      	ldr	r3, [r7, #20]
   2ffde:	001a      	movs	r2, r3
   2ffe0:	68fb      	ldr	r3, [r7, #12]
   2ffe2:	1ad3      	subs	r3, r2, r3
   2ffe4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2ffe6:	69fb      	ldr	r3, [r7, #28]
}
   2ffe8:	0018      	movs	r0, r3
   2ffea:	46bd      	mov	sp, r7
   2ffec:	b009      	add	sp, #36	; 0x24
   2ffee:	bd90      	pop	{r4, r7, pc}
   2fff0:	0002fe59 	.word	0x0002fe59
   2fff4:	0002fac5 	.word	0x0002fac5
   2fff8:	0002fbe7 	.word	0x0002fbe7
   2fffc:	0002f9cd 	.word	0x0002f9cd
   30000:	0002fcb9 	.word	0x0002fcb9
   30004:	0002fc11 	.word	0x0002fc11
   30008:	000342e1 	.word	0x000342e1

0003000c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3000c:	b580      	push	{r7, lr}
   3000e:	b088      	sub	sp, #32
   30010:	af00      	add	r7, sp, #0
   30012:	60f8      	str	r0, [r7, #12]
   30014:	60b9      	str	r1, [r7, #8]
   30016:	0019      	movs	r1, r3
   30018:	1dfb      	adds	r3, r7, #7
   3001a:	701a      	strb	r2, [r3, #0]
   3001c:	1dbb      	adds	r3, r7, #6
   3001e:	1c0a      	adds	r2, r1, #0
   30020:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30022:	2300      	movs	r3, #0
   30024:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30026:	2300      	movs	r3, #0
   30028:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3002a:	68fb      	ldr	r3, [r7, #12]
   3002c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3002e:	68bb      	ldr	r3, [r7, #8]
   30030:	2b03      	cmp	r3, #3
   30032:	dc03      	bgt.n	3003c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30034:	2302      	movs	r3, #2
   30036:	425b      	negs	r3, r3
   30038:	61fb      	str	r3, [r7, #28]
		goto exit;
   3003a:	e055      	b.n	300e8 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   3003c:	1dfb      	adds	r3, r7, #7
   3003e:	781b      	ldrb	r3, [r3, #0]
   30040:	220f      	movs	r2, #15
   30042:	4013      	ands	r3, r2
   30044:	b2da      	uxtb	r2, r3
   30046:	2318      	movs	r3, #24
   30048:	18fb      	adds	r3, r7, r3
   3004a:	0110      	lsls	r0, r2, #4
   3004c:	781a      	ldrb	r2, [r3, #0]
   3004e:	210f      	movs	r1, #15
   30050:	400a      	ands	r2, r1
   30052:	1c11      	adds	r1, r2, #0
   30054:	1c02      	adds	r2, r0, #0
   30056:	430a      	orrs	r2, r1
   30058:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3005a:	1dbb      	adds	r3, r7, #6
   3005c:	781b      	ldrb	r3, [r3, #0]
   3005e:	2201      	movs	r2, #1
   30060:	4013      	ands	r3, r2
   30062:	b2da      	uxtb	r2, r3
   30064:	2318      	movs	r3, #24
   30066:	18fb      	adds	r3, r7, r3
   30068:	2101      	movs	r1, #1
   3006a:	400a      	ands	r2, r1
   3006c:	00d0      	lsls	r0, r2, #3
   3006e:	781a      	ldrb	r2, [r3, #0]
   30070:	2108      	movs	r1, #8
   30072:	438a      	bics	r2, r1
   30074:	1c11      	adds	r1, r2, #0
   30076:	1c02      	adds	r2, r0, #0
   30078:	430a      	orrs	r2, r1
   3007a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   3007c:	1dfb      	adds	r3, r7, #7
   3007e:	781b      	ldrb	r3, [r3, #0]
   30080:	3b06      	subs	r3, #6
   30082:	425a      	negs	r2, r3
   30084:	4153      	adcs	r3, r2
   30086:	b2db      	uxtb	r3, r3
   30088:	1c1a      	adds	r2, r3, #0
   3008a:	2303      	movs	r3, #3
   3008c:	4013      	ands	r3, r2
   3008e:	b2da      	uxtb	r2, r3
   30090:	2318      	movs	r3, #24
   30092:	18fb      	adds	r3, r7, r3
   30094:	2103      	movs	r1, #3
   30096:	400a      	ands	r2, r1
   30098:	1890      	adds	r0, r2, r2
   3009a:	781a      	ldrb	r2, [r3, #0]
   3009c:	2106      	movs	r1, #6
   3009e:	438a      	bics	r2, r1
   300a0:	1c11      	adds	r1, r2, #0
   300a2:	1c02      	adds	r2, r0, #0
   300a4:	430a      	orrs	r2, r1
   300a6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   300a8:	2318      	movs	r3, #24
   300aa:	18fb      	adds	r3, r7, r3
   300ac:	781a      	ldrb	r2, [r3, #0]
   300ae:	2314      	movs	r3, #20
   300b0:	18fb      	adds	r3, r7, r3
   300b2:	0011      	movs	r1, r2
   300b4:	0018      	movs	r0, r3
   300b6:	4b0f      	ldr	r3, [pc, #60]	; (300f4 <MQTTSerialize_ack+0xe8>)
   300b8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   300ba:	697b      	ldr	r3, [r7, #20]
   300bc:	2102      	movs	r1, #2
   300be:	0018      	movs	r0, r3
   300c0:	4b0d      	ldr	r3, [pc, #52]	; (300f8 <MQTTSerialize_ack+0xec>)
   300c2:	4798      	blx	r3
   300c4:	0002      	movs	r2, r0
   300c6:	697b      	ldr	r3, [r7, #20]
   300c8:	189b      	adds	r3, r3, r2
   300ca:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   300cc:	2328      	movs	r3, #40	; 0x28
   300ce:	18fb      	adds	r3, r7, r3
   300d0:	881a      	ldrh	r2, [r3, #0]
   300d2:	2314      	movs	r3, #20
   300d4:	18fb      	adds	r3, r7, r3
   300d6:	0011      	movs	r1, r2
   300d8:	0018      	movs	r0, r3
   300da:	4b08      	ldr	r3, [pc, #32]	; (300fc <MQTTSerialize_ack+0xf0>)
   300dc:	4798      	blx	r3
	rc = ptr - buf;
   300de:	697b      	ldr	r3, [r7, #20]
   300e0:	001a      	movs	r2, r3
   300e2:	68fb      	ldr	r3, [r7, #12]
   300e4:	1ad3      	subs	r3, r2, r3
   300e6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   300e8:	69fb      	ldr	r3, [r7, #28]
}
   300ea:	0018      	movs	r0, r3
   300ec:	46bd      	mov	sp, r7
   300ee:	b008      	add	sp, #32
   300f0:	bd80      	pop	{r7, pc}
   300f2:	46c0      	nop			; (mov r8, r8)
   300f4:	0002fbe7 	.word	0x0002fbe7
   300f8:	0002f9cd 	.word	0x0002f9cd
   300fc:	0002fc11 	.word	0x0002fc11

00030100 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30100:	b580      	push	{r7, lr}
   30102:	b084      	sub	sp, #16
   30104:	af00      	add	r7, sp, #0
   30106:	6078      	str	r0, [r7, #4]
   30108:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3010a:	2302      	movs	r3, #2
   3010c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3010e:	2300      	movs	r3, #0
   30110:	60fb      	str	r3, [r7, #12]
   30112:	e014      	b.n	3013e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30114:	68fa      	ldr	r2, [r7, #12]
   30116:	0013      	movs	r3, r2
   30118:	005b      	lsls	r3, r3, #1
   3011a:	189b      	adds	r3, r3, r2
   3011c:	009b      	lsls	r3, r3, #2
   3011e:	001a      	movs	r2, r3
   30120:	683b      	ldr	r3, [r7, #0]
   30122:	189b      	adds	r3, r3, r2
   30124:	6818      	ldr	r0, [r3, #0]
   30126:	6859      	ldr	r1, [r3, #4]
   30128:	689a      	ldr	r2, [r3, #8]
   3012a:	4b09      	ldr	r3, [pc, #36]	; (30150 <MQTTSerialize_subscribeLength+0x50>)
   3012c:	4798      	blx	r3
   3012e:	0003      	movs	r3, r0
   30130:	3303      	adds	r3, #3
   30132:	68ba      	ldr	r2, [r7, #8]
   30134:	18d3      	adds	r3, r2, r3
   30136:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30138:	68fb      	ldr	r3, [r7, #12]
   3013a:	3301      	adds	r3, #1
   3013c:	60fb      	str	r3, [r7, #12]
   3013e:	68fa      	ldr	r2, [r7, #12]
   30140:	687b      	ldr	r3, [r7, #4]
   30142:	429a      	cmp	r2, r3
   30144:	dbe6      	blt.n	30114 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30146:	68bb      	ldr	r3, [r7, #8]
}
   30148:	0018      	movs	r0, r3
   3014a:	46bd      	mov	sp, r7
   3014c:	b004      	add	sp, #16
   3014e:	bd80      	pop	{r7, pc}
   30150:	0002fda1 	.word	0x0002fda1

00030154 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30154:	b590      	push	{r4, r7, lr}
   30156:	b08b      	sub	sp, #44	; 0x2c
   30158:	af00      	add	r7, sp, #0
   3015a:	60f8      	str	r0, [r7, #12]
   3015c:	60b9      	str	r1, [r7, #8]
   3015e:	0019      	movs	r1, r3
   30160:	1dfb      	adds	r3, r7, #7
   30162:	701a      	strb	r2, [r3, #0]
   30164:	1d3b      	adds	r3, r7, #4
   30166:	1c0a      	adds	r2, r1, #0
   30168:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   3016a:	68fb      	ldr	r3, [r7, #12]
   3016c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3016e:	2300      	movs	r3, #0
   30170:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   30172:	2300      	movs	r3, #0
   30174:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30176:	2300      	movs	r3, #0
   30178:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   3017a:	2300      	movs	r3, #0
   3017c:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3017e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30182:	0011      	movs	r1, r2
   30184:	0018      	movs	r0, r3
   30186:	4b41      	ldr	r3, [pc, #260]	; (3028c <MQTTSerialize_subscribe+0x138>)
   30188:	4798      	blx	r3
   3018a:	0003      	movs	r3, r0
   3018c:	61fb      	str	r3, [r7, #28]
   3018e:	69fb      	ldr	r3, [r7, #28]
   30190:	0018      	movs	r0, r3
   30192:	4b3f      	ldr	r3, [pc, #252]	; (30290 <MQTTSerialize_subscribe+0x13c>)
   30194:	4798      	blx	r3
   30196:	0002      	movs	r2, r0
   30198:	68bb      	ldr	r3, [r7, #8]
   3019a:	429a      	cmp	r2, r3
   3019c:	dd03      	ble.n	301a6 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3019e:	2302      	movs	r3, #2
   301a0:	425b      	negs	r3, r3
   301a2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   301a4:	e06c      	b.n	30280 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   301a6:	2314      	movs	r3, #20
   301a8:	18fb      	adds	r3, r7, r3
   301aa:	2200      	movs	r2, #0
   301ac:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   301ae:	2314      	movs	r3, #20
   301b0:	18fb      	adds	r3, r7, r3
   301b2:	781a      	ldrb	r2, [r3, #0]
   301b4:	210f      	movs	r1, #15
   301b6:	400a      	ands	r2, r1
   301b8:	1c11      	adds	r1, r2, #0
   301ba:	2280      	movs	r2, #128	; 0x80
   301bc:	4252      	negs	r2, r2
   301be:	430a      	orrs	r2, r1
   301c0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   301c2:	1dfb      	adds	r3, r7, #7
   301c4:	781b      	ldrb	r3, [r3, #0]
   301c6:	2201      	movs	r2, #1
   301c8:	4013      	ands	r3, r2
   301ca:	b2da      	uxtb	r2, r3
   301cc:	2314      	movs	r3, #20
   301ce:	18fb      	adds	r3, r7, r3
   301d0:	2101      	movs	r1, #1
   301d2:	400a      	ands	r2, r1
   301d4:	00d0      	lsls	r0, r2, #3
   301d6:	781a      	ldrb	r2, [r3, #0]
   301d8:	2108      	movs	r1, #8
   301da:	438a      	bics	r2, r1
   301dc:	1c11      	adds	r1, r2, #0
   301de:	1c02      	adds	r2, r0, #0
   301e0:	430a      	orrs	r2, r1
   301e2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   301e4:	2314      	movs	r3, #20
   301e6:	18fb      	adds	r3, r7, r3
   301e8:	781a      	ldrb	r2, [r3, #0]
   301ea:	2106      	movs	r1, #6
   301ec:	438a      	bics	r2, r1
   301ee:	1c11      	adds	r1, r2, #0
   301f0:	2202      	movs	r2, #2
   301f2:	430a      	orrs	r2, r1
   301f4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   301f6:	2314      	movs	r3, #20
   301f8:	18fb      	adds	r3, r7, r3
   301fa:	781a      	ldrb	r2, [r3, #0]
   301fc:	2318      	movs	r3, #24
   301fe:	18fb      	adds	r3, r7, r3
   30200:	0011      	movs	r1, r2
   30202:	0018      	movs	r0, r3
   30204:	4b23      	ldr	r3, [pc, #140]	; (30294 <MQTTSerialize_subscribe+0x140>)
   30206:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30208:	69bb      	ldr	r3, [r7, #24]
   3020a:	69fa      	ldr	r2, [r7, #28]
   3020c:	0011      	movs	r1, r2
   3020e:	0018      	movs	r0, r3
   30210:	4b21      	ldr	r3, [pc, #132]	; (30298 <MQTTSerialize_subscribe+0x144>)
   30212:	4798      	blx	r3
   30214:	0002      	movs	r2, r0
   30216:	69bb      	ldr	r3, [r7, #24]
   30218:	189b      	adds	r3, r3, r2
   3021a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   3021c:	1d3b      	adds	r3, r7, #4
   3021e:	881a      	ldrh	r2, [r3, #0]
   30220:	2318      	movs	r3, #24
   30222:	18fb      	adds	r3, r7, r3
   30224:	0011      	movs	r1, r2
   30226:	0018      	movs	r0, r3
   30228:	4b1c      	ldr	r3, [pc, #112]	; (3029c <MQTTSerialize_subscribe+0x148>)
   3022a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   3022c:	2300      	movs	r3, #0
   3022e:	623b      	str	r3, [r7, #32]
   30230:	e01d      	b.n	3026e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   30232:	6a3a      	ldr	r2, [r7, #32]
   30234:	0013      	movs	r3, r2
   30236:	005b      	lsls	r3, r3, #1
   30238:	189b      	adds	r3, r3, r2
   3023a:	009b      	lsls	r3, r3, #2
   3023c:	001a      	movs	r2, r3
   3023e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30240:	189b      	adds	r3, r3, r2
   30242:	2218      	movs	r2, #24
   30244:	18b8      	adds	r0, r7, r2
   30246:	6819      	ldr	r1, [r3, #0]
   30248:	685a      	ldr	r2, [r3, #4]
   3024a:	689b      	ldr	r3, [r3, #8]
   3024c:	4c14      	ldr	r4, [pc, #80]	; (302a0 <MQTTSerialize_subscribe+0x14c>)
   3024e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   30250:	6a3b      	ldr	r3, [r7, #32]
   30252:	009b      	lsls	r3, r3, #2
   30254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30256:	18d3      	adds	r3, r2, r3
   30258:	681b      	ldr	r3, [r3, #0]
   3025a:	b2da      	uxtb	r2, r3
   3025c:	2318      	movs	r3, #24
   3025e:	18fb      	adds	r3, r7, r3
   30260:	0011      	movs	r1, r2
   30262:	0018      	movs	r0, r3
   30264:	4b0b      	ldr	r3, [pc, #44]	; (30294 <MQTTSerialize_subscribe+0x140>)
   30266:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30268:	6a3b      	ldr	r3, [r7, #32]
   3026a:	3301      	adds	r3, #1
   3026c:	623b      	str	r3, [r7, #32]
   3026e:	6a3a      	ldr	r2, [r7, #32]
   30270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30272:	429a      	cmp	r2, r3
   30274:	dbdd      	blt.n	30232 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30276:	69bb      	ldr	r3, [r7, #24]
   30278:	001a      	movs	r2, r3
   3027a:	68fb      	ldr	r3, [r7, #12]
   3027c:	1ad3      	subs	r3, r2, r3
   3027e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30282:	0018      	movs	r0, r3
   30284:	46bd      	mov	sp, r7
   30286:	b00b      	add	sp, #44	; 0x2c
   30288:	bd90      	pop	{r4, r7, pc}
   3028a:	46c0      	nop			; (mov r8, r8)
   3028c:	00030101 	.word	0x00030101
   30290:	0002fac5 	.word	0x0002fac5
   30294:	0002fbe7 	.word	0x0002fbe7
   30298:	0002f9cd 	.word	0x0002f9cd
   3029c:	0002fc11 	.word	0x0002fc11
   302a0:	0002fcb9 	.word	0x0002fcb9

000302a4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   302a4:	b590      	push	{r4, r7, lr}
   302a6:	b08b      	sub	sp, #44	; 0x2c
   302a8:	af00      	add	r7, sp, #0
   302aa:	60f8      	str	r0, [r7, #12]
   302ac:	60b9      	str	r1, [r7, #8]
   302ae:	607a      	str	r2, [r7, #4]
   302b0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   302b2:	2300      	movs	r3, #0
   302b4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   302b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   302b8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   302ba:	2300      	movs	r3, #0
   302bc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   302be:	2300      	movs	r3, #0
   302c0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   302c2:	2318      	movs	r3, #24
   302c4:	18fb      	adds	r3, r7, r3
   302c6:	0018      	movs	r0, r3
   302c8:	4b2c      	ldr	r3, [pc, #176]	; (3037c <MQTTDeserialize_suback+0xd8>)
   302ca:	4798      	blx	r3
   302cc:	0003      	movs	r3, r0
   302ce:	001a      	movs	r2, r3
   302d0:	231c      	movs	r3, #28
   302d2:	18fb      	adds	r3, r7, r3
   302d4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   302d6:	231c      	movs	r3, #28
   302d8:	18fb      	adds	r3, r7, r3
   302da:	781b      	ldrb	r3, [r3, #0]
   302dc:	220f      	movs	r2, #15
   302de:	4393      	bics	r3, r2
   302e0:	b2db      	uxtb	r3, r3
   302e2:	2b90      	cmp	r3, #144	; 0x90
   302e4:	d142      	bne.n	3036c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   302e6:	69bb      	ldr	r3, [r7, #24]
   302e8:	2214      	movs	r2, #20
   302ea:	18ba      	adds	r2, r7, r2
   302ec:	0011      	movs	r1, r2
   302ee:	0018      	movs	r0, r3
   302f0:	4b23      	ldr	r3, [pc, #140]	; (30380 <MQTTDeserialize_suback+0xdc>)
   302f2:	4798      	blx	r3
   302f4:	0003      	movs	r3, r0
   302f6:	627b      	str	r3, [r7, #36]	; 0x24
   302f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   302fa:	69bb      	ldr	r3, [r7, #24]
   302fc:	189b      	adds	r3, r3, r2
   302fe:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30300:	69bb      	ldr	r3, [r7, #24]
   30302:	697a      	ldr	r2, [r7, #20]
   30304:	189b      	adds	r3, r3, r2
   30306:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30308:	6a3b      	ldr	r3, [r7, #32]
   3030a:	69ba      	ldr	r2, [r7, #24]
   3030c:	1a9b      	subs	r3, r3, r2
   3030e:	2b01      	cmp	r3, #1
   30310:	dd2e      	ble.n	30370 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30312:	2318      	movs	r3, #24
   30314:	18fb      	adds	r3, r7, r3
   30316:	0018      	movs	r0, r3
   30318:	4b1a      	ldr	r3, [pc, #104]	; (30384 <MQTTDeserialize_suback+0xe0>)
   3031a:	4798      	blx	r3
   3031c:	0003      	movs	r3, r0
   3031e:	b29a      	uxth	r2, r3
   30320:	68fb      	ldr	r3, [r7, #12]
   30322:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30324:	687b      	ldr	r3, [r7, #4]
   30326:	2200      	movs	r2, #0
   30328:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   3032a:	e018      	b.n	3035e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   3032c:	687b      	ldr	r3, [r7, #4]
   3032e:	681a      	ldr	r2, [r3, #0]
   30330:	68bb      	ldr	r3, [r7, #8]
   30332:	429a      	cmp	r2, r3
   30334:	dd03      	ble.n	3033e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30336:	2301      	movs	r3, #1
   30338:	425b      	negs	r3, r3
   3033a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   3033c:	e019      	b.n	30372 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3033e:	687b      	ldr	r3, [r7, #4]
   30340:	681a      	ldr	r2, [r3, #0]
   30342:	1c51      	adds	r1, r2, #1
   30344:	687b      	ldr	r3, [r7, #4]
   30346:	6019      	str	r1, [r3, #0]
   30348:	0013      	movs	r3, r2
   3034a:	009b      	lsls	r3, r3, #2
   3034c:	683a      	ldr	r2, [r7, #0]
   3034e:	18d4      	adds	r4, r2, r3
   30350:	2318      	movs	r3, #24
   30352:	18fb      	adds	r3, r7, r3
   30354:	0018      	movs	r0, r3
   30356:	4b09      	ldr	r3, [pc, #36]	; (3037c <MQTTDeserialize_suback+0xd8>)
   30358:	4798      	blx	r3
   3035a:	0003      	movs	r3, r0
   3035c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3035e:	69ba      	ldr	r2, [r7, #24]
   30360:	6a3b      	ldr	r3, [r7, #32]
   30362:	429a      	cmp	r2, r3
   30364:	d3e2      	bcc.n	3032c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30366:	2301      	movs	r3, #1
   30368:	627b      	str	r3, [r7, #36]	; 0x24
   3036a:	e002      	b.n	30372 <MQTTDeserialize_suback+0xce>
		goto exit;
   3036c:	46c0      	nop			; (mov r8, r8)
   3036e:	e000      	b.n	30372 <MQTTDeserialize_suback+0xce>
		goto exit;
   30370:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30374:	0018      	movs	r0, r3
   30376:	46bd      	mov	sp, r7
   30378:	b00b      	add	sp, #44	; 0x2c
   3037a:	bd90      	pop	{r4, r7, pc}
   3037c:	0002fbbb 	.word	0x0002fbbb
   30380:	0002fb55 	.word	0x0002fb55
   30384:	0002fb89 	.word	0x0002fb89

00030388 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30388:	b580      	push	{r7, lr}
   3038a:	b082      	sub	sp, #8
   3038c:	af00      	add	r7, sp, #0
   3038e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   30390:	687b      	ldr	r3, [r7, #4]
   30392:	2250      	movs	r2, #80	; 0x50
   30394:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30396:	687b      	ldr	r3, [r7, #4]
   30398:	2200      	movs	r2, #0
   3039a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   3039c:	687b      	ldr	r3, [r7, #4]
   3039e:	4a0b      	ldr	r2, [pc, #44]	; (303cc <http_client_get_config_defaults+0x44>)
   303a0:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   303a2:	687b      	ldr	r3, [r7, #4]
   303a4:	2200      	movs	r2, #0
   303a6:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   303a8:	687b      	ldr	r3, [r7, #4]
   303aa:	2200      	movs	r2, #0
   303ac:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   303ae:	687b      	ldr	r3, [r7, #4]
   303b0:	2280      	movs	r2, #128	; 0x80
   303b2:	0052      	lsls	r2, r2, #1
   303b4:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   303b6:	687b      	ldr	r3, [r7, #4]
   303b8:	2252      	movs	r2, #82	; 0x52
   303ba:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   303bc:	687b      	ldr	r3, [r7, #4]
   303be:	4a04      	ldr	r2, [pc, #16]	; (303d0 <http_client_get_config_defaults+0x48>)
   303c0:	619a      	str	r2, [r3, #24]
}
   303c2:	46c0      	nop			; (mov r8, r8)
   303c4:	46bd      	mov	sp, r7
   303c6:	b002      	add	sp, #8
   303c8:	bd80      	pop	{r7, pc}
   303ca:	46c0      	nop			; (mov r8, r8)
   303cc:	00004e20 	.word	0x00004e20
   303d0:	00039528 	.word	0x00039528

000303d4 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   303d4:	b590      	push	{r4, r7, lr}
   303d6:	b083      	sub	sp, #12
   303d8:	af00      	add	r7, sp, #0
   303da:	6078      	str	r0, [r7, #4]
   303dc:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   303de:	687b      	ldr	r3, [r7, #4]
   303e0:	2b00      	cmp	r3, #0
   303e2:	d002      	beq.n	303ea <http_client_init+0x16>
   303e4:	683b      	ldr	r3, [r7, #0]
   303e6:	2b00      	cmp	r3, #0
   303e8:	d102      	bne.n	303f0 <http_client_init+0x1c>
		return -EINVAL;
   303ea:	2316      	movs	r3, #22
   303ec:	425b      	negs	r3, r3
   303ee:	e058      	b.n	304a2 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   303f0:	683b      	ldr	r3, [r7, #0]
   303f2:	691b      	ldr	r3, [r3, #16]
   303f4:	2b00      	cmp	r3, #0
   303f6:	d102      	bne.n	303fe <http_client_init+0x2a>
		return -EINVAL;
   303f8:	2316      	movs	r3, #22
   303fa:	425b      	negs	r3, r3
   303fc:	e051      	b.n	304a2 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   303fe:	683b      	ldr	r3, [r7, #0]
   30400:	685b      	ldr	r3, [r3, #4]
   30402:	2b00      	cmp	r3, #0
   30404:	d102      	bne.n	3040c <http_client_init+0x38>
		return -EINVAL;
   30406:	2316      	movs	r3, #22
   30408:	425b      	negs	r3, r3
   3040a:	e04a      	b.n	304a2 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   3040c:	683b      	ldr	r3, [r7, #0]
   3040e:	695b      	ldr	r3, [r3, #20]
   30410:	2b51      	cmp	r3, #81	; 0x51
   30412:	d802      	bhi.n	3041a <http_client_init+0x46>
		return -EINVAL;
   30414:	2316      	movs	r3, #22
   30416:	425b      	negs	r3, r3
   30418:	e043      	b.n	304a2 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3041a:	687b      	ldr	r3, [r7, #4]
   3041c:	22e8      	movs	r2, #232	; 0xe8
   3041e:	2100      	movs	r1, #0
   30420:	0018      	movs	r0, r3
   30422:	4b22      	ldr	r3, [pc, #136]	; (304ac <http_client_init+0xd8>)
   30424:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   30426:	687b      	ldr	r3, [r7, #4]
   30428:	3350      	adds	r3, #80	; 0x50
   3042a:	6839      	ldr	r1, [r7, #0]
   3042c:	221c      	movs	r2, #28
   3042e:	0018      	movs	r0, r3
   30430:	4b1f      	ldr	r3, [pc, #124]	; (304b0 <http_client_init+0xdc>)
   30432:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   30434:	687b      	ldr	r3, [r7, #4]
   30436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30438:	2b00      	cmp	r3, #0
   3043a:	d115      	bne.n	30468 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   3043c:	683b      	ldr	r3, [r7, #0]
   3043e:	691b      	ldr	r3, [r3, #16]
   30440:	0018      	movs	r0, r3
   30442:	4b1c      	ldr	r3, [pc, #112]	; (304b4 <http_client_init+0xe0>)
   30444:	4798      	blx	r3
   30446:	0003      	movs	r3, r0
   30448:	001a      	movs	r2, r3
   3044a:	687b      	ldr	r3, [r7, #4]
   3044c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   3044e:	687b      	ldr	r3, [r7, #4]
   30450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30452:	2b00      	cmp	r3, #0
   30454:	d102      	bne.n	3045c <http_client_init+0x88>
			return -ENOMEM;
   30456:	230c      	movs	r3, #12
   30458:	425b      	negs	r3, r3
   3045a:	e022      	b.n	304a2 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   3045c:	687b      	ldr	r3, [r7, #4]
   3045e:	2241      	movs	r2, #65	; 0x41
   30460:	5c99      	ldrb	r1, [r3, r2]
   30462:	2004      	movs	r0, #4
   30464:	4301      	orrs	r1, r0
   30466:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30468:	683b      	ldr	r3, [r7, #0]
   3046a:	891b      	ldrh	r3, [r3, #8]
   3046c:	2b00      	cmp	r3, #0
   3046e:	d010      	beq.n	30492 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   30470:	683b      	ldr	r3, [r7, #0]
   30472:	6858      	ldr	r0, [r3, #4]
   30474:	687a      	ldr	r2, [r7, #4]
   30476:	4910      	ldr	r1, [pc, #64]	; (304b8 <http_client_init+0xe4>)
   30478:	2300      	movs	r3, #0
   3047a:	4c10      	ldr	r4, [pc, #64]	; (304bc <http_client_init+0xe8>)
   3047c:	47a0      	blx	r4
   3047e:	0002      	movs	r2, r0
   30480:	687b      	ldr	r3, [r7, #4]
   30482:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30484:	687b      	ldr	r3, [r7, #4]
   30486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30488:	2b00      	cmp	r3, #0
   3048a:	da02      	bge.n	30492 <http_client_init+0xbe>
			return -ENOSPC;
   3048c:	231c      	movs	r3, #28
   3048e:	425b      	negs	r3, r3
   30490:	e007      	b.n	304a2 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   30492:	687b      	ldr	r3, [r7, #4]
   30494:	2200      	movs	r2, #0
   30496:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30498:	687b      	ldr	r3, [r7, #4]
   3049a:	22d8      	movs	r2, #216	; 0xd8
   3049c:	2100      	movs	r1, #0
   3049e:	5099      	str	r1, [r3, r2]

	return 0;
   304a0:	2300      	movs	r3, #0
}
   304a2:	0018      	movs	r0, r3
   304a4:	46bd      	mov	sp, r7
   304a6:	b003      	add	sp, #12
   304a8:	bd90      	pop	{r4, r7, pc}
   304aa:	46c0      	nop			; (mov r8, r8)
   304ac:	00034317 	.word	0x00034317
   304b0:	000342e1 	.word	0x000342e1
   304b4:	000342b9 	.word	0x000342b9
   304b8:	00030785 	.word	0x00030785
   304bc:	00031e29 	.word	0x00031e29

000304c0 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   304c0:	b580      	push	{r7, lr}
   304c2:	b082      	sub	sp, #8
   304c4:	af00      	add	r7, sp, #0
   304c6:	6078      	str	r0, [r7, #4]
   304c8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   304ca:	687b      	ldr	r3, [r7, #4]
   304cc:	2b00      	cmp	r3, #0
   304ce:	d102      	bne.n	304d6 <http_client_register_callback+0x16>
		return -EINVAL;
   304d0:	2316      	movs	r3, #22
   304d2:	425b      	negs	r3, r3
   304d4:	e003      	b.n	304de <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   304d6:	687b      	ldr	r3, [r7, #4]
   304d8:	683a      	ldr	r2, [r7, #0]
   304da:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   304dc:	2300      	movs	r3, #0
}
   304de:	0018      	movs	r0, r3
   304e0:	46bd      	mov	sp, r7
   304e2:	b002      	add	sp, #8
   304e4:	bd80      	pop	{r7, pc}
	...

000304e8 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   304e8:	b580      	push	{r7, lr}
   304ea:	b082      	sub	sp, #8
   304ec:	af00      	add	r7, sp, #0
   304ee:	6078      	str	r0, [r7, #4]
	switch (err) {
   304f0:	687b      	ldr	r3, [r7, #4]
   304f2:	330e      	adds	r3, #14
   304f4:	2b0e      	cmp	r3, #14
   304f6:	d825      	bhi.n	30544 <_hwerr_to_stderr+0x5c>
   304f8:	009a      	lsls	r2, r3, #2
   304fa:	4b18      	ldr	r3, [pc, #96]	; (3055c <_hwerr_to_stderr+0x74>)
   304fc:	18d3      	adds	r3, r2, r3
   304fe:	681b      	ldr	r3, [r3, #0]
   30500:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   30502:	2305      	movs	r3, #5
   30504:	425b      	negs	r3, r3
   30506:	e024      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   30508:	2302      	movs	r3, #2
   3050a:	425b      	negs	r3, r3
   3050c:	e021      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   3050e:	2370      	movs	r3, #112	; 0x70
   30510:	425b      	negs	r3, r3
   30512:	e01e      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30514:	230c      	movs	r3, #12
   30516:	425b      	negs	r3, r3
   30518:	e01b      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3051a:	2316      	movs	r3, #22
   3051c:	425b      	negs	r3, r3
   3051e:	e018      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   30520:	230c      	movs	r3, #12
   30522:	425b      	negs	r3, r3
   30524:	e015      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30526:	2305      	movs	r3, #5
   30528:	425b      	negs	r3, r3
   3052a:	e012      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   3052c:	2379      	movs	r3, #121	; 0x79
   3052e:	425b      	negs	r3, r3
   30530:	e00f      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   30532:	2368      	movs	r3, #104	; 0x68
   30534:	425b      	negs	r3, r3
   30536:	e00c      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30538:	230b      	movs	r3, #11
   3053a:	425b      	negs	r3, r3
   3053c:	e009      	b.n	30552 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3053e:	2310      	movs	r3, #16
   30540:	425b      	negs	r3, r3
   30542:	e006      	b.n	30552 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30544:	687b      	ldr	r3, [r7, #4]
   30546:	2b00      	cmp	r3, #0
   30548:	da02      	bge.n	30550 <_hwerr_to_stderr+0x68>
				return -EIO;
   3054a:	2305      	movs	r3, #5
   3054c:	425b      	negs	r3, r3
   3054e:	e000      	b.n	30552 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   30550:	2300      	movs	r3, #0
	}
}
   30552:	0018      	movs	r0, r3
   30554:	46bd      	mov	sp, r7
   30556:	b002      	add	sp, #8
   30558:	bd80      	pop	{r7, pc}
   3055a:	46c0      	nop			; (mov r8, r8)
   3055c:	00039664 	.word	0x00039664

00030560 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30560:	b580      	push	{r7, lr}
   30562:	b08a      	sub	sp, #40	; 0x28
   30564:	af00      	add	r7, sp, #0
   30566:	603a      	str	r2, [r7, #0]
   30568:	1dfb      	adds	r3, r7, #7
   3056a:	1c02      	adds	r2, r0, #0
   3056c:	701a      	strb	r2, [r3, #0]
   3056e:	1dbb      	adds	r3, r7, #6
   30570:	1c0a      	adds	r2, r1, #0
   30572:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   30574:	1dfb      	adds	r3, r7, #7
   30576:	2200      	movs	r2, #0
   30578:	569a      	ldrsb	r2, [r3, r2]
   3057a:	4b4b      	ldr	r3, [pc, #300]	; (306a8 <http_client_socket_event_handler+0x148>)
   3057c:	0092      	lsls	r2, r2, #2
   3057e:	58d3      	ldr	r3, [r2, r3]
   30580:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   30582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30584:	2b00      	cmp	r3, #0
   30586:	d100      	bne.n	3058a <http_client_socket_event_handler+0x2a>
   30588:	e08a      	b.n	306a0 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   3058a:	1dbb      	adds	r3, r7, #6
   3058c:	781b      	ldrb	r3, [r3, #0]
   3058e:	2b06      	cmp	r3, #6
   30590:	d040      	beq.n	30614 <http_client_socket_event_handler+0xb4>
   30592:	2b07      	cmp	r3, #7
   30594:	d060      	beq.n	30658 <http_client_socket_event_handler+0xf8>
   30596:	2b05      	cmp	r3, #5
   30598:	d000      	beq.n	3059c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   3059a:	e082      	b.n	306a2 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   3059c:	683b      	ldr	r3, [r7, #0]
   3059e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   305a0:	6a3b      	ldr	r3, [r7, #32]
   305a2:	785b      	ldrb	r3, [r3, #1]
   305a4:	b25b      	sxtb	r3, r3
   305a6:	001a      	movs	r2, r3
   305a8:	230c      	movs	r3, #12
   305aa:	18fb      	adds	r3, r7, r3
   305ac:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   305ae:	6a3b      	ldr	r3, [r7, #32]
   305b0:	785b      	ldrb	r3, [r3, #1]
   305b2:	b25b      	sxtb	r3, r3
   305b4:	2b00      	cmp	r3, #0
   305b6:	da0c      	bge.n	305d2 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   305b8:	6a3b      	ldr	r3, [r7, #32]
   305ba:	785b      	ldrb	r3, [r3, #1]
   305bc:	b25b      	sxtb	r3, r3
   305be:	0018      	movs	r0, r3
   305c0:	4b3a      	ldr	r3, [pc, #232]	; (306ac <http_client_socket_event_handler+0x14c>)
   305c2:	4798      	blx	r3
   305c4:	0002      	movs	r2, r0
   305c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305c8:	0011      	movs	r1, r2
   305ca:	0018      	movs	r0, r3
   305cc:	4b38      	ldr	r3, [pc, #224]	; (306b0 <http_client_socket_event_handler+0x150>)
   305ce:	4798      	blx	r3
    	break;
   305d0:	e067      	b.n	306a2 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   305d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   305d6:	2b00      	cmp	r3, #0
   305d8:	d006      	beq.n	305e8 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   305da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   305de:	220c      	movs	r2, #12
   305e0:	18ba      	adds	r2, r7, r2
   305e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   305e4:	2100      	movs	r1, #0
   305e6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   305e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305ea:	2203      	movs	r2, #3
   305ec:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   305ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
   305f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305f4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   305f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305f8:	2258      	movs	r2, #88	; 0x58
   305fa:	5a9b      	ldrh	r3, [r3, r2]
   305fc:	001a      	movs	r2, r3
   305fe:	4b2d      	ldr	r3, [pc, #180]	; (306b4 <http_client_socket_event_handler+0x154>)
   30600:	4798      	blx	r3
    		_http_client_recv_packet(module);
   30602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30604:	0018      	movs	r0, r3
   30606:	4b2c      	ldr	r3, [pc, #176]	; (306b8 <http_client_socket_event_handler+0x158>)
   30608:	4798      	blx	r3
			_http_client_request(module);
   3060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3060c:	0018      	movs	r0, r3
   3060e:	4b2b      	ldr	r3, [pc, #172]	; (306bc <http_client_socket_event_handler+0x15c>)
   30610:	4798      	blx	r3
    	break;
   30612:	e046      	b.n	306a2 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30614:	683b      	ldr	r3, [r7, #0]
   30616:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30618:	69fb      	ldr	r3, [r7, #28]
   3061a:	2204      	movs	r2, #4
   3061c:	5e9b      	ldrsh	r3, [r3, r2]
   3061e:	2b00      	cmp	r3, #0
   30620:	dd09      	ble.n	30636 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   30622:	69fb      	ldr	r3, [r7, #28]
   30624:	2204      	movs	r2, #4
   30626:	5e9b      	ldrsh	r3, [r3, r2]
   30628:	001a      	movs	r2, r3
   3062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3062c:	0011      	movs	r1, r2
   3062e:	0018      	movs	r0, r3
   30630:	4b23      	ldr	r3, [pc, #140]	; (306c0 <http_client_socket_event_handler+0x160>)
   30632:	4798      	blx	r3
   30634:	e00b      	b.n	3064e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30636:	69fb      	ldr	r3, [r7, #28]
   30638:	2204      	movs	r2, #4
   3063a:	5e9b      	ldrsh	r3, [r3, r2]
   3063c:	0018      	movs	r0, r3
   3063e:	4b1b      	ldr	r3, [pc, #108]	; (306ac <http_client_socket_event_handler+0x14c>)
   30640:	4798      	blx	r3
   30642:	0002      	movs	r2, r0
   30644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30646:	0011      	movs	r1, r2
   30648:	0018      	movs	r0, r3
   3064a:	4b19      	ldr	r3, [pc, #100]	; (306b0 <http_client_socket_event_handler+0x150>)
   3064c:	4798      	blx	r3
		_http_client_recv_packet(module);
   3064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30650:	0018      	movs	r0, r3
   30652:	4b19      	ldr	r3, [pc, #100]	; (306b8 <http_client_socket_event_handler+0x158>)
   30654:	4798      	blx	r3
		break;
   30656:	e024      	b.n	306a2 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30658:	231a      	movs	r3, #26
   3065a:	18fb      	adds	r3, r7, r3
   3065c:	683a      	ldr	r2, [r7, #0]
   3065e:	8812      	ldrh	r2, [r2, #0]
   30660:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   30662:	231a      	movs	r3, #26
   30664:	18fb      	adds	r3, r7, r3
   30666:	2200      	movs	r2, #0
   30668:	5e9b      	ldrsh	r3, [r3, r2]
   3066a:	2b00      	cmp	r3, #0
   3066c:	da0d      	bge.n	3068a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   3066e:	231a      	movs	r3, #26
   30670:	18fb      	adds	r3, r7, r3
   30672:	2200      	movs	r2, #0
   30674:	5e9b      	ldrsh	r3, [r3, r2]
   30676:	0018      	movs	r0, r3
   30678:	4b0c      	ldr	r3, [pc, #48]	; (306ac <http_client_socket_event_handler+0x14c>)
   3067a:	4798      	blx	r3
   3067c:	0002      	movs	r2, r0
   3067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30680:	0011      	movs	r1, r2
   30682:	0018      	movs	r0, r3
   30684:	4b0a      	ldr	r3, [pc, #40]	; (306b0 <http_client_socket_event_handler+0x150>)
   30686:	4798      	blx	r3
   30688:	e003      	b.n	30692 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   3068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3068c:	0018      	movs	r0, r3
   3068e:	4b0b      	ldr	r3, [pc, #44]	; (306bc <http_client_socket_event_handler+0x15c>)
   30690:	4798      	blx	r3
		module->sending = 0;
   30692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30694:	2241      	movs	r2, #65	; 0x41
   30696:	5c99      	ldrb	r1, [r3, r2]
   30698:	2001      	movs	r0, #1
   3069a:	4381      	bics	r1, r0
   3069c:	5499      	strb	r1, [r3, r2]
    	break;
   3069e:	e000      	b.n	306a2 <http_client_socket_event_handler+0x142>
		return;
   306a0:	46c0      	nop			; (mov r8, r8)
	}

}
   306a2:	46bd      	mov	sp, r7
   306a4:	b00a      	add	sp, #40	; 0x28
   306a6:	bd80      	pop	{r7, pc}
   306a8:	20004570 	.word	0x20004570
   306ac:	000304e9 	.word	0x000304e9
   306b0:	00030b5d 	.word	0x00030b5d
   306b4:	00031eb9 	.word	0x00031eb9
   306b8:	000313e9 	.word	0x000313e9
   306bc:	00030cb1 	.word	0x00030cb1
   306c0:	0003144d 	.word	0x0003144d

000306c4 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   306c4:	b580      	push	{r7, lr}
   306c6:	b088      	sub	sp, #32
   306c8:	af00      	add	r7, sp, #0
   306ca:	6078      	str	r0, [r7, #4]
   306cc:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   306ce:	2300      	movs	r3, #0
   306d0:	61fb      	str	r3, [r7, #28]
   306d2:	e048      	b.n	30766 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   306d4:	4b27      	ldr	r3, [pc, #156]	; (30774 <http_client_socket_resolve_handler+0xb0>)
   306d6:	69fa      	ldr	r2, [r7, #28]
   306d8:	0092      	lsls	r2, r2, #2
   306da:	58d3      	ldr	r3, [r2, r3]
   306dc:	2b00      	cmp	r3, #0
   306de:	d03f      	beq.n	30760 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   306e0:	4b24      	ldr	r3, [pc, #144]	; (30774 <http_client_socket_resolve_handler+0xb0>)
   306e2:	69fa      	ldr	r2, [r7, #28]
   306e4:	0092      	lsls	r2, r2, #2
   306e6:	58d3      	ldr	r3, [r2, r3]
   306e8:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   306ea:	69bb      	ldr	r3, [r7, #24]
   306ec:	1c5a      	adds	r2, r3, #1
   306ee:	687b      	ldr	r3, [r7, #4]
   306f0:	0011      	movs	r1, r2
   306f2:	0018      	movs	r0, r3
   306f4:	4b20      	ldr	r3, [pc, #128]	; (30778 <http_client_socket_resolve_handler+0xb4>)
   306f6:	4798      	blx	r3
   306f8:	1e03      	subs	r3, r0, #0
   306fa:	d131      	bne.n	30760 <http_client_socket_resolve_handler+0x9c>
   306fc:	69bb      	ldr	r3, [r7, #24]
   306fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30700:	2b01      	cmp	r3, #1
   30702:	d12d      	bne.n	30760 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30704:	683b      	ldr	r3, [r7, #0]
   30706:	2b00      	cmp	r3, #0
   30708:	d107      	bne.n	3071a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   3070a:	2376      	movs	r3, #118	; 0x76
   3070c:	425a      	negs	r2, r3
   3070e:	69bb      	ldr	r3, [r7, #24]
   30710:	0011      	movs	r1, r2
   30712:	0018      	movs	r0, r3
   30714:	4b19      	ldr	r3, [pc, #100]	; (3077c <http_client_socket_resolve_handler+0xb8>)
   30716:	4798      	blx	r3
					return;
   30718:	e028      	b.n	3076c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   3071a:	2308      	movs	r3, #8
   3071c:	18fb      	adds	r3, r7, r3
   3071e:	2202      	movs	r2, #2
   30720:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30722:	69bb      	ldr	r3, [r7, #24]
   30724:	2250      	movs	r2, #80	; 0x50
   30726:	5a9b      	ldrh	r3, [r3, r2]
   30728:	021b      	lsls	r3, r3, #8
   3072a:	b21a      	sxth	r2, r3
   3072c:	69bb      	ldr	r3, [r7, #24]
   3072e:	2150      	movs	r1, #80	; 0x50
   30730:	5a5b      	ldrh	r3, [r3, r1]
   30732:	0a1b      	lsrs	r3, r3, #8
   30734:	b29b      	uxth	r3, r3
   30736:	b21b      	sxth	r3, r3
   30738:	4313      	orrs	r3, r2
   3073a:	b21b      	sxth	r3, r3
   3073c:	b29a      	uxth	r2, r3
   3073e:	2308      	movs	r3, #8
   30740:	18fb      	adds	r3, r7, r3
   30742:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30744:	2308      	movs	r3, #8
   30746:	18fb      	adds	r3, r7, r3
   30748:	683a      	ldr	r2, [r7, #0]
   3074a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3074c:	69bb      	ldr	r3, [r7, #24]
   3074e:	781b      	ldrb	r3, [r3, #0]
   30750:	b25b      	sxtb	r3, r3
   30752:	2208      	movs	r2, #8
   30754:	18b9      	adds	r1, r7, r2
   30756:	2210      	movs	r2, #16
   30758:	0018      	movs	r0, r3
   3075a:	4b09      	ldr	r3, [pc, #36]	; (30780 <http_client_socket_resolve_handler+0xbc>)
   3075c:	4798      	blx	r3
				return;
   3075e:	e005      	b.n	3076c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30760:	69fb      	ldr	r3, [r7, #28]
   30762:	3301      	adds	r3, #1
   30764:	61fb      	str	r3, [r7, #28]
   30766:	69fb      	ldr	r3, [r7, #28]
   30768:	2b06      	cmp	r3, #6
   3076a:	ddb3      	ble.n	306d4 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   3076c:	46bd      	mov	sp, r7
   3076e:	b008      	add	sp, #32
   30770:	bd80      	pop	{r7, pc}
   30772:	46c0      	nop			; (mov r8, r8)
   30774:	20004570 	.word	0x20004570
   30778:	0003466f 	.word	0x0003466f
   3077c:	00030b5d 	.word	0x00030b5d
   30780:	00025081 	.word	0x00025081

00030784 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30784:	b580      	push	{r7, lr}
   30786:	b086      	sub	sp, #24
   30788:	af00      	add	r7, sp, #0
   3078a:	60f8      	str	r0, [r7, #12]
   3078c:	60b9      	str	r1, [r7, #8]
   3078e:	607a      	str	r2, [r7, #4]
   30790:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   30792:	687b      	ldr	r3, [r7, #4]
   30794:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30796:	697b      	ldr	r3, [r7, #20]
   30798:	2b00      	cmp	r3, #0
   3079a:	d007      	beq.n	307ac <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   3079c:	233e      	movs	r3, #62	; 0x3e
   3079e:	425a      	negs	r2, r3
   307a0:	697b      	ldr	r3, [r7, #20]
   307a2:	0011      	movs	r1, r2
   307a4:	0018      	movs	r0, r3
   307a6:	4b03      	ldr	r3, [pc, #12]	; (307b4 <http_client_timer_callback+0x30>)
   307a8:	4798      	blx	r3
   307aa:	e000      	b.n	307ae <http_client_timer_callback+0x2a>
		return;
   307ac:	46c0      	nop			; (mov r8, r8)
}
   307ae:	46bd      	mov	sp, r7
   307b0:	b006      	add	sp, #24
   307b2:	bd80      	pop	{r7, pc}
   307b4:	00030b5d 	.word	0x00030b5d

000307b8 <_is_ip>:

static int _is_ip(const char *host)
{
   307b8:	b580      	push	{r7, lr}
   307ba:	b084      	sub	sp, #16
   307bc:	af00      	add	r7, sp, #0
   307be:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   307c0:	2300      	movs	r3, #0
   307c2:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   307c4:	e03a      	b.n	3083c <_is_ip+0x84>
		ch = *host++;
   307c6:	687b      	ldr	r3, [r7, #4]
   307c8:	1c5a      	adds	r2, r3, #1
   307ca:	607a      	str	r2, [r7, #4]
   307cc:	220b      	movs	r2, #11
   307ce:	18ba      	adds	r2, r7, r2
   307d0:	781b      	ldrb	r3, [r3, #0]
   307d2:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   307d4:	230b      	movs	r3, #11
   307d6:	18fb      	adds	r3, r7, r3
   307d8:	781b      	ldrb	r3, [r3, #0]
   307da:	2b60      	cmp	r3, #96	; 0x60
   307dc:	d904      	bls.n	307e8 <_is_ip+0x30>
   307de:	230b      	movs	r3, #11
   307e0:	18fb      	adds	r3, r7, r3
   307e2:	781b      	ldrb	r3, [r3, #0]
   307e4:	2b66      	cmp	r3, #102	; 0x66
   307e6:	d913      	bls.n	30810 <_is_ip+0x58>
   307e8:	230b      	movs	r3, #11
   307ea:	18fb      	adds	r3, r7, r3
   307ec:	781b      	ldrb	r3, [r3, #0]
   307ee:	2b40      	cmp	r3, #64	; 0x40
   307f0:	d904      	bls.n	307fc <_is_ip+0x44>
   307f2:	230b      	movs	r3, #11
   307f4:	18fb      	adds	r3, r7, r3
   307f6:	781b      	ldrb	r3, [r3, #0]
   307f8:	2b46      	cmp	r3, #70	; 0x46
   307fa:	d909      	bls.n	30810 <_is_ip+0x58>
   307fc:	230b      	movs	r3, #11
   307fe:	18fb      	adds	r3, r7, r3
   30800:	781b      	ldrb	r3, [r3, #0]
   30802:	2b3a      	cmp	r3, #58	; 0x3a
   30804:	d004      	beq.n	30810 <_is_ip+0x58>
   30806:	230b      	movs	r3, #11
   30808:	18fb      	adds	r3, r7, r3
   3080a:	781b      	ldrb	r3, [r3, #0]
   3080c:	2b2f      	cmp	r3, #47	; 0x2f
   3080e:	d102      	bne.n	30816 <_is_ip+0x5e>
			isv6 = 1;
   30810:	2301      	movs	r3, #1
   30812:	60fb      	str	r3, [r7, #12]
   30814:	e012      	b.n	3083c <_is_ip+0x84>
		} else if (ch == '.') {
   30816:	230b      	movs	r3, #11
   30818:	18fb      	adds	r3, r7, r3
   3081a:	781b      	ldrb	r3, [r3, #0]
   3081c:	2b2e      	cmp	r3, #46	; 0x2e
   3081e:	d104      	bne.n	3082a <_is_ip+0x72>
			if (isv6) {
   30820:	68fb      	ldr	r3, [r7, #12]
   30822:	2b00      	cmp	r3, #0
   30824:	d00a      	beq.n	3083c <_is_ip+0x84>
				return 0;
   30826:	2300      	movs	r3, #0
   30828:	e00d      	b.n	30846 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   3082a:	230b      	movs	r3, #11
   3082c:	18fb      	adds	r3, r7, r3
   3082e:	781b      	ldrb	r3, [r3, #0]
   30830:	2230      	movs	r2, #48	; 0x30
   30832:	4013      	ands	r3, r2
   30834:	2b30      	cmp	r3, #48	; 0x30
   30836:	d001      	beq.n	3083c <_is_ip+0x84>
			return 0;
   30838:	2300      	movs	r3, #0
   3083a:	e004      	b.n	30846 <_is_ip+0x8e>
	while (*host != '\0') {
   3083c:	687b      	ldr	r3, [r7, #4]
   3083e:	781b      	ldrb	r3, [r3, #0]
   30840:	2b00      	cmp	r3, #0
   30842:	d1c0      	bne.n	307c6 <_is_ip+0xe>
		}
	}
	return 1;
   30844:	2301      	movs	r3, #1
}
   30846:	0018      	movs	r0, r3
   30848:	46bd      	mov	sp, r7
   3084a:	b004      	add	sp, #16
   3084c:	bd80      	pop	{r7, pc}
	...

00030850 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30850:	b5b0      	push	{r4, r5, r7, lr}
   30852:	b08e      	sub	sp, #56	; 0x38
   30854:	af00      	add	r7, sp, #0
   30856:	60f8      	str	r0, [r7, #12]
   30858:	60b9      	str	r1, [r7, #8]
   3085a:	603b      	str	r3, [r7, #0]
   3085c:	1dfb      	adds	r3, r7, #7
   3085e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   30860:	2337      	movs	r3, #55	; 0x37
   30862:	18fb      	adds	r3, r7, r3
   30864:	2200      	movs	r2, #0
   30866:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30868:	2300      	movs	r3, #0
   3086a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   3086c:	2300      	movs	r3, #0
   3086e:	633b      	str	r3, [r7, #48]	; 0x30
   30870:	2300      	movs	r3, #0
   30872:	62fb      	str	r3, [r7, #44]	; 0x2c
   30874:	2300      	movs	r3, #0
   30876:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30878:	68fb      	ldr	r3, [r7, #12]
   3087a:	2b00      	cmp	r3, #0
   3087c:	d102      	bne.n	30884 <http_client_send_request+0x34>
		return -EINVAL;
   3087e:	2316      	movs	r3, #22
   30880:	425b      	negs	r3, r3
   30882:	e145      	b.n	30b10 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30884:	68fb      	ldr	r3, [r7, #12]
   30886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30888:	2b02      	cmp	r3, #2
   3088a:	d902      	bls.n	30892 <http_client_send_request+0x42>
		return -EBUSY;
   3088c:	2310      	movs	r3, #16
   3088e:	425b      	negs	r3, r3
   30890:	e13e      	b.n	30b10 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   30892:	49a1      	ldr	r1, [pc, #644]	; (30b18 <http_client_send_request+0x2c8>)
   30894:	68bb      	ldr	r3, [r7, #8]
   30896:	2207      	movs	r2, #7
   30898:	0018      	movs	r0, r3
   3089a:	4ba0      	ldr	r3, [pc, #640]	; (30b1c <http_client_send_request+0x2cc>)
   3089c:	4798      	blx	r3
   3089e:	1e03      	subs	r3, r0, #0
   308a0:	d102      	bne.n	308a8 <http_client_send_request+0x58>
		i = 7;
   308a2:	2307      	movs	r3, #7
   308a4:	633b      	str	r3, [r7, #48]	; 0x30
   308a6:	e009      	b.n	308bc <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   308a8:	499d      	ldr	r1, [pc, #628]	; (30b20 <http_client_send_request+0x2d0>)
   308aa:	68bb      	ldr	r3, [r7, #8]
   308ac:	2208      	movs	r2, #8
   308ae:	0018      	movs	r0, r3
   308b0:	4b9a      	ldr	r3, [pc, #616]	; (30b1c <http_client_send_request+0x2cc>)
   308b2:	4798      	blx	r3
   308b4:	1e03      	subs	r3, r0, #0
   308b6:	d101      	bne.n	308bc <http_client_send_request+0x6c>
		i = 8;
   308b8:	2308      	movs	r3, #8
   308ba:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   308bc:	68fb      	ldr	r3, [r7, #12]
   308be:	1c5c      	adds	r4, r3, #1
   308c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   308c2:	68ba      	ldr	r2, [r7, #8]
   308c4:	18d5      	adds	r5, r2, r3
   308c6:	68fb      	ldr	r3, [r7, #12]
   308c8:	3301      	adds	r3, #1
   308ca:	0018      	movs	r0, r3
   308cc:	4b95      	ldr	r3, [pc, #596]	; (30b24 <http_client_send_request+0x2d4>)
   308ce:	4798      	blx	r3
   308d0:	0003      	movs	r3, r0
   308d2:	001a      	movs	r2, r3
   308d4:	0029      	movs	r1, r5
   308d6:	0020      	movs	r0, r4
   308d8:	4b90      	ldr	r3, [pc, #576]	; (30b1c <http_client_send_request+0x2cc>)
   308da:	4798      	blx	r3
   308dc:	0003      	movs	r3, r0
   308de:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   308e0:	e00d      	b.n	308fe <http_client_send_request+0xae>
		module->host[j++] = url[i];
   308e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   308e4:	1c5a      	adds	r2, r3, #1
   308e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   308e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   308ea:	68b9      	ldr	r1, [r7, #8]
   308ec:	188a      	adds	r2, r1, r2
   308ee:	7811      	ldrb	r1, [r2, #0]
   308f0:	68fa      	ldr	r2, [r7, #12]
   308f2:	18d3      	adds	r3, r2, r3
   308f4:	1c0a      	adds	r2, r1, #0
   308f6:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   308f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   308fa:	3301      	adds	r3, #1
   308fc:	633b      	str	r3, [r7, #48]	; 0x30
   308fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30900:	68ba      	ldr	r2, [r7, #8]
   30902:	18d3      	adds	r3, r2, r3
   30904:	781b      	ldrb	r3, [r3, #0]
   30906:	2b00      	cmp	r3, #0
   30908:	d005      	beq.n	30916 <http_client_send_request+0xc6>
   3090a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3090c:	68ba      	ldr	r2, [r7, #8]
   3090e:	18d3      	adds	r3, r2, r3
   30910:	781b      	ldrb	r3, [r3, #0]
   30912:	2b2f      	cmp	r3, #47	; 0x2f
   30914:	d1e5      	bne.n	308e2 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30916:	68fa      	ldr	r2, [r7, #12]
   30918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3091a:	18d3      	adds	r3, r2, r3
   3091c:	3301      	adds	r3, #1
   3091e:	2200      	movs	r2, #0
   30920:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30924:	68ba      	ldr	r2, [r7, #8]
   30926:	18d3      	adds	r3, r2, r3
   30928:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   3092a:	68fb      	ldr	r3, [r7, #12]
   3092c:	3301      	adds	r3, #1
   3092e:	781b      	ldrb	r3, [r3, #0]
   30930:	2b00      	cmp	r3, #0
   30932:	d102      	bne.n	3093a <http_client_send_request+0xea>
		return -EINVAL;
   30934:	2316      	movs	r3, #22
   30936:	425b      	negs	r3, r3
   30938:	e0ea      	b.n	30b10 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   3093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3093c:	0018      	movs	r0, r3
   3093e:	4b79      	ldr	r3, [pc, #484]	; (30b24 <http_client_send_request+0x2d4>)
   30940:	4798      	blx	r3
   30942:	0003      	movs	r3, r0
   30944:	2b3f      	cmp	r3, #63	; 0x3f
   30946:	d902      	bls.n	3094e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30948:	235b      	movs	r3, #91	; 0x5b
   3094a:	425b      	negs	r3, r3
   3094c:	e0e0      	b.n	30b10 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   3094e:	68fb      	ldr	r3, [r7, #12]
   30950:	22d4      	movs	r2, #212	; 0xd4
   30952:	589b      	ldr	r3, [r3, r2]
   30954:	2b00      	cmp	r3, #0
   30956:	d005      	beq.n	30964 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30958:	68fb      	ldr	r3, [r7, #12]
   3095a:	22d4      	movs	r2, #212	; 0xd4
   3095c:	589b      	ldr	r3, [r3, r2]
   3095e:	0018      	movs	r0, r3
   30960:	4b71      	ldr	r3, [pc, #452]	; (30b28 <http_client_send_request+0x2d8>)
   30962:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30966:	2b00      	cmp	r3, #0
   30968:	d010      	beq.n	3098c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   3096a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3096c:	0018      	movs	r0, r3
   3096e:	4b6f      	ldr	r3, [pc, #444]	; (30b2c <http_client_send_request+0x2dc>)
   30970:	4798      	blx	r3
   30972:	0003      	movs	r3, r0
   30974:	0019      	movs	r1, r3
   30976:	68fb      	ldr	r3, [r7, #12]
   30978:	22d4      	movs	r2, #212	; 0xd4
   3097a:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   3097c:	68fb      	ldr	r3, [r7, #12]
   3097e:	22d4      	movs	r2, #212	; 0xd4
   30980:	589b      	ldr	r3, [r3, r2]
   30982:	2b00      	cmp	r3, #0
   30984:	d106      	bne.n	30994 <http_client_send_request+0x144>
			return -ENOMEM;
   30986:	230c      	movs	r3, #12
   30988:	425b      	negs	r3, r3
   3098a:	e0c1      	b.n	30b10 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   3098c:	68fb      	ldr	r3, [r7, #12]
   3098e:	22d4      	movs	r2, #212	; 0xd4
   30990:	2100      	movs	r1, #0
   30992:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30994:	68fb      	ldr	r3, [r7, #12]
   30996:	2241      	movs	r2, #65	; 0x41
   30998:	5c99      	ldrb	r1, [r3, r2]
   3099a:	2001      	movs	r0, #1
   3099c:	4381      	bics	r1, r0
   3099e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   309a0:	68fb      	ldr	r3, [r7, #12]
   309a2:	2200      	movs	r2, #0
   309a4:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   309a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   309a8:	781b      	ldrb	r3, [r3, #0]
   309aa:	2b2f      	cmp	r3, #47	; 0x2f
   309ac:	d107      	bne.n	309be <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   309ae:	68fb      	ldr	r3, [r7, #12]
   309b0:	3370      	adds	r3, #112	; 0x70
   309b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   309b4:	0011      	movs	r1, r2
   309b6:	0018      	movs	r0, r3
   309b8:	4b5d      	ldr	r3, [pc, #372]	; (30b30 <http_client_send_request+0x2e0>)
   309ba:	4798      	blx	r3
   309bc:	e00f      	b.n	309de <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   309be:	68fb      	ldr	r3, [r7, #12]
   309c0:	2270      	movs	r2, #112	; 0x70
   309c2:	212f      	movs	r1, #47	; 0x2f
   309c4:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   309c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   309c8:	781b      	ldrb	r3, [r3, #0]
   309ca:	2b00      	cmp	r3, #0
   309cc:	d007      	beq.n	309de <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   309ce:	68fb      	ldr	r3, [r7, #12]
   309d0:	3370      	adds	r3, #112	; 0x70
   309d2:	3301      	adds	r3, #1
   309d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   309d6:	0011      	movs	r1, r2
   309d8:	0018      	movs	r0, r3
   309da:	4b55      	ldr	r3, [pc, #340]	; (30b30 <http_client_send_request+0x2e0>)
   309dc:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   309de:	683b      	ldr	r3, [r7, #0]
   309e0:	2b00      	cmp	r3, #0
   309e2:	d007      	beq.n	309f4 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   309e4:	68fb      	ldr	r3, [r7, #12]
   309e6:	33b0      	adds	r3, #176	; 0xb0
   309e8:	6839      	ldr	r1, [r7, #0]
   309ea:	2218      	movs	r2, #24
   309ec:	0018      	movs	r0, r3
   309ee:	4b51      	ldr	r3, [pc, #324]	; (30b34 <http_client_send_request+0x2e4>)
   309f0:	4798      	blx	r3
   309f2:	e006      	b.n	30a02 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   309f4:	68fb      	ldr	r3, [r7, #12]
   309f6:	33b0      	adds	r3, #176	; 0xb0
   309f8:	2218      	movs	r2, #24
   309fa:	2100      	movs	r1, #0
   309fc:	0018      	movs	r0, r3
   309fe:	4b4e      	ldr	r3, [pc, #312]	; (30b38 <http_client_send_request+0x2e8>)
   30a00:	4798      	blx	r3
	}

	module->req.method = method;
   30a02:	68fb      	ldr	r3, [r7, #12]
   30a04:	1dfa      	adds	r2, r7, #7
   30a06:	21c8      	movs	r1, #200	; 0xc8
   30a08:	7812      	ldrb	r2, [r2, #0]
   30a0a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   30a0c:	68fb      	ldr	r3, [r7, #12]
   30a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30a10:	2b01      	cmp	r3, #1
   30a12:	d003      	beq.n	30a1c <http_client_send_request+0x1cc>
   30a14:	d316      	bcc.n	30a44 <http_client_send_request+0x1f4>
   30a16:	2b02      	cmp	r3, #2
   30a18:	d004      	beq.n	30a24 <http_client_send_request+0x1d4>
   30a1a:	e074      	b.n	30b06 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   30a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a1e:	2b00      	cmp	r3, #0
   30a20:	d100      	bne.n	30a24 <http_client_send_request+0x1d4>
   30a22:	e073      	b.n	30b0c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a26:	2b00      	cmp	r3, #0
   30a28:	d107      	bne.n	30a3a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30a2a:	68fb      	ldr	r3, [r7, #12]
   30a2c:	2203      	movs	r2, #3
   30a2e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30a30:	68fb      	ldr	r3, [r7, #12]
   30a32:	0018      	movs	r0, r3
   30a34:	4b41      	ldr	r3, [pc, #260]	; (30b3c <http_client_send_request+0x2ec>)
   30a36:	4798      	blx	r3
			break;
   30a38:	e069      	b.n	30b0e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30a3a:	68fb      	ldr	r3, [r7, #12]
   30a3c:	2100      	movs	r1, #0
   30a3e:	0018      	movs	r0, r3
   30a40:	4b3f      	ldr	r3, [pc, #252]	; (30b40 <http_client_send_request+0x2f0>)
   30a42:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30a44:	68fb      	ldr	r3, [r7, #12]
   30a46:	2252      	movs	r2, #82	; 0x52
   30a48:	5c9b      	ldrb	r3, [r3, r2]
   30a4a:	2b00      	cmp	r3, #0
   30a4c:	d007      	beq.n	30a5e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   30a4e:	2337      	movs	r3, #55	; 0x37
   30a50:	18fb      	adds	r3, r7, r3
   30a52:	2237      	movs	r2, #55	; 0x37
   30a54:	18ba      	adds	r2, r7, r2
   30a56:	7812      	ldrb	r2, [r2, #0]
   30a58:	2101      	movs	r1, #1
   30a5a:	430a      	orrs	r2, r1
   30a5c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   30a5e:	2337      	movs	r3, #55	; 0x37
   30a60:	18fb      	adds	r3, r7, r3
   30a62:	781b      	ldrb	r3, [r3, #0]
   30a64:	001a      	movs	r2, r3
   30a66:	2101      	movs	r1, #1
   30a68:	2002      	movs	r0, #2
   30a6a:	4b36      	ldr	r3, [pc, #216]	; (30b44 <http_client_send_request+0x2f4>)
   30a6c:	4798      	blx	r3
   30a6e:	0003      	movs	r3, r0
   30a70:	001a      	movs	r2, r3
   30a72:	68fb      	ldr	r3, [r7, #12]
   30a74:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30a76:	68fb      	ldr	r3, [r7, #12]
   30a78:	781b      	ldrb	r3, [r3, #0]
   30a7a:	b25b      	sxtb	r3, r3
   30a7c:	2b00      	cmp	r3, #0
   30a7e:	db3f      	blt.n	30b00 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   30a80:	68fb      	ldr	r3, [r7, #12]
   30a82:	781b      	ldrb	r3, [r3, #0]
   30a84:	b25b      	sxtb	r3, r3
   30a86:	001a      	movs	r2, r3
   30a88:	4b2f      	ldr	r3, [pc, #188]	; (30b48 <http_client_send_request+0x2f8>)
   30a8a:	0092      	lsls	r2, r2, #2
   30a8c:	68f9      	ldr	r1, [r7, #12]
   30a8e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   30a90:	68fb      	ldr	r3, [r7, #12]
   30a92:	3301      	adds	r3, #1
   30a94:	0018      	movs	r0, r3
   30a96:	4b2d      	ldr	r3, [pc, #180]	; (30b4c <http_client_send_request+0x2fc>)
   30a98:	4798      	blx	r3
   30a9a:	1e03      	subs	r3, r0, #0
   30a9c:	d027      	beq.n	30aee <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   30a9e:	2314      	movs	r3, #20
   30aa0:	18fb      	adds	r3, r7, r3
   30aa2:	2202      	movs	r2, #2
   30aa4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30aa6:	68fb      	ldr	r3, [r7, #12]
   30aa8:	2250      	movs	r2, #80	; 0x50
   30aaa:	5a9b      	ldrh	r3, [r3, r2]
   30aac:	021b      	lsls	r3, r3, #8
   30aae:	b21a      	sxth	r2, r3
   30ab0:	68fb      	ldr	r3, [r7, #12]
   30ab2:	2150      	movs	r1, #80	; 0x50
   30ab4:	5a5b      	ldrh	r3, [r3, r1]
   30ab6:	0a1b      	lsrs	r3, r3, #8
   30ab8:	b29b      	uxth	r3, r3
   30aba:	b21b      	sxth	r3, r3
   30abc:	4313      	orrs	r3, r2
   30abe:	b21b      	sxth	r3, r3
   30ac0:	b29a      	uxth	r2, r3
   30ac2:	2314      	movs	r3, #20
   30ac4:	18fb      	adds	r3, r7, r3
   30ac6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30ac8:	68fb      	ldr	r3, [r7, #12]
   30aca:	3301      	adds	r3, #1
   30acc:	0018      	movs	r0, r3
   30ace:	4b20      	ldr	r3, [pc, #128]	; (30b50 <http_client_send_request+0x300>)
   30ad0:	4798      	blx	r3
   30ad2:	0002      	movs	r2, r0
   30ad4:	2314      	movs	r3, #20
   30ad6:	18fb      	adds	r3, r7, r3
   30ad8:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30ada:	68fb      	ldr	r3, [r7, #12]
   30adc:	781b      	ldrb	r3, [r3, #0]
   30ade:	b25b      	sxtb	r3, r3
   30ae0:	2214      	movs	r2, #20
   30ae2:	18b9      	adds	r1, r7, r2
   30ae4:	2210      	movs	r2, #16
   30ae6:	0018      	movs	r0, r3
   30ae8:	4b1a      	ldr	r3, [pc, #104]	; (30b54 <http_client_send_request+0x304>)
   30aea:	4798      	blx	r3
   30aec:	e004      	b.n	30af8 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   30aee:	68fb      	ldr	r3, [r7, #12]
   30af0:	3301      	adds	r3, #1
   30af2:	0018      	movs	r0, r3
   30af4:	4b18      	ldr	r3, [pc, #96]	; (30b58 <http_client_send_request+0x308>)
   30af6:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30af8:	68fb      	ldr	r3, [r7, #12]
   30afa:	2201      	movs	r2, #1
   30afc:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   30afe:	e006      	b.n	30b0e <http_client_send_request+0x2be>
			return -ENOSPC;
   30b00:	231c      	movs	r3, #28
   30b02:	425b      	negs	r3, r3
   30b04:	e004      	b.n	30b10 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30b06:	230b      	movs	r3, #11
   30b08:	425b      	negs	r3, r3
   30b0a:	e001      	b.n	30b10 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   30b0c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   30b0e:	2300      	movs	r3, #0
}
   30b10:	0018      	movs	r0, r3
   30b12:	46bd      	mov	sp, r7
   30b14:	b00e      	add	sp, #56	; 0x38
   30b16:	bdb0      	pop	{r4, r5, r7, pc}
   30b18:	00039534 	.word	0x00039534
   30b1c:	000346dd 	.word	0x000346dd
   30b20:	0003953c 	.word	0x0003953c
   30b24:	000346cf 	.word	0x000346cf
   30b28:	000342cd 	.word	0x000342cd
   30b2c:	00034695 	.word	0x00034695
   30b30:	00034683 	.word	0x00034683
   30b34:	000342e1 	.word	0x000342e1
   30b38:	00034317 	.word	0x00034317
   30b3c:	00030cb1 	.word	0x00030cb1
   30b40:	00030b5d 	.word	0x00030b5d
   30b44:	00024e6d 	.word	0x00024e6d
   30b48:	20004570 	.word	0x20004570
   30b4c:	000307b9 	.word	0x000307b9
   30b50:	000255b9 	.word	0x000255b9
   30b54:	00025081 	.word	0x00025081
   30b58:	000256c1 	.word	0x000256c1

00030b5c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   30b5c:	b580      	push	{r7, lr}
   30b5e:	b086      	sub	sp, #24
   30b60:	af00      	add	r7, sp, #0
   30b62:	6078      	str	r0, [r7, #4]
   30b64:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30b66:	687b      	ldr	r3, [r7, #4]
   30b68:	22c0      	movs	r2, #192	; 0xc0
   30b6a:	589b      	ldr	r3, [r3, r2]
   30b6c:	2b00      	cmp	r3, #0
   30b6e:	d007      	beq.n	30b80 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   30b70:	687b      	ldr	r3, [r7, #4]
   30b72:	22c0      	movs	r2, #192	; 0xc0
   30b74:	589b      	ldr	r3, [r3, r2]
   30b76:	687a      	ldr	r2, [r7, #4]
   30b78:	21c4      	movs	r1, #196	; 0xc4
   30b7a:	5852      	ldr	r2, [r2, r1]
   30b7c:	0010      	movs	r0, r2
   30b7e:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   30b80:	687b      	ldr	r3, [r7, #4]
   30b82:	33b0      	adds	r3, #176	; 0xb0
   30b84:	2218      	movs	r2, #24
   30b86:	2100      	movs	r1, #0
   30b88:	0018      	movs	r0, r3
   30b8a:	4b24      	ldr	r3, [pc, #144]	; (30c1c <_http_client_clear_conn+0xc0>)
   30b8c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   30b8e:	687b      	ldr	r3, [r7, #4]
   30b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30b92:	2b00      	cmp	r3, #0
   30b94:	d005      	beq.n	30ba2 <_http_client_clear_conn+0x46>
		close(module->sock);
   30b96:	687b      	ldr	r3, [r7, #4]
   30b98:	781b      	ldrb	r3, [r3, #0]
   30b9a:	b25b      	sxtb	r3, r3
   30b9c:	0018      	movs	r0, r3
   30b9e:	4b20      	ldr	r3, [pc, #128]	; (30c20 <_http_client_clear_conn+0xc4>)
   30ba0:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30ba2:	687b      	ldr	r3, [r7, #4]
   30ba4:	781b      	ldrb	r3, [r3, #0]
   30ba6:	b25b      	sxtb	r3, r3
   30ba8:	001a      	movs	r2, r3
   30baa:	4b1e      	ldr	r3, [pc, #120]	; (30c24 <_http_client_clear_conn+0xc8>)
   30bac:	0092      	lsls	r2, r2, #2
   30bae:	2100      	movs	r1, #0
   30bb0:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30bb2:	687b      	ldr	r3, [r7, #4]
   30bb4:	336c      	adds	r3, #108	; 0x6c
   30bb6:	226c      	movs	r2, #108	; 0x6c
   30bb8:	2100      	movs	r1, #0
   30bba:	0018      	movs	r0, r3
   30bbc:	4b17      	ldr	r3, [pc, #92]	; (30c1c <_http_client_clear_conn+0xc0>)
   30bbe:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30bc0:	687b      	ldr	r3, [r7, #4]
   30bc2:	33d8      	adds	r3, #216	; 0xd8
   30bc4:	2210      	movs	r2, #16
   30bc6:	2100      	movs	r1, #0
   30bc8:	0018      	movs	r0, r3
   30bca:	4b14      	ldr	r3, [pc, #80]	; (30c1c <_http_client_clear_conn+0xc0>)
   30bcc:	4798      	blx	r3
	module->req.state = STATE_INIT;
   30bce:	687b      	ldr	r3, [r7, #4]
   30bd0:	2200      	movs	r2, #0
   30bd2:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30bd4:	687b      	ldr	r3, [r7, #4]
   30bd6:	22d8      	movs	r2, #216	; 0xd8
   30bd8:	2100      	movs	r1, #0
   30bda:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   30bdc:	687b      	ldr	r3, [r7, #4]
   30bde:	2241      	movs	r2, #65	; 0x41
   30be0:	5c99      	ldrb	r1, [r3, r2]
   30be2:	2001      	movs	r0, #1
   30be4:	4381      	bics	r1, r0
   30be6:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30be8:	687b      	ldr	r3, [r7, #4]
   30bea:	2241      	movs	r2, #65	; 0x41
   30bec:	5c99      	ldrb	r1, [r3, r2]
   30bee:	2002      	movs	r0, #2
   30bf0:	4381      	bics	r1, r0
   30bf2:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30bf4:	230c      	movs	r3, #12
   30bf6:	18fb      	adds	r3, r7, r3
   30bf8:	683a      	ldr	r2, [r7, #0]
   30bfa:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   30bfc:	687b      	ldr	r3, [r7, #4]
   30bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30c00:	2b00      	cmp	r3, #0
   30c02:	d006      	beq.n	30c12 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30c04:	687b      	ldr	r3, [r7, #4]
   30c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30c08:	220c      	movs	r2, #12
   30c0a:	18ba      	adds	r2, r7, r2
   30c0c:	6878      	ldr	r0, [r7, #4]
   30c0e:	2104      	movs	r1, #4
   30c10:	4798      	blx	r3
	}
}
   30c12:	46c0      	nop			; (mov r8, r8)
   30c14:	46bd      	mov	sp, r7
   30c16:	b006      	add	sp, #24
   30c18:	bd80      	pop	{r7, pc}
   30c1a:	46c0      	nop			; (mov r8, r8)
   30c1c:	00034317 	.word	0x00034317
   30c20:	00025479 	.word	0x00025479
   30c24:	20004570 	.word	0x20004570

00030c28 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30c28:	b590      	push	{r4, r7, lr}
   30c2a:	b087      	sub	sp, #28
   30c2c:	af00      	add	r7, sp, #0
   30c2e:	60f8      	str	r0, [r7, #12]
   30c30:	60b9      	str	r1, [r7, #8]
   30c32:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30c34:	68fb      	ldr	r3, [r7, #12]
   30c36:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30c38:	697b      	ldr	r3, [r7, #20]
   30c3a:	2241      	movs	r2, #65	; 0x41
   30c3c:	5c99      	ldrb	r1, [r3, r2]
   30c3e:	2001      	movs	r0, #1
   30c40:	4301      	orrs	r1, r0
   30c42:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30c44:	697b      	ldr	r3, [r7, #20]
   30c46:	2000      	movs	r0, #0
   30c48:	5618      	ldrsb	r0, [r3, r0]
   30c4a:	687b      	ldr	r3, [r7, #4]
   30c4c:	b29a      	uxth	r2, r3
   30c4e:	68b9      	ldr	r1, [r7, #8]
   30c50:	2300      	movs	r3, #0
   30c52:	4c14      	ldr	r4, [pc, #80]	; (30ca4 <_http_client_send_wait+0x7c>)
   30c54:	47a0      	blx	r4
   30c56:	0003      	movs	r3, r0
   30c58:	613b      	str	r3, [r7, #16]
   30c5a:	693b      	ldr	r3, [r7, #16]
   30c5c:	2b00      	cmp	r3, #0
   30c5e:	da0f      	bge.n	30c80 <_http_client_send_wait+0x58>
		module->sending = 0;
   30c60:	697b      	ldr	r3, [r7, #20]
   30c62:	2241      	movs	r2, #65	; 0x41
   30c64:	5c99      	ldrb	r1, [r3, r2]
   30c66:	2001      	movs	r0, #1
   30c68:	4381      	bics	r1, r0
   30c6a:	5499      	strb	r1, [r3, r2]
		return result;
   30c6c:	693b      	ldr	r3, [r7, #16]
   30c6e:	e014      	b.n	30c9a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   30c70:	2000      	movs	r0, #0
   30c72:	4b0d      	ldr	r3, [pc, #52]	; (30ca8 <_http_client_send_wait+0x80>)
   30c74:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   30c76:	697b      	ldr	r3, [r7, #20]
   30c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30c7a:	0018      	movs	r0, r3
   30c7c:	4b0b      	ldr	r3, [pc, #44]	; (30cac <_http_client_send_wait+0x84>)
   30c7e:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   30c80:	697b      	ldr	r3, [r7, #20]
   30c82:	2241      	movs	r2, #65	; 0x41
   30c84:	5c9b      	ldrb	r3, [r3, r2]
   30c86:	2201      	movs	r2, #1
   30c88:	4013      	ands	r3, r2
   30c8a:	b2db      	uxtb	r3, r3
   30c8c:	2b00      	cmp	r3, #0
   30c8e:	d003      	beq.n	30c98 <_http_client_send_wait+0x70>
   30c90:	697b      	ldr	r3, [r7, #20]
   30c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30c94:	2b02      	cmp	r3, #2
   30c96:	d8eb      	bhi.n	30c70 <_http_client_send_wait+0x48>
	}

	return 0;
   30c98:	2300      	movs	r3, #0
}
   30c9a:	0018      	movs	r0, r3
   30c9c:	46bd      	mov	sp, r7
   30c9e:	b007      	add	sp, #28
   30ca0:	bd90      	pop	{r4, r7, pc}
   30ca2:	46c0      	nop			; (mov r8, r8)
   30ca4:	00025195 	.word	0x00025195
   30ca8:	00021841 	.word	0x00021841
   30cac:	00031f35 	.word	0x00031f35

00030cb0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   30cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   30cb2:	46c6      	mov	lr, r8
   30cb4:	b500      	push	{lr}
   30cb6:	b0a0      	sub	sp, #128	; 0x80
   30cb8:	af02      	add	r7, sp, #8
   30cba:	61f8      	str	r0, [r7, #28]
   30cbc:	4668      	mov	r0, sp
   30cbe:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   30cc0:	2318      	movs	r3, #24
   30cc2:	2218      	movs	r2, #24
   30cc4:	18ba      	adds	r2, r7, r2
   30cc6:	18d0      	adds	r0, r2, r3
   30cc8:	4bbd      	ldr	r3, [pc, #756]	; (30fc0 <_http_client_request+0x310>)
   30cca:	469c      	mov	ip, r3
   30ccc:	4663      	mov	r3, ip
   30cce:	cb16      	ldmia	r3!, {r1, r2, r4}
   30cd0:	c016      	stmia	r0!, {r1, r2, r4}
   30cd2:	469c      	mov	ip, r3
   30cd4:	4663      	mov	r3, ip
   30cd6:	681b      	ldr	r3, [r3, #0]
   30cd8:	469c      	mov	ip, r3
   30cda:	4663      	mov	r3, ip
   30cdc:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   30cde:	69f8      	ldr	r0, [r7, #28]
   30ce0:	6e40      	ldr	r0, [r0, #100]	; 0x64
   30ce2:	4684      	mov	ip, r0
   30ce4:	2301      	movs	r3, #1
   30ce6:	425b      	negs	r3, r3
   30ce8:	4698      	mov	r8, r3
   30cea:	44c4      	add	ip, r8
   30cec:	4663      	mov	r3, ip
   30cee:	66fb      	str	r3, [r7, #108]	; 0x6c
   30cf0:	6038      	str	r0, [r7, #0]
   30cf2:	2300      	movs	r3, #0
   30cf4:	607b      	str	r3, [r7, #4]
   30cf6:	6839      	ldr	r1, [r7, #0]
   30cf8:	687a      	ldr	r2, [r7, #4]
   30cfa:	000b      	movs	r3, r1
   30cfc:	0f5b      	lsrs	r3, r3, #29
   30cfe:	469c      	mov	ip, r3
   30d00:	0013      	movs	r3, r2
   30d02:	00db      	lsls	r3, r3, #3
   30d04:	617b      	str	r3, [r7, #20]
   30d06:	4663      	mov	r3, ip
   30d08:	697c      	ldr	r4, [r7, #20]
   30d0a:	431c      	orrs	r4, r3
   30d0c:	617c      	str	r4, [r7, #20]
   30d0e:	000b      	movs	r3, r1
   30d10:	00db      	lsls	r3, r3, #3
   30d12:	613b      	str	r3, [r7, #16]
   30d14:	0005      	movs	r5, r0
   30d16:	2200      	movs	r2, #0
   30d18:	0016      	movs	r6, r2
   30d1a:	0f6a      	lsrs	r2, r5, #29
   30d1c:	00f3      	lsls	r3, r6, #3
   30d1e:	60fb      	str	r3, [r7, #12]
   30d20:	68fb      	ldr	r3, [r7, #12]
   30d22:	4313      	orrs	r3, r2
   30d24:	60fb      	str	r3, [r7, #12]
   30d26:	00eb      	lsls	r3, r5, #3
   30d28:	60bb      	str	r3, [r7, #8]
   30d2a:	1dc3      	adds	r3, r0, #7
   30d2c:	08db      	lsrs	r3, r3, #3
   30d2e:	00db      	lsls	r3, r3, #3
   30d30:	466a      	mov	r2, sp
   30d32:	1ad3      	subs	r3, r2, r3
   30d34:	469d      	mov	sp, r3
   30d36:	ab02      	add	r3, sp, #8
   30d38:	3300      	adds	r3, #0
   30d3a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   30d3c:	69fb      	ldr	r3, [r7, #28]
   30d3e:	2b00      	cmp	r3, #0
   30d40:	d100      	bne.n	30d44 <_http_client_request+0x94>
   30d42:	e346      	b.n	313d2 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30d44:	69fb      	ldr	r3, [r7, #28]
   30d46:	2241      	movs	r2, #65	; 0x41
   30d48:	5c9b      	ldrb	r3, [r3, r2]
   30d4a:	2201      	movs	r2, #1
   30d4c:	4013      	ands	r3, r2
   30d4e:	b2db      	uxtb	r3, r3
   30d50:	2b00      	cmp	r3, #0
   30d52:	d000      	beq.n	30d56 <_http_client_request+0xa6>
   30d54:	e33f      	b.n	313d6 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30d56:	69fb      	ldr	r3, [r7, #28]
   30d58:	33b0      	adds	r3, #176	; 0xb0
   30d5a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   30d5c:	69fb      	ldr	r3, [r7, #28]
   30d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30d60:	2b03      	cmp	r3, #3
   30d62:	d003      	beq.n	30d6c <_http_client_request+0xbc>
   30d64:	2b04      	cmp	r3, #4
   30d66:	d100      	bne.n	30d6a <_http_client_request+0xba>
   30d68:	e1b3      	b.n	310d2 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   30d6a:	e32f      	b.n	313cc <_http_client_request+0x71c>
		module->req.content_length = 0;
   30d6c:	69fb      	ldr	r3, [r7, #28]
   30d6e:	22cc      	movs	r2, #204	; 0xcc
   30d70:	2100      	movs	r1, #0
   30d72:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   30d74:	69fb      	ldr	r3, [r7, #28]
   30d76:	22d0      	movs	r2, #208	; 0xd0
   30d78:	2100      	movs	r1, #0
   30d7a:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   30d7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30d7e:	69fb      	ldr	r3, [r7, #28]
   30d80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   30d82:	4c90      	ldr	r4, [pc, #576]	; (30fc4 <_http_client_request+0x314>)
   30d84:	2334      	movs	r3, #52	; 0x34
   30d86:	2018      	movs	r0, #24
   30d88:	1838      	adds	r0, r7, r0
   30d8a:	18c0      	adds	r0, r0, r3
   30d8c:	69fb      	ldr	r3, [r7, #28]
   30d8e:	9300      	str	r3, [sp, #0]
   30d90:	0023      	movs	r3, r4
   30d92:	4c8d      	ldr	r4, [pc, #564]	; (30fc8 <_http_client_request+0x318>)
   30d94:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   30d96:	69fb      	ldr	r3, [r7, #28]
   30d98:	22c8      	movs	r2, #200	; 0xc8
   30d9a:	5c9b      	ldrb	r3, [r3, r2]
   30d9c:	2b01      	cmp	r3, #1
   30d9e:	d10a      	bne.n	30db6 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   30da0:	498a      	ldr	r1, [pc, #552]	; (30fcc <_http_client_request+0x31c>)
   30da2:	2334      	movs	r3, #52	; 0x34
   30da4:	2218      	movs	r2, #24
   30da6:	4694      	mov	ip, r2
   30da8:	44bc      	add	ip, r7
   30daa:	4463      	add	r3, ip
   30dac:	2204      	movs	r2, #4
   30dae:	0018      	movs	r0, r3
   30db0:	4b87      	ldr	r3, [pc, #540]	; (30fd0 <_http_client_request+0x320>)
   30db2:	4798      	blx	r3
   30db4:	e04e      	b.n	30e54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   30db6:	69fb      	ldr	r3, [r7, #28]
   30db8:	22c8      	movs	r2, #200	; 0xc8
   30dba:	5c9b      	ldrb	r3, [r3, r2]
   30dbc:	2b02      	cmp	r3, #2
   30dbe:	d10a      	bne.n	30dd6 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   30dc0:	4984      	ldr	r1, [pc, #528]	; (30fd4 <_http_client_request+0x324>)
   30dc2:	2334      	movs	r3, #52	; 0x34
   30dc4:	2218      	movs	r2, #24
   30dc6:	4694      	mov	ip, r2
   30dc8:	44bc      	add	ip, r7
   30dca:	4463      	add	r3, ip
   30dcc:	2205      	movs	r2, #5
   30dce:	0018      	movs	r0, r3
   30dd0:	4b7f      	ldr	r3, [pc, #508]	; (30fd0 <_http_client_request+0x320>)
   30dd2:	4798      	blx	r3
   30dd4:	e03e      	b.n	30e54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   30dd6:	69fb      	ldr	r3, [r7, #28]
   30dd8:	22c8      	movs	r2, #200	; 0xc8
   30dda:	5c9b      	ldrb	r3, [r3, r2]
   30ddc:	2b03      	cmp	r3, #3
   30dde:	d10a      	bne.n	30df6 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   30de0:	497d      	ldr	r1, [pc, #500]	; (30fd8 <_http_client_request+0x328>)
   30de2:	2334      	movs	r3, #52	; 0x34
   30de4:	2218      	movs	r2, #24
   30de6:	4694      	mov	ip, r2
   30de8:	44bc      	add	ip, r7
   30dea:	4463      	add	r3, ip
   30dec:	2207      	movs	r2, #7
   30dee:	0018      	movs	r0, r3
   30df0:	4b77      	ldr	r3, [pc, #476]	; (30fd0 <_http_client_request+0x320>)
   30df2:	4798      	blx	r3
   30df4:	e02e      	b.n	30e54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   30df6:	69fb      	ldr	r3, [r7, #28]
   30df8:	22c8      	movs	r2, #200	; 0xc8
   30dfa:	5c9b      	ldrb	r3, [r3, r2]
   30dfc:	2b04      	cmp	r3, #4
   30dfe:	d10a      	bne.n	30e16 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   30e00:	4976      	ldr	r1, [pc, #472]	; (30fdc <_http_client_request+0x32c>)
   30e02:	2334      	movs	r3, #52	; 0x34
   30e04:	2218      	movs	r2, #24
   30e06:	4694      	mov	ip, r2
   30e08:	44bc      	add	ip, r7
   30e0a:	4463      	add	r3, ip
   30e0c:	2204      	movs	r2, #4
   30e0e:	0018      	movs	r0, r3
   30e10:	4b6f      	ldr	r3, [pc, #444]	; (30fd0 <_http_client_request+0x320>)
   30e12:	4798      	blx	r3
   30e14:	e01e      	b.n	30e54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   30e16:	69fb      	ldr	r3, [r7, #28]
   30e18:	22c8      	movs	r2, #200	; 0xc8
   30e1a:	5c9b      	ldrb	r3, [r3, r2]
   30e1c:	2b05      	cmp	r3, #5
   30e1e:	d10a      	bne.n	30e36 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   30e20:	496f      	ldr	r1, [pc, #444]	; (30fe0 <_http_client_request+0x330>)
   30e22:	2334      	movs	r3, #52	; 0x34
   30e24:	2218      	movs	r2, #24
   30e26:	4694      	mov	ip, r2
   30e28:	44bc      	add	ip, r7
   30e2a:	4463      	add	r3, ip
   30e2c:	2208      	movs	r2, #8
   30e2e:	0018      	movs	r0, r3
   30e30:	4b67      	ldr	r3, [pc, #412]	; (30fd0 <_http_client_request+0x320>)
   30e32:	4798      	blx	r3
   30e34:	e00e      	b.n	30e54 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30e36:	69fb      	ldr	r3, [r7, #28]
   30e38:	22c8      	movs	r2, #200	; 0xc8
   30e3a:	5c9b      	ldrb	r3, [r3, r2]
   30e3c:	2b06      	cmp	r3, #6
   30e3e:	d109      	bne.n	30e54 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   30e40:	4968      	ldr	r1, [pc, #416]	; (30fe4 <_http_client_request+0x334>)
   30e42:	2334      	movs	r3, #52	; 0x34
   30e44:	2218      	movs	r2, #24
   30e46:	4694      	mov	ip, r2
   30e48:	44bc      	add	ip, r7
   30e4a:	4463      	add	r3, ip
   30e4c:	2205      	movs	r2, #5
   30e4e:	0018      	movs	r0, r3
   30e50:	4b5f      	ldr	r3, [pc, #380]	; (30fd0 <_http_client_request+0x320>)
   30e52:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30e54:	69fb      	ldr	r3, [r7, #28]
   30e56:	3370      	adds	r3, #112	; 0x70
   30e58:	001c      	movs	r4, r3
   30e5a:	69fb      	ldr	r3, [r7, #28]
   30e5c:	3370      	adds	r3, #112	; 0x70
   30e5e:	0018      	movs	r0, r3
   30e60:	4b61      	ldr	r3, [pc, #388]	; (30fe8 <_http_client_request+0x338>)
   30e62:	4798      	blx	r3
   30e64:	0002      	movs	r2, r0
   30e66:	2334      	movs	r3, #52	; 0x34
   30e68:	2118      	movs	r1, #24
   30e6a:	468c      	mov	ip, r1
   30e6c:	44bc      	add	ip, r7
   30e6e:	4463      	add	r3, ip
   30e70:	0021      	movs	r1, r4
   30e72:	0018      	movs	r0, r3
   30e74:	4b56      	ldr	r3, [pc, #344]	; (30fd0 <_http_client_request+0x320>)
   30e76:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   30e78:	495c      	ldr	r1, [pc, #368]	; (30fec <_http_client_request+0x33c>)
   30e7a:	2334      	movs	r3, #52	; 0x34
   30e7c:	2218      	movs	r2, #24
   30e7e:	4694      	mov	ip, r2
   30e80:	44bc      	add	ip, r7
   30e82:	4463      	add	r3, ip
   30e84:	220b      	movs	r2, #11
   30e86:	0018      	movs	r0, r3
   30e88:	4b51      	ldr	r3, [pc, #324]	; (30fd0 <_http_client_request+0x320>)
   30e8a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   30e8c:	4958      	ldr	r1, [pc, #352]	; (30ff0 <_http_client_request+0x340>)
   30e8e:	2334      	movs	r3, #52	; 0x34
   30e90:	2218      	movs	r2, #24
   30e92:	4694      	mov	ip, r2
   30e94:	44bc      	add	ip, r7
   30e96:	4463      	add	r3, ip
   30e98:	220c      	movs	r2, #12
   30e9a:	0018      	movs	r0, r3
   30e9c:	4b4c      	ldr	r3, [pc, #304]	; (30fd0 <_http_client_request+0x320>)
   30e9e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   30ea0:	69fb      	ldr	r3, [r7, #28]
   30ea2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   30ea4:	69fb      	ldr	r3, [r7, #28]
   30ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   30ea8:	0018      	movs	r0, r3
   30eaa:	4b4f      	ldr	r3, [pc, #316]	; (30fe8 <_http_client_request+0x338>)
   30eac:	4798      	blx	r3
   30eae:	0002      	movs	r2, r0
   30eb0:	2334      	movs	r3, #52	; 0x34
   30eb2:	2118      	movs	r1, #24
   30eb4:	468c      	mov	ip, r1
   30eb6:	44bc      	add	ip, r7
   30eb8:	4463      	add	r3, ip
   30eba:	0021      	movs	r1, r4
   30ebc:	0018      	movs	r0, r3
   30ebe:	4b44      	ldr	r3, [pc, #272]	; (30fd0 <_http_client_request+0x320>)
   30ec0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30ec2:	494c      	ldr	r1, [pc, #304]	; (30ff4 <_http_client_request+0x344>)
   30ec4:	2334      	movs	r3, #52	; 0x34
   30ec6:	2218      	movs	r2, #24
   30ec8:	4694      	mov	ip, r2
   30eca:	44bc      	add	ip, r7
   30ecc:	4463      	add	r3, ip
   30ece:	2202      	movs	r2, #2
   30ed0:	0018      	movs	r0, r3
   30ed2:	4b3f      	ldr	r3, [pc, #252]	; (30fd0 <_http_client_request+0x320>)
   30ed4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   30ed6:	4948      	ldr	r1, [pc, #288]	; (30ff8 <_http_client_request+0x348>)
   30ed8:	2334      	movs	r3, #52	; 0x34
   30eda:	2218      	movs	r2, #24
   30edc:	4694      	mov	ip, r2
   30ede:	44bc      	add	ip, r7
   30ee0:	4463      	add	r3, ip
   30ee2:	2206      	movs	r2, #6
   30ee4:	0018      	movs	r0, r3
   30ee6:	4b3a      	ldr	r3, [pc, #232]	; (30fd0 <_http_client_request+0x320>)
   30ee8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   30eea:	69fb      	ldr	r3, [r7, #28]
   30eec:	1c5c      	adds	r4, r3, #1
   30eee:	69fb      	ldr	r3, [r7, #28]
   30ef0:	3301      	adds	r3, #1
   30ef2:	0018      	movs	r0, r3
   30ef4:	4b3c      	ldr	r3, [pc, #240]	; (30fe8 <_http_client_request+0x338>)
   30ef6:	4798      	blx	r3
   30ef8:	0002      	movs	r2, r0
   30efa:	2334      	movs	r3, #52	; 0x34
   30efc:	2118      	movs	r1, #24
   30efe:	468c      	mov	ip, r1
   30f00:	44bc      	add	ip, r7
   30f02:	4463      	add	r3, ip
   30f04:	0021      	movs	r1, r4
   30f06:	0018      	movs	r0, r3
   30f08:	4b31      	ldr	r3, [pc, #196]	; (30fd0 <_http_client_request+0x320>)
   30f0a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30f0c:	4939      	ldr	r1, [pc, #228]	; (30ff4 <_http_client_request+0x344>)
   30f0e:	2334      	movs	r3, #52	; 0x34
   30f10:	2218      	movs	r2, #24
   30f12:	4694      	mov	ip, r2
   30f14:	44bc      	add	ip, r7
   30f16:	4463      	add	r3, ip
   30f18:	2202      	movs	r2, #2
   30f1a:	0018      	movs	r0, r3
   30f1c:	4b2c      	ldr	r3, [pc, #176]	; (30fd0 <_http_client_request+0x320>)
   30f1e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   30f20:	4936      	ldr	r1, [pc, #216]	; (30ffc <_http_client_request+0x34c>)
   30f22:	2334      	movs	r3, #52	; 0x34
   30f24:	2218      	movs	r2, #24
   30f26:	4694      	mov	ip, r2
   30f28:	44bc      	add	ip, r7
   30f2a:	4463      	add	r3, ip
   30f2c:	2218      	movs	r2, #24
   30f2e:	0018      	movs	r0, r3
   30f30:	4b27      	ldr	r3, [pc, #156]	; (30fd0 <_http_client_request+0x320>)
   30f32:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   30f34:	4932      	ldr	r1, [pc, #200]	; (31000 <_http_client_request+0x350>)
   30f36:	2334      	movs	r3, #52	; 0x34
   30f38:	2218      	movs	r2, #24
   30f3a:	4694      	mov	ip, r2
   30f3c:	44bc      	add	ip, r7
   30f3e:	4463      	add	r3, ip
   30f40:	2213      	movs	r2, #19
   30f42:	0018      	movs	r0, r3
   30f44:	4b22      	ldr	r3, [pc, #136]	; (30fd0 <_http_client_request+0x320>)
   30f46:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   30f48:	492e      	ldr	r1, [pc, #184]	; (31004 <_http_client_request+0x354>)
   30f4a:	2334      	movs	r3, #52	; 0x34
   30f4c:	2218      	movs	r2, #24
   30f4e:	4694      	mov	ip, r2
   30f50:	44bc      	add	ip, r7
   30f52:	4463      	add	r3, ip
   30f54:	2217      	movs	r2, #23
   30f56:	0018      	movs	r0, r3
   30f58:	4b1d      	ldr	r3, [pc, #116]	; (30fd0 <_http_client_request+0x320>)
   30f5a:	4798      	blx	r3
		if (entity->read != NULL) {
   30f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30f5e:	68db      	ldr	r3, [r3, #12]
   30f60:	2b00      	cmp	r3, #0
   30f62:	d100      	bne.n	30f66 <_http_client_request+0x2b6>
   30f64:	e088      	b.n	31078 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   30f66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30f68:	781b      	ldrb	r3, [r3, #0]
   30f6a:	2b00      	cmp	r3, #0
   30f6c:	d00f      	beq.n	30f8e <_http_client_request+0x2de>
				module->req.content_length = -1;
   30f6e:	69fb      	ldr	r3, [r7, #28]
   30f70:	21cc      	movs	r1, #204	; 0xcc
   30f72:	2201      	movs	r2, #1
   30f74:	4252      	negs	r2, r2
   30f76:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   30f78:	4923      	ldr	r1, [pc, #140]	; (31008 <_http_client_request+0x358>)
   30f7a:	2334      	movs	r3, #52	; 0x34
   30f7c:	2218      	movs	r2, #24
   30f7e:	4694      	mov	ip, r2
   30f80:	44bc      	add	ip, r7
   30f82:	4463      	add	r3, ip
   30f84:	221c      	movs	r2, #28
   30f86:	0018      	movs	r0, r3
   30f88:	4b11      	ldr	r3, [pc, #68]	; (30fd0 <_http_client_request+0x320>)
   30f8a:	4798      	blx	r3
   30f8c:	e074      	b.n	31078 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   30f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30f90:	689b      	ldr	r3, [r3, #8]
   30f92:	2b00      	cmp	r3, #0
   30f94:	d070      	beq.n	31078 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   30f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30f98:	689a      	ldr	r2, [r3, #8]
   30f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30f9c:	695b      	ldr	r3, [r3, #20]
   30f9e:	0018      	movs	r0, r3
   30fa0:	4790      	blx	r2
   30fa2:	0001      	movs	r1, r0
   30fa4:	69fb      	ldr	r3, [r7, #28]
   30fa6:	22cc      	movs	r2, #204	; 0xcc
   30fa8:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   30faa:	69fb      	ldr	r3, [r7, #28]
   30fac:	22cc      	movs	r2, #204	; 0xcc
   30fae:	589b      	ldr	r3, [r3, r2]
   30fb0:	2b00      	cmp	r3, #0
   30fb2:	da2b      	bge.n	3100c <_http_client_request+0x35c>
					module->req.content_length = 0;
   30fb4:	69fb      	ldr	r3, [r7, #28]
   30fb6:	22cc      	movs	r2, #204	; 0xcc
   30fb8:	2100      	movs	r1, #0
   30fba:	5099      	str	r1, [r3, r2]
   30fbc:	e05c      	b.n	31078 <_http_client_request+0x3c8>
   30fbe:	46c0      	nop			; (mov r8, r8)
   30fc0:	00039624 	.word	0x00039624
   30fc4:	00030c29 	.word	0x00030c29
   30fc8:	00031b91 	.word	0x00031b91
   30fcc:	00039548 	.word	0x00039548
   30fd0:	00031c11 	.word	0x00031c11
   30fd4:	00039550 	.word	0x00039550
   30fd8:	00039558 	.word	0x00039558
   30fdc:	00039560 	.word	0x00039560
   30fe0:	00039568 	.word	0x00039568
   30fe4:	00039574 	.word	0x00039574
   30fe8:	000346cf 	.word	0x000346cf
   30fec:	0003957c 	.word	0x0003957c
   30ff0:	00039588 	.word	0x00039588
   30ff4:	00039598 	.word	0x00039598
   30ff8:	0003959c 	.word	0x0003959c
   30ffc:	000395a4 	.word	0x000395a4
   31000:	000395c0 	.word	0x000395c0
   31004:	000395d4 	.word	0x000395d4
   31008:	000395ec 	.word	0x000395ec
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3100c:	69fb      	ldr	r3, [r7, #28]
   3100e:	22cc      	movs	r2, #204	; 0xcc
   31010:	589b      	ldr	r3, [r3, r2]
   31012:	001a      	movs	r2, r3
   31014:	49e0      	ldr	r1, [pc, #896]	; (31398 <_http_client_request+0x6e8>)
   31016:	2328      	movs	r3, #40	; 0x28
   31018:	2018      	movs	r0, #24
   3101a:	4684      	mov	ip, r0
   3101c:	44bc      	add	ip, r7
   3101e:	4463      	add	r3, ip
   31020:	0018      	movs	r0, r3
   31022:	4bde      	ldr	r3, [pc, #888]	; (3139c <_http_client_request+0x6ec>)
   31024:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31026:	49de      	ldr	r1, [pc, #888]	; (313a0 <_http_client_request+0x6f0>)
   31028:	2334      	movs	r3, #52	; 0x34
   3102a:	2218      	movs	r2, #24
   3102c:	4694      	mov	ip, r2
   3102e:	44bc      	add	ip, r7
   31030:	4463      	add	r3, ip
   31032:	2210      	movs	r2, #16
   31034:	0018      	movs	r0, r3
   31036:	4bdb      	ldr	r3, [pc, #876]	; (313a4 <_http_client_request+0x6f4>)
   31038:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3103a:	2328      	movs	r3, #40	; 0x28
   3103c:	2218      	movs	r2, #24
   3103e:	4694      	mov	ip, r2
   31040:	44bc      	add	ip, r7
   31042:	4463      	add	r3, ip
   31044:	0018      	movs	r0, r3
   31046:	4bd8      	ldr	r3, [pc, #864]	; (313a8 <_http_client_request+0x6f8>)
   31048:	4798      	blx	r3
   3104a:	0002      	movs	r2, r0
   3104c:	2328      	movs	r3, #40	; 0x28
   3104e:	2118      	movs	r1, #24
   31050:	1879      	adds	r1, r7, r1
   31052:	18c9      	adds	r1, r1, r3
   31054:	2334      	movs	r3, #52	; 0x34
   31056:	2018      	movs	r0, #24
   31058:	4684      	mov	ip, r0
   3105a:	44bc      	add	ip, r7
   3105c:	4463      	add	r3, ip
   3105e:	0018      	movs	r0, r3
   31060:	4bd0      	ldr	r3, [pc, #832]	; (313a4 <_http_client_request+0x6f4>)
   31062:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31064:	49d1      	ldr	r1, [pc, #836]	; (313ac <_http_client_request+0x6fc>)
   31066:	2334      	movs	r3, #52	; 0x34
   31068:	2218      	movs	r2, #24
   3106a:	4694      	mov	ip, r2
   3106c:	44bc      	add	ip, r7
   3106e:	4463      	add	r3, ip
   31070:	2202      	movs	r2, #2
   31072:	0018      	movs	r0, r3
   31074:	4bcb      	ldr	r3, [pc, #812]	; (313a4 <_http_client_request+0x6f4>)
   31076:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31078:	69fb      	ldr	r3, [r7, #28]
   3107a:	22d4      	movs	r2, #212	; 0xd4
   3107c:	589b      	ldr	r3, [r3, r2]
   3107e:	2b00      	cmp	r3, #0
   31080:	d012      	beq.n	310a8 <_http_client_request+0x3f8>
				module->req.ext_header,
   31082:	69fb      	ldr	r3, [r7, #28]
   31084:	22d4      	movs	r2, #212	; 0xd4
   31086:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31088:	69fb      	ldr	r3, [r7, #28]
   3108a:	22d4      	movs	r2, #212	; 0xd4
   3108c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3108e:	0018      	movs	r0, r3
   31090:	4bc5      	ldr	r3, [pc, #788]	; (313a8 <_http_client_request+0x6f8>)
   31092:	4798      	blx	r3
   31094:	0002      	movs	r2, r0
   31096:	2334      	movs	r3, #52	; 0x34
   31098:	2118      	movs	r1, #24
   3109a:	468c      	mov	ip, r1
   3109c:	44bc      	add	ip, r7
   3109e:	4463      	add	r3, ip
   310a0:	0021      	movs	r1, r4
   310a2:	0018      	movs	r0, r3
   310a4:	4bbf      	ldr	r3, [pc, #764]	; (313a4 <_http_client_request+0x6f4>)
   310a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   310a8:	49c0      	ldr	r1, [pc, #768]	; (313ac <_http_client_request+0x6fc>)
   310aa:	2334      	movs	r3, #52	; 0x34
   310ac:	2218      	movs	r2, #24
   310ae:	4694      	mov	ip, r2
   310b0:	44bc      	add	ip, r7
   310b2:	4463      	add	r3, ip
   310b4:	2202      	movs	r2, #2
   310b6:	0018      	movs	r0, r3
   310b8:	4bba      	ldr	r3, [pc, #744]	; (313a4 <_http_client_request+0x6f4>)
   310ba:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   310bc:	2334      	movs	r3, #52	; 0x34
   310be:	2218      	movs	r2, #24
   310c0:	4694      	mov	ip, r2
   310c2:	44bc      	add	ip, r7
   310c4:	4463      	add	r3, ip
   310c6:	0018      	movs	r0, r3
   310c8:	4bb9      	ldr	r3, [pc, #740]	; (313b0 <_http_client_request+0x700>)
   310ca:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   310cc:	69fb      	ldr	r3, [r7, #28]
   310ce:	2204      	movs	r2, #4
   310d0:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   310d2:	69fb      	ldr	r3, [r7, #28]
   310d4:	22cc      	movs	r2, #204	; 0xcc
   310d6:	589b      	ldr	r3, [r3, r2]
   310d8:	2b00      	cmp	r3, #0
   310da:	db00      	blt.n	310de <_http_client_request+0x42e>
   310dc:	e0c6      	b.n	3126c <_http_client_request+0x5bc>
   310de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   310e0:	68db      	ldr	r3, [r3, #12]
   310e2:	2b00      	cmp	r3, #0
   310e4:	d100      	bne.n	310e8 <_http_client_request+0x438>
   310e6:	e0c1      	b.n	3126c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   310e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   310ea:	68dc      	ldr	r4, [r3, #12]
   310ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   310ee:	6958      	ldr	r0, [r3, #20]
   310f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   310f2:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   310f4:	69fb      	ldr	r3, [r7, #28]
   310f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   310f8:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   310fa:	69fb      	ldr	r3, [r7, #28]
   310fc:	22d0      	movs	r2, #208	; 0xd0
   310fe:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   31100:	002a      	movs	r2, r5
   31102:	47a0      	blx	r4
   31104:	0003      	movs	r3, r0
   31106:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   31108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3110a:	2b00      	cmp	r3, #0
   3110c:	da01      	bge.n	31112 <_http_client_request+0x462>
				size = 0;
   3110e:	2300      	movs	r3, #0
   31110:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   31112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31114:	220a      	movs	r2, #10
   31116:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3111a:	220d      	movs	r2, #13
   3111c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3111e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31120:	3305      	adds	r3, #5
   31122:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31124:	210d      	movs	r1, #13
   31126:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3112a:	3306      	adds	r3, #6
   3112c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3112e:	210a      	movs	r1, #10
   31130:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   31132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31134:	2b00      	cmp	r3, #0
   31136:	db14      	blt.n	31162 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3113a:	3302      	adds	r3, #2
   3113c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3113e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31140:	4a9c      	ldr	r2, [pc, #624]	; (313b4 <_http_client_request+0x704>)
   31142:	4013      	ands	r3, r2
   31144:	d504      	bpl.n	31150 <_http_client_request+0x4a0>
   31146:	3b01      	subs	r3, #1
   31148:	2210      	movs	r2, #16
   3114a:	4252      	negs	r2, r2
   3114c:	4313      	orrs	r3, r2
   3114e:	3301      	adds	r3, #1
   31150:	001a      	movs	r2, r3
   31152:	2318      	movs	r3, #24
   31154:	2118      	movs	r1, #24
   31156:	468c      	mov	ip, r1
   31158:	44bc      	add	ip, r7
   3115a:	4463      	add	r3, ip
   3115c:	5c9a      	ldrb	r2, [r3, r2]
   3115e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31160:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   31162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31164:	2b0f      	cmp	r3, #15
   31166:	dd19      	ble.n	3119c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3116a:	3301      	adds	r3, #1
   3116c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3116e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31170:	2b00      	cmp	r3, #0
   31172:	da00      	bge.n	31176 <_http_client_request+0x4c6>
   31174:	330f      	adds	r3, #15
   31176:	111b      	asrs	r3, r3, #4
   31178:	001a      	movs	r2, r3
   3117a:	4b8e      	ldr	r3, [pc, #568]	; (313b4 <_http_client_request+0x704>)
   3117c:	4013      	ands	r3, r2
   3117e:	d504      	bpl.n	3118a <_http_client_request+0x4da>
   31180:	3b01      	subs	r3, #1
   31182:	2210      	movs	r2, #16
   31184:	4252      	negs	r2, r2
   31186:	4313      	orrs	r3, r2
   31188:	3301      	adds	r3, #1
   3118a:	001a      	movs	r2, r3
   3118c:	2318      	movs	r3, #24
   3118e:	2118      	movs	r1, #24
   31190:	468c      	mov	ip, r1
   31192:	44bc      	add	ip, r7
   31194:	4463      	add	r3, ip
   31196:	5c9a      	ldrb	r2, [r3, r2]
   31198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3119a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   3119c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3119e:	2bff      	cmp	r3, #255	; 0xff
   311a0:	dd18      	ble.n	311d4 <_http_client_request+0x524>
				ptr = buffer;
   311a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   311a4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   311a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   311a8:	2b00      	cmp	r3, #0
   311aa:	da00      	bge.n	311ae <_http_client_request+0x4fe>
   311ac:	33ff      	adds	r3, #255	; 0xff
   311ae:	121b      	asrs	r3, r3, #8
   311b0:	001a      	movs	r2, r3
   311b2:	4b80      	ldr	r3, [pc, #512]	; (313b4 <_http_client_request+0x704>)
   311b4:	4013      	ands	r3, r2
   311b6:	d504      	bpl.n	311c2 <_http_client_request+0x512>
   311b8:	3b01      	subs	r3, #1
   311ba:	2210      	movs	r2, #16
   311bc:	4252      	negs	r2, r2
   311be:	4313      	orrs	r3, r2
   311c0:	3301      	adds	r3, #1
   311c2:	001a      	movs	r2, r3
   311c4:	2318      	movs	r3, #24
   311c6:	2118      	movs	r1, #24
   311c8:	468c      	mov	ip, r1
   311ca:	44bc      	add	ip, r7
   311cc:	4463      	add	r3, ip
   311ce:	5c9a      	ldrb	r2, [r3, r2]
   311d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   311d2:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   311d4:	69fb      	ldr	r3, [r7, #28]
   311d6:	2000      	movs	r0, #0
   311d8:	5618      	ldrsb	r0, [r3, r0]
   311da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   311dc:	3303      	adds	r3, #3
   311de:	001a      	movs	r2, r3
   311e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   311e2:	1ad3      	subs	r3, r2, r3
   311e4:	b29a      	uxth	r2, r3
   311e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   311e8:	b29b      	uxth	r3, r3
   311ea:	18d3      	adds	r3, r2, r3
   311ec:	b29b      	uxth	r3, r3
   311ee:	3304      	adds	r3, #4
   311f0:	b29a      	uxth	r2, r3
   311f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
   311f4:	2300      	movs	r3, #0
   311f6:	4c70      	ldr	r4, [pc, #448]	; (313b8 <_http_client_request+0x708>)
   311f8:	47a0      	blx	r4
   311fa:	0003      	movs	r3, r0
   311fc:	663b      	str	r3, [r7, #96]	; 0x60
   311fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31200:	2b00      	cmp	r3, #0
   31202:	da07      	bge.n	31214 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   31204:	2305      	movs	r3, #5
   31206:	425a      	negs	r2, r3
   31208:	69fb      	ldr	r3, [r7, #28]
   3120a:	0011      	movs	r1, r2
   3120c:	0018      	movs	r0, r3
   3120e:	4b6b      	ldr	r3, [pc, #428]	; (313bc <_http_client_request+0x70c>)
   31210:	4798      	blx	r3
				return;
   31212:	e0e1      	b.n	313d8 <_http_client_request+0x728>
			module->req.sent_length += size;
   31214:	69fb      	ldr	r3, [r7, #28]
   31216:	22d0      	movs	r2, #208	; 0xd0
   31218:	589a      	ldr	r2, [r3, r2]
   3121a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3121c:	18d2      	adds	r2, r2, r3
   3121e:	69fb      	ldr	r3, [r7, #28]
   31220:	21d0      	movs	r1, #208	; 0xd0
   31222:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31226:	2b00      	cmp	r3, #0
   31228:	d000      	beq.n	3122c <_http_client_request+0x57c>
   3122a:	e0c9      	b.n	313c0 <_http_client_request+0x710>
				if (module->req.entity.close) {
   3122c:	69fb      	ldr	r3, [r7, #28]
   3122e:	22c0      	movs	r2, #192	; 0xc0
   31230:	589b      	ldr	r3, [r3, r2]
   31232:	2b00      	cmp	r3, #0
   31234:	d007      	beq.n	31246 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31236:	69fb      	ldr	r3, [r7, #28]
   31238:	22c0      	movs	r2, #192	; 0xc0
   3123a:	589b      	ldr	r3, [r3, r2]
   3123c:	69fa      	ldr	r2, [r7, #28]
   3123e:	21c4      	movs	r1, #196	; 0xc4
   31240:	5852      	ldr	r2, [r2, r1]
   31242:	0010      	movs	r0, r2
   31244:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31246:	69fb      	ldr	r3, [r7, #28]
   31248:	2202      	movs	r2, #2
   3124a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3124c:	69fb      	ldr	r3, [r7, #28]
   3124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31250:	2b00      	cmp	r3, #0
   31252:	d100      	bne.n	31256 <_http_client_request+0x5a6>
   31254:	e0b5      	b.n	313c2 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31256:	69fb      	ldr	r3, [r7, #28]
   31258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3125a:	220c      	movs	r2, #12
   3125c:	2118      	movs	r1, #24
   3125e:	468c      	mov	ip, r1
   31260:	44bc      	add	ip, r7
   31262:	4462      	add	r2, ip
   31264:	69f8      	ldr	r0, [r7, #28]
   31266:	2101      	movs	r1, #1
   31268:	4798      	blx	r3
				break;
   3126a:	e0aa      	b.n	313c2 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   3126c:	69fb      	ldr	r3, [r7, #28]
   3126e:	22cc      	movs	r2, #204	; 0xcc
   31270:	589b      	ldr	r3, [r3, r2]
   31272:	2b00      	cmp	r3, #0
   31274:	dc00      	bgt.n	31278 <_http_client_request+0x5c8>
   31276:	e07c      	b.n	31372 <_http_client_request+0x6c2>
   31278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3127a:	68db      	ldr	r3, [r3, #12]
   3127c:	2b00      	cmp	r3, #0
   3127e:	d100      	bne.n	31282 <_http_client_request+0x5d2>
   31280:	e077      	b.n	31372 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   31282:	69fb      	ldr	r3, [r7, #28]
   31284:	22d0      	movs	r2, #208	; 0xd0
   31286:	589a      	ldr	r2, [r3, r2]
   31288:	69fb      	ldr	r3, [r7, #28]
   3128a:	21cc      	movs	r1, #204	; 0xcc
   3128c:	585b      	ldr	r3, [r3, r1]
   3128e:	429a      	cmp	r2, r3
   31290:	db1f      	blt.n	312d2 <_http_client_request+0x622>
				if (module->req.entity.close) {
   31292:	69fb      	ldr	r3, [r7, #28]
   31294:	22c0      	movs	r2, #192	; 0xc0
   31296:	589b      	ldr	r3, [r3, r2]
   31298:	2b00      	cmp	r3, #0
   3129a:	d007      	beq.n	312ac <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   3129c:	69fb      	ldr	r3, [r7, #28]
   3129e:	22c0      	movs	r2, #192	; 0xc0
   312a0:	589b      	ldr	r3, [r3, r2]
   312a2:	69fa      	ldr	r2, [r7, #28]
   312a4:	21c4      	movs	r1, #196	; 0xc4
   312a6:	5852      	ldr	r2, [r2, r1]
   312a8:	0010      	movs	r0, r2
   312aa:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   312ac:	69fb      	ldr	r3, [r7, #28]
   312ae:	2202      	movs	r2, #2
   312b0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   312b2:	69fb      	ldr	r3, [r7, #28]
   312b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   312b6:	2b00      	cmp	r3, #0
   312b8:	d100      	bne.n	312bc <_http_client_request+0x60c>
   312ba:	e084      	b.n	313c6 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   312bc:	69fb      	ldr	r3, [r7, #28]
   312be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   312c0:	220c      	movs	r2, #12
   312c2:	2118      	movs	r1, #24
   312c4:	468c      	mov	ip, r1
   312c6:	44bc      	add	ip, r7
   312c8:	4462      	add	r2, ip
   312ca:	69f8      	ldr	r0, [r7, #28]
   312cc:	2101      	movs	r1, #1
   312ce:	4798      	blx	r3
				break;
   312d0:	e079      	b.n	313c6 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   312d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   312d4:	68dc      	ldr	r4, [r3, #12]
   312d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   312d8:	6958      	ldr	r0, [r3, #20]
   312da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   312dc:	69fb      	ldr	r3, [r7, #28]
   312de:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   312e0:	69fb      	ldr	r3, [r7, #28]
   312e2:	22d0      	movs	r2, #208	; 0xd0
   312e4:	589b      	ldr	r3, [r3, r2]
   312e6:	002a      	movs	r2, r5
   312e8:	47a0      	blx	r4
   312ea:	0003      	movs	r3, r0
   312ec:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   312ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   312f0:	2b00      	cmp	r3, #0
   312f2:	da0d      	bge.n	31310 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   312f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   312f6:	2b00      	cmp	r3, #0
   312f8:	d102      	bne.n	31300 <_http_client_request+0x650>
   312fa:	234d      	movs	r3, #77	; 0x4d
   312fc:	425b      	negs	r3, r3
   312fe:	e001      	b.n	31304 <_http_client_request+0x654>
   31300:	2305      	movs	r3, #5
   31302:	425b      	negs	r3, r3
   31304:	69fa      	ldr	r2, [r7, #28]
   31306:	0019      	movs	r1, r3
   31308:	0010      	movs	r0, r2
   3130a:	4b2c      	ldr	r3, [pc, #176]	; (313bc <_http_client_request+0x70c>)
   3130c:	4798      	blx	r3
			if (size < 0) {
   3130e:	e057      	b.n	313c0 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   31310:	69fb      	ldr	r3, [r7, #28]
   31312:	22cc      	movs	r2, #204	; 0xcc
   31314:	589a      	ldr	r2, [r3, r2]
   31316:	69fb      	ldr	r3, [r7, #28]
   31318:	21d0      	movs	r1, #208	; 0xd0
   3131a:	585b      	ldr	r3, [r3, r1]
   3131c:	1ad2      	subs	r2, r2, r3
   3131e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31320:	429a      	cmp	r2, r3
   31322:	da07      	bge.n	31334 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31324:	69fb      	ldr	r3, [r7, #28]
   31326:	22cc      	movs	r2, #204	; 0xcc
   31328:	589a      	ldr	r2, [r3, r2]
   3132a:	69fb      	ldr	r3, [r7, #28]
   3132c:	21d0      	movs	r1, #208	; 0xd0
   3132e:	585b      	ldr	r3, [r3, r1]
   31330:	1ad3      	subs	r3, r2, r3
   31332:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31334:	69fb      	ldr	r3, [r7, #28]
   31336:	2000      	movs	r0, #0
   31338:	5618      	ldrsb	r0, [r3, r0]
   3133a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3133c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3133e:	b29a      	uxth	r2, r3
   31340:	2300      	movs	r3, #0
   31342:	4c1d      	ldr	r4, [pc, #116]	; (313b8 <_http_client_request+0x708>)
   31344:	47a0      	blx	r4
   31346:	0003      	movs	r3, r0
   31348:	663b      	str	r3, [r7, #96]	; 0x60
   3134a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   3134c:	2b00      	cmp	r3, #0
   3134e:	da07      	bge.n	31360 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   31350:	2305      	movs	r3, #5
   31352:	425a      	negs	r2, r3
   31354:	69fb      	ldr	r3, [r7, #28]
   31356:	0011      	movs	r1, r2
   31358:	0018      	movs	r0, r3
   3135a:	4b18      	ldr	r3, [pc, #96]	; (313bc <_http_client_request+0x70c>)
   3135c:	4798      	blx	r3
					return;
   3135e:	e03b      	b.n	313d8 <_http_client_request+0x728>
				module->req.sent_length += size;
   31360:	69fb      	ldr	r3, [r7, #28]
   31362:	22d0      	movs	r2, #208	; 0xd0
   31364:	589a      	ldr	r2, [r3, r2]
   31366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31368:	18d2      	adds	r2, r2, r3
   3136a:	69fb      	ldr	r3, [r7, #28]
   3136c:	21d0      	movs	r1, #208	; 0xd0
   3136e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   31370:	e026      	b.n	313c0 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   31372:	69fb      	ldr	r3, [r7, #28]
   31374:	2202      	movs	r2, #2
   31376:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   31378:	69fb      	ldr	r3, [r7, #28]
   3137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3137c:	2b00      	cmp	r3, #0
   3137e:	d024      	beq.n	313ca <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31380:	69fb      	ldr	r3, [r7, #28]
   31382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31384:	220c      	movs	r2, #12
   31386:	2118      	movs	r1, #24
   31388:	468c      	mov	ip, r1
   3138a:	44bc      	add	ip, r7
   3138c:	4462      	add	r2, ip
   3138e:	69f8      	ldr	r0, [r7, #28]
   31390:	2101      	movs	r1, #1
   31392:	4798      	blx	r3
			break;
   31394:	e019      	b.n	313ca <_http_client_request+0x71a>
   31396:	46c0      	nop			; (mov r8, r8)
   31398:	0003960c 	.word	0x0003960c
   3139c:	000345d5 	.word	0x000345d5
   313a0:	00039610 	.word	0x00039610
   313a4:	00031c11 	.word	0x00031c11
   313a8:	000346cf 	.word	0x000346cf
   313ac:	00039598 	.word	0x00039598
   313b0:	00031c4d 	.word	0x00031c4d
   313b4:	8000000f 	.word	0x8000000f
   313b8:	00025195 	.word	0x00025195
   313bc:	00030b5d 	.word	0x00030b5d
		break;
   313c0:	e004      	b.n	313cc <_http_client_request+0x71c>
				break;
   313c2:	46c0      	nop			; (mov r8, r8)
   313c4:	e002      	b.n	313cc <_http_client_request+0x71c>
				break;
   313c6:	46c0      	nop			; (mov r8, r8)
   313c8:	e000      	b.n	313cc <_http_client_request+0x71c>
			break;
   313ca:	46c0      	nop			; (mov r8, r8)
   313cc:	69bb      	ldr	r3, [r7, #24]
   313ce:	469d      	mov	sp, r3
   313d0:	e004      	b.n	313dc <_http_client_request+0x72c>
		return;
   313d2:	46c0      	nop			; (mov r8, r8)
   313d4:	e000      	b.n	313d8 <_http_client_request+0x728>
		return;
   313d6:	46c0      	nop			; (mov r8, r8)
   313d8:	69bb      	ldr	r3, [r7, #24]
   313da:	469d      	mov	sp, r3
	}
}
   313dc:	46bd      	mov	sp, r7
   313de:	b01e      	add	sp, #120	; 0x78
   313e0:	bc04      	pop	{r2}
   313e2:	4690      	mov	r8, r2
   313e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   313e6:	46c0      	nop			; (mov r8, r8)

000313e8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   313e8:	b590      	push	{r4, r7, lr}
   313ea:	b083      	sub	sp, #12
   313ec:	af00      	add	r7, sp, #0
   313ee:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   313f0:	687b      	ldr	r3, [r7, #4]
   313f2:	2b00      	cmp	r3, #0
   313f4:	d021      	beq.n	3143a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   313f6:	687b      	ldr	r3, [r7, #4]
   313f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   313fa:	687b      	ldr	r3, [r7, #4]
   313fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   313fe:	429a      	cmp	r2, r3
   31400:	d307      	bcc.n	31412 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   31402:	238b      	movs	r3, #139	; 0x8b
   31404:	425a      	negs	r2, r3
   31406:	687b      	ldr	r3, [r7, #4]
   31408:	0011      	movs	r1, r2
   3140a:	0018      	movs	r0, r3
   3140c:	4b0d      	ldr	r3, [pc, #52]	; (31444 <_http_client_recv_packet+0x5c>)
   3140e:	4798      	blx	r3
		return;
   31410:	e014      	b.n	3143c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   31412:	687b      	ldr	r3, [r7, #4]
   31414:	2000      	movs	r0, #0
   31416:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   31418:	687b      	ldr	r3, [r7, #4]
   3141a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3141c:	687b      	ldr	r3, [r7, #4]
   3141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31420:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31422:	687b      	ldr	r3, [r7, #4]
   31424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   31426:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31428:	687b      	ldr	r3, [r7, #4]
   3142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   3142c:	b29b      	uxth	r3, r3
   3142e:	1ad3      	subs	r3, r2, r3
   31430:	b29a      	uxth	r2, r3
   31432:	2300      	movs	r3, #0
   31434:	4c04      	ldr	r4, [pc, #16]	; (31448 <_http_client_recv_packet+0x60>)
   31436:	47a0      	blx	r4
   31438:	e000      	b.n	3143c <_http_client_recv_packet+0x54>
		return;
   3143a:	46c0      	nop			; (mov r8, r8)
}
   3143c:	46bd      	mov	sp, r7
   3143e:	b003      	add	sp, #12
   31440:	bd90      	pop	{r4, r7, pc}
   31442:	46c0      	nop			; (mov r8, r8)
   31444:	00030b5d 	.word	0x00030b5d
   31448:	000252f9 	.word	0x000252f9

0003144c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   3144c:	b580      	push	{r7, lr}
   3144e:	b082      	sub	sp, #8
   31450:	af00      	add	r7, sp, #0
   31452:	6078      	str	r0, [r7, #4]
   31454:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   31456:	687b      	ldr	r3, [r7, #4]
   31458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3145a:	683b      	ldr	r3, [r7, #0]
   3145c:	18d2      	adds	r2, r2, r3
   3145e:	687b      	ldr	r3, [r7, #4]
   31460:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   31462:	687b      	ldr	r3, [r7, #4]
   31464:	2258      	movs	r2, #88	; 0x58
   31466:	5a9b      	ldrh	r3, [r3, r2]
   31468:	2b00      	cmp	r3, #0
   3146a:	d007      	beq.n	3147c <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   3146c:	687b      	ldr	r3, [r7, #4]
   3146e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31470:	687b      	ldr	r3, [r7, #4]
   31472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31474:	0019      	movs	r1, r3
   31476:	0010      	movs	r0, r2
   31478:	4b06      	ldr	r3, [pc, #24]	; (31494 <_http_client_recved_packet+0x48>)
   3147a:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   3147c:	46c0      	nop			; (mov r8, r8)
   3147e:	687b      	ldr	r3, [r7, #4]
   31480:	0018      	movs	r0, r3
   31482:	4b05      	ldr	r3, [pc, #20]	; (31498 <_http_client_recved_packet+0x4c>)
   31484:	4798      	blx	r3
   31486:	1e03      	subs	r3, r0, #0
   31488:	d1f9      	bne.n	3147e <_http_client_recved_packet+0x32>
}
   3148a:	46c0      	nop			; (mov r8, r8)
   3148c:	46bd      	mov	sp, r7
   3148e:	b002      	add	sp, #8
   31490:	bd80      	pop	{r7, pc}
   31492:	46c0      	nop			; (mov r8, r8)
   31494:	00031f09 	.word	0x00031f09
   31498:	0003149d 	.word	0x0003149d

0003149c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   3149c:	b580      	push	{r7, lr}
   3149e:	b082      	sub	sp, #8
   314a0:	af00      	add	r7, sp, #0
   314a2:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   314a4:	687b      	ldr	r3, [r7, #4]
   314a6:	22d8      	movs	r2, #216	; 0xd8
   314a8:	589b      	ldr	r3, [r3, r2]
   314aa:	2b00      	cmp	r3, #0
   314ac:	d002      	beq.n	314b4 <_http_client_handle_response+0x18>
   314ae:	2b01      	cmp	r3, #1
   314b0:	d006      	beq.n	314c0 <_http_client_handle_response+0x24>
   314b2:	e00b      	b.n	314cc <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   314b4:	687b      	ldr	r3, [r7, #4]
   314b6:	0018      	movs	r0, r3
   314b8:	4b07      	ldr	r3, [pc, #28]	; (314d8 <_http_client_handle_response+0x3c>)
   314ba:	4798      	blx	r3
   314bc:	0003      	movs	r3, r0
   314be:	e006      	b.n	314ce <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   314c0:	687b      	ldr	r3, [r7, #4]
   314c2:	0018      	movs	r0, r3
   314c4:	4b05      	ldr	r3, [pc, #20]	; (314dc <_http_client_handle_response+0x40>)
   314c6:	4798      	blx	r3
   314c8:	0003      	movs	r3, r0
   314ca:	e000      	b.n	314ce <_http_client_handle_response+0x32>
	}
	return 0;
   314cc:	2300      	movs	r3, #0
}
   314ce:	0018      	movs	r0, r3
   314d0:	46bd      	mov	sp, r7
   314d2:	b002      	add	sp, #8
   314d4:	bd80      	pop	{r7, pc}
   314d6:	46c0      	nop			; (mov r8, r8)
   314d8:	000314e1 	.word	0x000314e1
   314dc:	00031999 	.word	0x00031999

000314e0 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   314e0:	b590      	push	{r4, r7, lr}
   314e2:	b08b      	sub	sp, #44	; 0x2c
   314e4:	af00      	add	r7, sp, #0
   314e6:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   314e8:	687b      	ldr	r3, [r7, #4]
   314ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   314ec:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   314ee:	4b9a      	ldr	r3, [pc, #616]	; (31758 <_http_client_handle_header+0x278>)
   314f0:	681a      	ldr	r2, [r3, #0]
   314f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   314f4:	0011      	movs	r1, r2
   314f6:	0018      	movs	r0, r3
   314f8:	4b98      	ldr	r3, [pc, #608]	; (3175c <_http_client_handle_header+0x27c>)
   314fa:	4798      	blx	r3
   314fc:	0003      	movs	r3, r0
   314fe:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   31500:	69bb      	ldr	r3, [r7, #24]
   31502:	2b00      	cmp	r3, #0
   31504:	d007      	beq.n	31516 <_http_client_handle_header+0x36>
   31506:	687b      	ldr	r3, [r7, #4]
   31508:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3150a:	687b      	ldr	r3, [r7, #4]
   3150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3150e:	18d2      	adds	r2, r2, r3
   31510:	69bb      	ldr	r3, [r7, #24]
   31512:	429a      	cmp	r2, r3
   31514:	d807      	bhi.n	31526 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31518:	687b      	ldr	r3, [r7, #4]
   3151a:	0011      	movs	r1, r2
   3151c:	0018      	movs	r0, r3
   3151e:	4b90      	ldr	r3, [pc, #576]	; (31760 <_http_client_handle_header+0x280>)
   31520:	4798      	blx	r3
			return 0;
   31522:	2300      	movs	r3, #0
   31524:	e114      	b.n	31750 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31526:	4b8c      	ldr	r3, [pc, #560]	; (31758 <_http_client_handle_header+0x278>)
   31528:	681c      	ldr	r4, [r3, #0]
   3152a:	4b8b      	ldr	r3, [pc, #556]	; (31758 <_http_client_handle_header+0x278>)
   3152c:	681b      	ldr	r3, [r3, #0]
   3152e:	0018      	movs	r0, r3
   31530:	4b8c      	ldr	r3, [pc, #560]	; (31764 <_http_client_handle_header+0x284>)
   31532:	4798      	blx	r3
   31534:	0002      	movs	r2, r0
   31536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31538:	0021      	movs	r1, r4
   3153a:	0018      	movs	r0, r3
   3153c:	4b8a      	ldr	r3, [pc, #552]	; (31768 <_http_client_handle_header+0x288>)
   3153e:	4798      	blx	r3
   31540:	1e03      	subs	r3, r0, #0
   31542:	d15d      	bne.n	31600 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31544:	4b84      	ldr	r3, [pc, #528]	; (31758 <_http_client_handle_header+0x278>)
   31546:	681b      	ldr	r3, [r3, #0]
   31548:	0018      	movs	r0, r3
   3154a:	4b86      	ldr	r3, [pc, #536]	; (31764 <_http_client_handle_header+0x284>)
   3154c:	4798      	blx	r3
   3154e:	0002      	movs	r2, r0
   31550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31552:	189a      	adds	r2, r3, r2
   31554:	687b      	ldr	r3, [r7, #4]
   31556:	0011      	movs	r1, r2
   31558:	0018      	movs	r0, r3
   3155a:	4b81      	ldr	r3, [pc, #516]	; (31760 <_http_client_handle_header+0x280>)
   3155c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3155e:	687b      	ldr	r3, [r7, #4]
   31560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31562:	2b00      	cmp	r3, #0
   31564:	d046      	beq.n	315f4 <_http_client_handle_header+0x114>
   31566:	687b      	ldr	r3, [r7, #4]
   31568:	22e4      	movs	r2, #228	; 0xe4
   3156a:	5a9b      	ldrh	r3, [r3, r2]
   3156c:	2b00      	cmp	r3, #0
   3156e:	d041      	beq.n	315f4 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   31570:	687b      	ldr	r3, [r7, #4]
   31572:	22dc      	movs	r2, #220	; 0xdc
   31574:	589b      	ldr	r3, [r3, r2]
   31576:	2b00      	cmp	r3, #0
   31578:	da19      	bge.n	315ae <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   3157a:	687b      	ldr	r3, [r7, #4]
   3157c:	22e4      	movs	r2, #228	; 0xe4
   3157e:	5a9a      	ldrh	r2, [r3, r2]
   31580:	230c      	movs	r3, #12
   31582:	18fb      	adds	r3, r7, r3
   31584:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31586:	230c      	movs	r3, #12
   31588:	18fb      	adds	r3, r7, r3
   3158a:	2201      	movs	r2, #1
   3158c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   3158e:	687b      	ldr	r3, [r7, #4]
   31590:	22e0      	movs	r2, #224	; 0xe0
   31592:	2100      	movs	r1, #0
   31594:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31596:	230c      	movs	r3, #12
   31598:	18fb      	adds	r3, r7, r3
   3159a:	2200      	movs	r2, #0
   3159c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3159e:	687b      	ldr	r3, [r7, #4]
   315a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   315a2:	220c      	movs	r2, #12
   315a4:	18ba      	adds	r2, r7, r2
   315a6:	6878      	ldr	r0, [r7, #4]
   315a8:	2102      	movs	r1, #2
   315aa:	4798      	blx	r3
   315ac:	e022      	b.n	315f4 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   315ae:	687b      	ldr	r3, [r7, #4]
   315b0:	22dc      	movs	r2, #220	; 0xdc
   315b2:	589a      	ldr	r2, [r3, r2]
   315b4:	687b      	ldr	r3, [r7, #4]
   315b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   315b8:	429a      	cmp	r2, r3
   315ba:	dd1b      	ble.n	315f4 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   315bc:	687b      	ldr	r3, [r7, #4]
   315be:	22e4      	movs	r2, #228	; 0xe4
   315c0:	5a9a      	ldrh	r2, [r3, r2]
   315c2:	230c      	movs	r3, #12
   315c4:	18fb      	adds	r3, r7, r3
   315c6:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   315c8:	687b      	ldr	r3, [r7, #4]
   315ca:	22dc      	movs	r2, #220	; 0xdc
   315cc:	589b      	ldr	r3, [r3, r2]
   315ce:	001a      	movs	r2, r3
   315d0:	230c      	movs	r3, #12
   315d2:	18fb      	adds	r3, r7, r3
   315d4:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   315d6:	230c      	movs	r3, #12
   315d8:	18fb      	adds	r3, r7, r3
   315da:	2200      	movs	r2, #0
   315dc:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   315de:	687b      	ldr	r3, [r7, #4]
   315e0:	22e0      	movs	r2, #224	; 0xe0
   315e2:	2100      	movs	r1, #0
   315e4:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   315e6:	687b      	ldr	r3, [r7, #4]
   315e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   315ea:	220c      	movs	r2, #12
   315ec:	18ba      	adds	r2, r7, r2
   315ee:	6878      	ldr	r0, [r7, #4]
   315f0:	2102      	movs	r1, #2
   315f2:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   315f4:	687b      	ldr	r3, [r7, #4]
   315f6:	22d8      	movs	r2, #216	; 0xd8
   315f8:	2101      	movs	r1, #1
   315fa:	5099      	str	r1, [r3, r2]
			return 1;
   315fc:	2301      	movs	r3, #1
   315fe:	e0a7      	b.n	31750 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   31600:	495a      	ldr	r1, [pc, #360]	; (3176c <_http_client_handle_header+0x28c>)
   31602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31604:	2210      	movs	r2, #16
   31606:	0018      	movs	r0, r3
   31608:	4b57      	ldr	r3, [pc, #348]	; (31768 <_http_client_handle_header+0x288>)
   3160a:	4798      	blx	r3
   3160c:	1e03      	subs	r3, r0, #0
   3160e:	d109      	bne.n	31624 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   31610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31612:	3310      	adds	r3, #16
   31614:	0018      	movs	r0, r3
   31616:	4b56      	ldr	r3, [pc, #344]	; (31770 <_http_client_handle_header+0x290>)
   31618:	4798      	blx	r3
   3161a:	0001      	movs	r1, r0
   3161c:	687b      	ldr	r3, [r7, #4]
   3161e:	22dc      	movs	r2, #220	; 0xdc
   31620:	5099      	str	r1, [r3, r2]
   31622:	e08b      	b.n	3173c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31624:	4953      	ldr	r1, [pc, #332]	; (31774 <_http_client_handle_header+0x294>)
   31626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31628:	2213      	movs	r2, #19
   3162a:	0018      	movs	r0, r3
   3162c:	4b4e      	ldr	r3, [pc, #312]	; (31768 <_http_client_handle_header+0x288>)
   3162e:	4798      	blx	r3
   31630:	1e03      	subs	r3, r0, #0
   31632:	d127      	bne.n	31684 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31636:	3313      	adds	r3, #19
   31638:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3163a:	e01e      	b.n	3167a <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   3163c:	6a3b      	ldr	r3, [r7, #32]
   3163e:	781b      	ldrb	r3, [r3, #0]
   31640:	2b20      	cmp	r3, #32
   31642:	d103      	bne.n	3164c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31644:	6a3b      	ldr	r3, [r7, #32]
   31646:	3301      	adds	r3, #1
   31648:	623b      	str	r3, [r7, #32]
   3164a:	e016      	b.n	3167a <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   3164c:	6a3b      	ldr	r3, [r7, #32]
   3164e:	781b      	ldrb	r3, [r3, #0]
   31650:	2b43      	cmp	r3, #67	; 0x43
   31652:	d003      	beq.n	3165c <_http_client_handle_header+0x17c>
   31654:	6a3b      	ldr	r3, [r7, #32]
   31656:	781b      	ldrb	r3, [r3, #0]
   31658:	2b63      	cmp	r3, #99	; 0x63
   3165a:	d105      	bne.n	31668 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   3165c:	687b      	ldr	r3, [r7, #4]
   3165e:	21cc      	movs	r1, #204	; 0xcc
   31660:	2201      	movs	r2, #1
   31662:	4252      	negs	r2, r2
   31664:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31666:	e069      	b.n	3173c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31668:	2386      	movs	r3, #134	; 0x86
   3166a:	425a      	negs	r2, r3
   3166c:	687b      	ldr	r3, [r7, #4]
   3166e:	0011      	movs	r1, r2
   31670:	0018      	movs	r0, r3
   31672:	4b41      	ldr	r3, [pc, #260]	; (31778 <_http_client_handle_header+0x298>)
   31674:	4798      	blx	r3
					return 0;
   31676:	2300      	movs	r3, #0
   31678:	e06a      	b.n	31750 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3167a:	69ba      	ldr	r2, [r7, #24]
   3167c:	6a3b      	ldr	r3, [r7, #32]
   3167e:	429a      	cmp	r2, r3
   31680:	d8dc      	bhi.n	3163c <_http_client_handle_header+0x15c>
   31682:	e05b      	b.n	3173c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31684:	493d      	ldr	r1, [pc, #244]	; (3177c <_http_client_handle_header+0x29c>)
   31686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31688:	220c      	movs	r2, #12
   3168a:	0018      	movs	r0, r3
   3168c:	4b36      	ldr	r3, [pc, #216]	; (31768 <_http_client_handle_header+0x288>)
   3168e:	4798      	blx	r3
   31690:	1e03      	subs	r3, r0, #0
   31692:	d126      	bne.n	316e2 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31696:	330c      	adds	r3, #12
   31698:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3169a:	e01d      	b.n	316d8 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   3169c:	69fb      	ldr	r3, [r7, #28]
   3169e:	781b      	ldrb	r3, [r3, #0]
   316a0:	2b20      	cmp	r3, #32
   316a2:	d103      	bne.n	316ac <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   316a4:	69fb      	ldr	r3, [r7, #28]
   316a6:	3301      	adds	r3, #1
   316a8:	61fb      	str	r3, [r7, #28]
   316aa:	e015      	b.n	316d8 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   316ac:	69fb      	ldr	r3, [r7, #28]
   316ae:	781b      	ldrb	r3, [r3, #0]
   316b0:	2b4b      	cmp	r3, #75	; 0x4b
   316b2:	d003      	beq.n	316bc <_http_client_handle_header+0x1dc>
   316b4:	69fb      	ldr	r3, [r7, #28]
   316b6:	781b      	ldrb	r3, [r3, #0]
   316b8:	2b6b      	cmp	r3, #107	; 0x6b
   316ba:	d106      	bne.n	316ca <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   316bc:	687b      	ldr	r3, [r7, #4]
   316be:	2241      	movs	r2, #65	; 0x41
   316c0:	5c99      	ldrb	r1, [r3, r2]
   316c2:	2002      	movs	r0, #2
   316c4:	4301      	orrs	r1, r0
   316c6:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   316c8:	e038      	b.n	3173c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   316ca:	687b      	ldr	r3, [r7, #4]
   316cc:	2241      	movs	r2, #65	; 0x41
   316ce:	5c99      	ldrb	r1, [r3, r2]
   316d0:	2002      	movs	r0, #2
   316d2:	4381      	bics	r1, r0
   316d4:	5499      	strb	r1, [r3, r2]
				break;
   316d6:	e031      	b.n	3173c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   316d8:	69ba      	ldr	r2, [r7, #24]
   316da:	69fb      	ldr	r3, [r7, #28]
   316dc:	429a      	cmp	r2, r3
   316de:	d8dd      	bhi.n	3169c <_http_client_handle_header+0x1bc>
   316e0:	e02c      	b.n	3173c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   316e2:	4927      	ldr	r1, [pc, #156]	; (31780 <_http_client_handle_header+0x2a0>)
   316e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316e6:	2205      	movs	r2, #5
   316e8:	0018      	movs	r0, r3
   316ea:	4b1f      	ldr	r3, [pc, #124]	; (31768 <_http_client_handle_header+0x288>)
   316ec:	4798      	blx	r3
   316ee:	1e03      	subs	r3, r0, #0
   316f0:	d124      	bne.n	3173c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   316f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316f4:	3309      	adds	r3, #9
   316f6:	0018      	movs	r0, r3
   316f8:	4b1d      	ldr	r3, [pc, #116]	; (31770 <_http_client_handle_header+0x290>)
   316fa:	4798      	blx	r3
   316fc:	0003      	movs	r3, r0
   316fe:	b299      	uxth	r1, r3
   31700:	687b      	ldr	r3, [r7, #4]
   31702:	22e4      	movs	r2, #228	; 0xe4
   31704:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31706:	687b      	ldr	r3, [r7, #4]
   31708:	22dc      	movs	r2, #220	; 0xdc
   3170a:	2100      	movs	r1, #0
   3170c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   3170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31710:	3305      	adds	r3, #5
   31712:	781b      	ldrb	r3, [r3, #0]
   31714:	2b31      	cmp	r3, #49	; 0x31
   31716:	d804      	bhi.n	31722 <_http_client_handle_header+0x242>
   31718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3171a:	3307      	adds	r3, #7
   3171c:	781b      	ldrb	r3, [r3, #0]
   3171e:	2b30      	cmp	r3, #48	; 0x30
   31720:	d906      	bls.n	31730 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31722:	687b      	ldr	r3, [r7, #4]
   31724:	2241      	movs	r2, #65	; 0x41
   31726:	5c99      	ldrb	r1, [r3, r2]
   31728:	2002      	movs	r0, #2
   3172a:	4301      	orrs	r1, r0
   3172c:	5499      	strb	r1, [r3, r2]
   3172e:	e005      	b.n	3173c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31730:	687b      	ldr	r3, [r7, #4]
   31732:	2241      	movs	r2, #65	; 0x41
   31734:	5c99      	ldrb	r1, [r3, r2]
   31736:	2002      	movs	r0, #2
   31738:	4381      	bics	r1, r0
   3173a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   3173c:	4b06      	ldr	r3, [pc, #24]	; (31758 <_http_client_handle_header+0x278>)
   3173e:	681b      	ldr	r3, [r3, #0]
   31740:	0018      	movs	r0, r3
   31742:	4b08      	ldr	r3, [pc, #32]	; (31764 <_http_client_handle_header+0x284>)
   31744:	4798      	blx	r3
   31746:	0002      	movs	r2, r0
   31748:	69bb      	ldr	r3, [r7, #24]
   3174a:	189b      	adds	r3, r3, r2
   3174c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3174e:	e6ce      	b.n	314ee <_http_client_handle_header+0xe>
	}
}
   31750:	0018      	movs	r0, r3
   31752:	46bd      	mov	sp, r7
   31754:	b00b      	add	sp, #44	; 0x2c
   31756:	bd90      	pop	{r4, r7, pc}
   31758:	20000124 	.word	0x20000124
   3175c:	0003474d 	.word	0x0003474d
   31760:	00031b45 	.word	0x00031b45
   31764:	000346cf 	.word	0x000346cf
   31768:	000346dd 	.word	0x000346dd
   3176c:	00039610 	.word	0x00039610
   31770:	00034265 	.word	0x00034265
   31774:	00039634 	.word	0x00039634
   31778:	00030b5d 	.word	0x00030b5d
   3177c:	00039648 	.word	0x00039648
   31780:	00039658 	.word	0x00039658

00031784 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31784:	b580      	push	{r7, lr}
   31786:	b088      	sub	sp, #32
   31788:	af00      	add	r7, sp, #0
   3178a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   3178c:	687b      	ldr	r3, [r7, #4]
   3178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31790:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   31792:	2300      	movs	r3, #0
   31794:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31796:	687b      	ldr	r3, [r7, #4]
   31798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3179a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   3179c:	687b      	ldr	r3, [r7, #4]
   3179e:	22e0      	movs	r2, #224	; 0xe0
   317a0:	589b      	ldr	r3, [r3, r2]
   317a2:	2b00      	cmp	r3, #0
   317a4:	db71      	blt.n	3188a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   317a6:	687b      	ldr	r3, [r7, #4]
   317a8:	22e0      	movs	r2, #224	; 0xe0
   317aa:	589b      	ldr	r3, [r3, r2]
   317ac:	2b00      	cmp	r3, #0
   317ae:	d134      	bne.n	3181a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   317b0:	687b      	ldr	r3, [r7, #4]
   317b2:	22d8      	movs	r2, #216	; 0xd8
   317b4:	2100      	movs	r1, #0
   317b6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   317b8:	687b      	ldr	r3, [r7, #4]
   317ba:	22e4      	movs	r2, #228	; 0xe4
   317bc:	2100      	movs	r1, #0
   317be:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   317c0:	2308      	movs	r3, #8
   317c2:	18fb      	adds	r3, r7, r3
   317c4:	2201      	movs	r2, #1
   317c6:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   317c8:	2308      	movs	r3, #8
   317ca:	18fb      	adds	r3, r7, r3
   317cc:	2200      	movs	r2, #0
   317ce:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   317d0:	2308      	movs	r3, #8
   317d2:	18fb      	adds	r3, r7, r3
   317d4:	2200      	movs	r2, #0
   317d6:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   317d8:	687b      	ldr	r3, [r7, #4]
   317da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   317dc:	2b00      	cmp	r3, #0
   317de:	d006      	beq.n	317ee <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   317e0:	687b      	ldr	r3, [r7, #4]
   317e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   317e4:	2208      	movs	r2, #8
   317e6:	18ba      	adds	r2, r7, r2
   317e8:	6878      	ldr	r0, [r7, #4]
   317ea:	2103      	movs	r1, #3
   317ec:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   317ee:	687b      	ldr	r3, [r7, #4]
   317f0:	2241      	movs	r2, #65	; 0x41
   317f2:	5c9b      	ldrb	r3, [r3, r2]
   317f4:	2202      	movs	r2, #2
   317f6:	4013      	ands	r3, r2
   317f8:	b2db      	uxtb	r3, r3
   317fa:	2b00      	cmp	r3, #0
   317fc:	d105      	bne.n	3180a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   317fe:	687b      	ldr	r3, [r7, #4]
   31800:	2100      	movs	r1, #0
   31802:	0018      	movs	r0, r3
   31804:	4b62      	ldr	r3, [pc, #392]	; (31990 <_http_client_read_chuked_entity+0x20c>)
   31806:	4798      	blx	r3
					return;
   31808:	e0bf      	b.n	3198a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3180a:	697b      	ldr	r3, [r7, #20]
   3180c:	1c9a      	adds	r2, r3, #2
   3180e:	687b      	ldr	r3, [r7, #4]
   31810:	0011      	movs	r1, r2
   31812:	0018      	movs	r0, r3
   31814:	4b5f      	ldr	r3, [pc, #380]	; (31994 <_http_client_read_chuked_entity+0x210>)
   31816:	4798      	blx	r3
   31818:	e0b2      	b.n	31980 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   3181a:	687b      	ldr	r3, [r7, #4]
   3181c:	22e0      	movs	r2, #224	; 0xe0
   3181e:	589a      	ldr	r2, [r3, r2]
   31820:	69fb      	ldr	r3, [r7, #28]
   31822:	429a      	cmp	r2, r3
   31824:	dd00      	ble.n	31828 <_http_client_read_chuked_entity+0xa4>
   31826:	e0ab      	b.n	31980 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31828:	687b      	ldr	r3, [r7, #4]
   3182a:	22e0      	movs	r2, #224	; 0xe0
   3182c:	589b      	ldr	r3, [r3, r2]
   3182e:	001a      	movs	r2, r3
   31830:	2308      	movs	r3, #8
   31832:	18fb      	adds	r3, r7, r3
   31834:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31836:	2308      	movs	r3, #8
   31838:	18fb      	adds	r3, r7, r3
   3183a:	697a      	ldr	r2, [r7, #20]
   3183c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3183e:	2308      	movs	r3, #8
   31840:	18fb      	adds	r3, r7, r3
   31842:	2200      	movs	r2, #0
   31844:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31846:	687b      	ldr	r3, [r7, #4]
   31848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3184a:	2b00      	cmp	r3, #0
   3184c:	d006      	beq.n	3185c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3184e:	687b      	ldr	r3, [r7, #4]
   31850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31852:	2208      	movs	r2, #8
   31854:	18ba      	adds	r2, r7, r2
   31856:	6878      	ldr	r0, [r7, #4]
   31858:	2103      	movs	r1, #3
   3185a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   3185c:	687b      	ldr	r3, [r7, #4]
   3185e:	22e0      	movs	r2, #224	; 0xe0
   31860:	589b      	ldr	r3, [r3, r2]
   31862:	3302      	adds	r3, #2
   31864:	697a      	ldr	r2, [r7, #20]
   31866:	18d2      	adds	r2, r2, r3
   31868:	687b      	ldr	r3, [r7, #4]
   3186a:	0011      	movs	r1, r2
   3186c:	0018      	movs	r0, r3
   3186e:	4b49      	ldr	r3, [pc, #292]	; (31994 <_http_client_read_chuked_entity+0x210>)
   31870:	4798      	blx	r3
				length = (int)module->recved_size;
   31872:	687b      	ldr	r3, [r7, #4]
   31874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31876:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31878:	687b      	ldr	r3, [r7, #4]
   3187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3187c:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3187e:	687b      	ldr	r3, [r7, #4]
   31880:	21e0      	movs	r1, #224	; 0xe0
   31882:	2201      	movs	r2, #1
   31884:	4252      	negs	r2, r2
   31886:	505a      	str	r2, [r3, r1]
   31888:	e07a      	b.n	31980 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   3188a:	687b      	ldr	r3, [r7, #4]
   3188c:	22e0      	movs	r2, #224	; 0xe0
   3188e:	2100      	movs	r1, #0
   31890:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   31892:	e05a      	b.n	3194a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31894:	697b      	ldr	r3, [r7, #20]
   31896:	781b      	ldrb	r3, [r3, #0]
   31898:	2b0a      	cmp	r3, #10
   3189a:	d106      	bne.n	318aa <_http_client_read_chuked_entity+0x126>
					buffer++;
   3189c:	697b      	ldr	r3, [r7, #20]
   3189e:	3301      	adds	r3, #1
   318a0:	617b      	str	r3, [r7, #20]
					length--;
   318a2:	69fb      	ldr	r3, [r7, #28]
   318a4:	3b01      	subs	r3, #1
   318a6:	61fb      	str	r3, [r7, #28]
					break;
   318a8:	e052      	b.n	31950 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   318aa:	69bb      	ldr	r3, [r7, #24]
   318ac:	2b00      	cmp	r3, #0
   318ae:	d145      	bne.n	3193c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   318b0:	697b      	ldr	r3, [r7, #20]
   318b2:	781b      	ldrb	r3, [r3, #0]
   318b4:	2b2f      	cmp	r3, #47	; 0x2f
   318b6:	d910      	bls.n	318da <_http_client_read_chuked_entity+0x156>
   318b8:	697b      	ldr	r3, [r7, #20]
   318ba:	781b      	ldrb	r3, [r3, #0]
   318bc:	2b39      	cmp	r3, #57	; 0x39
   318be:	d80c      	bhi.n	318da <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   318c0:	687b      	ldr	r3, [r7, #4]
   318c2:	22e0      	movs	r2, #224	; 0xe0
   318c4:	589b      	ldr	r3, [r3, r2]
   318c6:	011b      	lsls	r3, r3, #4
   318c8:	697a      	ldr	r2, [r7, #20]
   318ca:	7812      	ldrb	r2, [r2, #0]
   318cc:	189b      	adds	r3, r3, r2
   318ce:	3b30      	subs	r3, #48	; 0x30
   318d0:	001a      	movs	r2, r3
   318d2:	687b      	ldr	r3, [r7, #4]
   318d4:	21e0      	movs	r1, #224	; 0xe0
   318d6:	505a      	str	r2, [r3, r1]
   318d8:	e031      	b.n	3193e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   318da:	697b      	ldr	r3, [r7, #20]
   318dc:	781b      	ldrb	r3, [r3, #0]
   318de:	2b60      	cmp	r3, #96	; 0x60
   318e0:	d910      	bls.n	31904 <_http_client_read_chuked_entity+0x180>
   318e2:	697b      	ldr	r3, [r7, #20]
   318e4:	781b      	ldrb	r3, [r3, #0]
   318e6:	2b66      	cmp	r3, #102	; 0x66
   318e8:	d80c      	bhi.n	31904 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   318ea:	687b      	ldr	r3, [r7, #4]
   318ec:	22e0      	movs	r2, #224	; 0xe0
   318ee:	589b      	ldr	r3, [r3, r2]
   318f0:	011b      	lsls	r3, r3, #4
   318f2:	697a      	ldr	r2, [r7, #20]
   318f4:	7812      	ldrb	r2, [r2, #0]
   318f6:	189b      	adds	r3, r3, r2
   318f8:	3b61      	subs	r3, #97	; 0x61
   318fa:	001a      	movs	r2, r3
   318fc:	687b      	ldr	r3, [r7, #4]
   318fe:	21e0      	movs	r1, #224	; 0xe0
   31900:	505a      	str	r2, [r3, r1]
   31902:	e01c      	b.n	3193e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31904:	697b      	ldr	r3, [r7, #20]
   31906:	781b      	ldrb	r3, [r3, #0]
   31908:	2b40      	cmp	r3, #64	; 0x40
   3190a:	d910      	bls.n	3192e <_http_client_read_chuked_entity+0x1aa>
   3190c:	697b      	ldr	r3, [r7, #20]
   3190e:	781b      	ldrb	r3, [r3, #0]
   31910:	2b46      	cmp	r3, #70	; 0x46
   31912:	d80c      	bhi.n	3192e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31914:	687b      	ldr	r3, [r7, #4]
   31916:	22e0      	movs	r2, #224	; 0xe0
   31918:	589b      	ldr	r3, [r3, r2]
   3191a:	011b      	lsls	r3, r3, #4
   3191c:	697a      	ldr	r2, [r7, #20]
   3191e:	7812      	ldrb	r2, [r2, #0]
   31920:	189b      	adds	r3, r3, r2
   31922:	3b41      	subs	r3, #65	; 0x41
   31924:	001a      	movs	r2, r3
   31926:	687b      	ldr	r3, [r7, #4]
   31928:	21e0      	movs	r1, #224	; 0xe0
   3192a:	505a      	str	r2, [r3, r1]
   3192c:	e007      	b.n	3193e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   3192e:	697b      	ldr	r3, [r7, #20]
   31930:	781b      	ldrb	r3, [r3, #0]
   31932:	2b3b      	cmp	r3, #59	; 0x3b
   31934:	d103      	bne.n	3193e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31936:	2301      	movs	r3, #1
   31938:	61bb      	str	r3, [r7, #24]
   3193a:	e000      	b.n	3193e <_http_client_read_chuked_entity+0x1ba>
					continue;
   3193c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   3193e:	697b      	ldr	r3, [r7, #20]
   31940:	3301      	adds	r3, #1
   31942:	617b      	str	r3, [r7, #20]
   31944:	69fb      	ldr	r3, [r7, #28]
   31946:	3b01      	subs	r3, #1
   31948:	61fb      	str	r3, [r7, #28]
   3194a:	69fb      	ldr	r3, [r7, #28]
   3194c:	2b00      	cmp	r3, #0
   3194e:	dca1      	bgt.n	31894 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31950:	687b      	ldr	r3, [r7, #4]
   31952:	22e0      	movs	r2, #224	; 0xe0
   31954:	589a      	ldr	r2, [r3, r2]
   31956:	687b      	ldr	r3, [r7, #4]
   31958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3195a:	429a      	cmp	r2, r3
   3195c:	dd07      	ble.n	3196e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   3195e:	238b      	movs	r3, #139	; 0x8b
   31960:	425a      	negs	r2, r3
   31962:	687b      	ldr	r3, [r7, #4]
   31964:	0011      	movs	r1, r2
   31966:	0018      	movs	r0, r3
   31968:	4b09      	ldr	r3, [pc, #36]	; (31990 <_http_client_read_chuked_entity+0x20c>)
   3196a:	4798      	blx	r3
				return;
   3196c:	e00d      	b.n	3198a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   3196e:	69fb      	ldr	r3, [r7, #28]
   31970:	2b00      	cmp	r3, #0
   31972:	d105      	bne.n	31980 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31974:	687b      	ldr	r3, [r7, #4]
   31976:	21e0      	movs	r1, #224	; 0xe0
   31978:	2201      	movs	r2, #1
   3197a:	4252      	negs	r2, r2
   3197c:	505a      	str	r2, [r3, r1]
				return;
   3197e:	e004      	b.n	3198a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31980:	687b      	ldr	r3, [r7, #4]
   31982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31984:	2b00      	cmp	r3, #0
   31986:	d000      	beq.n	3198a <_http_client_read_chuked_entity+0x206>
   31988:	e708      	b.n	3179c <_http_client_read_chuked_entity+0x18>
}
   3198a:	46bd      	mov	sp, r7
   3198c:	b008      	add	sp, #32
   3198e:	bd80      	pop	{r7, pc}
   31990:	00030b5d 	.word	0x00030b5d
   31994:	00031b45 	.word	0x00031b45

00031998 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31998:	b580      	push	{r7, lr}
   3199a:	b086      	sub	sp, #24
   3199c:	af00      	add	r7, sp, #0
   3199e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   319a0:	687b      	ldr	r3, [r7, #4]
   319a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   319a4:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   319a6:	687b      	ldr	r3, [r7, #4]
   319a8:	22dc      	movs	r2, #220	; 0xdc
   319aa:	589b      	ldr	r3, [r3, r2]
   319ac:	2b00      	cmp	r3, #0
   319ae:	db58      	blt.n	31a62 <_http_client_handle_entity+0xca>
   319b0:	687b      	ldr	r3, [r7, #4]
   319b2:	22dc      	movs	r2, #220	; 0xdc
   319b4:	589a      	ldr	r2, [r3, r2]
   319b6:	687b      	ldr	r3, [r7, #4]
   319b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   319ba:	429a      	cmp	r2, r3
   319bc:	dc51      	bgt.n	31a62 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   319be:	687b      	ldr	r3, [r7, #4]
   319c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   319c2:	0019      	movs	r1, r3
   319c4:	687b      	ldr	r3, [r7, #4]
   319c6:	22dc      	movs	r2, #220	; 0xdc
   319c8:	589b      	ldr	r3, [r3, r2]
   319ca:	4299      	cmp	r1, r3
   319cc:	da00      	bge.n	319d0 <_http_client_handle_entity+0x38>
   319ce:	e0a9      	b.n	31b24 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   319d0:	687b      	ldr	r3, [r7, #4]
   319d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   319d4:	2b00      	cmp	r3, #0
   319d6:	d020      	beq.n	31a1a <_http_client_handle_entity+0x82>
   319d8:	687b      	ldr	r3, [r7, #4]
   319da:	22e4      	movs	r2, #228	; 0xe4
   319dc:	5a9b      	ldrh	r3, [r3, r2]
   319de:	2b00      	cmp	r3, #0
   319e0:	d01b      	beq.n	31a1a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   319e2:	687b      	ldr	r3, [r7, #4]
   319e4:	22e4      	movs	r2, #228	; 0xe4
   319e6:	5a9a      	ldrh	r2, [r3, r2]
   319e8:	2308      	movs	r3, #8
   319ea:	18fb      	adds	r3, r7, r3
   319ec:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   319ee:	2308      	movs	r3, #8
   319f0:	18fb      	adds	r3, r7, r3
   319f2:	2200      	movs	r2, #0
   319f4:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   319f6:	687b      	ldr	r3, [r7, #4]
   319f8:	22dc      	movs	r2, #220	; 0xdc
   319fa:	589b      	ldr	r3, [r3, r2]
   319fc:	001a      	movs	r2, r3
   319fe:	2308      	movs	r3, #8
   31a00:	18fb      	adds	r3, r7, r3
   31a02:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31a04:	2308      	movs	r3, #8
   31a06:	18fb      	adds	r3, r7, r3
   31a08:	697a      	ldr	r2, [r7, #20]
   31a0a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31a0c:	687b      	ldr	r3, [r7, #4]
   31a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a10:	2208      	movs	r2, #8
   31a12:	18ba      	adds	r2, r7, r2
   31a14:	6878      	ldr	r0, [r7, #4]
   31a16:	2102      	movs	r1, #2
   31a18:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   31a1a:	687b      	ldr	r3, [r7, #4]
   31a1c:	22d8      	movs	r2, #216	; 0xd8
   31a1e:	2100      	movs	r1, #0
   31a20:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31a22:	687b      	ldr	r3, [r7, #4]
   31a24:	22e4      	movs	r2, #228	; 0xe4
   31a26:	2100      	movs	r1, #0
   31a28:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31a2a:	687b      	ldr	r3, [r7, #4]
   31a2c:	2241      	movs	r2, #65	; 0x41
   31a2e:	5c9b      	ldrb	r3, [r3, r2]
   31a30:	2202      	movs	r2, #2
   31a32:	4013      	ands	r3, r2
   31a34:	b2db      	uxtb	r3, r3
   31a36:	2b00      	cmp	r3, #0
   31a38:	d105      	bne.n	31a46 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31a3a:	687b      	ldr	r3, [r7, #4]
   31a3c:	2100      	movs	r1, #0
   31a3e:	0018      	movs	r0, r3
   31a40:	4b3b      	ldr	r3, [pc, #236]	; (31b30 <_http_client_handle_entity+0x198>)
   31a42:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31a44:	e06e      	b.n	31b24 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31a46:	687b      	ldr	r3, [r7, #4]
   31a48:	22dc      	movs	r2, #220	; 0xdc
   31a4a:	589b      	ldr	r3, [r3, r2]
   31a4c:	001a      	movs	r2, r3
   31a4e:	697b      	ldr	r3, [r7, #20]
   31a50:	189a      	adds	r2, r3, r2
   31a52:	687b      	ldr	r3, [r7, #4]
   31a54:	0011      	movs	r1, r2
   31a56:	0018      	movs	r0, r3
   31a58:	4b36      	ldr	r3, [pc, #216]	; (31b34 <_http_client_handle_entity+0x19c>)
   31a5a:	4798      	blx	r3
				return module->recved_size;
   31a5c:	687b      	ldr	r3, [r7, #4]
   31a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31a60:	e061      	b.n	31b26 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31a62:	687b      	ldr	r3, [r7, #4]
   31a64:	22dc      	movs	r2, #220	; 0xdc
   31a66:	589b      	ldr	r3, [r3, r2]
   31a68:	2b00      	cmp	r3, #0
   31a6a:	db57      	blt.n	31b1c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   31a6c:	687b      	ldr	r3, [r7, #4]
   31a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31a70:	2308      	movs	r3, #8
   31a72:	18fb      	adds	r3, r7, r3
   31a74:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31a76:	2308      	movs	r3, #8
   31a78:	18fb      	adds	r3, r7, r3
   31a7a:	697a      	ldr	r2, [r7, #20]
   31a7c:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   31a7e:	687b      	ldr	r3, [r7, #4]
   31a80:	22e0      	movs	r2, #224	; 0xe0
   31a82:	589a      	ldr	r2, [r3, r2]
   31a84:	687b      	ldr	r3, [r7, #4]
   31a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31a88:	18d2      	adds	r2, r2, r3
   31a8a:	687b      	ldr	r3, [r7, #4]
   31a8c:	21e0      	movs	r1, #224	; 0xe0
   31a8e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   31a90:	687b      	ldr	r3, [r7, #4]
   31a92:	22dc      	movs	r2, #220	; 0xdc
   31a94:	589a      	ldr	r2, [r3, r2]
   31a96:	687b      	ldr	r3, [r7, #4]
   31a98:	21e0      	movs	r1, #224	; 0xe0
   31a9a:	585b      	ldr	r3, [r3, r1]
   31a9c:	429a      	cmp	r2, r3
   31a9e:	dc0c      	bgt.n	31aba <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31aa0:	687b      	ldr	r3, [r7, #4]
   31aa2:	22d8      	movs	r2, #216	; 0xd8
   31aa4:	2100      	movs	r1, #0
   31aa6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31aa8:	687b      	ldr	r3, [r7, #4]
   31aaa:	22e4      	movs	r2, #228	; 0xe4
   31aac:	2100      	movs	r1, #0
   31aae:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31ab0:	2308      	movs	r3, #8
   31ab2:	18fb      	adds	r3, r7, r3
   31ab4:	2201      	movs	r2, #1
   31ab6:	721a      	strb	r2, [r3, #8]
   31ab8:	e003      	b.n	31ac2 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   31aba:	2308      	movs	r3, #8
   31abc:	18fb      	adds	r3, r7, r3
   31abe:	2200      	movs	r2, #0
   31ac0:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31ac2:	687b      	ldr	r3, [r7, #4]
   31ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ac6:	2b00      	cmp	r3, #0
   31ac8:	d006      	beq.n	31ad8 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31aca:	687b      	ldr	r3, [r7, #4]
   31acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ace:	2208      	movs	r2, #8
   31ad0:	18ba      	adds	r2, r7, r2
   31ad2:	6878      	ldr	r0, [r7, #4]
   31ad4:	2103      	movs	r1, #3
   31ad6:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31ad8:	2308      	movs	r3, #8
   31ada:	18fb      	adds	r3, r7, r3
   31adc:	7a1b      	ldrb	r3, [r3, #8]
   31ade:	2b01      	cmp	r3, #1
   31ae0:	d112      	bne.n	31b08 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31ae2:	687b      	ldr	r3, [r7, #4]
   31ae4:	2241      	movs	r2, #65	; 0x41
   31ae6:	5c9b      	ldrb	r3, [r3, r2]
   31ae8:	2202      	movs	r2, #2
   31aea:	4013      	ands	r3, r2
   31aec:	b2db      	uxtb	r3, r3
   31aee:	2b00      	cmp	r3, #0
   31af0:	d10a      	bne.n	31b08 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31af2:	4b11      	ldr	r3, [pc, #68]	; (31b38 <_http_client_handle_entity+0x1a0>)
   31af4:	0018      	movs	r0, r3
   31af6:	4b11      	ldr	r3, [pc, #68]	; (31b3c <_http_client_handle_entity+0x1a4>)
   31af8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   31afa:	687b      	ldr	r3, [r7, #4]
   31afc:	2100      	movs	r1, #0
   31afe:	0018      	movs	r0, r3
   31b00:	4b0b      	ldr	r3, [pc, #44]	; (31b30 <_http_client_handle_entity+0x198>)
   31b02:	4798      	blx	r3
					return 0;
   31b04:	2300      	movs	r3, #0
   31b06:	e00e      	b.n	31b26 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31b08:	687b      	ldr	r3, [r7, #4]
   31b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b0c:	697a      	ldr	r2, [r7, #20]
   31b0e:	18d2      	adds	r2, r2, r3
   31b10:	687b      	ldr	r3, [r7, #4]
   31b12:	0011      	movs	r1, r2
   31b14:	0018      	movs	r0, r3
   31b16:	4b07      	ldr	r3, [pc, #28]	; (31b34 <_http_client_handle_entity+0x19c>)
   31b18:	4798      	blx	r3
   31b1a:	e003      	b.n	31b24 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   31b1c:	687b      	ldr	r3, [r7, #4]
   31b1e:	0018      	movs	r0, r3
   31b20:	4b07      	ldr	r3, [pc, #28]	; (31b40 <_http_client_handle_entity+0x1a8>)
   31b22:	4798      	blx	r3
		}
	}

	return 0;
   31b24:	2300      	movs	r3, #0
}
   31b26:	0018      	movs	r0, r3
   31b28:	46bd      	mov	sp, r7
   31b2a:	b006      	add	sp, #24
   31b2c:	bd80      	pop	{r7, pc}
   31b2e:	46c0      	nop			; (mov r8, r8)
   31b30:	00030b5d 	.word	0x00030b5d
   31b34:	00031b45 	.word	0x00031b45
   31b38:	00039660 	.word	0x00039660
   31b3c:	00034539 	.word	0x00034539
   31b40:	00031785 	.word	0x00031785

00031b44 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31b44:	b580      	push	{r7, lr}
   31b46:	b084      	sub	sp, #16
   31b48:	af00      	add	r7, sp, #0
   31b4a:	6078      	str	r0, [r7, #4]
   31b4c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   31b4e:	687b      	ldr	r3, [r7, #4]
   31b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31b52:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31b54:	687b      	ldr	r3, [r7, #4]
   31b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b58:	001a      	movs	r2, r3
   31b5a:	683b      	ldr	r3, [r7, #0]
   31b5c:	1ad2      	subs	r2, r2, r3
   31b5e:	68fb      	ldr	r3, [r7, #12]
   31b60:	18d3      	adds	r3, r2, r3
   31b62:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31b64:	68bb      	ldr	r3, [r7, #8]
   31b66:	2b00      	cmp	r3, #0
   31b68:	dd09      	ble.n	31b7e <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   31b6a:	68ba      	ldr	r2, [r7, #8]
   31b6c:	6839      	ldr	r1, [r7, #0]
   31b6e:	68fb      	ldr	r3, [r7, #12]
   31b70:	0018      	movs	r0, r3
   31b72:	4b06      	ldr	r3, [pc, #24]	; (31b8c <_http_client_move_buffer+0x48>)
   31b74:	4798      	blx	r3
		module->recved_size = remain;
   31b76:	68ba      	ldr	r2, [r7, #8]
   31b78:	687b      	ldr	r3, [r7, #4]
   31b7a:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   31b7c:	e002      	b.n	31b84 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   31b7e:	687b      	ldr	r3, [r7, #4]
   31b80:	2200      	movs	r2, #0
   31b82:	645a      	str	r2, [r3, #68]	; 0x44
}
   31b84:	46c0      	nop			; (mov r8, r8)
   31b86:	46bd      	mov	sp, r7
   31b88:	b004      	add	sp, #16
   31b8a:	bd80      	pop	{r7, pc}
   31b8c:	000342f3 	.word	0x000342f3

00031b90 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   31b90:	b580      	push	{r7, lr}
   31b92:	b084      	sub	sp, #16
   31b94:	af00      	add	r7, sp, #0
   31b96:	60f8      	str	r0, [r7, #12]
   31b98:	60b9      	str	r1, [r7, #8]
   31b9a:	607a      	str	r2, [r7, #4]
   31b9c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   31b9e:	68fb      	ldr	r3, [r7, #12]
   31ba0:	687a      	ldr	r2, [r7, #4]
   31ba2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31ba4:	68fb      	ldr	r3, [r7, #12]
   31ba6:	68ba      	ldr	r2, [r7, #8]
   31ba8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   31baa:	68fb      	ldr	r3, [r7, #12]
   31bac:	2200      	movs	r2, #0
   31bae:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31bb0:	68fb      	ldr	r3, [r7, #12]
   31bb2:	683a      	ldr	r2, [r7, #0]
   31bb4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31bb6:	68fb      	ldr	r3, [r7, #12]
   31bb8:	69ba      	ldr	r2, [r7, #24]
   31bba:	60da      	str	r2, [r3, #12]
}
   31bbc:	46c0      	nop			; (mov r8, r8)
   31bbe:	46bd      	mov	sp, r7
   31bc0:	b004      	add	sp, #16
   31bc2:	bd80      	pop	{r7, pc}

00031bc4 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31bc4:	b580      	push	{r7, lr}
   31bc6:	b084      	sub	sp, #16
   31bc8:	af00      	add	r7, sp, #0
   31bca:	6078      	str	r0, [r7, #4]
   31bcc:	000a      	movs	r2, r1
   31bce:	1cfb      	adds	r3, r7, #3
   31bd0:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31bd2:	687b      	ldr	r3, [r7, #4]
   31bd4:	681a      	ldr	r2, [r3, #0]
   31bd6:	687b      	ldr	r3, [r7, #4]
   31bd8:	685b      	ldr	r3, [r3, #4]
   31bda:	1ad3      	subs	r3, r2, r3
   31bdc:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   31bde:	68fb      	ldr	r3, [r7, #12]
   31be0:	2b00      	cmp	r3, #0
   31be2:	dc03      	bgt.n	31bec <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31be4:	687b      	ldr	r3, [r7, #4]
   31be6:	0018      	movs	r0, r3
   31be8:	4b08      	ldr	r3, [pc, #32]	; (31c0c <stream_writer_send_8+0x48>)
   31bea:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   31bec:	687b      	ldr	r3, [r7, #4]
   31bee:	6919      	ldr	r1, [r3, #16]
   31bf0:	687b      	ldr	r3, [r7, #4]
   31bf2:	685b      	ldr	r3, [r3, #4]
   31bf4:	1c58      	adds	r0, r3, #1
   31bf6:	687a      	ldr	r2, [r7, #4]
   31bf8:	6050      	str	r0, [r2, #4]
   31bfa:	18cb      	adds	r3, r1, r3
   31bfc:	1cfa      	adds	r2, r7, #3
   31bfe:	7812      	ldrb	r2, [r2, #0]
   31c00:	701a      	strb	r2, [r3, #0]
}
   31c02:	46c0      	nop			; (mov r8, r8)
   31c04:	46bd      	mov	sp, r7
   31c06:	b004      	add	sp, #16
   31c08:	bd80      	pop	{r7, pc}
   31c0a:	46c0      	nop			; (mov r8, r8)
   31c0c:	00031c4d 	.word	0x00031c4d

00031c10 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31c10:	b580      	push	{r7, lr}
   31c12:	b084      	sub	sp, #16
   31c14:	af00      	add	r7, sp, #0
   31c16:	60f8      	str	r0, [r7, #12]
   31c18:	60b9      	str	r1, [r7, #8]
   31c1a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   31c1c:	e00d      	b.n	31c3a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   31c1e:	68bb      	ldr	r3, [r7, #8]
   31c20:	781b      	ldrb	r3, [r3, #0]
   31c22:	b25a      	sxtb	r2, r3
   31c24:	68fb      	ldr	r3, [r7, #12]
   31c26:	0011      	movs	r1, r2
   31c28:	0018      	movs	r0, r3
   31c2a:	4b07      	ldr	r3, [pc, #28]	; (31c48 <stream_writer_send_buffer+0x38>)
   31c2c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   31c2e:	687b      	ldr	r3, [r7, #4]
   31c30:	3b01      	subs	r3, #1
   31c32:	607b      	str	r3, [r7, #4]
   31c34:	68bb      	ldr	r3, [r7, #8]
   31c36:	3301      	adds	r3, #1
   31c38:	60bb      	str	r3, [r7, #8]
   31c3a:	687b      	ldr	r3, [r7, #4]
   31c3c:	2b00      	cmp	r3, #0
   31c3e:	d1ee      	bne.n	31c1e <stream_writer_send_buffer+0xe>
	}
}
   31c40:	46c0      	nop			; (mov r8, r8)
   31c42:	46bd      	mov	sp, r7
   31c44:	b004      	add	sp, #16
   31c46:	bd80      	pop	{r7, pc}
   31c48:	00031bc5 	.word	0x00031bc5

00031c4c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   31c4c:	b590      	push	{r4, r7, lr}
   31c4e:	b083      	sub	sp, #12
   31c50:	af00      	add	r7, sp, #0
   31c52:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31c54:	687b      	ldr	r3, [r7, #4]
   31c56:	685b      	ldr	r3, [r3, #4]
   31c58:	2b00      	cmp	r3, #0
   31c5a:	d00c      	beq.n	31c76 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   31c5c:	687b      	ldr	r3, [r7, #4]
   31c5e:	689c      	ldr	r4, [r3, #8]
   31c60:	687b      	ldr	r3, [r7, #4]
   31c62:	68d8      	ldr	r0, [r3, #12]
   31c64:	687b      	ldr	r3, [r7, #4]
   31c66:	6919      	ldr	r1, [r3, #16]
   31c68:	687b      	ldr	r3, [r7, #4]
   31c6a:	685b      	ldr	r3, [r3, #4]
   31c6c:	001a      	movs	r2, r3
   31c6e:	47a0      	blx	r4
		writer->written = 0;
   31c70:	687b      	ldr	r3, [r7, #4]
   31c72:	2200      	movs	r2, #0
   31c74:	605a      	str	r2, [r3, #4]
	}
}
   31c76:	46c0      	nop			; (mov r8, r8)
   31c78:	46bd      	mov	sp, r7
   31c7a:	b003      	add	sp, #12
   31c7c:	bd90      	pop	{r4, r7, pc}
	...

00031c80 <system_cpu_clock_get_hz>:
{
   31c80:	b580      	push	{r7, lr}
   31c82:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   31c84:	2000      	movs	r0, #0
   31c86:	4b05      	ldr	r3, [pc, #20]	; (31c9c <system_cpu_clock_get_hz+0x1c>)
   31c88:	4798      	blx	r3
   31c8a:	0002      	movs	r2, r0
   31c8c:	4b04      	ldr	r3, [pc, #16]	; (31ca0 <system_cpu_clock_get_hz+0x20>)
   31c8e:	7a1b      	ldrb	r3, [r3, #8]
   31c90:	b2db      	uxtb	r3, r3
   31c92:	40da      	lsrs	r2, r3
   31c94:	0013      	movs	r3, r2
}
   31c96:	0018      	movs	r0, r3
   31c98:	46bd      	mov	sp, r7
   31c9a:	bd80      	pop	{r7, pc}
   31c9c:	00029661 	.word	0x00029661
   31ca0:	40000400 	.word	0x40000400

00031ca4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   31ca4:	b580      	push	{r7, lr}
   31ca6:	b084      	sub	sp, #16
   31ca8:	af00      	add	r7, sp, #0
   31caa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   31cac:	687b      	ldr	r3, [r7, #4]
   31cae:	681b      	ldr	r3, [r3, #0]
   31cb0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   31cb2:	46c0      	nop			; (mov r8, r8)
   31cb4:	68fb      	ldr	r3, [r7, #12]
   31cb6:	689b      	ldr	r3, [r3, #8]
   31cb8:	2202      	movs	r2, #2
   31cba:	4013      	ands	r3, r2
   31cbc:	d1fa      	bne.n	31cb4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   31cbe:	68fb      	ldr	r3, [r7, #12]
   31cc0:	681b      	ldr	r3, [r3, #0]
   31cc2:	2202      	movs	r2, #2
   31cc4:	431a      	orrs	r2, r3
   31cc6:	68fb      	ldr	r3, [r7, #12]
   31cc8:	601a      	str	r2, [r3, #0]
}
   31cca:	46c0      	nop			; (mov r8, r8)
   31ccc:	46bd      	mov	sp, r7
   31cce:	b004      	add	sp, #16
   31cd0:	bd80      	pop	{r7, pc}
	...

00031cd4 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   31cd4:	b580      	push	{r7, lr}
   31cd6:	b082      	sub	sp, #8
   31cd8:	af00      	add	r7, sp, #0
   31cda:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   31cdc:	4b04      	ldr	r3, [pc, #16]	; (31cf0 <sw_timer_tcc_callback+0x1c>)
   31cde:	681b      	ldr	r3, [r3, #0]
   31ce0:	1c5a      	adds	r2, r3, #1
   31ce2:	4b03      	ldr	r3, [pc, #12]	; (31cf0 <sw_timer_tcc_callback+0x1c>)
   31ce4:	601a      	str	r2, [r3, #0]
}
   31ce6:	46c0      	nop			; (mov r8, r8)
   31ce8:	46bd      	mov	sp, r7
   31cea:	b002      	add	sp, #8
   31cec:	bd80      	pop	{r7, pc}
   31cee:	46c0      	nop			; (mov r8, r8)
   31cf0:	2000458c 	.word	0x2000458c

00031cf4 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   31cf4:	b580      	push	{r7, lr}
   31cf6:	b082      	sub	sp, #8
   31cf8:	af00      	add	r7, sp, #0
   31cfa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   31cfc:	687b      	ldr	r3, [r7, #4]
   31cfe:	2264      	movs	r2, #100	; 0x64
   31d00:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   31d02:	687b      	ldr	r3, [r7, #4]
   31d04:	2200      	movs	r2, #0
   31d06:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   31d08:	687b      	ldr	r3, [r7, #4]
   31d0a:	2200      	movs	r2, #0
   31d0c:	705a      	strb	r2, [r3, #1]
}
   31d0e:	46c0      	nop			; (mov r8, r8)
   31d10:	46bd      	mov	sp, r7
   31d12:	b002      	add	sp, #8
   31d14:	bd80      	pop	{r7, pc}
	...

00031d18 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   31d18:	b590      	push	{r4, r7, lr}
   31d1a:	b0b1      	sub	sp, #196	; 0xc4
   31d1c:	af00      	add	r7, sp, #0
   31d1e:	6078      	str	r0, [r7, #4]
   31d20:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   31d22:	230c      	movs	r3, #12
   31d24:	18fb      	adds	r3, r7, r3
   31d26:	4a2e      	ldr	r2, [pc, #184]	; (31de0 <sw_timer_init+0xc8>)
   31d28:	ca13      	ldmia	r2!, {r0, r1, r4}
   31d2a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   31d2c:	683b      	ldr	r3, [r7, #0]
   31d2e:	885b      	ldrh	r3, [r3, #2]
   31d30:	001a      	movs	r2, r3
   31d32:	687b      	ldr	r3, [r7, #4]
   31d34:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31d36:	687b      	ldr	r3, [r7, #4]
   31d38:	3314      	adds	r3, #20
   31d3a:	22bc      	movs	r2, #188	; 0xbc
   31d3c:	18ba      	adds	r2, r7, r2
   31d3e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   31d40:	683b      	ldr	r3, [r7, #0]
   31d42:	781b      	ldrb	r3, [r3, #0]
   31d44:	001a      	movs	r2, r3
   31d46:	230c      	movs	r3, #12
   31d48:	18fb      	adds	r3, r7, r3
   31d4a:	0092      	lsls	r2, r2, #2
   31d4c:	58d2      	ldr	r2, [r2, r3]
   31d4e:	2318      	movs	r3, #24
   31d50:	18fb      	adds	r3, r7, r3
   31d52:	0011      	movs	r1, r2
   31d54:	0018      	movs	r0, r3
   31d56:	4b23      	ldr	r3, [pc, #140]	; (31de4 <sw_timer_init+0xcc>)
   31d58:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   31d5a:	4b23      	ldr	r3, [pc, #140]	; (31de8 <sw_timer_init+0xd0>)
   31d5c:	4798      	blx	r3
   31d5e:	0004      	movs	r4, r0
   31d60:	683b      	ldr	r3, [r7, #0]
   31d62:	885b      	ldrh	r3, [r3, #2]
   31d64:	001a      	movs	r2, r3
   31d66:	4b21      	ldr	r3, [pc, #132]	; (31dec <sw_timer_init+0xd4>)
   31d68:	0011      	movs	r1, r2
   31d6a:	22fa      	movs	r2, #250	; 0xfa
   31d6c:	0210      	lsls	r0, r2, #8
   31d6e:	4798      	blx	r3
   31d70:	0003      	movs	r3, r0
   31d72:	001a      	movs	r2, r3
   31d74:	4b1e      	ldr	r3, [pc, #120]	; (31df0 <sw_timer_init+0xd8>)
   31d76:	0011      	movs	r1, r2
   31d78:	0020      	movs	r0, r4
   31d7a:	4798      	blx	r3
   31d7c:	0003      	movs	r3, r0
   31d7e:	001a      	movs	r2, r3
   31d80:	2318      	movs	r3, #24
   31d82:	18fb      	adds	r3, r7, r3
   31d84:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   31d86:	2318      	movs	r3, #24
   31d88:	18fb      	adds	r3, r7, r3
   31d8a:	2205      	movs	r2, #5
   31d8c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   31d8e:	683b      	ldr	r3, [r7, #0]
   31d90:	781b      	ldrb	r3, [r3, #0]
   31d92:	001a      	movs	r2, r3
   31d94:	230c      	movs	r3, #12
   31d96:	18fb      	adds	r3, r7, r3
   31d98:	0092      	lsls	r2, r2, #2
   31d9a:	58d1      	ldr	r1, [r2, r3]
   31d9c:	2318      	movs	r3, #24
   31d9e:	18fa      	adds	r2, r7, r3
   31da0:	23bc      	movs	r3, #188	; 0xbc
   31da2:	18fb      	adds	r3, r7, r3
   31da4:	681b      	ldr	r3, [r3, #0]
   31da6:	0018      	movs	r0, r3
   31da8:	4b12      	ldr	r3, [pc, #72]	; (31df4 <sw_timer_init+0xdc>)
   31daa:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31dac:	683b      	ldr	r3, [r7, #0]
   31dae:	785b      	ldrb	r3, [r3, #1]
   31db0:	3308      	adds	r3, #8
   31db2:	b2da      	uxtb	r2, r3
   31db4:	4910      	ldr	r1, [pc, #64]	; (31df8 <sw_timer_init+0xe0>)
   31db6:	23bc      	movs	r3, #188	; 0xbc
   31db8:	18fb      	adds	r3, r7, r3
   31dba:	681b      	ldr	r3, [r3, #0]
   31dbc:	0018      	movs	r0, r3
   31dbe:	4b0f      	ldr	r3, [pc, #60]	; (31dfc <sw_timer_init+0xe4>)
   31dc0:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31dc2:	683b      	ldr	r3, [r7, #0]
   31dc4:	785b      	ldrb	r3, [r3, #1]
   31dc6:	3308      	adds	r3, #8
   31dc8:	b2da      	uxtb	r2, r3
   31dca:	23bc      	movs	r3, #188	; 0xbc
   31dcc:	18fb      	adds	r3, r7, r3
   31dce:	681b      	ldr	r3, [r3, #0]
   31dd0:	0011      	movs	r1, r2
   31dd2:	0018      	movs	r0, r3
   31dd4:	4b0a      	ldr	r3, [pc, #40]	; (31e00 <sw_timer_init+0xe8>)
   31dd6:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   31dd8:	46c0      	nop			; (mov r8, r8)
   31dda:	46bd      	mov	sp, r7
   31ddc:	b031      	add	sp, #196	; 0xc4
   31dde:	bd90      	pop	{r4, r7, pc}
   31de0:	000396a0 	.word	0x000396a0
   31de4:	00029bf9 	.word	0x00029bf9
   31de8:	00031c81 	.word	0x00031c81
   31dec:	00032359 	.word	0x00032359
   31df0:	00032245 	.word	0x00032245
   31df4:	0002a255 	.word	0x0002a255
   31df8:	00031cd5 	.word	0x00031cd5
   31dfc:	0002a66d 	.word	0x0002a66d
   31e00:	0002a6ad 	.word	0x0002a6ad

00031e04 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   31e04:	b580      	push	{r7, lr}
   31e06:	b084      	sub	sp, #16
   31e08:	af00      	add	r7, sp, #0
   31e0a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   31e0c:	687b      	ldr	r3, [r7, #4]
   31e0e:	3314      	adds	r3, #20
   31e10:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   31e12:	68fb      	ldr	r3, [r7, #12]
   31e14:	0018      	movs	r0, r3
   31e16:	4b03      	ldr	r3, [pc, #12]	; (31e24 <sw_timer_enable+0x20>)
   31e18:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   31e1a:	46c0      	nop			; (mov r8, r8)
   31e1c:	46bd      	mov	sp, r7
   31e1e:	b004      	add	sp, #16
   31e20:	bd80      	pop	{r7, pc}
   31e22:	46c0      	nop			; (mov r8, r8)
   31e24:	00031ca5 	.word	0x00031ca5

00031e28 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31e28:	b580      	push	{r7, lr}
   31e2a:	b086      	sub	sp, #24
   31e2c:	af00      	add	r7, sp, #0
   31e2e:	60f8      	str	r0, [r7, #12]
   31e30:	60b9      	str	r1, [r7, #8]
   31e32:	607a      	str	r2, [r7, #4]
   31e34:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31e36:	2300      	movs	r3, #0
   31e38:	617b      	str	r3, [r7, #20]
   31e3a:	e032      	b.n	31ea2 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   31e3c:	68f9      	ldr	r1, [r7, #12]
   31e3e:	697a      	ldr	r2, [r7, #20]
   31e40:	0013      	movs	r3, r2
   31e42:	009b      	lsls	r3, r3, #2
   31e44:	189b      	adds	r3, r3, r2
   31e46:	009b      	lsls	r3, r3, #2
   31e48:	5c5b      	ldrb	r3, [r3, r1]
   31e4a:	07db      	lsls	r3, r3, #31
   31e4c:	0fdb      	lsrs	r3, r3, #31
   31e4e:	b2db      	uxtb	r3, r3
   31e50:	2b00      	cmp	r3, #0
   31e52:	d123      	bne.n	31e9c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31e54:	697a      	ldr	r2, [r7, #20]
   31e56:	0013      	movs	r3, r2
   31e58:	009b      	lsls	r3, r3, #2
   31e5a:	189b      	adds	r3, r3, r2
   31e5c:	009b      	lsls	r3, r3, #2
   31e5e:	68fa      	ldr	r2, [r7, #12]
   31e60:	18d3      	adds	r3, r2, r3
   31e62:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   31e64:	693b      	ldr	r3, [r7, #16]
   31e66:	68ba      	ldr	r2, [r7, #8]
   31e68:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   31e6a:	693b      	ldr	r3, [r7, #16]
   31e6c:	781a      	ldrb	r2, [r3, #0]
   31e6e:	2102      	movs	r1, #2
   31e70:	438a      	bics	r2, r1
   31e72:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   31e74:	693b      	ldr	r3, [r7, #16]
   31e76:	687a      	ldr	r2, [r7, #4]
   31e78:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   31e7a:	68fb      	ldr	r3, [r7, #12]
   31e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31e7e:	4b0d      	ldr	r3, [pc, #52]	; (31eb4 <sw_timer_register_callback+0x8c>)
   31e80:	0011      	movs	r1, r2
   31e82:	6838      	ldr	r0, [r7, #0]
   31e84:	4798      	blx	r3
   31e86:	0003      	movs	r3, r0
   31e88:	001a      	movs	r2, r3
   31e8a:	693b      	ldr	r3, [r7, #16]
   31e8c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   31e8e:	693b      	ldr	r3, [r7, #16]
   31e90:	781a      	ldrb	r2, [r3, #0]
   31e92:	2101      	movs	r1, #1
   31e94:	430a      	orrs	r2, r1
   31e96:	701a      	strb	r2, [r3, #0]
			return index;
   31e98:	697b      	ldr	r3, [r7, #20]
   31e9a:	e007      	b.n	31eac <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31e9c:	697b      	ldr	r3, [r7, #20]
   31e9e:	3301      	adds	r3, #1
   31ea0:	617b      	str	r3, [r7, #20]
   31ea2:	697b      	ldr	r3, [r7, #20]
   31ea4:	2b00      	cmp	r3, #0
   31ea6:	ddc9      	ble.n	31e3c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   31ea8:	2301      	movs	r3, #1
   31eaa:	425b      	negs	r3, r3
}
   31eac:	0018      	movs	r0, r3
   31eae:	46bd      	mov	sp, r7
   31eb0:	b006      	add	sp, #24
   31eb2:	bd80      	pop	{r7, pc}
   31eb4:	00032245 	.word	0x00032245

00031eb8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   31eb8:	b580      	push	{r7, lr}
   31eba:	b086      	sub	sp, #24
   31ebc:	af00      	add	r7, sp, #0
   31ebe:	60f8      	str	r0, [r7, #12]
   31ec0:	60b9      	str	r1, [r7, #8]
   31ec2:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31ec4:	68ba      	ldr	r2, [r7, #8]
   31ec6:	0013      	movs	r3, r2
   31ec8:	009b      	lsls	r3, r3, #2
   31eca:	189b      	adds	r3, r3, r2
   31ecc:	009b      	lsls	r3, r3, #2
   31ece:	68fa      	ldr	r2, [r7, #12]
   31ed0:	18d3      	adds	r3, r2, r3
   31ed2:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   31ed4:	697b      	ldr	r3, [r7, #20]
   31ed6:	781a      	ldrb	r2, [r3, #0]
   31ed8:	2102      	movs	r1, #2
   31eda:	430a      	orrs	r2, r1
   31edc:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   31ede:	68fb      	ldr	r3, [r7, #12]
   31ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31ee2:	4b07      	ldr	r3, [pc, #28]	; (31f00 <sw_timer_enable_callback+0x48>)
   31ee4:	0011      	movs	r1, r2
   31ee6:	6878      	ldr	r0, [r7, #4]
   31ee8:	4798      	blx	r3
   31eea:	0003      	movs	r3, r0
   31eec:	001a      	movs	r2, r3
   31eee:	4b05      	ldr	r3, [pc, #20]	; (31f04 <sw_timer_enable_callback+0x4c>)
   31ef0:	681b      	ldr	r3, [r3, #0]
   31ef2:	18d2      	adds	r2, r2, r3
   31ef4:	697b      	ldr	r3, [r7, #20]
   31ef6:	611a      	str	r2, [r3, #16]
}
   31ef8:	46c0      	nop			; (mov r8, r8)
   31efa:	46bd      	mov	sp, r7
   31efc:	b006      	add	sp, #24
   31efe:	bd80      	pop	{r7, pc}
   31f00:	00032245 	.word	0x00032245
   31f04:	2000458c 	.word	0x2000458c

00031f08 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   31f08:	b580      	push	{r7, lr}
   31f0a:	b084      	sub	sp, #16
   31f0c:	af00      	add	r7, sp, #0
   31f0e:	6078      	str	r0, [r7, #4]
   31f10:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31f12:	683a      	ldr	r2, [r7, #0]
   31f14:	0013      	movs	r3, r2
   31f16:	009b      	lsls	r3, r3, #2
   31f18:	189b      	adds	r3, r3, r2
   31f1a:	009b      	lsls	r3, r3, #2
   31f1c:	687a      	ldr	r2, [r7, #4]
   31f1e:	18d3      	adds	r3, r2, r3
   31f20:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   31f22:	68fb      	ldr	r3, [r7, #12]
   31f24:	781a      	ldrb	r2, [r3, #0]
   31f26:	2102      	movs	r1, #2
   31f28:	438a      	bics	r2, r1
   31f2a:	701a      	strb	r2, [r3, #0]
}
   31f2c:	46c0      	nop			; (mov r8, r8)
   31f2e:	46bd      	mov	sp, r7
   31f30:	b004      	add	sp, #16
   31f32:	bd80      	pop	{r7, pc}

00031f34 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   31f34:	b590      	push	{r4, r7, lr}
   31f36:	b085      	sub	sp, #20
   31f38:	af00      	add	r7, sp, #0
   31f3a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31f3c:	2300      	movs	r3, #0
   31f3e:	60fb      	str	r3, [r7, #12]
   31f40:	e053      	b.n	31fea <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   31f42:	6879      	ldr	r1, [r7, #4]
   31f44:	68fa      	ldr	r2, [r7, #12]
   31f46:	0013      	movs	r3, r2
   31f48:	009b      	lsls	r3, r3, #2
   31f4a:	189b      	adds	r3, r3, r2
   31f4c:	009b      	lsls	r3, r3, #2
   31f4e:	5c5b      	ldrb	r3, [r3, r1]
   31f50:	07db      	lsls	r3, r3, #31
   31f52:	0fdb      	lsrs	r3, r3, #31
   31f54:	b2db      	uxtb	r3, r3
   31f56:	2b00      	cmp	r3, #0
   31f58:	d044      	beq.n	31fe4 <sw_timer_task+0xb0>
   31f5a:	6879      	ldr	r1, [r7, #4]
   31f5c:	68fa      	ldr	r2, [r7, #12]
   31f5e:	0013      	movs	r3, r2
   31f60:	009b      	lsls	r3, r3, #2
   31f62:	189b      	adds	r3, r3, r2
   31f64:	009b      	lsls	r3, r3, #2
   31f66:	5c5b      	ldrb	r3, [r3, r1]
   31f68:	079b      	lsls	r3, r3, #30
   31f6a:	0fdb      	lsrs	r3, r3, #31
   31f6c:	b2db      	uxtb	r3, r3
   31f6e:	2b00      	cmp	r3, #0
   31f70:	d038      	beq.n	31fe4 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   31f72:	68fa      	ldr	r2, [r7, #12]
   31f74:	0013      	movs	r3, r2
   31f76:	009b      	lsls	r3, r3, #2
   31f78:	189b      	adds	r3, r3, r2
   31f7a:	009b      	lsls	r3, r3, #2
   31f7c:	687a      	ldr	r2, [r7, #4]
   31f7e:	18d3      	adds	r3, r2, r3
   31f80:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   31f82:	68bb      	ldr	r3, [r7, #8]
   31f84:	691a      	ldr	r2, [r3, #16]
   31f86:	4b1c      	ldr	r3, [pc, #112]	; (31ff8 <sw_timer_task+0xc4>)
   31f88:	681b      	ldr	r3, [r3, #0]
   31f8a:	1ad3      	subs	r3, r2, r3
   31f8c:	d52a      	bpl.n	31fe4 <sw_timer_task+0xb0>
   31f8e:	68bb      	ldr	r3, [r7, #8]
   31f90:	781b      	ldrb	r3, [r3, #0]
   31f92:	2204      	movs	r2, #4
   31f94:	4013      	ands	r3, r2
   31f96:	b2db      	uxtb	r3, r3
   31f98:	2b00      	cmp	r3, #0
   31f9a:	d123      	bne.n	31fe4 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   31f9c:	68bb      	ldr	r3, [r7, #8]
   31f9e:	781a      	ldrb	r2, [r3, #0]
   31fa0:	2104      	movs	r1, #4
   31fa2:	430a      	orrs	r2, r1
   31fa4:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   31fa6:	68bb      	ldr	r3, [r7, #8]
   31fa8:	68db      	ldr	r3, [r3, #12]
   31faa:	2b00      	cmp	r3, #0
   31fac:	d007      	beq.n	31fbe <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   31fae:	68bb      	ldr	r3, [r7, #8]
   31fb0:	68da      	ldr	r2, [r3, #12]
   31fb2:	4b11      	ldr	r3, [pc, #68]	; (31ff8 <sw_timer_task+0xc4>)
   31fb4:	681b      	ldr	r3, [r3, #0]
   31fb6:	18d2      	adds	r2, r2, r3
   31fb8:	68bb      	ldr	r3, [r7, #8]
   31fba:	611a      	str	r2, [r3, #16]
   31fbc:	e004      	b.n	31fc8 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   31fbe:	68bb      	ldr	r3, [r7, #8]
   31fc0:	781a      	ldrb	r2, [r3, #0]
   31fc2:	2102      	movs	r1, #2
   31fc4:	438a      	bics	r2, r1
   31fc6:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   31fc8:	68bb      	ldr	r3, [r7, #8]
   31fca:	685c      	ldr	r4, [r3, #4]
   31fcc:	68bb      	ldr	r3, [r7, #8]
   31fce:	689a      	ldr	r2, [r3, #8]
   31fd0:	68bb      	ldr	r3, [r7, #8]
   31fd2:	68db      	ldr	r3, [r3, #12]
   31fd4:	68f9      	ldr	r1, [r7, #12]
   31fd6:	6878      	ldr	r0, [r7, #4]
   31fd8:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   31fda:	68bb      	ldr	r3, [r7, #8]
   31fdc:	781a      	ldrb	r2, [r3, #0]
   31fde:	2104      	movs	r1, #4
   31fe0:	438a      	bics	r2, r1
   31fe2:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31fe4:	68fb      	ldr	r3, [r7, #12]
   31fe6:	3301      	adds	r3, #1
   31fe8:	60fb      	str	r3, [r7, #12]
   31fea:	68fb      	ldr	r3, [r7, #12]
   31fec:	2b00      	cmp	r3, #0
   31fee:	dda8      	ble.n	31f42 <sw_timer_task+0xe>
			}
		}
	}
}
   31ff0:	46c0      	nop			; (mov r8, r8)
   31ff2:	46bd      	mov	sp, r7
   31ff4:	b005      	add	sp, #20
   31ff6:	bd90      	pop	{r4, r7, pc}
   31ff8:	2000458c 	.word	0x2000458c

00031ffc <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   31ffc:	b580      	push	{r7, lr}
   31ffe:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   32000:	4b06      	ldr	r3, [pc, #24]	; (3201c <main+0x20>)
   32002:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   32004:	4b06      	ldr	r3, [pc, #24]	; (32020 <main+0x24>)
   32006:	4798      	blx	r3
	
    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32008:	2001      	movs	r0, #1
   3200a:	4b06      	ldr	r3, [pc, #24]	; (32024 <main+0x28>)
   3200c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3200e:	4b06      	ldr	r3, [pc, #24]	; (32028 <main+0x2c>)
   32010:	4798      	blx	r3

    return 0;  // Will not get here
   32012:	2300      	movs	r3, #0
}
   32014:	0018      	movs	r0, r3
   32016:	46bd      	mov	sp, r7
   32018:	bd80      	pop	{r7, pc}
   3201a:	46c0      	nop			; (mov r8, r8)
   3201c:	00029aed 	.word	0x00029aed
   32020:	0001d5f5 	.word	0x0001d5f5
   32024:	00017cc5 	.word	0x00017cc5
   32028:	0001bc4d 	.word	0x0001bc4d

0003202c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   3202c:	b580      	push	{r7, lr}
   3202e:	b082      	sub	sp, #8
   32030:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   32032:	4b18      	ldr	r3, [pc, #96]	; (32094 <vApplicationDaemonTaskStartupHook+0x68>)
   32034:	0018      	movs	r0, r3
   32036:	4b18      	ldr	r3, [pc, #96]	; (32098 <vApplicationDaemonTaskStartupHook+0x6c>)
   32038:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   3203a:	4b18      	ldr	r3, [pc, #96]	; (3209c <vApplicationDaemonTaskStartupHook+0x70>)
   3203c:	0018      	movs	r0, r3
   3203e:	4b16      	ldr	r3, [pc, #88]	; (32098 <vApplicationDaemonTaskStartupHook+0x6c>)
   32040:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   32042:	4b17      	ldr	r3, [pc, #92]	; (320a0 <vApplicationDaemonTaskStartupHook+0x74>)
   32044:	4798      	blx	r3
   32046:	1e03      	subs	r3, r0, #0
   32048:	d004      	beq.n	32054 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   3204a:	4b16      	ldr	r3, [pc, #88]	; (320a4 <vApplicationDaemonTaskStartupHook+0x78>)
   3204c:	0018      	movs	r0, r3
   3204e:	4b12      	ldr	r3, [pc, #72]	; (32098 <vApplicationDaemonTaskStartupHook+0x6c>)
   32050:	4798      	blx	r3
   32052:	e003      	b.n	3205c <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32054:	4b14      	ldr	r3, [pc, #80]	; (320a8 <vApplicationDaemonTaskStartupHook+0x7c>)
   32056:	0018      	movs	r0, r3
   32058:	4b0f      	ldr	r3, [pc, #60]	; (32098 <vApplicationDaemonTaskStartupHook+0x6c>)
   3205a:	4798      	blx	r3
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
    }*/
	
	/* Initialise the MEMs microphone. */
	mic_init();
   3205c:	4b13      	ldr	r3, [pc, #76]	; (320ac <vApplicationDaemonTaskStartupHook+0x80>)
   3205e:	4798      	blx	r3
	
	relay_pin_init();
   32060:	4b13      	ldr	r3, [pc, #76]	; (320b0 <vApplicationDaemonTaskStartupHook+0x84>)
   32062:	4798      	blx	r3

    uint8_t whoamI = 0;
   32064:	1dfb      	adds	r3, r7, #7
   32066:	2200      	movs	r2, #0
   32068:	701a      	strb	r2, [r3, #0]
	SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/
	
	SerialConsoleWriteString("Initialising soil NPK sensor\r\n");
   3206a:	4b12      	ldr	r3, [pc, #72]	; (320b4 <vApplicationDaemonTaskStartupHook+0x88>)
   3206c:	0018      	movs	r0, r3
   3206e:	4b0a      	ldr	r3, [pc, #40]	; (32098 <vApplicationDaemonTaskStartupHook+0x6c>)
   32070:	4798      	blx	r3
	InitialiseNPKSensor();
   32072:	4b11      	ldr	r3, [pc, #68]	; (320b8 <vApplicationDaemonTaskStartupHook+0x8c>)
   32074:	4798      	blx	r3
	SerialConsoleWriteString("Soil NPK sensor initialised\r\n");
   32076:	4b11      	ldr	r3, [pc, #68]	; (320bc <vApplicationDaemonTaskStartupHook+0x90>)
   32078:	0018      	movs	r0, r3
   3207a:	4b07      	ldr	r3, [pc, #28]	; (32098 <vApplicationDaemonTaskStartupHook+0x6c>)
   3207c:	4798      	blx	r3

    StartTasks();
   3207e:	4b10      	ldr	r3, [pc, #64]	; (320c0 <vApplicationDaemonTaskStartupHook+0x94>)
   32080:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32082:	4b10      	ldr	r3, [pc, #64]	; (320c4 <vApplicationDaemonTaskStartupHook+0x98>)
   32084:	681b      	ldr	r3, [r3, #0]
   32086:	0018      	movs	r0, r3
   32088:	4b0f      	ldr	r3, [pc, #60]	; (320c8 <vApplicationDaemonTaskStartupHook+0x9c>)
   3208a:	4798      	blx	r3
}
   3208c:	46c0      	nop			; (mov r8, r8)
   3208e:	46bd      	mov	sp, r7
   32090:	b002      	add	sp, #8
   32092:	bd80      	pop	{r7, pc}
   32094:	000396ac 	.word	0x000396ac
   32098:	0001d665 	.word	0x0001d665
   3209c:	000396d0 	.word	0x000396d0
   320a0:	000141a5 	.word	0x000141a5
   320a4:	000396e8 	.word	0x000396e8
   320a8:	0003970c 	.word	0x0003970c
   320ac:	000147d1 	.word	0x000147d1
   320b0:	00014ed9 	.word	0x00014ed9
   320b4:	00039728 	.word	0x00039728
   320b8:	00014aa9 	.word	0x00014aa9
   320bc:	00039748 	.word	0x00039748
   320c0:	000320cd 	.word	0x000320cd
   320c4:	20004594 	.word	0x20004594
   320c8:	0001baf1 	.word	0x0001baf1

000320cc <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   320cc:	b590      	push	{r4, r7, lr}
   320ce:	b083      	sub	sp, #12
   320d0:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   320d2:	4b3a      	ldr	r3, [pc, #232]	; (321bc <StartTasks+0xf0>)
   320d4:	4798      	blx	r3
   320d6:	0003      	movs	r3, r0
   320d8:	4a39      	ldr	r2, [pc, #228]	; (321c0 <StartTasks+0xf4>)
   320da:	483a      	ldr	r0, [pc, #232]	; (321c4 <StartTasks+0xf8>)
   320dc:	2140      	movs	r1, #64	; 0x40
   320de:	4c3a      	ldr	r4, [pc, #232]	; (321c8 <StartTasks+0xfc>)
   320e0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   320e2:	4b38      	ldr	r3, [pc, #224]	; (321c4 <StartTasks+0xf8>)
   320e4:	0018      	movs	r0, r3
   320e6:	4b39      	ldr	r3, [pc, #228]	; (321cc <StartTasks+0x100>)
   320e8:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   320ea:	23c8      	movs	r3, #200	; 0xc8
   320ec:	005a      	lsls	r2, r3, #1
   320ee:	4938      	ldr	r1, [pc, #224]	; (321d0 <StartTasks+0x104>)
   320f0:	4838      	ldr	r0, [pc, #224]	; (321d4 <StartTasks+0x108>)
   320f2:	4b39      	ldr	r3, [pc, #228]	; (321d8 <StartTasks+0x10c>)
   320f4:	9301      	str	r3, [sp, #4]
   320f6:	2304      	movs	r3, #4
   320f8:	9300      	str	r3, [sp, #0]
   320fa:	2300      	movs	r3, #0
   320fc:	4c37      	ldr	r4, [pc, #220]	; (321dc <StartTasks+0x110>)
   320fe:	47a0      	blx	r4
   32100:	0003      	movs	r3, r0
   32102:	2b01      	cmp	r3, #1
   32104:	d003      	beq.n	3210e <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   32106:	4b36      	ldr	r3, [pc, #216]	; (321e0 <StartTasks+0x114>)
   32108:	0018      	movs	r0, r3
   3210a:	4b30      	ldr	r3, [pc, #192]	; (321cc <StartTasks+0x100>)
   3210c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   3210e:	4b2b      	ldr	r3, [pc, #172]	; (321bc <StartTasks+0xf0>)
   32110:	4798      	blx	r3
   32112:	0003      	movs	r3, r0
   32114:	4a33      	ldr	r2, [pc, #204]	; (321e4 <StartTasks+0x118>)
   32116:	482b      	ldr	r0, [pc, #172]	; (321c4 <StartTasks+0xf8>)
   32118:	2140      	movs	r1, #64	; 0x40
   3211a:	4c2b      	ldr	r4, [pc, #172]	; (321c8 <StartTasks+0xfc>)
   3211c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3211e:	4b29      	ldr	r3, [pc, #164]	; (321c4 <StartTasks+0xf8>)
   32120:	0018      	movs	r0, r3
   32122:	4b2a      	ldr	r3, [pc, #168]	; (321cc <StartTasks+0x100>)
   32124:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   32126:	23fa      	movs	r3, #250	; 0xfa
   32128:	009a      	lsls	r2, r3, #2
   3212a:	492f      	ldr	r1, [pc, #188]	; (321e8 <StartTasks+0x11c>)
   3212c:	482f      	ldr	r0, [pc, #188]	; (321ec <StartTasks+0x120>)
   3212e:	4b30      	ldr	r3, [pc, #192]	; (321f0 <StartTasks+0x124>)
   32130:	9301      	str	r3, [sp, #4]
   32132:	2303      	movs	r3, #3
   32134:	9300      	str	r3, [sp, #0]
   32136:	2300      	movs	r3, #0
   32138:	4c28      	ldr	r4, [pc, #160]	; (321dc <StartTasks+0x110>)
   3213a:	47a0      	blx	r4
   3213c:	0003      	movs	r3, r0
   3213e:	2b01      	cmp	r3, #1
   32140:	d003      	beq.n	3214a <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32142:	4b2c      	ldr	r3, [pc, #176]	; (321f4 <StartTasks+0x128>)
   32144:	0018      	movs	r0, r3
   32146:	4b21      	ldr	r3, [pc, #132]	; (321cc <StartTasks+0x100>)
   32148:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   3214a:	4b1c      	ldr	r3, [pc, #112]	; (321bc <StartTasks+0xf0>)
   3214c:	4798      	blx	r3
   3214e:	0003      	movs	r3, r0
   32150:	4a29      	ldr	r2, [pc, #164]	; (321f8 <StartTasks+0x12c>)
   32152:	481c      	ldr	r0, [pc, #112]	; (321c4 <StartTasks+0xf8>)
   32154:	2140      	movs	r1, #64	; 0x40
   32156:	4c1c      	ldr	r4, [pc, #112]	; (321c8 <StartTasks+0xfc>)
   32158:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3215a:	4b1a      	ldr	r3, [pc, #104]	; (321c4 <StartTasks+0xf8>)
   3215c:	0018      	movs	r0, r3
   3215e:	4b1b      	ldr	r3, [pc, #108]	; (321cc <StartTasks+0x100>)
   32160:	4798      	blx	r3
	
	if (xTaskCreate(vPlantWateringTask, "PLANTWATER_TASK", PLWA_TASK_SIZE, NULL, PLWA_PRIORITY, &plwaTaskHandle) != pdPASS) {
   32162:	4926      	ldr	r1, [pc, #152]	; (321fc <StartTasks+0x130>)
   32164:	4826      	ldr	r0, [pc, #152]	; (32200 <StartTasks+0x134>)
   32166:	4b27      	ldr	r3, [pc, #156]	; (32204 <StartTasks+0x138>)
   32168:	9301      	str	r3, [sp, #4]
   3216a:	2304      	movs	r3, #4
   3216c:	9300      	str	r3, [sp, #0]
   3216e:	2300      	movs	r3, #0
   32170:	22c8      	movs	r2, #200	; 0xc8
   32172:	4c1a      	ldr	r4, [pc, #104]	; (321dc <StartTasks+0x110>)
   32174:	47a0      	blx	r4
   32176:	0003      	movs	r3, r0
   32178:	2b01      	cmp	r3, #1
   3217a:	d003      	beq.n	32184 <StartTasks+0xb8>
		SerialConsoleWriteString("ERR: Plant Watering task could not be initialized!\r\n");
   3217c:	4b22      	ldr	r3, [pc, #136]	; (32208 <StartTasks+0x13c>)
   3217e:	0018      	movs	r0, r3
   32180:	4b12      	ldr	r3, [pc, #72]	; (321cc <StartTasks+0x100>)
   32182:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting Plant Watering: %d\r\n", xPortGetFreeHeapSize());
   32184:	4b0d      	ldr	r3, [pc, #52]	; (321bc <StartTasks+0xf0>)
   32186:	4798      	blx	r3
   32188:	0003      	movs	r3, r0
   3218a:	4a20      	ldr	r2, [pc, #128]	; (3220c <StartTasks+0x140>)
   3218c:	480d      	ldr	r0, [pc, #52]	; (321c4 <StartTasks+0xf8>)
   3218e:	2140      	movs	r1, #64	; 0x40
   32190:	4c0d      	ldr	r4, [pc, #52]	; (321c8 <StartTasks+0xfc>)
   32192:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   32194:	4b0b      	ldr	r3, [pc, #44]	; (321c4 <StartTasks+0xf8>)
   32196:	0018      	movs	r0, r3
   32198:	4b0c      	ldr	r3, [pc, #48]	; (321cc <StartTasks+0x100>)
   3219a:	4798      	blx	r3

    /*if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
    }*/

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   3219c:	4b07      	ldr	r3, [pc, #28]	; (321bc <StartTasks+0xf0>)
   3219e:	4798      	blx	r3
   321a0:	0003      	movs	r3, r0
   321a2:	4a1b      	ldr	r2, [pc, #108]	; (32210 <StartTasks+0x144>)
   321a4:	4807      	ldr	r0, [pc, #28]	; (321c4 <StartTasks+0xf8>)
   321a6:	2140      	movs	r1, #64	; 0x40
   321a8:	4c07      	ldr	r4, [pc, #28]	; (321c8 <StartTasks+0xfc>)
   321aa:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   321ac:	4b05      	ldr	r3, [pc, #20]	; (321c4 <StartTasks+0xf8>)
   321ae:	0018      	movs	r0, r3
   321b0:	4b06      	ldr	r3, [pc, #24]	; (321cc <StartTasks+0x100>)
   321b2:	4798      	blx	r3
    /*if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
    SerialConsoleWriteString(bufferPrint);*/
}
   321b4:	46c0      	nop			; (mov r8, r8)
   321b6:	46bd      	mov	sp, r7
   321b8:	b001      	add	sp, #4
   321ba:	bd90      	pop	{r4, r7, pc}
   321bc:	00019c31 	.word	0x00019c31
   321c0:	00039768 	.word	0x00039768
   321c4:	20005a54 	.word	0x20005a54
   321c8:	00034571 	.word	0x00034571
   321cc:	0001d665 	.word	0x0001d665
   321d0:	0003978c 	.word	0x0003978c
   321d4:	000136b9 	.word	0x000136b9
   321d8:	20004590 	.word	0x20004590
   321dc:	0001b675 	.word	0x0001b675
   321e0:	00039798 	.word	0x00039798
   321e4:	000397c4 	.word	0x000397c4
   321e8:	000397e4 	.word	0x000397e4
   321ec:	0001699d 	.word	0x0001699d
   321f0:	20004598 	.word	0x20004598
   321f4:	000397f0 	.word	0x000397f0
   321f8:	0003981c 	.word	0x0003981c
   321fc:	0003983c 	.word	0x0003983c
   32200:	00014d95 	.word	0x00014d95
   32204:	2000459c 	.word	0x2000459c
   32208:	0003984c 	.word	0x0003984c
   3220c:	00039884 	.word	0x00039884
   32210:	000398b0 	.word	0x000398b0

00032214 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32214:	b580      	push	{r7, lr}
   32216:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32218:	4b02      	ldr	r3, [pc, #8]	; (32224 <vApplicationMallocFailedHook+0x10>)
   3221a:	0018      	movs	r0, r3
   3221c:	4b02      	ldr	r3, [pc, #8]	; (32228 <vApplicationMallocFailedHook+0x14>)
   3221e:	4798      	blx	r3
    while (1)
   32220:	e7fe      	b.n	32220 <vApplicationMallocFailedHook+0xc>
   32222:	46c0      	nop			; (mov r8, r8)
   32224:	000398d4 	.word	0x000398d4
   32228:	0001d665 	.word	0x0001d665

0003222c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   3222c:	b580      	push	{r7, lr}
   3222e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   32230:	4b02      	ldr	r3, [pc, #8]	; (3223c <vApplicationStackOverflowHook+0x10>)
   32232:	0018      	movs	r0, r3
   32234:	4b02      	ldr	r3, [pc, #8]	; (32240 <vApplicationStackOverflowHook+0x14>)
   32236:	4798      	blx	r3
    while (1)
   32238:	e7fe      	b.n	32238 <vApplicationStackOverflowHook+0xc>
   3223a:	46c0      	nop			; (mov r8, r8)
   3223c:	00039900 	.word	0x00039900
   32240:	0001d665 	.word	0x0001d665

00032244 <__udivsi3>:
   32244:	2200      	movs	r2, #0
   32246:	0843      	lsrs	r3, r0, #1
   32248:	428b      	cmp	r3, r1
   3224a:	d374      	bcc.n	32336 <__udivsi3+0xf2>
   3224c:	0903      	lsrs	r3, r0, #4
   3224e:	428b      	cmp	r3, r1
   32250:	d35f      	bcc.n	32312 <__udivsi3+0xce>
   32252:	0a03      	lsrs	r3, r0, #8
   32254:	428b      	cmp	r3, r1
   32256:	d344      	bcc.n	322e2 <__udivsi3+0x9e>
   32258:	0b03      	lsrs	r3, r0, #12
   3225a:	428b      	cmp	r3, r1
   3225c:	d328      	bcc.n	322b0 <__udivsi3+0x6c>
   3225e:	0c03      	lsrs	r3, r0, #16
   32260:	428b      	cmp	r3, r1
   32262:	d30d      	bcc.n	32280 <__udivsi3+0x3c>
   32264:	22ff      	movs	r2, #255	; 0xff
   32266:	0209      	lsls	r1, r1, #8
   32268:	ba12      	rev	r2, r2
   3226a:	0c03      	lsrs	r3, r0, #16
   3226c:	428b      	cmp	r3, r1
   3226e:	d302      	bcc.n	32276 <__udivsi3+0x32>
   32270:	1212      	asrs	r2, r2, #8
   32272:	0209      	lsls	r1, r1, #8
   32274:	d065      	beq.n	32342 <__udivsi3+0xfe>
   32276:	0b03      	lsrs	r3, r0, #12
   32278:	428b      	cmp	r3, r1
   3227a:	d319      	bcc.n	322b0 <__udivsi3+0x6c>
   3227c:	e000      	b.n	32280 <__udivsi3+0x3c>
   3227e:	0a09      	lsrs	r1, r1, #8
   32280:	0bc3      	lsrs	r3, r0, #15
   32282:	428b      	cmp	r3, r1
   32284:	d301      	bcc.n	3228a <__udivsi3+0x46>
   32286:	03cb      	lsls	r3, r1, #15
   32288:	1ac0      	subs	r0, r0, r3
   3228a:	4152      	adcs	r2, r2
   3228c:	0b83      	lsrs	r3, r0, #14
   3228e:	428b      	cmp	r3, r1
   32290:	d301      	bcc.n	32296 <__udivsi3+0x52>
   32292:	038b      	lsls	r3, r1, #14
   32294:	1ac0      	subs	r0, r0, r3
   32296:	4152      	adcs	r2, r2
   32298:	0b43      	lsrs	r3, r0, #13
   3229a:	428b      	cmp	r3, r1
   3229c:	d301      	bcc.n	322a2 <__udivsi3+0x5e>
   3229e:	034b      	lsls	r3, r1, #13
   322a0:	1ac0      	subs	r0, r0, r3
   322a2:	4152      	adcs	r2, r2
   322a4:	0b03      	lsrs	r3, r0, #12
   322a6:	428b      	cmp	r3, r1
   322a8:	d301      	bcc.n	322ae <__udivsi3+0x6a>
   322aa:	030b      	lsls	r3, r1, #12
   322ac:	1ac0      	subs	r0, r0, r3
   322ae:	4152      	adcs	r2, r2
   322b0:	0ac3      	lsrs	r3, r0, #11
   322b2:	428b      	cmp	r3, r1
   322b4:	d301      	bcc.n	322ba <__udivsi3+0x76>
   322b6:	02cb      	lsls	r3, r1, #11
   322b8:	1ac0      	subs	r0, r0, r3
   322ba:	4152      	adcs	r2, r2
   322bc:	0a83      	lsrs	r3, r0, #10
   322be:	428b      	cmp	r3, r1
   322c0:	d301      	bcc.n	322c6 <__udivsi3+0x82>
   322c2:	028b      	lsls	r3, r1, #10
   322c4:	1ac0      	subs	r0, r0, r3
   322c6:	4152      	adcs	r2, r2
   322c8:	0a43      	lsrs	r3, r0, #9
   322ca:	428b      	cmp	r3, r1
   322cc:	d301      	bcc.n	322d2 <__udivsi3+0x8e>
   322ce:	024b      	lsls	r3, r1, #9
   322d0:	1ac0      	subs	r0, r0, r3
   322d2:	4152      	adcs	r2, r2
   322d4:	0a03      	lsrs	r3, r0, #8
   322d6:	428b      	cmp	r3, r1
   322d8:	d301      	bcc.n	322de <__udivsi3+0x9a>
   322da:	020b      	lsls	r3, r1, #8
   322dc:	1ac0      	subs	r0, r0, r3
   322de:	4152      	adcs	r2, r2
   322e0:	d2cd      	bcs.n	3227e <__udivsi3+0x3a>
   322e2:	09c3      	lsrs	r3, r0, #7
   322e4:	428b      	cmp	r3, r1
   322e6:	d301      	bcc.n	322ec <__udivsi3+0xa8>
   322e8:	01cb      	lsls	r3, r1, #7
   322ea:	1ac0      	subs	r0, r0, r3
   322ec:	4152      	adcs	r2, r2
   322ee:	0983      	lsrs	r3, r0, #6
   322f0:	428b      	cmp	r3, r1
   322f2:	d301      	bcc.n	322f8 <__udivsi3+0xb4>
   322f4:	018b      	lsls	r3, r1, #6
   322f6:	1ac0      	subs	r0, r0, r3
   322f8:	4152      	adcs	r2, r2
   322fa:	0943      	lsrs	r3, r0, #5
   322fc:	428b      	cmp	r3, r1
   322fe:	d301      	bcc.n	32304 <__udivsi3+0xc0>
   32300:	014b      	lsls	r3, r1, #5
   32302:	1ac0      	subs	r0, r0, r3
   32304:	4152      	adcs	r2, r2
   32306:	0903      	lsrs	r3, r0, #4
   32308:	428b      	cmp	r3, r1
   3230a:	d301      	bcc.n	32310 <__udivsi3+0xcc>
   3230c:	010b      	lsls	r3, r1, #4
   3230e:	1ac0      	subs	r0, r0, r3
   32310:	4152      	adcs	r2, r2
   32312:	08c3      	lsrs	r3, r0, #3
   32314:	428b      	cmp	r3, r1
   32316:	d301      	bcc.n	3231c <__udivsi3+0xd8>
   32318:	00cb      	lsls	r3, r1, #3
   3231a:	1ac0      	subs	r0, r0, r3
   3231c:	4152      	adcs	r2, r2
   3231e:	0883      	lsrs	r3, r0, #2
   32320:	428b      	cmp	r3, r1
   32322:	d301      	bcc.n	32328 <__udivsi3+0xe4>
   32324:	008b      	lsls	r3, r1, #2
   32326:	1ac0      	subs	r0, r0, r3
   32328:	4152      	adcs	r2, r2
   3232a:	0843      	lsrs	r3, r0, #1
   3232c:	428b      	cmp	r3, r1
   3232e:	d301      	bcc.n	32334 <__udivsi3+0xf0>
   32330:	004b      	lsls	r3, r1, #1
   32332:	1ac0      	subs	r0, r0, r3
   32334:	4152      	adcs	r2, r2
   32336:	1a41      	subs	r1, r0, r1
   32338:	d200      	bcs.n	3233c <__udivsi3+0xf8>
   3233a:	4601      	mov	r1, r0
   3233c:	4152      	adcs	r2, r2
   3233e:	4610      	mov	r0, r2
   32340:	4770      	bx	lr
   32342:	e7ff      	b.n	32344 <__udivsi3+0x100>
   32344:	b501      	push	{r0, lr}
   32346:	2000      	movs	r0, #0
   32348:	f000 f8f0 	bl	3252c <__aeabi_idiv0>
   3234c:	bd02      	pop	{r1, pc}
   3234e:	46c0      	nop			; (mov r8, r8)

00032350 <__aeabi_uidivmod>:
   32350:	2900      	cmp	r1, #0
   32352:	d0f7      	beq.n	32344 <__udivsi3+0x100>
   32354:	e776      	b.n	32244 <__udivsi3>
   32356:	4770      	bx	lr

00032358 <__divsi3>:
   32358:	4603      	mov	r3, r0
   3235a:	430b      	orrs	r3, r1
   3235c:	d47f      	bmi.n	3245e <__divsi3+0x106>
   3235e:	2200      	movs	r2, #0
   32360:	0843      	lsrs	r3, r0, #1
   32362:	428b      	cmp	r3, r1
   32364:	d374      	bcc.n	32450 <__divsi3+0xf8>
   32366:	0903      	lsrs	r3, r0, #4
   32368:	428b      	cmp	r3, r1
   3236a:	d35f      	bcc.n	3242c <__divsi3+0xd4>
   3236c:	0a03      	lsrs	r3, r0, #8
   3236e:	428b      	cmp	r3, r1
   32370:	d344      	bcc.n	323fc <__divsi3+0xa4>
   32372:	0b03      	lsrs	r3, r0, #12
   32374:	428b      	cmp	r3, r1
   32376:	d328      	bcc.n	323ca <__divsi3+0x72>
   32378:	0c03      	lsrs	r3, r0, #16
   3237a:	428b      	cmp	r3, r1
   3237c:	d30d      	bcc.n	3239a <__divsi3+0x42>
   3237e:	22ff      	movs	r2, #255	; 0xff
   32380:	0209      	lsls	r1, r1, #8
   32382:	ba12      	rev	r2, r2
   32384:	0c03      	lsrs	r3, r0, #16
   32386:	428b      	cmp	r3, r1
   32388:	d302      	bcc.n	32390 <__divsi3+0x38>
   3238a:	1212      	asrs	r2, r2, #8
   3238c:	0209      	lsls	r1, r1, #8
   3238e:	d065      	beq.n	3245c <__divsi3+0x104>
   32390:	0b03      	lsrs	r3, r0, #12
   32392:	428b      	cmp	r3, r1
   32394:	d319      	bcc.n	323ca <__divsi3+0x72>
   32396:	e000      	b.n	3239a <__divsi3+0x42>
   32398:	0a09      	lsrs	r1, r1, #8
   3239a:	0bc3      	lsrs	r3, r0, #15
   3239c:	428b      	cmp	r3, r1
   3239e:	d301      	bcc.n	323a4 <__divsi3+0x4c>
   323a0:	03cb      	lsls	r3, r1, #15
   323a2:	1ac0      	subs	r0, r0, r3
   323a4:	4152      	adcs	r2, r2
   323a6:	0b83      	lsrs	r3, r0, #14
   323a8:	428b      	cmp	r3, r1
   323aa:	d301      	bcc.n	323b0 <__divsi3+0x58>
   323ac:	038b      	lsls	r3, r1, #14
   323ae:	1ac0      	subs	r0, r0, r3
   323b0:	4152      	adcs	r2, r2
   323b2:	0b43      	lsrs	r3, r0, #13
   323b4:	428b      	cmp	r3, r1
   323b6:	d301      	bcc.n	323bc <__divsi3+0x64>
   323b8:	034b      	lsls	r3, r1, #13
   323ba:	1ac0      	subs	r0, r0, r3
   323bc:	4152      	adcs	r2, r2
   323be:	0b03      	lsrs	r3, r0, #12
   323c0:	428b      	cmp	r3, r1
   323c2:	d301      	bcc.n	323c8 <__divsi3+0x70>
   323c4:	030b      	lsls	r3, r1, #12
   323c6:	1ac0      	subs	r0, r0, r3
   323c8:	4152      	adcs	r2, r2
   323ca:	0ac3      	lsrs	r3, r0, #11
   323cc:	428b      	cmp	r3, r1
   323ce:	d301      	bcc.n	323d4 <__divsi3+0x7c>
   323d0:	02cb      	lsls	r3, r1, #11
   323d2:	1ac0      	subs	r0, r0, r3
   323d4:	4152      	adcs	r2, r2
   323d6:	0a83      	lsrs	r3, r0, #10
   323d8:	428b      	cmp	r3, r1
   323da:	d301      	bcc.n	323e0 <__divsi3+0x88>
   323dc:	028b      	lsls	r3, r1, #10
   323de:	1ac0      	subs	r0, r0, r3
   323e0:	4152      	adcs	r2, r2
   323e2:	0a43      	lsrs	r3, r0, #9
   323e4:	428b      	cmp	r3, r1
   323e6:	d301      	bcc.n	323ec <__divsi3+0x94>
   323e8:	024b      	lsls	r3, r1, #9
   323ea:	1ac0      	subs	r0, r0, r3
   323ec:	4152      	adcs	r2, r2
   323ee:	0a03      	lsrs	r3, r0, #8
   323f0:	428b      	cmp	r3, r1
   323f2:	d301      	bcc.n	323f8 <__divsi3+0xa0>
   323f4:	020b      	lsls	r3, r1, #8
   323f6:	1ac0      	subs	r0, r0, r3
   323f8:	4152      	adcs	r2, r2
   323fa:	d2cd      	bcs.n	32398 <__divsi3+0x40>
   323fc:	09c3      	lsrs	r3, r0, #7
   323fe:	428b      	cmp	r3, r1
   32400:	d301      	bcc.n	32406 <__divsi3+0xae>
   32402:	01cb      	lsls	r3, r1, #7
   32404:	1ac0      	subs	r0, r0, r3
   32406:	4152      	adcs	r2, r2
   32408:	0983      	lsrs	r3, r0, #6
   3240a:	428b      	cmp	r3, r1
   3240c:	d301      	bcc.n	32412 <__divsi3+0xba>
   3240e:	018b      	lsls	r3, r1, #6
   32410:	1ac0      	subs	r0, r0, r3
   32412:	4152      	adcs	r2, r2
   32414:	0943      	lsrs	r3, r0, #5
   32416:	428b      	cmp	r3, r1
   32418:	d301      	bcc.n	3241e <__divsi3+0xc6>
   3241a:	014b      	lsls	r3, r1, #5
   3241c:	1ac0      	subs	r0, r0, r3
   3241e:	4152      	adcs	r2, r2
   32420:	0903      	lsrs	r3, r0, #4
   32422:	428b      	cmp	r3, r1
   32424:	d301      	bcc.n	3242a <__divsi3+0xd2>
   32426:	010b      	lsls	r3, r1, #4
   32428:	1ac0      	subs	r0, r0, r3
   3242a:	4152      	adcs	r2, r2
   3242c:	08c3      	lsrs	r3, r0, #3
   3242e:	428b      	cmp	r3, r1
   32430:	d301      	bcc.n	32436 <__divsi3+0xde>
   32432:	00cb      	lsls	r3, r1, #3
   32434:	1ac0      	subs	r0, r0, r3
   32436:	4152      	adcs	r2, r2
   32438:	0883      	lsrs	r3, r0, #2
   3243a:	428b      	cmp	r3, r1
   3243c:	d301      	bcc.n	32442 <__divsi3+0xea>
   3243e:	008b      	lsls	r3, r1, #2
   32440:	1ac0      	subs	r0, r0, r3
   32442:	4152      	adcs	r2, r2
   32444:	0843      	lsrs	r3, r0, #1
   32446:	428b      	cmp	r3, r1
   32448:	d301      	bcc.n	3244e <__divsi3+0xf6>
   3244a:	004b      	lsls	r3, r1, #1
   3244c:	1ac0      	subs	r0, r0, r3
   3244e:	4152      	adcs	r2, r2
   32450:	1a41      	subs	r1, r0, r1
   32452:	d200      	bcs.n	32456 <__divsi3+0xfe>
   32454:	4601      	mov	r1, r0
   32456:	4152      	adcs	r2, r2
   32458:	4610      	mov	r0, r2
   3245a:	4770      	bx	lr
   3245c:	e05d      	b.n	3251a <__divsi3+0x1c2>
   3245e:	0fca      	lsrs	r2, r1, #31
   32460:	d000      	beq.n	32464 <__divsi3+0x10c>
   32462:	4249      	negs	r1, r1
   32464:	1003      	asrs	r3, r0, #32
   32466:	d300      	bcc.n	3246a <__divsi3+0x112>
   32468:	4240      	negs	r0, r0
   3246a:	4053      	eors	r3, r2
   3246c:	2200      	movs	r2, #0
   3246e:	469c      	mov	ip, r3
   32470:	0903      	lsrs	r3, r0, #4
   32472:	428b      	cmp	r3, r1
   32474:	d32d      	bcc.n	324d2 <__divsi3+0x17a>
   32476:	0a03      	lsrs	r3, r0, #8
   32478:	428b      	cmp	r3, r1
   3247a:	d312      	bcc.n	324a2 <__divsi3+0x14a>
   3247c:	22fc      	movs	r2, #252	; 0xfc
   3247e:	0189      	lsls	r1, r1, #6
   32480:	ba12      	rev	r2, r2
   32482:	0a03      	lsrs	r3, r0, #8
   32484:	428b      	cmp	r3, r1
   32486:	d30c      	bcc.n	324a2 <__divsi3+0x14a>
   32488:	0189      	lsls	r1, r1, #6
   3248a:	1192      	asrs	r2, r2, #6
   3248c:	428b      	cmp	r3, r1
   3248e:	d308      	bcc.n	324a2 <__divsi3+0x14a>
   32490:	0189      	lsls	r1, r1, #6
   32492:	1192      	asrs	r2, r2, #6
   32494:	428b      	cmp	r3, r1
   32496:	d304      	bcc.n	324a2 <__divsi3+0x14a>
   32498:	0189      	lsls	r1, r1, #6
   3249a:	d03a      	beq.n	32512 <__divsi3+0x1ba>
   3249c:	1192      	asrs	r2, r2, #6
   3249e:	e000      	b.n	324a2 <__divsi3+0x14a>
   324a0:	0989      	lsrs	r1, r1, #6
   324a2:	09c3      	lsrs	r3, r0, #7
   324a4:	428b      	cmp	r3, r1
   324a6:	d301      	bcc.n	324ac <__divsi3+0x154>
   324a8:	01cb      	lsls	r3, r1, #7
   324aa:	1ac0      	subs	r0, r0, r3
   324ac:	4152      	adcs	r2, r2
   324ae:	0983      	lsrs	r3, r0, #6
   324b0:	428b      	cmp	r3, r1
   324b2:	d301      	bcc.n	324b8 <__divsi3+0x160>
   324b4:	018b      	lsls	r3, r1, #6
   324b6:	1ac0      	subs	r0, r0, r3
   324b8:	4152      	adcs	r2, r2
   324ba:	0943      	lsrs	r3, r0, #5
   324bc:	428b      	cmp	r3, r1
   324be:	d301      	bcc.n	324c4 <__divsi3+0x16c>
   324c0:	014b      	lsls	r3, r1, #5
   324c2:	1ac0      	subs	r0, r0, r3
   324c4:	4152      	adcs	r2, r2
   324c6:	0903      	lsrs	r3, r0, #4
   324c8:	428b      	cmp	r3, r1
   324ca:	d301      	bcc.n	324d0 <__divsi3+0x178>
   324cc:	010b      	lsls	r3, r1, #4
   324ce:	1ac0      	subs	r0, r0, r3
   324d0:	4152      	adcs	r2, r2
   324d2:	08c3      	lsrs	r3, r0, #3
   324d4:	428b      	cmp	r3, r1
   324d6:	d301      	bcc.n	324dc <__divsi3+0x184>
   324d8:	00cb      	lsls	r3, r1, #3
   324da:	1ac0      	subs	r0, r0, r3
   324dc:	4152      	adcs	r2, r2
   324de:	0883      	lsrs	r3, r0, #2
   324e0:	428b      	cmp	r3, r1
   324e2:	d301      	bcc.n	324e8 <__divsi3+0x190>
   324e4:	008b      	lsls	r3, r1, #2
   324e6:	1ac0      	subs	r0, r0, r3
   324e8:	4152      	adcs	r2, r2
   324ea:	d2d9      	bcs.n	324a0 <__divsi3+0x148>
   324ec:	0843      	lsrs	r3, r0, #1
   324ee:	428b      	cmp	r3, r1
   324f0:	d301      	bcc.n	324f6 <__divsi3+0x19e>
   324f2:	004b      	lsls	r3, r1, #1
   324f4:	1ac0      	subs	r0, r0, r3
   324f6:	4152      	adcs	r2, r2
   324f8:	1a41      	subs	r1, r0, r1
   324fa:	d200      	bcs.n	324fe <__divsi3+0x1a6>
   324fc:	4601      	mov	r1, r0
   324fe:	4663      	mov	r3, ip
   32500:	4152      	adcs	r2, r2
   32502:	105b      	asrs	r3, r3, #1
   32504:	4610      	mov	r0, r2
   32506:	d301      	bcc.n	3250c <__divsi3+0x1b4>
   32508:	4240      	negs	r0, r0
   3250a:	2b00      	cmp	r3, #0
   3250c:	d500      	bpl.n	32510 <__divsi3+0x1b8>
   3250e:	4249      	negs	r1, r1
   32510:	4770      	bx	lr
   32512:	4663      	mov	r3, ip
   32514:	105b      	asrs	r3, r3, #1
   32516:	d300      	bcc.n	3251a <__divsi3+0x1c2>
   32518:	4240      	negs	r0, r0
   3251a:	b501      	push	{r0, lr}
   3251c:	2000      	movs	r0, #0
   3251e:	f000 f805 	bl	3252c <__aeabi_idiv0>
   32522:	bd02      	pop	{r1, pc}

00032524 <__aeabi_idivmod>:
   32524:	2900      	cmp	r1, #0
   32526:	d0f8      	beq.n	3251a <__divsi3+0x1c2>
   32528:	e716      	b.n	32358 <__divsi3>
   3252a:	4770      	bx	lr

0003252c <__aeabi_idiv0>:
   3252c:	4770      	bx	lr
   3252e:	46c0      	nop			; (mov r8, r8)

00032530 <__aeabi_lmul>:
   32530:	b5f0      	push	{r4, r5, r6, r7, lr}
   32532:	46ce      	mov	lr, r9
   32534:	4647      	mov	r7, r8
   32536:	0415      	lsls	r5, r2, #16
   32538:	0c2d      	lsrs	r5, r5, #16
   3253a:	002e      	movs	r6, r5
   3253c:	b580      	push	{r7, lr}
   3253e:	0407      	lsls	r7, r0, #16
   32540:	0c14      	lsrs	r4, r2, #16
   32542:	0c3f      	lsrs	r7, r7, #16
   32544:	4699      	mov	r9, r3
   32546:	0c03      	lsrs	r3, r0, #16
   32548:	437e      	muls	r6, r7
   3254a:	435d      	muls	r5, r3
   3254c:	4367      	muls	r7, r4
   3254e:	4363      	muls	r3, r4
   32550:	197f      	adds	r7, r7, r5
   32552:	0c34      	lsrs	r4, r6, #16
   32554:	19e4      	adds	r4, r4, r7
   32556:	469c      	mov	ip, r3
   32558:	42a5      	cmp	r5, r4
   3255a:	d903      	bls.n	32564 <__aeabi_lmul+0x34>
   3255c:	2380      	movs	r3, #128	; 0x80
   3255e:	025b      	lsls	r3, r3, #9
   32560:	4698      	mov	r8, r3
   32562:	44c4      	add	ip, r8
   32564:	464b      	mov	r3, r9
   32566:	4351      	muls	r1, r2
   32568:	4343      	muls	r3, r0
   3256a:	0436      	lsls	r6, r6, #16
   3256c:	0c36      	lsrs	r6, r6, #16
   3256e:	0c25      	lsrs	r5, r4, #16
   32570:	0424      	lsls	r4, r4, #16
   32572:	4465      	add	r5, ip
   32574:	19a4      	adds	r4, r4, r6
   32576:	1859      	adds	r1, r3, r1
   32578:	1949      	adds	r1, r1, r5
   3257a:	0020      	movs	r0, r4
   3257c:	bc0c      	pop	{r2, r3}
   3257e:	4690      	mov	r8, r2
   32580:	4699      	mov	r9, r3
   32582:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032584 <__aeabi_fmul>:
   32584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32586:	4657      	mov	r7, sl
   32588:	464e      	mov	r6, r9
   3258a:	4645      	mov	r5, r8
   3258c:	46de      	mov	lr, fp
   3258e:	b5e0      	push	{r5, r6, r7, lr}
   32590:	0247      	lsls	r7, r0, #9
   32592:	0046      	lsls	r6, r0, #1
   32594:	4688      	mov	r8, r1
   32596:	0a7f      	lsrs	r7, r7, #9
   32598:	0e36      	lsrs	r6, r6, #24
   3259a:	0fc4      	lsrs	r4, r0, #31
   3259c:	2e00      	cmp	r6, #0
   3259e:	d047      	beq.n	32630 <__aeabi_fmul+0xac>
   325a0:	2eff      	cmp	r6, #255	; 0xff
   325a2:	d024      	beq.n	325ee <__aeabi_fmul+0x6a>
   325a4:	00fb      	lsls	r3, r7, #3
   325a6:	2780      	movs	r7, #128	; 0x80
   325a8:	04ff      	lsls	r7, r7, #19
   325aa:	431f      	orrs	r7, r3
   325ac:	2300      	movs	r3, #0
   325ae:	4699      	mov	r9, r3
   325b0:	469a      	mov	sl, r3
   325b2:	3e7f      	subs	r6, #127	; 0x7f
   325b4:	4643      	mov	r3, r8
   325b6:	025d      	lsls	r5, r3, #9
   325b8:	0058      	lsls	r0, r3, #1
   325ba:	0fdb      	lsrs	r3, r3, #31
   325bc:	0a6d      	lsrs	r5, r5, #9
   325be:	0e00      	lsrs	r0, r0, #24
   325c0:	4698      	mov	r8, r3
   325c2:	d043      	beq.n	3264c <__aeabi_fmul+0xc8>
   325c4:	28ff      	cmp	r0, #255	; 0xff
   325c6:	d03b      	beq.n	32640 <__aeabi_fmul+0xbc>
   325c8:	00eb      	lsls	r3, r5, #3
   325ca:	2580      	movs	r5, #128	; 0x80
   325cc:	2200      	movs	r2, #0
   325ce:	04ed      	lsls	r5, r5, #19
   325d0:	431d      	orrs	r5, r3
   325d2:	387f      	subs	r0, #127	; 0x7f
   325d4:	1836      	adds	r6, r6, r0
   325d6:	1c73      	adds	r3, r6, #1
   325d8:	4641      	mov	r1, r8
   325da:	469b      	mov	fp, r3
   325dc:	464b      	mov	r3, r9
   325de:	4061      	eors	r1, r4
   325e0:	4313      	orrs	r3, r2
   325e2:	2b0f      	cmp	r3, #15
   325e4:	d864      	bhi.n	326b0 <__aeabi_fmul+0x12c>
   325e6:	4875      	ldr	r0, [pc, #468]	; (327bc <__aeabi_fmul+0x238>)
   325e8:	009b      	lsls	r3, r3, #2
   325ea:	58c3      	ldr	r3, [r0, r3]
   325ec:	469f      	mov	pc, r3
   325ee:	2f00      	cmp	r7, #0
   325f0:	d142      	bne.n	32678 <__aeabi_fmul+0xf4>
   325f2:	2308      	movs	r3, #8
   325f4:	4699      	mov	r9, r3
   325f6:	3b06      	subs	r3, #6
   325f8:	26ff      	movs	r6, #255	; 0xff
   325fa:	469a      	mov	sl, r3
   325fc:	e7da      	b.n	325b4 <__aeabi_fmul+0x30>
   325fe:	4641      	mov	r1, r8
   32600:	2a02      	cmp	r2, #2
   32602:	d028      	beq.n	32656 <__aeabi_fmul+0xd2>
   32604:	2a03      	cmp	r2, #3
   32606:	d100      	bne.n	3260a <__aeabi_fmul+0x86>
   32608:	e0ce      	b.n	327a8 <__aeabi_fmul+0x224>
   3260a:	2a01      	cmp	r2, #1
   3260c:	d000      	beq.n	32610 <__aeabi_fmul+0x8c>
   3260e:	e0ac      	b.n	3276a <__aeabi_fmul+0x1e6>
   32610:	4011      	ands	r1, r2
   32612:	2000      	movs	r0, #0
   32614:	2200      	movs	r2, #0
   32616:	b2cc      	uxtb	r4, r1
   32618:	0240      	lsls	r0, r0, #9
   3261a:	05d2      	lsls	r2, r2, #23
   3261c:	0a40      	lsrs	r0, r0, #9
   3261e:	07e4      	lsls	r4, r4, #31
   32620:	4310      	orrs	r0, r2
   32622:	4320      	orrs	r0, r4
   32624:	bc3c      	pop	{r2, r3, r4, r5}
   32626:	4690      	mov	r8, r2
   32628:	4699      	mov	r9, r3
   3262a:	46a2      	mov	sl, r4
   3262c:	46ab      	mov	fp, r5
   3262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32630:	2f00      	cmp	r7, #0
   32632:	d115      	bne.n	32660 <__aeabi_fmul+0xdc>
   32634:	2304      	movs	r3, #4
   32636:	4699      	mov	r9, r3
   32638:	3b03      	subs	r3, #3
   3263a:	2600      	movs	r6, #0
   3263c:	469a      	mov	sl, r3
   3263e:	e7b9      	b.n	325b4 <__aeabi_fmul+0x30>
   32640:	20ff      	movs	r0, #255	; 0xff
   32642:	2202      	movs	r2, #2
   32644:	2d00      	cmp	r5, #0
   32646:	d0c5      	beq.n	325d4 <__aeabi_fmul+0x50>
   32648:	2203      	movs	r2, #3
   3264a:	e7c3      	b.n	325d4 <__aeabi_fmul+0x50>
   3264c:	2d00      	cmp	r5, #0
   3264e:	d119      	bne.n	32684 <__aeabi_fmul+0x100>
   32650:	2000      	movs	r0, #0
   32652:	2201      	movs	r2, #1
   32654:	e7be      	b.n	325d4 <__aeabi_fmul+0x50>
   32656:	2401      	movs	r4, #1
   32658:	22ff      	movs	r2, #255	; 0xff
   3265a:	400c      	ands	r4, r1
   3265c:	2000      	movs	r0, #0
   3265e:	e7db      	b.n	32618 <__aeabi_fmul+0x94>
   32660:	0038      	movs	r0, r7
   32662:	f001 fde1 	bl	34228 <__clzsi2>
   32666:	2676      	movs	r6, #118	; 0x76
   32668:	1f43      	subs	r3, r0, #5
   3266a:	409f      	lsls	r7, r3
   3266c:	2300      	movs	r3, #0
   3266e:	4276      	negs	r6, r6
   32670:	1a36      	subs	r6, r6, r0
   32672:	4699      	mov	r9, r3
   32674:	469a      	mov	sl, r3
   32676:	e79d      	b.n	325b4 <__aeabi_fmul+0x30>
   32678:	230c      	movs	r3, #12
   3267a:	4699      	mov	r9, r3
   3267c:	3b09      	subs	r3, #9
   3267e:	26ff      	movs	r6, #255	; 0xff
   32680:	469a      	mov	sl, r3
   32682:	e797      	b.n	325b4 <__aeabi_fmul+0x30>
   32684:	0028      	movs	r0, r5
   32686:	f001 fdcf 	bl	34228 <__clzsi2>
   3268a:	1f43      	subs	r3, r0, #5
   3268c:	409d      	lsls	r5, r3
   3268e:	2376      	movs	r3, #118	; 0x76
   32690:	425b      	negs	r3, r3
   32692:	1a18      	subs	r0, r3, r0
   32694:	2200      	movs	r2, #0
   32696:	e79d      	b.n	325d4 <__aeabi_fmul+0x50>
   32698:	2080      	movs	r0, #128	; 0x80
   3269a:	2400      	movs	r4, #0
   3269c:	03c0      	lsls	r0, r0, #15
   3269e:	22ff      	movs	r2, #255	; 0xff
   326a0:	e7ba      	b.n	32618 <__aeabi_fmul+0x94>
   326a2:	003d      	movs	r5, r7
   326a4:	4652      	mov	r2, sl
   326a6:	e7ab      	b.n	32600 <__aeabi_fmul+0x7c>
   326a8:	003d      	movs	r5, r7
   326aa:	0021      	movs	r1, r4
   326ac:	4652      	mov	r2, sl
   326ae:	e7a7      	b.n	32600 <__aeabi_fmul+0x7c>
   326b0:	0c3b      	lsrs	r3, r7, #16
   326b2:	469c      	mov	ip, r3
   326b4:	042a      	lsls	r2, r5, #16
   326b6:	0c12      	lsrs	r2, r2, #16
   326b8:	0c2b      	lsrs	r3, r5, #16
   326ba:	0014      	movs	r4, r2
   326bc:	4660      	mov	r0, ip
   326be:	4665      	mov	r5, ip
   326c0:	043f      	lsls	r7, r7, #16
   326c2:	0c3f      	lsrs	r7, r7, #16
   326c4:	437c      	muls	r4, r7
   326c6:	4342      	muls	r2, r0
   326c8:	435d      	muls	r5, r3
   326ca:	437b      	muls	r3, r7
   326cc:	0c27      	lsrs	r7, r4, #16
   326ce:	189b      	adds	r3, r3, r2
   326d0:	18ff      	adds	r7, r7, r3
   326d2:	42ba      	cmp	r2, r7
   326d4:	d903      	bls.n	326de <__aeabi_fmul+0x15a>
   326d6:	2380      	movs	r3, #128	; 0x80
   326d8:	025b      	lsls	r3, r3, #9
   326da:	469c      	mov	ip, r3
   326dc:	4465      	add	r5, ip
   326de:	0424      	lsls	r4, r4, #16
   326e0:	043a      	lsls	r2, r7, #16
   326e2:	0c24      	lsrs	r4, r4, #16
   326e4:	1912      	adds	r2, r2, r4
   326e6:	0193      	lsls	r3, r2, #6
   326e8:	1e5c      	subs	r4, r3, #1
   326ea:	41a3      	sbcs	r3, r4
   326ec:	0c3f      	lsrs	r7, r7, #16
   326ee:	0e92      	lsrs	r2, r2, #26
   326f0:	197d      	adds	r5, r7, r5
   326f2:	431a      	orrs	r2, r3
   326f4:	01ad      	lsls	r5, r5, #6
   326f6:	4315      	orrs	r5, r2
   326f8:	012b      	lsls	r3, r5, #4
   326fa:	d504      	bpl.n	32706 <__aeabi_fmul+0x182>
   326fc:	2301      	movs	r3, #1
   326fe:	465e      	mov	r6, fp
   32700:	086a      	lsrs	r2, r5, #1
   32702:	401d      	ands	r5, r3
   32704:	4315      	orrs	r5, r2
   32706:	0032      	movs	r2, r6
   32708:	327f      	adds	r2, #127	; 0x7f
   3270a:	2a00      	cmp	r2, #0
   3270c:	dd25      	ble.n	3275a <__aeabi_fmul+0x1d6>
   3270e:	076b      	lsls	r3, r5, #29
   32710:	d004      	beq.n	3271c <__aeabi_fmul+0x198>
   32712:	230f      	movs	r3, #15
   32714:	402b      	ands	r3, r5
   32716:	2b04      	cmp	r3, #4
   32718:	d000      	beq.n	3271c <__aeabi_fmul+0x198>
   3271a:	3504      	adds	r5, #4
   3271c:	012b      	lsls	r3, r5, #4
   3271e:	d503      	bpl.n	32728 <__aeabi_fmul+0x1a4>
   32720:	0032      	movs	r2, r6
   32722:	4b27      	ldr	r3, [pc, #156]	; (327c0 <__aeabi_fmul+0x23c>)
   32724:	3280      	adds	r2, #128	; 0x80
   32726:	401d      	ands	r5, r3
   32728:	2afe      	cmp	r2, #254	; 0xfe
   3272a:	dc94      	bgt.n	32656 <__aeabi_fmul+0xd2>
   3272c:	2401      	movs	r4, #1
   3272e:	01a8      	lsls	r0, r5, #6
   32730:	0a40      	lsrs	r0, r0, #9
   32732:	b2d2      	uxtb	r2, r2
   32734:	400c      	ands	r4, r1
   32736:	e76f      	b.n	32618 <__aeabi_fmul+0x94>
   32738:	2080      	movs	r0, #128	; 0x80
   3273a:	03c0      	lsls	r0, r0, #15
   3273c:	4207      	tst	r7, r0
   3273e:	d007      	beq.n	32750 <__aeabi_fmul+0x1cc>
   32740:	4205      	tst	r5, r0
   32742:	d105      	bne.n	32750 <__aeabi_fmul+0x1cc>
   32744:	4328      	orrs	r0, r5
   32746:	0240      	lsls	r0, r0, #9
   32748:	0a40      	lsrs	r0, r0, #9
   3274a:	4644      	mov	r4, r8
   3274c:	22ff      	movs	r2, #255	; 0xff
   3274e:	e763      	b.n	32618 <__aeabi_fmul+0x94>
   32750:	4338      	orrs	r0, r7
   32752:	0240      	lsls	r0, r0, #9
   32754:	0a40      	lsrs	r0, r0, #9
   32756:	22ff      	movs	r2, #255	; 0xff
   32758:	e75e      	b.n	32618 <__aeabi_fmul+0x94>
   3275a:	2401      	movs	r4, #1
   3275c:	1aa3      	subs	r3, r4, r2
   3275e:	2b1b      	cmp	r3, #27
   32760:	dd05      	ble.n	3276e <__aeabi_fmul+0x1ea>
   32762:	400c      	ands	r4, r1
   32764:	2200      	movs	r2, #0
   32766:	2000      	movs	r0, #0
   32768:	e756      	b.n	32618 <__aeabi_fmul+0x94>
   3276a:	465e      	mov	r6, fp
   3276c:	e7cb      	b.n	32706 <__aeabi_fmul+0x182>
   3276e:	002a      	movs	r2, r5
   32770:	2020      	movs	r0, #32
   32772:	40da      	lsrs	r2, r3
   32774:	1ac3      	subs	r3, r0, r3
   32776:	409d      	lsls	r5, r3
   32778:	002b      	movs	r3, r5
   3277a:	1e5d      	subs	r5, r3, #1
   3277c:	41ab      	sbcs	r3, r5
   3277e:	4313      	orrs	r3, r2
   32780:	075a      	lsls	r2, r3, #29
   32782:	d004      	beq.n	3278e <__aeabi_fmul+0x20a>
   32784:	220f      	movs	r2, #15
   32786:	401a      	ands	r2, r3
   32788:	2a04      	cmp	r2, #4
   3278a:	d000      	beq.n	3278e <__aeabi_fmul+0x20a>
   3278c:	3304      	adds	r3, #4
   3278e:	015a      	lsls	r2, r3, #5
   32790:	d504      	bpl.n	3279c <__aeabi_fmul+0x218>
   32792:	2401      	movs	r4, #1
   32794:	2201      	movs	r2, #1
   32796:	400c      	ands	r4, r1
   32798:	2000      	movs	r0, #0
   3279a:	e73d      	b.n	32618 <__aeabi_fmul+0x94>
   3279c:	2401      	movs	r4, #1
   3279e:	019b      	lsls	r3, r3, #6
   327a0:	0a58      	lsrs	r0, r3, #9
   327a2:	400c      	ands	r4, r1
   327a4:	2200      	movs	r2, #0
   327a6:	e737      	b.n	32618 <__aeabi_fmul+0x94>
   327a8:	2080      	movs	r0, #128	; 0x80
   327aa:	2401      	movs	r4, #1
   327ac:	03c0      	lsls	r0, r0, #15
   327ae:	4328      	orrs	r0, r5
   327b0:	0240      	lsls	r0, r0, #9
   327b2:	0a40      	lsrs	r0, r0, #9
   327b4:	400c      	ands	r4, r1
   327b6:	22ff      	movs	r2, #255	; 0xff
   327b8:	e72e      	b.n	32618 <__aeabi_fmul+0x94>
   327ba:	46c0      	nop			; (mov r8, r8)
   327bc:	00039928 	.word	0x00039928
   327c0:	f7ffffff 	.word	0xf7ffffff

000327c4 <__aeabi_f2iz>:
   327c4:	0241      	lsls	r1, r0, #9
   327c6:	0043      	lsls	r3, r0, #1
   327c8:	0fc2      	lsrs	r2, r0, #31
   327ca:	0a49      	lsrs	r1, r1, #9
   327cc:	0e1b      	lsrs	r3, r3, #24
   327ce:	2000      	movs	r0, #0
   327d0:	2b7e      	cmp	r3, #126	; 0x7e
   327d2:	dd0d      	ble.n	327f0 <__aeabi_f2iz+0x2c>
   327d4:	2b9d      	cmp	r3, #157	; 0x9d
   327d6:	dc0c      	bgt.n	327f2 <__aeabi_f2iz+0x2e>
   327d8:	2080      	movs	r0, #128	; 0x80
   327da:	0400      	lsls	r0, r0, #16
   327dc:	4301      	orrs	r1, r0
   327de:	2b95      	cmp	r3, #149	; 0x95
   327e0:	dc0a      	bgt.n	327f8 <__aeabi_f2iz+0x34>
   327e2:	2096      	movs	r0, #150	; 0x96
   327e4:	1ac3      	subs	r3, r0, r3
   327e6:	40d9      	lsrs	r1, r3
   327e8:	4248      	negs	r0, r1
   327ea:	2a00      	cmp	r2, #0
   327ec:	d100      	bne.n	327f0 <__aeabi_f2iz+0x2c>
   327ee:	0008      	movs	r0, r1
   327f0:	4770      	bx	lr
   327f2:	4b03      	ldr	r3, [pc, #12]	; (32800 <__aeabi_f2iz+0x3c>)
   327f4:	18d0      	adds	r0, r2, r3
   327f6:	e7fb      	b.n	327f0 <__aeabi_f2iz+0x2c>
   327f8:	3b96      	subs	r3, #150	; 0x96
   327fa:	4099      	lsls	r1, r3
   327fc:	e7f4      	b.n	327e8 <__aeabi_f2iz+0x24>
   327fe:	46c0      	nop			; (mov r8, r8)
   32800:	7fffffff 	.word	0x7fffffff

00032804 <__aeabi_dadd>:
   32804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32806:	4645      	mov	r5, r8
   32808:	46de      	mov	lr, fp
   3280a:	4657      	mov	r7, sl
   3280c:	464e      	mov	r6, r9
   3280e:	030c      	lsls	r4, r1, #12
   32810:	b5e0      	push	{r5, r6, r7, lr}
   32812:	004e      	lsls	r6, r1, #1
   32814:	0fc9      	lsrs	r1, r1, #31
   32816:	4688      	mov	r8, r1
   32818:	000d      	movs	r5, r1
   3281a:	0a61      	lsrs	r1, r4, #9
   3281c:	0f44      	lsrs	r4, r0, #29
   3281e:	430c      	orrs	r4, r1
   32820:	00c7      	lsls	r7, r0, #3
   32822:	0319      	lsls	r1, r3, #12
   32824:	0058      	lsls	r0, r3, #1
   32826:	0fdb      	lsrs	r3, r3, #31
   32828:	469b      	mov	fp, r3
   3282a:	0a4b      	lsrs	r3, r1, #9
   3282c:	0f51      	lsrs	r1, r2, #29
   3282e:	430b      	orrs	r3, r1
   32830:	0d76      	lsrs	r6, r6, #21
   32832:	0d40      	lsrs	r0, r0, #21
   32834:	0019      	movs	r1, r3
   32836:	00d2      	lsls	r2, r2, #3
   32838:	45d8      	cmp	r8, fp
   3283a:	d100      	bne.n	3283e <__aeabi_dadd+0x3a>
   3283c:	e0ae      	b.n	3299c <__aeabi_dadd+0x198>
   3283e:	1a35      	subs	r5, r6, r0
   32840:	2d00      	cmp	r5, #0
   32842:	dc00      	bgt.n	32846 <__aeabi_dadd+0x42>
   32844:	e0f6      	b.n	32a34 <__aeabi_dadd+0x230>
   32846:	2800      	cmp	r0, #0
   32848:	d10f      	bne.n	3286a <__aeabi_dadd+0x66>
   3284a:	4313      	orrs	r3, r2
   3284c:	d100      	bne.n	32850 <__aeabi_dadd+0x4c>
   3284e:	e0db      	b.n	32a08 <__aeabi_dadd+0x204>
   32850:	1e6b      	subs	r3, r5, #1
   32852:	2b00      	cmp	r3, #0
   32854:	d000      	beq.n	32858 <__aeabi_dadd+0x54>
   32856:	e137      	b.n	32ac8 <__aeabi_dadd+0x2c4>
   32858:	1aba      	subs	r2, r7, r2
   3285a:	4297      	cmp	r7, r2
   3285c:	41bf      	sbcs	r7, r7
   3285e:	1a64      	subs	r4, r4, r1
   32860:	427f      	negs	r7, r7
   32862:	1be4      	subs	r4, r4, r7
   32864:	2601      	movs	r6, #1
   32866:	0017      	movs	r7, r2
   32868:	e024      	b.n	328b4 <__aeabi_dadd+0xb0>
   3286a:	4bc6      	ldr	r3, [pc, #792]	; (32b84 <__aeabi_dadd+0x380>)
   3286c:	429e      	cmp	r6, r3
   3286e:	d04d      	beq.n	3290c <__aeabi_dadd+0x108>
   32870:	2380      	movs	r3, #128	; 0x80
   32872:	041b      	lsls	r3, r3, #16
   32874:	4319      	orrs	r1, r3
   32876:	2d38      	cmp	r5, #56	; 0x38
   32878:	dd00      	ble.n	3287c <__aeabi_dadd+0x78>
   3287a:	e107      	b.n	32a8c <__aeabi_dadd+0x288>
   3287c:	2d1f      	cmp	r5, #31
   3287e:	dd00      	ble.n	32882 <__aeabi_dadd+0x7e>
   32880:	e138      	b.n	32af4 <__aeabi_dadd+0x2f0>
   32882:	2020      	movs	r0, #32
   32884:	1b43      	subs	r3, r0, r5
   32886:	469a      	mov	sl, r3
   32888:	000b      	movs	r3, r1
   3288a:	4650      	mov	r0, sl
   3288c:	4083      	lsls	r3, r0
   3288e:	4699      	mov	r9, r3
   32890:	0013      	movs	r3, r2
   32892:	4648      	mov	r0, r9
   32894:	40eb      	lsrs	r3, r5
   32896:	4318      	orrs	r0, r3
   32898:	0003      	movs	r3, r0
   3289a:	4650      	mov	r0, sl
   3289c:	4082      	lsls	r2, r0
   3289e:	1e50      	subs	r0, r2, #1
   328a0:	4182      	sbcs	r2, r0
   328a2:	40e9      	lsrs	r1, r5
   328a4:	431a      	orrs	r2, r3
   328a6:	1aba      	subs	r2, r7, r2
   328a8:	1a61      	subs	r1, r4, r1
   328aa:	4297      	cmp	r7, r2
   328ac:	41a4      	sbcs	r4, r4
   328ae:	0017      	movs	r7, r2
   328b0:	4264      	negs	r4, r4
   328b2:	1b0c      	subs	r4, r1, r4
   328b4:	0223      	lsls	r3, r4, #8
   328b6:	d562      	bpl.n	3297e <__aeabi_dadd+0x17a>
   328b8:	0264      	lsls	r4, r4, #9
   328ba:	0a65      	lsrs	r5, r4, #9
   328bc:	2d00      	cmp	r5, #0
   328be:	d100      	bne.n	328c2 <__aeabi_dadd+0xbe>
   328c0:	e0df      	b.n	32a82 <__aeabi_dadd+0x27e>
   328c2:	0028      	movs	r0, r5
   328c4:	f001 fcb0 	bl	34228 <__clzsi2>
   328c8:	0003      	movs	r3, r0
   328ca:	3b08      	subs	r3, #8
   328cc:	2b1f      	cmp	r3, #31
   328ce:	dd00      	ble.n	328d2 <__aeabi_dadd+0xce>
   328d0:	e0d2      	b.n	32a78 <__aeabi_dadd+0x274>
   328d2:	2220      	movs	r2, #32
   328d4:	003c      	movs	r4, r7
   328d6:	1ad2      	subs	r2, r2, r3
   328d8:	409d      	lsls	r5, r3
   328da:	40d4      	lsrs	r4, r2
   328dc:	409f      	lsls	r7, r3
   328de:	4325      	orrs	r5, r4
   328e0:	429e      	cmp	r6, r3
   328e2:	dd00      	ble.n	328e6 <__aeabi_dadd+0xe2>
   328e4:	e0c4      	b.n	32a70 <__aeabi_dadd+0x26c>
   328e6:	1b9e      	subs	r6, r3, r6
   328e8:	1c73      	adds	r3, r6, #1
   328ea:	2b1f      	cmp	r3, #31
   328ec:	dd00      	ble.n	328f0 <__aeabi_dadd+0xec>
   328ee:	e0f1      	b.n	32ad4 <__aeabi_dadd+0x2d0>
   328f0:	2220      	movs	r2, #32
   328f2:	0038      	movs	r0, r7
   328f4:	0029      	movs	r1, r5
   328f6:	1ad2      	subs	r2, r2, r3
   328f8:	40d8      	lsrs	r0, r3
   328fa:	4091      	lsls	r1, r2
   328fc:	4097      	lsls	r7, r2
   328fe:	002c      	movs	r4, r5
   32900:	4301      	orrs	r1, r0
   32902:	1e78      	subs	r0, r7, #1
   32904:	4187      	sbcs	r7, r0
   32906:	40dc      	lsrs	r4, r3
   32908:	2600      	movs	r6, #0
   3290a:	430f      	orrs	r7, r1
   3290c:	077b      	lsls	r3, r7, #29
   3290e:	d009      	beq.n	32924 <__aeabi_dadd+0x120>
   32910:	230f      	movs	r3, #15
   32912:	403b      	ands	r3, r7
   32914:	2b04      	cmp	r3, #4
   32916:	d005      	beq.n	32924 <__aeabi_dadd+0x120>
   32918:	1d3b      	adds	r3, r7, #4
   3291a:	42bb      	cmp	r3, r7
   3291c:	41bf      	sbcs	r7, r7
   3291e:	427f      	negs	r7, r7
   32920:	19e4      	adds	r4, r4, r7
   32922:	001f      	movs	r7, r3
   32924:	0223      	lsls	r3, r4, #8
   32926:	d52c      	bpl.n	32982 <__aeabi_dadd+0x17e>
   32928:	4b96      	ldr	r3, [pc, #600]	; (32b84 <__aeabi_dadd+0x380>)
   3292a:	3601      	adds	r6, #1
   3292c:	429e      	cmp	r6, r3
   3292e:	d100      	bne.n	32932 <__aeabi_dadd+0x12e>
   32930:	e09a      	b.n	32a68 <__aeabi_dadd+0x264>
   32932:	4645      	mov	r5, r8
   32934:	4b94      	ldr	r3, [pc, #592]	; (32b88 <__aeabi_dadd+0x384>)
   32936:	08ff      	lsrs	r7, r7, #3
   32938:	401c      	ands	r4, r3
   3293a:	0760      	lsls	r0, r4, #29
   3293c:	0576      	lsls	r6, r6, #21
   3293e:	0264      	lsls	r4, r4, #9
   32940:	4307      	orrs	r7, r0
   32942:	0b24      	lsrs	r4, r4, #12
   32944:	0d76      	lsrs	r6, r6, #21
   32946:	2100      	movs	r1, #0
   32948:	0324      	lsls	r4, r4, #12
   3294a:	0b23      	lsrs	r3, r4, #12
   3294c:	0d0c      	lsrs	r4, r1, #20
   3294e:	4a8f      	ldr	r2, [pc, #572]	; (32b8c <__aeabi_dadd+0x388>)
   32950:	0524      	lsls	r4, r4, #20
   32952:	431c      	orrs	r4, r3
   32954:	4014      	ands	r4, r2
   32956:	0533      	lsls	r3, r6, #20
   32958:	4323      	orrs	r3, r4
   3295a:	005b      	lsls	r3, r3, #1
   3295c:	07ed      	lsls	r5, r5, #31
   3295e:	085b      	lsrs	r3, r3, #1
   32960:	432b      	orrs	r3, r5
   32962:	0038      	movs	r0, r7
   32964:	0019      	movs	r1, r3
   32966:	bc3c      	pop	{r2, r3, r4, r5}
   32968:	4690      	mov	r8, r2
   3296a:	4699      	mov	r9, r3
   3296c:	46a2      	mov	sl, r4
   3296e:	46ab      	mov	fp, r5
   32970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32972:	4664      	mov	r4, ip
   32974:	4304      	orrs	r4, r0
   32976:	d100      	bne.n	3297a <__aeabi_dadd+0x176>
   32978:	e211      	b.n	32d9e <__aeabi_dadd+0x59a>
   3297a:	0004      	movs	r4, r0
   3297c:	4667      	mov	r7, ip
   3297e:	077b      	lsls	r3, r7, #29
   32980:	d1c6      	bne.n	32910 <__aeabi_dadd+0x10c>
   32982:	4645      	mov	r5, r8
   32984:	0760      	lsls	r0, r4, #29
   32986:	08ff      	lsrs	r7, r7, #3
   32988:	4307      	orrs	r7, r0
   3298a:	08e4      	lsrs	r4, r4, #3
   3298c:	4b7d      	ldr	r3, [pc, #500]	; (32b84 <__aeabi_dadd+0x380>)
   3298e:	429e      	cmp	r6, r3
   32990:	d030      	beq.n	329f4 <__aeabi_dadd+0x1f0>
   32992:	0324      	lsls	r4, r4, #12
   32994:	0576      	lsls	r6, r6, #21
   32996:	0b24      	lsrs	r4, r4, #12
   32998:	0d76      	lsrs	r6, r6, #21
   3299a:	e7d4      	b.n	32946 <__aeabi_dadd+0x142>
   3299c:	1a33      	subs	r3, r6, r0
   3299e:	469a      	mov	sl, r3
   329a0:	2b00      	cmp	r3, #0
   329a2:	dd78      	ble.n	32a96 <__aeabi_dadd+0x292>
   329a4:	2800      	cmp	r0, #0
   329a6:	d031      	beq.n	32a0c <__aeabi_dadd+0x208>
   329a8:	4876      	ldr	r0, [pc, #472]	; (32b84 <__aeabi_dadd+0x380>)
   329aa:	4286      	cmp	r6, r0
   329ac:	d0ae      	beq.n	3290c <__aeabi_dadd+0x108>
   329ae:	2080      	movs	r0, #128	; 0x80
   329b0:	0400      	lsls	r0, r0, #16
   329b2:	4301      	orrs	r1, r0
   329b4:	4653      	mov	r3, sl
   329b6:	2b38      	cmp	r3, #56	; 0x38
   329b8:	dc00      	bgt.n	329bc <__aeabi_dadd+0x1b8>
   329ba:	e0e9      	b.n	32b90 <__aeabi_dadd+0x38c>
   329bc:	430a      	orrs	r2, r1
   329be:	1e51      	subs	r1, r2, #1
   329c0:	418a      	sbcs	r2, r1
   329c2:	2100      	movs	r1, #0
   329c4:	19d2      	adds	r2, r2, r7
   329c6:	42ba      	cmp	r2, r7
   329c8:	41bf      	sbcs	r7, r7
   329ca:	1909      	adds	r1, r1, r4
   329cc:	427c      	negs	r4, r7
   329ce:	0017      	movs	r7, r2
   329d0:	190c      	adds	r4, r1, r4
   329d2:	0223      	lsls	r3, r4, #8
   329d4:	d5d3      	bpl.n	3297e <__aeabi_dadd+0x17a>
   329d6:	4b6b      	ldr	r3, [pc, #428]	; (32b84 <__aeabi_dadd+0x380>)
   329d8:	3601      	adds	r6, #1
   329da:	429e      	cmp	r6, r3
   329dc:	d100      	bne.n	329e0 <__aeabi_dadd+0x1dc>
   329de:	e13a      	b.n	32c56 <__aeabi_dadd+0x452>
   329e0:	2001      	movs	r0, #1
   329e2:	4b69      	ldr	r3, [pc, #420]	; (32b88 <__aeabi_dadd+0x384>)
   329e4:	401c      	ands	r4, r3
   329e6:	087b      	lsrs	r3, r7, #1
   329e8:	4007      	ands	r7, r0
   329ea:	431f      	orrs	r7, r3
   329ec:	07e0      	lsls	r0, r4, #31
   329ee:	4307      	orrs	r7, r0
   329f0:	0864      	lsrs	r4, r4, #1
   329f2:	e78b      	b.n	3290c <__aeabi_dadd+0x108>
   329f4:	0023      	movs	r3, r4
   329f6:	433b      	orrs	r3, r7
   329f8:	d100      	bne.n	329fc <__aeabi_dadd+0x1f8>
   329fa:	e1cb      	b.n	32d94 <__aeabi_dadd+0x590>
   329fc:	2280      	movs	r2, #128	; 0x80
   329fe:	0312      	lsls	r2, r2, #12
   32a00:	4314      	orrs	r4, r2
   32a02:	0324      	lsls	r4, r4, #12
   32a04:	0b24      	lsrs	r4, r4, #12
   32a06:	e79e      	b.n	32946 <__aeabi_dadd+0x142>
   32a08:	002e      	movs	r6, r5
   32a0a:	e77f      	b.n	3290c <__aeabi_dadd+0x108>
   32a0c:	0008      	movs	r0, r1
   32a0e:	4310      	orrs	r0, r2
   32a10:	d100      	bne.n	32a14 <__aeabi_dadd+0x210>
   32a12:	e0b4      	b.n	32b7e <__aeabi_dadd+0x37a>
   32a14:	1e58      	subs	r0, r3, #1
   32a16:	2800      	cmp	r0, #0
   32a18:	d000      	beq.n	32a1c <__aeabi_dadd+0x218>
   32a1a:	e0de      	b.n	32bda <__aeabi_dadd+0x3d6>
   32a1c:	18ba      	adds	r2, r7, r2
   32a1e:	42ba      	cmp	r2, r7
   32a20:	419b      	sbcs	r3, r3
   32a22:	1864      	adds	r4, r4, r1
   32a24:	425b      	negs	r3, r3
   32a26:	18e4      	adds	r4, r4, r3
   32a28:	0017      	movs	r7, r2
   32a2a:	2601      	movs	r6, #1
   32a2c:	0223      	lsls	r3, r4, #8
   32a2e:	d5a6      	bpl.n	3297e <__aeabi_dadd+0x17a>
   32a30:	2602      	movs	r6, #2
   32a32:	e7d5      	b.n	329e0 <__aeabi_dadd+0x1dc>
   32a34:	2d00      	cmp	r5, #0
   32a36:	d16e      	bne.n	32b16 <__aeabi_dadd+0x312>
   32a38:	1c70      	adds	r0, r6, #1
   32a3a:	0540      	lsls	r0, r0, #21
   32a3c:	0d40      	lsrs	r0, r0, #21
   32a3e:	2801      	cmp	r0, #1
   32a40:	dc00      	bgt.n	32a44 <__aeabi_dadd+0x240>
   32a42:	e0f9      	b.n	32c38 <__aeabi_dadd+0x434>
   32a44:	1ab8      	subs	r0, r7, r2
   32a46:	4684      	mov	ip, r0
   32a48:	4287      	cmp	r7, r0
   32a4a:	4180      	sbcs	r0, r0
   32a4c:	1ae5      	subs	r5, r4, r3
   32a4e:	4240      	negs	r0, r0
   32a50:	1a2d      	subs	r5, r5, r0
   32a52:	0228      	lsls	r0, r5, #8
   32a54:	d400      	bmi.n	32a58 <__aeabi_dadd+0x254>
   32a56:	e089      	b.n	32b6c <__aeabi_dadd+0x368>
   32a58:	1bd7      	subs	r7, r2, r7
   32a5a:	42ba      	cmp	r2, r7
   32a5c:	4192      	sbcs	r2, r2
   32a5e:	1b1c      	subs	r4, r3, r4
   32a60:	4252      	negs	r2, r2
   32a62:	1aa5      	subs	r5, r4, r2
   32a64:	46d8      	mov	r8, fp
   32a66:	e729      	b.n	328bc <__aeabi_dadd+0xb8>
   32a68:	4645      	mov	r5, r8
   32a6a:	2400      	movs	r4, #0
   32a6c:	2700      	movs	r7, #0
   32a6e:	e76a      	b.n	32946 <__aeabi_dadd+0x142>
   32a70:	4c45      	ldr	r4, [pc, #276]	; (32b88 <__aeabi_dadd+0x384>)
   32a72:	1af6      	subs	r6, r6, r3
   32a74:	402c      	ands	r4, r5
   32a76:	e749      	b.n	3290c <__aeabi_dadd+0x108>
   32a78:	003d      	movs	r5, r7
   32a7a:	3828      	subs	r0, #40	; 0x28
   32a7c:	4085      	lsls	r5, r0
   32a7e:	2700      	movs	r7, #0
   32a80:	e72e      	b.n	328e0 <__aeabi_dadd+0xdc>
   32a82:	0038      	movs	r0, r7
   32a84:	f001 fbd0 	bl	34228 <__clzsi2>
   32a88:	3020      	adds	r0, #32
   32a8a:	e71d      	b.n	328c8 <__aeabi_dadd+0xc4>
   32a8c:	430a      	orrs	r2, r1
   32a8e:	1e51      	subs	r1, r2, #1
   32a90:	418a      	sbcs	r2, r1
   32a92:	2100      	movs	r1, #0
   32a94:	e707      	b.n	328a6 <__aeabi_dadd+0xa2>
   32a96:	2b00      	cmp	r3, #0
   32a98:	d000      	beq.n	32a9c <__aeabi_dadd+0x298>
   32a9a:	e0f3      	b.n	32c84 <__aeabi_dadd+0x480>
   32a9c:	1c70      	adds	r0, r6, #1
   32a9e:	0543      	lsls	r3, r0, #21
   32aa0:	0d5b      	lsrs	r3, r3, #21
   32aa2:	2b01      	cmp	r3, #1
   32aa4:	dc00      	bgt.n	32aa8 <__aeabi_dadd+0x2a4>
   32aa6:	e0ad      	b.n	32c04 <__aeabi_dadd+0x400>
   32aa8:	4b36      	ldr	r3, [pc, #216]	; (32b84 <__aeabi_dadd+0x380>)
   32aaa:	4298      	cmp	r0, r3
   32aac:	d100      	bne.n	32ab0 <__aeabi_dadd+0x2ac>
   32aae:	e0d1      	b.n	32c54 <__aeabi_dadd+0x450>
   32ab0:	18ba      	adds	r2, r7, r2
   32ab2:	42ba      	cmp	r2, r7
   32ab4:	41bf      	sbcs	r7, r7
   32ab6:	1864      	adds	r4, r4, r1
   32ab8:	427f      	negs	r7, r7
   32aba:	19e4      	adds	r4, r4, r7
   32abc:	07e7      	lsls	r7, r4, #31
   32abe:	0852      	lsrs	r2, r2, #1
   32ac0:	4317      	orrs	r7, r2
   32ac2:	0864      	lsrs	r4, r4, #1
   32ac4:	0006      	movs	r6, r0
   32ac6:	e721      	b.n	3290c <__aeabi_dadd+0x108>
   32ac8:	482e      	ldr	r0, [pc, #184]	; (32b84 <__aeabi_dadd+0x380>)
   32aca:	4285      	cmp	r5, r0
   32acc:	d100      	bne.n	32ad0 <__aeabi_dadd+0x2cc>
   32ace:	e093      	b.n	32bf8 <__aeabi_dadd+0x3f4>
   32ad0:	001d      	movs	r5, r3
   32ad2:	e6d0      	b.n	32876 <__aeabi_dadd+0x72>
   32ad4:	0029      	movs	r1, r5
   32ad6:	3e1f      	subs	r6, #31
   32ad8:	40f1      	lsrs	r1, r6
   32ada:	2b20      	cmp	r3, #32
   32adc:	d100      	bne.n	32ae0 <__aeabi_dadd+0x2dc>
   32ade:	e08d      	b.n	32bfc <__aeabi_dadd+0x3f8>
   32ae0:	2240      	movs	r2, #64	; 0x40
   32ae2:	1ad3      	subs	r3, r2, r3
   32ae4:	409d      	lsls	r5, r3
   32ae6:	432f      	orrs	r7, r5
   32ae8:	1e7d      	subs	r5, r7, #1
   32aea:	41af      	sbcs	r7, r5
   32aec:	2400      	movs	r4, #0
   32aee:	430f      	orrs	r7, r1
   32af0:	2600      	movs	r6, #0
   32af2:	e744      	b.n	3297e <__aeabi_dadd+0x17a>
   32af4:	002b      	movs	r3, r5
   32af6:	0008      	movs	r0, r1
   32af8:	3b20      	subs	r3, #32
   32afa:	40d8      	lsrs	r0, r3
   32afc:	0003      	movs	r3, r0
   32afe:	2d20      	cmp	r5, #32
   32b00:	d100      	bne.n	32b04 <__aeabi_dadd+0x300>
   32b02:	e07d      	b.n	32c00 <__aeabi_dadd+0x3fc>
   32b04:	2040      	movs	r0, #64	; 0x40
   32b06:	1b45      	subs	r5, r0, r5
   32b08:	40a9      	lsls	r1, r5
   32b0a:	430a      	orrs	r2, r1
   32b0c:	1e51      	subs	r1, r2, #1
   32b0e:	418a      	sbcs	r2, r1
   32b10:	2100      	movs	r1, #0
   32b12:	431a      	orrs	r2, r3
   32b14:	e6c7      	b.n	328a6 <__aeabi_dadd+0xa2>
   32b16:	2e00      	cmp	r6, #0
   32b18:	d050      	beq.n	32bbc <__aeabi_dadd+0x3b8>
   32b1a:	4e1a      	ldr	r6, [pc, #104]	; (32b84 <__aeabi_dadd+0x380>)
   32b1c:	42b0      	cmp	r0, r6
   32b1e:	d057      	beq.n	32bd0 <__aeabi_dadd+0x3cc>
   32b20:	2680      	movs	r6, #128	; 0x80
   32b22:	426b      	negs	r3, r5
   32b24:	4699      	mov	r9, r3
   32b26:	0436      	lsls	r6, r6, #16
   32b28:	4334      	orrs	r4, r6
   32b2a:	464b      	mov	r3, r9
   32b2c:	2b38      	cmp	r3, #56	; 0x38
   32b2e:	dd00      	ble.n	32b32 <__aeabi_dadd+0x32e>
   32b30:	e0d6      	b.n	32ce0 <__aeabi_dadd+0x4dc>
   32b32:	2b1f      	cmp	r3, #31
   32b34:	dd00      	ble.n	32b38 <__aeabi_dadd+0x334>
   32b36:	e135      	b.n	32da4 <__aeabi_dadd+0x5a0>
   32b38:	2620      	movs	r6, #32
   32b3a:	1af5      	subs	r5, r6, r3
   32b3c:	0026      	movs	r6, r4
   32b3e:	40ae      	lsls	r6, r5
   32b40:	46b2      	mov	sl, r6
   32b42:	003e      	movs	r6, r7
   32b44:	40de      	lsrs	r6, r3
   32b46:	46ac      	mov	ip, r5
   32b48:	0035      	movs	r5, r6
   32b4a:	4656      	mov	r6, sl
   32b4c:	432e      	orrs	r6, r5
   32b4e:	4665      	mov	r5, ip
   32b50:	40af      	lsls	r7, r5
   32b52:	1e7d      	subs	r5, r7, #1
   32b54:	41af      	sbcs	r7, r5
   32b56:	40dc      	lsrs	r4, r3
   32b58:	4337      	orrs	r7, r6
   32b5a:	1bd7      	subs	r7, r2, r7
   32b5c:	42ba      	cmp	r2, r7
   32b5e:	4192      	sbcs	r2, r2
   32b60:	1b0c      	subs	r4, r1, r4
   32b62:	4252      	negs	r2, r2
   32b64:	1aa4      	subs	r4, r4, r2
   32b66:	0006      	movs	r6, r0
   32b68:	46d8      	mov	r8, fp
   32b6a:	e6a3      	b.n	328b4 <__aeabi_dadd+0xb0>
   32b6c:	4664      	mov	r4, ip
   32b6e:	4667      	mov	r7, ip
   32b70:	432c      	orrs	r4, r5
   32b72:	d000      	beq.n	32b76 <__aeabi_dadd+0x372>
   32b74:	e6a2      	b.n	328bc <__aeabi_dadd+0xb8>
   32b76:	2500      	movs	r5, #0
   32b78:	2600      	movs	r6, #0
   32b7a:	2700      	movs	r7, #0
   32b7c:	e706      	b.n	3298c <__aeabi_dadd+0x188>
   32b7e:	001e      	movs	r6, r3
   32b80:	e6c4      	b.n	3290c <__aeabi_dadd+0x108>
   32b82:	46c0      	nop			; (mov r8, r8)
   32b84:	000007ff 	.word	0x000007ff
   32b88:	ff7fffff 	.word	0xff7fffff
   32b8c:	800fffff 	.word	0x800fffff
   32b90:	2b1f      	cmp	r3, #31
   32b92:	dc63      	bgt.n	32c5c <__aeabi_dadd+0x458>
   32b94:	2020      	movs	r0, #32
   32b96:	1ac3      	subs	r3, r0, r3
   32b98:	0008      	movs	r0, r1
   32b9a:	4098      	lsls	r0, r3
   32b9c:	469c      	mov	ip, r3
   32b9e:	4683      	mov	fp, r0
   32ba0:	4653      	mov	r3, sl
   32ba2:	0010      	movs	r0, r2
   32ba4:	40d8      	lsrs	r0, r3
   32ba6:	0003      	movs	r3, r0
   32ba8:	4658      	mov	r0, fp
   32baa:	4318      	orrs	r0, r3
   32bac:	4663      	mov	r3, ip
   32bae:	409a      	lsls	r2, r3
   32bb0:	1e53      	subs	r3, r2, #1
   32bb2:	419a      	sbcs	r2, r3
   32bb4:	4653      	mov	r3, sl
   32bb6:	4302      	orrs	r2, r0
   32bb8:	40d9      	lsrs	r1, r3
   32bba:	e703      	b.n	329c4 <__aeabi_dadd+0x1c0>
   32bbc:	0026      	movs	r6, r4
   32bbe:	433e      	orrs	r6, r7
   32bc0:	d006      	beq.n	32bd0 <__aeabi_dadd+0x3cc>
   32bc2:	43eb      	mvns	r3, r5
   32bc4:	4699      	mov	r9, r3
   32bc6:	2b00      	cmp	r3, #0
   32bc8:	d0c7      	beq.n	32b5a <__aeabi_dadd+0x356>
   32bca:	4e94      	ldr	r6, [pc, #592]	; (32e1c <__aeabi_dadd+0x618>)
   32bcc:	42b0      	cmp	r0, r6
   32bce:	d1ac      	bne.n	32b2a <__aeabi_dadd+0x326>
   32bd0:	000c      	movs	r4, r1
   32bd2:	0017      	movs	r7, r2
   32bd4:	0006      	movs	r6, r0
   32bd6:	46d8      	mov	r8, fp
   32bd8:	e698      	b.n	3290c <__aeabi_dadd+0x108>
   32bda:	4b90      	ldr	r3, [pc, #576]	; (32e1c <__aeabi_dadd+0x618>)
   32bdc:	459a      	cmp	sl, r3
   32bde:	d00b      	beq.n	32bf8 <__aeabi_dadd+0x3f4>
   32be0:	4682      	mov	sl, r0
   32be2:	e6e7      	b.n	329b4 <__aeabi_dadd+0x1b0>
   32be4:	2800      	cmp	r0, #0
   32be6:	d000      	beq.n	32bea <__aeabi_dadd+0x3e6>
   32be8:	e09e      	b.n	32d28 <__aeabi_dadd+0x524>
   32bea:	0018      	movs	r0, r3
   32bec:	4310      	orrs	r0, r2
   32bee:	d100      	bne.n	32bf2 <__aeabi_dadd+0x3ee>
   32bf0:	e0e9      	b.n	32dc6 <__aeabi_dadd+0x5c2>
   32bf2:	001c      	movs	r4, r3
   32bf4:	0017      	movs	r7, r2
   32bf6:	46d8      	mov	r8, fp
   32bf8:	4e88      	ldr	r6, [pc, #544]	; (32e1c <__aeabi_dadd+0x618>)
   32bfa:	e687      	b.n	3290c <__aeabi_dadd+0x108>
   32bfc:	2500      	movs	r5, #0
   32bfe:	e772      	b.n	32ae6 <__aeabi_dadd+0x2e2>
   32c00:	2100      	movs	r1, #0
   32c02:	e782      	b.n	32b0a <__aeabi_dadd+0x306>
   32c04:	0023      	movs	r3, r4
   32c06:	433b      	orrs	r3, r7
   32c08:	2e00      	cmp	r6, #0
   32c0a:	d000      	beq.n	32c0e <__aeabi_dadd+0x40a>
   32c0c:	e0ab      	b.n	32d66 <__aeabi_dadd+0x562>
   32c0e:	2b00      	cmp	r3, #0
   32c10:	d100      	bne.n	32c14 <__aeabi_dadd+0x410>
   32c12:	e0e7      	b.n	32de4 <__aeabi_dadd+0x5e0>
   32c14:	000b      	movs	r3, r1
   32c16:	4313      	orrs	r3, r2
   32c18:	d100      	bne.n	32c1c <__aeabi_dadd+0x418>
   32c1a:	e677      	b.n	3290c <__aeabi_dadd+0x108>
   32c1c:	18ba      	adds	r2, r7, r2
   32c1e:	42ba      	cmp	r2, r7
   32c20:	41bf      	sbcs	r7, r7
   32c22:	1864      	adds	r4, r4, r1
   32c24:	427f      	negs	r7, r7
   32c26:	19e4      	adds	r4, r4, r7
   32c28:	0223      	lsls	r3, r4, #8
   32c2a:	d400      	bmi.n	32c2e <__aeabi_dadd+0x42a>
   32c2c:	e0f2      	b.n	32e14 <__aeabi_dadd+0x610>
   32c2e:	4b7c      	ldr	r3, [pc, #496]	; (32e20 <__aeabi_dadd+0x61c>)
   32c30:	0017      	movs	r7, r2
   32c32:	401c      	ands	r4, r3
   32c34:	0006      	movs	r6, r0
   32c36:	e669      	b.n	3290c <__aeabi_dadd+0x108>
   32c38:	0020      	movs	r0, r4
   32c3a:	4338      	orrs	r0, r7
   32c3c:	2e00      	cmp	r6, #0
   32c3e:	d1d1      	bne.n	32be4 <__aeabi_dadd+0x3e0>
   32c40:	2800      	cmp	r0, #0
   32c42:	d15b      	bne.n	32cfc <__aeabi_dadd+0x4f8>
   32c44:	001c      	movs	r4, r3
   32c46:	4314      	orrs	r4, r2
   32c48:	d100      	bne.n	32c4c <__aeabi_dadd+0x448>
   32c4a:	e0a8      	b.n	32d9e <__aeabi_dadd+0x59a>
   32c4c:	001c      	movs	r4, r3
   32c4e:	0017      	movs	r7, r2
   32c50:	46d8      	mov	r8, fp
   32c52:	e65b      	b.n	3290c <__aeabi_dadd+0x108>
   32c54:	0006      	movs	r6, r0
   32c56:	2400      	movs	r4, #0
   32c58:	2700      	movs	r7, #0
   32c5a:	e697      	b.n	3298c <__aeabi_dadd+0x188>
   32c5c:	4650      	mov	r0, sl
   32c5e:	000b      	movs	r3, r1
   32c60:	3820      	subs	r0, #32
   32c62:	40c3      	lsrs	r3, r0
   32c64:	4699      	mov	r9, r3
   32c66:	4653      	mov	r3, sl
   32c68:	2b20      	cmp	r3, #32
   32c6a:	d100      	bne.n	32c6e <__aeabi_dadd+0x46a>
   32c6c:	e095      	b.n	32d9a <__aeabi_dadd+0x596>
   32c6e:	2340      	movs	r3, #64	; 0x40
   32c70:	4650      	mov	r0, sl
   32c72:	1a1b      	subs	r3, r3, r0
   32c74:	4099      	lsls	r1, r3
   32c76:	430a      	orrs	r2, r1
   32c78:	1e51      	subs	r1, r2, #1
   32c7a:	418a      	sbcs	r2, r1
   32c7c:	464b      	mov	r3, r9
   32c7e:	2100      	movs	r1, #0
   32c80:	431a      	orrs	r2, r3
   32c82:	e69f      	b.n	329c4 <__aeabi_dadd+0x1c0>
   32c84:	2e00      	cmp	r6, #0
   32c86:	d130      	bne.n	32cea <__aeabi_dadd+0x4e6>
   32c88:	0026      	movs	r6, r4
   32c8a:	433e      	orrs	r6, r7
   32c8c:	d067      	beq.n	32d5e <__aeabi_dadd+0x55a>
   32c8e:	43db      	mvns	r3, r3
   32c90:	469a      	mov	sl, r3
   32c92:	2b00      	cmp	r3, #0
   32c94:	d01c      	beq.n	32cd0 <__aeabi_dadd+0x4cc>
   32c96:	4e61      	ldr	r6, [pc, #388]	; (32e1c <__aeabi_dadd+0x618>)
   32c98:	42b0      	cmp	r0, r6
   32c9a:	d060      	beq.n	32d5e <__aeabi_dadd+0x55a>
   32c9c:	4653      	mov	r3, sl
   32c9e:	2b38      	cmp	r3, #56	; 0x38
   32ca0:	dd00      	ble.n	32ca4 <__aeabi_dadd+0x4a0>
   32ca2:	e096      	b.n	32dd2 <__aeabi_dadd+0x5ce>
   32ca4:	2b1f      	cmp	r3, #31
   32ca6:	dd00      	ble.n	32caa <__aeabi_dadd+0x4a6>
   32ca8:	e09f      	b.n	32dea <__aeabi_dadd+0x5e6>
   32caa:	2620      	movs	r6, #32
   32cac:	1af3      	subs	r3, r6, r3
   32cae:	0026      	movs	r6, r4
   32cb0:	409e      	lsls	r6, r3
   32cb2:	469c      	mov	ip, r3
   32cb4:	46b3      	mov	fp, r6
   32cb6:	4653      	mov	r3, sl
   32cb8:	003e      	movs	r6, r7
   32cba:	40de      	lsrs	r6, r3
   32cbc:	0033      	movs	r3, r6
   32cbe:	465e      	mov	r6, fp
   32cc0:	431e      	orrs	r6, r3
   32cc2:	4663      	mov	r3, ip
   32cc4:	409f      	lsls	r7, r3
   32cc6:	1e7b      	subs	r3, r7, #1
   32cc8:	419f      	sbcs	r7, r3
   32cca:	4653      	mov	r3, sl
   32ccc:	40dc      	lsrs	r4, r3
   32cce:	4337      	orrs	r7, r6
   32cd0:	18bf      	adds	r7, r7, r2
   32cd2:	4297      	cmp	r7, r2
   32cd4:	4192      	sbcs	r2, r2
   32cd6:	1864      	adds	r4, r4, r1
   32cd8:	4252      	negs	r2, r2
   32cda:	18a4      	adds	r4, r4, r2
   32cdc:	0006      	movs	r6, r0
   32cde:	e678      	b.n	329d2 <__aeabi_dadd+0x1ce>
   32ce0:	4327      	orrs	r7, r4
   32ce2:	1e7c      	subs	r4, r7, #1
   32ce4:	41a7      	sbcs	r7, r4
   32ce6:	2400      	movs	r4, #0
   32ce8:	e737      	b.n	32b5a <__aeabi_dadd+0x356>
   32cea:	4e4c      	ldr	r6, [pc, #304]	; (32e1c <__aeabi_dadd+0x618>)
   32cec:	42b0      	cmp	r0, r6
   32cee:	d036      	beq.n	32d5e <__aeabi_dadd+0x55a>
   32cf0:	2680      	movs	r6, #128	; 0x80
   32cf2:	425b      	negs	r3, r3
   32cf4:	0436      	lsls	r6, r6, #16
   32cf6:	469a      	mov	sl, r3
   32cf8:	4334      	orrs	r4, r6
   32cfa:	e7cf      	b.n	32c9c <__aeabi_dadd+0x498>
   32cfc:	0018      	movs	r0, r3
   32cfe:	4310      	orrs	r0, r2
   32d00:	d100      	bne.n	32d04 <__aeabi_dadd+0x500>
   32d02:	e603      	b.n	3290c <__aeabi_dadd+0x108>
   32d04:	1ab8      	subs	r0, r7, r2
   32d06:	4684      	mov	ip, r0
   32d08:	4567      	cmp	r7, ip
   32d0a:	41ad      	sbcs	r5, r5
   32d0c:	1ae0      	subs	r0, r4, r3
   32d0e:	426d      	negs	r5, r5
   32d10:	1b40      	subs	r0, r0, r5
   32d12:	0205      	lsls	r5, r0, #8
   32d14:	d400      	bmi.n	32d18 <__aeabi_dadd+0x514>
   32d16:	e62c      	b.n	32972 <__aeabi_dadd+0x16e>
   32d18:	1bd7      	subs	r7, r2, r7
   32d1a:	42ba      	cmp	r2, r7
   32d1c:	4192      	sbcs	r2, r2
   32d1e:	1b1c      	subs	r4, r3, r4
   32d20:	4252      	negs	r2, r2
   32d22:	1aa4      	subs	r4, r4, r2
   32d24:	46d8      	mov	r8, fp
   32d26:	e5f1      	b.n	3290c <__aeabi_dadd+0x108>
   32d28:	0018      	movs	r0, r3
   32d2a:	4310      	orrs	r0, r2
   32d2c:	d100      	bne.n	32d30 <__aeabi_dadd+0x52c>
   32d2e:	e763      	b.n	32bf8 <__aeabi_dadd+0x3f4>
   32d30:	08f8      	lsrs	r0, r7, #3
   32d32:	0767      	lsls	r7, r4, #29
   32d34:	4307      	orrs	r7, r0
   32d36:	2080      	movs	r0, #128	; 0x80
   32d38:	08e4      	lsrs	r4, r4, #3
   32d3a:	0300      	lsls	r0, r0, #12
   32d3c:	4204      	tst	r4, r0
   32d3e:	d008      	beq.n	32d52 <__aeabi_dadd+0x54e>
   32d40:	08dd      	lsrs	r5, r3, #3
   32d42:	4205      	tst	r5, r0
   32d44:	d105      	bne.n	32d52 <__aeabi_dadd+0x54e>
   32d46:	08d2      	lsrs	r2, r2, #3
   32d48:	0759      	lsls	r1, r3, #29
   32d4a:	4311      	orrs	r1, r2
   32d4c:	000f      	movs	r7, r1
   32d4e:	002c      	movs	r4, r5
   32d50:	46d8      	mov	r8, fp
   32d52:	0f7b      	lsrs	r3, r7, #29
   32d54:	00e4      	lsls	r4, r4, #3
   32d56:	431c      	orrs	r4, r3
   32d58:	00ff      	lsls	r7, r7, #3
   32d5a:	4e30      	ldr	r6, [pc, #192]	; (32e1c <__aeabi_dadd+0x618>)
   32d5c:	e5d6      	b.n	3290c <__aeabi_dadd+0x108>
   32d5e:	000c      	movs	r4, r1
   32d60:	0017      	movs	r7, r2
   32d62:	0006      	movs	r6, r0
   32d64:	e5d2      	b.n	3290c <__aeabi_dadd+0x108>
   32d66:	2b00      	cmp	r3, #0
   32d68:	d038      	beq.n	32ddc <__aeabi_dadd+0x5d8>
   32d6a:	000b      	movs	r3, r1
   32d6c:	4313      	orrs	r3, r2
   32d6e:	d100      	bne.n	32d72 <__aeabi_dadd+0x56e>
   32d70:	e742      	b.n	32bf8 <__aeabi_dadd+0x3f4>
   32d72:	08f8      	lsrs	r0, r7, #3
   32d74:	0767      	lsls	r7, r4, #29
   32d76:	4307      	orrs	r7, r0
   32d78:	2080      	movs	r0, #128	; 0x80
   32d7a:	08e4      	lsrs	r4, r4, #3
   32d7c:	0300      	lsls	r0, r0, #12
   32d7e:	4204      	tst	r4, r0
   32d80:	d0e7      	beq.n	32d52 <__aeabi_dadd+0x54e>
   32d82:	08cb      	lsrs	r3, r1, #3
   32d84:	4203      	tst	r3, r0
   32d86:	d1e4      	bne.n	32d52 <__aeabi_dadd+0x54e>
   32d88:	08d2      	lsrs	r2, r2, #3
   32d8a:	0749      	lsls	r1, r1, #29
   32d8c:	4311      	orrs	r1, r2
   32d8e:	000f      	movs	r7, r1
   32d90:	001c      	movs	r4, r3
   32d92:	e7de      	b.n	32d52 <__aeabi_dadd+0x54e>
   32d94:	2700      	movs	r7, #0
   32d96:	2400      	movs	r4, #0
   32d98:	e5d5      	b.n	32946 <__aeabi_dadd+0x142>
   32d9a:	2100      	movs	r1, #0
   32d9c:	e76b      	b.n	32c76 <__aeabi_dadd+0x472>
   32d9e:	2500      	movs	r5, #0
   32da0:	2700      	movs	r7, #0
   32da2:	e5f3      	b.n	3298c <__aeabi_dadd+0x188>
   32da4:	464e      	mov	r6, r9
   32da6:	0025      	movs	r5, r4
   32da8:	3e20      	subs	r6, #32
   32daa:	40f5      	lsrs	r5, r6
   32dac:	464b      	mov	r3, r9
   32dae:	002e      	movs	r6, r5
   32db0:	2b20      	cmp	r3, #32
   32db2:	d02d      	beq.n	32e10 <__aeabi_dadd+0x60c>
   32db4:	2540      	movs	r5, #64	; 0x40
   32db6:	1aed      	subs	r5, r5, r3
   32db8:	40ac      	lsls	r4, r5
   32dba:	4327      	orrs	r7, r4
   32dbc:	1e7c      	subs	r4, r7, #1
   32dbe:	41a7      	sbcs	r7, r4
   32dc0:	2400      	movs	r4, #0
   32dc2:	4337      	orrs	r7, r6
   32dc4:	e6c9      	b.n	32b5a <__aeabi_dadd+0x356>
   32dc6:	2480      	movs	r4, #128	; 0x80
   32dc8:	2500      	movs	r5, #0
   32dca:	0324      	lsls	r4, r4, #12
   32dcc:	4e13      	ldr	r6, [pc, #76]	; (32e1c <__aeabi_dadd+0x618>)
   32dce:	2700      	movs	r7, #0
   32dd0:	e5dc      	b.n	3298c <__aeabi_dadd+0x188>
   32dd2:	4327      	orrs	r7, r4
   32dd4:	1e7c      	subs	r4, r7, #1
   32dd6:	41a7      	sbcs	r7, r4
   32dd8:	2400      	movs	r4, #0
   32dda:	e779      	b.n	32cd0 <__aeabi_dadd+0x4cc>
   32ddc:	000c      	movs	r4, r1
   32dde:	0017      	movs	r7, r2
   32de0:	4e0e      	ldr	r6, [pc, #56]	; (32e1c <__aeabi_dadd+0x618>)
   32de2:	e593      	b.n	3290c <__aeabi_dadd+0x108>
   32de4:	000c      	movs	r4, r1
   32de6:	0017      	movs	r7, r2
   32de8:	e590      	b.n	3290c <__aeabi_dadd+0x108>
   32dea:	4656      	mov	r6, sl
   32dec:	0023      	movs	r3, r4
   32dee:	3e20      	subs	r6, #32
   32df0:	40f3      	lsrs	r3, r6
   32df2:	4699      	mov	r9, r3
   32df4:	4653      	mov	r3, sl
   32df6:	2b20      	cmp	r3, #32
   32df8:	d00e      	beq.n	32e18 <__aeabi_dadd+0x614>
   32dfa:	2340      	movs	r3, #64	; 0x40
   32dfc:	4656      	mov	r6, sl
   32dfe:	1b9b      	subs	r3, r3, r6
   32e00:	409c      	lsls	r4, r3
   32e02:	4327      	orrs	r7, r4
   32e04:	1e7c      	subs	r4, r7, #1
   32e06:	41a7      	sbcs	r7, r4
   32e08:	464b      	mov	r3, r9
   32e0a:	2400      	movs	r4, #0
   32e0c:	431f      	orrs	r7, r3
   32e0e:	e75f      	b.n	32cd0 <__aeabi_dadd+0x4cc>
   32e10:	2400      	movs	r4, #0
   32e12:	e7d2      	b.n	32dba <__aeabi_dadd+0x5b6>
   32e14:	0017      	movs	r7, r2
   32e16:	e5b2      	b.n	3297e <__aeabi_dadd+0x17a>
   32e18:	2400      	movs	r4, #0
   32e1a:	e7f2      	b.n	32e02 <__aeabi_dadd+0x5fe>
   32e1c:	000007ff 	.word	0x000007ff
   32e20:	ff7fffff 	.word	0xff7fffff

00032e24 <__aeabi_ddiv>:
   32e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   32e26:	4657      	mov	r7, sl
   32e28:	4645      	mov	r5, r8
   32e2a:	46de      	mov	lr, fp
   32e2c:	464e      	mov	r6, r9
   32e2e:	b5e0      	push	{r5, r6, r7, lr}
   32e30:	004c      	lsls	r4, r1, #1
   32e32:	030e      	lsls	r6, r1, #12
   32e34:	b087      	sub	sp, #28
   32e36:	4683      	mov	fp, r0
   32e38:	4692      	mov	sl, r2
   32e3a:	001d      	movs	r5, r3
   32e3c:	4680      	mov	r8, r0
   32e3e:	0b36      	lsrs	r6, r6, #12
   32e40:	0d64      	lsrs	r4, r4, #21
   32e42:	0fcf      	lsrs	r7, r1, #31
   32e44:	2c00      	cmp	r4, #0
   32e46:	d04f      	beq.n	32ee8 <__aeabi_ddiv+0xc4>
   32e48:	4b6f      	ldr	r3, [pc, #444]	; (33008 <__aeabi_ddiv+0x1e4>)
   32e4a:	429c      	cmp	r4, r3
   32e4c:	d035      	beq.n	32eba <__aeabi_ddiv+0x96>
   32e4e:	2380      	movs	r3, #128	; 0x80
   32e50:	0f42      	lsrs	r2, r0, #29
   32e52:	041b      	lsls	r3, r3, #16
   32e54:	00f6      	lsls	r6, r6, #3
   32e56:	4313      	orrs	r3, r2
   32e58:	4333      	orrs	r3, r6
   32e5a:	4699      	mov	r9, r3
   32e5c:	00c3      	lsls	r3, r0, #3
   32e5e:	4698      	mov	r8, r3
   32e60:	4b6a      	ldr	r3, [pc, #424]	; (3300c <__aeabi_ddiv+0x1e8>)
   32e62:	2600      	movs	r6, #0
   32e64:	469c      	mov	ip, r3
   32e66:	2300      	movs	r3, #0
   32e68:	4464      	add	r4, ip
   32e6a:	9303      	str	r3, [sp, #12]
   32e6c:	032b      	lsls	r3, r5, #12
   32e6e:	0b1b      	lsrs	r3, r3, #12
   32e70:	469b      	mov	fp, r3
   32e72:	006b      	lsls	r3, r5, #1
   32e74:	0fed      	lsrs	r5, r5, #31
   32e76:	4650      	mov	r0, sl
   32e78:	0d5b      	lsrs	r3, r3, #21
   32e7a:	9501      	str	r5, [sp, #4]
   32e7c:	d05e      	beq.n	32f3c <__aeabi_ddiv+0x118>
   32e7e:	4a62      	ldr	r2, [pc, #392]	; (33008 <__aeabi_ddiv+0x1e4>)
   32e80:	4293      	cmp	r3, r2
   32e82:	d053      	beq.n	32f2c <__aeabi_ddiv+0x108>
   32e84:	465a      	mov	r2, fp
   32e86:	00d1      	lsls	r1, r2, #3
   32e88:	2280      	movs	r2, #128	; 0x80
   32e8a:	0f40      	lsrs	r0, r0, #29
   32e8c:	0412      	lsls	r2, r2, #16
   32e8e:	4302      	orrs	r2, r0
   32e90:	430a      	orrs	r2, r1
   32e92:	4693      	mov	fp, r2
   32e94:	4652      	mov	r2, sl
   32e96:	00d1      	lsls	r1, r2, #3
   32e98:	4a5c      	ldr	r2, [pc, #368]	; (3300c <__aeabi_ddiv+0x1e8>)
   32e9a:	4694      	mov	ip, r2
   32e9c:	2200      	movs	r2, #0
   32e9e:	4463      	add	r3, ip
   32ea0:	0038      	movs	r0, r7
   32ea2:	4068      	eors	r0, r5
   32ea4:	4684      	mov	ip, r0
   32ea6:	9002      	str	r0, [sp, #8]
   32ea8:	1ae4      	subs	r4, r4, r3
   32eaa:	4316      	orrs	r6, r2
   32eac:	2e0f      	cmp	r6, #15
   32eae:	d900      	bls.n	32eb2 <__aeabi_ddiv+0x8e>
   32eb0:	e0b4      	b.n	3301c <__aeabi_ddiv+0x1f8>
   32eb2:	4b57      	ldr	r3, [pc, #348]	; (33010 <__aeabi_ddiv+0x1ec>)
   32eb4:	00b6      	lsls	r6, r6, #2
   32eb6:	599b      	ldr	r3, [r3, r6]
   32eb8:	469f      	mov	pc, r3
   32eba:	0003      	movs	r3, r0
   32ebc:	4333      	orrs	r3, r6
   32ebe:	4699      	mov	r9, r3
   32ec0:	d16c      	bne.n	32f9c <__aeabi_ddiv+0x178>
   32ec2:	2300      	movs	r3, #0
   32ec4:	4698      	mov	r8, r3
   32ec6:	3302      	adds	r3, #2
   32ec8:	2608      	movs	r6, #8
   32eca:	9303      	str	r3, [sp, #12]
   32ecc:	e7ce      	b.n	32e6c <__aeabi_ddiv+0x48>
   32ece:	46cb      	mov	fp, r9
   32ed0:	4641      	mov	r1, r8
   32ed2:	9a03      	ldr	r2, [sp, #12]
   32ed4:	9701      	str	r7, [sp, #4]
   32ed6:	2a02      	cmp	r2, #2
   32ed8:	d165      	bne.n	32fa6 <__aeabi_ddiv+0x182>
   32eda:	9b01      	ldr	r3, [sp, #4]
   32edc:	4c4a      	ldr	r4, [pc, #296]	; (33008 <__aeabi_ddiv+0x1e4>)
   32ede:	469c      	mov	ip, r3
   32ee0:	2300      	movs	r3, #0
   32ee2:	2200      	movs	r2, #0
   32ee4:	4698      	mov	r8, r3
   32ee6:	e06b      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   32ee8:	0003      	movs	r3, r0
   32eea:	4333      	orrs	r3, r6
   32eec:	4699      	mov	r9, r3
   32eee:	d04e      	beq.n	32f8e <__aeabi_ddiv+0x16a>
   32ef0:	2e00      	cmp	r6, #0
   32ef2:	d100      	bne.n	32ef6 <__aeabi_ddiv+0xd2>
   32ef4:	e1bc      	b.n	33270 <__aeabi_ddiv+0x44c>
   32ef6:	0030      	movs	r0, r6
   32ef8:	f001 f996 	bl	34228 <__clzsi2>
   32efc:	0003      	movs	r3, r0
   32efe:	3b0b      	subs	r3, #11
   32f00:	2b1c      	cmp	r3, #28
   32f02:	dd00      	ble.n	32f06 <__aeabi_ddiv+0xe2>
   32f04:	e1ac      	b.n	33260 <__aeabi_ddiv+0x43c>
   32f06:	221d      	movs	r2, #29
   32f08:	1ad3      	subs	r3, r2, r3
   32f0a:	465a      	mov	r2, fp
   32f0c:	0001      	movs	r1, r0
   32f0e:	40da      	lsrs	r2, r3
   32f10:	3908      	subs	r1, #8
   32f12:	408e      	lsls	r6, r1
   32f14:	0013      	movs	r3, r2
   32f16:	4333      	orrs	r3, r6
   32f18:	4699      	mov	r9, r3
   32f1a:	465b      	mov	r3, fp
   32f1c:	408b      	lsls	r3, r1
   32f1e:	4698      	mov	r8, r3
   32f20:	2300      	movs	r3, #0
   32f22:	4c3c      	ldr	r4, [pc, #240]	; (33014 <__aeabi_ddiv+0x1f0>)
   32f24:	2600      	movs	r6, #0
   32f26:	1a24      	subs	r4, r4, r0
   32f28:	9303      	str	r3, [sp, #12]
   32f2a:	e79f      	b.n	32e6c <__aeabi_ddiv+0x48>
   32f2c:	4651      	mov	r1, sl
   32f2e:	465a      	mov	r2, fp
   32f30:	4311      	orrs	r1, r2
   32f32:	d129      	bne.n	32f88 <__aeabi_ddiv+0x164>
   32f34:	2200      	movs	r2, #0
   32f36:	4693      	mov	fp, r2
   32f38:	3202      	adds	r2, #2
   32f3a:	e7b1      	b.n	32ea0 <__aeabi_ddiv+0x7c>
   32f3c:	4659      	mov	r1, fp
   32f3e:	4301      	orrs	r1, r0
   32f40:	d01e      	beq.n	32f80 <__aeabi_ddiv+0x15c>
   32f42:	465b      	mov	r3, fp
   32f44:	2b00      	cmp	r3, #0
   32f46:	d100      	bne.n	32f4a <__aeabi_ddiv+0x126>
   32f48:	e19e      	b.n	33288 <__aeabi_ddiv+0x464>
   32f4a:	4658      	mov	r0, fp
   32f4c:	f001 f96c 	bl	34228 <__clzsi2>
   32f50:	0003      	movs	r3, r0
   32f52:	3b0b      	subs	r3, #11
   32f54:	2b1c      	cmp	r3, #28
   32f56:	dd00      	ble.n	32f5a <__aeabi_ddiv+0x136>
   32f58:	e18f      	b.n	3327a <__aeabi_ddiv+0x456>
   32f5a:	0002      	movs	r2, r0
   32f5c:	4659      	mov	r1, fp
   32f5e:	3a08      	subs	r2, #8
   32f60:	4091      	lsls	r1, r2
   32f62:	468b      	mov	fp, r1
   32f64:	211d      	movs	r1, #29
   32f66:	1acb      	subs	r3, r1, r3
   32f68:	4651      	mov	r1, sl
   32f6a:	40d9      	lsrs	r1, r3
   32f6c:	000b      	movs	r3, r1
   32f6e:	4659      	mov	r1, fp
   32f70:	430b      	orrs	r3, r1
   32f72:	4651      	mov	r1, sl
   32f74:	469b      	mov	fp, r3
   32f76:	4091      	lsls	r1, r2
   32f78:	4b26      	ldr	r3, [pc, #152]	; (33014 <__aeabi_ddiv+0x1f0>)
   32f7a:	2200      	movs	r2, #0
   32f7c:	1a1b      	subs	r3, r3, r0
   32f7e:	e78f      	b.n	32ea0 <__aeabi_ddiv+0x7c>
   32f80:	2300      	movs	r3, #0
   32f82:	2201      	movs	r2, #1
   32f84:	469b      	mov	fp, r3
   32f86:	e78b      	b.n	32ea0 <__aeabi_ddiv+0x7c>
   32f88:	4651      	mov	r1, sl
   32f8a:	2203      	movs	r2, #3
   32f8c:	e788      	b.n	32ea0 <__aeabi_ddiv+0x7c>
   32f8e:	2300      	movs	r3, #0
   32f90:	4698      	mov	r8, r3
   32f92:	3301      	adds	r3, #1
   32f94:	2604      	movs	r6, #4
   32f96:	2400      	movs	r4, #0
   32f98:	9303      	str	r3, [sp, #12]
   32f9a:	e767      	b.n	32e6c <__aeabi_ddiv+0x48>
   32f9c:	2303      	movs	r3, #3
   32f9e:	46b1      	mov	r9, r6
   32fa0:	9303      	str	r3, [sp, #12]
   32fa2:	260c      	movs	r6, #12
   32fa4:	e762      	b.n	32e6c <__aeabi_ddiv+0x48>
   32fa6:	2a03      	cmp	r2, #3
   32fa8:	d100      	bne.n	32fac <__aeabi_ddiv+0x188>
   32faa:	e25c      	b.n	33466 <__aeabi_ddiv+0x642>
   32fac:	9b01      	ldr	r3, [sp, #4]
   32fae:	2a01      	cmp	r2, #1
   32fb0:	d000      	beq.n	32fb4 <__aeabi_ddiv+0x190>
   32fb2:	e1e4      	b.n	3337e <__aeabi_ddiv+0x55a>
   32fb4:	4013      	ands	r3, r2
   32fb6:	469c      	mov	ip, r3
   32fb8:	2300      	movs	r3, #0
   32fba:	2400      	movs	r4, #0
   32fbc:	2200      	movs	r2, #0
   32fbe:	4698      	mov	r8, r3
   32fc0:	2100      	movs	r1, #0
   32fc2:	0312      	lsls	r2, r2, #12
   32fc4:	0b13      	lsrs	r3, r2, #12
   32fc6:	0d0a      	lsrs	r2, r1, #20
   32fc8:	0512      	lsls	r2, r2, #20
   32fca:	431a      	orrs	r2, r3
   32fcc:	0523      	lsls	r3, r4, #20
   32fce:	4c12      	ldr	r4, [pc, #72]	; (33018 <__aeabi_ddiv+0x1f4>)
   32fd0:	4640      	mov	r0, r8
   32fd2:	4022      	ands	r2, r4
   32fd4:	4313      	orrs	r3, r2
   32fd6:	4662      	mov	r2, ip
   32fd8:	005b      	lsls	r3, r3, #1
   32fda:	07d2      	lsls	r2, r2, #31
   32fdc:	085b      	lsrs	r3, r3, #1
   32fde:	4313      	orrs	r3, r2
   32fe0:	0019      	movs	r1, r3
   32fe2:	b007      	add	sp, #28
   32fe4:	bc3c      	pop	{r2, r3, r4, r5}
   32fe6:	4690      	mov	r8, r2
   32fe8:	4699      	mov	r9, r3
   32fea:	46a2      	mov	sl, r4
   32fec:	46ab      	mov	fp, r5
   32fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32ff0:	2300      	movs	r3, #0
   32ff2:	2280      	movs	r2, #128	; 0x80
   32ff4:	469c      	mov	ip, r3
   32ff6:	0312      	lsls	r2, r2, #12
   32ff8:	4698      	mov	r8, r3
   32ffa:	4c03      	ldr	r4, [pc, #12]	; (33008 <__aeabi_ddiv+0x1e4>)
   32ffc:	e7e0      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   32ffe:	2300      	movs	r3, #0
   33000:	4c01      	ldr	r4, [pc, #4]	; (33008 <__aeabi_ddiv+0x1e4>)
   33002:	2200      	movs	r2, #0
   33004:	4698      	mov	r8, r3
   33006:	e7db      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   33008:	000007ff 	.word	0x000007ff
   3300c:	fffffc01 	.word	0xfffffc01
   33010:	00039968 	.word	0x00039968
   33014:	fffffc0d 	.word	0xfffffc0d
   33018:	800fffff 	.word	0x800fffff
   3301c:	45d9      	cmp	r9, fp
   3301e:	d900      	bls.n	33022 <__aeabi_ddiv+0x1fe>
   33020:	e139      	b.n	33296 <__aeabi_ddiv+0x472>
   33022:	d100      	bne.n	33026 <__aeabi_ddiv+0x202>
   33024:	e134      	b.n	33290 <__aeabi_ddiv+0x46c>
   33026:	2300      	movs	r3, #0
   33028:	4646      	mov	r6, r8
   3302a:	464d      	mov	r5, r9
   3302c:	469a      	mov	sl, r3
   3302e:	3c01      	subs	r4, #1
   33030:	465b      	mov	r3, fp
   33032:	0e0a      	lsrs	r2, r1, #24
   33034:	021b      	lsls	r3, r3, #8
   33036:	431a      	orrs	r2, r3
   33038:	020b      	lsls	r3, r1, #8
   3303a:	0c17      	lsrs	r7, r2, #16
   3303c:	9303      	str	r3, [sp, #12]
   3303e:	0413      	lsls	r3, r2, #16
   33040:	0c1b      	lsrs	r3, r3, #16
   33042:	0039      	movs	r1, r7
   33044:	0028      	movs	r0, r5
   33046:	4690      	mov	r8, r2
   33048:	9301      	str	r3, [sp, #4]
   3304a:	f7ff f8fb 	bl	32244 <__udivsi3>
   3304e:	0002      	movs	r2, r0
   33050:	9b01      	ldr	r3, [sp, #4]
   33052:	4683      	mov	fp, r0
   33054:	435a      	muls	r2, r3
   33056:	0028      	movs	r0, r5
   33058:	0039      	movs	r1, r7
   3305a:	4691      	mov	r9, r2
   3305c:	f7ff f978 	bl	32350 <__aeabi_uidivmod>
   33060:	0c35      	lsrs	r5, r6, #16
   33062:	0409      	lsls	r1, r1, #16
   33064:	430d      	orrs	r5, r1
   33066:	45a9      	cmp	r9, r5
   33068:	d90d      	bls.n	33086 <__aeabi_ddiv+0x262>
   3306a:	465b      	mov	r3, fp
   3306c:	4445      	add	r5, r8
   3306e:	3b01      	subs	r3, #1
   33070:	45a8      	cmp	r8, r5
   33072:	d900      	bls.n	33076 <__aeabi_ddiv+0x252>
   33074:	e13a      	b.n	332ec <__aeabi_ddiv+0x4c8>
   33076:	45a9      	cmp	r9, r5
   33078:	d800      	bhi.n	3307c <__aeabi_ddiv+0x258>
   3307a:	e137      	b.n	332ec <__aeabi_ddiv+0x4c8>
   3307c:	2302      	movs	r3, #2
   3307e:	425b      	negs	r3, r3
   33080:	469c      	mov	ip, r3
   33082:	4445      	add	r5, r8
   33084:	44e3      	add	fp, ip
   33086:	464b      	mov	r3, r9
   33088:	1aeb      	subs	r3, r5, r3
   3308a:	0039      	movs	r1, r7
   3308c:	0018      	movs	r0, r3
   3308e:	9304      	str	r3, [sp, #16]
   33090:	f7ff f8d8 	bl	32244 <__udivsi3>
   33094:	9b01      	ldr	r3, [sp, #4]
   33096:	0005      	movs	r5, r0
   33098:	4343      	muls	r3, r0
   3309a:	0039      	movs	r1, r7
   3309c:	9804      	ldr	r0, [sp, #16]
   3309e:	4699      	mov	r9, r3
   330a0:	f7ff f956 	bl	32350 <__aeabi_uidivmod>
   330a4:	0433      	lsls	r3, r6, #16
   330a6:	0409      	lsls	r1, r1, #16
   330a8:	0c1b      	lsrs	r3, r3, #16
   330aa:	430b      	orrs	r3, r1
   330ac:	4599      	cmp	r9, r3
   330ae:	d909      	bls.n	330c4 <__aeabi_ddiv+0x2a0>
   330b0:	4443      	add	r3, r8
   330b2:	1e6a      	subs	r2, r5, #1
   330b4:	4598      	cmp	r8, r3
   330b6:	d900      	bls.n	330ba <__aeabi_ddiv+0x296>
   330b8:	e11a      	b.n	332f0 <__aeabi_ddiv+0x4cc>
   330ba:	4599      	cmp	r9, r3
   330bc:	d800      	bhi.n	330c0 <__aeabi_ddiv+0x29c>
   330be:	e117      	b.n	332f0 <__aeabi_ddiv+0x4cc>
   330c0:	3d02      	subs	r5, #2
   330c2:	4443      	add	r3, r8
   330c4:	464a      	mov	r2, r9
   330c6:	1a9b      	subs	r3, r3, r2
   330c8:	465a      	mov	r2, fp
   330ca:	0412      	lsls	r2, r2, #16
   330cc:	432a      	orrs	r2, r5
   330ce:	9903      	ldr	r1, [sp, #12]
   330d0:	4693      	mov	fp, r2
   330d2:	0c10      	lsrs	r0, r2, #16
   330d4:	0c0a      	lsrs	r2, r1, #16
   330d6:	4691      	mov	r9, r2
   330d8:	0409      	lsls	r1, r1, #16
   330da:	465a      	mov	r2, fp
   330dc:	0c09      	lsrs	r1, r1, #16
   330de:	464e      	mov	r6, r9
   330e0:	000d      	movs	r5, r1
   330e2:	0412      	lsls	r2, r2, #16
   330e4:	0c12      	lsrs	r2, r2, #16
   330e6:	4345      	muls	r5, r0
   330e8:	9105      	str	r1, [sp, #20]
   330ea:	4351      	muls	r1, r2
   330ec:	4372      	muls	r2, r6
   330ee:	4370      	muls	r0, r6
   330f0:	1952      	adds	r2, r2, r5
   330f2:	0c0e      	lsrs	r6, r1, #16
   330f4:	18b2      	adds	r2, r6, r2
   330f6:	4295      	cmp	r5, r2
   330f8:	d903      	bls.n	33102 <__aeabi_ddiv+0x2de>
   330fa:	2580      	movs	r5, #128	; 0x80
   330fc:	026d      	lsls	r5, r5, #9
   330fe:	46ac      	mov	ip, r5
   33100:	4460      	add	r0, ip
   33102:	0c15      	lsrs	r5, r2, #16
   33104:	0409      	lsls	r1, r1, #16
   33106:	0412      	lsls	r2, r2, #16
   33108:	0c09      	lsrs	r1, r1, #16
   3310a:	1828      	adds	r0, r5, r0
   3310c:	1852      	adds	r2, r2, r1
   3310e:	4283      	cmp	r3, r0
   33110:	d200      	bcs.n	33114 <__aeabi_ddiv+0x2f0>
   33112:	e0ce      	b.n	332b2 <__aeabi_ddiv+0x48e>
   33114:	d100      	bne.n	33118 <__aeabi_ddiv+0x2f4>
   33116:	e0c8      	b.n	332aa <__aeabi_ddiv+0x486>
   33118:	1a1d      	subs	r5, r3, r0
   3311a:	4653      	mov	r3, sl
   3311c:	1a9e      	subs	r6, r3, r2
   3311e:	45b2      	cmp	sl, r6
   33120:	4192      	sbcs	r2, r2
   33122:	4252      	negs	r2, r2
   33124:	1aab      	subs	r3, r5, r2
   33126:	469a      	mov	sl, r3
   33128:	4598      	cmp	r8, r3
   3312a:	d100      	bne.n	3312e <__aeabi_ddiv+0x30a>
   3312c:	e117      	b.n	3335e <__aeabi_ddiv+0x53a>
   3312e:	0039      	movs	r1, r7
   33130:	0018      	movs	r0, r3
   33132:	f7ff f887 	bl	32244 <__udivsi3>
   33136:	9b01      	ldr	r3, [sp, #4]
   33138:	0005      	movs	r5, r0
   3313a:	4343      	muls	r3, r0
   3313c:	0039      	movs	r1, r7
   3313e:	4650      	mov	r0, sl
   33140:	9304      	str	r3, [sp, #16]
   33142:	f7ff f905 	bl	32350 <__aeabi_uidivmod>
   33146:	9804      	ldr	r0, [sp, #16]
   33148:	040b      	lsls	r3, r1, #16
   3314a:	0c31      	lsrs	r1, r6, #16
   3314c:	4319      	orrs	r1, r3
   3314e:	4288      	cmp	r0, r1
   33150:	d909      	bls.n	33166 <__aeabi_ddiv+0x342>
   33152:	4441      	add	r1, r8
   33154:	1e6b      	subs	r3, r5, #1
   33156:	4588      	cmp	r8, r1
   33158:	d900      	bls.n	3315c <__aeabi_ddiv+0x338>
   3315a:	e107      	b.n	3336c <__aeabi_ddiv+0x548>
   3315c:	4288      	cmp	r0, r1
   3315e:	d800      	bhi.n	33162 <__aeabi_ddiv+0x33e>
   33160:	e104      	b.n	3336c <__aeabi_ddiv+0x548>
   33162:	3d02      	subs	r5, #2
   33164:	4441      	add	r1, r8
   33166:	9b04      	ldr	r3, [sp, #16]
   33168:	1acb      	subs	r3, r1, r3
   3316a:	0018      	movs	r0, r3
   3316c:	0039      	movs	r1, r7
   3316e:	9304      	str	r3, [sp, #16]
   33170:	f7ff f868 	bl	32244 <__udivsi3>
   33174:	9b01      	ldr	r3, [sp, #4]
   33176:	4682      	mov	sl, r0
   33178:	4343      	muls	r3, r0
   3317a:	0039      	movs	r1, r7
   3317c:	9804      	ldr	r0, [sp, #16]
   3317e:	9301      	str	r3, [sp, #4]
   33180:	f7ff f8e6 	bl	32350 <__aeabi_uidivmod>
   33184:	9801      	ldr	r0, [sp, #4]
   33186:	040b      	lsls	r3, r1, #16
   33188:	0431      	lsls	r1, r6, #16
   3318a:	0c09      	lsrs	r1, r1, #16
   3318c:	4319      	orrs	r1, r3
   3318e:	4288      	cmp	r0, r1
   33190:	d90d      	bls.n	331ae <__aeabi_ddiv+0x38a>
   33192:	4653      	mov	r3, sl
   33194:	4441      	add	r1, r8
   33196:	3b01      	subs	r3, #1
   33198:	4588      	cmp	r8, r1
   3319a:	d900      	bls.n	3319e <__aeabi_ddiv+0x37a>
   3319c:	e0e8      	b.n	33370 <__aeabi_ddiv+0x54c>
   3319e:	4288      	cmp	r0, r1
   331a0:	d800      	bhi.n	331a4 <__aeabi_ddiv+0x380>
   331a2:	e0e5      	b.n	33370 <__aeabi_ddiv+0x54c>
   331a4:	2302      	movs	r3, #2
   331a6:	425b      	negs	r3, r3
   331a8:	469c      	mov	ip, r3
   331aa:	4441      	add	r1, r8
   331ac:	44e2      	add	sl, ip
   331ae:	9b01      	ldr	r3, [sp, #4]
   331b0:	042d      	lsls	r5, r5, #16
   331b2:	1ace      	subs	r6, r1, r3
   331b4:	4651      	mov	r1, sl
   331b6:	4329      	orrs	r1, r5
   331b8:	9d05      	ldr	r5, [sp, #20]
   331ba:	464f      	mov	r7, r9
   331bc:	002a      	movs	r2, r5
   331be:	040b      	lsls	r3, r1, #16
   331c0:	0c08      	lsrs	r0, r1, #16
   331c2:	0c1b      	lsrs	r3, r3, #16
   331c4:	435a      	muls	r2, r3
   331c6:	4345      	muls	r5, r0
   331c8:	437b      	muls	r3, r7
   331ca:	4378      	muls	r0, r7
   331cc:	195b      	adds	r3, r3, r5
   331ce:	0c17      	lsrs	r7, r2, #16
   331d0:	18fb      	adds	r3, r7, r3
   331d2:	429d      	cmp	r5, r3
   331d4:	d903      	bls.n	331de <__aeabi_ddiv+0x3ba>
   331d6:	2580      	movs	r5, #128	; 0x80
   331d8:	026d      	lsls	r5, r5, #9
   331da:	46ac      	mov	ip, r5
   331dc:	4460      	add	r0, ip
   331de:	0c1d      	lsrs	r5, r3, #16
   331e0:	0412      	lsls	r2, r2, #16
   331e2:	041b      	lsls	r3, r3, #16
   331e4:	0c12      	lsrs	r2, r2, #16
   331e6:	1828      	adds	r0, r5, r0
   331e8:	189b      	adds	r3, r3, r2
   331ea:	4286      	cmp	r6, r0
   331ec:	d200      	bcs.n	331f0 <__aeabi_ddiv+0x3cc>
   331ee:	e093      	b.n	33318 <__aeabi_ddiv+0x4f4>
   331f0:	d100      	bne.n	331f4 <__aeabi_ddiv+0x3d0>
   331f2:	e08e      	b.n	33312 <__aeabi_ddiv+0x4ee>
   331f4:	2301      	movs	r3, #1
   331f6:	4319      	orrs	r1, r3
   331f8:	4ba0      	ldr	r3, [pc, #640]	; (3347c <__aeabi_ddiv+0x658>)
   331fa:	18e3      	adds	r3, r4, r3
   331fc:	2b00      	cmp	r3, #0
   331fe:	dc00      	bgt.n	33202 <__aeabi_ddiv+0x3de>
   33200:	e099      	b.n	33336 <__aeabi_ddiv+0x512>
   33202:	074a      	lsls	r2, r1, #29
   33204:	d000      	beq.n	33208 <__aeabi_ddiv+0x3e4>
   33206:	e09e      	b.n	33346 <__aeabi_ddiv+0x522>
   33208:	465a      	mov	r2, fp
   3320a:	01d2      	lsls	r2, r2, #7
   3320c:	d506      	bpl.n	3321c <__aeabi_ddiv+0x3f8>
   3320e:	465a      	mov	r2, fp
   33210:	4b9b      	ldr	r3, [pc, #620]	; (33480 <__aeabi_ddiv+0x65c>)
   33212:	401a      	ands	r2, r3
   33214:	2380      	movs	r3, #128	; 0x80
   33216:	4693      	mov	fp, r2
   33218:	00db      	lsls	r3, r3, #3
   3321a:	18e3      	adds	r3, r4, r3
   3321c:	4a99      	ldr	r2, [pc, #612]	; (33484 <__aeabi_ddiv+0x660>)
   3321e:	4293      	cmp	r3, r2
   33220:	dd68      	ble.n	332f4 <__aeabi_ddiv+0x4d0>
   33222:	2301      	movs	r3, #1
   33224:	9a02      	ldr	r2, [sp, #8]
   33226:	4c98      	ldr	r4, [pc, #608]	; (33488 <__aeabi_ddiv+0x664>)
   33228:	401a      	ands	r2, r3
   3322a:	2300      	movs	r3, #0
   3322c:	4694      	mov	ip, r2
   3322e:	4698      	mov	r8, r3
   33230:	2200      	movs	r2, #0
   33232:	e6c5      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   33234:	2280      	movs	r2, #128	; 0x80
   33236:	464b      	mov	r3, r9
   33238:	0312      	lsls	r2, r2, #12
   3323a:	4213      	tst	r3, r2
   3323c:	d00a      	beq.n	33254 <__aeabi_ddiv+0x430>
   3323e:	465b      	mov	r3, fp
   33240:	4213      	tst	r3, r2
   33242:	d106      	bne.n	33252 <__aeabi_ddiv+0x42e>
   33244:	431a      	orrs	r2, r3
   33246:	0312      	lsls	r2, r2, #12
   33248:	0b12      	lsrs	r2, r2, #12
   3324a:	46ac      	mov	ip, r5
   3324c:	4688      	mov	r8, r1
   3324e:	4c8e      	ldr	r4, [pc, #568]	; (33488 <__aeabi_ddiv+0x664>)
   33250:	e6b6      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   33252:	464b      	mov	r3, r9
   33254:	431a      	orrs	r2, r3
   33256:	0312      	lsls	r2, r2, #12
   33258:	0b12      	lsrs	r2, r2, #12
   3325a:	46bc      	mov	ip, r7
   3325c:	4c8a      	ldr	r4, [pc, #552]	; (33488 <__aeabi_ddiv+0x664>)
   3325e:	e6af      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   33260:	0003      	movs	r3, r0
   33262:	465a      	mov	r2, fp
   33264:	3b28      	subs	r3, #40	; 0x28
   33266:	409a      	lsls	r2, r3
   33268:	2300      	movs	r3, #0
   3326a:	4691      	mov	r9, r2
   3326c:	4698      	mov	r8, r3
   3326e:	e657      	b.n	32f20 <__aeabi_ddiv+0xfc>
   33270:	4658      	mov	r0, fp
   33272:	f000 ffd9 	bl	34228 <__clzsi2>
   33276:	3020      	adds	r0, #32
   33278:	e640      	b.n	32efc <__aeabi_ddiv+0xd8>
   3327a:	0003      	movs	r3, r0
   3327c:	4652      	mov	r2, sl
   3327e:	3b28      	subs	r3, #40	; 0x28
   33280:	409a      	lsls	r2, r3
   33282:	2100      	movs	r1, #0
   33284:	4693      	mov	fp, r2
   33286:	e677      	b.n	32f78 <__aeabi_ddiv+0x154>
   33288:	f000 ffce 	bl	34228 <__clzsi2>
   3328c:	3020      	adds	r0, #32
   3328e:	e65f      	b.n	32f50 <__aeabi_ddiv+0x12c>
   33290:	4588      	cmp	r8, r1
   33292:	d200      	bcs.n	33296 <__aeabi_ddiv+0x472>
   33294:	e6c7      	b.n	33026 <__aeabi_ddiv+0x202>
   33296:	464b      	mov	r3, r9
   33298:	07de      	lsls	r6, r3, #31
   3329a:	085d      	lsrs	r5, r3, #1
   3329c:	4643      	mov	r3, r8
   3329e:	085b      	lsrs	r3, r3, #1
   332a0:	431e      	orrs	r6, r3
   332a2:	4643      	mov	r3, r8
   332a4:	07db      	lsls	r3, r3, #31
   332a6:	469a      	mov	sl, r3
   332a8:	e6c2      	b.n	33030 <__aeabi_ddiv+0x20c>
   332aa:	2500      	movs	r5, #0
   332ac:	4592      	cmp	sl, r2
   332ae:	d300      	bcc.n	332b2 <__aeabi_ddiv+0x48e>
   332b0:	e733      	b.n	3311a <__aeabi_ddiv+0x2f6>
   332b2:	9e03      	ldr	r6, [sp, #12]
   332b4:	4659      	mov	r1, fp
   332b6:	46b4      	mov	ip, r6
   332b8:	44e2      	add	sl, ip
   332ba:	45b2      	cmp	sl, r6
   332bc:	41ad      	sbcs	r5, r5
   332be:	426d      	negs	r5, r5
   332c0:	4445      	add	r5, r8
   332c2:	18eb      	adds	r3, r5, r3
   332c4:	3901      	subs	r1, #1
   332c6:	4598      	cmp	r8, r3
   332c8:	d207      	bcs.n	332da <__aeabi_ddiv+0x4b6>
   332ca:	4298      	cmp	r0, r3
   332cc:	d900      	bls.n	332d0 <__aeabi_ddiv+0x4ac>
   332ce:	e07f      	b.n	333d0 <__aeabi_ddiv+0x5ac>
   332d0:	d100      	bne.n	332d4 <__aeabi_ddiv+0x4b0>
   332d2:	e0bc      	b.n	3344e <__aeabi_ddiv+0x62a>
   332d4:	1a1d      	subs	r5, r3, r0
   332d6:	468b      	mov	fp, r1
   332d8:	e71f      	b.n	3311a <__aeabi_ddiv+0x2f6>
   332da:	4598      	cmp	r8, r3
   332dc:	d1fa      	bne.n	332d4 <__aeabi_ddiv+0x4b0>
   332de:	9d03      	ldr	r5, [sp, #12]
   332e0:	4555      	cmp	r5, sl
   332e2:	d9f2      	bls.n	332ca <__aeabi_ddiv+0x4a6>
   332e4:	4643      	mov	r3, r8
   332e6:	468b      	mov	fp, r1
   332e8:	1a1d      	subs	r5, r3, r0
   332ea:	e716      	b.n	3311a <__aeabi_ddiv+0x2f6>
   332ec:	469b      	mov	fp, r3
   332ee:	e6ca      	b.n	33086 <__aeabi_ddiv+0x262>
   332f0:	0015      	movs	r5, r2
   332f2:	e6e7      	b.n	330c4 <__aeabi_ddiv+0x2a0>
   332f4:	465a      	mov	r2, fp
   332f6:	08c9      	lsrs	r1, r1, #3
   332f8:	0752      	lsls	r2, r2, #29
   332fa:	430a      	orrs	r2, r1
   332fc:	055b      	lsls	r3, r3, #21
   332fe:	4690      	mov	r8, r2
   33300:	0d5c      	lsrs	r4, r3, #21
   33302:	465a      	mov	r2, fp
   33304:	2301      	movs	r3, #1
   33306:	9902      	ldr	r1, [sp, #8]
   33308:	0252      	lsls	r2, r2, #9
   3330a:	4019      	ands	r1, r3
   3330c:	0b12      	lsrs	r2, r2, #12
   3330e:	468c      	mov	ip, r1
   33310:	e656      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   33312:	2b00      	cmp	r3, #0
   33314:	d100      	bne.n	33318 <__aeabi_ddiv+0x4f4>
   33316:	e76f      	b.n	331f8 <__aeabi_ddiv+0x3d4>
   33318:	4446      	add	r6, r8
   3331a:	1e4a      	subs	r2, r1, #1
   3331c:	45b0      	cmp	r8, r6
   3331e:	d929      	bls.n	33374 <__aeabi_ddiv+0x550>
   33320:	0011      	movs	r1, r2
   33322:	4286      	cmp	r6, r0
   33324:	d000      	beq.n	33328 <__aeabi_ddiv+0x504>
   33326:	e765      	b.n	331f4 <__aeabi_ddiv+0x3d0>
   33328:	9a03      	ldr	r2, [sp, #12]
   3332a:	4293      	cmp	r3, r2
   3332c:	d000      	beq.n	33330 <__aeabi_ddiv+0x50c>
   3332e:	e761      	b.n	331f4 <__aeabi_ddiv+0x3d0>
   33330:	e762      	b.n	331f8 <__aeabi_ddiv+0x3d4>
   33332:	2101      	movs	r1, #1
   33334:	4249      	negs	r1, r1
   33336:	2001      	movs	r0, #1
   33338:	1ac2      	subs	r2, r0, r3
   3333a:	2a38      	cmp	r2, #56	; 0x38
   3333c:	dd21      	ble.n	33382 <__aeabi_ddiv+0x55e>
   3333e:	9b02      	ldr	r3, [sp, #8]
   33340:	4003      	ands	r3, r0
   33342:	469c      	mov	ip, r3
   33344:	e638      	b.n	32fb8 <__aeabi_ddiv+0x194>
   33346:	220f      	movs	r2, #15
   33348:	400a      	ands	r2, r1
   3334a:	2a04      	cmp	r2, #4
   3334c:	d100      	bne.n	33350 <__aeabi_ddiv+0x52c>
   3334e:	e75b      	b.n	33208 <__aeabi_ddiv+0x3e4>
   33350:	000a      	movs	r2, r1
   33352:	1d11      	adds	r1, r2, #4
   33354:	4291      	cmp	r1, r2
   33356:	4192      	sbcs	r2, r2
   33358:	4252      	negs	r2, r2
   3335a:	4493      	add	fp, r2
   3335c:	e754      	b.n	33208 <__aeabi_ddiv+0x3e4>
   3335e:	4b47      	ldr	r3, [pc, #284]	; (3347c <__aeabi_ddiv+0x658>)
   33360:	18e3      	adds	r3, r4, r3
   33362:	2b00      	cmp	r3, #0
   33364:	dde5      	ble.n	33332 <__aeabi_ddiv+0x50e>
   33366:	2201      	movs	r2, #1
   33368:	4252      	negs	r2, r2
   3336a:	e7f2      	b.n	33352 <__aeabi_ddiv+0x52e>
   3336c:	001d      	movs	r5, r3
   3336e:	e6fa      	b.n	33166 <__aeabi_ddiv+0x342>
   33370:	469a      	mov	sl, r3
   33372:	e71c      	b.n	331ae <__aeabi_ddiv+0x38a>
   33374:	42b0      	cmp	r0, r6
   33376:	d839      	bhi.n	333ec <__aeabi_ddiv+0x5c8>
   33378:	d06e      	beq.n	33458 <__aeabi_ddiv+0x634>
   3337a:	0011      	movs	r1, r2
   3337c:	e73a      	b.n	331f4 <__aeabi_ddiv+0x3d0>
   3337e:	9302      	str	r3, [sp, #8]
   33380:	e73a      	b.n	331f8 <__aeabi_ddiv+0x3d4>
   33382:	2a1f      	cmp	r2, #31
   33384:	dc3c      	bgt.n	33400 <__aeabi_ddiv+0x5dc>
   33386:	2320      	movs	r3, #32
   33388:	1a9b      	subs	r3, r3, r2
   3338a:	000c      	movs	r4, r1
   3338c:	4658      	mov	r0, fp
   3338e:	4099      	lsls	r1, r3
   33390:	4098      	lsls	r0, r3
   33392:	1e4b      	subs	r3, r1, #1
   33394:	4199      	sbcs	r1, r3
   33396:	465b      	mov	r3, fp
   33398:	40d4      	lsrs	r4, r2
   3339a:	40d3      	lsrs	r3, r2
   3339c:	4320      	orrs	r0, r4
   3339e:	4308      	orrs	r0, r1
   333a0:	001a      	movs	r2, r3
   333a2:	0743      	lsls	r3, r0, #29
   333a4:	d009      	beq.n	333ba <__aeabi_ddiv+0x596>
   333a6:	230f      	movs	r3, #15
   333a8:	4003      	ands	r3, r0
   333aa:	2b04      	cmp	r3, #4
   333ac:	d005      	beq.n	333ba <__aeabi_ddiv+0x596>
   333ae:	0001      	movs	r1, r0
   333b0:	1d08      	adds	r0, r1, #4
   333b2:	4288      	cmp	r0, r1
   333b4:	419b      	sbcs	r3, r3
   333b6:	425b      	negs	r3, r3
   333b8:	18d2      	adds	r2, r2, r3
   333ba:	0213      	lsls	r3, r2, #8
   333bc:	d53a      	bpl.n	33434 <__aeabi_ddiv+0x610>
   333be:	2301      	movs	r3, #1
   333c0:	9a02      	ldr	r2, [sp, #8]
   333c2:	2401      	movs	r4, #1
   333c4:	401a      	ands	r2, r3
   333c6:	2300      	movs	r3, #0
   333c8:	4694      	mov	ip, r2
   333ca:	4698      	mov	r8, r3
   333cc:	2200      	movs	r2, #0
   333ce:	e5f7      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   333d0:	2102      	movs	r1, #2
   333d2:	4249      	negs	r1, r1
   333d4:	468c      	mov	ip, r1
   333d6:	9d03      	ldr	r5, [sp, #12]
   333d8:	44e3      	add	fp, ip
   333da:	46ac      	mov	ip, r5
   333dc:	44e2      	add	sl, ip
   333de:	45aa      	cmp	sl, r5
   333e0:	41ad      	sbcs	r5, r5
   333e2:	426d      	negs	r5, r5
   333e4:	4445      	add	r5, r8
   333e6:	18ed      	adds	r5, r5, r3
   333e8:	1a2d      	subs	r5, r5, r0
   333ea:	e696      	b.n	3311a <__aeabi_ddiv+0x2f6>
   333ec:	1e8a      	subs	r2, r1, #2
   333ee:	9903      	ldr	r1, [sp, #12]
   333f0:	004d      	lsls	r5, r1, #1
   333f2:	428d      	cmp	r5, r1
   333f4:	4189      	sbcs	r1, r1
   333f6:	4249      	negs	r1, r1
   333f8:	4441      	add	r1, r8
   333fa:	1876      	adds	r6, r6, r1
   333fc:	9503      	str	r5, [sp, #12]
   333fe:	e78f      	b.n	33320 <__aeabi_ddiv+0x4fc>
   33400:	201f      	movs	r0, #31
   33402:	4240      	negs	r0, r0
   33404:	1ac3      	subs	r3, r0, r3
   33406:	4658      	mov	r0, fp
   33408:	40d8      	lsrs	r0, r3
   3340a:	0003      	movs	r3, r0
   3340c:	2a20      	cmp	r2, #32
   3340e:	d028      	beq.n	33462 <__aeabi_ddiv+0x63e>
   33410:	2040      	movs	r0, #64	; 0x40
   33412:	465d      	mov	r5, fp
   33414:	1a82      	subs	r2, r0, r2
   33416:	4095      	lsls	r5, r2
   33418:	4329      	orrs	r1, r5
   3341a:	1e4a      	subs	r2, r1, #1
   3341c:	4191      	sbcs	r1, r2
   3341e:	4319      	orrs	r1, r3
   33420:	2307      	movs	r3, #7
   33422:	2200      	movs	r2, #0
   33424:	400b      	ands	r3, r1
   33426:	d009      	beq.n	3343c <__aeabi_ddiv+0x618>
   33428:	230f      	movs	r3, #15
   3342a:	2200      	movs	r2, #0
   3342c:	400b      	ands	r3, r1
   3342e:	0008      	movs	r0, r1
   33430:	2b04      	cmp	r3, #4
   33432:	d1bd      	bne.n	333b0 <__aeabi_ddiv+0x58c>
   33434:	0001      	movs	r1, r0
   33436:	0753      	lsls	r3, r2, #29
   33438:	0252      	lsls	r2, r2, #9
   3343a:	0b12      	lsrs	r2, r2, #12
   3343c:	08c9      	lsrs	r1, r1, #3
   3343e:	4319      	orrs	r1, r3
   33440:	2301      	movs	r3, #1
   33442:	4688      	mov	r8, r1
   33444:	9902      	ldr	r1, [sp, #8]
   33446:	2400      	movs	r4, #0
   33448:	4019      	ands	r1, r3
   3344a:	468c      	mov	ip, r1
   3344c:	e5b8      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   3344e:	4552      	cmp	r2, sl
   33450:	d8be      	bhi.n	333d0 <__aeabi_ddiv+0x5ac>
   33452:	468b      	mov	fp, r1
   33454:	2500      	movs	r5, #0
   33456:	e660      	b.n	3311a <__aeabi_ddiv+0x2f6>
   33458:	9d03      	ldr	r5, [sp, #12]
   3345a:	429d      	cmp	r5, r3
   3345c:	d3c6      	bcc.n	333ec <__aeabi_ddiv+0x5c8>
   3345e:	0011      	movs	r1, r2
   33460:	e762      	b.n	33328 <__aeabi_ddiv+0x504>
   33462:	2500      	movs	r5, #0
   33464:	e7d8      	b.n	33418 <__aeabi_ddiv+0x5f4>
   33466:	2280      	movs	r2, #128	; 0x80
   33468:	465b      	mov	r3, fp
   3346a:	0312      	lsls	r2, r2, #12
   3346c:	431a      	orrs	r2, r3
   3346e:	9b01      	ldr	r3, [sp, #4]
   33470:	0312      	lsls	r2, r2, #12
   33472:	0b12      	lsrs	r2, r2, #12
   33474:	469c      	mov	ip, r3
   33476:	4688      	mov	r8, r1
   33478:	4c03      	ldr	r4, [pc, #12]	; (33488 <__aeabi_ddiv+0x664>)
   3347a:	e5a1      	b.n	32fc0 <__aeabi_ddiv+0x19c>
   3347c:	000003ff 	.word	0x000003ff
   33480:	feffffff 	.word	0xfeffffff
   33484:	000007fe 	.word	0x000007fe
   33488:	000007ff 	.word	0x000007ff

0003348c <__aeabi_dmul>:
   3348c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3348e:	4657      	mov	r7, sl
   33490:	4645      	mov	r5, r8
   33492:	46de      	mov	lr, fp
   33494:	464e      	mov	r6, r9
   33496:	b5e0      	push	{r5, r6, r7, lr}
   33498:	030c      	lsls	r4, r1, #12
   3349a:	4698      	mov	r8, r3
   3349c:	004e      	lsls	r6, r1, #1
   3349e:	0b23      	lsrs	r3, r4, #12
   334a0:	b087      	sub	sp, #28
   334a2:	0007      	movs	r7, r0
   334a4:	4692      	mov	sl, r2
   334a6:	469b      	mov	fp, r3
   334a8:	0d76      	lsrs	r6, r6, #21
   334aa:	0fcd      	lsrs	r5, r1, #31
   334ac:	2e00      	cmp	r6, #0
   334ae:	d06b      	beq.n	33588 <__aeabi_dmul+0xfc>
   334b0:	4b6d      	ldr	r3, [pc, #436]	; (33668 <__aeabi_dmul+0x1dc>)
   334b2:	429e      	cmp	r6, r3
   334b4:	d035      	beq.n	33522 <__aeabi_dmul+0x96>
   334b6:	2480      	movs	r4, #128	; 0x80
   334b8:	465b      	mov	r3, fp
   334ba:	0f42      	lsrs	r2, r0, #29
   334bc:	0424      	lsls	r4, r4, #16
   334be:	00db      	lsls	r3, r3, #3
   334c0:	4314      	orrs	r4, r2
   334c2:	431c      	orrs	r4, r3
   334c4:	00c3      	lsls	r3, r0, #3
   334c6:	4699      	mov	r9, r3
   334c8:	4b68      	ldr	r3, [pc, #416]	; (3366c <__aeabi_dmul+0x1e0>)
   334ca:	46a3      	mov	fp, r4
   334cc:	469c      	mov	ip, r3
   334ce:	2300      	movs	r3, #0
   334d0:	2700      	movs	r7, #0
   334d2:	4466      	add	r6, ip
   334d4:	9302      	str	r3, [sp, #8]
   334d6:	4643      	mov	r3, r8
   334d8:	031c      	lsls	r4, r3, #12
   334da:	005a      	lsls	r2, r3, #1
   334dc:	0fdb      	lsrs	r3, r3, #31
   334de:	4650      	mov	r0, sl
   334e0:	0b24      	lsrs	r4, r4, #12
   334e2:	0d52      	lsrs	r2, r2, #21
   334e4:	4698      	mov	r8, r3
   334e6:	d100      	bne.n	334ea <__aeabi_dmul+0x5e>
   334e8:	e076      	b.n	335d8 <__aeabi_dmul+0x14c>
   334ea:	4b5f      	ldr	r3, [pc, #380]	; (33668 <__aeabi_dmul+0x1dc>)
   334ec:	429a      	cmp	r2, r3
   334ee:	d06d      	beq.n	335cc <__aeabi_dmul+0x140>
   334f0:	2380      	movs	r3, #128	; 0x80
   334f2:	0f41      	lsrs	r1, r0, #29
   334f4:	041b      	lsls	r3, r3, #16
   334f6:	430b      	orrs	r3, r1
   334f8:	495c      	ldr	r1, [pc, #368]	; (3366c <__aeabi_dmul+0x1e0>)
   334fa:	00e4      	lsls	r4, r4, #3
   334fc:	468c      	mov	ip, r1
   334fe:	431c      	orrs	r4, r3
   33500:	00c3      	lsls	r3, r0, #3
   33502:	2000      	movs	r0, #0
   33504:	4462      	add	r2, ip
   33506:	4641      	mov	r1, r8
   33508:	18b6      	adds	r6, r6, r2
   3350a:	4069      	eors	r1, r5
   3350c:	1c72      	adds	r2, r6, #1
   3350e:	9101      	str	r1, [sp, #4]
   33510:	4694      	mov	ip, r2
   33512:	4307      	orrs	r7, r0
   33514:	2f0f      	cmp	r7, #15
   33516:	d900      	bls.n	3351a <__aeabi_dmul+0x8e>
   33518:	e0b0      	b.n	3367c <__aeabi_dmul+0x1f0>
   3351a:	4a55      	ldr	r2, [pc, #340]	; (33670 <__aeabi_dmul+0x1e4>)
   3351c:	00bf      	lsls	r7, r7, #2
   3351e:	59d2      	ldr	r2, [r2, r7]
   33520:	4697      	mov	pc, r2
   33522:	465b      	mov	r3, fp
   33524:	4303      	orrs	r3, r0
   33526:	4699      	mov	r9, r3
   33528:	d000      	beq.n	3352c <__aeabi_dmul+0xa0>
   3352a:	e087      	b.n	3363c <__aeabi_dmul+0x1b0>
   3352c:	2300      	movs	r3, #0
   3352e:	469b      	mov	fp, r3
   33530:	3302      	adds	r3, #2
   33532:	2708      	movs	r7, #8
   33534:	9302      	str	r3, [sp, #8]
   33536:	e7ce      	b.n	334d6 <__aeabi_dmul+0x4a>
   33538:	4642      	mov	r2, r8
   3353a:	9201      	str	r2, [sp, #4]
   3353c:	2802      	cmp	r0, #2
   3353e:	d067      	beq.n	33610 <__aeabi_dmul+0x184>
   33540:	2803      	cmp	r0, #3
   33542:	d100      	bne.n	33546 <__aeabi_dmul+0xba>
   33544:	e20e      	b.n	33964 <__aeabi_dmul+0x4d8>
   33546:	2801      	cmp	r0, #1
   33548:	d000      	beq.n	3354c <__aeabi_dmul+0xc0>
   3354a:	e162      	b.n	33812 <__aeabi_dmul+0x386>
   3354c:	2300      	movs	r3, #0
   3354e:	2400      	movs	r4, #0
   33550:	2200      	movs	r2, #0
   33552:	4699      	mov	r9, r3
   33554:	9901      	ldr	r1, [sp, #4]
   33556:	4001      	ands	r1, r0
   33558:	b2cd      	uxtb	r5, r1
   3355a:	2100      	movs	r1, #0
   3355c:	0312      	lsls	r2, r2, #12
   3355e:	0d0b      	lsrs	r3, r1, #20
   33560:	0b12      	lsrs	r2, r2, #12
   33562:	051b      	lsls	r3, r3, #20
   33564:	4313      	orrs	r3, r2
   33566:	4a43      	ldr	r2, [pc, #268]	; (33674 <__aeabi_dmul+0x1e8>)
   33568:	0524      	lsls	r4, r4, #20
   3356a:	4013      	ands	r3, r2
   3356c:	431c      	orrs	r4, r3
   3356e:	0064      	lsls	r4, r4, #1
   33570:	07ed      	lsls	r5, r5, #31
   33572:	0864      	lsrs	r4, r4, #1
   33574:	432c      	orrs	r4, r5
   33576:	4648      	mov	r0, r9
   33578:	0021      	movs	r1, r4
   3357a:	b007      	add	sp, #28
   3357c:	bc3c      	pop	{r2, r3, r4, r5}
   3357e:	4690      	mov	r8, r2
   33580:	4699      	mov	r9, r3
   33582:	46a2      	mov	sl, r4
   33584:	46ab      	mov	fp, r5
   33586:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33588:	4303      	orrs	r3, r0
   3358a:	4699      	mov	r9, r3
   3358c:	d04f      	beq.n	3362e <__aeabi_dmul+0x1a2>
   3358e:	465b      	mov	r3, fp
   33590:	2b00      	cmp	r3, #0
   33592:	d100      	bne.n	33596 <__aeabi_dmul+0x10a>
   33594:	e189      	b.n	338aa <__aeabi_dmul+0x41e>
   33596:	4658      	mov	r0, fp
   33598:	f000 fe46 	bl	34228 <__clzsi2>
   3359c:	0003      	movs	r3, r0
   3359e:	3b0b      	subs	r3, #11
   335a0:	2b1c      	cmp	r3, #28
   335a2:	dd00      	ble.n	335a6 <__aeabi_dmul+0x11a>
   335a4:	e17a      	b.n	3389c <__aeabi_dmul+0x410>
   335a6:	221d      	movs	r2, #29
   335a8:	1ad3      	subs	r3, r2, r3
   335aa:	003a      	movs	r2, r7
   335ac:	0001      	movs	r1, r0
   335ae:	465c      	mov	r4, fp
   335b0:	40da      	lsrs	r2, r3
   335b2:	3908      	subs	r1, #8
   335b4:	408c      	lsls	r4, r1
   335b6:	0013      	movs	r3, r2
   335b8:	408f      	lsls	r7, r1
   335ba:	4323      	orrs	r3, r4
   335bc:	469b      	mov	fp, r3
   335be:	46b9      	mov	r9, r7
   335c0:	2300      	movs	r3, #0
   335c2:	4e2d      	ldr	r6, [pc, #180]	; (33678 <__aeabi_dmul+0x1ec>)
   335c4:	2700      	movs	r7, #0
   335c6:	1a36      	subs	r6, r6, r0
   335c8:	9302      	str	r3, [sp, #8]
   335ca:	e784      	b.n	334d6 <__aeabi_dmul+0x4a>
   335cc:	4653      	mov	r3, sl
   335ce:	4323      	orrs	r3, r4
   335d0:	d12a      	bne.n	33628 <__aeabi_dmul+0x19c>
   335d2:	2400      	movs	r4, #0
   335d4:	2002      	movs	r0, #2
   335d6:	e796      	b.n	33506 <__aeabi_dmul+0x7a>
   335d8:	4653      	mov	r3, sl
   335da:	4323      	orrs	r3, r4
   335dc:	d020      	beq.n	33620 <__aeabi_dmul+0x194>
   335de:	2c00      	cmp	r4, #0
   335e0:	d100      	bne.n	335e4 <__aeabi_dmul+0x158>
   335e2:	e157      	b.n	33894 <__aeabi_dmul+0x408>
   335e4:	0020      	movs	r0, r4
   335e6:	f000 fe1f 	bl	34228 <__clzsi2>
   335ea:	0003      	movs	r3, r0
   335ec:	3b0b      	subs	r3, #11
   335ee:	2b1c      	cmp	r3, #28
   335f0:	dd00      	ble.n	335f4 <__aeabi_dmul+0x168>
   335f2:	e149      	b.n	33888 <__aeabi_dmul+0x3fc>
   335f4:	211d      	movs	r1, #29
   335f6:	1acb      	subs	r3, r1, r3
   335f8:	4651      	mov	r1, sl
   335fa:	0002      	movs	r2, r0
   335fc:	40d9      	lsrs	r1, r3
   335fe:	4653      	mov	r3, sl
   33600:	3a08      	subs	r2, #8
   33602:	4094      	lsls	r4, r2
   33604:	4093      	lsls	r3, r2
   33606:	430c      	orrs	r4, r1
   33608:	4a1b      	ldr	r2, [pc, #108]	; (33678 <__aeabi_dmul+0x1ec>)
   3360a:	1a12      	subs	r2, r2, r0
   3360c:	2000      	movs	r0, #0
   3360e:	e77a      	b.n	33506 <__aeabi_dmul+0x7a>
   33610:	2501      	movs	r5, #1
   33612:	9b01      	ldr	r3, [sp, #4]
   33614:	4c14      	ldr	r4, [pc, #80]	; (33668 <__aeabi_dmul+0x1dc>)
   33616:	401d      	ands	r5, r3
   33618:	2300      	movs	r3, #0
   3361a:	2200      	movs	r2, #0
   3361c:	4699      	mov	r9, r3
   3361e:	e79c      	b.n	3355a <__aeabi_dmul+0xce>
   33620:	2400      	movs	r4, #0
   33622:	2200      	movs	r2, #0
   33624:	2001      	movs	r0, #1
   33626:	e76e      	b.n	33506 <__aeabi_dmul+0x7a>
   33628:	4653      	mov	r3, sl
   3362a:	2003      	movs	r0, #3
   3362c:	e76b      	b.n	33506 <__aeabi_dmul+0x7a>
   3362e:	2300      	movs	r3, #0
   33630:	469b      	mov	fp, r3
   33632:	3301      	adds	r3, #1
   33634:	2704      	movs	r7, #4
   33636:	2600      	movs	r6, #0
   33638:	9302      	str	r3, [sp, #8]
   3363a:	e74c      	b.n	334d6 <__aeabi_dmul+0x4a>
   3363c:	2303      	movs	r3, #3
   3363e:	4681      	mov	r9, r0
   33640:	270c      	movs	r7, #12
   33642:	9302      	str	r3, [sp, #8]
   33644:	e747      	b.n	334d6 <__aeabi_dmul+0x4a>
   33646:	2280      	movs	r2, #128	; 0x80
   33648:	2300      	movs	r3, #0
   3364a:	2500      	movs	r5, #0
   3364c:	0312      	lsls	r2, r2, #12
   3364e:	4699      	mov	r9, r3
   33650:	4c05      	ldr	r4, [pc, #20]	; (33668 <__aeabi_dmul+0x1dc>)
   33652:	e782      	b.n	3355a <__aeabi_dmul+0xce>
   33654:	465c      	mov	r4, fp
   33656:	464b      	mov	r3, r9
   33658:	9802      	ldr	r0, [sp, #8]
   3365a:	e76f      	b.n	3353c <__aeabi_dmul+0xb0>
   3365c:	465c      	mov	r4, fp
   3365e:	464b      	mov	r3, r9
   33660:	9501      	str	r5, [sp, #4]
   33662:	9802      	ldr	r0, [sp, #8]
   33664:	e76a      	b.n	3353c <__aeabi_dmul+0xb0>
   33666:	46c0      	nop			; (mov r8, r8)
   33668:	000007ff 	.word	0x000007ff
   3366c:	fffffc01 	.word	0xfffffc01
   33670:	000399a8 	.word	0x000399a8
   33674:	800fffff 	.word	0x800fffff
   33678:	fffffc0d 	.word	0xfffffc0d
   3367c:	464a      	mov	r2, r9
   3367e:	4649      	mov	r1, r9
   33680:	0c17      	lsrs	r7, r2, #16
   33682:	0c1a      	lsrs	r2, r3, #16
   33684:	041b      	lsls	r3, r3, #16
   33686:	0c1b      	lsrs	r3, r3, #16
   33688:	0408      	lsls	r0, r1, #16
   3368a:	0019      	movs	r1, r3
   3368c:	0c00      	lsrs	r0, r0, #16
   3368e:	4341      	muls	r1, r0
   33690:	0015      	movs	r5, r2
   33692:	4688      	mov	r8, r1
   33694:	0019      	movs	r1, r3
   33696:	437d      	muls	r5, r7
   33698:	4379      	muls	r1, r7
   3369a:	9503      	str	r5, [sp, #12]
   3369c:	4689      	mov	r9, r1
   3369e:	0029      	movs	r1, r5
   336a0:	0015      	movs	r5, r2
   336a2:	4345      	muls	r5, r0
   336a4:	444d      	add	r5, r9
   336a6:	9502      	str	r5, [sp, #8]
   336a8:	4645      	mov	r5, r8
   336aa:	0c2d      	lsrs	r5, r5, #16
   336ac:	46aa      	mov	sl, r5
   336ae:	9d02      	ldr	r5, [sp, #8]
   336b0:	4455      	add	r5, sl
   336b2:	45a9      	cmp	r9, r5
   336b4:	d906      	bls.n	336c4 <__aeabi_dmul+0x238>
   336b6:	468a      	mov	sl, r1
   336b8:	2180      	movs	r1, #128	; 0x80
   336ba:	0249      	lsls	r1, r1, #9
   336bc:	4689      	mov	r9, r1
   336be:	44ca      	add	sl, r9
   336c0:	4651      	mov	r1, sl
   336c2:	9103      	str	r1, [sp, #12]
   336c4:	0c29      	lsrs	r1, r5, #16
   336c6:	9104      	str	r1, [sp, #16]
   336c8:	4641      	mov	r1, r8
   336ca:	0409      	lsls	r1, r1, #16
   336cc:	042d      	lsls	r5, r5, #16
   336ce:	0c09      	lsrs	r1, r1, #16
   336d0:	4688      	mov	r8, r1
   336d2:	0029      	movs	r1, r5
   336d4:	0c25      	lsrs	r5, r4, #16
   336d6:	0424      	lsls	r4, r4, #16
   336d8:	4441      	add	r1, r8
   336da:	0c24      	lsrs	r4, r4, #16
   336dc:	9105      	str	r1, [sp, #20]
   336de:	0021      	movs	r1, r4
   336e0:	4341      	muls	r1, r0
   336e2:	4688      	mov	r8, r1
   336e4:	0021      	movs	r1, r4
   336e6:	4379      	muls	r1, r7
   336e8:	468a      	mov	sl, r1
   336ea:	4368      	muls	r0, r5
   336ec:	4641      	mov	r1, r8
   336ee:	4450      	add	r0, sl
   336f0:	4681      	mov	r9, r0
   336f2:	0c08      	lsrs	r0, r1, #16
   336f4:	4448      	add	r0, r9
   336f6:	436f      	muls	r7, r5
   336f8:	4582      	cmp	sl, r0
   336fa:	d903      	bls.n	33704 <__aeabi_dmul+0x278>
   336fc:	2180      	movs	r1, #128	; 0x80
   336fe:	0249      	lsls	r1, r1, #9
   33700:	4689      	mov	r9, r1
   33702:	444f      	add	r7, r9
   33704:	0c01      	lsrs	r1, r0, #16
   33706:	4689      	mov	r9, r1
   33708:	0039      	movs	r1, r7
   3370a:	4449      	add	r1, r9
   3370c:	9102      	str	r1, [sp, #8]
   3370e:	4641      	mov	r1, r8
   33710:	040f      	lsls	r7, r1, #16
   33712:	9904      	ldr	r1, [sp, #16]
   33714:	0c3f      	lsrs	r7, r7, #16
   33716:	4688      	mov	r8, r1
   33718:	0400      	lsls	r0, r0, #16
   3371a:	19c0      	adds	r0, r0, r7
   3371c:	4480      	add	r8, r0
   3371e:	4641      	mov	r1, r8
   33720:	9104      	str	r1, [sp, #16]
   33722:	4659      	mov	r1, fp
   33724:	0c0f      	lsrs	r7, r1, #16
   33726:	0409      	lsls	r1, r1, #16
   33728:	0c09      	lsrs	r1, r1, #16
   3372a:	4688      	mov	r8, r1
   3372c:	4359      	muls	r1, r3
   3372e:	468a      	mov	sl, r1
   33730:	0039      	movs	r1, r7
   33732:	4351      	muls	r1, r2
   33734:	4689      	mov	r9, r1
   33736:	4641      	mov	r1, r8
   33738:	434a      	muls	r2, r1
   3373a:	4651      	mov	r1, sl
   3373c:	0c09      	lsrs	r1, r1, #16
   3373e:	468b      	mov	fp, r1
   33740:	437b      	muls	r3, r7
   33742:	18d2      	adds	r2, r2, r3
   33744:	445a      	add	r2, fp
   33746:	4293      	cmp	r3, r2
   33748:	d903      	bls.n	33752 <__aeabi_dmul+0x2c6>
   3374a:	2380      	movs	r3, #128	; 0x80
   3374c:	025b      	lsls	r3, r3, #9
   3374e:	469b      	mov	fp, r3
   33750:	44d9      	add	r9, fp
   33752:	4651      	mov	r1, sl
   33754:	0409      	lsls	r1, r1, #16
   33756:	0c09      	lsrs	r1, r1, #16
   33758:	468a      	mov	sl, r1
   3375a:	4641      	mov	r1, r8
   3375c:	4361      	muls	r1, r4
   3375e:	437c      	muls	r4, r7
   33760:	0c13      	lsrs	r3, r2, #16
   33762:	0412      	lsls	r2, r2, #16
   33764:	444b      	add	r3, r9
   33766:	4452      	add	r2, sl
   33768:	46a1      	mov	r9, r4
   3376a:	468a      	mov	sl, r1
   3376c:	003c      	movs	r4, r7
   3376e:	4641      	mov	r1, r8
   33770:	436c      	muls	r4, r5
   33772:	434d      	muls	r5, r1
   33774:	4651      	mov	r1, sl
   33776:	444d      	add	r5, r9
   33778:	0c0f      	lsrs	r7, r1, #16
   3377a:	197d      	adds	r5, r7, r5
   3377c:	45a9      	cmp	r9, r5
   3377e:	d903      	bls.n	33788 <__aeabi_dmul+0x2fc>
   33780:	2180      	movs	r1, #128	; 0x80
   33782:	0249      	lsls	r1, r1, #9
   33784:	4688      	mov	r8, r1
   33786:	4444      	add	r4, r8
   33788:	9f04      	ldr	r7, [sp, #16]
   3378a:	9903      	ldr	r1, [sp, #12]
   3378c:	46b8      	mov	r8, r7
   3378e:	4441      	add	r1, r8
   33790:	468b      	mov	fp, r1
   33792:	4583      	cmp	fp, r0
   33794:	4180      	sbcs	r0, r0
   33796:	4241      	negs	r1, r0
   33798:	4688      	mov	r8, r1
   3379a:	4651      	mov	r1, sl
   3379c:	0408      	lsls	r0, r1, #16
   3379e:	042f      	lsls	r7, r5, #16
   337a0:	0c00      	lsrs	r0, r0, #16
   337a2:	183f      	adds	r7, r7, r0
   337a4:	4658      	mov	r0, fp
   337a6:	9902      	ldr	r1, [sp, #8]
   337a8:	1810      	adds	r0, r2, r0
   337aa:	4689      	mov	r9, r1
   337ac:	4290      	cmp	r0, r2
   337ae:	4192      	sbcs	r2, r2
   337b0:	444f      	add	r7, r9
   337b2:	46ba      	mov	sl, r7
   337b4:	4252      	negs	r2, r2
   337b6:	4699      	mov	r9, r3
   337b8:	4693      	mov	fp, r2
   337ba:	44c2      	add	sl, r8
   337bc:	44d1      	add	r9, sl
   337be:	44cb      	add	fp, r9
   337c0:	428f      	cmp	r7, r1
   337c2:	41bf      	sbcs	r7, r7
   337c4:	45c2      	cmp	sl, r8
   337c6:	4189      	sbcs	r1, r1
   337c8:	4599      	cmp	r9, r3
   337ca:	419b      	sbcs	r3, r3
   337cc:	4593      	cmp	fp, r2
   337ce:	4192      	sbcs	r2, r2
   337d0:	427f      	negs	r7, r7
   337d2:	4249      	negs	r1, r1
   337d4:	0c2d      	lsrs	r5, r5, #16
   337d6:	4252      	negs	r2, r2
   337d8:	430f      	orrs	r7, r1
   337da:	425b      	negs	r3, r3
   337dc:	4313      	orrs	r3, r2
   337de:	197f      	adds	r7, r7, r5
   337e0:	18ff      	adds	r7, r7, r3
   337e2:	465b      	mov	r3, fp
   337e4:	193c      	adds	r4, r7, r4
   337e6:	0ddb      	lsrs	r3, r3, #23
   337e8:	9a05      	ldr	r2, [sp, #20]
   337ea:	0264      	lsls	r4, r4, #9
   337ec:	431c      	orrs	r4, r3
   337ee:	0243      	lsls	r3, r0, #9
   337f0:	4313      	orrs	r3, r2
   337f2:	1e5d      	subs	r5, r3, #1
   337f4:	41ab      	sbcs	r3, r5
   337f6:	465a      	mov	r2, fp
   337f8:	0dc0      	lsrs	r0, r0, #23
   337fa:	4303      	orrs	r3, r0
   337fc:	0252      	lsls	r2, r2, #9
   337fe:	4313      	orrs	r3, r2
   33800:	01e2      	lsls	r2, r4, #7
   33802:	d556      	bpl.n	338b2 <__aeabi_dmul+0x426>
   33804:	2001      	movs	r0, #1
   33806:	085a      	lsrs	r2, r3, #1
   33808:	4003      	ands	r3, r0
   3380a:	4313      	orrs	r3, r2
   3380c:	07e2      	lsls	r2, r4, #31
   3380e:	4313      	orrs	r3, r2
   33810:	0864      	lsrs	r4, r4, #1
   33812:	485a      	ldr	r0, [pc, #360]	; (3397c <__aeabi_dmul+0x4f0>)
   33814:	4460      	add	r0, ip
   33816:	2800      	cmp	r0, #0
   33818:	dd4d      	ble.n	338b6 <__aeabi_dmul+0x42a>
   3381a:	075a      	lsls	r2, r3, #29
   3381c:	d009      	beq.n	33832 <__aeabi_dmul+0x3a6>
   3381e:	220f      	movs	r2, #15
   33820:	401a      	ands	r2, r3
   33822:	2a04      	cmp	r2, #4
   33824:	d005      	beq.n	33832 <__aeabi_dmul+0x3a6>
   33826:	1d1a      	adds	r2, r3, #4
   33828:	429a      	cmp	r2, r3
   3382a:	419b      	sbcs	r3, r3
   3382c:	425b      	negs	r3, r3
   3382e:	18e4      	adds	r4, r4, r3
   33830:	0013      	movs	r3, r2
   33832:	01e2      	lsls	r2, r4, #7
   33834:	d504      	bpl.n	33840 <__aeabi_dmul+0x3b4>
   33836:	2080      	movs	r0, #128	; 0x80
   33838:	4a51      	ldr	r2, [pc, #324]	; (33980 <__aeabi_dmul+0x4f4>)
   3383a:	00c0      	lsls	r0, r0, #3
   3383c:	4014      	ands	r4, r2
   3383e:	4460      	add	r0, ip
   33840:	4a50      	ldr	r2, [pc, #320]	; (33984 <__aeabi_dmul+0x4f8>)
   33842:	4290      	cmp	r0, r2
   33844:	dd00      	ble.n	33848 <__aeabi_dmul+0x3bc>
   33846:	e6e3      	b.n	33610 <__aeabi_dmul+0x184>
   33848:	2501      	movs	r5, #1
   3384a:	08db      	lsrs	r3, r3, #3
   3384c:	0762      	lsls	r2, r4, #29
   3384e:	431a      	orrs	r2, r3
   33850:	0264      	lsls	r4, r4, #9
   33852:	9b01      	ldr	r3, [sp, #4]
   33854:	4691      	mov	r9, r2
   33856:	0b22      	lsrs	r2, r4, #12
   33858:	0544      	lsls	r4, r0, #21
   3385a:	0d64      	lsrs	r4, r4, #21
   3385c:	401d      	ands	r5, r3
   3385e:	e67c      	b.n	3355a <__aeabi_dmul+0xce>
   33860:	2280      	movs	r2, #128	; 0x80
   33862:	4659      	mov	r1, fp
   33864:	0312      	lsls	r2, r2, #12
   33866:	4211      	tst	r1, r2
   33868:	d008      	beq.n	3387c <__aeabi_dmul+0x3f0>
   3386a:	4214      	tst	r4, r2
   3386c:	d106      	bne.n	3387c <__aeabi_dmul+0x3f0>
   3386e:	4322      	orrs	r2, r4
   33870:	0312      	lsls	r2, r2, #12
   33872:	0b12      	lsrs	r2, r2, #12
   33874:	4645      	mov	r5, r8
   33876:	4699      	mov	r9, r3
   33878:	4c43      	ldr	r4, [pc, #268]	; (33988 <__aeabi_dmul+0x4fc>)
   3387a:	e66e      	b.n	3355a <__aeabi_dmul+0xce>
   3387c:	465b      	mov	r3, fp
   3387e:	431a      	orrs	r2, r3
   33880:	0312      	lsls	r2, r2, #12
   33882:	0b12      	lsrs	r2, r2, #12
   33884:	4c40      	ldr	r4, [pc, #256]	; (33988 <__aeabi_dmul+0x4fc>)
   33886:	e668      	b.n	3355a <__aeabi_dmul+0xce>
   33888:	0003      	movs	r3, r0
   3388a:	4654      	mov	r4, sl
   3388c:	3b28      	subs	r3, #40	; 0x28
   3388e:	409c      	lsls	r4, r3
   33890:	2300      	movs	r3, #0
   33892:	e6b9      	b.n	33608 <__aeabi_dmul+0x17c>
   33894:	f000 fcc8 	bl	34228 <__clzsi2>
   33898:	3020      	adds	r0, #32
   3389a:	e6a6      	b.n	335ea <__aeabi_dmul+0x15e>
   3389c:	0003      	movs	r3, r0
   3389e:	3b28      	subs	r3, #40	; 0x28
   338a0:	409f      	lsls	r7, r3
   338a2:	2300      	movs	r3, #0
   338a4:	46bb      	mov	fp, r7
   338a6:	4699      	mov	r9, r3
   338a8:	e68a      	b.n	335c0 <__aeabi_dmul+0x134>
   338aa:	f000 fcbd 	bl	34228 <__clzsi2>
   338ae:	3020      	adds	r0, #32
   338b0:	e674      	b.n	3359c <__aeabi_dmul+0x110>
   338b2:	46b4      	mov	ip, r6
   338b4:	e7ad      	b.n	33812 <__aeabi_dmul+0x386>
   338b6:	2501      	movs	r5, #1
   338b8:	1a2a      	subs	r2, r5, r0
   338ba:	2a38      	cmp	r2, #56	; 0x38
   338bc:	dd06      	ble.n	338cc <__aeabi_dmul+0x440>
   338be:	9b01      	ldr	r3, [sp, #4]
   338c0:	2400      	movs	r4, #0
   338c2:	401d      	ands	r5, r3
   338c4:	2300      	movs	r3, #0
   338c6:	2200      	movs	r2, #0
   338c8:	4699      	mov	r9, r3
   338ca:	e646      	b.n	3355a <__aeabi_dmul+0xce>
   338cc:	2a1f      	cmp	r2, #31
   338ce:	dc21      	bgt.n	33914 <__aeabi_dmul+0x488>
   338d0:	2520      	movs	r5, #32
   338d2:	0020      	movs	r0, r4
   338d4:	1aad      	subs	r5, r5, r2
   338d6:	001e      	movs	r6, r3
   338d8:	40ab      	lsls	r3, r5
   338da:	40a8      	lsls	r0, r5
   338dc:	40d6      	lsrs	r6, r2
   338de:	1e5d      	subs	r5, r3, #1
   338e0:	41ab      	sbcs	r3, r5
   338e2:	4330      	orrs	r0, r6
   338e4:	4318      	orrs	r0, r3
   338e6:	40d4      	lsrs	r4, r2
   338e8:	0743      	lsls	r3, r0, #29
   338ea:	d009      	beq.n	33900 <__aeabi_dmul+0x474>
   338ec:	230f      	movs	r3, #15
   338ee:	4003      	ands	r3, r0
   338f0:	2b04      	cmp	r3, #4
   338f2:	d005      	beq.n	33900 <__aeabi_dmul+0x474>
   338f4:	0003      	movs	r3, r0
   338f6:	1d18      	adds	r0, r3, #4
   338f8:	4298      	cmp	r0, r3
   338fa:	419b      	sbcs	r3, r3
   338fc:	425b      	negs	r3, r3
   338fe:	18e4      	adds	r4, r4, r3
   33900:	0223      	lsls	r3, r4, #8
   33902:	d521      	bpl.n	33948 <__aeabi_dmul+0x4bc>
   33904:	2501      	movs	r5, #1
   33906:	9b01      	ldr	r3, [sp, #4]
   33908:	2401      	movs	r4, #1
   3390a:	401d      	ands	r5, r3
   3390c:	2300      	movs	r3, #0
   3390e:	2200      	movs	r2, #0
   33910:	4699      	mov	r9, r3
   33912:	e622      	b.n	3355a <__aeabi_dmul+0xce>
   33914:	251f      	movs	r5, #31
   33916:	0021      	movs	r1, r4
   33918:	426d      	negs	r5, r5
   3391a:	1a28      	subs	r0, r5, r0
   3391c:	40c1      	lsrs	r1, r0
   3391e:	0008      	movs	r0, r1
   33920:	2a20      	cmp	r2, #32
   33922:	d01d      	beq.n	33960 <__aeabi_dmul+0x4d4>
   33924:	355f      	adds	r5, #95	; 0x5f
   33926:	1aaa      	subs	r2, r5, r2
   33928:	4094      	lsls	r4, r2
   3392a:	4323      	orrs	r3, r4
   3392c:	1e5c      	subs	r4, r3, #1
   3392e:	41a3      	sbcs	r3, r4
   33930:	2507      	movs	r5, #7
   33932:	4303      	orrs	r3, r0
   33934:	401d      	ands	r5, r3
   33936:	2200      	movs	r2, #0
   33938:	2d00      	cmp	r5, #0
   3393a:	d009      	beq.n	33950 <__aeabi_dmul+0x4c4>
   3393c:	220f      	movs	r2, #15
   3393e:	2400      	movs	r4, #0
   33940:	401a      	ands	r2, r3
   33942:	0018      	movs	r0, r3
   33944:	2a04      	cmp	r2, #4
   33946:	d1d6      	bne.n	338f6 <__aeabi_dmul+0x46a>
   33948:	0003      	movs	r3, r0
   3394a:	0765      	lsls	r5, r4, #29
   3394c:	0264      	lsls	r4, r4, #9
   3394e:	0b22      	lsrs	r2, r4, #12
   33950:	08db      	lsrs	r3, r3, #3
   33952:	432b      	orrs	r3, r5
   33954:	2501      	movs	r5, #1
   33956:	4699      	mov	r9, r3
   33958:	9b01      	ldr	r3, [sp, #4]
   3395a:	2400      	movs	r4, #0
   3395c:	401d      	ands	r5, r3
   3395e:	e5fc      	b.n	3355a <__aeabi_dmul+0xce>
   33960:	2400      	movs	r4, #0
   33962:	e7e2      	b.n	3392a <__aeabi_dmul+0x49e>
   33964:	2280      	movs	r2, #128	; 0x80
   33966:	2501      	movs	r5, #1
   33968:	0312      	lsls	r2, r2, #12
   3396a:	4322      	orrs	r2, r4
   3396c:	9901      	ldr	r1, [sp, #4]
   3396e:	0312      	lsls	r2, r2, #12
   33970:	0b12      	lsrs	r2, r2, #12
   33972:	400d      	ands	r5, r1
   33974:	4699      	mov	r9, r3
   33976:	4c04      	ldr	r4, [pc, #16]	; (33988 <__aeabi_dmul+0x4fc>)
   33978:	e5ef      	b.n	3355a <__aeabi_dmul+0xce>
   3397a:	46c0      	nop			; (mov r8, r8)
   3397c:	000003ff 	.word	0x000003ff
   33980:	feffffff 	.word	0xfeffffff
   33984:	000007fe 	.word	0x000007fe
   33988:	000007ff 	.word	0x000007ff

0003398c <__aeabi_dsub>:
   3398c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3398e:	4646      	mov	r6, r8
   33990:	46d6      	mov	lr, sl
   33992:	464f      	mov	r7, r9
   33994:	030c      	lsls	r4, r1, #12
   33996:	b5c0      	push	{r6, r7, lr}
   33998:	0fcd      	lsrs	r5, r1, #31
   3399a:	004e      	lsls	r6, r1, #1
   3399c:	0a61      	lsrs	r1, r4, #9
   3399e:	0f44      	lsrs	r4, r0, #29
   339a0:	430c      	orrs	r4, r1
   339a2:	00c1      	lsls	r1, r0, #3
   339a4:	0058      	lsls	r0, r3, #1
   339a6:	0d40      	lsrs	r0, r0, #21
   339a8:	4684      	mov	ip, r0
   339aa:	468a      	mov	sl, r1
   339ac:	000f      	movs	r7, r1
   339ae:	0319      	lsls	r1, r3, #12
   339b0:	0f50      	lsrs	r0, r2, #29
   339b2:	0a49      	lsrs	r1, r1, #9
   339b4:	4301      	orrs	r1, r0
   339b6:	48c6      	ldr	r0, [pc, #792]	; (33cd0 <__aeabi_dsub+0x344>)
   339b8:	0d76      	lsrs	r6, r6, #21
   339ba:	46a8      	mov	r8, r5
   339bc:	0fdb      	lsrs	r3, r3, #31
   339be:	00d2      	lsls	r2, r2, #3
   339c0:	4584      	cmp	ip, r0
   339c2:	d100      	bne.n	339c6 <__aeabi_dsub+0x3a>
   339c4:	e0d8      	b.n	33b78 <__aeabi_dsub+0x1ec>
   339c6:	2001      	movs	r0, #1
   339c8:	4043      	eors	r3, r0
   339ca:	42ab      	cmp	r3, r5
   339cc:	d100      	bne.n	339d0 <__aeabi_dsub+0x44>
   339ce:	e0a6      	b.n	33b1e <__aeabi_dsub+0x192>
   339d0:	4660      	mov	r0, ip
   339d2:	1a35      	subs	r5, r6, r0
   339d4:	2d00      	cmp	r5, #0
   339d6:	dc00      	bgt.n	339da <__aeabi_dsub+0x4e>
   339d8:	e105      	b.n	33be6 <__aeabi_dsub+0x25a>
   339da:	2800      	cmp	r0, #0
   339dc:	d110      	bne.n	33a00 <__aeabi_dsub+0x74>
   339de:	000b      	movs	r3, r1
   339e0:	4313      	orrs	r3, r2
   339e2:	d100      	bne.n	339e6 <__aeabi_dsub+0x5a>
   339e4:	e0d7      	b.n	33b96 <__aeabi_dsub+0x20a>
   339e6:	1e6b      	subs	r3, r5, #1
   339e8:	2b00      	cmp	r3, #0
   339ea:	d000      	beq.n	339ee <__aeabi_dsub+0x62>
   339ec:	e14b      	b.n	33c86 <__aeabi_dsub+0x2fa>
   339ee:	4653      	mov	r3, sl
   339f0:	1a9f      	subs	r7, r3, r2
   339f2:	45ba      	cmp	sl, r7
   339f4:	4180      	sbcs	r0, r0
   339f6:	1a64      	subs	r4, r4, r1
   339f8:	4240      	negs	r0, r0
   339fa:	1a24      	subs	r4, r4, r0
   339fc:	2601      	movs	r6, #1
   339fe:	e01e      	b.n	33a3e <__aeabi_dsub+0xb2>
   33a00:	4bb3      	ldr	r3, [pc, #716]	; (33cd0 <__aeabi_dsub+0x344>)
   33a02:	429e      	cmp	r6, r3
   33a04:	d048      	beq.n	33a98 <__aeabi_dsub+0x10c>
   33a06:	2380      	movs	r3, #128	; 0x80
   33a08:	041b      	lsls	r3, r3, #16
   33a0a:	4319      	orrs	r1, r3
   33a0c:	2d38      	cmp	r5, #56	; 0x38
   33a0e:	dd00      	ble.n	33a12 <__aeabi_dsub+0x86>
   33a10:	e119      	b.n	33c46 <__aeabi_dsub+0x2ba>
   33a12:	2d1f      	cmp	r5, #31
   33a14:	dd00      	ble.n	33a18 <__aeabi_dsub+0x8c>
   33a16:	e14c      	b.n	33cb2 <__aeabi_dsub+0x326>
   33a18:	2320      	movs	r3, #32
   33a1a:	000f      	movs	r7, r1
   33a1c:	1b5b      	subs	r3, r3, r5
   33a1e:	0010      	movs	r0, r2
   33a20:	409a      	lsls	r2, r3
   33a22:	409f      	lsls	r7, r3
   33a24:	40e8      	lsrs	r0, r5
   33a26:	1e53      	subs	r3, r2, #1
   33a28:	419a      	sbcs	r2, r3
   33a2a:	40e9      	lsrs	r1, r5
   33a2c:	4307      	orrs	r7, r0
   33a2e:	4317      	orrs	r7, r2
   33a30:	4653      	mov	r3, sl
   33a32:	1bdf      	subs	r7, r3, r7
   33a34:	1a61      	subs	r1, r4, r1
   33a36:	45ba      	cmp	sl, r7
   33a38:	41a4      	sbcs	r4, r4
   33a3a:	4264      	negs	r4, r4
   33a3c:	1b0c      	subs	r4, r1, r4
   33a3e:	0223      	lsls	r3, r4, #8
   33a40:	d400      	bmi.n	33a44 <__aeabi_dsub+0xb8>
   33a42:	e0c5      	b.n	33bd0 <__aeabi_dsub+0x244>
   33a44:	0264      	lsls	r4, r4, #9
   33a46:	0a65      	lsrs	r5, r4, #9
   33a48:	2d00      	cmp	r5, #0
   33a4a:	d100      	bne.n	33a4e <__aeabi_dsub+0xc2>
   33a4c:	e0f6      	b.n	33c3c <__aeabi_dsub+0x2b0>
   33a4e:	0028      	movs	r0, r5
   33a50:	f000 fbea 	bl	34228 <__clzsi2>
   33a54:	0003      	movs	r3, r0
   33a56:	3b08      	subs	r3, #8
   33a58:	2b1f      	cmp	r3, #31
   33a5a:	dd00      	ble.n	33a5e <__aeabi_dsub+0xd2>
   33a5c:	e0e9      	b.n	33c32 <__aeabi_dsub+0x2a6>
   33a5e:	2220      	movs	r2, #32
   33a60:	003c      	movs	r4, r7
   33a62:	1ad2      	subs	r2, r2, r3
   33a64:	409d      	lsls	r5, r3
   33a66:	40d4      	lsrs	r4, r2
   33a68:	409f      	lsls	r7, r3
   33a6a:	4325      	orrs	r5, r4
   33a6c:	429e      	cmp	r6, r3
   33a6e:	dd00      	ble.n	33a72 <__aeabi_dsub+0xe6>
   33a70:	e0db      	b.n	33c2a <__aeabi_dsub+0x29e>
   33a72:	1b9e      	subs	r6, r3, r6
   33a74:	1c73      	adds	r3, r6, #1
   33a76:	2b1f      	cmp	r3, #31
   33a78:	dd00      	ble.n	33a7c <__aeabi_dsub+0xf0>
   33a7a:	e10a      	b.n	33c92 <__aeabi_dsub+0x306>
   33a7c:	2220      	movs	r2, #32
   33a7e:	0038      	movs	r0, r7
   33a80:	1ad2      	subs	r2, r2, r3
   33a82:	0029      	movs	r1, r5
   33a84:	4097      	lsls	r7, r2
   33a86:	002c      	movs	r4, r5
   33a88:	4091      	lsls	r1, r2
   33a8a:	40d8      	lsrs	r0, r3
   33a8c:	1e7a      	subs	r2, r7, #1
   33a8e:	4197      	sbcs	r7, r2
   33a90:	40dc      	lsrs	r4, r3
   33a92:	2600      	movs	r6, #0
   33a94:	4301      	orrs	r1, r0
   33a96:	430f      	orrs	r7, r1
   33a98:	077b      	lsls	r3, r7, #29
   33a9a:	d009      	beq.n	33ab0 <__aeabi_dsub+0x124>
   33a9c:	230f      	movs	r3, #15
   33a9e:	403b      	ands	r3, r7
   33aa0:	2b04      	cmp	r3, #4
   33aa2:	d005      	beq.n	33ab0 <__aeabi_dsub+0x124>
   33aa4:	1d3b      	adds	r3, r7, #4
   33aa6:	42bb      	cmp	r3, r7
   33aa8:	41bf      	sbcs	r7, r7
   33aaa:	427f      	negs	r7, r7
   33aac:	19e4      	adds	r4, r4, r7
   33aae:	001f      	movs	r7, r3
   33ab0:	0223      	lsls	r3, r4, #8
   33ab2:	d525      	bpl.n	33b00 <__aeabi_dsub+0x174>
   33ab4:	4b86      	ldr	r3, [pc, #536]	; (33cd0 <__aeabi_dsub+0x344>)
   33ab6:	3601      	adds	r6, #1
   33ab8:	429e      	cmp	r6, r3
   33aba:	d100      	bne.n	33abe <__aeabi_dsub+0x132>
   33abc:	e0af      	b.n	33c1e <__aeabi_dsub+0x292>
   33abe:	4b85      	ldr	r3, [pc, #532]	; (33cd4 <__aeabi_dsub+0x348>)
   33ac0:	2501      	movs	r5, #1
   33ac2:	401c      	ands	r4, r3
   33ac4:	4643      	mov	r3, r8
   33ac6:	0762      	lsls	r2, r4, #29
   33ac8:	08ff      	lsrs	r7, r7, #3
   33aca:	0264      	lsls	r4, r4, #9
   33acc:	0576      	lsls	r6, r6, #21
   33ace:	4317      	orrs	r7, r2
   33ad0:	0b24      	lsrs	r4, r4, #12
   33ad2:	0d76      	lsrs	r6, r6, #21
   33ad4:	401d      	ands	r5, r3
   33ad6:	2100      	movs	r1, #0
   33ad8:	0324      	lsls	r4, r4, #12
   33ada:	0b23      	lsrs	r3, r4, #12
   33adc:	0d0c      	lsrs	r4, r1, #20
   33ade:	4a7e      	ldr	r2, [pc, #504]	; (33cd8 <__aeabi_dsub+0x34c>)
   33ae0:	0524      	lsls	r4, r4, #20
   33ae2:	431c      	orrs	r4, r3
   33ae4:	4014      	ands	r4, r2
   33ae6:	0533      	lsls	r3, r6, #20
   33ae8:	4323      	orrs	r3, r4
   33aea:	005b      	lsls	r3, r3, #1
   33aec:	07ed      	lsls	r5, r5, #31
   33aee:	085b      	lsrs	r3, r3, #1
   33af0:	432b      	orrs	r3, r5
   33af2:	0038      	movs	r0, r7
   33af4:	0019      	movs	r1, r3
   33af6:	bc1c      	pop	{r2, r3, r4}
   33af8:	4690      	mov	r8, r2
   33afa:	4699      	mov	r9, r3
   33afc:	46a2      	mov	sl, r4
   33afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33b00:	2501      	movs	r5, #1
   33b02:	4643      	mov	r3, r8
   33b04:	0762      	lsls	r2, r4, #29
   33b06:	08ff      	lsrs	r7, r7, #3
   33b08:	4317      	orrs	r7, r2
   33b0a:	08e4      	lsrs	r4, r4, #3
   33b0c:	401d      	ands	r5, r3
   33b0e:	4b70      	ldr	r3, [pc, #448]	; (33cd0 <__aeabi_dsub+0x344>)
   33b10:	429e      	cmp	r6, r3
   33b12:	d036      	beq.n	33b82 <__aeabi_dsub+0x1f6>
   33b14:	0324      	lsls	r4, r4, #12
   33b16:	0576      	lsls	r6, r6, #21
   33b18:	0b24      	lsrs	r4, r4, #12
   33b1a:	0d76      	lsrs	r6, r6, #21
   33b1c:	e7db      	b.n	33ad6 <__aeabi_dsub+0x14a>
   33b1e:	4663      	mov	r3, ip
   33b20:	1af3      	subs	r3, r6, r3
   33b22:	2b00      	cmp	r3, #0
   33b24:	dc00      	bgt.n	33b28 <__aeabi_dsub+0x19c>
   33b26:	e094      	b.n	33c52 <__aeabi_dsub+0x2c6>
   33b28:	4660      	mov	r0, ip
   33b2a:	2800      	cmp	r0, #0
   33b2c:	d035      	beq.n	33b9a <__aeabi_dsub+0x20e>
   33b2e:	4868      	ldr	r0, [pc, #416]	; (33cd0 <__aeabi_dsub+0x344>)
   33b30:	4286      	cmp	r6, r0
   33b32:	d0b1      	beq.n	33a98 <__aeabi_dsub+0x10c>
   33b34:	2780      	movs	r7, #128	; 0x80
   33b36:	043f      	lsls	r7, r7, #16
   33b38:	4339      	orrs	r1, r7
   33b3a:	2b38      	cmp	r3, #56	; 0x38
   33b3c:	dc00      	bgt.n	33b40 <__aeabi_dsub+0x1b4>
   33b3e:	e0fd      	b.n	33d3c <__aeabi_dsub+0x3b0>
   33b40:	430a      	orrs	r2, r1
   33b42:	0017      	movs	r7, r2
   33b44:	2100      	movs	r1, #0
   33b46:	1e7a      	subs	r2, r7, #1
   33b48:	4197      	sbcs	r7, r2
   33b4a:	4457      	add	r7, sl
   33b4c:	4557      	cmp	r7, sl
   33b4e:	4180      	sbcs	r0, r0
   33b50:	1909      	adds	r1, r1, r4
   33b52:	4244      	negs	r4, r0
   33b54:	190c      	adds	r4, r1, r4
   33b56:	0223      	lsls	r3, r4, #8
   33b58:	d53a      	bpl.n	33bd0 <__aeabi_dsub+0x244>
   33b5a:	4b5d      	ldr	r3, [pc, #372]	; (33cd0 <__aeabi_dsub+0x344>)
   33b5c:	3601      	adds	r6, #1
   33b5e:	429e      	cmp	r6, r3
   33b60:	d100      	bne.n	33b64 <__aeabi_dsub+0x1d8>
   33b62:	e14b      	b.n	33dfc <__aeabi_dsub+0x470>
   33b64:	2201      	movs	r2, #1
   33b66:	4b5b      	ldr	r3, [pc, #364]	; (33cd4 <__aeabi_dsub+0x348>)
   33b68:	401c      	ands	r4, r3
   33b6a:	087b      	lsrs	r3, r7, #1
   33b6c:	4017      	ands	r7, r2
   33b6e:	431f      	orrs	r7, r3
   33b70:	07e2      	lsls	r2, r4, #31
   33b72:	4317      	orrs	r7, r2
   33b74:	0864      	lsrs	r4, r4, #1
   33b76:	e78f      	b.n	33a98 <__aeabi_dsub+0x10c>
   33b78:	0008      	movs	r0, r1
   33b7a:	4310      	orrs	r0, r2
   33b7c:	d000      	beq.n	33b80 <__aeabi_dsub+0x1f4>
   33b7e:	e724      	b.n	339ca <__aeabi_dsub+0x3e>
   33b80:	e721      	b.n	339c6 <__aeabi_dsub+0x3a>
   33b82:	0023      	movs	r3, r4
   33b84:	433b      	orrs	r3, r7
   33b86:	d100      	bne.n	33b8a <__aeabi_dsub+0x1fe>
   33b88:	e1b9      	b.n	33efe <__aeabi_dsub+0x572>
   33b8a:	2280      	movs	r2, #128	; 0x80
   33b8c:	0312      	lsls	r2, r2, #12
   33b8e:	4314      	orrs	r4, r2
   33b90:	0324      	lsls	r4, r4, #12
   33b92:	0b24      	lsrs	r4, r4, #12
   33b94:	e79f      	b.n	33ad6 <__aeabi_dsub+0x14a>
   33b96:	002e      	movs	r6, r5
   33b98:	e77e      	b.n	33a98 <__aeabi_dsub+0x10c>
   33b9a:	0008      	movs	r0, r1
   33b9c:	4310      	orrs	r0, r2
   33b9e:	d100      	bne.n	33ba2 <__aeabi_dsub+0x216>
   33ba0:	e0ca      	b.n	33d38 <__aeabi_dsub+0x3ac>
   33ba2:	1e58      	subs	r0, r3, #1
   33ba4:	4684      	mov	ip, r0
   33ba6:	2800      	cmp	r0, #0
   33ba8:	d000      	beq.n	33bac <__aeabi_dsub+0x220>
   33baa:	e0e7      	b.n	33d7c <__aeabi_dsub+0x3f0>
   33bac:	4452      	add	r2, sl
   33bae:	4552      	cmp	r2, sl
   33bb0:	4180      	sbcs	r0, r0
   33bb2:	1864      	adds	r4, r4, r1
   33bb4:	4240      	negs	r0, r0
   33bb6:	1824      	adds	r4, r4, r0
   33bb8:	0017      	movs	r7, r2
   33bba:	2601      	movs	r6, #1
   33bbc:	0223      	lsls	r3, r4, #8
   33bbe:	d507      	bpl.n	33bd0 <__aeabi_dsub+0x244>
   33bc0:	2602      	movs	r6, #2
   33bc2:	e7cf      	b.n	33b64 <__aeabi_dsub+0x1d8>
   33bc4:	4664      	mov	r4, ip
   33bc6:	432c      	orrs	r4, r5
   33bc8:	d100      	bne.n	33bcc <__aeabi_dsub+0x240>
   33bca:	e1b3      	b.n	33f34 <__aeabi_dsub+0x5a8>
   33bcc:	002c      	movs	r4, r5
   33bce:	4667      	mov	r7, ip
   33bd0:	077b      	lsls	r3, r7, #29
   33bd2:	d000      	beq.n	33bd6 <__aeabi_dsub+0x24a>
   33bd4:	e762      	b.n	33a9c <__aeabi_dsub+0x110>
   33bd6:	0763      	lsls	r3, r4, #29
   33bd8:	08ff      	lsrs	r7, r7, #3
   33bda:	431f      	orrs	r7, r3
   33bdc:	2501      	movs	r5, #1
   33bde:	4643      	mov	r3, r8
   33be0:	08e4      	lsrs	r4, r4, #3
   33be2:	401d      	ands	r5, r3
   33be4:	e793      	b.n	33b0e <__aeabi_dsub+0x182>
   33be6:	2d00      	cmp	r5, #0
   33be8:	d178      	bne.n	33cdc <__aeabi_dsub+0x350>
   33bea:	1c75      	adds	r5, r6, #1
   33bec:	056d      	lsls	r5, r5, #21
   33bee:	0d6d      	lsrs	r5, r5, #21
   33bf0:	2d01      	cmp	r5, #1
   33bf2:	dc00      	bgt.n	33bf6 <__aeabi_dsub+0x26a>
   33bf4:	e0f2      	b.n	33ddc <__aeabi_dsub+0x450>
   33bf6:	4650      	mov	r0, sl
   33bf8:	1a80      	subs	r0, r0, r2
   33bfa:	4582      	cmp	sl, r0
   33bfc:	41bf      	sbcs	r7, r7
   33bfe:	1a65      	subs	r5, r4, r1
   33c00:	427f      	negs	r7, r7
   33c02:	1bed      	subs	r5, r5, r7
   33c04:	4684      	mov	ip, r0
   33c06:	0228      	lsls	r0, r5, #8
   33c08:	d400      	bmi.n	33c0c <__aeabi_dsub+0x280>
   33c0a:	e08c      	b.n	33d26 <__aeabi_dsub+0x39a>
   33c0c:	4650      	mov	r0, sl
   33c0e:	1a17      	subs	r7, r2, r0
   33c10:	42ba      	cmp	r2, r7
   33c12:	4192      	sbcs	r2, r2
   33c14:	1b0c      	subs	r4, r1, r4
   33c16:	4255      	negs	r5, r2
   33c18:	1b65      	subs	r5, r4, r5
   33c1a:	4698      	mov	r8, r3
   33c1c:	e714      	b.n	33a48 <__aeabi_dsub+0xbc>
   33c1e:	2501      	movs	r5, #1
   33c20:	4643      	mov	r3, r8
   33c22:	2400      	movs	r4, #0
   33c24:	401d      	ands	r5, r3
   33c26:	2700      	movs	r7, #0
   33c28:	e755      	b.n	33ad6 <__aeabi_dsub+0x14a>
   33c2a:	4c2a      	ldr	r4, [pc, #168]	; (33cd4 <__aeabi_dsub+0x348>)
   33c2c:	1af6      	subs	r6, r6, r3
   33c2e:	402c      	ands	r4, r5
   33c30:	e732      	b.n	33a98 <__aeabi_dsub+0x10c>
   33c32:	003d      	movs	r5, r7
   33c34:	3828      	subs	r0, #40	; 0x28
   33c36:	4085      	lsls	r5, r0
   33c38:	2700      	movs	r7, #0
   33c3a:	e717      	b.n	33a6c <__aeabi_dsub+0xe0>
   33c3c:	0038      	movs	r0, r7
   33c3e:	f000 faf3 	bl	34228 <__clzsi2>
   33c42:	3020      	adds	r0, #32
   33c44:	e706      	b.n	33a54 <__aeabi_dsub+0xc8>
   33c46:	430a      	orrs	r2, r1
   33c48:	0017      	movs	r7, r2
   33c4a:	2100      	movs	r1, #0
   33c4c:	1e7a      	subs	r2, r7, #1
   33c4e:	4197      	sbcs	r7, r2
   33c50:	e6ee      	b.n	33a30 <__aeabi_dsub+0xa4>
   33c52:	2b00      	cmp	r3, #0
   33c54:	d000      	beq.n	33c58 <__aeabi_dsub+0x2cc>
   33c56:	e0e5      	b.n	33e24 <__aeabi_dsub+0x498>
   33c58:	1c73      	adds	r3, r6, #1
   33c5a:	469c      	mov	ip, r3
   33c5c:	055b      	lsls	r3, r3, #21
   33c5e:	0d5b      	lsrs	r3, r3, #21
   33c60:	2b01      	cmp	r3, #1
   33c62:	dc00      	bgt.n	33c66 <__aeabi_dsub+0x2da>
   33c64:	e09f      	b.n	33da6 <__aeabi_dsub+0x41a>
   33c66:	4b1a      	ldr	r3, [pc, #104]	; (33cd0 <__aeabi_dsub+0x344>)
   33c68:	459c      	cmp	ip, r3
   33c6a:	d100      	bne.n	33c6e <__aeabi_dsub+0x2e2>
   33c6c:	e0c5      	b.n	33dfa <__aeabi_dsub+0x46e>
   33c6e:	4452      	add	r2, sl
   33c70:	4552      	cmp	r2, sl
   33c72:	4180      	sbcs	r0, r0
   33c74:	1864      	adds	r4, r4, r1
   33c76:	4240      	negs	r0, r0
   33c78:	1824      	adds	r4, r4, r0
   33c7a:	07e7      	lsls	r7, r4, #31
   33c7c:	0852      	lsrs	r2, r2, #1
   33c7e:	4317      	orrs	r7, r2
   33c80:	0864      	lsrs	r4, r4, #1
   33c82:	4666      	mov	r6, ip
   33c84:	e708      	b.n	33a98 <__aeabi_dsub+0x10c>
   33c86:	4812      	ldr	r0, [pc, #72]	; (33cd0 <__aeabi_dsub+0x344>)
   33c88:	4285      	cmp	r5, r0
   33c8a:	d100      	bne.n	33c8e <__aeabi_dsub+0x302>
   33c8c:	e085      	b.n	33d9a <__aeabi_dsub+0x40e>
   33c8e:	001d      	movs	r5, r3
   33c90:	e6bc      	b.n	33a0c <__aeabi_dsub+0x80>
   33c92:	0029      	movs	r1, r5
   33c94:	3e1f      	subs	r6, #31
   33c96:	40f1      	lsrs	r1, r6
   33c98:	2b20      	cmp	r3, #32
   33c9a:	d100      	bne.n	33c9e <__aeabi_dsub+0x312>
   33c9c:	e07f      	b.n	33d9e <__aeabi_dsub+0x412>
   33c9e:	2240      	movs	r2, #64	; 0x40
   33ca0:	1ad3      	subs	r3, r2, r3
   33ca2:	409d      	lsls	r5, r3
   33ca4:	432f      	orrs	r7, r5
   33ca6:	1e7d      	subs	r5, r7, #1
   33ca8:	41af      	sbcs	r7, r5
   33caa:	2400      	movs	r4, #0
   33cac:	430f      	orrs	r7, r1
   33cae:	2600      	movs	r6, #0
   33cb0:	e78e      	b.n	33bd0 <__aeabi_dsub+0x244>
   33cb2:	002b      	movs	r3, r5
   33cb4:	000f      	movs	r7, r1
   33cb6:	3b20      	subs	r3, #32
   33cb8:	40df      	lsrs	r7, r3
   33cba:	2d20      	cmp	r5, #32
   33cbc:	d071      	beq.n	33da2 <__aeabi_dsub+0x416>
   33cbe:	2340      	movs	r3, #64	; 0x40
   33cc0:	1b5d      	subs	r5, r3, r5
   33cc2:	40a9      	lsls	r1, r5
   33cc4:	430a      	orrs	r2, r1
   33cc6:	1e51      	subs	r1, r2, #1
   33cc8:	418a      	sbcs	r2, r1
   33cca:	2100      	movs	r1, #0
   33ccc:	4317      	orrs	r7, r2
   33cce:	e6af      	b.n	33a30 <__aeabi_dsub+0xa4>
   33cd0:	000007ff 	.word	0x000007ff
   33cd4:	ff7fffff 	.word	0xff7fffff
   33cd8:	800fffff 	.word	0x800fffff
   33cdc:	2e00      	cmp	r6, #0
   33cde:	d03e      	beq.n	33d5e <__aeabi_dsub+0x3d2>
   33ce0:	4eb3      	ldr	r6, [pc, #716]	; (33fb0 <__aeabi_dsub+0x624>)
   33ce2:	45b4      	cmp	ip, r6
   33ce4:	d045      	beq.n	33d72 <__aeabi_dsub+0x3e6>
   33ce6:	2680      	movs	r6, #128	; 0x80
   33ce8:	0436      	lsls	r6, r6, #16
   33cea:	426d      	negs	r5, r5
   33cec:	4334      	orrs	r4, r6
   33cee:	2d38      	cmp	r5, #56	; 0x38
   33cf0:	dd00      	ble.n	33cf4 <__aeabi_dsub+0x368>
   33cf2:	e0a8      	b.n	33e46 <__aeabi_dsub+0x4ba>
   33cf4:	2d1f      	cmp	r5, #31
   33cf6:	dd00      	ble.n	33cfa <__aeabi_dsub+0x36e>
   33cf8:	e11f      	b.n	33f3a <__aeabi_dsub+0x5ae>
   33cfa:	2620      	movs	r6, #32
   33cfc:	0027      	movs	r7, r4
   33cfe:	4650      	mov	r0, sl
   33d00:	1b76      	subs	r6, r6, r5
   33d02:	40b7      	lsls	r7, r6
   33d04:	40e8      	lsrs	r0, r5
   33d06:	4307      	orrs	r7, r0
   33d08:	4650      	mov	r0, sl
   33d0a:	40b0      	lsls	r0, r6
   33d0c:	1e46      	subs	r6, r0, #1
   33d0e:	41b0      	sbcs	r0, r6
   33d10:	40ec      	lsrs	r4, r5
   33d12:	4338      	orrs	r0, r7
   33d14:	1a17      	subs	r7, r2, r0
   33d16:	42ba      	cmp	r2, r7
   33d18:	4192      	sbcs	r2, r2
   33d1a:	1b0c      	subs	r4, r1, r4
   33d1c:	4252      	negs	r2, r2
   33d1e:	1aa4      	subs	r4, r4, r2
   33d20:	4666      	mov	r6, ip
   33d22:	4698      	mov	r8, r3
   33d24:	e68b      	b.n	33a3e <__aeabi_dsub+0xb2>
   33d26:	4664      	mov	r4, ip
   33d28:	4667      	mov	r7, ip
   33d2a:	432c      	orrs	r4, r5
   33d2c:	d000      	beq.n	33d30 <__aeabi_dsub+0x3a4>
   33d2e:	e68b      	b.n	33a48 <__aeabi_dsub+0xbc>
   33d30:	2500      	movs	r5, #0
   33d32:	2600      	movs	r6, #0
   33d34:	2700      	movs	r7, #0
   33d36:	e6ea      	b.n	33b0e <__aeabi_dsub+0x182>
   33d38:	001e      	movs	r6, r3
   33d3a:	e6ad      	b.n	33a98 <__aeabi_dsub+0x10c>
   33d3c:	2b1f      	cmp	r3, #31
   33d3e:	dc60      	bgt.n	33e02 <__aeabi_dsub+0x476>
   33d40:	2720      	movs	r7, #32
   33d42:	1af8      	subs	r0, r7, r3
   33d44:	000f      	movs	r7, r1
   33d46:	4684      	mov	ip, r0
   33d48:	4087      	lsls	r7, r0
   33d4a:	0010      	movs	r0, r2
   33d4c:	40d8      	lsrs	r0, r3
   33d4e:	4307      	orrs	r7, r0
   33d50:	4660      	mov	r0, ip
   33d52:	4082      	lsls	r2, r0
   33d54:	1e50      	subs	r0, r2, #1
   33d56:	4182      	sbcs	r2, r0
   33d58:	40d9      	lsrs	r1, r3
   33d5a:	4317      	orrs	r7, r2
   33d5c:	e6f5      	b.n	33b4a <__aeabi_dsub+0x1be>
   33d5e:	0026      	movs	r6, r4
   33d60:	4650      	mov	r0, sl
   33d62:	4306      	orrs	r6, r0
   33d64:	d005      	beq.n	33d72 <__aeabi_dsub+0x3e6>
   33d66:	43ed      	mvns	r5, r5
   33d68:	2d00      	cmp	r5, #0
   33d6a:	d0d3      	beq.n	33d14 <__aeabi_dsub+0x388>
   33d6c:	4e90      	ldr	r6, [pc, #576]	; (33fb0 <__aeabi_dsub+0x624>)
   33d6e:	45b4      	cmp	ip, r6
   33d70:	d1bd      	bne.n	33cee <__aeabi_dsub+0x362>
   33d72:	000c      	movs	r4, r1
   33d74:	0017      	movs	r7, r2
   33d76:	4666      	mov	r6, ip
   33d78:	4698      	mov	r8, r3
   33d7a:	e68d      	b.n	33a98 <__aeabi_dsub+0x10c>
   33d7c:	488c      	ldr	r0, [pc, #560]	; (33fb0 <__aeabi_dsub+0x624>)
   33d7e:	4283      	cmp	r3, r0
   33d80:	d00b      	beq.n	33d9a <__aeabi_dsub+0x40e>
   33d82:	4663      	mov	r3, ip
   33d84:	e6d9      	b.n	33b3a <__aeabi_dsub+0x1ae>
   33d86:	2d00      	cmp	r5, #0
   33d88:	d000      	beq.n	33d8c <__aeabi_dsub+0x400>
   33d8a:	e096      	b.n	33eba <__aeabi_dsub+0x52e>
   33d8c:	0008      	movs	r0, r1
   33d8e:	4310      	orrs	r0, r2
   33d90:	d100      	bne.n	33d94 <__aeabi_dsub+0x408>
   33d92:	e0e2      	b.n	33f5a <__aeabi_dsub+0x5ce>
   33d94:	000c      	movs	r4, r1
   33d96:	0017      	movs	r7, r2
   33d98:	4698      	mov	r8, r3
   33d9a:	4e85      	ldr	r6, [pc, #532]	; (33fb0 <__aeabi_dsub+0x624>)
   33d9c:	e67c      	b.n	33a98 <__aeabi_dsub+0x10c>
   33d9e:	2500      	movs	r5, #0
   33da0:	e780      	b.n	33ca4 <__aeabi_dsub+0x318>
   33da2:	2100      	movs	r1, #0
   33da4:	e78e      	b.n	33cc4 <__aeabi_dsub+0x338>
   33da6:	0023      	movs	r3, r4
   33da8:	4650      	mov	r0, sl
   33daa:	4303      	orrs	r3, r0
   33dac:	2e00      	cmp	r6, #0
   33dae:	d000      	beq.n	33db2 <__aeabi_dsub+0x426>
   33db0:	e0a8      	b.n	33f04 <__aeabi_dsub+0x578>
   33db2:	2b00      	cmp	r3, #0
   33db4:	d100      	bne.n	33db8 <__aeabi_dsub+0x42c>
   33db6:	e0de      	b.n	33f76 <__aeabi_dsub+0x5ea>
   33db8:	000b      	movs	r3, r1
   33dba:	4313      	orrs	r3, r2
   33dbc:	d100      	bne.n	33dc0 <__aeabi_dsub+0x434>
   33dbe:	e66b      	b.n	33a98 <__aeabi_dsub+0x10c>
   33dc0:	4452      	add	r2, sl
   33dc2:	4552      	cmp	r2, sl
   33dc4:	4180      	sbcs	r0, r0
   33dc6:	1864      	adds	r4, r4, r1
   33dc8:	4240      	negs	r0, r0
   33dca:	1824      	adds	r4, r4, r0
   33dcc:	0017      	movs	r7, r2
   33dce:	0223      	lsls	r3, r4, #8
   33dd0:	d400      	bmi.n	33dd4 <__aeabi_dsub+0x448>
   33dd2:	e6fd      	b.n	33bd0 <__aeabi_dsub+0x244>
   33dd4:	4b77      	ldr	r3, [pc, #476]	; (33fb4 <__aeabi_dsub+0x628>)
   33dd6:	4666      	mov	r6, ip
   33dd8:	401c      	ands	r4, r3
   33dda:	e65d      	b.n	33a98 <__aeabi_dsub+0x10c>
   33ddc:	0025      	movs	r5, r4
   33dde:	4650      	mov	r0, sl
   33de0:	4305      	orrs	r5, r0
   33de2:	2e00      	cmp	r6, #0
   33de4:	d1cf      	bne.n	33d86 <__aeabi_dsub+0x3fa>
   33de6:	2d00      	cmp	r5, #0
   33de8:	d14f      	bne.n	33e8a <__aeabi_dsub+0x4fe>
   33dea:	000c      	movs	r4, r1
   33dec:	4314      	orrs	r4, r2
   33dee:	d100      	bne.n	33df2 <__aeabi_dsub+0x466>
   33df0:	e0a0      	b.n	33f34 <__aeabi_dsub+0x5a8>
   33df2:	000c      	movs	r4, r1
   33df4:	0017      	movs	r7, r2
   33df6:	4698      	mov	r8, r3
   33df8:	e64e      	b.n	33a98 <__aeabi_dsub+0x10c>
   33dfa:	4666      	mov	r6, ip
   33dfc:	2400      	movs	r4, #0
   33dfe:	2700      	movs	r7, #0
   33e00:	e685      	b.n	33b0e <__aeabi_dsub+0x182>
   33e02:	001f      	movs	r7, r3
   33e04:	0008      	movs	r0, r1
   33e06:	3f20      	subs	r7, #32
   33e08:	40f8      	lsrs	r0, r7
   33e0a:	0007      	movs	r7, r0
   33e0c:	2b20      	cmp	r3, #32
   33e0e:	d100      	bne.n	33e12 <__aeabi_dsub+0x486>
   33e10:	e08e      	b.n	33f30 <__aeabi_dsub+0x5a4>
   33e12:	2040      	movs	r0, #64	; 0x40
   33e14:	1ac3      	subs	r3, r0, r3
   33e16:	4099      	lsls	r1, r3
   33e18:	430a      	orrs	r2, r1
   33e1a:	1e51      	subs	r1, r2, #1
   33e1c:	418a      	sbcs	r2, r1
   33e1e:	2100      	movs	r1, #0
   33e20:	4317      	orrs	r7, r2
   33e22:	e692      	b.n	33b4a <__aeabi_dsub+0x1be>
   33e24:	2e00      	cmp	r6, #0
   33e26:	d114      	bne.n	33e52 <__aeabi_dsub+0x4c6>
   33e28:	0026      	movs	r6, r4
   33e2a:	4650      	mov	r0, sl
   33e2c:	4306      	orrs	r6, r0
   33e2e:	d062      	beq.n	33ef6 <__aeabi_dsub+0x56a>
   33e30:	43db      	mvns	r3, r3
   33e32:	2b00      	cmp	r3, #0
   33e34:	d15c      	bne.n	33ef0 <__aeabi_dsub+0x564>
   33e36:	1887      	adds	r7, r0, r2
   33e38:	4297      	cmp	r7, r2
   33e3a:	4192      	sbcs	r2, r2
   33e3c:	1864      	adds	r4, r4, r1
   33e3e:	4252      	negs	r2, r2
   33e40:	18a4      	adds	r4, r4, r2
   33e42:	4666      	mov	r6, ip
   33e44:	e687      	b.n	33b56 <__aeabi_dsub+0x1ca>
   33e46:	4650      	mov	r0, sl
   33e48:	4320      	orrs	r0, r4
   33e4a:	1e44      	subs	r4, r0, #1
   33e4c:	41a0      	sbcs	r0, r4
   33e4e:	2400      	movs	r4, #0
   33e50:	e760      	b.n	33d14 <__aeabi_dsub+0x388>
   33e52:	4e57      	ldr	r6, [pc, #348]	; (33fb0 <__aeabi_dsub+0x624>)
   33e54:	45b4      	cmp	ip, r6
   33e56:	d04e      	beq.n	33ef6 <__aeabi_dsub+0x56a>
   33e58:	2680      	movs	r6, #128	; 0x80
   33e5a:	0436      	lsls	r6, r6, #16
   33e5c:	425b      	negs	r3, r3
   33e5e:	4334      	orrs	r4, r6
   33e60:	2b38      	cmp	r3, #56	; 0x38
   33e62:	dd00      	ble.n	33e66 <__aeabi_dsub+0x4da>
   33e64:	e07f      	b.n	33f66 <__aeabi_dsub+0x5da>
   33e66:	2b1f      	cmp	r3, #31
   33e68:	dd00      	ble.n	33e6c <__aeabi_dsub+0x4e0>
   33e6a:	e08b      	b.n	33f84 <__aeabi_dsub+0x5f8>
   33e6c:	2620      	movs	r6, #32
   33e6e:	0027      	movs	r7, r4
   33e70:	4650      	mov	r0, sl
   33e72:	1af6      	subs	r6, r6, r3
   33e74:	40b7      	lsls	r7, r6
   33e76:	40d8      	lsrs	r0, r3
   33e78:	4307      	orrs	r7, r0
   33e7a:	4650      	mov	r0, sl
   33e7c:	40b0      	lsls	r0, r6
   33e7e:	1e46      	subs	r6, r0, #1
   33e80:	41b0      	sbcs	r0, r6
   33e82:	4307      	orrs	r7, r0
   33e84:	40dc      	lsrs	r4, r3
   33e86:	18bf      	adds	r7, r7, r2
   33e88:	e7d6      	b.n	33e38 <__aeabi_dsub+0x4ac>
   33e8a:	000d      	movs	r5, r1
   33e8c:	4315      	orrs	r5, r2
   33e8e:	d100      	bne.n	33e92 <__aeabi_dsub+0x506>
   33e90:	e602      	b.n	33a98 <__aeabi_dsub+0x10c>
   33e92:	4650      	mov	r0, sl
   33e94:	1a80      	subs	r0, r0, r2
   33e96:	4582      	cmp	sl, r0
   33e98:	41bf      	sbcs	r7, r7
   33e9a:	1a65      	subs	r5, r4, r1
   33e9c:	427f      	negs	r7, r7
   33e9e:	1bed      	subs	r5, r5, r7
   33ea0:	4684      	mov	ip, r0
   33ea2:	0228      	lsls	r0, r5, #8
   33ea4:	d400      	bmi.n	33ea8 <__aeabi_dsub+0x51c>
   33ea6:	e68d      	b.n	33bc4 <__aeabi_dsub+0x238>
   33ea8:	4650      	mov	r0, sl
   33eaa:	1a17      	subs	r7, r2, r0
   33eac:	42ba      	cmp	r2, r7
   33eae:	4192      	sbcs	r2, r2
   33eb0:	1b0c      	subs	r4, r1, r4
   33eb2:	4252      	negs	r2, r2
   33eb4:	1aa4      	subs	r4, r4, r2
   33eb6:	4698      	mov	r8, r3
   33eb8:	e5ee      	b.n	33a98 <__aeabi_dsub+0x10c>
   33eba:	000d      	movs	r5, r1
   33ebc:	4315      	orrs	r5, r2
   33ebe:	d100      	bne.n	33ec2 <__aeabi_dsub+0x536>
   33ec0:	e76b      	b.n	33d9a <__aeabi_dsub+0x40e>
   33ec2:	4650      	mov	r0, sl
   33ec4:	0767      	lsls	r7, r4, #29
   33ec6:	08c0      	lsrs	r0, r0, #3
   33ec8:	4307      	orrs	r7, r0
   33eca:	2080      	movs	r0, #128	; 0x80
   33ecc:	08e4      	lsrs	r4, r4, #3
   33ece:	0300      	lsls	r0, r0, #12
   33ed0:	4204      	tst	r4, r0
   33ed2:	d007      	beq.n	33ee4 <__aeabi_dsub+0x558>
   33ed4:	08cd      	lsrs	r5, r1, #3
   33ed6:	4205      	tst	r5, r0
   33ed8:	d104      	bne.n	33ee4 <__aeabi_dsub+0x558>
   33eda:	002c      	movs	r4, r5
   33edc:	4698      	mov	r8, r3
   33ede:	08d7      	lsrs	r7, r2, #3
   33ee0:	0749      	lsls	r1, r1, #29
   33ee2:	430f      	orrs	r7, r1
   33ee4:	0f7b      	lsrs	r3, r7, #29
   33ee6:	00e4      	lsls	r4, r4, #3
   33ee8:	431c      	orrs	r4, r3
   33eea:	00ff      	lsls	r7, r7, #3
   33eec:	4e30      	ldr	r6, [pc, #192]	; (33fb0 <__aeabi_dsub+0x624>)
   33eee:	e5d3      	b.n	33a98 <__aeabi_dsub+0x10c>
   33ef0:	4e2f      	ldr	r6, [pc, #188]	; (33fb0 <__aeabi_dsub+0x624>)
   33ef2:	45b4      	cmp	ip, r6
   33ef4:	d1b4      	bne.n	33e60 <__aeabi_dsub+0x4d4>
   33ef6:	000c      	movs	r4, r1
   33ef8:	0017      	movs	r7, r2
   33efa:	4666      	mov	r6, ip
   33efc:	e5cc      	b.n	33a98 <__aeabi_dsub+0x10c>
   33efe:	2700      	movs	r7, #0
   33f00:	2400      	movs	r4, #0
   33f02:	e5e8      	b.n	33ad6 <__aeabi_dsub+0x14a>
   33f04:	2b00      	cmp	r3, #0
   33f06:	d039      	beq.n	33f7c <__aeabi_dsub+0x5f0>
   33f08:	000b      	movs	r3, r1
   33f0a:	4313      	orrs	r3, r2
   33f0c:	d100      	bne.n	33f10 <__aeabi_dsub+0x584>
   33f0e:	e744      	b.n	33d9a <__aeabi_dsub+0x40e>
   33f10:	08c0      	lsrs	r0, r0, #3
   33f12:	0767      	lsls	r7, r4, #29
   33f14:	4307      	orrs	r7, r0
   33f16:	2080      	movs	r0, #128	; 0x80
   33f18:	08e4      	lsrs	r4, r4, #3
   33f1a:	0300      	lsls	r0, r0, #12
   33f1c:	4204      	tst	r4, r0
   33f1e:	d0e1      	beq.n	33ee4 <__aeabi_dsub+0x558>
   33f20:	08cb      	lsrs	r3, r1, #3
   33f22:	4203      	tst	r3, r0
   33f24:	d1de      	bne.n	33ee4 <__aeabi_dsub+0x558>
   33f26:	08d7      	lsrs	r7, r2, #3
   33f28:	0749      	lsls	r1, r1, #29
   33f2a:	430f      	orrs	r7, r1
   33f2c:	001c      	movs	r4, r3
   33f2e:	e7d9      	b.n	33ee4 <__aeabi_dsub+0x558>
   33f30:	2100      	movs	r1, #0
   33f32:	e771      	b.n	33e18 <__aeabi_dsub+0x48c>
   33f34:	2500      	movs	r5, #0
   33f36:	2700      	movs	r7, #0
   33f38:	e5e9      	b.n	33b0e <__aeabi_dsub+0x182>
   33f3a:	002e      	movs	r6, r5
   33f3c:	0027      	movs	r7, r4
   33f3e:	3e20      	subs	r6, #32
   33f40:	40f7      	lsrs	r7, r6
   33f42:	2d20      	cmp	r5, #32
   33f44:	d02f      	beq.n	33fa6 <__aeabi_dsub+0x61a>
   33f46:	2640      	movs	r6, #64	; 0x40
   33f48:	1b75      	subs	r5, r6, r5
   33f4a:	40ac      	lsls	r4, r5
   33f4c:	4650      	mov	r0, sl
   33f4e:	4320      	orrs	r0, r4
   33f50:	1e44      	subs	r4, r0, #1
   33f52:	41a0      	sbcs	r0, r4
   33f54:	2400      	movs	r4, #0
   33f56:	4338      	orrs	r0, r7
   33f58:	e6dc      	b.n	33d14 <__aeabi_dsub+0x388>
   33f5a:	2480      	movs	r4, #128	; 0x80
   33f5c:	2500      	movs	r5, #0
   33f5e:	0324      	lsls	r4, r4, #12
   33f60:	4e13      	ldr	r6, [pc, #76]	; (33fb0 <__aeabi_dsub+0x624>)
   33f62:	2700      	movs	r7, #0
   33f64:	e5d3      	b.n	33b0e <__aeabi_dsub+0x182>
   33f66:	4650      	mov	r0, sl
   33f68:	4320      	orrs	r0, r4
   33f6a:	0007      	movs	r7, r0
   33f6c:	1e78      	subs	r0, r7, #1
   33f6e:	4187      	sbcs	r7, r0
   33f70:	2400      	movs	r4, #0
   33f72:	18bf      	adds	r7, r7, r2
   33f74:	e760      	b.n	33e38 <__aeabi_dsub+0x4ac>
   33f76:	000c      	movs	r4, r1
   33f78:	0017      	movs	r7, r2
   33f7a:	e58d      	b.n	33a98 <__aeabi_dsub+0x10c>
   33f7c:	000c      	movs	r4, r1
   33f7e:	0017      	movs	r7, r2
   33f80:	4e0b      	ldr	r6, [pc, #44]	; (33fb0 <__aeabi_dsub+0x624>)
   33f82:	e589      	b.n	33a98 <__aeabi_dsub+0x10c>
   33f84:	001e      	movs	r6, r3
   33f86:	0027      	movs	r7, r4
   33f88:	3e20      	subs	r6, #32
   33f8a:	40f7      	lsrs	r7, r6
   33f8c:	2b20      	cmp	r3, #32
   33f8e:	d00c      	beq.n	33faa <__aeabi_dsub+0x61e>
   33f90:	2640      	movs	r6, #64	; 0x40
   33f92:	1af3      	subs	r3, r6, r3
   33f94:	409c      	lsls	r4, r3
   33f96:	4650      	mov	r0, sl
   33f98:	4320      	orrs	r0, r4
   33f9a:	1e44      	subs	r4, r0, #1
   33f9c:	41a0      	sbcs	r0, r4
   33f9e:	4307      	orrs	r7, r0
   33fa0:	2400      	movs	r4, #0
   33fa2:	18bf      	adds	r7, r7, r2
   33fa4:	e748      	b.n	33e38 <__aeabi_dsub+0x4ac>
   33fa6:	2400      	movs	r4, #0
   33fa8:	e7d0      	b.n	33f4c <__aeabi_dsub+0x5c0>
   33faa:	2400      	movs	r4, #0
   33fac:	e7f3      	b.n	33f96 <__aeabi_dsub+0x60a>
   33fae:	46c0      	nop			; (mov r8, r8)
   33fb0:	000007ff 	.word	0x000007ff
   33fb4:	ff7fffff 	.word	0xff7fffff

00033fb8 <__aeabi_d2iz>:
   33fb8:	b530      	push	{r4, r5, lr}
   33fba:	4d13      	ldr	r5, [pc, #76]	; (34008 <__aeabi_d2iz+0x50>)
   33fbc:	030a      	lsls	r2, r1, #12
   33fbe:	004b      	lsls	r3, r1, #1
   33fc0:	0b12      	lsrs	r2, r2, #12
   33fc2:	0d5b      	lsrs	r3, r3, #21
   33fc4:	0fc9      	lsrs	r1, r1, #31
   33fc6:	2400      	movs	r4, #0
   33fc8:	42ab      	cmp	r3, r5
   33fca:	dd10      	ble.n	33fee <__aeabi_d2iz+0x36>
   33fcc:	4c0f      	ldr	r4, [pc, #60]	; (3400c <__aeabi_d2iz+0x54>)
   33fce:	42a3      	cmp	r3, r4
   33fd0:	dc0f      	bgt.n	33ff2 <__aeabi_d2iz+0x3a>
   33fd2:	2480      	movs	r4, #128	; 0x80
   33fd4:	4d0e      	ldr	r5, [pc, #56]	; (34010 <__aeabi_d2iz+0x58>)
   33fd6:	0364      	lsls	r4, r4, #13
   33fd8:	4322      	orrs	r2, r4
   33fda:	1aed      	subs	r5, r5, r3
   33fdc:	2d1f      	cmp	r5, #31
   33fde:	dd0b      	ble.n	33ff8 <__aeabi_d2iz+0x40>
   33fe0:	480c      	ldr	r0, [pc, #48]	; (34014 <__aeabi_d2iz+0x5c>)
   33fe2:	1ac3      	subs	r3, r0, r3
   33fe4:	40da      	lsrs	r2, r3
   33fe6:	4254      	negs	r4, r2
   33fe8:	2900      	cmp	r1, #0
   33fea:	d100      	bne.n	33fee <__aeabi_d2iz+0x36>
   33fec:	0014      	movs	r4, r2
   33fee:	0020      	movs	r0, r4
   33ff0:	bd30      	pop	{r4, r5, pc}
   33ff2:	4b09      	ldr	r3, [pc, #36]	; (34018 <__aeabi_d2iz+0x60>)
   33ff4:	18cc      	adds	r4, r1, r3
   33ff6:	e7fa      	b.n	33fee <__aeabi_d2iz+0x36>
   33ff8:	4c08      	ldr	r4, [pc, #32]	; (3401c <__aeabi_d2iz+0x64>)
   33ffa:	40e8      	lsrs	r0, r5
   33ffc:	46a4      	mov	ip, r4
   33ffe:	4463      	add	r3, ip
   34000:	409a      	lsls	r2, r3
   34002:	4302      	orrs	r2, r0
   34004:	e7ef      	b.n	33fe6 <__aeabi_d2iz+0x2e>
   34006:	46c0      	nop			; (mov r8, r8)
   34008:	000003fe 	.word	0x000003fe
   3400c:	0000041d 	.word	0x0000041d
   34010:	00000433 	.word	0x00000433
   34014:	00000413 	.word	0x00000413
   34018:	7fffffff 	.word	0x7fffffff
   3401c:	fffffbed 	.word	0xfffffbed

00034020 <__aeabi_i2d>:
   34020:	b570      	push	{r4, r5, r6, lr}
   34022:	2800      	cmp	r0, #0
   34024:	d030      	beq.n	34088 <__aeabi_i2d+0x68>
   34026:	17c3      	asrs	r3, r0, #31
   34028:	18c4      	adds	r4, r0, r3
   3402a:	405c      	eors	r4, r3
   3402c:	0fc5      	lsrs	r5, r0, #31
   3402e:	0020      	movs	r0, r4
   34030:	f000 f8fa 	bl	34228 <__clzsi2>
   34034:	4b17      	ldr	r3, [pc, #92]	; (34094 <__aeabi_i2d+0x74>)
   34036:	4a18      	ldr	r2, [pc, #96]	; (34098 <__aeabi_i2d+0x78>)
   34038:	1a1b      	subs	r3, r3, r0
   3403a:	1ad2      	subs	r2, r2, r3
   3403c:	2a1f      	cmp	r2, #31
   3403e:	dd18      	ble.n	34072 <__aeabi_i2d+0x52>
   34040:	4a16      	ldr	r2, [pc, #88]	; (3409c <__aeabi_i2d+0x7c>)
   34042:	1ad2      	subs	r2, r2, r3
   34044:	4094      	lsls	r4, r2
   34046:	2200      	movs	r2, #0
   34048:	0324      	lsls	r4, r4, #12
   3404a:	055b      	lsls	r3, r3, #21
   3404c:	0b24      	lsrs	r4, r4, #12
   3404e:	0d5b      	lsrs	r3, r3, #21
   34050:	2100      	movs	r1, #0
   34052:	0010      	movs	r0, r2
   34054:	0324      	lsls	r4, r4, #12
   34056:	0d0a      	lsrs	r2, r1, #20
   34058:	0b24      	lsrs	r4, r4, #12
   3405a:	0512      	lsls	r2, r2, #20
   3405c:	4322      	orrs	r2, r4
   3405e:	4c10      	ldr	r4, [pc, #64]	; (340a0 <__aeabi_i2d+0x80>)
   34060:	051b      	lsls	r3, r3, #20
   34062:	4022      	ands	r2, r4
   34064:	4313      	orrs	r3, r2
   34066:	005b      	lsls	r3, r3, #1
   34068:	07ed      	lsls	r5, r5, #31
   3406a:	085b      	lsrs	r3, r3, #1
   3406c:	432b      	orrs	r3, r5
   3406e:	0019      	movs	r1, r3
   34070:	bd70      	pop	{r4, r5, r6, pc}
   34072:	0021      	movs	r1, r4
   34074:	4091      	lsls	r1, r2
   34076:	000a      	movs	r2, r1
   34078:	210b      	movs	r1, #11
   3407a:	1a08      	subs	r0, r1, r0
   3407c:	40c4      	lsrs	r4, r0
   3407e:	055b      	lsls	r3, r3, #21
   34080:	0324      	lsls	r4, r4, #12
   34082:	0b24      	lsrs	r4, r4, #12
   34084:	0d5b      	lsrs	r3, r3, #21
   34086:	e7e3      	b.n	34050 <__aeabi_i2d+0x30>
   34088:	2500      	movs	r5, #0
   3408a:	2300      	movs	r3, #0
   3408c:	2400      	movs	r4, #0
   3408e:	2200      	movs	r2, #0
   34090:	e7de      	b.n	34050 <__aeabi_i2d+0x30>
   34092:	46c0      	nop			; (mov r8, r8)
   34094:	0000041e 	.word	0x0000041e
   34098:	00000433 	.word	0x00000433
   3409c:	00000413 	.word	0x00000413
   340a0:	800fffff 	.word	0x800fffff

000340a4 <__aeabi_ui2d>:
   340a4:	b510      	push	{r4, lr}
   340a6:	1e04      	subs	r4, r0, #0
   340a8:	d028      	beq.n	340fc <__aeabi_ui2d+0x58>
   340aa:	f000 f8bd 	bl	34228 <__clzsi2>
   340ae:	4b15      	ldr	r3, [pc, #84]	; (34104 <__aeabi_ui2d+0x60>)
   340b0:	4a15      	ldr	r2, [pc, #84]	; (34108 <__aeabi_ui2d+0x64>)
   340b2:	1a1b      	subs	r3, r3, r0
   340b4:	1ad2      	subs	r2, r2, r3
   340b6:	2a1f      	cmp	r2, #31
   340b8:	dd15      	ble.n	340e6 <__aeabi_ui2d+0x42>
   340ba:	4a14      	ldr	r2, [pc, #80]	; (3410c <__aeabi_ui2d+0x68>)
   340bc:	1ad2      	subs	r2, r2, r3
   340be:	4094      	lsls	r4, r2
   340c0:	2200      	movs	r2, #0
   340c2:	0324      	lsls	r4, r4, #12
   340c4:	055b      	lsls	r3, r3, #21
   340c6:	0b24      	lsrs	r4, r4, #12
   340c8:	0d5b      	lsrs	r3, r3, #21
   340ca:	2100      	movs	r1, #0
   340cc:	0010      	movs	r0, r2
   340ce:	0324      	lsls	r4, r4, #12
   340d0:	0d0a      	lsrs	r2, r1, #20
   340d2:	0b24      	lsrs	r4, r4, #12
   340d4:	0512      	lsls	r2, r2, #20
   340d6:	4322      	orrs	r2, r4
   340d8:	4c0d      	ldr	r4, [pc, #52]	; (34110 <__aeabi_ui2d+0x6c>)
   340da:	051b      	lsls	r3, r3, #20
   340dc:	4022      	ands	r2, r4
   340de:	4313      	orrs	r3, r2
   340e0:	005b      	lsls	r3, r3, #1
   340e2:	0859      	lsrs	r1, r3, #1
   340e4:	bd10      	pop	{r4, pc}
   340e6:	0021      	movs	r1, r4
   340e8:	4091      	lsls	r1, r2
   340ea:	000a      	movs	r2, r1
   340ec:	210b      	movs	r1, #11
   340ee:	1a08      	subs	r0, r1, r0
   340f0:	40c4      	lsrs	r4, r0
   340f2:	055b      	lsls	r3, r3, #21
   340f4:	0324      	lsls	r4, r4, #12
   340f6:	0b24      	lsrs	r4, r4, #12
   340f8:	0d5b      	lsrs	r3, r3, #21
   340fa:	e7e6      	b.n	340ca <__aeabi_ui2d+0x26>
   340fc:	2300      	movs	r3, #0
   340fe:	2400      	movs	r4, #0
   34100:	2200      	movs	r2, #0
   34102:	e7e2      	b.n	340ca <__aeabi_ui2d+0x26>
   34104:	0000041e 	.word	0x0000041e
   34108:	00000433 	.word	0x00000433
   3410c:	00000413 	.word	0x00000413
   34110:	800fffff 	.word	0x800fffff

00034114 <__aeabi_d2f>:
   34114:	b5f0      	push	{r4, r5, r6, r7, lr}
   34116:	004c      	lsls	r4, r1, #1
   34118:	0d64      	lsrs	r4, r4, #21
   3411a:	030b      	lsls	r3, r1, #12
   3411c:	1c62      	adds	r2, r4, #1
   3411e:	0f45      	lsrs	r5, r0, #29
   34120:	0a5b      	lsrs	r3, r3, #9
   34122:	0552      	lsls	r2, r2, #21
   34124:	432b      	orrs	r3, r5
   34126:	0fc9      	lsrs	r1, r1, #31
   34128:	00c5      	lsls	r5, r0, #3
   3412a:	0d52      	lsrs	r2, r2, #21
   3412c:	2a01      	cmp	r2, #1
   3412e:	dd28      	ble.n	34182 <__aeabi_d2f+0x6e>
   34130:	4a3a      	ldr	r2, [pc, #232]	; (3421c <__aeabi_d2f+0x108>)
   34132:	18a6      	adds	r6, r4, r2
   34134:	2efe      	cmp	r6, #254	; 0xfe
   34136:	dc1b      	bgt.n	34170 <__aeabi_d2f+0x5c>
   34138:	2e00      	cmp	r6, #0
   3413a:	dd3e      	ble.n	341ba <__aeabi_d2f+0xa6>
   3413c:	0180      	lsls	r0, r0, #6
   3413e:	0002      	movs	r2, r0
   34140:	1e50      	subs	r0, r2, #1
   34142:	4182      	sbcs	r2, r0
   34144:	0f6d      	lsrs	r5, r5, #29
   34146:	432a      	orrs	r2, r5
   34148:	00db      	lsls	r3, r3, #3
   3414a:	4313      	orrs	r3, r2
   3414c:	075a      	lsls	r2, r3, #29
   3414e:	d004      	beq.n	3415a <__aeabi_d2f+0x46>
   34150:	220f      	movs	r2, #15
   34152:	401a      	ands	r2, r3
   34154:	2a04      	cmp	r2, #4
   34156:	d000      	beq.n	3415a <__aeabi_d2f+0x46>
   34158:	3304      	adds	r3, #4
   3415a:	2280      	movs	r2, #128	; 0x80
   3415c:	04d2      	lsls	r2, r2, #19
   3415e:	401a      	ands	r2, r3
   34160:	d05a      	beq.n	34218 <__aeabi_d2f+0x104>
   34162:	3601      	adds	r6, #1
   34164:	2eff      	cmp	r6, #255	; 0xff
   34166:	d003      	beq.n	34170 <__aeabi_d2f+0x5c>
   34168:	019b      	lsls	r3, r3, #6
   3416a:	0a5b      	lsrs	r3, r3, #9
   3416c:	b2f4      	uxtb	r4, r6
   3416e:	e001      	b.n	34174 <__aeabi_d2f+0x60>
   34170:	24ff      	movs	r4, #255	; 0xff
   34172:	2300      	movs	r3, #0
   34174:	0258      	lsls	r0, r3, #9
   34176:	05e4      	lsls	r4, r4, #23
   34178:	0a40      	lsrs	r0, r0, #9
   3417a:	07c9      	lsls	r1, r1, #31
   3417c:	4320      	orrs	r0, r4
   3417e:	4308      	orrs	r0, r1
   34180:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34182:	2c00      	cmp	r4, #0
   34184:	d007      	beq.n	34196 <__aeabi_d2f+0x82>
   34186:	431d      	orrs	r5, r3
   34188:	d0f2      	beq.n	34170 <__aeabi_d2f+0x5c>
   3418a:	2080      	movs	r0, #128	; 0x80
   3418c:	00db      	lsls	r3, r3, #3
   3418e:	0480      	lsls	r0, r0, #18
   34190:	4303      	orrs	r3, r0
   34192:	26ff      	movs	r6, #255	; 0xff
   34194:	e7da      	b.n	3414c <__aeabi_d2f+0x38>
   34196:	432b      	orrs	r3, r5
   34198:	d003      	beq.n	341a2 <__aeabi_d2f+0x8e>
   3419a:	2305      	movs	r3, #5
   3419c:	08db      	lsrs	r3, r3, #3
   3419e:	2cff      	cmp	r4, #255	; 0xff
   341a0:	d003      	beq.n	341aa <__aeabi_d2f+0x96>
   341a2:	025b      	lsls	r3, r3, #9
   341a4:	0a5b      	lsrs	r3, r3, #9
   341a6:	b2e4      	uxtb	r4, r4
   341a8:	e7e4      	b.n	34174 <__aeabi_d2f+0x60>
   341aa:	2b00      	cmp	r3, #0
   341ac:	d032      	beq.n	34214 <__aeabi_d2f+0x100>
   341ae:	2080      	movs	r0, #128	; 0x80
   341b0:	03c0      	lsls	r0, r0, #15
   341b2:	4303      	orrs	r3, r0
   341b4:	025b      	lsls	r3, r3, #9
   341b6:	0a5b      	lsrs	r3, r3, #9
   341b8:	e7dc      	b.n	34174 <__aeabi_d2f+0x60>
   341ba:	0032      	movs	r2, r6
   341bc:	3217      	adds	r2, #23
   341be:	db14      	blt.n	341ea <__aeabi_d2f+0xd6>
   341c0:	2280      	movs	r2, #128	; 0x80
   341c2:	271e      	movs	r7, #30
   341c4:	0412      	lsls	r2, r2, #16
   341c6:	4313      	orrs	r3, r2
   341c8:	1bbf      	subs	r7, r7, r6
   341ca:	2f1f      	cmp	r7, #31
   341cc:	dc0f      	bgt.n	341ee <__aeabi_d2f+0xda>
   341ce:	4a14      	ldr	r2, [pc, #80]	; (34220 <__aeabi_d2f+0x10c>)
   341d0:	4694      	mov	ip, r2
   341d2:	4464      	add	r4, ip
   341d4:	002a      	movs	r2, r5
   341d6:	40a5      	lsls	r5, r4
   341d8:	002e      	movs	r6, r5
   341da:	40a3      	lsls	r3, r4
   341dc:	1e75      	subs	r5, r6, #1
   341de:	41ae      	sbcs	r6, r5
   341e0:	40fa      	lsrs	r2, r7
   341e2:	4333      	orrs	r3, r6
   341e4:	4313      	orrs	r3, r2
   341e6:	2600      	movs	r6, #0
   341e8:	e7b0      	b.n	3414c <__aeabi_d2f+0x38>
   341ea:	2400      	movs	r4, #0
   341ec:	e7d5      	b.n	3419a <__aeabi_d2f+0x86>
   341ee:	2202      	movs	r2, #2
   341f0:	4252      	negs	r2, r2
   341f2:	1b96      	subs	r6, r2, r6
   341f4:	001a      	movs	r2, r3
   341f6:	40f2      	lsrs	r2, r6
   341f8:	2f20      	cmp	r7, #32
   341fa:	d009      	beq.n	34210 <__aeabi_d2f+0xfc>
   341fc:	4809      	ldr	r0, [pc, #36]	; (34224 <__aeabi_d2f+0x110>)
   341fe:	4684      	mov	ip, r0
   34200:	4464      	add	r4, ip
   34202:	40a3      	lsls	r3, r4
   34204:	432b      	orrs	r3, r5
   34206:	1e5d      	subs	r5, r3, #1
   34208:	41ab      	sbcs	r3, r5
   3420a:	2600      	movs	r6, #0
   3420c:	4313      	orrs	r3, r2
   3420e:	e79d      	b.n	3414c <__aeabi_d2f+0x38>
   34210:	2300      	movs	r3, #0
   34212:	e7f7      	b.n	34204 <__aeabi_d2f+0xf0>
   34214:	2300      	movs	r3, #0
   34216:	e7ad      	b.n	34174 <__aeabi_d2f+0x60>
   34218:	0034      	movs	r4, r6
   3421a:	e7bf      	b.n	3419c <__aeabi_d2f+0x88>
   3421c:	fffffc80 	.word	0xfffffc80
   34220:	fffffc82 	.word	0xfffffc82
   34224:	fffffca2 	.word	0xfffffca2

00034228 <__clzsi2>:
   34228:	211c      	movs	r1, #28
   3422a:	2301      	movs	r3, #1
   3422c:	041b      	lsls	r3, r3, #16
   3422e:	4298      	cmp	r0, r3
   34230:	d301      	bcc.n	34236 <__clzsi2+0xe>
   34232:	0c00      	lsrs	r0, r0, #16
   34234:	3910      	subs	r1, #16
   34236:	0a1b      	lsrs	r3, r3, #8
   34238:	4298      	cmp	r0, r3
   3423a:	d301      	bcc.n	34240 <__clzsi2+0x18>
   3423c:	0a00      	lsrs	r0, r0, #8
   3423e:	3908      	subs	r1, #8
   34240:	091b      	lsrs	r3, r3, #4
   34242:	4298      	cmp	r0, r3
   34244:	d301      	bcc.n	3424a <__clzsi2+0x22>
   34246:	0900      	lsrs	r0, r0, #4
   34248:	3904      	subs	r1, #4
   3424a:	a202      	add	r2, pc, #8	; (adr r2, 34254 <__clzsi2+0x2c>)
   3424c:	5c10      	ldrb	r0, [r2, r0]
   3424e:	1840      	adds	r0, r0, r1
   34250:	4770      	bx	lr
   34252:	46c0      	nop			; (mov r8, r8)
   34254:	02020304 	.word	0x02020304
   34258:	01010101 	.word	0x01010101
	...

00034264 <atoi>:
   34264:	b510      	push	{r4, lr}
   34266:	220a      	movs	r2, #10
   34268:	2100      	movs	r1, #0
   3426a:	f000 fb0d 	bl	34888 <strtol>
   3426e:	bd10      	pop	{r4, pc}

00034270 <__libc_init_array>:
   34270:	b570      	push	{r4, r5, r6, lr}
   34272:	2600      	movs	r6, #0
   34274:	4d0c      	ldr	r5, [pc, #48]	; (342a8 <__libc_init_array+0x38>)
   34276:	4c0d      	ldr	r4, [pc, #52]	; (342ac <__libc_init_array+0x3c>)
   34278:	1b64      	subs	r4, r4, r5
   3427a:	10a4      	asrs	r4, r4, #2
   3427c:	42a6      	cmp	r6, r4
   3427e:	d109      	bne.n	34294 <__libc_init_array+0x24>
   34280:	2600      	movs	r6, #0
   34282:	f005 fc83 	bl	39b8c <_init>
   34286:	4d0a      	ldr	r5, [pc, #40]	; (342b0 <__libc_init_array+0x40>)
   34288:	4c0a      	ldr	r4, [pc, #40]	; (342b4 <__libc_init_array+0x44>)
   3428a:	1b64      	subs	r4, r4, r5
   3428c:	10a4      	asrs	r4, r4, #2
   3428e:	42a6      	cmp	r6, r4
   34290:	d105      	bne.n	3429e <__libc_init_array+0x2e>
   34292:	bd70      	pop	{r4, r5, r6, pc}
   34294:	00b3      	lsls	r3, r6, #2
   34296:	58eb      	ldr	r3, [r5, r3]
   34298:	4798      	blx	r3
   3429a:	3601      	adds	r6, #1
   3429c:	e7ee      	b.n	3427c <__libc_init_array+0xc>
   3429e:	00b3      	lsls	r3, r6, #2
   342a0:	58eb      	ldr	r3, [r5, r3]
   342a2:	4798      	blx	r3
   342a4:	3601      	adds	r6, #1
   342a6:	e7f2      	b.n	3428e <__libc_init_array+0x1e>
   342a8:	00039b98 	.word	0x00039b98
   342ac:	00039b98 	.word	0x00039b98
   342b0:	00039b98 	.word	0x00039b98
   342b4:	00039b9c 	.word	0x00039b9c

000342b8 <malloc>:
   342b8:	b510      	push	{r4, lr}
   342ba:	4b03      	ldr	r3, [pc, #12]	; (342c8 <malloc+0x10>)
   342bc:	0001      	movs	r1, r0
   342be:	6818      	ldr	r0, [r3, #0]
   342c0:	f000 f87c 	bl	343bc <_malloc_r>
   342c4:	bd10      	pop	{r4, pc}
   342c6:	46c0      	nop			; (mov r8, r8)
   342c8:	20000128 	.word	0x20000128

000342cc <free>:
   342cc:	b510      	push	{r4, lr}
   342ce:	4b03      	ldr	r3, [pc, #12]	; (342dc <free+0x10>)
   342d0:	0001      	movs	r1, r0
   342d2:	6818      	ldr	r0, [r3, #0]
   342d4:	f000 f828 	bl	34328 <_free_r>
   342d8:	bd10      	pop	{r4, pc}
   342da:	46c0      	nop			; (mov r8, r8)
   342dc:	20000128 	.word	0x20000128

000342e0 <memcpy>:
   342e0:	2300      	movs	r3, #0
   342e2:	b510      	push	{r4, lr}
   342e4:	429a      	cmp	r2, r3
   342e6:	d100      	bne.n	342ea <memcpy+0xa>
   342e8:	bd10      	pop	{r4, pc}
   342ea:	5ccc      	ldrb	r4, [r1, r3]
   342ec:	54c4      	strb	r4, [r0, r3]
   342ee:	3301      	adds	r3, #1
   342f0:	e7f8      	b.n	342e4 <memcpy+0x4>

000342f2 <memmove>:
   342f2:	b510      	push	{r4, lr}
   342f4:	4288      	cmp	r0, r1
   342f6:	d902      	bls.n	342fe <memmove+0xc>
   342f8:	188b      	adds	r3, r1, r2
   342fa:	4298      	cmp	r0, r3
   342fc:	d308      	bcc.n	34310 <memmove+0x1e>
   342fe:	2300      	movs	r3, #0
   34300:	429a      	cmp	r2, r3
   34302:	d007      	beq.n	34314 <memmove+0x22>
   34304:	5ccc      	ldrb	r4, [r1, r3]
   34306:	54c4      	strb	r4, [r0, r3]
   34308:	3301      	adds	r3, #1
   3430a:	e7f9      	b.n	34300 <memmove+0xe>
   3430c:	5c8b      	ldrb	r3, [r1, r2]
   3430e:	5483      	strb	r3, [r0, r2]
   34310:	3a01      	subs	r2, #1
   34312:	d2fb      	bcs.n	3430c <memmove+0x1a>
   34314:	bd10      	pop	{r4, pc}

00034316 <memset>:
   34316:	0003      	movs	r3, r0
   34318:	1882      	adds	r2, r0, r2
   3431a:	4293      	cmp	r3, r2
   3431c:	d100      	bne.n	34320 <memset+0xa>
   3431e:	4770      	bx	lr
   34320:	7019      	strb	r1, [r3, #0]
   34322:	3301      	adds	r3, #1
   34324:	e7f9      	b.n	3431a <memset+0x4>
	...

00034328 <_free_r>:
   34328:	b570      	push	{r4, r5, r6, lr}
   3432a:	0005      	movs	r5, r0
   3432c:	2900      	cmp	r1, #0
   3432e:	d010      	beq.n	34352 <_free_r+0x2a>
   34330:	1f0c      	subs	r4, r1, #4
   34332:	6823      	ldr	r3, [r4, #0]
   34334:	2b00      	cmp	r3, #0
   34336:	da00      	bge.n	3433a <_free_r+0x12>
   34338:	18e4      	adds	r4, r4, r3
   3433a:	0028      	movs	r0, r5
   3433c:	f000 fdd8 	bl	34ef0 <__malloc_lock>
   34340:	4a1d      	ldr	r2, [pc, #116]	; (343b8 <_free_r+0x90>)
   34342:	6813      	ldr	r3, [r2, #0]
   34344:	2b00      	cmp	r3, #0
   34346:	d105      	bne.n	34354 <_free_r+0x2c>
   34348:	6063      	str	r3, [r4, #4]
   3434a:	6014      	str	r4, [r2, #0]
   3434c:	0028      	movs	r0, r5
   3434e:	f000 fdd0 	bl	34ef2 <__malloc_unlock>
   34352:	bd70      	pop	{r4, r5, r6, pc}
   34354:	42a3      	cmp	r3, r4
   34356:	d909      	bls.n	3436c <_free_r+0x44>
   34358:	6821      	ldr	r1, [r4, #0]
   3435a:	1860      	adds	r0, r4, r1
   3435c:	4283      	cmp	r3, r0
   3435e:	d1f3      	bne.n	34348 <_free_r+0x20>
   34360:	6818      	ldr	r0, [r3, #0]
   34362:	685b      	ldr	r3, [r3, #4]
   34364:	1841      	adds	r1, r0, r1
   34366:	6021      	str	r1, [r4, #0]
   34368:	e7ee      	b.n	34348 <_free_r+0x20>
   3436a:	0013      	movs	r3, r2
   3436c:	685a      	ldr	r2, [r3, #4]
   3436e:	2a00      	cmp	r2, #0
   34370:	d001      	beq.n	34376 <_free_r+0x4e>
   34372:	42a2      	cmp	r2, r4
   34374:	d9f9      	bls.n	3436a <_free_r+0x42>
   34376:	6819      	ldr	r1, [r3, #0]
   34378:	1858      	adds	r0, r3, r1
   3437a:	42a0      	cmp	r0, r4
   3437c:	d10b      	bne.n	34396 <_free_r+0x6e>
   3437e:	6820      	ldr	r0, [r4, #0]
   34380:	1809      	adds	r1, r1, r0
   34382:	1858      	adds	r0, r3, r1
   34384:	6019      	str	r1, [r3, #0]
   34386:	4282      	cmp	r2, r0
   34388:	d1e0      	bne.n	3434c <_free_r+0x24>
   3438a:	6810      	ldr	r0, [r2, #0]
   3438c:	6852      	ldr	r2, [r2, #4]
   3438e:	1841      	adds	r1, r0, r1
   34390:	6019      	str	r1, [r3, #0]
   34392:	605a      	str	r2, [r3, #4]
   34394:	e7da      	b.n	3434c <_free_r+0x24>
   34396:	42a0      	cmp	r0, r4
   34398:	d902      	bls.n	343a0 <_free_r+0x78>
   3439a:	230c      	movs	r3, #12
   3439c:	602b      	str	r3, [r5, #0]
   3439e:	e7d5      	b.n	3434c <_free_r+0x24>
   343a0:	6821      	ldr	r1, [r4, #0]
   343a2:	1860      	adds	r0, r4, r1
   343a4:	4282      	cmp	r2, r0
   343a6:	d103      	bne.n	343b0 <_free_r+0x88>
   343a8:	6810      	ldr	r0, [r2, #0]
   343aa:	6852      	ldr	r2, [r2, #4]
   343ac:	1841      	adds	r1, r0, r1
   343ae:	6021      	str	r1, [r4, #0]
   343b0:	6062      	str	r2, [r4, #4]
   343b2:	605c      	str	r4, [r3, #4]
   343b4:	e7ca      	b.n	3434c <_free_r+0x24>
   343b6:	46c0      	nop			; (mov r8, r8)
   343b8:	200045a0 	.word	0x200045a0

000343bc <_malloc_r>:
   343bc:	2303      	movs	r3, #3
   343be:	b570      	push	{r4, r5, r6, lr}
   343c0:	1ccd      	adds	r5, r1, #3
   343c2:	439d      	bics	r5, r3
   343c4:	3508      	adds	r5, #8
   343c6:	0006      	movs	r6, r0
   343c8:	2d0c      	cmp	r5, #12
   343ca:	d21e      	bcs.n	3440a <_malloc_r+0x4e>
   343cc:	250c      	movs	r5, #12
   343ce:	42a9      	cmp	r1, r5
   343d0:	d81d      	bhi.n	3440e <_malloc_r+0x52>
   343d2:	0030      	movs	r0, r6
   343d4:	f000 fd8c 	bl	34ef0 <__malloc_lock>
   343d8:	4a25      	ldr	r2, [pc, #148]	; (34470 <_malloc_r+0xb4>)
   343da:	6814      	ldr	r4, [r2, #0]
   343dc:	0021      	movs	r1, r4
   343de:	2900      	cmp	r1, #0
   343e0:	d119      	bne.n	34416 <_malloc_r+0x5a>
   343e2:	4c24      	ldr	r4, [pc, #144]	; (34474 <_malloc_r+0xb8>)
   343e4:	6823      	ldr	r3, [r4, #0]
   343e6:	2b00      	cmp	r3, #0
   343e8:	d103      	bne.n	343f2 <_malloc_r+0x36>
   343ea:	0030      	movs	r0, r6
   343ec:	f000 f8ae 	bl	3454c <_sbrk_r>
   343f0:	6020      	str	r0, [r4, #0]
   343f2:	0029      	movs	r1, r5
   343f4:	0030      	movs	r0, r6
   343f6:	f000 f8a9 	bl	3454c <_sbrk_r>
   343fa:	1c43      	adds	r3, r0, #1
   343fc:	d12c      	bne.n	34458 <_malloc_r+0x9c>
   343fe:	230c      	movs	r3, #12
   34400:	0030      	movs	r0, r6
   34402:	6033      	str	r3, [r6, #0]
   34404:	f000 fd75 	bl	34ef2 <__malloc_unlock>
   34408:	e003      	b.n	34412 <_malloc_r+0x56>
   3440a:	2d00      	cmp	r5, #0
   3440c:	dadf      	bge.n	343ce <_malloc_r+0x12>
   3440e:	230c      	movs	r3, #12
   34410:	6033      	str	r3, [r6, #0]
   34412:	2000      	movs	r0, #0
   34414:	bd70      	pop	{r4, r5, r6, pc}
   34416:	680b      	ldr	r3, [r1, #0]
   34418:	1b5b      	subs	r3, r3, r5
   3441a:	d41a      	bmi.n	34452 <_malloc_r+0x96>
   3441c:	2b0b      	cmp	r3, #11
   3441e:	d903      	bls.n	34428 <_malloc_r+0x6c>
   34420:	600b      	str	r3, [r1, #0]
   34422:	18cc      	adds	r4, r1, r3
   34424:	6025      	str	r5, [r4, #0]
   34426:	e003      	b.n	34430 <_malloc_r+0x74>
   34428:	428c      	cmp	r4, r1
   3442a:	d10e      	bne.n	3444a <_malloc_r+0x8e>
   3442c:	6863      	ldr	r3, [r4, #4]
   3442e:	6013      	str	r3, [r2, #0]
   34430:	0030      	movs	r0, r6
   34432:	f000 fd5e 	bl	34ef2 <__malloc_unlock>
   34436:	0020      	movs	r0, r4
   34438:	2207      	movs	r2, #7
   3443a:	300b      	adds	r0, #11
   3443c:	1d23      	adds	r3, r4, #4
   3443e:	4390      	bics	r0, r2
   34440:	1ac3      	subs	r3, r0, r3
   34442:	d0e7      	beq.n	34414 <_malloc_r+0x58>
   34444:	425a      	negs	r2, r3
   34446:	50e2      	str	r2, [r4, r3]
   34448:	e7e4      	b.n	34414 <_malloc_r+0x58>
   3444a:	684b      	ldr	r3, [r1, #4]
   3444c:	6063      	str	r3, [r4, #4]
   3444e:	000c      	movs	r4, r1
   34450:	e7ee      	b.n	34430 <_malloc_r+0x74>
   34452:	000c      	movs	r4, r1
   34454:	6849      	ldr	r1, [r1, #4]
   34456:	e7c2      	b.n	343de <_malloc_r+0x22>
   34458:	2303      	movs	r3, #3
   3445a:	1cc4      	adds	r4, r0, #3
   3445c:	439c      	bics	r4, r3
   3445e:	42a0      	cmp	r0, r4
   34460:	d0e0      	beq.n	34424 <_malloc_r+0x68>
   34462:	1a21      	subs	r1, r4, r0
   34464:	0030      	movs	r0, r6
   34466:	f000 f871 	bl	3454c <_sbrk_r>
   3446a:	1c43      	adds	r3, r0, #1
   3446c:	d1da      	bne.n	34424 <_malloc_r+0x68>
   3446e:	e7c6      	b.n	343fe <_malloc_r+0x42>
   34470:	200045a0 	.word	0x200045a0
   34474:	200045a4 	.word	0x200045a4

00034478 <_puts_r>:
   34478:	b570      	push	{r4, r5, r6, lr}
   3447a:	0005      	movs	r5, r0
   3447c:	000e      	movs	r6, r1
   3447e:	2800      	cmp	r0, #0
   34480:	d004      	beq.n	3448c <_puts_r+0x14>
   34482:	6983      	ldr	r3, [r0, #24]
   34484:	2b00      	cmp	r3, #0
   34486:	d101      	bne.n	3448c <_puts_r+0x14>
   34488:	f000 fc0e 	bl	34ca8 <__sinit>
   3448c:	69ab      	ldr	r3, [r5, #24]
   3448e:	68ac      	ldr	r4, [r5, #8]
   34490:	2b00      	cmp	r3, #0
   34492:	d102      	bne.n	3449a <_puts_r+0x22>
   34494:	0028      	movs	r0, r5
   34496:	f000 fc07 	bl	34ca8 <__sinit>
   3449a:	4b24      	ldr	r3, [pc, #144]	; (3452c <_puts_r+0xb4>)
   3449c:	429c      	cmp	r4, r3
   3449e:	d10f      	bne.n	344c0 <_puts_r+0x48>
   344a0:	686c      	ldr	r4, [r5, #4]
   344a2:	89a3      	ldrh	r3, [r4, #12]
   344a4:	071b      	lsls	r3, r3, #28
   344a6:	d502      	bpl.n	344ae <_puts_r+0x36>
   344a8:	6923      	ldr	r3, [r4, #16]
   344aa:	2b00      	cmp	r3, #0
   344ac:	d120      	bne.n	344f0 <_puts_r+0x78>
   344ae:	0021      	movs	r1, r4
   344b0:	0028      	movs	r0, r5
   344b2:	f000 fa8b 	bl	349cc <__swsetup_r>
   344b6:	2800      	cmp	r0, #0
   344b8:	d01a      	beq.n	344f0 <_puts_r+0x78>
   344ba:	2001      	movs	r0, #1
   344bc:	4240      	negs	r0, r0
   344be:	bd70      	pop	{r4, r5, r6, pc}
   344c0:	4b1b      	ldr	r3, [pc, #108]	; (34530 <_puts_r+0xb8>)
   344c2:	429c      	cmp	r4, r3
   344c4:	d101      	bne.n	344ca <_puts_r+0x52>
   344c6:	68ac      	ldr	r4, [r5, #8]
   344c8:	e7eb      	b.n	344a2 <_puts_r+0x2a>
   344ca:	4b1a      	ldr	r3, [pc, #104]	; (34534 <_puts_r+0xbc>)
   344cc:	429c      	cmp	r4, r3
   344ce:	d1e8      	bne.n	344a2 <_puts_r+0x2a>
   344d0:	68ec      	ldr	r4, [r5, #12]
   344d2:	e7e6      	b.n	344a2 <_puts_r+0x2a>
   344d4:	3b01      	subs	r3, #1
   344d6:	3601      	adds	r6, #1
   344d8:	60a3      	str	r3, [r4, #8]
   344da:	2b00      	cmp	r3, #0
   344dc:	da04      	bge.n	344e8 <_puts_r+0x70>
   344de:	69a2      	ldr	r2, [r4, #24]
   344e0:	4293      	cmp	r3, r2
   344e2:	db16      	blt.n	34512 <_puts_r+0x9a>
   344e4:	290a      	cmp	r1, #10
   344e6:	d014      	beq.n	34512 <_puts_r+0x9a>
   344e8:	6823      	ldr	r3, [r4, #0]
   344ea:	1c5a      	adds	r2, r3, #1
   344ec:	6022      	str	r2, [r4, #0]
   344ee:	7019      	strb	r1, [r3, #0]
   344f0:	7831      	ldrb	r1, [r6, #0]
   344f2:	68a3      	ldr	r3, [r4, #8]
   344f4:	2900      	cmp	r1, #0
   344f6:	d1ed      	bne.n	344d4 <_puts_r+0x5c>
   344f8:	3b01      	subs	r3, #1
   344fa:	60a3      	str	r3, [r4, #8]
   344fc:	2b00      	cmp	r3, #0
   344fe:	da0f      	bge.n	34520 <_puts_r+0xa8>
   34500:	0022      	movs	r2, r4
   34502:	310a      	adds	r1, #10
   34504:	0028      	movs	r0, r5
   34506:	f000 fa0b 	bl	34920 <__swbuf_r>
   3450a:	1c43      	adds	r3, r0, #1
   3450c:	d0d5      	beq.n	344ba <_puts_r+0x42>
   3450e:	200a      	movs	r0, #10
   34510:	e7d5      	b.n	344be <_puts_r+0x46>
   34512:	0022      	movs	r2, r4
   34514:	0028      	movs	r0, r5
   34516:	f000 fa03 	bl	34920 <__swbuf_r>
   3451a:	1c43      	adds	r3, r0, #1
   3451c:	d1e8      	bne.n	344f0 <_puts_r+0x78>
   3451e:	e7cc      	b.n	344ba <_puts_r+0x42>
   34520:	200a      	movs	r0, #10
   34522:	6823      	ldr	r3, [r4, #0]
   34524:	1c5a      	adds	r2, r3, #1
   34526:	6022      	str	r2, [r4, #0]
   34528:	7018      	strb	r0, [r3, #0]
   3452a:	e7c8      	b.n	344be <_puts_r+0x46>
   3452c:	00039a0c 	.word	0x00039a0c
   34530:	00039a2c 	.word	0x00039a2c
   34534:	000399ec 	.word	0x000399ec

00034538 <puts>:
   34538:	b510      	push	{r4, lr}
   3453a:	4b03      	ldr	r3, [pc, #12]	; (34548 <puts+0x10>)
   3453c:	0001      	movs	r1, r0
   3453e:	6818      	ldr	r0, [r3, #0]
   34540:	f7ff ff9a 	bl	34478 <_puts_r>
   34544:	bd10      	pop	{r4, pc}
   34546:	46c0      	nop			; (mov r8, r8)
   34548:	20000128 	.word	0x20000128

0003454c <_sbrk_r>:
   3454c:	2300      	movs	r3, #0
   3454e:	b570      	push	{r4, r5, r6, lr}
   34550:	4c06      	ldr	r4, [pc, #24]	; (3456c <_sbrk_r+0x20>)
   34552:	0005      	movs	r5, r0
   34554:	0008      	movs	r0, r1
   34556:	6023      	str	r3, [r4, #0]
   34558:	f7f6 fa64 	bl	2aa24 <_sbrk>
   3455c:	1c43      	adds	r3, r0, #1
   3455e:	d103      	bne.n	34568 <_sbrk_r+0x1c>
   34560:	6823      	ldr	r3, [r4, #0]
   34562:	2b00      	cmp	r3, #0
   34564:	d000      	beq.n	34568 <_sbrk_r+0x1c>
   34566:	602b      	str	r3, [r5, #0]
   34568:	bd70      	pop	{r4, r5, r6, pc}
   3456a:	46c0      	nop			; (mov r8, r8)
   3456c:	20005a94 	.word	0x20005a94

00034570 <sniprintf>:
   34570:	b40c      	push	{r2, r3}
   34572:	b530      	push	{r4, r5, lr}
   34574:	4b16      	ldr	r3, [pc, #88]	; (345d0 <sniprintf+0x60>)
   34576:	b09d      	sub	sp, #116	; 0x74
   34578:	1e0c      	subs	r4, r1, #0
   3457a:	681d      	ldr	r5, [r3, #0]
   3457c:	da08      	bge.n	34590 <sniprintf+0x20>
   3457e:	238b      	movs	r3, #139	; 0x8b
   34580:	2001      	movs	r0, #1
   34582:	602b      	str	r3, [r5, #0]
   34584:	4240      	negs	r0, r0
   34586:	b01d      	add	sp, #116	; 0x74
   34588:	bc30      	pop	{r4, r5}
   3458a:	bc08      	pop	{r3}
   3458c:	b002      	add	sp, #8
   3458e:	4718      	bx	r3
   34590:	2382      	movs	r3, #130	; 0x82
   34592:	a902      	add	r1, sp, #8
   34594:	009b      	lsls	r3, r3, #2
   34596:	818b      	strh	r3, [r1, #12]
   34598:	2300      	movs	r3, #0
   3459a:	9002      	str	r0, [sp, #8]
   3459c:	6108      	str	r0, [r1, #16]
   3459e:	429c      	cmp	r4, r3
   345a0:	d000      	beq.n	345a4 <sniprintf+0x34>
   345a2:	1e63      	subs	r3, r4, #1
   345a4:	608b      	str	r3, [r1, #8]
   345a6:	614b      	str	r3, [r1, #20]
   345a8:	2301      	movs	r3, #1
   345aa:	425b      	negs	r3, r3
   345ac:	81cb      	strh	r3, [r1, #14]
   345ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
   345b0:	ab21      	add	r3, sp, #132	; 0x84
   345b2:	0028      	movs	r0, r5
   345b4:	9301      	str	r3, [sp, #4]
   345b6:	f000 fcff 	bl	34fb8 <_svfiprintf_r>
   345ba:	1c43      	adds	r3, r0, #1
   345bc:	da01      	bge.n	345c2 <sniprintf+0x52>
   345be:	238b      	movs	r3, #139	; 0x8b
   345c0:	602b      	str	r3, [r5, #0]
   345c2:	2c00      	cmp	r4, #0
   345c4:	d0df      	beq.n	34586 <sniprintf+0x16>
   345c6:	2300      	movs	r3, #0
   345c8:	9a02      	ldr	r2, [sp, #8]
   345ca:	7013      	strb	r3, [r2, #0]
   345cc:	e7db      	b.n	34586 <sniprintf+0x16>
   345ce:	46c0      	nop			; (mov r8, r8)
   345d0:	20000128 	.word	0x20000128

000345d4 <siprintf>:
   345d4:	b40e      	push	{r1, r2, r3}
   345d6:	b510      	push	{r4, lr}
   345d8:	b09d      	sub	sp, #116	; 0x74
   345da:	a902      	add	r1, sp, #8
   345dc:	9002      	str	r0, [sp, #8]
   345de:	6108      	str	r0, [r1, #16]
   345e0:	480b      	ldr	r0, [pc, #44]	; (34610 <siprintf+0x3c>)
   345e2:	2482      	movs	r4, #130	; 0x82
   345e4:	6088      	str	r0, [r1, #8]
   345e6:	6148      	str	r0, [r1, #20]
   345e8:	2001      	movs	r0, #1
   345ea:	4240      	negs	r0, r0
   345ec:	ab1f      	add	r3, sp, #124	; 0x7c
   345ee:	81c8      	strh	r0, [r1, #14]
   345f0:	4808      	ldr	r0, [pc, #32]	; (34614 <siprintf+0x40>)
   345f2:	cb04      	ldmia	r3!, {r2}
   345f4:	00a4      	lsls	r4, r4, #2
   345f6:	6800      	ldr	r0, [r0, #0]
   345f8:	9301      	str	r3, [sp, #4]
   345fa:	818c      	strh	r4, [r1, #12]
   345fc:	f000 fcdc 	bl	34fb8 <_svfiprintf_r>
   34600:	2300      	movs	r3, #0
   34602:	9a02      	ldr	r2, [sp, #8]
   34604:	7013      	strb	r3, [r2, #0]
   34606:	b01d      	add	sp, #116	; 0x74
   34608:	bc10      	pop	{r4}
   3460a:	bc08      	pop	{r3}
   3460c:	b003      	add	sp, #12
   3460e:	4718      	bx	r3
   34610:	7fffffff 	.word	0x7fffffff
   34614:	20000128 	.word	0x20000128

00034618 <strcasecmp>:
   34618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3461a:	0007      	movs	r7, r0
   3461c:	000e      	movs	r6, r1
   3461e:	783c      	ldrb	r4, [r7, #0]
   34620:	f000 fbda 	bl	34dd8 <__locale_ctype_ptr>
   34624:	2203      	movs	r2, #3
   34626:	1900      	adds	r0, r0, r4
   34628:	7843      	ldrb	r3, [r0, #1]
   3462a:	4013      	ands	r3, r2
   3462c:	2b01      	cmp	r3, #1
   3462e:	d100      	bne.n	34632 <strcasecmp+0x1a>
   34630:	3420      	adds	r4, #32
   34632:	7835      	ldrb	r5, [r6, #0]
   34634:	f000 fbd0 	bl	34dd8 <__locale_ctype_ptr>
   34638:	2203      	movs	r2, #3
   3463a:	1940      	adds	r0, r0, r5
   3463c:	7843      	ldrb	r3, [r0, #1]
   3463e:	4013      	ands	r3, r2
   34640:	2b01      	cmp	r3, #1
   34642:	d100      	bne.n	34646 <strcasecmp+0x2e>
   34644:	3520      	adds	r5, #32
   34646:	1b60      	subs	r0, r4, r5
   34648:	d103      	bne.n	34652 <strcasecmp+0x3a>
   3464a:	3701      	adds	r7, #1
   3464c:	3601      	adds	r6, #1
   3464e:	2d00      	cmp	r5, #0
   34650:	d1e5      	bne.n	3461e <strcasecmp+0x6>
   34652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034654 <strcat>:
   34654:	0002      	movs	r2, r0
   34656:	b510      	push	{r4, lr}
   34658:	7813      	ldrb	r3, [r2, #0]
   3465a:	2b00      	cmp	r3, #0
   3465c:	d105      	bne.n	3466a <strcat+0x16>
   3465e:	5ccc      	ldrb	r4, [r1, r3]
   34660:	54d4      	strb	r4, [r2, r3]
   34662:	3301      	adds	r3, #1
   34664:	2c00      	cmp	r4, #0
   34666:	d1fa      	bne.n	3465e <strcat+0xa>
   34668:	bd10      	pop	{r4, pc}
   3466a:	3201      	adds	r2, #1
   3466c:	e7f4      	b.n	34658 <strcat+0x4>

0003466e <strcmp>:
   3466e:	7802      	ldrb	r2, [r0, #0]
   34670:	780b      	ldrb	r3, [r1, #0]
   34672:	2a00      	cmp	r2, #0
   34674:	d003      	beq.n	3467e <strcmp+0x10>
   34676:	3001      	adds	r0, #1
   34678:	3101      	adds	r1, #1
   3467a:	429a      	cmp	r2, r3
   3467c:	d0f7      	beq.n	3466e <strcmp>
   3467e:	1ad0      	subs	r0, r2, r3
   34680:	4770      	bx	lr

00034682 <strcpy>:
   34682:	1c03      	adds	r3, r0, #0
   34684:	780a      	ldrb	r2, [r1, #0]
   34686:	3101      	adds	r1, #1
   34688:	701a      	strb	r2, [r3, #0]
   3468a:	3301      	adds	r3, #1
   3468c:	2a00      	cmp	r2, #0
   3468e:	d1f9      	bne.n	34684 <strcpy+0x2>
   34690:	4770      	bx	lr
	...

00034694 <strdup>:
   34694:	b510      	push	{r4, lr}
   34696:	4b03      	ldr	r3, [pc, #12]	; (346a4 <strdup+0x10>)
   34698:	0001      	movs	r1, r0
   3469a:	6818      	ldr	r0, [r3, #0]
   3469c:	f000 f804 	bl	346a8 <_strdup_r>
   346a0:	bd10      	pop	{r4, pc}
   346a2:	46c0      	nop			; (mov r8, r8)
   346a4:	20000128 	.word	0x20000128

000346a8 <_strdup_r>:
   346a8:	b570      	push	{r4, r5, r6, lr}
   346aa:	0005      	movs	r5, r0
   346ac:	0008      	movs	r0, r1
   346ae:	000e      	movs	r6, r1
   346b0:	f000 f80d 	bl	346ce <strlen>
   346b4:	1c44      	adds	r4, r0, #1
   346b6:	0021      	movs	r1, r4
   346b8:	0028      	movs	r0, r5
   346ba:	f7ff fe7f 	bl	343bc <_malloc_r>
   346be:	1e05      	subs	r5, r0, #0
   346c0:	d003      	beq.n	346ca <_strdup_r+0x22>
   346c2:	0022      	movs	r2, r4
   346c4:	0031      	movs	r1, r6
   346c6:	f7ff fe0b 	bl	342e0 <memcpy>
   346ca:	0028      	movs	r0, r5
   346cc:	bd70      	pop	{r4, r5, r6, pc}

000346ce <strlen>:
   346ce:	2300      	movs	r3, #0
   346d0:	5cc2      	ldrb	r2, [r0, r3]
   346d2:	3301      	adds	r3, #1
   346d4:	2a00      	cmp	r2, #0
   346d6:	d1fb      	bne.n	346d0 <strlen+0x2>
   346d8:	1e58      	subs	r0, r3, #1
   346da:	4770      	bx	lr

000346dc <strncmp>:
   346dc:	2300      	movs	r3, #0
   346de:	b530      	push	{r4, r5, lr}
   346e0:	429a      	cmp	r2, r3
   346e2:	d00a      	beq.n	346fa <strncmp+0x1e>
   346e4:	3a01      	subs	r2, #1
   346e6:	5cc4      	ldrb	r4, [r0, r3]
   346e8:	5ccd      	ldrb	r5, [r1, r3]
   346ea:	42ac      	cmp	r4, r5
   346ec:	d104      	bne.n	346f8 <strncmp+0x1c>
   346ee:	429a      	cmp	r2, r3
   346f0:	d002      	beq.n	346f8 <strncmp+0x1c>
   346f2:	3301      	adds	r3, #1
   346f4:	2c00      	cmp	r4, #0
   346f6:	d1f6      	bne.n	346e6 <strncmp+0xa>
   346f8:	1b63      	subs	r3, r4, r5
   346fa:	0018      	movs	r0, r3
   346fc:	bd30      	pop	{r4, r5, pc}

000346fe <strncpy>:
   346fe:	b570      	push	{r4, r5, r6, lr}
   34700:	0004      	movs	r4, r0
   34702:	2a00      	cmp	r2, #0
   34704:	d100      	bne.n	34708 <strncpy+0xa>
   34706:	bd70      	pop	{r4, r5, r6, pc}
   34708:	780d      	ldrb	r5, [r1, #0]
   3470a:	1e56      	subs	r6, r2, #1
   3470c:	1c63      	adds	r3, r4, #1
   3470e:	7025      	strb	r5, [r4, #0]
   34710:	3101      	adds	r1, #1
   34712:	2d00      	cmp	r5, #0
   34714:	d105      	bne.n	34722 <strncpy+0x24>
   34716:	18a4      	adds	r4, r4, r2
   34718:	429c      	cmp	r4, r3
   3471a:	d0f4      	beq.n	34706 <strncpy+0x8>
   3471c:	701d      	strb	r5, [r3, #0]
   3471e:	3301      	adds	r3, #1
   34720:	e7fa      	b.n	34718 <strncpy+0x1a>
   34722:	001c      	movs	r4, r3
   34724:	0032      	movs	r2, r6
   34726:	e7ec      	b.n	34702 <strncpy+0x4>

00034728 <strrchr>:
   34728:	b570      	push	{r4, r5, r6, lr}
   3472a:	000d      	movs	r5, r1
   3472c:	2400      	movs	r4, #0
   3472e:	2900      	cmp	r1, #0
   34730:	d105      	bne.n	3473e <strrchr+0x16>
   34732:	f000 ff19 	bl	35568 <strchr>
   34736:	0004      	movs	r4, r0
   34738:	e006      	b.n	34748 <strrchr+0x20>
   3473a:	001c      	movs	r4, r3
   3473c:	1c58      	adds	r0, r3, #1
   3473e:	0029      	movs	r1, r5
   34740:	f000 ff12 	bl	35568 <strchr>
   34744:	1e03      	subs	r3, r0, #0
   34746:	d1f8      	bne.n	3473a <strrchr+0x12>
   34748:	0020      	movs	r0, r4
   3474a:	bd70      	pop	{r4, r5, r6, pc}

0003474c <strstr>:
   3474c:	b510      	push	{r4, lr}
   3474e:	0002      	movs	r2, r0
   34750:	7800      	ldrb	r0, [r0, #0]
   34752:	2800      	cmp	r0, #0
   34754:	d104      	bne.n	34760 <strstr+0x14>
   34756:	7809      	ldrb	r1, [r1, #0]
   34758:	2900      	cmp	r1, #0
   3475a:	d00d      	beq.n	34778 <strstr+0x2c>
   3475c:	bd10      	pop	{r4, pc}
   3475e:	3201      	adds	r2, #1
   34760:	7810      	ldrb	r0, [r2, #0]
   34762:	2800      	cmp	r0, #0
   34764:	d0fa      	beq.n	3475c <strstr+0x10>
   34766:	2300      	movs	r3, #0
   34768:	5cc8      	ldrb	r0, [r1, r3]
   3476a:	2800      	cmp	r0, #0
   3476c:	d004      	beq.n	34778 <strstr+0x2c>
   3476e:	5cd4      	ldrb	r4, [r2, r3]
   34770:	4284      	cmp	r4, r0
   34772:	d1f4      	bne.n	3475e <strstr+0x12>
   34774:	3301      	adds	r3, #1
   34776:	e7f7      	b.n	34768 <strstr+0x1c>
   34778:	0010      	movs	r0, r2
   3477a:	e7ef      	b.n	3475c <strstr+0x10>

0003477c <_strtol_l.isra.0>:
   3477c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3477e:	001f      	movs	r7, r3
   34780:	000e      	movs	r6, r1
   34782:	b087      	sub	sp, #28
   34784:	9005      	str	r0, [sp, #20]
   34786:	9103      	str	r1, [sp, #12]
   34788:	9202      	str	r2, [sp, #8]
   3478a:	980c      	ldr	r0, [sp, #48]	; 0x30
   3478c:	7834      	ldrb	r4, [r6, #0]
   3478e:	f000 fb20 	bl	34dd2 <__locale_ctype_ptr_l>
   34792:	2208      	movs	r2, #8
   34794:	1900      	adds	r0, r0, r4
   34796:	7843      	ldrb	r3, [r0, #1]
   34798:	1c75      	adds	r5, r6, #1
   3479a:	4013      	ands	r3, r2
   3479c:	d10c      	bne.n	347b8 <_strtol_l.isra.0+0x3c>
   3479e:	2c2d      	cmp	r4, #45	; 0x2d
   347a0:	d10c      	bne.n	347bc <_strtol_l.isra.0+0x40>
   347a2:	3301      	adds	r3, #1
   347a4:	782c      	ldrb	r4, [r5, #0]
   347a6:	9301      	str	r3, [sp, #4]
   347a8:	1cb5      	adds	r5, r6, #2
   347aa:	2f00      	cmp	r7, #0
   347ac:	d00c      	beq.n	347c8 <_strtol_l.isra.0+0x4c>
   347ae:	2f10      	cmp	r7, #16
   347b0:	d114      	bne.n	347dc <_strtol_l.isra.0+0x60>
   347b2:	2c30      	cmp	r4, #48	; 0x30
   347b4:	d00a      	beq.n	347cc <_strtol_l.isra.0+0x50>
   347b6:	e011      	b.n	347dc <_strtol_l.isra.0+0x60>
   347b8:	002e      	movs	r6, r5
   347ba:	e7e6      	b.n	3478a <_strtol_l.isra.0+0xe>
   347bc:	9301      	str	r3, [sp, #4]
   347be:	2c2b      	cmp	r4, #43	; 0x2b
   347c0:	d1f3      	bne.n	347aa <_strtol_l.isra.0+0x2e>
   347c2:	782c      	ldrb	r4, [r5, #0]
   347c4:	1cb5      	adds	r5, r6, #2
   347c6:	e7f0      	b.n	347aa <_strtol_l.isra.0+0x2e>
   347c8:	2c30      	cmp	r4, #48	; 0x30
   347ca:	d12f      	bne.n	3482c <_strtol_l.isra.0+0xb0>
   347cc:	2220      	movs	r2, #32
   347ce:	782b      	ldrb	r3, [r5, #0]
   347d0:	4393      	bics	r3, r2
   347d2:	2b58      	cmp	r3, #88	; 0x58
   347d4:	d151      	bne.n	3487a <_strtol_l.isra.0+0xfe>
   347d6:	2710      	movs	r7, #16
   347d8:	786c      	ldrb	r4, [r5, #1]
   347da:	3502      	adds	r5, #2
   347dc:	9b01      	ldr	r3, [sp, #4]
   347de:	4a29      	ldr	r2, [pc, #164]	; (34884 <_strtol_l.isra.0+0x108>)
   347e0:	0039      	movs	r1, r7
   347e2:	189e      	adds	r6, r3, r2
   347e4:	0030      	movs	r0, r6
   347e6:	f7fd fdb3 	bl	32350 <__aeabi_uidivmod>
   347ea:	0030      	movs	r0, r6
   347ec:	9104      	str	r1, [sp, #16]
   347ee:	0039      	movs	r1, r7
   347f0:	f7fd fd28 	bl	32244 <__udivsi3>
   347f4:	2101      	movs	r1, #1
   347f6:	2300      	movs	r3, #0
   347f8:	4249      	negs	r1, r1
   347fa:	0002      	movs	r2, r0
   347fc:	468c      	mov	ip, r1
   347fe:	0018      	movs	r0, r3
   34800:	0021      	movs	r1, r4
   34802:	3930      	subs	r1, #48	; 0x30
   34804:	2909      	cmp	r1, #9
   34806:	d813      	bhi.n	34830 <_strtol_l.isra.0+0xb4>
   34808:	000c      	movs	r4, r1
   3480a:	42a7      	cmp	r7, r4
   3480c:	dd1c      	ble.n	34848 <_strtol_l.isra.0+0xcc>
   3480e:	1c59      	adds	r1, r3, #1
   34810:	d009      	beq.n	34826 <_strtol_l.isra.0+0xaa>
   34812:	4663      	mov	r3, ip
   34814:	4282      	cmp	r2, r0
   34816:	d306      	bcc.n	34826 <_strtol_l.isra.0+0xaa>
   34818:	d102      	bne.n	34820 <_strtol_l.isra.0+0xa4>
   3481a:	9904      	ldr	r1, [sp, #16]
   3481c:	42a1      	cmp	r1, r4
   3481e:	db02      	blt.n	34826 <_strtol_l.isra.0+0xaa>
   34820:	2301      	movs	r3, #1
   34822:	4378      	muls	r0, r7
   34824:	1820      	adds	r0, r4, r0
   34826:	782c      	ldrb	r4, [r5, #0]
   34828:	3501      	adds	r5, #1
   3482a:	e7e9      	b.n	34800 <_strtol_l.isra.0+0x84>
   3482c:	270a      	movs	r7, #10
   3482e:	e7d5      	b.n	347dc <_strtol_l.isra.0+0x60>
   34830:	0021      	movs	r1, r4
   34832:	3941      	subs	r1, #65	; 0x41
   34834:	2919      	cmp	r1, #25
   34836:	d801      	bhi.n	3483c <_strtol_l.isra.0+0xc0>
   34838:	3c37      	subs	r4, #55	; 0x37
   3483a:	e7e6      	b.n	3480a <_strtol_l.isra.0+0x8e>
   3483c:	0021      	movs	r1, r4
   3483e:	3961      	subs	r1, #97	; 0x61
   34840:	2919      	cmp	r1, #25
   34842:	d801      	bhi.n	34848 <_strtol_l.isra.0+0xcc>
   34844:	3c57      	subs	r4, #87	; 0x57
   34846:	e7e0      	b.n	3480a <_strtol_l.isra.0+0x8e>
   34848:	1c5a      	adds	r2, r3, #1
   3484a:	d108      	bne.n	3485e <_strtol_l.isra.0+0xe2>
   3484c:	9a05      	ldr	r2, [sp, #20]
   3484e:	3323      	adds	r3, #35	; 0x23
   34850:	6013      	str	r3, [r2, #0]
   34852:	9b02      	ldr	r3, [sp, #8]
   34854:	0030      	movs	r0, r6
   34856:	2b00      	cmp	r3, #0
   34858:	d10b      	bne.n	34872 <_strtol_l.isra.0+0xf6>
   3485a:	b007      	add	sp, #28
   3485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3485e:	9a01      	ldr	r2, [sp, #4]
   34860:	2a00      	cmp	r2, #0
   34862:	d000      	beq.n	34866 <_strtol_l.isra.0+0xea>
   34864:	4240      	negs	r0, r0
   34866:	9a02      	ldr	r2, [sp, #8]
   34868:	2a00      	cmp	r2, #0
   3486a:	d0f6      	beq.n	3485a <_strtol_l.isra.0+0xde>
   3486c:	9a03      	ldr	r2, [sp, #12]
   3486e:	2b00      	cmp	r3, #0
   34870:	d000      	beq.n	34874 <_strtol_l.isra.0+0xf8>
   34872:	1e6a      	subs	r2, r5, #1
   34874:	9b02      	ldr	r3, [sp, #8]
   34876:	601a      	str	r2, [r3, #0]
   34878:	e7ef      	b.n	3485a <_strtol_l.isra.0+0xde>
   3487a:	2430      	movs	r4, #48	; 0x30
   3487c:	2f00      	cmp	r7, #0
   3487e:	d1ad      	bne.n	347dc <_strtol_l.isra.0+0x60>
   34880:	3708      	adds	r7, #8
   34882:	e7ab      	b.n	347dc <_strtol_l.isra.0+0x60>
   34884:	7fffffff 	.word	0x7fffffff

00034888 <strtol>:
   34888:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3488a:	0013      	movs	r3, r2
   3488c:	4a06      	ldr	r2, [pc, #24]	; (348a8 <strtol+0x20>)
   3488e:	0005      	movs	r5, r0
   34890:	6810      	ldr	r0, [r2, #0]
   34892:	6a04      	ldr	r4, [r0, #32]
   34894:	2c00      	cmp	r4, #0
   34896:	d100      	bne.n	3489a <strtol+0x12>
   34898:	4c04      	ldr	r4, [pc, #16]	; (348ac <strtol+0x24>)
   3489a:	000a      	movs	r2, r1
   3489c:	9400      	str	r4, [sp, #0]
   3489e:	0029      	movs	r1, r5
   348a0:	f7ff ff6c 	bl	3477c <_strtol_l.isra.0>
   348a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   348a6:	46c0      	nop			; (mov r8, r8)
   348a8:	20000128 	.word	0x20000128
   348ac:	2000018c 	.word	0x2000018c

000348b0 <_vsniprintf_r>:
   348b0:	b530      	push	{r4, r5, lr}
   348b2:	0014      	movs	r4, r2
   348b4:	b09b      	sub	sp, #108	; 0x6c
   348b6:	0005      	movs	r5, r0
   348b8:	001a      	movs	r2, r3
   348ba:	2c00      	cmp	r4, #0
   348bc:	da05      	bge.n	348ca <_vsniprintf_r+0x1a>
   348be:	238b      	movs	r3, #139	; 0x8b
   348c0:	6003      	str	r3, [r0, #0]
   348c2:	2001      	movs	r0, #1
   348c4:	4240      	negs	r0, r0
   348c6:	b01b      	add	sp, #108	; 0x6c
   348c8:	bd30      	pop	{r4, r5, pc}
   348ca:	2382      	movs	r3, #130	; 0x82
   348cc:	4668      	mov	r0, sp
   348ce:	009b      	lsls	r3, r3, #2
   348d0:	8183      	strh	r3, [r0, #12]
   348d2:	2300      	movs	r3, #0
   348d4:	9100      	str	r1, [sp, #0]
   348d6:	9104      	str	r1, [sp, #16]
   348d8:	429c      	cmp	r4, r3
   348da:	d000      	beq.n	348de <_vsniprintf_r+0x2e>
   348dc:	1e63      	subs	r3, r4, #1
   348de:	9302      	str	r3, [sp, #8]
   348e0:	9305      	str	r3, [sp, #20]
   348e2:	2301      	movs	r3, #1
   348e4:	4669      	mov	r1, sp
   348e6:	425b      	negs	r3, r3
   348e8:	81cb      	strh	r3, [r1, #14]
   348ea:	0028      	movs	r0, r5
   348ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   348ee:	f000 fb63 	bl	34fb8 <_svfiprintf_r>
   348f2:	1c43      	adds	r3, r0, #1
   348f4:	da01      	bge.n	348fa <_vsniprintf_r+0x4a>
   348f6:	238b      	movs	r3, #139	; 0x8b
   348f8:	602b      	str	r3, [r5, #0]
   348fa:	2c00      	cmp	r4, #0
   348fc:	d0e3      	beq.n	348c6 <_vsniprintf_r+0x16>
   348fe:	2300      	movs	r3, #0
   34900:	9a00      	ldr	r2, [sp, #0]
   34902:	7013      	strb	r3, [r2, #0]
   34904:	e7df      	b.n	348c6 <_vsniprintf_r+0x16>
	...

00034908 <vsniprintf>:
   34908:	b507      	push	{r0, r1, r2, lr}
   3490a:	9300      	str	r3, [sp, #0]
   3490c:	0013      	movs	r3, r2
   3490e:	000a      	movs	r2, r1
   34910:	0001      	movs	r1, r0
   34912:	4802      	ldr	r0, [pc, #8]	; (3491c <vsniprintf+0x14>)
   34914:	6800      	ldr	r0, [r0, #0]
   34916:	f7ff ffcb 	bl	348b0 <_vsniprintf_r>
   3491a:	bd0e      	pop	{r1, r2, r3, pc}
   3491c:	20000128 	.word	0x20000128

00034920 <__swbuf_r>:
   34920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34922:	0005      	movs	r5, r0
   34924:	000e      	movs	r6, r1
   34926:	0014      	movs	r4, r2
   34928:	2800      	cmp	r0, #0
   3492a:	d004      	beq.n	34936 <__swbuf_r+0x16>
   3492c:	6983      	ldr	r3, [r0, #24]
   3492e:	2b00      	cmp	r3, #0
   34930:	d101      	bne.n	34936 <__swbuf_r+0x16>
   34932:	f000 f9b9 	bl	34ca8 <__sinit>
   34936:	4b22      	ldr	r3, [pc, #136]	; (349c0 <__swbuf_r+0xa0>)
   34938:	429c      	cmp	r4, r3
   3493a:	d12d      	bne.n	34998 <__swbuf_r+0x78>
   3493c:	686c      	ldr	r4, [r5, #4]
   3493e:	69a3      	ldr	r3, [r4, #24]
   34940:	60a3      	str	r3, [r4, #8]
   34942:	89a3      	ldrh	r3, [r4, #12]
   34944:	071b      	lsls	r3, r3, #28
   34946:	d531      	bpl.n	349ac <__swbuf_r+0x8c>
   34948:	6923      	ldr	r3, [r4, #16]
   3494a:	2b00      	cmp	r3, #0
   3494c:	d02e      	beq.n	349ac <__swbuf_r+0x8c>
   3494e:	6823      	ldr	r3, [r4, #0]
   34950:	6922      	ldr	r2, [r4, #16]
   34952:	b2f7      	uxtb	r7, r6
   34954:	1a98      	subs	r0, r3, r2
   34956:	6963      	ldr	r3, [r4, #20]
   34958:	b2f6      	uxtb	r6, r6
   3495a:	4298      	cmp	r0, r3
   3495c:	db05      	blt.n	3496a <__swbuf_r+0x4a>
   3495e:	0021      	movs	r1, r4
   34960:	0028      	movs	r0, r5
   34962:	f000 f933 	bl	34bcc <_fflush_r>
   34966:	2800      	cmp	r0, #0
   34968:	d126      	bne.n	349b8 <__swbuf_r+0x98>
   3496a:	68a3      	ldr	r3, [r4, #8]
   3496c:	3001      	adds	r0, #1
   3496e:	3b01      	subs	r3, #1
   34970:	60a3      	str	r3, [r4, #8]
   34972:	6823      	ldr	r3, [r4, #0]
   34974:	1c5a      	adds	r2, r3, #1
   34976:	6022      	str	r2, [r4, #0]
   34978:	701f      	strb	r7, [r3, #0]
   3497a:	6963      	ldr	r3, [r4, #20]
   3497c:	4298      	cmp	r0, r3
   3497e:	d004      	beq.n	3498a <__swbuf_r+0x6a>
   34980:	89a3      	ldrh	r3, [r4, #12]
   34982:	07db      	lsls	r3, r3, #31
   34984:	d51a      	bpl.n	349bc <__swbuf_r+0x9c>
   34986:	2e0a      	cmp	r6, #10
   34988:	d118      	bne.n	349bc <__swbuf_r+0x9c>
   3498a:	0021      	movs	r1, r4
   3498c:	0028      	movs	r0, r5
   3498e:	f000 f91d 	bl	34bcc <_fflush_r>
   34992:	2800      	cmp	r0, #0
   34994:	d012      	beq.n	349bc <__swbuf_r+0x9c>
   34996:	e00f      	b.n	349b8 <__swbuf_r+0x98>
   34998:	4b0a      	ldr	r3, [pc, #40]	; (349c4 <__swbuf_r+0xa4>)
   3499a:	429c      	cmp	r4, r3
   3499c:	d101      	bne.n	349a2 <__swbuf_r+0x82>
   3499e:	68ac      	ldr	r4, [r5, #8]
   349a0:	e7cd      	b.n	3493e <__swbuf_r+0x1e>
   349a2:	4b09      	ldr	r3, [pc, #36]	; (349c8 <__swbuf_r+0xa8>)
   349a4:	429c      	cmp	r4, r3
   349a6:	d1ca      	bne.n	3493e <__swbuf_r+0x1e>
   349a8:	68ec      	ldr	r4, [r5, #12]
   349aa:	e7c8      	b.n	3493e <__swbuf_r+0x1e>
   349ac:	0021      	movs	r1, r4
   349ae:	0028      	movs	r0, r5
   349b0:	f000 f80c 	bl	349cc <__swsetup_r>
   349b4:	2800      	cmp	r0, #0
   349b6:	d0ca      	beq.n	3494e <__swbuf_r+0x2e>
   349b8:	2601      	movs	r6, #1
   349ba:	4276      	negs	r6, r6
   349bc:	0030      	movs	r0, r6
   349be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   349c0:	00039a0c 	.word	0x00039a0c
   349c4:	00039a2c 	.word	0x00039a2c
   349c8:	000399ec 	.word	0x000399ec

000349cc <__swsetup_r>:
   349cc:	4b36      	ldr	r3, [pc, #216]	; (34aa8 <__swsetup_r+0xdc>)
   349ce:	b570      	push	{r4, r5, r6, lr}
   349d0:	681d      	ldr	r5, [r3, #0]
   349d2:	0006      	movs	r6, r0
   349d4:	000c      	movs	r4, r1
   349d6:	2d00      	cmp	r5, #0
   349d8:	d005      	beq.n	349e6 <__swsetup_r+0x1a>
   349da:	69ab      	ldr	r3, [r5, #24]
   349dc:	2b00      	cmp	r3, #0
   349de:	d102      	bne.n	349e6 <__swsetup_r+0x1a>
   349e0:	0028      	movs	r0, r5
   349e2:	f000 f961 	bl	34ca8 <__sinit>
   349e6:	4b31      	ldr	r3, [pc, #196]	; (34aac <__swsetup_r+0xe0>)
   349e8:	429c      	cmp	r4, r3
   349ea:	d10f      	bne.n	34a0c <__swsetup_r+0x40>
   349ec:	686c      	ldr	r4, [r5, #4]
   349ee:	230c      	movs	r3, #12
   349f0:	5ee2      	ldrsh	r2, [r4, r3]
   349f2:	b293      	uxth	r3, r2
   349f4:	0719      	lsls	r1, r3, #28
   349f6:	d42d      	bmi.n	34a54 <__swsetup_r+0x88>
   349f8:	06d9      	lsls	r1, r3, #27
   349fa:	d411      	bmi.n	34a20 <__swsetup_r+0x54>
   349fc:	2309      	movs	r3, #9
   349fe:	2001      	movs	r0, #1
   34a00:	6033      	str	r3, [r6, #0]
   34a02:	3337      	adds	r3, #55	; 0x37
   34a04:	4313      	orrs	r3, r2
   34a06:	81a3      	strh	r3, [r4, #12]
   34a08:	4240      	negs	r0, r0
   34a0a:	bd70      	pop	{r4, r5, r6, pc}
   34a0c:	4b28      	ldr	r3, [pc, #160]	; (34ab0 <__swsetup_r+0xe4>)
   34a0e:	429c      	cmp	r4, r3
   34a10:	d101      	bne.n	34a16 <__swsetup_r+0x4a>
   34a12:	68ac      	ldr	r4, [r5, #8]
   34a14:	e7eb      	b.n	349ee <__swsetup_r+0x22>
   34a16:	4b27      	ldr	r3, [pc, #156]	; (34ab4 <__swsetup_r+0xe8>)
   34a18:	429c      	cmp	r4, r3
   34a1a:	d1e8      	bne.n	349ee <__swsetup_r+0x22>
   34a1c:	68ec      	ldr	r4, [r5, #12]
   34a1e:	e7e6      	b.n	349ee <__swsetup_r+0x22>
   34a20:	075b      	lsls	r3, r3, #29
   34a22:	d513      	bpl.n	34a4c <__swsetup_r+0x80>
   34a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34a26:	2900      	cmp	r1, #0
   34a28:	d008      	beq.n	34a3c <__swsetup_r+0x70>
   34a2a:	0023      	movs	r3, r4
   34a2c:	3344      	adds	r3, #68	; 0x44
   34a2e:	4299      	cmp	r1, r3
   34a30:	d002      	beq.n	34a38 <__swsetup_r+0x6c>
   34a32:	0030      	movs	r0, r6
   34a34:	f7ff fc78 	bl	34328 <_free_r>
   34a38:	2300      	movs	r3, #0
   34a3a:	6363      	str	r3, [r4, #52]	; 0x34
   34a3c:	2224      	movs	r2, #36	; 0x24
   34a3e:	89a3      	ldrh	r3, [r4, #12]
   34a40:	4393      	bics	r3, r2
   34a42:	81a3      	strh	r3, [r4, #12]
   34a44:	2300      	movs	r3, #0
   34a46:	6063      	str	r3, [r4, #4]
   34a48:	6923      	ldr	r3, [r4, #16]
   34a4a:	6023      	str	r3, [r4, #0]
   34a4c:	2308      	movs	r3, #8
   34a4e:	89a2      	ldrh	r2, [r4, #12]
   34a50:	4313      	orrs	r3, r2
   34a52:	81a3      	strh	r3, [r4, #12]
   34a54:	6923      	ldr	r3, [r4, #16]
   34a56:	2b00      	cmp	r3, #0
   34a58:	d10b      	bne.n	34a72 <__swsetup_r+0xa6>
   34a5a:	21a0      	movs	r1, #160	; 0xa0
   34a5c:	2280      	movs	r2, #128	; 0x80
   34a5e:	89a3      	ldrh	r3, [r4, #12]
   34a60:	0089      	lsls	r1, r1, #2
   34a62:	0092      	lsls	r2, r2, #2
   34a64:	400b      	ands	r3, r1
   34a66:	4293      	cmp	r3, r2
   34a68:	d003      	beq.n	34a72 <__swsetup_r+0xa6>
   34a6a:	0021      	movs	r1, r4
   34a6c:	0030      	movs	r0, r6
   34a6e:	f000 f9e9 	bl	34e44 <__smakebuf_r>
   34a72:	2301      	movs	r3, #1
   34a74:	89a2      	ldrh	r2, [r4, #12]
   34a76:	4013      	ands	r3, r2
   34a78:	d011      	beq.n	34a9e <__swsetup_r+0xd2>
   34a7a:	2300      	movs	r3, #0
   34a7c:	60a3      	str	r3, [r4, #8]
   34a7e:	6963      	ldr	r3, [r4, #20]
   34a80:	425b      	negs	r3, r3
   34a82:	61a3      	str	r3, [r4, #24]
   34a84:	2000      	movs	r0, #0
   34a86:	6923      	ldr	r3, [r4, #16]
   34a88:	4283      	cmp	r3, r0
   34a8a:	d1be      	bne.n	34a0a <__swsetup_r+0x3e>
   34a8c:	230c      	movs	r3, #12
   34a8e:	5ee2      	ldrsh	r2, [r4, r3]
   34a90:	0613      	lsls	r3, r2, #24
   34a92:	d5ba      	bpl.n	34a0a <__swsetup_r+0x3e>
   34a94:	2340      	movs	r3, #64	; 0x40
   34a96:	4313      	orrs	r3, r2
   34a98:	81a3      	strh	r3, [r4, #12]
   34a9a:	3801      	subs	r0, #1
   34a9c:	e7b5      	b.n	34a0a <__swsetup_r+0x3e>
   34a9e:	0792      	lsls	r2, r2, #30
   34aa0:	d400      	bmi.n	34aa4 <__swsetup_r+0xd8>
   34aa2:	6963      	ldr	r3, [r4, #20]
   34aa4:	60a3      	str	r3, [r4, #8]
   34aa6:	e7ed      	b.n	34a84 <__swsetup_r+0xb8>
   34aa8:	20000128 	.word	0x20000128
   34aac:	00039a0c 	.word	0x00039a0c
   34ab0:	00039a2c 	.word	0x00039a2c
   34ab4:	000399ec 	.word	0x000399ec

00034ab8 <__sflush_r>:
   34ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34aba:	898a      	ldrh	r2, [r1, #12]
   34abc:	0005      	movs	r5, r0
   34abe:	000c      	movs	r4, r1
   34ac0:	0713      	lsls	r3, r2, #28
   34ac2:	d460      	bmi.n	34b86 <__sflush_r+0xce>
   34ac4:	684b      	ldr	r3, [r1, #4]
   34ac6:	2b00      	cmp	r3, #0
   34ac8:	dc04      	bgt.n	34ad4 <__sflush_r+0x1c>
   34aca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34acc:	2b00      	cmp	r3, #0
   34ace:	dc01      	bgt.n	34ad4 <__sflush_r+0x1c>
   34ad0:	2000      	movs	r0, #0
   34ad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34ad4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34ad6:	2f00      	cmp	r7, #0
   34ad8:	d0fa      	beq.n	34ad0 <__sflush_r+0x18>
   34ada:	2300      	movs	r3, #0
   34adc:	682e      	ldr	r6, [r5, #0]
   34ade:	602b      	str	r3, [r5, #0]
   34ae0:	2380      	movs	r3, #128	; 0x80
   34ae2:	015b      	lsls	r3, r3, #5
   34ae4:	401a      	ands	r2, r3
   34ae6:	d034      	beq.n	34b52 <__sflush_r+0x9a>
   34ae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34aea:	89a3      	ldrh	r3, [r4, #12]
   34aec:	075b      	lsls	r3, r3, #29
   34aee:	d506      	bpl.n	34afe <__sflush_r+0x46>
   34af0:	6863      	ldr	r3, [r4, #4]
   34af2:	1ac0      	subs	r0, r0, r3
   34af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34af6:	2b00      	cmp	r3, #0
   34af8:	d001      	beq.n	34afe <__sflush_r+0x46>
   34afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34afc:	1ac0      	subs	r0, r0, r3
   34afe:	0002      	movs	r2, r0
   34b00:	6a21      	ldr	r1, [r4, #32]
   34b02:	2300      	movs	r3, #0
   34b04:	0028      	movs	r0, r5
   34b06:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34b08:	47b8      	blx	r7
   34b0a:	89a1      	ldrh	r1, [r4, #12]
   34b0c:	1c43      	adds	r3, r0, #1
   34b0e:	d106      	bne.n	34b1e <__sflush_r+0x66>
   34b10:	682b      	ldr	r3, [r5, #0]
   34b12:	2b1d      	cmp	r3, #29
   34b14:	d831      	bhi.n	34b7a <__sflush_r+0xc2>
   34b16:	4a2c      	ldr	r2, [pc, #176]	; (34bc8 <__sflush_r+0x110>)
   34b18:	40da      	lsrs	r2, r3
   34b1a:	07d3      	lsls	r3, r2, #31
   34b1c:	d52d      	bpl.n	34b7a <__sflush_r+0xc2>
   34b1e:	2300      	movs	r3, #0
   34b20:	6063      	str	r3, [r4, #4]
   34b22:	6923      	ldr	r3, [r4, #16]
   34b24:	6023      	str	r3, [r4, #0]
   34b26:	04cb      	lsls	r3, r1, #19
   34b28:	d505      	bpl.n	34b36 <__sflush_r+0x7e>
   34b2a:	1c43      	adds	r3, r0, #1
   34b2c:	d102      	bne.n	34b34 <__sflush_r+0x7c>
   34b2e:	682b      	ldr	r3, [r5, #0]
   34b30:	2b00      	cmp	r3, #0
   34b32:	d100      	bne.n	34b36 <__sflush_r+0x7e>
   34b34:	6560      	str	r0, [r4, #84]	; 0x54
   34b36:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34b38:	602e      	str	r6, [r5, #0]
   34b3a:	2900      	cmp	r1, #0
   34b3c:	d0c8      	beq.n	34ad0 <__sflush_r+0x18>
   34b3e:	0023      	movs	r3, r4
   34b40:	3344      	adds	r3, #68	; 0x44
   34b42:	4299      	cmp	r1, r3
   34b44:	d002      	beq.n	34b4c <__sflush_r+0x94>
   34b46:	0028      	movs	r0, r5
   34b48:	f7ff fbee 	bl	34328 <_free_r>
   34b4c:	2000      	movs	r0, #0
   34b4e:	6360      	str	r0, [r4, #52]	; 0x34
   34b50:	e7bf      	b.n	34ad2 <__sflush_r+0x1a>
   34b52:	2301      	movs	r3, #1
   34b54:	6a21      	ldr	r1, [r4, #32]
   34b56:	0028      	movs	r0, r5
   34b58:	47b8      	blx	r7
   34b5a:	1c43      	adds	r3, r0, #1
   34b5c:	d1c5      	bne.n	34aea <__sflush_r+0x32>
   34b5e:	682b      	ldr	r3, [r5, #0]
   34b60:	2b00      	cmp	r3, #0
   34b62:	d0c2      	beq.n	34aea <__sflush_r+0x32>
   34b64:	2b1d      	cmp	r3, #29
   34b66:	d001      	beq.n	34b6c <__sflush_r+0xb4>
   34b68:	2b16      	cmp	r3, #22
   34b6a:	d101      	bne.n	34b70 <__sflush_r+0xb8>
   34b6c:	602e      	str	r6, [r5, #0]
   34b6e:	e7af      	b.n	34ad0 <__sflush_r+0x18>
   34b70:	2340      	movs	r3, #64	; 0x40
   34b72:	89a2      	ldrh	r2, [r4, #12]
   34b74:	4313      	orrs	r3, r2
   34b76:	81a3      	strh	r3, [r4, #12]
   34b78:	e7ab      	b.n	34ad2 <__sflush_r+0x1a>
   34b7a:	2340      	movs	r3, #64	; 0x40
   34b7c:	430b      	orrs	r3, r1
   34b7e:	2001      	movs	r0, #1
   34b80:	81a3      	strh	r3, [r4, #12]
   34b82:	4240      	negs	r0, r0
   34b84:	e7a5      	b.n	34ad2 <__sflush_r+0x1a>
   34b86:	690f      	ldr	r7, [r1, #16]
   34b88:	2f00      	cmp	r7, #0
   34b8a:	d0a1      	beq.n	34ad0 <__sflush_r+0x18>
   34b8c:	680b      	ldr	r3, [r1, #0]
   34b8e:	600f      	str	r7, [r1, #0]
   34b90:	1bdb      	subs	r3, r3, r7
   34b92:	9301      	str	r3, [sp, #4]
   34b94:	2300      	movs	r3, #0
   34b96:	0792      	lsls	r2, r2, #30
   34b98:	d100      	bne.n	34b9c <__sflush_r+0xe4>
   34b9a:	694b      	ldr	r3, [r1, #20]
   34b9c:	60a3      	str	r3, [r4, #8]
   34b9e:	9b01      	ldr	r3, [sp, #4]
   34ba0:	2b00      	cmp	r3, #0
   34ba2:	dc00      	bgt.n	34ba6 <__sflush_r+0xee>
   34ba4:	e794      	b.n	34ad0 <__sflush_r+0x18>
   34ba6:	9b01      	ldr	r3, [sp, #4]
   34ba8:	003a      	movs	r2, r7
   34baa:	6a21      	ldr	r1, [r4, #32]
   34bac:	0028      	movs	r0, r5
   34bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34bb0:	47b0      	blx	r6
   34bb2:	2800      	cmp	r0, #0
   34bb4:	dc03      	bgt.n	34bbe <__sflush_r+0x106>
   34bb6:	2340      	movs	r3, #64	; 0x40
   34bb8:	89a2      	ldrh	r2, [r4, #12]
   34bba:	4313      	orrs	r3, r2
   34bbc:	e7df      	b.n	34b7e <__sflush_r+0xc6>
   34bbe:	9b01      	ldr	r3, [sp, #4]
   34bc0:	183f      	adds	r7, r7, r0
   34bc2:	1a1b      	subs	r3, r3, r0
   34bc4:	9301      	str	r3, [sp, #4]
   34bc6:	e7ea      	b.n	34b9e <__sflush_r+0xe6>
   34bc8:	20400001 	.word	0x20400001

00034bcc <_fflush_r>:
   34bcc:	690b      	ldr	r3, [r1, #16]
   34bce:	b570      	push	{r4, r5, r6, lr}
   34bd0:	0005      	movs	r5, r0
   34bd2:	000c      	movs	r4, r1
   34bd4:	2b00      	cmp	r3, #0
   34bd6:	d101      	bne.n	34bdc <_fflush_r+0x10>
   34bd8:	2000      	movs	r0, #0
   34bda:	bd70      	pop	{r4, r5, r6, pc}
   34bdc:	2800      	cmp	r0, #0
   34bde:	d004      	beq.n	34bea <_fflush_r+0x1e>
   34be0:	6983      	ldr	r3, [r0, #24]
   34be2:	2b00      	cmp	r3, #0
   34be4:	d101      	bne.n	34bea <_fflush_r+0x1e>
   34be6:	f000 f85f 	bl	34ca8 <__sinit>
   34bea:	4b0b      	ldr	r3, [pc, #44]	; (34c18 <_fflush_r+0x4c>)
   34bec:	429c      	cmp	r4, r3
   34bee:	d109      	bne.n	34c04 <_fflush_r+0x38>
   34bf0:	686c      	ldr	r4, [r5, #4]
   34bf2:	220c      	movs	r2, #12
   34bf4:	5ea3      	ldrsh	r3, [r4, r2]
   34bf6:	2b00      	cmp	r3, #0
   34bf8:	d0ee      	beq.n	34bd8 <_fflush_r+0xc>
   34bfa:	0021      	movs	r1, r4
   34bfc:	0028      	movs	r0, r5
   34bfe:	f7ff ff5b 	bl	34ab8 <__sflush_r>
   34c02:	e7ea      	b.n	34bda <_fflush_r+0xe>
   34c04:	4b05      	ldr	r3, [pc, #20]	; (34c1c <_fflush_r+0x50>)
   34c06:	429c      	cmp	r4, r3
   34c08:	d101      	bne.n	34c0e <_fflush_r+0x42>
   34c0a:	68ac      	ldr	r4, [r5, #8]
   34c0c:	e7f1      	b.n	34bf2 <_fflush_r+0x26>
   34c0e:	4b04      	ldr	r3, [pc, #16]	; (34c20 <_fflush_r+0x54>)
   34c10:	429c      	cmp	r4, r3
   34c12:	d1ee      	bne.n	34bf2 <_fflush_r+0x26>
   34c14:	68ec      	ldr	r4, [r5, #12]
   34c16:	e7ec      	b.n	34bf2 <_fflush_r+0x26>
   34c18:	00039a0c 	.word	0x00039a0c
   34c1c:	00039a2c 	.word	0x00039a2c
   34c20:	000399ec 	.word	0x000399ec

00034c24 <_cleanup_r>:
   34c24:	b510      	push	{r4, lr}
   34c26:	4902      	ldr	r1, [pc, #8]	; (34c30 <_cleanup_r+0xc>)
   34c28:	f000 f8b2 	bl	34d90 <_fwalk_reent>
   34c2c:	bd10      	pop	{r4, pc}
   34c2e:	46c0      	nop			; (mov r8, r8)
   34c30:	00034bcd 	.word	0x00034bcd

00034c34 <std.isra.0>:
   34c34:	2300      	movs	r3, #0
   34c36:	b510      	push	{r4, lr}
   34c38:	0004      	movs	r4, r0
   34c3a:	6003      	str	r3, [r0, #0]
   34c3c:	6043      	str	r3, [r0, #4]
   34c3e:	6083      	str	r3, [r0, #8]
   34c40:	8181      	strh	r1, [r0, #12]
   34c42:	6643      	str	r3, [r0, #100]	; 0x64
   34c44:	81c2      	strh	r2, [r0, #14]
   34c46:	6103      	str	r3, [r0, #16]
   34c48:	6143      	str	r3, [r0, #20]
   34c4a:	6183      	str	r3, [r0, #24]
   34c4c:	0019      	movs	r1, r3
   34c4e:	2208      	movs	r2, #8
   34c50:	305c      	adds	r0, #92	; 0x5c
   34c52:	f7ff fb60 	bl	34316 <memset>
   34c56:	4b05      	ldr	r3, [pc, #20]	; (34c6c <std.isra.0+0x38>)
   34c58:	6224      	str	r4, [r4, #32]
   34c5a:	6263      	str	r3, [r4, #36]	; 0x24
   34c5c:	4b04      	ldr	r3, [pc, #16]	; (34c70 <std.isra.0+0x3c>)
   34c5e:	62a3      	str	r3, [r4, #40]	; 0x28
   34c60:	4b04      	ldr	r3, [pc, #16]	; (34c74 <std.isra.0+0x40>)
   34c62:	62e3      	str	r3, [r4, #44]	; 0x2c
   34c64:	4b04      	ldr	r3, [pc, #16]	; (34c78 <std.isra.0+0x44>)
   34c66:	6323      	str	r3, [r4, #48]	; 0x30
   34c68:	bd10      	pop	{r4, pc}
   34c6a:	46c0      	nop			; (mov r8, r8)
   34c6c:	000354d1 	.word	0x000354d1
   34c70:	000354f9 	.word	0x000354f9
   34c74:	00035531 	.word	0x00035531
   34c78:	0003555d 	.word	0x0003555d

00034c7c <__sfmoreglue>:
   34c7c:	b570      	push	{r4, r5, r6, lr}
   34c7e:	2568      	movs	r5, #104	; 0x68
   34c80:	1e4a      	subs	r2, r1, #1
   34c82:	4355      	muls	r5, r2
   34c84:	000e      	movs	r6, r1
   34c86:	0029      	movs	r1, r5
   34c88:	3174      	adds	r1, #116	; 0x74
   34c8a:	f7ff fb97 	bl	343bc <_malloc_r>
   34c8e:	1e04      	subs	r4, r0, #0
   34c90:	d008      	beq.n	34ca4 <__sfmoreglue+0x28>
   34c92:	2100      	movs	r1, #0
   34c94:	002a      	movs	r2, r5
   34c96:	6001      	str	r1, [r0, #0]
   34c98:	6046      	str	r6, [r0, #4]
   34c9a:	300c      	adds	r0, #12
   34c9c:	60a0      	str	r0, [r4, #8]
   34c9e:	3268      	adds	r2, #104	; 0x68
   34ca0:	f7ff fb39 	bl	34316 <memset>
   34ca4:	0020      	movs	r0, r4
   34ca6:	bd70      	pop	{r4, r5, r6, pc}

00034ca8 <__sinit>:
   34ca8:	6983      	ldr	r3, [r0, #24]
   34caa:	b513      	push	{r0, r1, r4, lr}
   34cac:	0004      	movs	r4, r0
   34cae:	2b00      	cmp	r3, #0
   34cb0:	d128      	bne.n	34d04 <__sinit+0x5c>
   34cb2:	6483      	str	r3, [r0, #72]	; 0x48
   34cb4:	64c3      	str	r3, [r0, #76]	; 0x4c
   34cb6:	6503      	str	r3, [r0, #80]	; 0x50
   34cb8:	4b13      	ldr	r3, [pc, #76]	; (34d08 <__sinit+0x60>)
   34cba:	4a14      	ldr	r2, [pc, #80]	; (34d0c <__sinit+0x64>)
   34cbc:	681b      	ldr	r3, [r3, #0]
   34cbe:	6282      	str	r2, [r0, #40]	; 0x28
   34cc0:	9301      	str	r3, [sp, #4]
   34cc2:	4298      	cmp	r0, r3
   34cc4:	d101      	bne.n	34cca <__sinit+0x22>
   34cc6:	2301      	movs	r3, #1
   34cc8:	6183      	str	r3, [r0, #24]
   34cca:	0020      	movs	r0, r4
   34ccc:	f000 f820 	bl	34d10 <__sfp>
   34cd0:	6060      	str	r0, [r4, #4]
   34cd2:	0020      	movs	r0, r4
   34cd4:	f000 f81c 	bl	34d10 <__sfp>
   34cd8:	60a0      	str	r0, [r4, #8]
   34cda:	0020      	movs	r0, r4
   34cdc:	f000 f818 	bl	34d10 <__sfp>
   34ce0:	2200      	movs	r2, #0
   34ce2:	60e0      	str	r0, [r4, #12]
   34ce4:	2104      	movs	r1, #4
   34ce6:	6860      	ldr	r0, [r4, #4]
   34ce8:	f7ff ffa4 	bl	34c34 <std.isra.0>
   34cec:	2201      	movs	r2, #1
   34cee:	2109      	movs	r1, #9
   34cf0:	68a0      	ldr	r0, [r4, #8]
   34cf2:	f7ff ff9f 	bl	34c34 <std.isra.0>
   34cf6:	2202      	movs	r2, #2
   34cf8:	2112      	movs	r1, #18
   34cfa:	68e0      	ldr	r0, [r4, #12]
   34cfc:	f7ff ff9a 	bl	34c34 <std.isra.0>
   34d00:	2301      	movs	r3, #1
   34d02:	61a3      	str	r3, [r4, #24]
   34d04:	bd13      	pop	{r0, r1, r4, pc}
   34d06:	46c0      	nop			; (mov r8, r8)
   34d08:	000399e8 	.word	0x000399e8
   34d0c:	00034c25 	.word	0x00034c25

00034d10 <__sfp>:
   34d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34d12:	4b1e      	ldr	r3, [pc, #120]	; (34d8c <__sfp+0x7c>)
   34d14:	0007      	movs	r7, r0
   34d16:	681e      	ldr	r6, [r3, #0]
   34d18:	69b3      	ldr	r3, [r6, #24]
   34d1a:	2b00      	cmp	r3, #0
   34d1c:	d102      	bne.n	34d24 <__sfp+0x14>
   34d1e:	0030      	movs	r0, r6
   34d20:	f7ff ffc2 	bl	34ca8 <__sinit>
   34d24:	3648      	adds	r6, #72	; 0x48
   34d26:	68b4      	ldr	r4, [r6, #8]
   34d28:	6873      	ldr	r3, [r6, #4]
   34d2a:	3b01      	subs	r3, #1
   34d2c:	d504      	bpl.n	34d38 <__sfp+0x28>
   34d2e:	6833      	ldr	r3, [r6, #0]
   34d30:	2b00      	cmp	r3, #0
   34d32:	d007      	beq.n	34d44 <__sfp+0x34>
   34d34:	6836      	ldr	r6, [r6, #0]
   34d36:	e7f6      	b.n	34d26 <__sfp+0x16>
   34d38:	220c      	movs	r2, #12
   34d3a:	5ea5      	ldrsh	r5, [r4, r2]
   34d3c:	2d00      	cmp	r5, #0
   34d3e:	d00d      	beq.n	34d5c <__sfp+0x4c>
   34d40:	3468      	adds	r4, #104	; 0x68
   34d42:	e7f2      	b.n	34d2a <__sfp+0x1a>
   34d44:	2104      	movs	r1, #4
   34d46:	0038      	movs	r0, r7
   34d48:	f7ff ff98 	bl	34c7c <__sfmoreglue>
   34d4c:	6030      	str	r0, [r6, #0]
   34d4e:	2800      	cmp	r0, #0
   34d50:	d1f0      	bne.n	34d34 <__sfp+0x24>
   34d52:	230c      	movs	r3, #12
   34d54:	0004      	movs	r4, r0
   34d56:	603b      	str	r3, [r7, #0]
   34d58:	0020      	movs	r0, r4
   34d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34d5c:	2301      	movs	r3, #1
   34d5e:	0020      	movs	r0, r4
   34d60:	425b      	negs	r3, r3
   34d62:	81e3      	strh	r3, [r4, #14]
   34d64:	3302      	adds	r3, #2
   34d66:	81a3      	strh	r3, [r4, #12]
   34d68:	6665      	str	r5, [r4, #100]	; 0x64
   34d6a:	6025      	str	r5, [r4, #0]
   34d6c:	60a5      	str	r5, [r4, #8]
   34d6e:	6065      	str	r5, [r4, #4]
   34d70:	6125      	str	r5, [r4, #16]
   34d72:	6165      	str	r5, [r4, #20]
   34d74:	61a5      	str	r5, [r4, #24]
   34d76:	2208      	movs	r2, #8
   34d78:	0029      	movs	r1, r5
   34d7a:	305c      	adds	r0, #92	; 0x5c
   34d7c:	f7ff facb 	bl	34316 <memset>
   34d80:	6365      	str	r5, [r4, #52]	; 0x34
   34d82:	63a5      	str	r5, [r4, #56]	; 0x38
   34d84:	64a5      	str	r5, [r4, #72]	; 0x48
   34d86:	64e5      	str	r5, [r4, #76]	; 0x4c
   34d88:	e7e6      	b.n	34d58 <__sfp+0x48>
   34d8a:	46c0      	nop			; (mov r8, r8)
   34d8c:	000399e8 	.word	0x000399e8

00034d90 <_fwalk_reent>:
   34d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34d92:	0004      	movs	r4, r0
   34d94:	0007      	movs	r7, r0
   34d96:	2600      	movs	r6, #0
   34d98:	9101      	str	r1, [sp, #4]
   34d9a:	3448      	adds	r4, #72	; 0x48
   34d9c:	2c00      	cmp	r4, #0
   34d9e:	d101      	bne.n	34da4 <_fwalk_reent+0x14>
   34da0:	0030      	movs	r0, r6
   34da2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34da4:	6863      	ldr	r3, [r4, #4]
   34da6:	68a5      	ldr	r5, [r4, #8]
   34da8:	9300      	str	r3, [sp, #0]
   34daa:	9b00      	ldr	r3, [sp, #0]
   34dac:	3b01      	subs	r3, #1
   34dae:	9300      	str	r3, [sp, #0]
   34db0:	d501      	bpl.n	34db6 <_fwalk_reent+0x26>
   34db2:	6824      	ldr	r4, [r4, #0]
   34db4:	e7f2      	b.n	34d9c <_fwalk_reent+0xc>
   34db6:	89ab      	ldrh	r3, [r5, #12]
   34db8:	2b01      	cmp	r3, #1
   34dba:	d908      	bls.n	34dce <_fwalk_reent+0x3e>
   34dbc:	220e      	movs	r2, #14
   34dbe:	5eab      	ldrsh	r3, [r5, r2]
   34dc0:	3301      	adds	r3, #1
   34dc2:	d004      	beq.n	34dce <_fwalk_reent+0x3e>
   34dc4:	0029      	movs	r1, r5
   34dc6:	0038      	movs	r0, r7
   34dc8:	9b01      	ldr	r3, [sp, #4]
   34dca:	4798      	blx	r3
   34dcc:	4306      	orrs	r6, r0
   34dce:	3568      	adds	r5, #104	; 0x68
   34dd0:	e7eb      	b.n	34daa <_fwalk_reent+0x1a>

00034dd2 <__locale_ctype_ptr_l>:
   34dd2:	30ec      	adds	r0, #236	; 0xec
   34dd4:	6800      	ldr	r0, [r0, #0]
   34dd6:	4770      	bx	lr

00034dd8 <__locale_ctype_ptr>:
   34dd8:	4b04      	ldr	r3, [pc, #16]	; (34dec <__locale_ctype_ptr+0x14>)
   34dda:	681b      	ldr	r3, [r3, #0]
   34ddc:	6a1b      	ldr	r3, [r3, #32]
   34dde:	2b00      	cmp	r3, #0
   34de0:	d100      	bne.n	34de4 <__locale_ctype_ptr+0xc>
   34de2:	4b03      	ldr	r3, [pc, #12]	; (34df0 <__locale_ctype_ptr+0x18>)
   34de4:	33ec      	adds	r3, #236	; 0xec
   34de6:	6818      	ldr	r0, [r3, #0]
   34de8:	4770      	bx	lr
   34dea:	46c0      	nop			; (mov r8, r8)
   34dec:	20000128 	.word	0x20000128
   34df0:	2000018c 	.word	0x2000018c

00034df4 <__swhatbuf_r>:
   34df4:	b570      	push	{r4, r5, r6, lr}
   34df6:	000e      	movs	r6, r1
   34df8:	001d      	movs	r5, r3
   34dfa:	230e      	movs	r3, #14
   34dfc:	5ec9      	ldrsh	r1, [r1, r3]
   34dfe:	b090      	sub	sp, #64	; 0x40
   34e00:	0014      	movs	r4, r2
   34e02:	2900      	cmp	r1, #0
   34e04:	da07      	bge.n	34e16 <__swhatbuf_r+0x22>
   34e06:	2300      	movs	r3, #0
   34e08:	602b      	str	r3, [r5, #0]
   34e0a:	89b3      	ldrh	r3, [r6, #12]
   34e0c:	061b      	lsls	r3, r3, #24
   34e0e:	d411      	bmi.n	34e34 <__swhatbuf_r+0x40>
   34e10:	2380      	movs	r3, #128	; 0x80
   34e12:	00db      	lsls	r3, r3, #3
   34e14:	e00f      	b.n	34e36 <__swhatbuf_r+0x42>
   34e16:	aa01      	add	r2, sp, #4
   34e18:	f000 fbe6 	bl	355e8 <_fstat_r>
   34e1c:	2800      	cmp	r0, #0
   34e1e:	dbf2      	blt.n	34e06 <__swhatbuf_r+0x12>
   34e20:	22f0      	movs	r2, #240	; 0xf0
   34e22:	9b02      	ldr	r3, [sp, #8]
   34e24:	0212      	lsls	r2, r2, #8
   34e26:	4013      	ands	r3, r2
   34e28:	4a05      	ldr	r2, [pc, #20]	; (34e40 <__swhatbuf_r+0x4c>)
   34e2a:	189b      	adds	r3, r3, r2
   34e2c:	425a      	negs	r2, r3
   34e2e:	4153      	adcs	r3, r2
   34e30:	602b      	str	r3, [r5, #0]
   34e32:	e7ed      	b.n	34e10 <__swhatbuf_r+0x1c>
   34e34:	2340      	movs	r3, #64	; 0x40
   34e36:	2000      	movs	r0, #0
   34e38:	6023      	str	r3, [r4, #0]
   34e3a:	b010      	add	sp, #64	; 0x40
   34e3c:	bd70      	pop	{r4, r5, r6, pc}
   34e3e:	46c0      	nop			; (mov r8, r8)
   34e40:	ffffe000 	.word	0xffffe000

00034e44 <__smakebuf_r>:
   34e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34e46:	2602      	movs	r6, #2
   34e48:	898b      	ldrh	r3, [r1, #12]
   34e4a:	0005      	movs	r5, r0
   34e4c:	000c      	movs	r4, r1
   34e4e:	4233      	tst	r3, r6
   34e50:	d006      	beq.n	34e60 <__smakebuf_r+0x1c>
   34e52:	0023      	movs	r3, r4
   34e54:	3347      	adds	r3, #71	; 0x47
   34e56:	6023      	str	r3, [r4, #0]
   34e58:	6123      	str	r3, [r4, #16]
   34e5a:	2301      	movs	r3, #1
   34e5c:	6163      	str	r3, [r4, #20]
   34e5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   34e60:	ab01      	add	r3, sp, #4
   34e62:	466a      	mov	r2, sp
   34e64:	f7ff ffc6 	bl	34df4 <__swhatbuf_r>
   34e68:	9900      	ldr	r1, [sp, #0]
   34e6a:	0007      	movs	r7, r0
   34e6c:	0028      	movs	r0, r5
   34e6e:	f7ff faa5 	bl	343bc <_malloc_r>
   34e72:	2800      	cmp	r0, #0
   34e74:	d108      	bne.n	34e88 <__smakebuf_r+0x44>
   34e76:	220c      	movs	r2, #12
   34e78:	5ea3      	ldrsh	r3, [r4, r2]
   34e7a:	059a      	lsls	r2, r3, #22
   34e7c:	d4ef      	bmi.n	34e5e <__smakebuf_r+0x1a>
   34e7e:	2203      	movs	r2, #3
   34e80:	4393      	bics	r3, r2
   34e82:	431e      	orrs	r6, r3
   34e84:	81a6      	strh	r6, [r4, #12]
   34e86:	e7e4      	b.n	34e52 <__smakebuf_r+0xe>
   34e88:	4b0f      	ldr	r3, [pc, #60]	; (34ec8 <__smakebuf_r+0x84>)
   34e8a:	62ab      	str	r3, [r5, #40]	; 0x28
   34e8c:	2380      	movs	r3, #128	; 0x80
   34e8e:	89a2      	ldrh	r2, [r4, #12]
   34e90:	6020      	str	r0, [r4, #0]
   34e92:	4313      	orrs	r3, r2
   34e94:	81a3      	strh	r3, [r4, #12]
   34e96:	9b00      	ldr	r3, [sp, #0]
   34e98:	6120      	str	r0, [r4, #16]
   34e9a:	6163      	str	r3, [r4, #20]
   34e9c:	9b01      	ldr	r3, [sp, #4]
   34e9e:	2b00      	cmp	r3, #0
   34ea0:	d00d      	beq.n	34ebe <__smakebuf_r+0x7a>
   34ea2:	230e      	movs	r3, #14
   34ea4:	5ee1      	ldrsh	r1, [r4, r3]
   34ea6:	0028      	movs	r0, r5
   34ea8:	f000 fbb0 	bl	3560c <_isatty_r>
   34eac:	2800      	cmp	r0, #0
   34eae:	d006      	beq.n	34ebe <__smakebuf_r+0x7a>
   34eb0:	2203      	movs	r2, #3
   34eb2:	89a3      	ldrh	r3, [r4, #12]
   34eb4:	4393      	bics	r3, r2
   34eb6:	001a      	movs	r2, r3
   34eb8:	2301      	movs	r3, #1
   34eba:	4313      	orrs	r3, r2
   34ebc:	81a3      	strh	r3, [r4, #12]
   34ebe:	89a0      	ldrh	r0, [r4, #12]
   34ec0:	4338      	orrs	r0, r7
   34ec2:	81a0      	strh	r0, [r4, #12]
   34ec4:	e7cb      	b.n	34e5e <__smakebuf_r+0x1a>
   34ec6:	46c0      	nop			; (mov r8, r8)
   34ec8:	00034c25 	.word	0x00034c25

00034ecc <__ascii_mbtowc>:
   34ecc:	b082      	sub	sp, #8
   34ece:	2900      	cmp	r1, #0
   34ed0:	d100      	bne.n	34ed4 <__ascii_mbtowc+0x8>
   34ed2:	a901      	add	r1, sp, #4
   34ed4:	1e10      	subs	r0, r2, #0
   34ed6:	d006      	beq.n	34ee6 <__ascii_mbtowc+0x1a>
   34ed8:	2b00      	cmp	r3, #0
   34eda:	d006      	beq.n	34eea <__ascii_mbtowc+0x1e>
   34edc:	7813      	ldrb	r3, [r2, #0]
   34ede:	600b      	str	r3, [r1, #0]
   34ee0:	7810      	ldrb	r0, [r2, #0]
   34ee2:	1e43      	subs	r3, r0, #1
   34ee4:	4198      	sbcs	r0, r3
   34ee6:	b002      	add	sp, #8
   34ee8:	4770      	bx	lr
   34eea:	2002      	movs	r0, #2
   34eec:	4240      	negs	r0, r0
   34eee:	e7fa      	b.n	34ee6 <__ascii_mbtowc+0x1a>

00034ef0 <__malloc_lock>:
   34ef0:	4770      	bx	lr

00034ef2 <__malloc_unlock>:
   34ef2:	4770      	bx	lr

00034ef4 <__ssputs_r>:
   34ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   34ef6:	688e      	ldr	r6, [r1, #8]
   34ef8:	b085      	sub	sp, #20
   34efa:	0007      	movs	r7, r0
   34efc:	000c      	movs	r4, r1
   34efe:	9203      	str	r2, [sp, #12]
   34f00:	9301      	str	r3, [sp, #4]
   34f02:	429e      	cmp	r6, r3
   34f04:	d839      	bhi.n	34f7a <__ssputs_r+0x86>
   34f06:	2390      	movs	r3, #144	; 0x90
   34f08:	898a      	ldrh	r2, [r1, #12]
   34f0a:	00db      	lsls	r3, r3, #3
   34f0c:	421a      	tst	r2, r3
   34f0e:	d034      	beq.n	34f7a <__ssputs_r+0x86>
   34f10:	2503      	movs	r5, #3
   34f12:	6909      	ldr	r1, [r1, #16]
   34f14:	6823      	ldr	r3, [r4, #0]
   34f16:	1a5b      	subs	r3, r3, r1
   34f18:	9302      	str	r3, [sp, #8]
   34f1a:	6963      	ldr	r3, [r4, #20]
   34f1c:	9802      	ldr	r0, [sp, #8]
   34f1e:	435d      	muls	r5, r3
   34f20:	0feb      	lsrs	r3, r5, #31
   34f22:	195d      	adds	r5, r3, r5
   34f24:	9b01      	ldr	r3, [sp, #4]
   34f26:	106d      	asrs	r5, r5, #1
   34f28:	3301      	adds	r3, #1
   34f2a:	181b      	adds	r3, r3, r0
   34f2c:	42ab      	cmp	r3, r5
   34f2e:	d900      	bls.n	34f32 <__ssputs_r+0x3e>
   34f30:	001d      	movs	r5, r3
   34f32:	0553      	lsls	r3, r2, #21
   34f34:	d532      	bpl.n	34f9c <__ssputs_r+0xa8>
   34f36:	0029      	movs	r1, r5
   34f38:	0038      	movs	r0, r7
   34f3a:	f7ff fa3f 	bl	343bc <_malloc_r>
   34f3e:	1e06      	subs	r6, r0, #0
   34f40:	d109      	bne.n	34f56 <__ssputs_r+0x62>
   34f42:	230c      	movs	r3, #12
   34f44:	603b      	str	r3, [r7, #0]
   34f46:	2340      	movs	r3, #64	; 0x40
   34f48:	2001      	movs	r0, #1
   34f4a:	89a2      	ldrh	r2, [r4, #12]
   34f4c:	4240      	negs	r0, r0
   34f4e:	4313      	orrs	r3, r2
   34f50:	81a3      	strh	r3, [r4, #12]
   34f52:	b005      	add	sp, #20
   34f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34f56:	9a02      	ldr	r2, [sp, #8]
   34f58:	6921      	ldr	r1, [r4, #16]
   34f5a:	f7ff f9c1 	bl	342e0 <memcpy>
   34f5e:	89a3      	ldrh	r3, [r4, #12]
   34f60:	4a14      	ldr	r2, [pc, #80]	; (34fb4 <__ssputs_r+0xc0>)
   34f62:	401a      	ands	r2, r3
   34f64:	2380      	movs	r3, #128	; 0x80
   34f66:	4313      	orrs	r3, r2
   34f68:	81a3      	strh	r3, [r4, #12]
   34f6a:	9b02      	ldr	r3, [sp, #8]
   34f6c:	6126      	str	r6, [r4, #16]
   34f6e:	18f6      	adds	r6, r6, r3
   34f70:	6026      	str	r6, [r4, #0]
   34f72:	6165      	str	r5, [r4, #20]
   34f74:	9e01      	ldr	r6, [sp, #4]
   34f76:	1aed      	subs	r5, r5, r3
   34f78:	60a5      	str	r5, [r4, #8]
   34f7a:	9b01      	ldr	r3, [sp, #4]
   34f7c:	42b3      	cmp	r3, r6
   34f7e:	d200      	bcs.n	34f82 <__ssputs_r+0x8e>
   34f80:	001e      	movs	r6, r3
   34f82:	0032      	movs	r2, r6
   34f84:	9903      	ldr	r1, [sp, #12]
   34f86:	6820      	ldr	r0, [r4, #0]
   34f88:	f7ff f9b3 	bl	342f2 <memmove>
   34f8c:	68a3      	ldr	r3, [r4, #8]
   34f8e:	2000      	movs	r0, #0
   34f90:	1b9b      	subs	r3, r3, r6
   34f92:	60a3      	str	r3, [r4, #8]
   34f94:	6823      	ldr	r3, [r4, #0]
   34f96:	199e      	adds	r6, r3, r6
   34f98:	6026      	str	r6, [r4, #0]
   34f9a:	e7da      	b.n	34f52 <__ssputs_r+0x5e>
   34f9c:	002a      	movs	r2, r5
   34f9e:	0038      	movs	r0, r7
   34fa0:	f000 fb65 	bl	3566e <_realloc_r>
   34fa4:	1e06      	subs	r6, r0, #0
   34fa6:	d1e0      	bne.n	34f6a <__ssputs_r+0x76>
   34fa8:	6921      	ldr	r1, [r4, #16]
   34faa:	0038      	movs	r0, r7
   34fac:	f7ff f9bc 	bl	34328 <_free_r>
   34fb0:	e7c7      	b.n	34f42 <__ssputs_r+0x4e>
   34fb2:	46c0      	nop			; (mov r8, r8)
   34fb4:	fffffb7f 	.word	0xfffffb7f

00034fb8 <_svfiprintf_r>:
   34fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   34fba:	b09f      	sub	sp, #124	; 0x7c
   34fbc:	9002      	str	r0, [sp, #8]
   34fbe:	9305      	str	r3, [sp, #20]
   34fc0:	898b      	ldrh	r3, [r1, #12]
   34fc2:	000f      	movs	r7, r1
   34fc4:	0016      	movs	r6, r2
   34fc6:	061b      	lsls	r3, r3, #24
   34fc8:	d511      	bpl.n	34fee <_svfiprintf_r+0x36>
   34fca:	690b      	ldr	r3, [r1, #16]
   34fcc:	2b00      	cmp	r3, #0
   34fce:	d10e      	bne.n	34fee <_svfiprintf_r+0x36>
   34fd0:	2140      	movs	r1, #64	; 0x40
   34fd2:	f7ff f9f3 	bl	343bc <_malloc_r>
   34fd6:	6038      	str	r0, [r7, #0]
   34fd8:	6138      	str	r0, [r7, #16]
   34fda:	2800      	cmp	r0, #0
   34fdc:	d105      	bne.n	34fea <_svfiprintf_r+0x32>
   34fde:	230c      	movs	r3, #12
   34fe0:	9a02      	ldr	r2, [sp, #8]
   34fe2:	3801      	subs	r0, #1
   34fe4:	6013      	str	r3, [r2, #0]
   34fe6:	b01f      	add	sp, #124	; 0x7c
   34fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34fea:	2340      	movs	r3, #64	; 0x40
   34fec:	617b      	str	r3, [r7, #20]
   34fee:	2300      	movs	r3, #0
   34ff0:	ad06      	add	r5, sp, #24
   34ff2:	616b      	str	r3, [r5, #20]
   34ff4:	3320      	adds	r3, #32
   34ff6:	766b      	strb	r3, [r5, #25]
   34ff8:	3310      	adds	r3, #16
   34ffa:	76ab      	strb	r3, [r5, #26]
   34ffc:	0034      	movs	r4, r6
   34ffe:	7823      	ldrb	r3, [r4, #0]
   35000:	2b00      	cmp	r3, #0
   35002:	d147      	bne.n	35094 <_svfiprintf_r+0xdc>
   35004:	1ba3      	subs	r3, r4, r6
   35006:	9304      	str	r3, [sp, #16]
   35008:	d00d      	beq.n	35026 <_svfiprintf_r+0x6e>
   3500a:	1ba3      	subs	r3, r4, r6
   3500c:	0032      	movs	r2, r6
   3500e:	0039      	movs	r1, r7
   35010:	9802      	ldr	r0, [sp, #8]
   35012:	f7ff ff6f 	bl	34ef4 <__ssputs_r>
   35016:	1c43      	adds	r3, r0, #1
   35018:	d100      	bne.n	3501c <_svfiprintf_r+0x64>
   3501a:	e0b5      	b.n	35188 <_svfiprintf_r+0x1d0>
   3501c:	696a      	ldr	r2, [r5, #20]
   3501e:	9b04      	ldr	r3, [sp, #16]
   35020:	4694      	mov	ip, r2
   35022:	4463      	add	r3, ip
   35024:	616b      	str	r3, [r5, #20]
   35026:	7823      	ldrb	r3, [r4, #0]
   35028:	2b00      	cmp	r3, #0
   3502a:	d100      	bne.n	3502e <_svfiprintf_r+0x76>
   3502c:	e0ac      	b.n	35188 <_svfiprintf_r+0x1d0>
   3502e:	2201      	movs	r2, #1
   35030:	2300      	movs	r3, #0
   35032:	4252      	negs	r2, r2
   35034:	606a      	str	r2, [r5, #4]
   35036:	a902      	add	r1, sp, #8
   35038:	3254      	adds	r2, #84	; 0x54
   3503a:	1852      	adds	r2, r2, r1
   3503c:	3401      	adds	r4, #1
   3503e:	602b      	str	r3, [r5, #0]
   35040:	60eb      	str	r3, [r5, #12]
   35042:	60ab      	str	r3, [r5, #8]
   35044:	7013      	strb	r3, [r2, #0]
   35046:	65ab      	str	r3, [r5, #88]	; 0x58
   35048:	4e58      	ldr	r6, [pc, #352]	; (351ac <_svfiprintf_r+0x1f4>)
   3504a:	2205      	movs	r2, #5
   3504c:	7821      	ldrb	r1, [r4, #0]
   3504e:	0030      	movs	r0, r6
   35050:	f000 fb02 	bl	35658 <memchr>
   35054:	1c62      	adds	r2, r4, #1
   35056:	2800      	cmp	r0, #0
   35058:	d120      	bne.n	3509c <_svfiprintf_r+0xe4>
   3505a:	6829      	ldr	r1, [r5, #0]
   3505c:	06cb      	lsls	r3, r1, #27
   3505e:	d504      	bpl.n	3506a <_svfiprintf_r+0xb2>
   35060:	2353      	movs	r3, #83	; 0x53
   35062:	ae02      	add	r6, sp, #8
   35064:	3020      	adds	r0, #32
   35066:	199b      	adds	r3, r3, r6
   35068:	7018      	strb	r0, [r3, #0]
   3506a:	070b      	lsls	r3, r1, #28
   3506c:	d504      	bpl.n	35078 <_svfiprintf_r+0xc0>
   3506e:	2353      	movs	r3, #83	; 0x53
   35070:	202b      	movs	r0, #43	; 0x2b
   35072:	ae02      	add	r6, sp, #8
   35074:	199b      	adds	r3, r3, r6
   35076:	7018      	strb	r0, [r3, #0]
   35078:	7823      	ldrb	r3, [r4, #0]
   3507a:	2b2a      	cmp	r3, #42	; 0x2a
   3507c:	d016      	beq.n	350ac <_svfiprintf_r+0xf4>
   3507e:	2000      	movs	r0, #0
   35080:	210a      	movs	r1, #10
   35082:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35084:	7822      	ldrb	r2, [r4, #0]
   35086:	3a30      	subs	r2, #48	; 0x30
   35088:	2a09      	cmp	r2, #9
   3508a:	d955      	bls.n	35138 <_svfiprintf_r+0x180>
   3508c:	2800      	cmp	r0, #0
   3508e:	d015      	beq.n	350bc <_svfiprintf_r+0x104>
   35090:	9309      	str	r3, [sp, #36]	; 0x24
   35092:	e013      	b.n	350bc <_svfiprintf_r+0x104>
   35094:	2b25      	cmp	r3, #37	; 0x25
   35096:	d0b5      	beq.n	35004 <_svfiprintf_r+0x4c>
   35098:	3401      	adds	r4, #1
   3509a:	e7b0      	b.n	34ffe <_svfiprintf_r+0x46>
   3509c:	2301      	movs	r3, #1
   3509e:	1b80      	subs	r0, r0, r6
   350a0:	4083      	lsls	r3, r0
   350a2:	6829      	ldr	r1, [r5, #0]
   350a4:	0014      	movs	r4, r2
   350a6:	430b      	orrs	r3, r1
   350a8:	602b      	str	r3, [r5, #0]
   350aa:	e7cd      	b.n	35048 <_svfiprintf_r+0x90>
   350ac:	9b05      	ldr	r3, [sp, #20]
   350ae:	1d18      	adds	r0, r3, #4
   350b0:	681b      	ldr	r3, [r3, #0]
   350b2:	9005      	str	r0, [sp, #20]
   350b4:	2b00      	cmp	r3, #0
   350b6:	db39      	blt.n	3512c <_svfiprintf_r+0x174>
   350b8:	9309      	str	r3, [sp, #36]	; 0x24
   350ba:	0014      	movs	r4, r2
   350bc:	7823      	ldrb	r3, [r4, #0]
   350be:	2b2e      	cmp	r3, #46	; 0x2e
   350c0:	d10b      	bne.n	350da <_svfiprintf_r+0x122>
   350c2:	7863      	ldrb	r3, [r4, #1]
   350c4:	1c62      	adds	r2, r4, #1
   350c6:	2b2a      	cmp	r3, #42	; 0x2a
   350c8:	d13e      	bne.n	35148 <_svfiprintf_r+0x190>
   350ca:	9b05      	ldr	r3, [sp, #20]
   350cc:	3402      	adds	r4, #2
   350ce:	1d1a      	adds	r2, r3, #4
   350d0:	681b      	ldr	r3, [r3, #0]
   350d2:	9205      	str	r2, [sp, #20]
   350d4:	2b00      	cmp	r3, #0
   350d6:	db34      	blt.n	35142 <_svfiprintf_r+0x18a>
   350d8:	9307      	str	r3, [sp, #28]
   350da:	4e35      	ldr	r6, [pc, #212]	; (351b0 <_svfiprintf_r+0x1f8>)
   350dc:	7821      	ldrb	r1, [r4, #0]
   350de:	2203      	movs	r2, #3
   350e0:	0030      	movs	r0, r6
   350e2:	f000 fab9 	bl	35658 <memchr>
   350e6:	2800      	cmp	r0, #0
   350e8:	d006      	beq.n	350f8 <_svfiprintf_r+0x140>
   350ea:	2340      	movs	r3, #64	; 0x40
   350ec:	1b80      	subs	r0, r0, r6
   350ee:	4083      	lsls	r3, r0
   350f0:	682a      	ldr	r2, [r5, #0]
   350f2:	3401      	adds	r4, #1
   350f4:	4313      	orrs	r3, r2
   350f6:	602b      	str	r3, [r5, #0]
   350f8:	7821      	ldrb	r1, [r4, #0]
   350fa:	2206      	movs	r2, #6
   350fc:	482d      	ldr	r0, [pc, #180]	; (351b4 <_svfiprintf_r+0x1fc>)
   350fe:	1c66      	adds	r6, r4, #1
   35100:	7629      	strb	r1, [r5, #24]
   35102:	f000 faa9 	bl	35658 <memchr>
   35106:	2800      	cmp	r0, #0
   35108:	d046      	beq.n	35198 <_svfiprintf_r+0x1e0>
   3510a:	4b2b      	ldr	r3, [pc, #172]	; (351b8 <_svfiprintf_r+0x200>)
   3510c:	2b00      	cmp	r3, #0
   3510e:	d12f      	bne.n	35170 <_svfiprintf_r+0x1b8>
   35110:	6829      	ldr	r1, [r5, #0]
   35112:	9b05      	ldr	r3, [sp, #20]
   35114:	2207      	movs	r2, #7
   35116:	05c9      	lsls	r1, r1, #23
   35118:	d528      	bpl.n	3516c <_svfiprintf_r+0x1b4>
   3511a:	189b      	adds	r3, r3, r2
   3511c:	4393      	bics	r3, r2
   3511e:	3308      	adds	r3, #8
   35120:	9305      	str	r3, [sp, #20]
   35122:	696b      	ldr	r3, [r5, #20]
   35124:	9a03      	ldr	r2, [sp, #12]
   35126:	189b      	adds	r3, r3, r2
   35128:	616b      	str	r3, [r5, #20]
   3512a:	e767      	b.n	34ffc <_svfiprintf_r+0x44>
   3512c:	425b      	negs	r3, r3
   3512e:	60eb      	str	r3, [r5, #12]
   35130:	2302      	movs	r3, #2
   35132:	430b      	orrs	r3, r1
   35134:	602b      	str	r3, [r5, #0]
   35136:	e7c0      	b.n	350ba <_svfiprintf_r+0x102>
   35138:	434b      	muls	r3, r1
   3513a:	3401      	adds	r4, #1
   3513c:	189b      	adds	r3, r3, r2
   3513e:	2001      	movs	r0, #1
   35140:	e7a0      	b.n	35084 <_svfiprintf_r+0xcc>
   35142:	2301      	movs	r3, #1
   35144:	425b      	negs	r3, r3
   35146:	e7c7      	b.n	350d8 <_svfiprintf_r+0x120>
   35148:	2300      	movs	r3, #0
   3514a:	0014      	movs	r4, r2
   3514c:	200a      	movs	r0, #10
   3514e:	001a      	movs	r2, r3
   35150:	606b      	str	r3, [r5, #4]
   35152:	7821      	ldrb	r1, [r4, #0]
   35154:	3930      	subs	r1, #48	; 0x30
   35156:	2909      	cmp	r1, #9
   35158:	d903      	bls.n	35162 <_svfiprintf_r+0x1aa>
   3515a:	2b00      	cmp	r3, #0
   3515c:	d0bd      	beq.n	350da <_svfiprintf_r+0x122>
   3515e:	9207      	str	r2, [sp, #28]
   35160:	e7bb      	b.n	350da <_svfiprintf_r+0x122>
   35162:	4342      	muls	r2, r0
   35164:	3401      	adds	r4, #1
   35166:	1852      	adds	r2, r2, r1
   35168:	2301      	movs	r3, #1
   3516a:	e7f2      	b.n	35152 <_svfiprintf_r+0x19a>
   3516c:	3307      	adds	r3, #7
   3516e:	e7d5      	b.n	3511c <_svfiprintf_r+0x164>
   35170:	ab05      	add	r3, sp, #20
   35172:	9300      	str	r3, [sp, #0]
   35174:	003a      	movs	r2, r7
   35176:	4b11      	ldr	r3, [pc, #68]	; (351bc <_svfiprintf_r+0x204>)
   35178:	0029      	movs	r1, r5
   3517a:	9802      	ldr	r0, [sp, #8]
   3517c:	e000      	b.n	35180 <_svfiprintf_r+0x1c8>
   3517e:	bf00      	nop
   35180:	9003      	str	r0, [sp, #12]
   35182:	9b03      	ldr	r3, [sp, #12]
   35184:	3301      	adds	r3, #1
   35186:	d1cc      	bne.n	35122 <_svfiprintf_r+0x16a>
   35188:	89bb      	ldrh	r3, [r7, #12]
   3518a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   3518c:	065b      	lsls	r3, r3, #25
   3518e:	d400      	bmi.n	35192 <_svfiprintf_r+0x1da>
   35190:	e729      	b.n	34fe6 <_svfiprintf_r+0x2e>
   35192:	2001      	movs	r0, #1
   35194:	4240      	negs	r0, r0
   35196:	e726      	b.n	34fe6 <_svfiprintf_r+0x2e>
   35198:	ab05      	add	r3, sp, #20
   3519a:	9300      	str	r3, [sp, #0]
   3519c:	003a      	movs	r2, r7
   3519e:	4b07      	ldr	r3, [pc, #28]	; (351bc <_svfiprintf_r+0x204>)
   351a0:	0029      	movs	r1, r5
   351a2:	9802      	ldr	r0, [sp, #8]
   351a4:	f000 f87a 	bl	3529c <_printf_i>
   351a8:	e7ea      	b.n	35180 <_svfiprintf_r+0x1c8>
   351aa:	46c0      	nop			; (mov r8, r8)
   351ac:	00039a56 	.word	0x00039a56
   351b0:	00039a5c 	.word	0x00039a5c
   351b4:	00039a60 	.word	0x00039a60
   351b8:	00000000 	.word	0x00000000
   351bc:	00034ef5 	.word	0x00034ef5

000351c0 <_printf_common>:
   351c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   351c2:	0015      	movs	r5, r2
   351c4:	9301      	str	r3, [sp, #4]
   351c6:	688a      	ldr	r2, [r1, #8]
   351c8:	690b      	ldr	r3, [r1, #16]
   351ca:	9000      	str	r0, [sp, #0]
   351cc:	000c      	movs	r4, r1
   351ce:	4293      	cmp	r3, r2
   351d0:	da00      	bge.n	351d4 <_printf_common+0x14>
   351d2:	0013      	movs	r3, r2
   351d4:	0022      	movs	r2, r4
   351d6:	602b      	str	r3, [r5, #0]
   351d8:	3243      	adds	r2, #67	; 0x43
   351da:	7812      	ldrb	r2, [r2, #0]
   351dc:	2a00      	cmp	r2, #0
   351de:	d001      	beq.n	351e4 <_printf_common+0x24>
   351e0:	3301      	adds	r3, #1
   351e2:	602b      	str	r3, [r5, #0]
   351e4:	6823      	ldr	r3, [r4, #0]
   351e6:	069b      	lsls	r3, r3, #26
   351e8:	d502      	bpl.n	351f0 <_printf_common+0x30>
   351ea:	682b      	ldr	r3, [r5, #0]
   351ec:	3302      	adds	r3, #2
   351ee:	602b      	str	r3, [r5, #0]
   351f0:	2706      	movs	r7, #6
   351f2:	6823      	ldr	r3, [r4, #0]
   351f4:	401f      	ands	r7, r3
   351f6:	d027      	beq.n	35248 <_printf_common+0x88>
   351f8:	0023      	movs	r3, r4
   351fa:	3343      	adds	r3, #67	; 0x43
   351fc:	781b      	ldrb	r3, [r3, #0]
   351fe:	1e5a      	subs	r2, r3, #1
   35200:	4193      	sbcs	r3, r2
   35202:	6822      	ldr	r2, [r4, #0]
   35204:	0692      	lsls	r2, r2, #26
   35206:	d430      	bmi.n	3526a <_printf_common+0xaa>
   35208:	0022      	movs	r2, r4
   3520a:	9901      	ldr	r1, [sp, #4]
   3520c:	3243      	adds	r2, #67	; 0x43
   3520e:	9800      	ldr	r0, [sp, #0]
   35210:	9e08      	ldr	r6, [sp, #32]
   35212:	47b0      	blx	r6
   35214:	1c43      	adds	r3, r0, #1
   35216:	d025      	beq.n	35264 <_printf_common+0xa4>
   35218:	2306      	movs	r3, #6
   3521a:	6820      	ldr	r0, [r4, #0]
   3521c:	682a      	ldr	r2, [r5, #0]
   3521e:	68e1      	ldr	r1, [r4, #12]
   35220:	4003      	ands	r3, r0
   35222:	2500      	movs	r5, #0
   35224:	2b04      	cmp	r3, #4
   35226:	d103      	bne.n	35230 <_printf_common+0x70>
   35228:	1a8d      	subs	r5, r1, r2
   3522a:	43eb      	mvns	r3, r5
   3522c:	17db      	asrs	r3, r3, #31
   3522e:	401d      	ands	r5, r3
   35230:	68a3      	ldr	r3, [r4, #8]
   35232:	6922      	ldr	r2, [r4, #16]
   35234:	4293      	cmp	r3, r2
   35236:	dd01      	ble.n	3523c <_printf_common+0x7c>
   35238:	1a9b      	subs	r3, r3, r2
   3523a:	18ed      	adds	r5, r5, r3
   3523c:	2700      	movs	r7, #0
   3523e:	42bd      	cmp	r5, r7
   35240:	d120      	bne.n	35284 <_printf_common+0xc4>
   35242:	2000      	movs	r0, #0
   35244:	e010      	b.n	35268 <_printf_common+0xa8>
   35246:	3701      	adds	r7, #1
   35248:	68e3      	ldr	r3, [r4, #12]
   3524a:	682a      	ldr	r2, [r5, #0]
   3524c:	1a9b      	subs	r3, r3, r2
   3524e:	429f      	cmp	r7, r3
   35250:	dad2      	bge.n	351f8 <_printf_common+0x38>
   35252:	0022      	movs	r2, r4
   35254:	2301      	movs	r3, #1
   35256:	3219      	adds	r2, #25
   35258:	9901      	ldr	r1, [sp, #4]
   3525a:	9800      	ldr	r0, [sp, #0]
   3525c:	9e08      	ldr	r6, [sp, #32]
   3525e:	47b0      	blx	r6
   35260:	1c43      	adds	r3, r0, #1
   35262:	d1f0      	bne.n	35246 <_printf_common+0x86>
   35264:	2001      	movs	r0, #1
   35266:	4240      	negs	r0, r0
   35268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3526a:	2030      	movs	r0, #48	; 0x30
   3526c:	18e1      	adds	r1, r4, r3
   3526e:	3143      	adds	r1, #67	; 0x43
   35270:	7008      	strb	r0, [r1, #0]
   35272:	0021      	movs	r1, r4
   35274:	1c5a      	adds	r2, r3, #1
   35276:	3145      	adds	r1, #69	; 0x45
   35278:	7809      	ldrb	r1, [r1, #0]
   3527a:	18a2      	adds	r2, r4, r2
   3527c:	3243      	adds	r2, #67	; 0x43
   3527e:	3302      	adds	r3, #2
   35280:	7011      	strb	r1, [r2, #0]
   35282:	e7c1      	b.n	35208 <_printf_common+0x48>
   35284:	0022      	movs	r2, r4
   35286:	2301      	movs	r3, #1
   35288:	321a      	adds	r2, #26
   3528a:	9901      	ldr	r1, [sp, #4]
   3528c:	9800      	ldr	r0, [sp, #0]
   3528e:	9e08      	ldr	r6, [sp, #32]
   35290:	47b0      	blx	r6
   35292:	1c43      	adds	r3, r0, #1
   35294:	d0e6      	beq.n	35264 <_printf_common+0xa4>
   35296:	3701      	adds	r7, #1
   35298:	e7d1      	b.n	3523e <_printf_common+0x7e>
	...

0003529c <_printf_i>:
   3529c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3529e:	b08b      	sub	sp, #44	; 0x2c
   352a0:	9206      	str	r2, [sp, #24]
   352a2:	000a      	movs	r2, r1
   352a4:	3243      	adds	r2, #67	; 0x43
   352a6:	9307      	str	r3, [sp, #28]
   352a8:	9005      	str	r0, [sp, #20]
   352aa:	9204      	str	r2, [sp, #16]
   352ac:	7e0a      	ldrb	r2, [r1, #24]
   352ae:	000c      	movs	r4, r1
   352b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   352b2:	2a6e      	cmp	r2, #110	; 0x6e
   352b4:	d100      	bne.n	352b8 <_printf_i+0x1c>
   352b6:	e08f      	b.n	353d8 <_printf_i+0x13c>
   352b8:	d817      	bhi.n	352ea <_printf_i+0x4e>
   352ba:	2a63      	cmp	r2, #99	; 0x63
   352bc:	d02c      	beq.n	35318 <_printf_i+0x7c>
   352be:	d808      	bhi.n	352d2 <_printf_i+0x36>
   352c0:	2a00      	cmp	r2, #0
   352c2:	d100      	bne.n	352c6 <_printf_i+0x2a>
   352c4:	e099      	b.n	353fa <_printf_i+0x15e>
   352c6:	2a58      	cmp	r2, #88	; 0x58
   352c8:	d054      	beq.n	35374 <_printf_i+0xd8>
   352ca:	0026      	movs	r6, r4
   352cc:	3642      	adds	r6, #66	; 0x42
   352ce:	7032      	strb	r2, [r6, #0]
   352d0:	e029      	b.n	35326 <_printf_i+0x8a>
   352d2:	2a64      	cmp	r2, #100	; 0x64
   352d4:	d001      	beq.n	352da <_printf_i+0x3e>
   352d6:	2a69      	cmp	r2, #105	; 0x69
   352d8:	d1f7      	bne.n	352ca <_printf_i+0x2e>
   352da:	6821      	ldr	r1, [r4, #0]
   352dc:	681a      	ldr	r2, [r3, #0]
   352de:	0608      	lsls	r0, r1, #24
   352e0:	d523      	bpl.n	3532a <_printf_i+0x8e>
   352e2:	1d11      	adds	r1, r2, #4
   352e4:	6019      	str	r1, [r3, #0]
   352e6:	6815      	ldr	r5, [r2, #0]
   352e8:	e025      	b.n	35336 <_printf_i+0x9a>
   352ea:	2a73      	cmp	r2, #115	; 0x73
   352ec:	d100      	bne.n	352f0 <_printf_i+0x54>
   352ee:	e088      	b.n	35402 <_printf_i+0x166>
   352f0:	d808      	bhi.n	35304 <_printf_i+0x68>
   352f2:	2a6f      	cmp	r2, #111	; 0x6f
   352f4:	d029      	beq.n	3534a <_printf_i+0xae>
   352f6:	2a70      	cmp	r2, #112	; 0x70
   352f8:	d1e7      	bne.n	352ca <_printf_i+0x2e>
   352fa:	2220      	movs	r2, #32
   352fc:	6809      	ldr	r1, [r1, #0]
   352fe:	430a      	orrs	r2, r1
   35300:	6022      	str	r2, [r4, #0]
   35302:	e003      	b.n	3530c <_printf_i+0x70>
   35304:	2a75      	cmp	r2, #117	; 0x75
   35306:	d020      	beq.n	3534a <_printf_i+0xae>
   35308:	2a78      	cmp	r2, #120	; 0x78
   3530a:	d1de      	bne.n	352ca <_printf_i+0x2e>
   3530c:	0022      	movs	r2, r4
   3530e:	2178      	movs	r1, #120	; 0x78
   35310:	3245      	adds	r2, #69	; 0x45
   35312:	7011      	strb	r1, [r2, #0]
   35314:	4a6c      	ldr	r2, [pc, #432]	; (354c8 <_printf_i+0x22c>)
   35316:	e030      	b.n	3537a <_printf_i+0xde>
   35318:	000e      	movs	r6, r1
   3531a:	681a      	ldr	r2, [r3, #0]
   3531c:	3642      	adds	r6, #66	; 0x42
   3531e:	1d11      	adds	r1, r2, #4
   35320:	6019      	str	r1, [r3, #0]
   35322:	6813      	ldr	r3, [r2, #0]
   35324:	7033      	strb	r3, [r6, #0]
   35326:	2301      	movs	r3, #1
   35328:	e079      	b.n	3541e <_printf_i+0x182>
   3532a:	0649      	lsls	r1, r1, #25
   3532c:	d5d9      	bpl.n	352e2 <_printf_i+0x46>
   3532e:	1d11      	adds	r1, r2, #4
   35330:	6019      	str	r1, [r3, #0]
   35332:	2300      	movs	r3, #0
   35334:	5ed5      	ldrsh	r5, [r2, r3]
   35336:	2d00      	cmp	r5, #0
   35338:	da03      	bge.n	35342 <_printf_i+0xa6>
   3533a:	232d      	movs	r3, #45	; 0x2d
   3533c:	9a04      	ldr	r2, [sp, #16]
   3533e:	426d      	negs	r5, r5
   35340:	7013      	strb	r3, [r2, #0]
   35342:	4b62      	ldr	r3, [pc, #392]	; (354cc <_printf_i+0x230>)
   35344:	270a      	movs	r7, #10
   35346:	9303      	str	r3, [sp, #12]
   35348:	e02f      	b.n	353aa <_printf_i+0x10e>
   3534a:	6820      	ldr	r0, [r4, #0]
   3534c:	6819      	ldr	r1, [r3, #0]
   3534e:	0605      	lsls	r5, r0, #24
   35350:	d503      	bpl.n	3535a <_printf_i+0xbe>
   35352:	1d08      	adds	r0, r1, #4
   35354:	6018      	str	r0, [r3, #0]
   35356:	680d      	ldr	r5, [r1, #0]
   35358:	e005      	b.n	35366 <_printf_i+0xca>
   3535a:	0640      	lsls	r0, r0, #25
   3535c:	d5f9      	bpl.n	35352 <_printf_i+0xb6>
   3535e:	680d      	ldr	r5, [r1, #0]
   35360:	1d08      	adds	r0, r1, #4
   35362:	6018      	str	r0, [r3, #0]
   35364:	b2ad      	uxth	r5, r5
   35366:	4b59      	ldr	r3, [pc, #356]	; (354cc <_printf_i+0x230>)
   35368:	2708      	movs	r7, #8
   3536a:	9303      	str	r3, [sp, #12]
   3536c:	2a6f      	cmp	r2, #111	; 0x6f
   3536e:	d018      	beq.n	353a2 <_printf_i+0x106>
   35370:	270a      	movs	r7, #10
   35372:	e016      	b.n	353a2 <_printf_i+0x106>
   35374:	3145      	adds	r1, #69	; 0x45
   35376:	700a      	strb	r2, [r1, #0]
   35378:	4a54      	ldr	r2, [pc, #336]	; (354cc <_printf_i+0x230>)
   3537a:	9203      	str	r2, [sp, #12]
   3537c:	681a      	ldr	r2, [r3, #0]
   3537e:	6821      	ldr	r1, [r4, #0]
   35380:	1d10      	adds	r0, r2, #4
   35382:	6018      	str	r0, [r3, #0]
   35384:	6815      	ldr	r5, [r2, #0]
   35386:	0608      	lsls	r0, r1, #24
   35388:	d522      	bpl.n	353d0 <_printf_i+0x134>
   3538a:	07cb      	lsls	r3, r1, #31
   3538c:	d502      	bpl.n	35394 <_printf_i+0xf8>
   3538e:	2320      	movs	r3, #32
   35390:	4319      	orrs	r1, r3
   35392:	6021      	str	r1, [r4, #0]
   35394:	2710      	movs	r7, #16
   35396:	2d00      	cmp	r5, #0
   35398:	d103      	bne.n	353a2 <_printf_i+0x106>
   3539a:	2320      	movs	r3, #32
   3539c:	6822      	ldr	r2, [r4, #0]
   3539e:	439a      	bics	r2, r3
   353a0:	6022      	str	r2, [r4, #0]
   353a2:	0023      	movs	r3, r4
   353a4:	2200      	movs	r2, #0
   353a6:	3343      	adds	r3, #67	; 0x43
   353a8:	701a      	strb	r2, [r3, #0]
   353aa:	6863      	ldr	r3, [r4, #4]
   353ac:	60a3      	str	r3, [r4, #8]
   353ae:	2b00      	cmp	r3, #0
   353b0:	db5c      	blt.n	3546c <_printf_i+0x1d0>
   353b2:	2204      	movs	r2, #4
   353b4:	6821      	ldr	r1, [r4, #0]
   353b6:	4391      	bics	r1, r2
   353b8:	6021      	str	r1, [r4, #0]
   353ba:	2d00      	cmp	r5, #0
   353bc:	d158      	bne.n	35470 <_printf_i+0x1d4>
   353be:	9e04      	ldr	r6, [sp, #16]
   353c0:	2b00      	cmp	r3, #0
   353c2:	d064      	beq.n	3548e <_printf_i+0x1f2>
   353c4:	0026      	movs	r6, r4
   353c6:	9b03      	ldr	r3, [sp, #12]
   353c8:	3642      	adds	r6, #66	; 0x42
   353ca:	781b      	ldrb	r3, [r3, #0]
   353cc:	7033      	strb	r3, [r6, #0]
   353ce:	e05e      	b.n	3548e <_printf_i+0x1f2>
   353d0:	0648      	lsls	r0, r1, #25
   353d2:	d5da      	bpl.n	3538a <_printf_i+0xee>
   353d4:	b2ad      	uxth	r5, r5
   353d6:	e7d8      	b.n	3538a <_printf_i+0xee>
   353d8:	6809      	ldr	r1, [r1, #0]
   353da:	681a      	ldr	r2, [r3, #0]
   353dc:	0608      	lsls	r0, r1, #24
   353de:	d505      	bpl.n	353ec <_printf_i+0x150>
   353e0:	1d11      	adds	r1, r2, #4
   353e2:	6019      	str	r1, [r3, #0]
   353e4:	6813      	ldr	r3, [r2, #0]
   353e6:	6962      	ldr	r2, [r4, #20]
   353e8:	601a      	str	r2, [r3, #0]
   353ea:	e006      	b.n	353fa <_printf_i+0x15e>
   353ec:	0649      	lsls	r1, r1, #25
   353ee:	d5f7      	bpl.n	353e0 <_printf_i+0x144>
   353f0:	1d11      	adds	r1, r2, #4
   353f2:	6019      	str	r1, [r3, #0]
   353f4:	6813      	ldr	r3, [r2, #0]
   353f6:	8aa2      	ldrh	r2, [r4, #20]
   353f8:	801a      	strh	r2, [r3, #0]
   353fa:	2300      	movs	r3, #0
   353fc:	9e04      	ldr	r6, [sp, #16]
   353fe:	6123      	str	r3, [r4, #16]
   35400:	e054      	b.n	354ac <_printf_i+0x210>
   35402:	681a      	ldr	r2, [r3, #0]
   35404:	1d11      	adds	r1, r2, #4
   35406:	6019      	str	r1, [r3, #0]
   35408:	6816      	ldr	r6, [r2, #0]
   3540a:	2100      	movs	r1, #0
   3540c:	6862      	ldr	r2, [r4, #4]
   3540e:	0030      	movs	r0, r6
   35410:	f000 f922 	bl	35658 <memchr>
   35414:	2800      	cmp	r0, #0
   35416:	d001      	beq.n	3541c <_printf_i+0x180>
   35418:	1b80      	subs	r0, r0, r6
   3541a:	6060      	str	r0, [r4, #4]
   3541c:	6863      	ldr	r3, [r4, #4]
   3541e:	6123      	str	r3, [r4, #16]
   35420:	2300      	movs	r3, #0
   35422:	9a04      	ldr	r2, [sp, #16]
   35424:	7013      	strb	r3, [r2, #0]
   35426:	e041      	b.n	354ac <_printf_i+0x210>
   35428:	6923      	ldr	r3, [r4, #16]
   3542a:	0032      	movs	r2, r6
   3542c:	9906      	ldr	r1, [sp, #24]
   3542e:	9805      	ldr	r0, [sp, #20]
   35430:	9d07      	ldr	r5, [sp, #28]
   35432:	47a8      	blx	r5
   35434:	1c43      	adds	r3, r0, #1
   35436:	d043      	beq.n	354c0 <_printf_i+0x224>
   35438:	6823      	ldr	r3, [r4, #0]
   3543a:	2500      	movs	r5, #0
   3543c:	079b      	lsls	r3, r3, #30
   3543e:	d40f      	bmi.n	35460 <_printf_i+0x1c4>
   35440:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35442:	68e0      	ldr	r0, [r4, #12]
   35444:	4298      	cmp	r0, r3
   35446:	da3d      	bge.n	354c4 <_printf_i+0x228>
   35448:	0018      	movs	r0, r3
   3544a:	e03b      	b.n	354c4 <_printf_i+0x228>
   3544c:	0022      	movs	r2, r4
   3544e:	2301      	movs	r3, #1
   35450:	3219      	adds	r2, #25
   35452:	9906      	ldr	r1, [sp, #24]
   35454:	9805      	ldr	r0, [sp, #20]
   35456:	9e07      	ldr	r6, [sp, #28]
   35458:	47b0      	blx	r6
   3545a:	1c43      	adds	r3, r0, #1
   3545c:	d030      	beq.n	354c0 <_printf_i+0x224>
   3545e:	3501      	adds	r5, #1
   35460:	68e3      	ldr	r3, [r4, #12]
   35462:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35464:	1a9b      	subs	r3, r3, r2
   35466:	429d      	cmp	r5, r3
   35468:	dbf0      	blt.n	3544c <_printf_i+0x1b0>
   3546a:	e7e9      	b.n	35440 <_printf_i+0x1a4>
   3546c:	2d00      	cmp	r5, #0
   3546e:	d0a9      	beq.n	353c4 <_printf_i+0x128>
   35470:	9e04      	ldr	r6, [sp, #16]
   35472:	0028      	movs	r0, r5
   35474:	0039      	movs	r1, r7
   35476:	f7fc ff6b 	bl	32350 <__aeabi_uidivmod>
   3547a:	9b03      	ldr	r3, [sp, #12]
   3547c:	3e01      	subs	r6, #1
   3547e:	5c5b      	ldrb	r3, [r3, r1]
   35480:	0028      	movs	r0, r5
   35482:	7033      	strb	r3, [r6, #0]
   35484:	0039      	movs	r1, r7
   35486:	f7fc fedd 	bl	32244 <__udivsi3>
   3548a:	1e05      	subs	r5, r0, #0
   3548c:	d1f1      	bne.n	35472 <_printf_i+0x1d6>
   3548e:	2f08      	cmp	r7, #8
   35490:	d109      	bne.n	354a6 <_printf_i+0x20a>
   35492:	6823      	ldr	r3, [r4, #0]
   35494:	07db      	lsls	r3, r3, #31
   35496:	d506      	bpl.n	354a6 <_printf_i+0x20a>
   35498:	6863      	ldr	r3, [r4, #4]
   3549a:	6922      	ldr	r2, [r4, #16]
   3549c:	4293      	cmp	r3, r2
   3549e:	dc02      	bgt.n	354a6 <_printf_i+0x20a>
   354a0:	2330      	movs	r3, #48	; 0x30
   354a2:	3e01      	subs	r6, #1
   354a4:	7033      	strb	r3, [r6, #0]
   354a6:	9b04      	ldr	r3, [sp, #16]
   354a8:	1b9b      	subs	r3, r3, r6
   354aa:	6123      	str	r3, [r4, #16]
   354ac:	9b07      	ldr	r3, [sp, #28]
   354ae:	aa09      	add	r2, sp, #36	; 0x24
   354b0:	9300      	str	r3, [sp, #0]
   354b2:	0021      	movs	r1, r4
   354b4:	9b06      	ldr	r3, [sp, #24]
   354b6:	9805      	ldr	r0, [sp, #20]
   354b8:	f7ff fe82 	bl	351c0 <_printf_common>
   354bc:	1c43      	adds	r3, r0, #1
   354be:	d1b3      	bne.n	35428 <_printf_i+0x18c>
   354c0:	2001      	movs	r0, #1
   354c2:	4240      	negs	r0, r0
   354c4:	b00b      	add	sp, #44	; 0x2c
   354c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   354c8:	00039a78 	.word	0x00039a78
   354cc:	00039a67 	.word	0x00039a67

000354d0 <__sread>:
   354d0:	b570      	push	{r4, r5, r6, lr}
   354d2:	000c      	movs	r4, r1
   354d4:	250e      	movs	r5, #14
   354d6:	5f49      	ldrsh	r1, [r1, r5]
   354d8:	f000 f8f0 	bl	356bc <_read_r>
   354dc:	2800      	cmp	r0, #0
   354de:	db03      	blt.n	354e8 <__sread+0x18>
   354e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   354e2:	181b      	adds	r3, r3, r0
   354e4:	6563      	str	r3, [r4, #84]	; 0x54
   354e6:	bd70      	pop	{r4, r5, r6, pc}
   354e8:	89a3      	ldrh	r3, [r4, #12]
   354ea:	4a02      	ldr	r2, [pc, #8]	; (354f4 <__sread+0x24>)
   354ec:	4013      	ands	r3, r2
   354ee:	81a3      	strh	r3, [r4, #12]
   354f0:	e7f9      	b.n	354e6 <__sread+0x16>
   354f2:	46c0      	nop			; (mov r8, r8)
   354f4:	ffffefff 	.word	0xffffefff

000354f8 <__swrite>:
   354f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   354fa:	001f      	movs	r7, r3
   354fc:	898b      	ldrh	r3, [r1, #12]
   354fe:	0005      	movs	r5, r0
   35500:	000c      	movs	r4, r1
   35502:	0016      	movs	r6, r2
   35504:	05db      	lsls	r3, r3, #23
   35506:	d505      	bpl.n	35514 <__swrite+0x1c>
   35508:	230e      	movs	r3, #14
   3550a:	5ec9      	ldrsh	r1, [r1, r3]
   3550c:	2200      	movs	r2, #0
   3550e:	2302      	movs	r3, #2
   35510:	f000 f88e 	bl	35630 <_lseek_r>
   35514:	89a3      	ldrh	r3, [r4, #12]
   35516:	4a05      	ldr	r2, [pc, #20]	; (3552c <__swrite+0x34>)
   35518:	0028      	movs	r0, r5
   3551a:	4013      	ands	r3, r2
   3551c:	81a3      	strh	r3, [r4, #12]
   3551e:	0032      	movs	r2, r6
   35520:	230e      	movs	r3, #14
   35522:	5ee1      	ldrsh	r1, [r4, r3]
   35524:	003b      	movs	r3, r7
   35526:	f000 f839 	bl	3559c <_write_r>
   3552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3552c:	ffffefff 	.word	0xffffefff

00035530 <__sseek>:
   35530:	b570      	push	{r4, r5, r6, lr}
   35532:	000c      	movs	r4, r1
   35534:	250e      	movs	r5, #14
   35536:	5f49      	ldrsh	r1, [r1, r5]
   35538:	f000 f87a 	bl	35630 <_lseek_r>
   3553c:	89a3      	ldrh	r3, [r4, #12]
   3553e:	1c42      	adds	r2, r0, #1
   35540:	d103      	bne.n	3554a <__sseek+0x1a>
   35542:	4a05      	ldr	r2, [pc, #20]	; (35558 <__sseek+0x28>)
   35544:	4013      	ands	r3, r2
   35546:	81a3      	strh	r3, [r4, #12]
   35548:	bd70      	pop	{r4, r5, r6, pc}
   3554a:	2280      	movs	r2, #128	; 0x80
   3554c:	0152      	lsls	r2, r2, #5
   3554e:	4313      	orrs	r3, r2
   35550:	81a3      	strh	r3, [r4, #12]
   35552:	6560      	str	r0, [r4, #84]	; 0x54
   35554:	e7f8      	b.n	35548 <__sseek+0x18>
   35556:	46c0      	nop			; (mov r8, r8)
   35558:	ffffefff 	.word	0xffffefff

0003555c <__sclose>:
   3555c:	b510      	push	{r4, lr}
   3555e:	230e      	movs	r3, #14
   35560:	5ec9      	ldrsh	r1, [r1, r3]
   35562:	f000 f82f 	bl	355c4 <_close_r>
   35566:	bd10      	pop	{r4, pc}

00035568 <strchr>:
   35568:	b2c9      	uxtb	r1, r1
   3556a:	7803      	ldrb	r3, [r0, #0]
   3556c:	2b00      	cmp	r3, #0
   3556e:	d004      	beq.n	3557a <strchr+0x12>
   35570:	4299      	cmp	r1, r3
   35572:	d100      	bne.n	35576 <strchr+0xe>
   35574:	4770      	bx	lr
   35576:	3001      	adds	r0, #1
   35578:	e7f7      	b.n	3556a <strchr+0x2>
   3557a:	424b      	negs	r3, r1
   3557c:	4159      	adcs	r1, r3
   3557e:	4249      	negs	r1, r1
   35580:	4008      	ands	r0, r1
   35582:	e7f7      	b.n	35574 <strchr+0xc>

00035584 <__ascii_wctomb>:
   35584:	1e0b      	subs	r3, r1, #0
   35586:	d004      	beq.n	35592 <__ascii_wctomb+0xe>
   35588:	2aff      	cmp	r2, #255	; 0xff
   3558a:	d904      	bls.n	35596 <__ascii_wctomb+0x12>
   3558c:	238a      	movs	r3, #138	; 0x8a
   3558e:	6003      	str	r3, [r0, #0]
   35590:	3b8b      	subs	r3, #139	; 0x8b
   35592:	0018      	movs	r0, r3
   35594:	4770      	bx	lr
   35596:	700a      	strb	r2, [r1, #0]
   35598:	2301      	movs	r3, #1
   3559a:	e7fa      	b.n	35592 <__ascii_wctomb+0xe>

0003559c <_write_r>:
   3559c:	b570      	push	{r4, r5, r6, lr}
   3559e:	0005      	movs	r5, r0
   355a0:	0008      	movs	r0, r1
   355a2:	0011      	movs	r1, r2
   355a4:	2200      	movs	r2, #0
   355a6:	4c06      	ldr	r4, [pc, #24]	; (355c0 <_write_r+0x24>)
   355a8:	6022      	str	r2, [r4, #0]
   355aa:	001a      	movs	r2, r3
   355ac:	f7f5 fa04 	bl	2a9b8 <_write>
   355b0:	1c43      	adds	r3, r0, #1
   355b2:	d103      	bne.n	355bc <_write_r+0x20>
   355b4:	6823      	ldr	r3, [r4, #0]
   355b6:	2b00      	cmp	r3, #0
   355b8:	d000      	beq.n	355bc <_write_r+0x20>
   355ba:	602b      	str	r3, [r5, #0]
   355bc:	bd70      	pop	{r4, r5, r6, pc}
   355be:	46c0      	nop			; (mov r8, r8)
   355c0:	20005a94 	.word	0x20005a94

000355c4 <_close_r>:
   355c4:	2300      	movs	r3, #0
   355c6:	b570      	push	{r4, r5, r6, lr}
   355c8:	4c06      	ldr	r4, [pc, #24]	; (355e4 <_close_r+0x20>)
   355ca:	0005      	movs	r5, r0
   355cc:	0008      	movs	r0, r1
   355ce:	6023      	str	r3, [r4, #0]
   355d0:	f7f5 fa46 	bl	2aa60 <_close>
   355d4:	1c43      	adds	r3, r0, #1
   355d6:	d103      	bne.n	355e0 <_close_r+0x1c>
   355d8:	6823      	ldr	r3, [r4, #0]
   355da:	2b00      	cmp	r3, #0
   355dc:	d000      	beq.n	355e0 <_close_r+0x1c>
   355de:	602b      	str	r3, [r5, #0]
   355e0:	bd70      	pop	{r4, r5, r6, pc}
   355e2:	46c0      	nop			; (mov r8, r8)
   355e4:	20005a94 	.word	0x20005a94

000355e8 <_fstat_r>:
   355e8:	2300      	movs	r3, #0
   355ea:	b570      	push	{r4, r5, r6, lr}
   355ec:	4c06      	ldr	r4, [pc, #24]	; (35608 <_fstat_r+0x20>)
   355ee:	0005      	movs	r5, r0
   355f0:	0008      	movs	r0, r1
   355f2:	0011      	movs	r1, r2
   355f4:	6023      	str	r3, [r4, #0]
   355f6:	f7f5 fa3d 	bl	2aa74 <_fstat>
   355fa:	1c43      	adds	r3, r0, #1
   355fc:	d103      	bne.n	35606 <_fstat_r+0x1e>
   355fe:	6823      	ldr	r3, [r4, #0]
   35600:	2b00      	cmp	r3, #0
   35602:	d000      	beq.n	35606 <_fstat_r+0x1e>
   35604:	602b      	str	r3, [r5, #0]
   35606:	bd70      	pop	{r4, r5, r6, pc}
   35608:	20005a94 	.word	0x20005a94

0003560c <_isatty_r>:
   3560c:	2300      	movs	r3, #0
   3560e:	b570      	push	{r4, r5, r6, lr}
   35610:	4c06      	ldr	r4, [pc, #24]	; (3562c <_isatty_r+0x20>)
   35612:	0005      	movs	r5, r0
   35614:	0008      	movs	r0, r1
   35616:	6023      	str	r3, [r4, #0]
   35618:	f7f5 fa3a 	bl	2aa90 <_isatty>
   3561c:	1c43      	adds	r3, r0, #1
   3561e:	d103      	bne.n	35628 <_isatty_r+0x1c>
   35620:	6823      	ldr	r3, [r4, #0]
   35622:	2b00      	cmp	r3, #0
   35624:	d000      	beq.n	35628 <_isatty_r+0x1c>
   35626:	602b      	str	r3, [r5, #0]
   35628:	bd70      	pop	{r4, r5, r6, pc}
   3562a:	46c0      	nop			; (mov r8, r8)
   3562c:	20005a94 	.word	0x20005a94

00035630 <_lseek_r>:
   35630:	b570      	push	{r4, r5, r6, lr}
   35632:	0005      	movs	r5, r0
   35634:	0008      	movs	r0, r1
   35636:	0011      	movs	r1, r2
   35638:	2200      	movs	r2, #0
   3563a:	4c06      	ldr	r4, [pc, #24]	; (35654 <_lseek_r+0x24>)
   3563c:	6022      	str	r2, [r4, #0]
   3563e:	001a      	movs	r2, r3
   35640:	f7f5 fa2f 	bl	2aaa2 <_lseek>
   35644:	1c43      	adds	r3, r0, #1
   35646:	d103      	bne.n	35650 <_lseek_r+0x20>
   35648:	6823      	ldr	r3, [r4, #0]
   3564a:	2b00      	cmp	r3, #0
   3564c:	d000      	beq.n	35650 <_lseek_r+0x20>
   3564e:	602b      	str	r3, [r5, #0]
   35650:	bd70      	pop	{r4, r5, r6, pc}
   35652:	46c0      	nop			; (mov r8, r8)
   35654:	20005a94 	.word	0x20005a94

00035658 <memchr>:
   35658:	b2c9      	uxtb	r1, r1
   3565a:	1882      	adds	r2, r0, r2
   3565c:	4290      	cmp	r0, r2
   3565e:	d101      	bne.n	35664 <memchr+0xc>
   35660:	2000      	movs	r0, #0
   35662:	4770      	bx	lr
   35664:	7803      	ldrb	r3, [r0, #0]
   35666:	428b      	cmp	r3, r1
   35668:	d0fb      	beq.n	35662 <memchr+0xa>
   3566a:	3001      	adds	r0, #1
   3566c:	e7f6      	b.n	3565c <memchr+0x4>

0003566e <_realloc_r>:
   3566e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35670:	0007      	movs	r7, r0
   35672:	000d      	movs	r5, r1
   35674:	0016      	movs	r6, r2
   35676:	2900      	cmp	r1, #0
   35678:	d105      	bne.n	35686 <_realloc_r+0x18>
   3567a:	0011      	movs	r1, r2
   3567c:	f7fe fe9e 	bl	343bc <_malloc_r>
   35680:	0004      	movs	r4, r0
   35682:	0020      	movs	r0, r4
   35684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35686:	2a00      	cmp	r2, #0
   35688:	d103      	bne.n	35692 <_realloc_r+0x24>
   3568a:	f7fe fe4d 	bl	34328 <_free_r>
   3568e:	0034      	movs	r4, r6
   35690:	e7f7      	b.n	35682 <_realloc_r+0x14>
   35692:	f000 f827 	bl	356e4 <_malloc_usable_size_r>
   35696:	002c      	movs	r4, r5
   35698:	4286      	cmp	r6, r0
   3569a:	d9f2      	bls.n	35682 <_realloc_r+0x14>
   3569c:	0031      	movs	r1, r6
   3569e:	0038      	movs	r0, r7
   356a0:	f7fe fe8c 	bl	343bc <_malloc_r>
   356a4:	1e04      	subs	r4, r0, #0
   356a6:	d0ec      	beq.n	35682 <_realloc_r+0x14>
   356a8:	0029      	movs	r1, r5
   356aa:	0032      	movs	r2, r6
   356ac:	f7fe fe18 	bl	342e0 <memcpy>
   356b0:	0029      	movs	r1, r5
   356b2:	0038      	movs	r0, r7
   356b4:	f7fe fe38 	bl	34328 <_free_r>
   356b8:	e7e3      	b.n	35682 <_realloc_r+0x14>
	...

000356bc <_read_r>:
   356bc:	b570      	push	{r4, r5, r6, lr}
   356be:	0005      	movs	r5, r0
   356c0:	0008      	movs	r0, r1
   356c2:	0011      	movs	r1, r2
   356c4:	2200      	movs	r2, #0
   356c6:	4c06      	ldr	r4, [pc, #24]	; (356e0 <_read_r+0x24>)
   356c8:	6022      	str	r2, [r4, #0]
   356ca:	001a      	movs	r2, r3
   356cc:	f7f5 f94a 	bl	2a964 <_read>
   356d0:	1c43      	adds	r3, r0, #1
   356d2:	d103      	bne.n	356dc <_read_r+0x20>
   356d4:	6823      	ldr	r3, [r4, #0]
   356d6:	2b00      	cmp	r3, #0
   356d8:	d000      	beq.n	356dc <_read_r+0x20>
   356da:	602b      	str	r3, [r5, #0]
   356dc:	bd70      	pop	{r4, r5, r6, pc}
   356de:	46c0      	nop			; (mov r8, r8)
   356e0:	20005a94 	.word	0x20005a94

000356e4 <_malloc_usable_size_r>:
   356e4:	1f0b      	subs	r3, r1, #4
   356e6:	681b      	ldr	r3, [r3, #0]
   356e8:	1f18      	subs	r0, r3, #4
   356ea:	2b00      	cmp	r3, #0
   356ec:	da01      	bge.n	356f2 <_malloc_usable_size_r+0xe>
   356ee:	580b      	ldr	r3, [r1, r0]
   356f0:	18c0      	adds	r0, r0, r3
   356f2:	4770      	bx	lr
   356f4:	00000002 	.word	0x00000002
   356f8:	00000003 	.word	0x00000003
   356fc:	00000028 	.word	0x00000028
   35700:	00000029 	.word	0x00000029
   35704:	00000004 	.word	0x00000004
   35708:	00000005 	.word	0x00000005
   3570c:	00000006 	.word	0x00000006
   35710:	00000007 	.word	0x00000007
   35714:	0000ffff 	.word	0x0000ffff
   35718:	0000ffff 	.word	0x0000ffff
   3571c:	00000022 	.word	0x00000022
   35720:	00000023 	.word	0x00000023
   35724:	0000ffff 	.word	0x0000ffff
   35728:	0000ffff 	.word	0x0000ffff
   3572c:	0000ffff 	.word	0x0000ffff
   35730:	0000ffff 	.word	0x0000ffff
   35734:	00000008 	.word	0x00000008
   35738:	00000009 	.word	0x00000009
   3573c:	0000000a 	.word	0x0000000a
   35740:	0000000b 	.word	0x0000000b
   35744:	000124da 	.word	0x000124da
   35748:	000124e0 	.word	0x000124e0
   3574c:	000124e0 	.word	0x000124e0
   35750:	000124e0 	.word	0x000124e0
   35754:	000124e0 	.word	0x000124e0
   35758:	000124e0 	.word	0x000124e0
   3575c:	000124e0 	.word	0x000124e0
   35760:	000124e0 	.word	0x000124e0
   35764:	000124e0 	.word	0x000124e0
   35768:	000124e0 	.word	0x000124e0
   3576c:	000124e0 	.word	0x000124e0
   35770:	000124e0 	.word	0x000124e0
   35774:	000124e0 	.word	0x000124e0
   35778:	000124e0 	.word	0x000124e0
   3577c:	000124e0 	.word	0x000124e0
   35780:	000124e0 	.word	0x000124e0
   35784:	000124b8 	.word	0x000124b8
   35788:	000124e0 	.word	0x000124e0
   3578c:	000124e0 	.word	0x000124e0
   35790:	000124e0 	.word	0x000124e0
   35794:	000124e0 	.word	0x000124e0
   35798:	000124e0 	.word	0x000124e0
   3579c:	000124e0 	.word	0x000124e0
   357a0:	000124e0 	.word	0x000124e0
   357a4:	000124e0 	.word	0x000124e0
   357a8:	000124e0 	.word	0x000124e0
   357ac:	000124e0 	.word	0x000124e0
   357b0:	000124e0 	.word	0x000124e0
   357b4:	000124e0 	.word	0x000124e0
   357b8:	000124e0 	.word	0x000124e0
   357bc:	000124e0 	.word	0x000124e0
   357c0:	000124e0 	.word	0x000124e0
   357c4:	000124d4 	.word	0x000124d4
   357c8:	000124e0 	.word	0x000124e0
   357cc:	000124e0 	.word	0x000124e0
   357d0:	000124e0 	.word	0x000124e0
   357d4:	000124e0 	.word	0x000124e0
   357d8:	000124e0 	.word	0x000124e0
   357dc:	000124e0 	.word	0x000124e0
   357e0:	000124e0 	.word	0x000124e0
   357e4:	000124e0 	.word	0x000124e0
   357e8:	000124e0 	.word	0x000124e0
   357ec:	000124e0 	.word	0x000124e0
   357f0:	000124e0 	.word	0x000124e0
   357f4:	000124e0 	.word	0x000124e0
   357f8:	000124e0 	.word	0x000124e0
   357fc:	000124e0 	.word	0x000124e0
   35800:	000124e0 	.word	0x000124e0
   35804:	000124ce 	.word	0x000124ce
   35808:	00012476 	.word	0x00012476
   3580c:	0001248c 	.word	0x0001248c
   35810:	000124a2 	.word	0x000124a2
   35814:	0001245c 	.word	0x0001245c

00035818 <pcWelcomeMessage>:
   35818:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   35828:	20657079 706c6548 206f7420 77656976     ype Help to view
   35838:	6c206120 20747369 7220666f 73696765      a list of regis
   35848:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   35858:	0000000a 00007766 203a7766 6e776f44     ....fw..fw: Down
   35868:	64616f6c 66206120 20656c69 20646e61     load a file and 
   35878:	66726570 206d726f 46206e61 70752057     perform an FW up
   35888:	65746164 00000a0d 65736572 00000074     date....reset...
   35898:	65736572 52203a74 74657365 68742073     reset: Resets th
   358a8:	65642065 65636976 00000a0d 4d746567     e device....getM
   358b8:	7473696f 00657275 4d746567 7473696f     oisture.getMoist
   358c8:	3a657275 74655220 736e7275 65687420     ure: Returns the
   358d8:	696f6d20 72757473 6e612065 65742064      moisture and te
   358e8:	7265706d 72757461 72662065 74206d6f     mperature from t
   358f8:	49206568 53204332 206c696f 73696f4d     he I2C Soil Mois
   35908:	65727574 6e655320 2e726f73 00000a0d     ture Sensor.....
   35918:	00633269 3a633269 61635320 4920736e     i2c.i2c: Scans I
   35928:	62204332 0a0d7375 00000000 0063696d     2C bus......mic.
   35938:	3a63696d 61655220 696d2064 706f7263     mic: Read microp
   35948:	656e6f68 74616420 000a0d61 006b706e     hone data...npk.
   35958:	3a6b706e 74654720 696f7320 504e206c     npk: Get soil NP
   35968:	4e28204b 6f727469 2c6e6567 6f685020     K (Nitrogen, Pho
   35978:	6f687073 2c737572 746f5020 69737361     sphorus, Potassi
   35988:	20296d75 61746164 00000a0d 00736c63     um) data....cls.
   35998:	3a736c63 656c4320 20737261 20656874     cls: Clears the 
   359a8:	6d726574 6c616e69 72637320 0d6e6565     terminal screen.
   359b8:	0000000a 6c756f43 6f6e2064 6c612074     ....Could not al
   359c8:	61636f6c 73206574 70616d65 65726f68     locate semaphore
   359d8:	00000a0d 00000a0d 0000616f 325b6325     ........oa..%c[2
   359e8:	003e0d4b 00082008 325b6325 0000004a     K.>.. ..%c[2J...
   359f8:	31202030 20322020 20203320 35202034     0  1  2  3  4  5
   35a08:	20362020 20203720 39202038 20612020       6  7  8  9  a 
   35a18:	20206220 64202063 20652020 0a0d6620      b  c  d  e  f..
   35a28:	00000000 78323025 0000203a 78323025     ....%02x: ..%02x
   35a38:	00000020 2063694d 61746144 54514d20      ...Mic Data MQT
   35a48:	6f502054 0a0d7473 00000000 6c696f53     T Post......Soil
   35a58:	6d655420 61726570 65727574 74614420      Temperature Dat
   35a68:	514d2061 50205454 0d74736f 0000000a     a MQTT Post.....
   35a78:	6c696f53 696f4d20 72757473 6e612065     Soil Moisture an
   35a88:	70532064 6b6e6972 2072656c 61746144     d Sprinkler Data
   35a98:	54514d20 6f502054 0a0d7473 00000000      MQTT Post......
   35aa8:	736e6553 4520726f 726f7272 21642520     Sensor Error %d!
   35ab8:	00000a0d 3a4b504e 20642520 0a0d6d6d     ....NPK: %d mm..
   35ac8:	00000000 204b504e 61746144 54514d20     ....NPK Data MQT
   35ad8:	6f502054 0a0d7473 00000000              T Post......

00035ae4 <xOTAUCommand>:
   35ae4:	0003585c 00035860 00013a81 00000000     \X..`X...:......

00035af4 <xResetCommand>:
   35af4:	00035890 00035898 00013ab9 00000000     .X...X...:......

00035b04 <xSoilMoistureGetMoisture>:
   35b04:	000358b4 000358c0 00013c51 00000000     .X...X..Q<......

00035b14 <xI2cScan>:
   35b14:	00035918 0003591c 00013ad9 00000000     .Y...Y...:......

00035b24 <xMicCommand>:
   35b24:	00035934 00035938 00013c01 00000000     4Y..8Y...<......

00035b34 <xNPKCommand>:
   35b34:	00035954 00035958 00013cfd 00000000     TY..XY...<......

00035b44 <xClearScreen>:
   35b44:	00035994 00035998 00013a39 00000000     .Y...Y..9:......
   35b54:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   35b64:	6573696c 696f7320 504e206c 6553204b     lise soil NPK Se
   35b74:	726f736e 00000021 65746641 756d2072     nsor!...After mu
   35b84:	3a786574 0d642520 0000000a 65746641     tex: %d.....Afte
   35b94:	41552072 54205452 25203a58 000a0d64     r UART TX: %d...
   35ba4:	65746641 41552072 52205452 25203a58     After UART RX: %
   35bb4:	000a0d64 706d6554 74617265 3a657275     d...Temperature:
   35bc4:	2e642520 0a0d6425 00000000 73696f4d      %d.%d......Mois
   35bd4:	65727574 6425203a 00000a0d 0000100f     ture: %d........

00035be4 <main_mqtt_broker>:
   35be4:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   35bf4:	0000006d 64333025 00000000 72617473     m...%03d....star
   35c04:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   35c14:	726f7473 20656761 20746f6e 64616572     storage not read
   35c24:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   35c34:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   35c44:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   35c54:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   35c64:	203a6461 75716572 20747365 73207369     ad: request is s
   35c74:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   35c84:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   35c94:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   35ca4:	726c6120 79646165 000a0d2e 72617473      already....star
   35cb4:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   35cc4:	20676e69 50545448 71657220 74736575     ing HTTP request
   35cd4:	0d2e2e2e 0000000a 70747468 322f2f3a     ........http://2
   35ce4:	33322e30 37312e32 33322e36 53452f38     0.232.176.238/ES
   35cf4:	36313545 49414d5f 57465f4e 6e69622e     E516_MAIN_FW.bin
   35d04:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   35d14:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   35d24:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   35d34:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   35d44:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   35d54:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   35d64:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   35d74:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   35d84:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   35d94:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35da4:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   35db4:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   35dc4:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   35dd4:	656b6361 66203a74 20656c69 74697277     acket: file writ
   35de4:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   35df4:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   35e04:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35e14:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   35e24:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   35e34:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   35e44:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   35e54:	64616f6c 73206465 65636375 75667373     loaded successfu
   35e64:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   35e74:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   35e84:	63205054 6e65696c 6f732074 74656b63     TP client socket
   35e94:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   35ea4:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   35eb4:	6b636162 6572203a 73657571 6f632074     back: request co
   35ec4:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   35ed4:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   35ee4:	6572203a 76696563 72206465 6f707365     : received respo
   35ef4:	2065736e 64207525 20617461 657a6973     nse %u data size
   35f04:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   35f14:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   35f24:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   35f34:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   35f44:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   35f54:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   35f64:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   35f74:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   35f84:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   35f94:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   35fa4:	5443454e 0a0d4445 00000000 6c6f6f74     NECTED......tool
   35fb4:	74786f62 00000061 65786950 33395f6c     boxta...Pixel_93
   35fc4:	00003734 69666977 3a62635f 20504920     47..wifi_cb: IP 
   35fd4:	72646461 20737365 25207369 75252e75     address is %u.%u
   35fe4:	2e75252e 0a0d7525 00000000 6f727245     .%u.%u......Erro
   35ff4:	6f632072 63656e6e 676e6974 206f7420     r connecting to 
   36004:	5454514d 6f724220 2172656b 00000a0d     MQTT Broker!....
   36014:	74696e69 6f74735f 65676172 6c70203a     init_storage: pl
   36024:	65736165 756c7020 6e612067 2f445320     ease plug an SD/
   36034:	20434d4d 64726163 206e6920 746f6c73     MMC card in slot
   36044:	0d2e2e2e 0000000a 74696e69 6f74735f     ........init_sto
   36054:	65676172 4453203a 72614320 6e692064     rage: SD Card in
   36064:	6c617473 6166206c 64656c69 000a0d2e     stall failed....
   36074:	74696e69 6f74735f 65676172 7274203a     init_storage: tr
   36084:	6e752079 67756c70 646e6120 2d657220     y unplug and re-
   36094:	67756c70 65687420 72616320 0a0d2e64     plug the card...
   360a4:	00000000 74696e69 6f74735f 65676172     ....init_storage
   360b4:	6f6d203a 69746e75 5320676e 61632044     : mounting SD ca
   360c4:	2e2e6472 000a0d2e 74696e69 6f74735f     rd......init_sto
   360d4:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   360e4:	20746e75 6c696166 20216465 73657228     unt failed! (res
   360f4:	29642520 00000a0d 74696e69 6f74735f      %d)....init_sto
   36104:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   36114:	20746e75 0d2e4b4f 0000000a 666e6f63     unt OK......conf
   36124:	72756769 74685f65 635f7074 6e65696c     igure_http_clien
   36134:	48203a74 20505454 65696c63 6920746e     t: HTTP client i
   36144:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
   36154:	64656c69 72282021 25207365 0a0d2964     iled! (res %d)..
   36164:	00000000 25200a0d 00732a2e 28626772     ...... %.*s.rgb(
   36174:	00000000 47520a0d 64252042 20642520     ......RGB %d %d 
   36184:	0a0d6425 00000000 6167227b 3a22656d     %d......{"game":
   36194:	0000005b 61470a0d 6d20656d 61737365     [.....Game messa
   361a4:	72206567 69656365 21646576 00000a0d     ge received!....
   361b4:	732a2e25 00000000 61500a0d 64657372     %.*s......Parsed
   361c4:	6d6f4320 646e616d 0000203a 002c6425      Command: ..%d,.
   361d4:	65530a0d 7020746e 2079616c 63206f74     ..Sent play to c
   361e4:	72746e6f 0d216c6f 0000000a 61470a0d     ontrol!.......Ga
   361f4:	6d20656d 61737365 72206567 69656365     me message recei
   36204:	20646576 20747562 20746f6e 65646e75     ved but not unde
   36214:	6f747372 0d21646f 0000000a 4d490a0d     rstood!.......IM
   36224:	6f742055 20636970 65636572 64657669     U topic received
   36234:	000a0d21 69440a0d 6e617473 74206563     !.....Distance t
   36244:	6369706f 63657220 65766965 0a0d2164     opic received!..
   36254:	00000000 70530a0d 6b6e6972 2072656c     ......Sprinkler 
   36264:	69706f74 65722063 76696563 0d216465     topic received!.
   36274:	0000000a 00000030 00000031 203e3e20     ....0...1... >> 
   36284:	00000000 4c5f3150 455f4445 31354553     ....P1_LED_ESE51
   36294:	38545f36 00000000 736c6166 00000065     6_T8....false...
   362a4:	65757274 00000000 6f430a0d 63656e6e     true......Connec
   362b4:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   362c4:	0000002e 65657247 6e61506e 72656874     ....GreenPanther
   362d4:	00000000 68736b41 35617961 00003631     ....Akshaya516..
   362e4:	5454514d 72452020 20726f72 4f4e202d     MQTT  Error - NO
   362f4:	6f432054 63656e6e 20646574 62206f74     T Connected to b
   36304:	656b6f72 000a0d72 5454514d 6e6f4320     roker...MQTT Con
   36314:	7463656e 74206465 7262206f 72656b6f     nected to broker
   36324:	00000a0d 6e6e6f43 20746365 6c696166     ....Connect fail
   36334:	206f7420 76726573 25287265 20212973      to server(%s)! 
   36344:	72746572 74692079 74756120 74616d6f     retry it automat
   36354:	6c616369 0d2e796c 0000000a 475f3150     ically......P1_G
   36364:	5f454d41 35455345 545f3631 00000038     AME_ESE516_T8...
   36374:	495f3150 455f554d 31354553 38545f36     P1_IMU_ESE516_T8
   36384:	00000000 69727053 656c6b6e 00000072     ....Sprinkler...
   36394:	5454514d 6e6f4320 7463656e 0a0d6465     MQTT Connected..
   363a4:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   363b4:	6c636564 20656e69 72756f79 63636120     decline your acc
   363c4:	21737365 72726520 6320726f 2065646f     ess! error code 
   363d4:	0a0d6425 00000000 5454514d 73696420     %d......MQTT dis
   363e4:	6e6e6f63 65746365 000a0d64 5454514d     connected...MQTT
   363f4:	696e6920 6c616974 74617a69 206e6f69      initialization 
   36404:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   36414:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   36424:	5454514d 67657220 65747369 61632072     MQTT register ca
   36434:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   36444:	726f7272 646f6320 73692065 64252820     rror code is (%d
   36454:	000a0d29 2264227b 74227b3a 22706d65     )...{"d":{"temp"
   36464:	7d64253a 0000007d 4941465b 72205d4c     :%d}}...[FAIL] r
   36474:	25207365 000a0d64 67616c46 78742e41     es %d...FlagA.tx
   36484:	64612074 21646564 00000a0d 6c463a30     t added!....0:Fl
   36494:	2e416761 00747874 6e6e6f43 65746365     agA.txt.Connecte
   364a4:	6f742064 54514d20 72422054 72656b6f     d to MQTT Broker
   364b4:	000a0d21 6d69227b 3a227875 202c6425     !...{"imux":%d, 
   364c4:	756d6922 203a2279 202c6425 756d6922     "imuy": %d, "imu
   364d4:	203a227a 007d6425 00006425 65657247     z": %d}.%d..Gree
   364e4:	61505f6e 6568746e 694d2f72 706f7263     n_Panther/Microp
   364f4:	656e6f68 00000000 252e6425 00000064     hone....%d.%d...
   36504:	65657247 61505f6e 6568746e 6f532f72     Green_Panther/So
   36514:	545f6c69 65706d65 75746172 00006572     il_Temperature..
   36524:	65657247 61505f6e 6568746e 6f532f72     Green_Panther/So
   36534:	4d5f6c69 7473696f 00657275 00007d5d     il_Moisture.]}..
   36544:	00000a0d 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   36554:	545f3631 00000038 4f525245 6e492052     16_T8...ERROR In
   36564:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   36574:	61746144 65757120 21736575 00000a0d     Data queues!....
   36584:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   36594:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   365a4:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   365b4:	6c6c6163 72726520 2021726f 73657228     call error! (res
   365c4:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   365d4:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   365e4:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   365f4:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   36604:	38545f36 00000000 5454514d 6e657320     6_T8....MQTT sen
   36614:	73252064 00000a0d 000158d0 000158dc     d %s.....X...X..
   36624:	000158ee 00015944 00015964 706c6568     .X..DY..dY..help
   36634:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   36644:	20737473 206c6c61 20656874 69676572     sts all the regi
   36654:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   36664:	000a0d0a 6f636e49 63657272 6f632074     ....Incorrect co
   36674:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   36684:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   36694:	6f742022 65697620 20612077 7473696c     " to view a list
   366a4:	20666f20 69617661 6c62616c 6f632065      of available co
   366b4:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   366c4:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   366d4:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   366e4:	6f742027 65697620 20612077 7473696c     ' to view a list
   366f4:	20666f20 69617661 6c62616c 6f632065      of available co
   36704:	6e616d6d 0d2e7364 000a0d0a              mmands......

00036710 <xHelpCommand>:
   36710:	00036630 00036638 000178d9 00000000     0f..8f...x......
   36720:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   36730:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   36740:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   36750:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   36760:	78656e55 74636570 61206465 6d756772     Unexpected argum
   36770:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   36780:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   36790:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   367a0:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   367b0:	2073656c 6e69202d 61657263 54206573     les - increase T
   367c0:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   367d0:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   367e0:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   367f0:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   36800:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   36810:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   36820:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   36830:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   36840:	6e616820 73656c64 69202d20 6572636e      handles - incre
   36850:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   36860:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   36870:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   36880:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   36890:	6e616820 73656c64 69202d20 6572636e      handles - incre
   368a0:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   368b0:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   368c0:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   368d0:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   368e0:	73656c64 69202d20 6572636e 20657361     dles - increase 
   368f0:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   36900:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   36910:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   36920:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   36930:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   36940:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   36950:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   36960:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   36970:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   36980:	202d2073 72636e69 65736165 43525420     s - increase TRC
   36990:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   369a0:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   369b0:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   369c0:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   369d0:	646e6168 2073656c 6e69202d 61657263     handles - increa
   369e0:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   369f0:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   36a00:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   36a10:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   36a20:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   36a30:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   36a40:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   36a50:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   36a60:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   36a70:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   36a80:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   36a90:	63746365 7373616c 00000021 00017ffe     ectclass!.......
   36aa0:	00017ff6 00017ffa 00017fee 00017ff2     ................
   36ab0:	00018002 00018006 0001800a 0001800e     ................
   36ac0:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   36ad0:	64726f63 6e207265 6920746f 6974696e     corder not initi
   36ae0:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   36af0:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   36b00:	00216461 61747328 70757472 00000029     ad!.(startup)...
   36b10:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   36b20:	64726f63 6e207265 6920746f 6974696e     corder not initi
   36b30:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   36b40:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   36b50:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   36b60:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   36b70:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   36b80:	61762064 2065756c 20726f66 646e6168     d value for hand
   36b90:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   36ba0:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   36bb0:	7265706f 73656974 616e203a 3d20656d     operties: name =
   36bc0:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   36bd0:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   36be0:	64726f63 62207265 21797375 65655320     corder busy! See
   36bf0:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   36c00:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   36c10:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   36c20:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   36c30:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   36c40:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   36c50:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   36c60:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   36c70:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   36c80:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   36c90:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   36ca0:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   36cb0:	6f636572 72656472 73756220 53202179     recorder busy! S
   36cc0:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   36cd0:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   36ce0:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   36cf0:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   36d00:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   36d10:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   36d20:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   36d30:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   36d40:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   36d50:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   36d60:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   36d70:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   36d80:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   36d90:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   36da0:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   36db0:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   36dc0:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   36dd0:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   36de0:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   36df0:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   36e00:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   36e10:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   36e20:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   36e30:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   36e40:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   36e50:	72657473 69727453 203a676e 6562616c     sterString: labe
   36e60:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   36e70:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36e80:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   36e90:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   36ea0:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   36eb0:	72656472 73756220 202d2079 68676968     rder busy - high
   36ec0:	69727020 7469726f 53492079 73752052      priority ISR us
   36ed0:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   36ee0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36ef0:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   36f00:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   36f10:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   36f20:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36f30:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36f40:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   36f50:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36f60:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   36f70:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   36f80:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   36f90:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   36fa0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36fb0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36fc0:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   36fd0:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   36fe0:	00000072 6f636552 72656472 73756220     r...Recorder bus
   36ff0:	202d2079 68676968 69727020 7469726f     y - high priorit
   37000:	53492079 73752052 20676e69 63737973     y ISR using sysc
   37010:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   37020:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37030:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   37040:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   37050:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   37060:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37070:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   37080:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   37090:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   370a0:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   370b0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   370c0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   370d0:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   370e0:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   370f0:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   37100:	72656472 73756220 202d2079 68676968     rder busy - high
   37110:	69727020 7469726f 53492079 73752052      priority ISR us
   37120:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   37130:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   37140:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   37150:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   37160:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   37170:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37180:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   37190:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   371a0:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   371b0:	76206469 65756c61 726f6620 74766520     id value for evt
   371c0:	65646f63 00000000 6f636552 72656472     code....Recorder
   371d0:	73756220 202d2079 68676968 69727020      busy - high pri
   371e0:	7469726f 53492079 73752052 20676e69     ority ISR using 
   371f0:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   37200:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37210:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   37220:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   37230:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   37240:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   37250:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   37260:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   37270:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   37280:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   37290:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   372a0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   372b0:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   372c0:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   372d0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   372e0:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   372f0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   37300:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   37310:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   37320:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   37330:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   37340:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37350:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   37360:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   37370:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   37380:	6c617620 66206575 6820726f 6c646e61      value for handl
   37390:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   373a0:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   373b0:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   373c0:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   373d0:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   373e0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   373f0:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   37400:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   37410:	76206469 65756c61 726f6620 00646920     id value for id.
   37420:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37430:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   37440:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   37450:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   37460:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   37470:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37480:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   37490:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   374a0:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   374b0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   374c0:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   374d0:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   374e0:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   374f0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37500:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   37510:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   37520:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   37530:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37540:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   37550:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   37560:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   37570:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37580:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   37590:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   375a0:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   375b0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   375c0:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   375d0:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   375e0:	76206469 65756c61 726f6620 6e616820     id value for han
   375f0:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   37600:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   37610:	69206f74 7865646e 74756f20 65646973     to index outside
   37620:	65766520 6220746e 65666675 00002172      event buffer!..
   37630:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   37640:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   37650:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   37660:	6a626f20 63746365 7373616c 00000000      objectclass....
   37670:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   37680:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   37690:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   376a0:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   376b0:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   376c0:	2070756b 68746977 766e6920 64696c61     kup with invalid
   376d0:	6a626f20 20746365 646e6168 6f20656c      object handle o
   376e0:	626f2072 7463656a 616c6320 00217373     r object class!.
   376f0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37700:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   37710:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   37720:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   37730:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   37740:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   37750:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   37760:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   37770:	626f2072 7463656a 73616c63 00000073     r objectclass...
   37780:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37790:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   377a0:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   377b0:	756c6176 6f662065 61682072 656c646e     value for handle
   377c0:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   377d0:	20656572 65726f6d 6e616820 73656c64     ree more handles
   377e0:	61687420 6c61206e 61636f6c 21646574      than allocated!
   377f0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   37800:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   37810:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   37820:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   37830:	656a626f 63207463 7373616c 206e6920     object class in 
   37840:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   37850:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   37860:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   37870:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   37880:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   37890:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   378a0:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   378b0:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   378c0:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   378d0:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   378e0:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   378f0:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   37900:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   37910:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37920:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   37930:	696c6176 61762064 2065756c 20726f66     valid value for 
   37940:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   37950:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   37960:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   37970:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   37980:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   37990:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   379a0:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   379b0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   379c0:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   379d0:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   379e0:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   379f0:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   37a00:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   37a10:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   37a20:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   37a30:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   37a40:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   37a50:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   37a60:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   37a70:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   37a80:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   37a90:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   37aa0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   37ab0:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   37ac0:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   37ad0:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   37ae0:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   37af0:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   37b00:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   37b10:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   37b20:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   37b30:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   37b40:	00000000 20726d54 00637653 0001d098     ....Tmr Svc.....
   37b50:	0001d098 0001d098 0001d126 0001d0f0     ........&.......
   37b60:	0001d11a 0001d098 0001d098 0001d126     ............&...
   37b70:	0001d0f0                                ....

00037b74 <sd_mmc_trans_units>:
   37b74:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00037b90 <sd_trans_multipliers>:
   37b90:	00000000 0000000a 0000000c 0000000d     ................
   37ba0:	0000000f 00000014 00000019 0000001e     ................
   37bb0:	00000023 00000028 0000002d 00000032     #...(...-...2...
   37bc0:	00000037 0000003c 00000046 00000050     7...<...F...P...

00037bd0 <mmc_trans_multipliers>:
   37bd0:	00000000 0000000a 0000000c 0000000d     ................
   37be0:	0000000f 00000014 0000001a 0000001e     ................
   37bf0:	00000023 00000028 0000002d 00000034     #...(...-...4...
   37c00:	00000037 0000003c 00000046 00000050     7...<...F...P...
   37c10:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37c20:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   37c30:	6320746c 000a646d 0000000d              lt cmd......

00037c3c <__FUNCTION__.17099>:
   37c3c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   37c4c:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   37c5c:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   37c6c:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   37c7c:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   37c8c:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   37c9c:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   37cac:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   37cbc:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   37ccc:	66696828 64612029 73657264 75622073     (hif) address bu
   37cdc:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   37cec:	70757272 20646574 6b636170 53207465     rrupted packet S
   37cfc:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   37d0c:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   37d1c:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   37d2c:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   37d3c:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   37d4c:	63207465 626c6c61 206b6361 6e207369     et callback is n
   37d5c:	7220746f 73696765 65726574 00000a64     ot registered...
   37d6c:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   37d7c:	20746f6e 69676572 72657473 000a6465     not registered..
   37d8c:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   37d9c:	6e207369 7220746f 73696765 65726574     is not registere
   37dac:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   37dbc:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   37dcc:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   37ddc:	696c6176 72672064 2070756f 000a4449     valid group ID..
   37dec:	66696828 6f682029 61207473 64207070     (hif) host app d
   37dfc:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   37e0c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   37e1c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   37e2c:	66696828 61462029 2065736c 65746e69     (hif) False inte
   37e3c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   37e4c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   37e5c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   37e6c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   37e7c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   37e8c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   37e9c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   37eac:	696c6176 72612064 656d7567 000a746e     valid argument..
   37ebc:	20505041 75716552 65747365 69532064     APP Requested Si
   37ecc:	6920657a 616c2073 72656772 61687420     ze is larger tha
   37edc:	6874206e 65722065 65766963 75622064     n the recived bu
   37eec:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   37efc:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   37f0c:	65747365 64412064 73657264 65622073     ested Address be
   37f1c:	646e6f79 65687420 63657220 64657669     yond the recived
   37f2c:	66756220 20726566 72646461 20737365      buffer address 
   37f3c:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   37f4c:	6425203f 0000000a 00021238 00021208     ? %d....8.......
   37f5c:	00021200 00021218 00021210 00021230     ............0...
   37f6c:	00021220 00021228                        ...(...

00037f74 <__FUNCTION__.17967>:
   37f74:	5f666968 646e6573 00000000              hif_send....

00037f80 <__FUNCTION__.17977>:
   37f80:	5f666968 00727369                       hif_isr.

00037f88 <__FUNCTION__.17986>:
   37f88:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00037f98 <__FUNCTION__.17998>:
   37f98:	5f666968 65636572 00657669              hif_receive.

00037fa4 <__FUNCTION__.18014>:
   37fa4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   37fb4:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   37fc4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   37fd4:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   37fe4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37ff4:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   38004:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   38014:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   38024:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   38034:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   38044:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   38054:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   38064:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   38074:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   38084:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   38094:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   380a4:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   380b4:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   380c4:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   380d4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   380e4:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   380f4:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   38104:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   38114:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   38124:	73747365 72657020 61637320 6c73206e     ests per scan sl
   38134:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   38144:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   38154:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   38164:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   38174:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   38184:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   38194:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   381a4:	6e694d20 69726420 20726576 20726576      Min driver ver 
   381b4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   381c4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   381d4:	0000000a 343a3930 37323a34 00000000     ....09:44:27....
   381e4:	2079614d 32203520 00333230 76697244     May  5 2023.Driv
   381f4:	62207265 746c6975 20746120 25097325     er built at %s.%
   38204:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   38214:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   38224:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   38234:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   38244:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   38254:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   38264:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   38274:	2079656b 65646e69 64252078 0000000a     key index %d....
   38284:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   38294:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   382a4:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   382b4:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   382c4:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   382d4:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   382e4:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   382f4:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   38304:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   38314:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   38324:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   38334:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   38344:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   38354:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   38364:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   38374:	66754220 0a726566 00000000               Buffer.....

00038380 <__FUNCTION__.17949>:
   38380:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0003838c <__FUNCTION__.17978>:
   3838c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0003839c <__FUNCTION__.18009>:
   3839c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   383ac:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   383bc:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   383cc:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   383dc:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   383ec:	2070756b 20656874 70696863 0000000a     kup the chip....
   383fc:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3840c:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3841c:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3842c:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003843c <__FUNCTION__.17806>:
   3843c:	70696863 6b61775f 00000065              chip_wake...

00038448 <__FUNCTION__.17855>:
   38448:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   38458:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   38468:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   38478:	6e69206c 62207469 000a7375 0000000d     l init bus......
   38488:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   38498:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   384a8:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   384b8:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   384c8:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   384d8:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   384e8:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   384f8:	69642068 6c626173 61662065 000a6c69     h disable fail..
   38508:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   38518:	696e6920 75622074 00000a73               init bus...

00038524 <__FUNCTION__.17853>:
   38524:	645f6d6e 695f7672 0074696e              nm_drv_init.

00038530 <__FUNCTION__.17860>:
   38530:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00038540 <crc7_syndrome_table>:
   38540:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   38550:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   38560:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   38570:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   38580:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   38590:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   385a0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   385b0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   385c0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   385d0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   385e0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   385f0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   38600:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   38610:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   38620:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   38630:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   38640:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   38650:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   38660:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   38670:	73756220 72726520 2e2e726f 00000a2e      bus error......
   38680:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38690:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   386a0:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   386b0:	656c6961 61642064 72206174 6f707365     ailed data respo
   386c0:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   386d0:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   386e0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   386f0:	72206573 2c646165 73756220 72726520     se read, bus err
   38700:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   38710:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   38720:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   38730:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   38740:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   38750:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   38760:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   38770:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38780:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   38790:	70736572 65736e6f 61747320 28206574     response state (
   387a0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   387b0:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   387c0:	20646165 70736572 65736e6f 30252820     ead response (%0
   387d0:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   387e0:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   387f0:	6877206e 72206e65 69646165 6420676e     n when reading d
   38800:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   38810:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   38820:	6877206e 72206e65 69646165 6320676e     n when reading c
   38830:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   38840:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   38850:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   38860:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   38870:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   38880:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   38890:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   388a0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   388b0:	656c6961 61642064 72206174 6f707365     ailed data respo
   388c0:	2065736e 64616572 7562202c 72652073     nse read, bus er
   388d0:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   388e0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   388f0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   38900:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   38910:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   38920:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   38930:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   38940:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   38950:	61642064 62206174 6b636f6c 69727720     d data block wri
   38960:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   38970:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38980:	656c6961 61642064 62206174 6b636f6c     ailed data block
   38990:	63726320 69727720 202c6574 20737562      crc write, bus 
   389a0:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   389b0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   389c0:	77202c64 65746972 67657220 30252820     d, write reg (%0
   389d0:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   389e0:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   389f0:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   38a00:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   38a10:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   38a20:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38a30:	656c6961 6c622064 206b636f 61746164     ailed block data
   38a40:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   38a50:	6e612074 65722064 20797274 25206425     t and retry %d %
   38a60:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   38a70:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   38a80:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   38a90:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   38aa0:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   38ab0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   38ac0:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   38ad0:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   38ae0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38af0:	6e726574 72206c61 20646165 746f7270     ternal read prot
   38b00:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   38b10:	6572202c 69727974 7720676e 20687469     , retyring with 
   38b20:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   38b30:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38b40:	6e726574 72206c61 20646165 746f7270     ternal read prot
   38b50:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   38b60:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38b70:	6e726574 77206c61 65746972 6f727020     ternal write pro
   38b80:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   38b90:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   38ba0:	20646d63 64616572 69686320 64692070     cmd read chip id
   38bb0:	0a2e2e2e 00000000 00022e60 00022e60     ........`...`...
   38bc0:	00022ef0 00022db4 00022dfa 00022e1c     .....-...-......
   38bd0:	00022ea2 00022ea2 00022f5c 00022d88     ........\/...-..
   38be0:	00022fb6 00022fb6 00022fb6 00022fb6     ./.../.../.../..
   38bf0:	00022e3e 000233c0 000233c0 00023448     >....3...3..H4..
   38c00:	00023324 00023366 00023384 000233fe     $3..f3...3...3..
   38c10:	000233fe 000234aa 000232fc 000234fa     .3...4...2...4..
   38c20:	000234fa 000234fa 000234fa 000233a2     .4...4...4...3..

00038c30 <__FUNCTION__.17128>:
   38c30:	5f697073 00646d63                       spi_cmd.

00038c38 <__FUNCTION__.17135>:
   38c38:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00038c48 <__FUNCTION__.17144>:
   38c48:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00038c54 <__FUNCTION__.17177>:
   38c54:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   38c64:	00000000                                ....

00038c68 <__FUNCTION__.17223>:
   38c68:	5f697073 61746164 6972775f 00006574     spi_data_write..

00038c78 <__FUNCTION__.17235>:
   38c78:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00038c88 <__FUNCTION__.17246>:
   38c88:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00038c98 <__FUNCTION__.17258>:
   38c98:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00038ca8 <__FUNCTION__.17269>:
   38ca8:	735f6d6e 725f6970 00646165              nm_spi_read.

00038cb4 <__FUNCTION__.17290>:
   38cb4:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   38cc4:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   38cd4:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   38ce4:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   38cf4:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   38d04:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   38d14:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   38d24:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   38d34:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   38d44:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   38d54:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   38d64:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   38d74:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   38d84:	22302074 00000000                       t 0"....

00038d8c <lun_desc>:
   38d8c:	0001eabd 0001eb15 0001eb61 0001ebad     ........a.......
   38d9c:	0001ebdd 0001ec61 0001ecf1 00038d74     ....a.......t...
   38dac:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   38dbc:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   38dcc:	00028dde 00028e58 00028e58 00028dfc     ....X...X.......
   38ddc:	00028df6 00028e02 00028de4 00028e08     ................
   38dec:	00028e3e 00029040 00029090 00029090     >...@...........
   38dfc:	0002908c 00029032 00029052 00029022     ....2...R..."...
   38e0c:	00029064 00029076 000290de 0002910c     d...v...........
   38e1c:	0002910c 00029108 000290d8 000290e4     ................
   38e2c:	000290d2 000290ea 000290f0              ............

00038e38 <tcc_modules>:
   38e38:	42002000 42002400 42002800              . .B.$.B.(.B

00038e44 <_tcc_gclk_ids>:
   38e44:	001b1a1a                                ....

00038e48 <_tcc_apbcmasks>:
   38e48:	00000100 00000200 00000400              ............

00038e54 <_tcc_maxs>:
   38e54:	00ffffff 00ffffff 0000ffff              ............

00038e60 <_tcc_cc_nums>:
   38e60:	00020204                                ....

00038e64 <_tcc_ow_nums>:
   38e64:	00020408                                ....

00038e68 <_tcc_intflag>:
   38e68:	00000001 00000002 00000004 00000008     ................
   38e78:	00001000 00002000 00004000 00008000     ..... ...@......
   38e88:	00010000 00020000 00040000 00080000     ................

00038e98 <LfnOfs>:
   38e98:	07050301 12100e09 1c181614 0000001e     ................
   38ea8:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   38eb8:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   38ec8:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   38ed8:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   38ee8:	20205441 00202020                       AT     .

00038ef0 <excvt.4558>:
   38ef0:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   38f00:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   38f10:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   38f20:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   38f30:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   38f40:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   38f50:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   38f60:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00038f70 <Tbl>:
   38f70:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   38f80:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   38f90:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   38fa0:	00d600ff 00f800dc 00d800a3 019200d7     ................
   38fb0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   38fc0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   38fd0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   38fe0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   38ff0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   39000:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   39010:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   39020:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   39030:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   39040:	00da00de 00d900db 00dd00fd 00b400af     ................
   39050:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   39060:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00039070 <tbl_lower.4308>:
   39070:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   39080:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   39090:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   390a0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   390b0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   390c0:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   390d0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   390e0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   390f0:	01050103 01090107 010d010b 0111010f     ................
   39100:	01150113 01190117 011d011b 0121011f     ..............!.
   39110:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   39120:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   39130:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   39140:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   39150:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   39160:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   39170:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   39180:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   39190:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   391a0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   391b0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   391c0:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   391d0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   391e0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   391f0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   39200:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   39210:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   39220:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   39230:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   39240:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00039250 <tbl_upper.4309>:
   39250:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   39260:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   39270:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   39280:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   39290:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   392a0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   392b0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   392c0:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   392d0:	01040102 01080106 010c010a 0110010e     ................
   392e0:	01140112 01180116 011c011a 0120011e     .............. .
   392f0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   39300:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   39310:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   39320:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   39330:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   39340:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   39350:	03940393 03960395 03980397 039a0399     ................
   39360:	039c039b 039e039d 03a0039f 03a303a1     ................
   39370:	03a503a4 03a703a6 03a903a8 041003aa     ................
   39380:	04120411 04140413 04160415 04180417     ................
   39390:	041a0419 041c041b 041e041d 0420041f     .............. .
   393a0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   393b0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   393c0:	04030402 04050404 04070406 04090408     ................
   393d0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   393e0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   393f0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   39400:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   39410:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   39420:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   39430:	0002e44a 0002e44a 0002e44a 0002e2d8     J...J...J.......
   39440:	0002e44a 0002e3c2 0002e44a 0002e44a     J.......J...J...
   39450:	0002e44a 0002e44a 0002e44a 0002e44a     J...J...J...J...
   39460:	0002e44a 0002e43c 4354514d 00000000     J...<...MQTC....
   39470:	00000004 00000000 00000000 00000000     ................
   39480:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   394c0:	4354514d 00000000 00000004 00000000     MQTC............
	...
   394d8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   39518:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   39528:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   39538:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   39548:	20544547 00000000 54534f50 00000020     GET ....POST ...
   39558:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   39568:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   39578:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   39588:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   39598:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   395a8:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   395b8:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   395c8:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   395d8:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   395e8:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   395f8:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   39608:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   39618:	676e654c 203a6874 00000000 33323130     Length: ....0123
   39628:	37363534 62613938 66656463 6e617254     456789abcdefTran
   39638:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   39648:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   39658:	50545448 0000002f 00000d31 0003053e     HTTP/...1...>...
   39668:	00030538 00030532 0003052c 00030544     8...2...,...D...
   39678:	00030526 00030544 00030520 0003051a     &...D... .......
   39688:	00030544 00030514 00030514 0003050e     D...............
   39698:	00030508 00030502 42002000 42002400     ......... .B.$.B
   396a8:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   396b8:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   396c8:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   396d8:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   396e8:	6f727245 6e692072 61697469 697a696c     Error initializi
   396f8:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   39708:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   39718:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   39728:	74696e49 696c6169 676e6973 696f7320     Initialising soi
   39738:	504e206c 6573204b 726f736e 00000a0d     l NPK sensor....
   39748:	6c696f53 4b504e20 6e657320 20726f73     Soil NPK sensor 
   39758:	74696e69 696c6169 0d646573 0000000a     initialised.....
   39768:	70616548 66656220 2065726f 72617473     Heap before star
   39778:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   39788:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   39798:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   397a8:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   397b8:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   397c8:	74666120 73207265 74726174 20676e69      after starting 
   397d8:	3a494c43 0d642520 0000000a 49464957     CLI: %d.....WIFI
   397e8:	5341545f 0000004b 3a525245 46495720     _TASK...ERR: WIF
   397f8:	61742049 63206b73 646c756f 746f6e20     I task could not
   39808:	20656220 74696e69 696c6169 2164657a      be initialized!
   39818:	00000a0d 70616548 74666120 73207265     ....Heap after s
   39828:	74726174 20676e69 49464957 6425203a     tarting WIFI: %d
   39838:	00000a0d 4e414c50 54415754 545f5245     ....PLANTWATER_T
   39848:	004b5341 3a525245 616c5020 5720746e     ASK.ERR: Plant W
   39858:	72657461 20676e69 6b736174 756f6320     atering task cou
   39868:	6e20646c 6220746f 6e692065 61697469     ld not be initia
   39878:	657a696c 0a0d2164 00000000 70616548     lized!......Heap
   39888:	74666120 73207265 74726174 20676e69      after starting 
   39898:	6e616c50 61572074 69726574 203a676e     Plant Watering: 
   398a8:	0a0d6425 00000000 70616548 74666120     %d......Heap aft
   398b8:	73207265 74726174 20676e69 54204955     er starting UI T
   398c8:	3a6b7361 0d642520 0000000a 6f727245     ask: %d.....Erro
   398d8:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
   398e8:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
   398f8:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
   39908:	61747320 6f206b63 66726576 20776f6c      stack overflow 
   39918:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
   39928:	000326b0 00032600 00032600 000325fe     .&...&...&...%..
   39938:	000326a2 000326a2 00032698 000325fe     .&...&...&...%..
   39948:	000326a2 00032698 000326a2 000325fe     .&...&...&...%..
   39958:	000326a8 000326a8 000326a8 00032738     .&...&...&..8'..
   39968:	0003301c 00032ffe 00032fb8 00032ed6     .0.../.../......
   39978:	00032fb8 00032ff0 00032fb8 00032ed6     ./.../.../......
   39988:	00032ffe 00032ffe 00032ff0 00032ed6     ./.../.../......
   39998:	00032ece 00032ece 00032ece 00033234     ............42..
   399a8:	0003367c 0003353c 0003353c 00033538     |6..<5..<5..85..
   399b8:	00033654 00033654 00033646 00033538     T6..T6..F6..85..
   399c8:	00033654 00033646 00033654 00033538     T6..F6..T6..85..
   399d8:	0003365c 0003365c 0003365c 00033860     \6..\6..\6..`8..

000399e8 <_global_impure_ptr>:
   399e8:	2000012c                                ,.. 

000399ec <__sf_fake_stderr>:
	...

00039a0c <__sf_fake_stdin>:
	...

00039a2c <__sf_fake_stdout>:
	...
   39a4c:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   39a5c:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   39a6c:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   39a7c:	37363534 62613938 66656463 20200000              456789abcdef.

00039a89 <_ctype_>:
   39a89:	20202000 20202020 28282020 20282828     .         ((((( 
   39a99:	20202020 20202020 20202020 20202020                     
   39aa9:	10108820 10101010 10101010 10101010      ...............
   39ab9:	04040410 04040404 10040404 10101010     ................
   39ac9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   39ad9:	01010101 01010101 01010101 10101010     ................
   39ae9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   39af9:	02020202 02020202 02020202 10101010     ................
   39b09:	00000020 00000000 00000000 00000000      ...............
	...

00039b8c <_init>:
   39b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39b8e:	46c0      	nop			; (mov r8, r8)
   39b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39b92:	bc08      	pop	{r3}
   39b94:	469e      	mov	lr, r3
   39b96:	4770      	bx	lr

00039b98 <__init_array_start>:
   39b98:	000120dd 	.word	0x000120dd

00039b9c <_fini>:
   39b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39b9e:	46c0      	nop			; (mov r8, r8)
   39ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39ba2:	bc08      	pop	{r3}
   39ba4:	469e      	mov	lr, r3
   39ba6:	4770      	bx	lr

00039ba8 <__fini_array_start>:
   39ba8:	000120b5 	.word	0x000120b5
